
C:\Users\habeeba\AppData\Local\Temp\VMBuilds\tworks_o2_cons\MightyCore_1284\Release/tworks_o2_cons.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__ctors_end>
       4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
       8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
       c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      14:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      1c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      20:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      24:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      28:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      2c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      30:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      34:	0c 94 4c 05 	jmp	0xa98	; 0xa98 <__vector_13>
      38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      3c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      44:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      48:	0c 94 1f 10 	jmp	0x203e	; 0x203e <__vector_18>
      4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      50:	0c 94 07 13 	jmp	0x260e	; 0x260e <__vector_20>
      54:	0c 94 3d 13 	jmp	0x267a	; 0x267a <__vector_21>
      58:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      5c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      60:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      68:	0c 94 fa 0e 	jmp	0x1df4	; 0x1df4 <__vector_26>
      6c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      70:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      74:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      78:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      7c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      80:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      84:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      88:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	30 2e       	mov	r3, r16
      8e:	33 2e       	mov	r3, r19
      90:	31 00       	.word	0x0031	; ????

00000092 <digital_pin_to_timer_PGM>:
      92:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

000000b2 <digital_pin_to_bit_mask_PGM>:
      b2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
      c2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000000d2 <digital_pin_to_port_PGM>:
      d2:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
      e2:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

000000f2 <port_to_input_PGM>:
      f2:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

000000fc <port_to_output_PGM>:
      fc:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

00000106 <port_to_mode_PGM>:
     106:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

00000110 <__ctors_start>:
__ctors_start():
     110:	6a 09       	sbc	r22, r10
     112:	eb 0d       	add	r30, r11
     114:	71 13       	cpse	r23, r17

00000116 <__ctors_end>:
__dtors_end():
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d0 e4       	ldi	r29, 0x40	; 64
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     122:	14 e0       	ldi	r17, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     124:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     126:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     128:	e0 ed       	ldi	r30, 0xD0	; 208
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     12a:	f6 e3       	ldi	r31, 0x36	; 54
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     12c:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     12e:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     132:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     134:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     136:	ae 37       	cpi	r26, 0x7E	; 126
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     138:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     13c:	26 e0       	ldi	r18, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     13e:	ae e7       	ldi	r26, 0x7E	; 126
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     140:	b4 e0       	ldi	r27, 0x04	; 4
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     146:	a9 37       	cpi	r26, 0x79	; 121
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     148:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>

0000014c <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     14c:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     14e:	cb e8       	ldi	r28, 0x8B	; 139
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     150:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     152:	04 c0       	rjmp	.+8      	; 0x15c <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     154:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     156:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     158:	0e 94 86 18 	call	0x310c	; 0x310c <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     15c:	c8 38       	cpi	r28, 0x88	; 136
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     15e:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     160:	c9 f7       	brne	.-14     	; 0x154 <__do_global_ctors+0x8>
     162:	0e 94 9f 13 	call	0x273e	; 0x273e <main>
     166:	0c 94 66 1b 	jmp	0x36cc	; 0x36cc <_exit>

0000016a <__bad_interrupt>:
__vector_22():
     16a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016e <log_dump()>:
_Z8log_dumpv():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:289

    lcd.clear();
    lcd.setCursor(0, 3);
    //  "1.3.5.7.9.........20"
    lcd.print("Testing over...!!   ");
    new_delay_msecs (2000);
     16e:	0f 93       	push	r16
     170:	1f 93       	push	r17
     172:	cf 93       	push	r28
     174:	df 93       	push	r29
     176:	20 91 ed 04 	lds	r18, 0x04ED	; 0x8004ed <systemtick_secs>
     17a:	90 91 ec 04 	lds	r25, 0x04EC	; 0x8004ec <systemtick_mins>
     17e:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <systemtick_hrs>
     182:	1f 92       	push	r1
     184:	2f 93       	push	r18
     186:	1f 92       	push	r1
     188:	9f 93       	push	r25
     18a:	1f 92       	push	r1
     18c:	8f 93       	push	r24
     18e:	0c e1       	ldi	r16, 0x1C	; 28
     190:	11 e0       	ldi	r17, 0x01	; 1
     192:	1f 93       	push	r17
     194:	0f 93       	push	r16
     196:	c4 ea       	ldi	r28, 0xA4	; 164
     198:	d4 e0       	ldi	r29, 0x04	; 4
     19a:	df 93       	push	r29
     19c:	cf 93       	push	r28
     19e:	0e 94 8f 18 	call	0x311e	; 0x311e <sprintf>
     1a2:	be 01       	movw	r22, r28
     1a4:	8c ed       	ldi	r24, 0xDC	; 220
     1a6:	95 e0       	ldi	r25, 0x05	; 5
     1a8:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     1ac:	e0 91 dc 04 	lds	r30, 0x04DC	; 0x8004dc <production_time_secs>
     1b0:	f0 91 dd 04 	lds	r31, 0x04DD	; 0x8004dd <production_time_secs+0x1>
     1b4:	2c e3       	ldi	r18, 0x3C	; 60
     1b6:	30 e0       	ldi	r19, 0x00	; 0
     1b8:	cf 01       	movw	r24, r30
     1ba:	b9 01       	movw	r22, r18
     1bc:	0e 94 50 18 	call	0x30a0	; 0x30a0 <__udivmodhi4>
     1c0:	9f 93       	push	r25
     1c2:	8f 93       	push	r24
     1c4:	cf 01       	movw	r24, r30
     1c6:	60 e1       	ldi	r22, 0x10	; 16
     1c8:	7e e0       	ldi	r23, 0x0E	; 14
     1ca:	0e 94 50 18 	call	0x30a0	; 0x30a0 <__udivmodhi4>
     1ce:	46 2f       	mov	r20, r22
     1d0:	e7 2f       	mov	r30, r23
     1d2:	b9 01       	movw	r22, r18
     1d4:	0e 94 50 18 	call	0x30a0	; 0x30a0 <__udivmodhi4>
     1d8:	7f 93       	push	r23
     1da:	6f 93       	push	r22
     1dc:	ef 93       	push	r30
     1de:	4f 93       	push	r20
     1e0:	1f 93       	push	r17
     1e2:	0f 93       	push	r16
     1e4:	df 93       	push	r29
     1e6:	cf 93       	push	r28
     1e8:	0e 94 8f 18 	call	0x311e	; 0x311e <sprintf>
     1ec:	be 01       	movw	r22, r28
     1ee:	8c ed       	ldi	r24, 0xDC	; 220
     1f0:	95 e0       	ldi	r25, 0x05	; 5
     1f2:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     1f6:	40 91 d8 04 	lds	r20, 0x04D8	; 0x8004d8 <Production_Delay>
     1fa:	50 91 d9 04 	lds	r21, 0x04D9	; 0x8004d9 <Production_Delay+0x1>
     1fe:	60 91 da 04 	lds	r22, 0x04DA	; 0x8004da <Production_Delay+0x2>
     202:	70 91 db 04 	lds	r23, 0x04DB	; 0x8004db <Production_Delay+0x3>
     206:	2a e0       	ldi	r18, 0x0A	; 10
     208:	30 e0       	ldi	r19, 0x00	; 0
     20a:	8c ed       	ldi	r24, 0xDC	; 220
     20c:	95 e0       	ldi	r25, 0x05	; 5
     20e:	0e 94 f7 14 	call	0x29ee	; 0x29ee <Print::print(unsigned long, int)>
     212:	6b e1       	ldi	r22, 0x1B	; 27
     214:	74 e0       	ldi	r23, 0x04	; 4
     216:	8c ed       	ldi	r24, 0xDC	; 220
     218:	95 e0       	ldi	r25, 0x05	; 5
     21a:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     21e:	40 91 d4 04 	lds	r20, 0x04D4	; 0x8004d4 <Flush_Delay>
     222:	50 91 d5 04 	lds	r21, 0x04D5	; 0x8004d5 <Flush_Delay+0x1>
     226:	60 91 d6 04 	lds	r22, 0x04D6	; 0x8004d6 <Flush_Delay+0x2>
     22a:	70 91 d7 04 	lds	r23, 0x04D7	; 0x8004d7 <Flush_Delay+0x3>
     22e:	2a e0       	ldi	r18, 0x0A	; 10
     230:	30 e0       	ldi	r19, 0x00	; 0
     232:	8c ed       	ldi	r24, 0xDC	; 220
     234:	95 e0       	ldi	r25, 0x05	; 5
     236:	0e 94 f7 14 	call	0x29ee	; 0x29ee <Print::print(unsigned long, int)>
     23a:	6b e1       	ldi	r22, 0x1B	; 27
     23c:	74 e0       	ldi	r23, 0x04	; 4
     23e:	8c ed       	ldi	r24, 0xDC	; 220
     240:	95 e0       	ldi	r25, 0x05	; 5
     242:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     246:	40 91 d0 04 	lds	r20, 0x04D0	; 0x8004d0 <PreCharge_Delay>
     24a:	50 91 d1 04 	lds	r21, 0x04D1	; 0x8004d1 <PreCharge_Delay+0x1>
     24e:	60 91 d2 04 	lds	r22, 0x04D2	; 0x8004d2 <PreCharge_Delay+0x2>
     252:	70 91 d3 04 	lds	r23, 0x04D3	; 0x8004d3 <PreCharge_Delay+0x3>
     256:	2a e0       	ldi	r18, 0x0A	; 10
     258:	30 e0       	ldi	r19, 0x00	; 0
     25a:	8c ed       	ldi	r24, 0xDC	; 220
     25c:	95 e0       	ldi	r25, 0x05	; 5
     25e:	0e 94 f7 14 	call	0x29ee	; 0x29ee <Print::print(unsigned long, int)>
     262:	6b e1       	ldi	r22, 0x1B	; 27
     264:	74 e0       	ldi	r23, 0x04	; 4
     266:	8c ed       	ldi	r24, 0xDC	; 220
     268:	95 e0       	ldi	r25, 0x05	; 5
     26a:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     26e:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <do_byte>
     272:	82 fb       	bst	r24, 2
     274:	99 27       	eor	r25, r25
     276:	90 f9       	bld	r25, 0
     278:	1f 92       	push	r1
     27a:	9f 93       	push	r25
     27c:	81 fb       	bst	r24, 1
     27e:	99 27       	eor	r25, r25
     280:	90 f9       	bld	r25, 0
     282:	1f 92       	push	r1
     284:	9f 93       	push	r25
     286:	81 70       	andi	r24, 0x01	; 1
     288:	1f 92       	push	r1
     28a:	8f 93       	push	r24
     28c:	0c e2       	ldi	r16, 0x2C	; 44
     28e:	11 e0       	ldi	r17, 0x01	; 1
     290:	1f 93       	push	r17
     292:	0f 93       	push	r16
     294:	df 93       	push	r29
     296:	cf 93       	push	r28
     298:	0e 94 8f 18 	call	0x311e	; 0x311e <sprintf>
     29c:	be 01       	movw	r22, r28
     29e:	8c ed       	ldi	r24, 0xDC	; 220
     2a0:	95 e0       	ldi	r25, 0x05	; 5
     2a2:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     2a6:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <o2_raw_adc_count>
     2aa:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <o2_raw_adc_count+0x1>
     2ae:	4a e0       	ldi	r20, 0x0A	; 10
     2b0:	50 e0       	ldi	r21, 0x00	; 0
     2b2:	8c ed       	ldi	r24, 0xDC	; 220
     2b4:	95 e0       	ldi	r25, 0x05	; 5
     2b6:	0e 94 de 14 	call	0x29bc	; 0x29bc <Print::print(int, int)>
     2ba:	6b e1       	ldi	r22, 0x1B	; 27
     2bc:	74 e0       	ldi	r23, 0x04	; 4
     2be:	8c ed       	ldi	r24, 0xDC	; 220
     2c0:	95 e0       	ldi	r25, 0x05	; 5
     2c2:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     2c6:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <m_raw_voltage>
     2ca:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <m_raw_voltage+0x1>
     2ce:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <m_raw_voltage+0x2>
     2d2:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <m_raw_voltage+0x3>
     2d6:	22 e0       	ldi	r18, 0x02	; 2
     2d8:	30 e0       	ldi	r19, 0x00	; 0
     2da:	8c ed       	ldi	r24, 0xDC	; 220
     2dc:	95 e0       	ldi	r25, 0x05	; 5
     2de:	0e 94 00 16 	call	0x2c00	; 0x2c00 <Print::print(double, int)>
     2e2:	6b e1       	ldi	r22, 0x1B	; 27
     2e4:	74 e0       	ldi	r23, 0x04	; 4
     2e6:	8c ed       	ldi	r24, 0xDC	; 220
     2e8:	95 e0       	ldi	r25, 0x05	; 5
     2ea:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     2ee:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <o2_concentration>
     2f2:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <o2_concentration+0x1>
     2f6:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <o2_concentration+0x2>
     2fa:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <o2_concentration+0x3>
     2fe:	22 e0       	ldi	r18, 0x02	; 2
     300:	30 e0       	ldi	r19, 0x00	; 0
     302:	8c ed       	ldi	r24, 0xDC	; 220
     304:	95 e0       	ldi	r25, 0x05	; 5
     306:	0e 94 00 16 	call	0x2c00	; 0x2c00 <Print::print(double, int)>
     30a:	6b e1       	ldi	r22, 0x1B	; 27
     30c:	74 e0       	ldi	r23, 0x04	; 4
     30e:	8c ed       	ldi	r24, 0xDC	; 220
     310:	95 e0       	ldi	r25, 0x05	; 5
     312:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     316:	1f 92       	push	r1
     318:	83 e0       	ldi	r24, 0x03	; 3
     31a:	8f 93       	push	r24
     31c:	1f 92       	push	r1
     31e:	82 e0       	ldi	r24, 0x02	; 2
     320:	8f 93       	push	r24
     322:	1f 92       	push	r1
     324:	81 e0       	ldi	r24, 0x01	; 1
     326:	8f 93       	push	r24
     328:	1f 93       	push	r17
     32a:	0f 93       	push	r16
     32c:	df 93       	push	r29
     32e:	cf 93       	push	r28
     330:	0e 94 8f 18 	call	0x311e	; 0x311e <sprintf>
     334:	8d b7       	in	r24, 0x3d	; 61
     336:	9e b7       	in	r25, 0x3e	; 62
     338:	88 96       	adiw	r24, 0x28	; 40
     33a:	0f b6       	in	r0, 0x3f	; 63
     33c:	f8 94       	cli
     33e:	9e bf       	out	0x3e, r25	; 62
     340:	0f be       	out	0x3f, r0	; 63
     342:	8d bf       	out	0x3d, r24	; 61
     344:	be 01       	movw	r22, r28
     346:	8c ed       	ldi	r24, 0xDC	; 220
     348:	95 e0       	ldi	r25, 0x05	; 5
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	1f 91       	pop	r17
     350:	0f 91       	pop	r16
     352:	0c 94 33 14 	jmp	0x2866	; 0x2866 <Print::println(char const*)>

00000356 <logs_task()>:
_Z9logs_taskv():
     356:	8f 92       	push	r8
     358:	9f 92       	push	r9
     35a:	af 92       	push	r10
     35c:	bf 92       	push	r11
     35e:	cf 92       	push	r12
     360:	df 92       	push	r13
     362:	ef 92       	push	r14
     364:	ff 92       	push	r15
     366:	80 91 e3 04 	lds	r24, 0x04E3	; 0x8004e3 <f_sec_logs_task>
     36a:	88 23       	and	r24, r24
     36c:	79 f0       	breq	.+30     	; 0x38c <logs_task()+0x36>
     36e:	10 92 e3 04 	sts	0x04E3, r1	; 0x8004e3 <f_sec_logs_task>
     372:	80 91 a2 04 	lds	r24, 0x04A2	; 0x8004a2 <logs_task()::log_period>
     376:	90 91 a3 04 	lds	r25, 0x04A3	; 0x8004a3 <logs_task()::log_period+0x1>
     37a:	01 96       	adiw	r24, 0x01	; 1
     37c:	83 30       	cpi	r24, 0x03	; 3
     37e:	91 05       	cpc	r25, r1
     380:	0c f0       	brlt	.+2      	; 0x384 <logs_task()+0x2e>
     382:	41 c0       	rjmp	.+130    	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     384:	90 93 a3 04 	sts	0x04A3, r25	; 0x8004a3 <logs_task()::log_period+0x1>
     388:	80 93 a2 04 	sts	0x04A2, r24	; 0x8004a2 <logs_task()::log_period>
     38c:	80 90 18 01 	lds	r8, 0x0118	; 0x800118 <o2_concentration>
     390:	90 90 19 01 	lds	r9, 0x0119	; 0x800119 <o2_concentration+0x1>
     394:	a0 90 1a 01 	lds	r10, 0x011A	; 0x80011a <o2_concentration+0x2>
     398:	b0 90 1b 01 	lds	r11, 0x011B	; 0x80011b <o2_concentration+0x3>
     39c:	a5 01       	movw	r20, r10
     39e:	94 01       	movw	r18, r8
     3a0:	60 91 9e 04 	lds	r22, 0x049E	; 0x80049e <logs_task()::last_o2_concentration>
     3a4:	70 91 9f 04 	lds	r23, 0x049F	; 0x80049f <logs_task()::last_o2_concentration+0x1>
     3a8:	80 91 a0 04 	lds	r24, 0x04A0	; 0x8004a0 <logs_task()::last_o2_concentration+0x2>
     3ac:	90 91 a1 04 	lds	r25, 0x04A1	; 0x8004a1 <logs_task()::last_o2_concentration+0x3>
     3b0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__subsf3>
     3b4:	6b 01       	movw	r12, r22
     3b6:	7c 01       	movw	r14, r24
     3b8:	20 e0       	ldi	r18, 0x00	; 0
     3ba:	30 e0       	ldi	r19, 0x00	; 0
     3bc:	a9 01       	movw	r20, r18
     3be:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <__gesf2>
     3c2:	18 16       	cp	r1, r24
     3c4:	24 f0       	brlt	.+8      	; 0x3ce <logs_task()+0x78>
     3c6:	f7 fa       	bst	r15, 7
     3c8:	f0 94       	com	r15
     3ca:	f7 f8       	bld	r15, 7
     3cc:	f0 94       	com	r15
     3ce:	2a e9       	ldi	r18, 0x9A	; 154
     3d0:	39 e9       	ldi	r19, 0x99	; 153
     3d2:	49 e9       	ldi	r20, 0x99	; 153
     3d4:	5e e3       	ldi	r21, 0x3E	; 62
     3d6:	c7 01       	movw	r24, r14
     3d8:	b6 01       	movw	r22, r12
     3da:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <__gesf2>
     3de:	87 fd       	sbrc	r24, 7
     3e0:	17 c0       	rjmp	.+46     	; 0x410 <__LOCK_REGION_LENGTH__+0x10>
     3e2:	80 92 9e 04 	sts	0x049E, r8	; 0x80049e <logs_task()::last_o2_concentration>
     3e6:	90 92 9f 04 	sts	0x049F, r9	; 0x80049f <logs_task()::last_o2_concentration+0x1>
     3ea:	a0 92 a0 04 	sts	0x04A0, r10	; 0x8004a0 <logs_task()::last_o2_concentration+0x2>
     3ee:	b0 92 a1 04 	sts	0x04A1, r11	; 0x8004a1 <logs_task()::last_o2_concentration+0x3>
     3f2:	ff 90       	pop	r15
     3f4:	ef 90       	pop	r14
     3f6:	df 90       	pop	r13
     3f8:	cf 90       	pop	r12
     3fa:	bf 90       	pop	r11
     3fc:	af 90       	pop	r10
     3fe:	9f 90       	pop	r9
     400:	8f 90       	pop	r8
     402:	0c 94 b7 00 	jmp	0x16e	; 0x16e <log_dump()>
     406:	10 92 a3 04 	sts	0x04A3, r1	; 0x8004a3 <logs_task()::log_period+0x1>
     40a:	10 92 a2 04 	sts	0x04A2, r1	; 0x8004a2 <logs_task()::log_period>
     40e:	be cf       	rjmp	.-132    	; 0x38c <logs_task()+0x36>
     410:	ff 90       	pop	r15
     412:	ef 90       	pop	r14
     414:	df 90       	pop	r13
     416:	cf 90       	pop	r12
     418:	bf 90       	pop	r11
     41a:	af 90       	pop	r10
     41c:	9f 90       	pop	r9
     41e:	8f 90       	pop	r8
     420:	08 95       	ret

00000422 <ads_init()>:
_Z8ads_initv():
     422:	66 e3       	ldi	r22, 0x36	; 54
     424:	71 e0       	ldi	r23, 0x01	; 1
     426:	8c ed       	ldi	r24, 0xDC	; 220
     428:	95 e0       	ldi	r25, 0x05	; 5
     42a:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     42e:	6c e8       	ldi	r22, 0x8C	; 140
     430:	70 e0       	ldi	r23, 0x00	; 0
     432:	8c ed       	ldi	r24, 0xDC	; 220
     434:	95 e0       	ldi	r25, 0x05	; 5
     436:	0e 94 21 14 	call	0x2842	; 0x2842 <Print::println(__FlashStringHelper const*)>
     43a:	88 e8       	ldi	r24, 0x88	; 136
     43c:	94 e0       	ldi	r25, 0x04	; 4
     43e:	0e 94 1f 0b 	call	0x163e	; 0x163e <ADS1X15::begin()>
     442:	61 e0       	ldi	r22, 0x01	; 1
     444:	88 e8       	ldi	r24, 0x88	; 136
     446:	94 e0       	ldi	r25, 0x04	; 4
     448:	0e 94 33 0b 	call	0x1666	; 0x1666 <ADS1X15::setGain(unsigned char)>
     44c:	67 e0       	ldi	r22, 0x07	; 7
     44e:	88 e8       	ldi	r24, 0x88	; 136
     450:	94 e0       	ldi	r25, 0x04	; 4
     452:	0e 94 80 0b 	call	0x1700	; 0x1700 <ADS1X15::setDataRate(unsigned char)>
     456:	60 e0       	ldi	r22, 0x00	; 0
     458:	88 e8       	ldi	r24, 0x88	; 136
     45a:	94 e0       	ldi	r25, 0x04	; 4
     45c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <ADS1X15::setMode(unsigned char)>
     460:	60 e0       	ldi	r22, 0x00	; 0
     462:	88 e8       	ldi	r24, 0x88	; 136
     464:	94 e0       	ldi	r25, 0x04	; 4
     466:	0c 94 6f 0c 	jmp	0x18de	; 0x18de <ADS1X15::readADC(unsigned char)>

0000046a <sensor_zero_calibration()>:
_Z23sensor_zero_calibrationv():
     46a:	4f 92       	push	r4
     46c:	5f 92       	push	r5
     46e:	6f 92       	push	r6
     470:	7f 92       	push	r7
     472:	8f 92       	push	r8
     474:	9f 92       	push	r9
     476:	af 92       	push	r10
     478:	bf 92       	push	r11
     47a:	cf 92       	push	r12
     47c:	df 92       	push	r13
     47e:	ef 92       	push	r14
     480:	ff 92       	push	r15
     482:	0f 93       	push	r16
     484:	1f 93       	push	r17
     486:	cf 93       	push	r28
     488:	df 93       	push	r29
     48a:	cd b7       	in	r28, 0x3d	; 61
     48c:	de b7       	in	r29, 0x3e	; 62
     48e:	2e 97       	sbiw	r28, 0x0e	; 14
     490:	0f b6       	in	r0, 0x3f	; 63
     492:	f8 94       	cli
     494:	de bf       	out	0x3e, r29	; 62
     496:	0f be       	out	0x3f, r0	; 63
     498:	cd bf       	out	0x3d, r28	; 61
     49a:	8c e0       	ldi	r24, 0x0C	; 12
     49c:	91 e0       	ldi	r25, 0x01	; 1
     49e:	9e 87       	std	Y+14, r25	; 0x0e
     4a0:	8d 87       	std	Y+13, r24	; 0x0d
     4a2:	00 e0       	ldi	r16, 0x00	; 0
     4a4:	11 e0       	ldi	r17, 0x01	; 1
     4a6:	19 86       	std	Y+9, r1	; 0x09
     4a8:	1a 86       	std	Y+10, r1	; 0x0a
     4aa:	1b 86       	std	Y+11, r1	; 0x0b
     4ac:	1c 86       	std	Y+12, r1	; 0x0c
     4ae:	1d 82       	std	Y+5, r1	; 0x05
     4b0:	1e 82       	std	Y+6, r1	; 0x06
     4b2:	1f 82       	std	Y+7, r1	; 0x07
     4b4:	18 86       	std	Y+8, r1	; 0x08
     4b6:	19 82       	std	Y+1, r1	; 0x01
     4b8:	1a 82       	std	Y+2, r1	; 0x02
     4ba:	1b 82       	std	Y+3, r1	; 0x03
     4bc:	1c 82       	std	Y+4, r1	; 0x04
     4be:	c1 2c       	mov	r12, r1
     4c0:	d1 2c       	mov	r13, r1
     4c2:	76 01       	movw	r14, r12
     4c4:	ed 85       	ldd	r30, Y+13	; 0x0d
     4c6:	fe 85       	ldd	r31, Y+14	; 0x0e
     4c8:	41 90       	ld	r4, Z+
     4ca:	51 90       	ld	r5, Z+
     4cc:	61 90       	ld	r6, Z+
     4ce:	71 90       	ld	r7, Z+
     4d0:	fe 87       	std	Y+14, r31	; 0x0e
     4d2:	ed 87       	std	Y+13, r30	; 0x0d
     4d4:	f8 01       	movw	r30, r16
     4d6:	81 90       	ld	r8, Z+
     4d8:	91 90       	ld	r9, Z+
     4da:	a1 90       	ld	r10, Z+
     4dc:	b1 90       	ld	r11, Z+
     4de:	8f 01       	movw	r16, r30
     4e0:	a5 01       	movw	r20, r10
     4e2:	94 01       	movw	r18, r8
     4e4:	c7 01       	movw	r24, r14
     4e6:	b6 01       	movw	r22, r12
     4e8:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__addsf3>
     4ec:	6b 01       	movw	r12, r22
     4ee:	7c 01       	movw	r14, r24
     4f0:	a3 01       	movw	r20, r6
     4f2:	92 01       	movw	r18, r4
     4f4:	69 81       	ldd	r22, Y+1	; 0x01
     4f6:	7a 81       	ldd	r23, Y+2	; 0x02
     4f8:	8b 81       	ldd	r24, Y+3	; 0x03
     4fa:	9c 81       	ldd	r25, Y+4	; 0x04
     4fc:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__addsf3>
     500:	69 83       	std	Y+1, r22	; 0x01
     502:	7a 83       	std	Y+2, r23	; 0x02
     504:	8b 83       	std	Y+3, r24	; 0x03
     506:	9c 83       	std	Y+4, r25	; 0x04
     508:	a5 01       	movw	r20, r10
     50a:	94 01       	movw	r18, r8
     50c:	c5 01       	movw	r24, r10
     50e:	b4 01       	movw	r22, r8
     510:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__mulsf3>
     514:	9b 01       	movw	r18, r22
     516:	ac 01       	movw	r20, r24
     518:	6d 81       	ldd	r22, Y+5	; 0x05
     51a:	7e 81       	ldd	r23, Y+6	; 0x06
     51c:	8f 81       	ldd	r24, Y+7	; 0x07
     51e:	98 85       	ldd	r25, Y+8	; 0x08
     520:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__addsf3>
     524:	6d 83       	std	Y+5, r22	; 0x05
     526:	7e 83       	std	Y+6, r23	; 0x06
     528:	8f 83       	std	Y+7, r24	; 0x07
     52a:	98 87       	std	Y+8, r25	; 0x08
     52c:	a5 01       	movw	r20, r10
     52e:	94 01       	movw	r18, r8
     530:	c3 01       	movw	r24, r6
     532:	b2 01       	movw	r22, r4
     534:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__mulsf3>
     538:	9b 01       	movw	r18, r22
     53a:	ac 01       	movw	r20, r24
     53c:	69 85       	ldd	r22, Y+9	; 0x09
     53e:	7a 85       	ldd	r23, Y+10	; 0x0a
     540:	8b 85       	ldd	r24, Y+11	; 0x0b
     542:	9c 85       	ldd	r25, Y+12	; 0x0c
     544:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__addsf3>
     548:	69 87       	std	Y+9, r22	; 0x09
     54a:	7a 87       	std	Y+10, r23	; 0x0a
     54c:	8b 87       	std	Y+11, r24	; 0x0b
     54e:	9c 87       	std	Y+12, r25	; 0x0c
     550:	6c e4       	ldi	r22, 0x4C	; 76
     552:	71 e0       	ldi	r23, 0x01	; 1
     554:	8c ed       	ldi	r24, 0xDC	; 220
     556:	95 e0       	ldi	r25, 0x05	; 5
     558:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     55c:	22 e0       	ldi	r18, 0x02	; 2
     55e:	30 e0       	ldi	r19, 0x00	; 0
     560:	b5 01       	movw	r22, r10
     562:	a4 01       	movw	r20, r8
     564:	8c ed       	ldi	r24, 0xDC	; 220
     566:	95 e0       	ldi	r25, 0x05	; 5
     568:	0e 94 00 16 	call	0x2c00	; 0x2c00 <Print::print(double, int)>
     56c:	61 e5       	ldi	r22, 0x51	; 81
     56e:	71 e0       	ldi	r23, 0x01	; 1
     570:	8c ed       	ldi	r24, 0xDC	; 220
     572:	95 e0       	ldi	r25, 0x05	; 5
     574:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     578:	22 e0       	ldi	r18, 0x02	; 2
     57a:	30 e0       	ldi	r19, 0x00	; 0
     57c:	b3 01       	movw	r22, r6
     57e:	a2 01       	movw	r20, r4
     580:	8c ed       	ldi	r24, 0xDC	; 220
     582:	95 e0       	ldi	r25, 0x05	; 5
     584:	0e 94 02 16 	call	0x2c04	; 0x2c04 <Print::println(double, int)>
     588:	68 e5       	ldi	r22, 0x58	; 88
     58a:	71 e0       	ldi	r23, 0x01	; 1
     58c:	8c ed       	ldi	r24, 0xDC	; 220
     58e:	95 e0       	ldi	r25, 0x05	; 5
     590:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     594:	22 e0       	ldi	r18, 0x02	; 2
     596:	30 e0       	ldi	r19, 0x00	; 0
     598:	b7 01       	movw	r22, r14
     59a:	a6 01       	movw	r20, r12
     59c:	8c ed       	ldi	r24, 0xDC	; 220
     59e:	95 e0       	ldi	r25, 0x05	; 5
     5a0:	0e 94 00 16 	call	0x2c00	; 0x2c00 <Print::print(double, int)>
     5a4:	62 e6       	ldi	r22, 0x62	; 98
     5a6:	71 e0       	ldi	r23, 0x01	; 1
     5a8:	8c ed       	ldi	r24, 0xDC	; 220
     5aa:	95 e0       	ldi	r25, 0x05	; 5
     5ac:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     5b0:	22 e0       	ldi	r18, 0x02	; 2
     5b2:	30 e0       	ldi	r19, 0x00	; 0
     5b4:	49 81       	ldd	r20, Y+1	; 0x01
     5b6:	5a 81       	ldd	r21, Y+2	; 0x02
     5b8:	6b 81       	ldd	r22, Y+3	; 0x03
     5ba:	7c 81       	ldd	r23, Y+4	; 0x04
     5bc:	8c ed       	ldi	r24, 0xDC	; 220
     5be:	95 e0       	ldi	r25, 0x05	; 5
     5c0:	0e 94 02 16 	call	0x2c04	; 0x2c04 <Print::println(double, int)>
     5c4:	6e e6       	ldi	r22, 0x6E	; 110
     5c6:	71 e0       	ldi	r23, 0x01	; 1
     5c8:	8c ed       	ldi	r24, 0xDC	; 220
     5ca:	95 e0       	ldi	r25, 0x05	; 5
     5cc:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     5d0:	22 e0       	ldi	r18, 0x02	; 2
     5d2:	30 e0       	ldi	r19, 0x00	; 0
     5d4:	4d 81       	ldd	r20, Y+5	; 0x05
     5d6:	5e 81       	ldd	r21, Y+6	; 0x06
     5d8:	6f 81       	ldd	r22, Y+7	; 0x07
     5da:	78 85       	ldd	r23, Y+8	; 0x08
     5dc:	8c ed       	ldi	r24, 0xDC	; 220
     5de:	95 e0       	ldi	r25, 0x05	; 5
     5e0:	0e 94 00 16 	call	0x2c00	; 0x2c00 <Print::print(double, int)>
     5e4:	69 e7       	ldi	r22, 0x79	; 121
     5e6:	71 e0       	ldi	r23, 0x01	; 1
     5e8:	8c ed       	ldi	r24, 0xDC	; 220
     5ea:	95 e0       	ldi	r25, 0x05	; 5
     5ec:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     5f0:	22 e0       	ldi	r18, 0x02	; 2
     5f2:	30 e0       	ldi	r19, 0x00	; 0
     5f4:	49 85       	ldd	r20, Y+9	; 0x09
     5f6:	5a 85       	ldd	r21, Y+10	; 0x0a
     5f8:	6b 85       	ldd	r22, Y+11	; 0x0b
     5fa:	7c 85       	ldd	r23, Y+12	; 0x0c
     5fc:	8c ed       	ldi	r24, 0xDC	; 220
     5fe:	95 e0       	ldi	r25, 0x05	; 5
     600:	0e 94 02 16 	call	0x2c04	; 0x2c04 <Print::println(double, int)>
     604:	8d 85       	ldd	r24, Y+13	; 0x0d
     606:	9e 85       	ldd	r25, Y+14	; 0x0e
     608:	88 51       	subi	r24, 0x18	; 24
     60a:	91 40       	sbci	r25, 0x01	; 1
     60c:	09 f0       	breq	.+2      	; 0x610 <sensor_zero_calibration()+0x1a6>
     60e:	5a cf       	rjmp	.-332    	; 0x4c4 <sensor_zero_calibration()+0x5a>
     610:	20 e0       	ldi	r18, 0x00	; 0
     612:	30 e0       	ldi	r19, 0x00	; 0
     614:	40 e4       	ldi	r20, 0x40	; 64
     616:	50 e4       	ldi	r21, 0x40	; 64
     618:	6d 81       	ldd	r22, Y+5	; 0x05
     61a:	7e 81       	ldd	r23, Y+6	; 0x06
     61c:	8f 81       	ldd	r24, Y+7	; 0x07
     61e:	98 85       	ldd	r25, Y+8	; 0x08
     620:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__mulsf3>
     624:	4b 01       	movw	r8, r22
     626:	5c 01       	movw	r10, r24
     628:	a7 01       	movw	r20, r14
     62a:	96 01       	movw	r18, r12
     62c:	c7 01       	movw	r24, r14
     62e:	b6 01       	movw	r22, r12
     630:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__mulsf3>
     634:	9b 01       	movw	r18, r22
     636:	ac 01       	movw	r20, r24
     638:	c5 01       	movw	r24, r10
     63a:	b4 01       	movw	r22, r8
     63c:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__subsf3>
     640:	4b 01       	movw	r8, r22
     642:	5c 01       	movw	r10, r24
     644:	66 e8       	ldi	r22, 0x86	; 134
     646:	71 e0       	ldi	r23, 0x01	; 1
     648:	8c ed       	ldi	r24, 0xDC	; 220
     64a:	95 e0       	ldi	r25, 0x05	; 5
     64c:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     650:	22 e0       	ldi	r18, 0x02	; 2
     652:	30 e0       	ldi	r19, 0x00	; 0
     654:	b5 01       	movw	r22, r10
     656:	a4 01       	movw	r20, r8
     658:	8c ed       	ldi	r24, 0xDC	; 220
     65a:	95 e0       	ldi	r25, 0x05	; 5
     65c:	0e 94 02 16 	call	0x2c04	; 0x2c04 <Print::println(double, int)>
     660:	20 e0       	ldi	r18, 0x00	; 0
     662:	30 e0       	ldi	r19, 0x00	; 0
     664:	a9 01       	movw	r20, r18
     666:	c5 01       	movw	r24, r10
     668:	b4 01       	movw	r22, r8
     66a:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__cmpsf2>
     66e:	88 23       	and	r24, r24
     670:	09 f4       	brne	.+2      	; 0x674 <sensor_zero_calibration()+0x20a>
     672:	87 c0       	rjmp	.+270    	; 0x782 <sensor_zero_calibration()+0x318>
     674:	20 e0       	ldi	r18, 0x00	; 0
     676:	30 e0       	ldi	r19, 0x00	; 0
     678:	40 e4       	ldi	r20, 0x40	; 64
     67a:	50 e4       	ldi	r21, 0x40	; 64
     67c:	69 85       	ldd	r22, Y+9	; 0x09
     67e:	7a 85       	ldd	r23, Y+10	; 0x0a
     680:	8b 85       	ldd	r24, Y+11	; 0x0b
     682:	9c 85       	ldd	r25, Y+12	; 0x0c
     684:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__mulsf3>
     688:	2b 01       	movw	r4, r22
     68a:	3c 01       	movw	r6, r24
     68c:	29 81       	ldd	r18, Y+1	; 0x01
     68e:	3a 81       	ldd	r19, Y+2	; 0x02
     690:	4b 81       	ldd	r20, Y+3	; 0x03
     692:	5c 81       	ldd	r21, Y+4	; 0x04
     694:	c7 01       	movw	r24, r14
     696:	b6 01       	movw	r22, r12
     698:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__mulsf3>
     69c:	9b 01       	movw	r18, r22
     69e:	ac 01       	movw	r20, r24
     6a0:	c3 01       	movw	r24, r6
     6a2:	b2 01       	movw	r22, r4
     6a4:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__subsf3>
     6a8:	a5 01       	movw	r20, r10
     6aa:	94 01       	movw	r18, r8
     6ac:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <__divsf3>
     6b0:	60 93 c1 04 	sts	0x04C1, r22	; 0x8004c1 <o2_slope>
     6b4:	70 93 c2 04 	sts	0x04C2, r23	; 0x8004c2 <o2_slope+0x1>
     6b8:	80 93 c3 04 	sts	0x04C3, r24	; 0x8004c3 <o2_slope+0x2>
     6bc:	90 93 c4 04 	sts	0x04C4, r25	; 0x8004c4 <o2_slope+0x3>
     6c0:	2d 81       	ldd	r18, Y+5	; 0x05
     6c2:	3e 81       	ldd	r19, Y+6	; 0x06
     6c4:	4f 81       	ldd	r20, Y+7	; 0x07
     6c6:	58 85       	ldd	r21, Y+8	; 0x08
     6c8:	69 81       	ldd	r22, Y+1	; 0x01
     6ca:	7a 81       	ldd	r23, Y+2	; 0x02
     6cc:	8b 81       	ldd	r24, Y+3	; 0x03
     6ce:	9c 81       	ldd	r25, Y+4	; 0x04
     6d0:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__mulsf3>
     6d4:	2b 01       	movw	r4, r22
     6d6:	3c 01       	movw	r6, r24
     6d8:	29 85       	ldd	r18, Y+9	; 0x09
     6da:	3a 85       	ldd	r19, Y+10	; 0x0a
     6dc:	4b 85       	ldd	r20, Y+11	; 0x0b
     6de:	5c 85       	ldd	r21, Y+12	; 0x0c
     6e0:	c7 01       	movw	r24, r14
     6e2:	b6 01       	movw	r22, r12
     6e4:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__mulsf3>
     6e8:	9b 01       	movw	r18, r22
     6ea:	ac 01       	movw	r20, r24
     6ec:	c3 01       	movw	r24, r6
     6ee:	b2 01       	movw	r22, r4
     6f0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__subsf3>
     6f4:	a5 01       	movw	r20, r10
     6f6:	94 01       	movw	r18, r8
     6f8:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <__divsf3>
     6fc:	60 93 bd 04 	sts	0x04BD, r22	; 0x8004bd <o2_const_val>
     700:	70 93 be 04 	sts	0x04BE, r23	; 0x8004be <o2_const_val+0x1>
     704:	80 93 bf 04 	sts	0x04BF, r24	; 0x8004bf <o2_const_val+0x2>
     708:	90 93 c0 04 	sts	0x04C0, r25	; 0x8004c0 <o2_const_val+0x3>
     70c:	1a 82       	std	Y+2, r1	; 0x02
     70e:	19 82       	std	Y+1, r1	; 0x01
     710:	60 e7       	ldi	r22, 0x70	; 112
     712:	74 e0       	ldi	r23, 0x04	; 4
     714:	8c ed       	ldi	r24, 0xDC	; 220
     716:	95 e0       	ldi	r25, 0x05	; 5
     718:	0e 94 33 14 	call	0x2866	; 0x2866 <Print::println(char const*)>
     71c:	64 eb       	ldi	r22, 0xB4	; 180
     71e:	71 e0       	ldi	r23, 0x01	; 1
     720:	8c ed       	ldi	r24, 0xDC	; 220
     722:	95 e0       	ldi	r25, 0x05	; 5
     724:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     728:	40 91 c1 04 	lds	r20, 0x04C1	; 0x8004c1 <o2_slope>
     72c:	50 91 c2 04 	lds	r21, 0x04C2	; 0x8004c2 <o2_slope+0x1>
     730:	60 91 c3 04 	lds	r22, 0x04C3	; 0x8004c3 <o2_slope+0x2>
     734:	70 91 c4 04 	lds	r23, 0x04C4	; 0x8004c4 <o2_slope+0x3>
     738:	22 e0       	ldi	r18, 0x02	; 2
     73a:	30 e0       	ldi	r19, 0x00	; 0
     73c:	8c ed       	ldi	r24, 0xDC	; 220
     73e:	95 e0       	ldi	r25, 0x05	; 5
     740:	0e 94 00 16 	call	0x2c00	; 0x2c00 <Print::print(double, int)>
     744:	60 ec       	ldi	r22, 0xC0	; 192
     746:	71 e0       	ldi	r23, 0x01	; 1
     748:	8c ed       	ldi	r24, 0xDC	; 220
     74a:	95 e0       	ldi	r25, 0x05	; 5
     74c:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     750:	89 81       	ldd	r24, Y+1	; 0x01
     752:	9a 81       	ldd	r25, Y+2	; 0x02
     754:	2e 96       	adiw	r28, 0x0e	; 14
     756:	0f b6       	in	r0, 0x3f	; 63
     758:	f8 94       	cli
     75a:	de bf       	out	0x3e, r29	; 62
     75c:	0f be       	out	0x3f, r0	; 63
     75e:	cd bf       	out	0x3d, r28	; 61
     760:	df 91       	pop	r29
     762:	cf 91       	pop	r28
     764:	1f 91       	pop	r17
     766:	0f 91       	pop	r16
     768:	ff 90       	pop	r15
     76a:	ef 90       	pop	r14
     76c:	df 90       	pop	r13
     76e:	cf 90       	pop	r12
     770:	bf 90       	pop	r11
     772:	af 90       	pop	r10
     774:	9f 90       	pop	r9
     776:	8f 90       	pop	r8
     778:	7f 90       	pop	r7
     77a:	6f 90       	pop	r6
     77c:	5f 90       	pop	r5
     77e:	4f 90       	pop	r4
     780:	08 95       	ret
     782:	10 92 c1 04 	sts	0x04C1, r1	; 0x8004c1 <o2_slope>
     786:	10 92 c2 04 	sts	0x04C2, r1	; 0x8004c2 <o2_slope+0x1>
     78a:	10 92 c3 04 	sts	0x04C3, r1	; 0x8004c3 <o2_slope+0x2>
     78e:	10 92 c4 04 	sts	0x04C4, r1	; 0x8004c4 <o2_slope+0x3>
     792:	10 92 bd 04 	sts	0x04BD, r1	; 0x8004bd <o2_const_val>
     796:	10 92 be 04 	sts	0x04BE, r1	; 0x8004be <o2_const_val+0x1>
     79a:	10 92 bf 04 	sts	0x04BF, r1	; 0x8004bf <o2_const_val+0x2>
     79e:	10 92 c0 04 	sts	0x04C0, r1	; 0x8004c0 <o2_const_val+0x3>
     7a2:	65 e9       	ldi	r22, 0x95	; 149
     7a4:	71 e0       	ldi	r23, 0x01	; 1
     7a6:	8c ed       	ldi	r24, 0xDC	; 220
     7a8:	95 e0       	ldi	r25, 0x05	; 5
     7aa:	0e 94 33 14 	call	0x2866	; 0x2866 <Print::println(char const*)>
     7ae:	88 ef       	ldi	r24, 0xF8	; 248
     7b0:	9f ef       	ldi	r25, 0xFF	; 255
     7b2:	9a 83       	std	Y+2, r25	; 0x02
     7b4:	89 83       	std	Y+1, r24	; 0x01
     7b6:	ac cf       	rjmp	.-168    	; 0x710 <sensor_zero_calibration()+0x2a6>

000007b8 <o2_sensor_scan()>:
_Z14o2_sensor_scanv():
     7b8:	8f 92       	push	r8
     7ba:	9f 92       	push	r9
     7bc:	af 92       	push	r10
     7be:	bf 92       	push	r11
     7c0:	cf 92       	push	r12
     7c2:	df 92       	push	r13
     7c4:	ef 92       	push	r14
     7c6:	ff 92       	push	r15
     7c8:	60 e0       	ldi	r22, 0x00	; 0
     7ca:	88 e8       	ldi	r24, 0x88	; 136
     7cc:	94 e0       	ldi	r25, 0x04	; 4
     7ce:	0e 94 6f 0c 	call	0x18de	; 0x18de <ADS1X15::readADC(unsigned char)>
     7d2:	88 e8       	ldi	r24, 0x88	; 136
     7d4:	94 e0       	ldi	r25, 0x04	; 4
     7d6:	0e 94 40 0c 	call	0x1880	; 0x1880 <ADS1X15::getValue()>
     7da:	90 93 c6 04 	sts	0x04C6, r25	; 0x8004c6 <o2_raw_adc_count+0x1>
     7de:	80 93 c5 04 	sts	0x04C5, r24	; 0x8004c5 <o2_raw_adc_count>
     7e2:	62 ed       	ldi	r22, 0xD2	; 210
     7e4:	71 e0       	ldi	r23, 0x01	; 1
     7e6:	8c ed       	ldi	r24, 0xDC	; 220
     7e8:	95 e0       	ldi	r25, 0x05	; 5
     7ea:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     7ee:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <o2_raw_adc_count>
     7f2:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <o2_raw_adc_count+0x1>
     7f6:	4a e0       	ldi	r20, 0x0A	; 10
     7f8:	50 e0       	ldi	r21, 0x00	; 0
     7fa:	8c ed       	ldi	r24, 0xDC	; 220
     7fc:	95 e0       	ldi	r25, 0x05	; 5
     7fe:	0e 94 de 14 	call	0x29bc	; 0x29bc <Print::print(int, int)>
     802:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <o2_raw_adc_count>
     806:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <o2_raw_adc_count+0x1>
     80a:	07 2e       	mov	r0, r23
     80c:	00 0c       	add	r0, r0
     80e:	88 0b       	sbc	r24, r24
     810:	99 0b       	sbc	r25, r25
     812:	0e 94 29 17 	call	0x2e52	; 0x2e52 <__floatsisf>
     816:	20 e0       	ldi	r18, 0x00	; 0
     818:	30 e0       	ldi	r19, 0x00	; 0
     81a:	4a e7       	ldi	r20, 0x7A	; 122
     81c:	54 e4       	ldi	r21, 0x44	; 68
     81e:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__mulsf3>
     822:	2f e6       	ldi	r18, 0x6F	; 111
     824:	32 e1       	ldi	r19, 0x12	; 18
     826:	43 e0       	ldi	r20, 0x03	; 3
     828:	59 e3       	ldi	r21, 0x39	; 57
     82a:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__mulsf3>
     82e:	60 93 b9 04 	sts	0x04B9, r22	; 0x8004b9 <m_raw_voltage>
     832:	70 93 ba 04 	sts	0x04BA, r23	; 0x8004ba <m_raw_voltage+0x1>
     836:	80 93 bb 04 	sts	0x04BB, r24	; 0x8004bb <m_raw_voltage+0x2>
     83a:	90 93 bc 04 	sts	0x04BC, r25	; 0x8004bc <m_raw_voltage+0x3>
     83e:	66 ee       	ldi	r22, 0xE6	; 230
     840:	71 e0       	ldi	r23, 0x01	; 1
     842:	8c ed       	ldi	r24, 0xDC	; 220
     844:	95 e0       	ldi	r25, 0x05	; 5
     846:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     84a:	40 91 b9 04 	lds	r20, 0x04B9	; 0x8004b9 <m_raw_voltage>
     84e:	50 91 ba 04 	lds	r21, 0x04BA	; 0x8004ba <m_raw_voltage+0x1>
     852:	60 91 bb 04 	lds	r22, 0x04BB	; 0x8004bb <m_raw_voltage+0x2>
     856:	70 91 bc 04 	lds	r23, 0x04BC	; 0x8004bc <m_raw_voltage+0x3>
     85a:	24 e0       	ldi	r18, 0x04	; 4
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	8c ed       	ldi	r24, 0xDC	; 220
     860:	95 e0       	ldi	r25, 0x05	; 5
     862:	0e 94 00 16 	call	0x2c00	; 0x2c00 <Print::print(double, int)>
     866:	60 91 c5 04 	lds	r22, 0x04C5	; 0x8004c5 <o2_raw_adc_count>
     86a:	70 91 c6 04 	lds	r23, 0x04C6	; 0x8004c6 <o2_raw_adc_count+0x1>
     86e:	c0 90 c1 04 	lds	r12, 0x04C1	; 0x8004c1 <o2_slope>
     872:	d0 90 c2 04 	lds	r13, 0x04C2	; 0x8004c2 <o2_slope+0x1>
     876:	e0 90 c3 04 	lds	r14, 0x04C3	; 0x8004c3 <o2_slope+0x2>
     87a:	f0 90 c4 04 	lds	r15, 0x04C4	; 0x8004c4 <o2_slope+0x3>
     87e:	80 90 bd 04 	lds	r8, 0x04BD	; 0x8004bd <o2_const_val>
     882:	90 90 be 04 	lds	r9, 0x04BE	; 0x8004be <o2_const_val+0x1>
     886:	a0 90 bf 04 	lds	r10, 0x04BF	; 0x8004bf <o2_const_val+0x2>
     88a:	b0 90 c0 04 	lds	r11, 0x04C0	; 0x8004c0 <o2_const_val+0x3>
     88e:	07 2e       	mov	r0, r23
     890:	00 0c       	add	r0, r0
     892:	88 0b       	sbc	r24, r24
     894:	99 0b       	sbc	r25, r25
     896:	0e 94 29 17 	call	0x2e52	; 0x2e52 <__floatsisf>
     89a:	a7 01       	movw	r20, r14
     89c:	96 01       	movw	r18, r12
     89e:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__mulsf3>
     8a2:	a5 01       	movw	r20, r10
     8a4:	94 01       	movw	r18, r8
     8a6:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__addsf3>
     8aa:	60 93 18 01 	sts	0x0118, r22	; 0x800118 <o2_concentration>
     8ae:	70 93 19 01 	sts	0x0119, r23	; 0x800119 <o2_concentration+0x1>
     8b2:	80 93 1a 01 	sts	0x011A, r24	; 0x80011a <o2_concentration+0x2>
     8b6:	90 93 1b 01 	sts	0x011B, r25	; 0x80011b <o2_concentration+0x3>
     8ba:	69 ef       	ldi	r22, 0xF9	; 249
     8bc:	71 e0       	ldi	r23, 0x01	; 1
     8be:	8c ed       	ldi	r24, 0xDC	; 220
     8c0:	95 e0       	ldi	r25, 0x05	; 5
     8c2:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     8c6:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <o2_concentration>
     8ca:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <o2_concentration+0x1>
     8ce:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <o2_concentration+0x2>
     8d2:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <o2_concentration+0x3>
     8d6:	22 e0       	ldi	r18, 0x02	; 2
     8d8:	30 e0       	ldi	r19, 0x00	; 0
     8da:	8c ed       	ldi	r24, 0xDC	; 220
     8dc:	95 e0       	ldi	r25, 0x05	; 5
     8de:	0e 94 00 16 	call	0x2c00	; 0x2c00 <Print::print(double, int)>
     8e2:	40 91 18 01 	lds	r20, 0x0118	; 0x800118 <o2_concentration>
     8e6:	50 91 19 01 	lds	r21, 0x0119	; 0x800119 <o2_concentration+0x1>
     8ea:	60 91 1a 01 	lds	r22, 0x011A	; 0x80011a <o2_concentration+0x2>
     8ee:	70 91 1b 01 	lds	r23, 0x011B	; 0x80011b <o2_concentration+0x3>
     8f2:	24 e0       	ldi	r18, 0x04	; 4
     8f4:	30 e0       	ldi	r19, 0x00	; 0
     8f6:	8c ed       	ldi	r24, 0xDC	; 220
     8f8:	95 e0       	ldi	r25, 0x05	; 5
     8fa:	0e 94 00 16 	call	0x2c00	; 0x2c00 <Print::print(double, int)>
     8fe:	60 e7       	ldi	r22, 0x70	; 112
     900:	74 e0       	ldi	r23, 0x04	; 4
     902:	8c ed       	ldi	r24, 0xDC	; 220
     904:	95 e0       	ldi	r25, 0x05	; 5
     906:	ff 90       	pop	r15
     908:	ef 90       	pop	r14
     90a:	df 90       	pop	r13
     90c:	cf 90       	pop	r12
     90e:	bf 90       	pop	r11
     910:	af 90       	pop	r10
     912:	9f 90       	pop	r9
     914:	8f 90       	pop	r8
     916:	0c 94 33 14 	jmp	0x2866	; 0x2866 <Print::println(char const*)>

0000091a <config_timer1()>:
_Z13config_timer1v():
     91a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     91e:	e1 e8       	ldi	r30, 0x81	; 129
     920:	f0 e0       	ldi	r31, 0x00	; 0
     922:	10 82       	st	Z, r1
     924:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     928:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     92c:	89 ef       	ldi	r24, 0xF9	; 249
     92e:	90 e0       	ldi	r25, 0x00	; 0
     930:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     934:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     938:	80 81       	ld	r24, Z
     93a:	88 60       	ori	r24, 0x08	; 8
     93c:	80 83       	st	Z, r24
     93e:	80 81       	ld	r24, Z
     940:	83 60       	ori	r24, 0x03	; 3
     942:	80 83       	st	Z, r24
     944:	ef e6       	ldi	r30, 0x6F	; 111
     946:	f0 e0       	ldi	r31, 0x00	; 0
     948:	80 81       	ld	r24, Z
     94a:	82 60       	ori	r24, 0x02	; 2
     94c:	80 83       	st	Z, r24
     94e:	08 95       	ret

00000950 <timer_init()>:
_Z10timer_initv():
     950:	f8 94       	cli
     952:	0e 94 8d 04 	call	0x91a	; 0x91a <config_timer1()>
     956:	78 94       	sei
     958:	6f e0       	ldi	r22, 0x0F	; 15
     95a:	72 e0       	ldi	r23, 0x02	; 2
     95c:	8c ed       	ldi	r24, 0xDC	; 220
     95e:	95 e0       	ldi	r25, 0x05	; 5
     960:	0c 94 33 14 	jmp	0x2866	; 0x2866 <Print::println(char const*)>

00000964 <button_check()>:
_Z12button_checkv():
     964:	0f 93       	push	r16
     966:	1f 93       	push	r17
     968:	cf 93       	push	r28
     96a:	df 93       	push	r29
     96c:	83 e0       	ldi	r24, 0x03	; 3
     96e:	0e 94 a6 11 	call	0x234c	; 0x234c <digitalRead>
     972:	8c 01       	movw	r16, r24
     974:	84 e0       	ldi	r24, 0x04	; 4
     976:	0e 94 a6 11 	call	0x234c	; 0x234c <digitalRead>
     97a:	ec 01       	movw	r28, r24
     97c:	01 15       	cp	r16, r1
     97e:	11 05       	cpc	r17, r1
     980:	09 f0       	breq	.+2      	; 0x984 <button_check()+0x20>
     982:	57 c0       	rjmp	.+174    	; 0xa32 <button_check()+0xce>
     984:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <start_switch_dbnc_dly>
     988:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <start_switch_dbnc_dly+0x1>
     98c:	01 96       	adiw	r24, 0x01	; 1
     98e:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <start_switch_dbnc_dly+0x1>
     992:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <start_switch_dbnc_dly>
     996:	0b 97       	sbiw	r24, 0x0b	; 11
     998:	6c f0       	brlt	.+26     	; 0x9b4 <button_check()+0x50>
     99a:	81 e0       	ldi	r24, 0x01	; 1
     99c:	80 93 df 04 	sts	0x04DF, r24	; 0x8004df <start_switch_pressed>
     9a0:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <start_switch_dbnc_dly+0x1>
     9a4:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <start_switch_dbnc_dly>
     9a8:	63 e2       	ldi	r22, 0x23	; 35
     9aa:	72 e0       	ldi	r23, 0x02	; 2
     9ac:	8c ed       	ldi	r24, 0xDC	; 220
     9ae:	95 e0       	ldi	r25, 0x05	; 5
     9b0:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     9b4:	68 e3       	ldi	r22, 0x38	; 56
     9b6:	72 e0       	ldi	r23, 0x02	; 2
     9b8:	8c ed       	ldi	r24, 0xDC	; 220
     9ba:	95 e0       	ldi	r25, 0x05	; 5
     9bc:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     9c0:	60 91 86 04 	lds	r22, 0x0486	; 0x800486 <start_switch_dbnc_dly>
     9c4:	70 91 87 04 	lds	r23, 0x0487	; 0x800487 <start_switch_dbnc_dly+0x1>
     9c8:	4a e0       	ldi	r20, 0x0A	; 10
     9ca:	50 e0       	ldi	r21, 0x00	; 0
     9cc:	8c ed       	ldi	r24, 0xDC	; 220
     9ce:	95 e0       	ldi	r25, 0x05	; 5
     9d0:	0e 94 e5 14 	call	0x29ca	; 0x29ca <Print::println(int, int)>
     9d4:	20 97       	sbiw	r28, 0x00	; 0
     9d6:	09 f0       	breq	.+2      	; 0x9da <button_check()+0x76>
     9d8:	44 c0       	rjmp	.+136    	; 0xa62 <button_check()+0xfe>
     9da:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <alarm_clear_bttn_dbnc_dly>
     9de:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <alarm_clear_bttn_dbnc_dly+0x1>
     9e2:	01 96       	adiw	r24, 0x01	; 1
     9e4:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <alarm_clear_bttn_dbnc_dly+0x1>
     9e8:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <alarm_clear_bttn_dbnc_dly>
     9ec:	0b 97       	sbiw	r24, 0x0b	; 11
     9ee:	6c f0       	brlt	.+26     	; 0xa0a <button_check()+0xa6>
     9f0:	81 e0       	ldi	r24, 0x01	; 1
     9f2:	80 93 de 04 	sts	0x04DE, r24	; 0x8004de <alarm_clear_button_pressed>
     9f6:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <alarm_clear_bttn_dbnc_dly+0x1>
     9fa:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <alarm_clear_bttn_dbnc_dly>
     9fe:	67 e6       	ldi	r22, 0x67	; 103
     a00:	72 e0       	ldi	r23, 0x02	; 2
     a02:	8c ed       	ldi	r24, 0xDC	; 220
     a04:	95 e0       	ldi	r25, 0x05	; 5
     a06:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     a0a:	64 e8       	ldi	r22, 0x84	; 132
     a0c:	72 e0       	ldi	r23, 0x02	; 2
     a0e:	8c ed       	ldi	r24, 0xDC	; 220
     a10:	95 e0       	ldi	r25, 0x05	; 5
     a12:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     a16:	60 91 84 04 	lds	r22, 0x0484	; 0x800484 <alarm_clear_bttn_dbnc_dly>
     a1a:	70 91 85 04 	lds	r23, 0x0485	; 0x800485 <alarm_clear_bttn_dbnc_dly+0x1>
     a1e:	4a e0       	ldi	r20, 0x0A	; 10
     a20:	50 e0       	ldi	r21, 0x00	; 0
     a22:	8c ed       	ldi	r24, 0xDC	; 220
     a24:	95 e0       	ldi	r25, 0x05	; 5
     a26:	df 91       	pop	r29
     a28:	cf 91       	pop	r28
     a2a:	1f 91       	pop	r17
     a2c:	0f 91       	pop	r16
     a2e:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <Print::println(int, int)>
     a32:	01 30       	cpi	r16, 0x01	; 1
     a34:	11 05       	cpc	r17, r1
     a36:	71 f6       	brne	.-100    	; 0x9d4 <button_check()+0x70>
     a38:	80 91 86 04 	lds	r24, 0x0486	; 0x800486 <start_switch_dbnc_dly>
     a3c:	90 91 87 04 	lds	r25, 0x0487	; 0x800487 <start_switch_dbnc_dly+0x1>
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	90 93 87 04 	sts	0x0487, r25	; 0x800487 <start_switch_dbnc_dly+0x1>
     a46:	80 93 86 04 	sts	0x0486, r24	; 0x800486 <start_switch_dbnc_dly>
     a4a:	0b 97       	sbiw	r24, 0x0b	; 11
     a4c:	0c f4       	brge	.+2      	; 0xa50 <button_check()+0xec>
     a4e:	b2 cf       	rjmp	.-156    	; 0x9b4 <button_check()+0x50>
     a50:	10 92 df 04 	sts	0x04DF, r1	; 0x8004df <start_switch_pressed>
     a54:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <start_switch_dbnc_dly+0x1>
     a58:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <start_switch_dbnc_dly>
     a5c:	61 e5       	ldi	r22, 0x51	; 81
     a5e:	72 e0       	ldi	r23, 0x02	; 2
     a60:	a5 cf       	rjmp	.-182    	; 0x9ac <button_check()+0x48>
     a62:	21 97       	sbiw	r28, 0x01	; 1
     a64:	a1 f4       	brne	.+40     	; 0xa8e <button_check()+0x12a>
     a66:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <alarm_clear_bttn_dbnc_dly>
     a6a:	90 91 85 04 	lds	r25, 0x0485	; 0x800485 <alarm_clear_bttn_dbnc_dly+0x1>
     a6e:	01 96       	adiw	r24, 0x01	; 1
     a70:	90 93 85 04 	sts	0x0485, r25	; 0x800485 <alarm_clear_bttn_dbnc_dly+0x1>
     a74:	80 93 84 04 	sts	0x0484, r24	; 0x800484 <alarm_clear_bttn_dbnc_dly>
     a78:	0b 97       	sbiw	r24, 0x0b	; 11
     a7a:	3c f2       	brlt	.-114    	; 0xa0a <button_check()+0xa6>
     a7c:	10 92 de 04 	sts	0x04DE, r1	; 0x8004de <alarm_clear_button_pressed>
     a80:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <alarm_clear_bttn_dbnc_dly+0x1>
     a84:	10 92 84 04 	sts	0x0484, r1	; 0x800484 <alarm_clear_bttn_dbnc_dly>
     a88:	61 ea       	ldi	r22, 0xA1	; 161
     a8a:	72 e0       	ldi	r23, 0x02	; 2
     a8c:	ba cf       	rjmp	.-140    	; 0xa02 <button_check()+0x9e>
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	0f 91       	pop	r16
     a96:	08 95       	ret

00000a98 <__vector_13>:
__vector_13():
     a98:	1f 92       	push	r1
     a9a:	0f 92       	push	r0
     a9c:	0f b6       	in	r0, 0x3f	; 63
     a9e:	0f 92       	push	r0
     aa0:	11 24       	eor	r1, r1
     aa2:	0b b6       	in	r0, 0x3b	; 59
     aa4:	0f 92       	push	r0
     aa6:	2f 93       	push	r18
     aa8:	3f 93       	push	r19
     aaa:	4f 93       	push	r20
     aac:	5f 93       	push	r21
     aae:	6f 93       	push	r22
     ab0:	7f 93       	push	r23
     ab2:	8f 93       	push	r24
     ab4:	9f 93       	push	r25
     ab6:	af 93       	push	r26
     ab8:	bf 93       	push	r27
     aba:	cf 93       	push	r28
     abc:	ef 93       	push	r30
     abe:	ff 93       	push	r31
     ac0:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <systemtick_msecs>
     ac4:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <systemtick_msecs+0x1>
     ac8:	a0 91 f0 04 	lds	r26, 0x04F0	; 0x8004f0 <systemtick_msecs+0x2>
     acc:	b0 91 f1 04 	lds	r27, 0x04F1	; 0x8004f1 <systemtick_msecs+0x3>
     ad0:	01 96       	adiw	r24, 0x01	; 1
     ad2:	a1 1d       	adc	r26, r1
     ad4:	b1 1d       	adc	r27, r1
     ad6:	80 93 ee 04 	sts	0x04EE, r24	; 0x8004ee <systemtick_msecs>
     ada:	90 93 ef 04 	sts	0x04EF, r25	; 0x8004ef <systemtick_msecs+0x1>
     ade:	a0 93 f0 04 	sts	0x04F0, r26	; 0x8004f0 <systemtick_msecs+0x2>
     ae2:	b0 93 f1 04 	sts	0x04F1, r27	; 0x8004f1 <systemtick_msecs+0x3>
     ae6:	c1 e0       	ldi	r28, 0x01	; 1
     ae8:	c0 93 ea 04 	sts	0x04EA, r28	; 0x8004ea <f_msec>
     aec:	60 91 ee 04 	lds	r22, 0x04EE	; 0x8004ee <systemtick_msecs>
     af0:	70 91 ef 04 	lds	r23, 0x04EF	; 0x8004ef <systemtick_msecs+0x1>
     af4:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <systemtick_msecs+0x2>
     af8:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <systemtick_msecs+0x3>
     afc:	2a e0       	ldi	r18, 0x0A	; 10
     afe:	30 e0       	ldi	r19, 0x00	; 0
     b00:	40 e0       	ldi	r20, 0x00	; 0
     b02:	50 e0       	ldi	r21, 0x00	; 0
     b04:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
     b08:	67 2b       	or	r22, r23
     b0a:	68 2b       	or	r22, r24
     b0c:	69 2b       	or	r22, r25
     b0e:	09 f0       	breq	.+2      	; 0xb12 <__vector_13+0x7a>
     b10:	49 c0       	rjmp	.+146    	; 0xba4 <__vector_13+0x10c>
     b12:	c0 93 e9 04 	sts	0x04E9, r28	; 0x8004e9 <f_10msec>
     b16:	60 91 ee 04 	lds	r22, 0x04EE	; 0x8004ee <systemtick_msecs>
     b1a:	70 91 ef 04 	lds	r23, 0x04EF	; 0x8004ef <systemtick_msecs+0x1>
     b1e:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <systemtick_msecs+0x2>
     b22:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <systemtick_msecs+0x3>
     b26:	24 e6       	ldi	r18, 0x64	; 100
     b28:	30 e0       	ldi	r19, 0x00	; 0
     b2a:	40 e0       	ldi	r20, 0x00	; 0
     b2c:	50 e0       	ldi	r21, 0x00	; 0
     b2e:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
     b32:	67 2b       	or	r22, r23
     b34:	68 2b       	or	r22, r24
     b36:	69 2b       	or	r22, r25
     b38:	a9 f5       	brne	.+106    	; 0xba4 <__vector_13+0x10c>
     b3a:	c0 93 e8 04 	sts	0x04E8, r28	; 0x8004e8 <f_100msec>
     b3e:	60 91 ee 04 	lds	r22, 0x04EE	; 0x8004ee <systemtick_msecs>
     b42:	70 91 ef 04 	lds	r23, 0x04EF	; 0x8004ef <systemtick_msecs+0x1>
     b46:	80 91 f0 04 	lds	r24, 0x04F0	; 0x8004f0 <systemtick_msecs+0x2>
     b4a:	90 91 f1 04 	lds	r25, 0x04F1	; 0x8004f1 <systemtick_msecs+0x3>
     b4e:	28 ee       	ldi	r18, 0xE8	; 232
     b50:	33 e0       	ldi	r19, 0x03	; 3
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
     b5a:	67 2b       	or	r22, r23
     b5c:	68 2b       	or	r22, r24
     b5e:	69 2b       	or	r22, r25
     b60:	09 f5       	brne	.+66     	; 0xba4 <__vector_13+0x10c>
     b62:	c0 93 e7 04 	sts	0x04E7, r28	; 0x8004e7 <f_1sec>
     b66:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <systemtick_secs>
     b6a:	8f 5f       	subi	r24, 0xFF	; 255
     b6c:	80 93 ed 04 	sts	0x04ED, r24	; 0x8004ed <systemtick_secs>
     b70:	80 91 ed 04 	lds	r24, 0x04ED	; 0x8004ed <systemtick_secs>
     b74:	8c 33       	cpi	r24, 0x3C	; 60
     b76:	b0 f0       	brcs	.+44     	; 0xba4 <__vector_13+0x10c>
     b78:	10 92 ed 04 	sts	0x04ED, r1	; 0x8004ed <systemtick_secs>
     b7c:	c0 93 e6 04 	sts	0x04E6, r28	; 0x8004e6 <f_1min>
     b80:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <systemtick_mins>
     b84:	8f 5f       	subi	r24, 0xFF	; 255
     b86:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <systemtick_mins>
     b8a:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <systemtick_mins>
     b8e:	8c 33       	cpi	r24, 0x3C	; 60
     b90:	48 f0       	brcs	.+18     	; 0xba4 <__vector_13+0x10c>
     b92:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <systemtick_mins>
     b96:	c0 93 e5 04 	sts	0x04E5, r28	; 0x8004e5 <f_1hr>
     b9a:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <systemtick_hrs>
     b9e:	8f 5f       	subi	r24, 0xFF	; 255
     ba0:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <systemtick_hrs>
     ba4:	0e 94 b2 04 	call	0x964	; 0x964 <button_check()>
     ba8:	ff 91       	pop	r31
     baa:	ef 91       	pop	r30
     bac:	cf 91       	pop	r28
     bae:	bf 91       	pop	r27
     bb0:	af 91       	pop	r26
     bb2:	9f 91       	pop	r25
     bb4:	8f 91       	pop	r24
     bb6:	7f 91       	pop	r23
     bb8:	6f 91       	pop	r22
     bba:	5f 91       	pop	r21
     bbc:	4f 91       	pop	r20
     bbe:	3f 91       	pop	r19
     bc0:	2f 91       	pop	r18
     bc2:	0f 90       	pop	r0
     bc4:	0b be       	out	0x3b, r0	; 59
     bc6:	0f 90       	pop	r0
     bc8:	0f be       	out	0x3f, r0	; 63
     bca:	0f 90       	pop	r0
     bcc:	1f 90       	pop	r1
     bce:	18 95       	reti

00000bd0 <new_delay_msecs(unsigned int)>:
_Z15new_delay_msecsj():
     bd0:	0f 93       	push	r16
     bd2:	1f 93       	push	r17
     bd4:	cf 93       	push	r28
     bd6:	df 93       	push	r29
     bd8:	ec 01       	movw	r28, r24
     bda:	6d eb       	ldi	r22, 0xBD	; 189
     bdc:	72 e0       	ldi	r23, 0x02	; 2
     bde:	8c ed       	ldi	r24, 0xDC	; 220
     be0:	95 e0       	ldi	r25, 0x05	; 5
     be2:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     be6:	00 91 ee 04 	lds	r16, 0x04EE	; 0x8004ee <systemtick_msecs>
     bea:	10 91 ef 04 	lds	r17, 0x04EF	; 0x8004ef <systemtick_msecs+0x1>
     bee:	20 91 f0 04 	lds	r18, 0x04F0	; 0x8004f0 <systemtick_msecs+0x2>
     bf2:	30 91 f1 04 	lds	r19, 0x04F1	; 0x8004f1 <systemtick_msecs+0x3>
     bf6:	ce 01       	movw	r24, r28
     bf8:	b0 e0       	ldi	r27, 0x00	; 0
     bfa:	a0 e0       	ldi	r26, 0x00	; 0
_Z12time_elapsedm():
     bfc:	40 91 ee 04 	lds	r20, 0x04EE	; 0x8004ee <systemtick_msecs>
     c00:	50 91 ef 04 	lds	r21, 0x04EF	; 0x8004ef <systemtick_msecs+0x1>
     c04:	60 91 f0 04 	lds	r22, 0x04F0	; 0x8004f0 <systemtick_msecs+0x2>
     c08:	70 91 f1 04 	lds	r23, 0x04F1	; 0x8004f1 <systemtick_msecs+0x3>
     c0c:	40 1b       	sub	r20, r16
     c0e:	51 0b       	sbc	r21, r17
     c10:	62 0b       	sbc	r22, r18
     c12:	73 0b       	sbc	r23, r19
_Z15new_delay_msecsj():
     c14:	48 17       	cp	r20, r24
     c16:	59 07       	cpc	r21, r25
     c18:	6a 07       	cpc	r22, r26
     c1a:	7b 07       	cpc	r23, r27
     c1c:	78 f3       	brcs	.-34     	; 0xbfc <new_delay_msecs(unsigned int)+0x2c>
     c1e:	df 91       	pop	r29
     c20:	cf 91       	pop	r28
     c22:	1f 91       	pop	r17
     c24:	0f 91       	pop	r16
     c26:	08 95       	ret

00000c28 <platform_init()>:
_Z13platform_initv():
     c28:	0e 94 a8 04 	call	0x950	; 0x950 <timer_init()>
     c2c:	20 e0       	ldi	r18, 0x00	; 0
     c2e:	44 e0       	ldi	r20, 0x04	; 4
     c30:	64 e1       	ldi	r22, 0x14	; 20
     c32:	87 ef       	ldi	r24, 0xF7	; 247
     c34:	94 e0       	ldi	r25, 0x04	; 4
     c36:	0e 94 4a 0a 	call	0x1494	; 0x1494 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>
     c3a:	61 e0       	ldi	r22, 0x01	; 1
     c3c:	88 e1       	ldi	r24, 0x18	; 24
     c3e:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     c42:	61 e0       	ldi	r22, 0x01	; 1
     c44:	89 e1       	ldi	r24, 0x19	; 25
     c46:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     c4a:	61 e0       	ldi	r22, 0x01	; 1
     c4c:	8a e1       	ldi	r24, 0x1A	; 26
     c4e:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     c52:	61 e0       	ldi	r22, 0x01	; 1
     c54:	8b e1       	ldi	r24, 0x1B	; 27
     c56:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     c5a:	61 e0       	ldi	r22, 0x01	; 1
     c5c:	8c e0       	ldi	r24, 0x0C	; 12
     c5e:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     c62:	61 e0       	ldi	r22, 0x01	; 1
     c64:	8c e0       	ldi	r24, 0x0C	; 12
     c66:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
     c6a:	61 e0       	ldi	r22, 0x01	; 1
     c6c:	8d e1       	ldi	r24, 0x1D	; 29
     c6e:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     c72:	61 e0       	ldi	r22, 0x01	; 1
     c74:	8b e1       	ldi	r24, 0x1B	; 27
     c76:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     c7a:	60 e0       	ldi	r22, 0x00	; 0
     c7c:	83 e0       	ldi	r24, 0x03	; 3
     c7e:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     c82:	62 e0       	ldi	r22, 0x02	; 2
     c84:	83 e0       	ldi	r24, 0x03	; 3
     c86:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     c8a:	60 e0       	ldi	r22, 0x00	; 0
     c8c:	84 e0       	ldi	r24, 0x04	; 4
     c8e:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     c92:	62 e0       	ldi	r22, 0x02	; 2
     c94:	84 e0       	ldi	r24, 0x04	; 4
     c96:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     c9a:	60 e0       	ldi	r22, 0x00	; 0
     c9c:	8d e1       	ldi	r24, 0x1D	; 29
     c9e:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
     ca2:	60 e0       	ldi	r22, 0x00	; 0
     ca4:	8b e1       	ldi	r24, 0x1B	; 27
     ca6:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
     caa:	61 e0       	ldi	r22, 0x01	; 1
     cac:	85 e0       	ldi	r24, 0x05	; 5
     cae:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     cb2:	61 e0       	ldi	r22, 0x01	; 1
     cb4:	87 e0       	ldi	r24, 0x07	; 7
     cb6:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     cba:	61 e0       	ldi	r22, 0x01	; 1
     cbc:	8d e0       	ldi	r24, 0x0D	; 13
     cbe:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     cc2:	60 e0       	ldi	r22, 0x00	; 0
     cc4:	85 e0       	ldi	r24, 0x05	; 5
     cc6:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
     cca:	60 e0       	ldi	r22, 0x00	; 0
     ccc:	87 e0       	ldi	r24, 0x07	; 7
     cce:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
     cd2:	60 e0       	ldi	r22, 0x00	; 0
     cd4:	8d e0       	ldi	r24, 0x0D	; 13
     cd6:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
     cda:	61 e0       	ldi	r22, 0x01	; 1
     cdc:	86 e0       	ldi	r24, 0x06	; 6
     cde:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     ce2:	61 e0       	ldi	r22, 0x01	; 1
     ce4:	8e e0       	ldi	r24, 0x0E	; 14
     ce6:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     cea:	61 e0       	ldi	r22, 0x01	; 1
     cec:	8f e0       	ldi	r24, 0x0F	; 15
     cee:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
     cf2:	60 e0       	ldi	r22, 0x00	; 0
     cf4:	86 e0       	ldi	r24, 0x06	; 6
     cf6:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
     cfa:	60 e0       	ldi	r22, 0x00	; 0
     cfc:	8e e0       	ldi	r24, 0x0E	; 14
     cfe:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
     d02:	60 e0       	ldi	r22, 0x00	; 0
     d04:	8f e0       	ldi	r24, 0x0F	; 15
     d06:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
     d0a:	6f eb       	ldi	r22, 0xBF	; 191
     d0c:	72 e0       	ldi	r23, 0x02	; 2
     d0e:	8c ed       	ldi	r24, 0xDC	; 220
     d10:	95 e0       	ldi	r25, 0x05	; 5
     d12:	0c 94 33 14 	jmp	0x2866	; 0x2866 <Print::println(char const*)>

00000d16 <do_control(DO_CONTROLS_E, bool)>:
_Z10do_control13DO_CONTROLS_Eb():
     d16:	1f 93       	push	r17
     d18:	cf 93       	push	r28
     d1a:	df 93       	push	r29
     d1c:	ec 01       	movw	r28, r24
     d1e:	16 2f       	mov	r17, r22
     d20:	88 30       	cpi	r24, 0x08	; 8
     d22:	91 05       	cpc	r25, r1
     d24:	71 f1       	breq	.+92     	; 0xd82 <do_control(DO_CONTROLS_E, bool)+0x6c>
     d26:	60 f4       	brcc	.+24     	; 0xd40 <do_control(DO_CONTROLS_E, bool)+0x2a>
     d28:	82 30       	cpi	r24, 0x02	; 2
     d2a:	91 05       	cpc	r25, r1
     d2c:	31 f1       	breq	.+76     	; 0xd7a <do_control(DO_CONTROLS_E, bool)+0x64>
     d2e:	84 30       	cpi	r24, 0x04	; 4
     d30:	91 05       	cpc	r25, r1
     d32:	29 f1       	breq	.+74     	; 0xd7e <do_control(DO_CONTROLS_E, bool)+0x68>
     d34:	01 97       	sbiw	r24, 0x01	; 1
     d36:	71 f4       	brne	.+28     	; 0xd54 <do_control(DO_CONTROLS_E, bool)+0x3e>
     d38:	88 e1       	ldi	r24, 0x18	; 24
     d3a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
     d3e:	15 c0       	rjmp	.+42     	; 0xd6a <do_control(DO_CONTROLS_E, bool)+0x54>
     d40:	80 32       	cpi	r24, 0x20	; 32
     d42:	91 05       	cpc	r25, r1
     d44:	91 f0       	breq	.+36     	; 0xd6a <do_control(DO_CONTROLS_E, bool)+0x54>
     d46:	58 f4       	brcc	.+22     	; 0xd5e <do_control(DO_CONTROLS_E, bool)+0x48>
     d48:	61 e0       	ldi	r22, 0x01	; 1
     d4a:	61 27       	eor	r22, r17
     d4c:	8d e1       	ldi	r24, 0x1D	; 29
     d4e:	c0 31       	cpi	r28, 0x10	; 16
     d50:	d1 05       	cpc	r29, r1
     d52:	99 f3       	breq	.-26     	; 0xd3a <do_control(DO_CONTROLS_E, bool)+0x24>
     d54:	80 e0       	ldi	r24, 0x00	; 0
     d56:	df 91       	pop	r29
     d58:	cf 91       	pop	r28
     d5a:	1f 91       	pop	r17
     d5c:	08 95       	ret
     d5e:	80 34       	cpi	r24, 0x40	; 64
     d60:	91 05       	cpc	r25, r1
     d62:	19 f0       	breq	.+6      	; 0xd6a <do_control(DO_CONTROLS_E, bool)+0x54>
     d64:	80 38       	cpi	r24, 0x80	; 128
     d66:	91 05       	cpc	r25, r1
     d68:	a9 f7       	brne	.-22     	; 0xd54 <do_control(DO_CONTROLS_E, bool)+0x3e>
     d6a:	80 91 c7 04 	lds	r24, 0x04C7	; 0x8004c7 <do_byte>
     d6e:	11 23       	and	r17, r17
     d70:	51 f0       	breq	.+20     	; 0xd86 <do_control(DO_CONTROLS_E, bool)+0x70>
     d72:	c8 2b       	or	r28, r24
     d74:	c0 93 c7 04 	sts	0x04C7, r28	; 0x8004c7 <do_byte>
     d78:	ed cf       	rjmp	.-38     	; 0xd54 <do_control(DO_CONTROLS_E, bool)+0x3e>
     d7a:	89 e1       	ldi	r24, 0x19	; 25
     d7c:	de cf       	rjmp	.-68     	; 0xd3a <do_control(DO_CONTROLS_E, bool)+0x24>
     d7e:	8a e1       	ldi	r24, 0x1A	; 26
     d80:	dc cf       	rjmp	.-72     	; 0xd3a <do_control(DO_CONTROLS_E, bool)+0x24>
     d82:	8b e1       	ldi	r24, 0x1B	; 27
     d84:	da cf       	rjmp	.-76     	; 0xd3a <do_control(DO_CONTROLS_E, bool)+0x24>
     d86:	c0 95       	com	r28
     d88:	c8 23       	and	r28, r24
     d8a:	f4 cf       	rjmp	.-24     	; 0xd74 <do_control(DO_CONTROLS_E, bool)+0x5e>

00000d8c <chine_new_PSA_logic()>:
_Z19chine_new_PSA_logicv():
     d8c:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <cycle>
     d90:	82 30       	cpi	r24, 0x02	; 2
     d92:	09 f4       	brne	.+2      	; 0xd96 <chine_new_PSA_logic()+0xa>
     d94:	7f c0       	rjmp	.+254    	; 0xe94 <chine_new_PSA_logic()+0x108>
     d96:	80 f4       	brcc	.+32     	; 0xdb8 <chine_new_PSA_logic()+0x2c>
     d98:	88 23       	and	r24, r24
     d9a:	99 f1       	breq	.+102    	; 0xe02 <chine_new_PSA_logic()+0x76>
     d9c:	81 30       	cpi	r24, 0x01	; 1
     d9e:	09 f4       	brne	.+2      	; 0xda2 <chine_new_PSA_logic()+0x16>
     da0:	4e c0       	rjmp	.+156    	; 0xe3e <chine_new_PSA_logic()+0xb2>
     da2:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <cycle>
     da6:	10 92 cc 04 	sts	0x04CC, r1	; 0x8004cc <nb_delay>
     daa:	10 92 cd 04 	sts	0x04CD, r1	; 0x8004cd <nb_delay+0x1>
     dae:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <nb_delay+0x2>
     db2:	10 92 cf 04 	sts	0x04CF, r1	; 0x8004cf <nb_delay+0x3>
     db6:	08 95       	ret
     db8:	84 30       	cpi	r24, 0x04	; 4
     dba:	09 f4       	brne	.+2      	; 0xdbe <chine_new_PSA_logic()+0x32>
     dbc:	7b c0       	rjmp	.+246    	; 0xeb4 <chine_new_PSA_logic()+0x128>
     dbe:	08 f4       	brcc	.+2      	; 0xdc2 <chine_new_PSA_logic()+0x36>
     dc0:	6c c0       	rjmp	.+216    	; 0xe9a <chine_new_PSA_logic()+0x10e>
     dc2:	60 ed       	ldi	r22, 0xD0	; 208
     dc4:	72 e0       	ldi	r23, 0x02	; 2
     dc6:	85 30       	cpi	r24, 0x05	; 5
     dc8:	61 f7       	brne	.-40     	; 0xda2 <chine_new_PSA_logic()+0x16>
     dca:	8c ed       	ldi	r24, 0xDC	; 220
     dcc:	95 e0       	ldi	r25, 0x05	; 5
     dce:	0e 94 33 14 	call	0x2866	; 0x2866 <Print::println(char const*)>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	81 e0       	ldi	r24, 0x01	; 1
     dd6:	90 e0       	ldi	r25, 0x00	; 0
     dd8:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	82 e0       	ldi	r24, 0x02	; 2
     de0:	90 e0       	ldi	r25, 0x00	; 0
     de2:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
     de6:	61 e0       	ldi	r22, 0x01	; 1
     de8:	84 e0       	ldi	r24, 0x04	; 4
     dea:	90 e0       	ldi	r25, 0x00	; 0
     dec:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
     df0:	80 91 d0 04 	lds	r24, 0x04D0	; 0x8004d0 <PreCharge_Delay>
     df4:	90 91 d1 04 	lds	r25, 0x04D1	; 0x8004d1 <PreCharge_Delay+0x1>
     df8:	a0 91 d2 04 	lds	r26, 0x04D2	; 0x8004d2 <PreCharge_Delay+0x2>
     dfc:	b0 91 d3 04 	lds	r27, 0x04D3	; 0x8004d3 <PreCharge_Delay+0x3>
     e00:	3b c0       	rjmp	.+118    	; 0xe78 <chine_new_PSA_logic()+0xec>
     e02:	60 ed       	ldi	r22, 0xD0	; 208
     e04:	72 e0       	ldi	r23, 0x02	; 2
     e06:	8c ed       	ldi	r24, 0xDC	; 220
     e08:	95 e0       	ldi	r25, 0x05	; 5
     e0a:	0e 94 33 14 	call	0x2866	; 0x2866 <Print::println(char const*)>
     e0e:	61 e0       	ldi	r22, 0x01	; 1
     e10:	81 e0       	ldi	r24, 0x01	; 1
     e12:	90 e0       	ldi	r25, 0x00	; 0
     e14:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
     e18:	60 e0       	ldi	r22, 0x00	; 0
     e1a:	82 e0       	ldi	r24, 0x02	; 2
     e1c:	90 e0       	ldi	r25, 0x00	; 0
     e1e:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
     e22:	60 e0       	ldi	r22, 0x00	; 0
     e24:	84 e0       	ldi	r24, 0x04	; 4
     e26:	90 e0       	ldi	r25, 0x00	; 0
     e28:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
     e2c:	80 91 d8 04 	lds	r24, 0x04D8	; 0x8004d8 <Production_Delay>
     e30:	90 91 d9 04 	lds	r25, 0x04D9	; 0x8004d9 <Production_Delay+0x1>
     e34:	a0 91 da 04 	lds	r26, 0x04DA	; 0x8004da <Production_Delay+0x2>
     e38:	b0 91 db 04 	lds	r27, 0x04DB	; 0x8004db <Production_Delay+0x3>
     e3c:	1d c0       	rjmp	.+58     	; 0xe78 <chine_new_PSA_logic()+0xec>
     e3e:	60 ed       	ldi	r22, 0xD0	; 208
     e40:	72 e0       	ldi	r23, 0x02	; 2
     e42:	8c ed       	ldi	r24, 0xDC	; 220
     e44:	95 e0       	ldi	r25, 0x05	; 5
     e46:	0e 94 33 14 	call	0x2866	; 0x2866 <Print::println(char const*)>
     e4a:	61 e0       	ldi	r22, 0x01	; 1
     e4c:	81 e0       	ldi	r24, 0x01	; 1
     e4e:	90 e0       	ldi	r25, 0x00	; 0
     e50:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	82 e0       	ldi	r24, 0x02	; 2
     e58:	90 e0       	ldi	r25, 0x00	; 0
     e5a:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
     e5e:	61 e0       	ldi	r22, 0x01	; 1
     e60:	84 e0       	ldi	r24, 0x04	; 4
     e62:	90 e0       	ldi	r25, 0x00	; 0
     e64:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
     e68:	80 91 d4 04 	lds	r24, 0x04D4	; 0x8004d4 <Flush_Delay>
     e6c:	90 91 d5 04 	lds	r25, 0x04D5	; 0x8004d5 <Flush_Delay+0x1>
     e70:	a0 91 d6 04 	lds	r26, 0x04D6	; 0x8004d6 <Flush_Delay+0x2>
     e74:	b0 91 d7 04 	lds	r27, 0x04D7	; 0x8004d7 <Flush_Delay+0x3>
     e78:	80 93 cc 04 	sts	0x04CC, r24	; 0x8004cc <nb_delay>
     e7c:	90 93 cd 04 	sts	0x04CD, r25	; 0x8004cd <nb_delay+0x1>
     e80:	a0 93 ce 04 	sts	0x04CE, r26	; 0x8004ce <nb_delay+0x2>
     e84:	b0 93 cf 04 	sts	0x04CF, r27	; 0x8004cf <nb_delay+0x3>
     e88:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <cycle>
     e8c:	8f 5f       	subi	r24, 0xFF	; 255
     e8e:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <cycle>
     e92:	08 95       	ret
     e94:	6f ee       	ldi	r22, 0xEF	; 239
     e96:	72 e0       	ldi	r23, 0x02	; 2
     e98:	98 cf       	rjmp	.-208    	; 0xdca <chine_new_PSA_logic()+0x3e>
     e9a:	60 e2       	ldi	r22, 0x20	; 32
     e9c:	73 e0       	ldi	r23, 0x03	; 3
     e9e:	8c ed       	ldi	r24, 0xDC	; 220
     ea0:	95 e0       	ldi	r25, 0x05	; 5
     ea2:	0e 94 33 14 	call	0x2866	; 0x2866 <Print::println(char const*)>
     ea6:	60 e0       	ldi	r22, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
     eb0:	61 e0       	ldi	r22, 0x01	; 1
     eb2:	b3 cf       	rjmp	.-154    	; 0xe1a <chine_new_PSA_logic()+0x8e>
     eb4:	60 e2       	ldi	r22, 0x20	; 32
     eb6:	73 e0       	ldi	r23, 0x03	; 3
     eb8:	8c ed       	ldi	r24, 0xDC	; 220
     eba:	95 e0       	ldi	r25, 0x05	; 5
     ebc:	0e 94 33 14 	call	0x2866	; 0x2866 <Print::println(char const*)>
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	81 e0       	ldi	r24, 0x01	; 1
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
     eca:	61 e0       	ldi	r22, 0x01	; 1
     ecc:	c4 cf       	rjmp	.-120    	; 0xe56 <chine_new_PSA_logic()+0xca>

00000ece <o2_main_task()>:
_Z12o2_main_taskv():
     ece:	80 91 e4 04 	lds	r24, 0x04E4	; 0x8004e4 <f_system_running>
     ed2:	88 23       	and	r24, r24
     ed4:	09 f4       	brne	.+2      	; 0xed8 <o2_main_task()+0xa>
     ed6:	7a c0       	rjmp	.+244    	; 0xfcc <o2_main_task()+0xfe>
     ed8:	80 91 e1 04 	lds	r24, 0x04E1	; 0x8004e1 <f_sec_change_o2_task>
     edc:	88 23       	and	r24, r24
     ede:	59 f0       	breq	.+22     	; 0xef6 <o2_main_task()+0x28>
     ee0:	10 92 e1 04 	sts	0x04E1, r1	; 0x8004e1 <f_sec_change_o2_task>
     ee4:	80 91 dc 04 	lds	r24, 0x04DC	; 0x8004dc <production_time_secs>
     ee8:	90 91 dd 04 	lds	r25, 0x04DD	; 0x8004dd <production_time_secs+0x1>
     eec:	01 96       	adiw	r24, 0x01	; 1
     eee:	90 93 dd 04 	sts	0x04DD, r25	; 0x8004dd <production_time_secs+0x1>
     ef2:	80 93 dc 04 	sts	0x04DC, r24	; 0x8004dc <production_time_secs>
_Z12time_elapsedm():
     ef6:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <systemtick_msecs>
     efa:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <systemtick_msecs+0x1>
     efe:	a0 91 f0 04 	lds	r26, 0x04F0	; 0x8004f0 <systemtick_msecs+0x2>
     f02:	b0 91 f1 04 	lds	r27, 0x04F1	; 0x8004f1 <systemtick_msecs+0x3>
     f06:	40 91 f2 04 	lds	r20, 0x04F2	; 0x8004f2 <o2_main_task()::time_tag>
     f0a:	50 91 f3 04 	lds	r21, 0x04F3	; 0x8004f3 <o2_main_task()::time_tag+0x1>
     f0e:	60 91 f4 04 	lds	r22, 0x04F4	; 0x8004f4 <o2_main_task()::time_tag+0x2>
     f12:	70 91 f5 04 	lds	r23, 0x04F5	; 0x8004f5 <o2_main_task()::time_tag+0x3>
     f16:	84 1b       	sub	r24, r20
     f18:	95 0b       	sbc	r25, r21
     f1a:	a6 0b       	sbc	r26, r22
     f1c:	b7 0b       	sbc	r27, r23
_Z12o2_main_taskv():
     f1e:	40 91 cc 04 	lds	r20, 0x04CC	; 0x8004cc <nb_delay>
     f22:	50 91 cd 04 	lds	r21, 0x04CD	; 0x8004cd <nb_delay+0x1>
     f26:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <nb_delay+0x2>
     f2a:	70 91 cf 04 	lds	r23, 0x04CF	; 0x8004cf <nb_delay+0x3>
     f2e:	84 17       	cp	r24, r20
     f30:	95 07       	cpc	r25, r21
     f32:	a6 07       	cpc	r26, r22
     f34:	b7 07       	cpc	r27, r23
     f36:	08 f4       	brcc	.+2      	; 0xf3a <o2_main_task()+0x6c>
     f38:	49 c0       	rjmp	.+146    	; 0xfcc <o2_main_task()+0xfe>
     f3a:	80 91 ee 04 	lds	r24, 0x04EE	; 0x8004ee <systemtick_msecs>
     f3e:	90 91 ef 04 	lds	r25, 0x04EF	; 0x8004ef <systemtick_msecs+0x1>
     f42:	a0 91 f0 04 	lds	r26, 0x04F0	; 0x8004f0 <systemtick_msecs+0x2>
     f46:	b0 91 f1 04 	lds	r27, 0x04F1	; 0x8004f1 <systemtick_msecs+0x3>
     f4a:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <o2_main_task()::time_tag>
     f4e:	90 93 f3 04 	sts	0x04F3, r25	; 0x8004f3 <o2_main_task()::time_tag+0x1>
     f52:	a0 93 f4 04 	sts	0x04F4, r26	; 0x8004f4 <o2_main_task()::time_tag+0x2>
     f56:	b0 93 f5 04 	sts	0x04F5, r27	; 0x8004f5 <o2_main_task()::time_tag+0x3>
     f5a:	62 e5       	ldi	r22, 0x52	; 82
     f5c:	73 e0       	ldi	r23, 0x03	; 3
     f5e:	8c ed       	ldi	r24, 0xDC	; 220
     f60:	95 e0       	ldi	r25, 0x05	; 5
     f62:	0e 94 33 14 	call	0x2866	; 0x2866 <Print::println(char const*)>
     f66:	0e 94 c6 06 	call	0xd8c	; 0xd8c <chine_new_PSA_logic()>
     f6a:	80 91 cc 04 	lds	r24, 0x04CC	; 0x8004cc <nb_delay>
     f6e:	90 91 cd 04 	lds	r25, 0x04CD	; 0x8004cd <nb_delay+0x1>
     f72:	a0 91 ce 04 	lds	r26, 0x04CE	; 0x8004ce <nb_delay+0x2>
     f76:	b0 91 cf 04 	lds	r27, 0x04CF	; 0x8004cf <nb_delay+0x3>
     f7a:	40 91 c8 04 	lds	r20, 0x04C8	; 0x8004c8 <prev_nb_delay>
     f7e:	50 91 c9 04 	lds	r21, 0x04C9	; 0x8004c9 <prev_nb_delay+0x1>
     f82:	60 91 ca 04 	lds	r22, 0x04CA	; 0x8004ca <prev_nb_delay+0x2>
     f86:	70 91 cb 04 	lds	r23, 0x04CB	; 0x8004cb <prev_nb_delay+0x3>
     f8a:	84 17       	cp	r24, r20
     f8c:	95 07       	cpc	r25, r21
     f8e:	a6 07       	cpc	r26, r22
     f90:	b7 07       	cpc	r27, r23
     f92:	e1 f0       	breq	.+56     	; 0xfcc <o2_main_task()+0xfe>
     f94:	80 93 c8 04 	sts	0x04C8, r24	; 0x8004c8 <prev_nb_delay>
     f98:	90 93 c9 04 	sts	0x04C9, r25	; 0x8004c9 <prev_nb_delay+0x1>
     f9c:	a0 93 ca 04 	sts	0x04CA, r26	; 0x8004ca <prev_nb_delay+0x2>
     fa0:	b0 93 cb 04 	sts	0x04CB, r27	; 0x8004cb <prev_nb_delay+0x3>
     fa4:	66 e6       	ldi	r22, 0x66	; 102
     fa6:	73 e0       	ldi	r23, 0x03	; 3
     fa8:	8c ed       	ldi	r24, 0xDC	; 220
     faa:	95 e0       	ldi	r25, 0x05	; 5
     fac:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
     fb0:	40 91 cc 04 	lds	r20, 0x04CC	; 0x8004cc <nb_delay>
     fb4:	50 91 cd 04 	lds	r21, 0x04CD	; 0x8004cd <nb_delay+0x1>
     fb8:	60 91 ce 04 	lds	r22, 0x04CE	; 0x8004ce <nb_delay+0x2>
     fbc:	70 91 cf 04 	lds	r23, 0x04CF	; 0x8004cf <nb_delay+0x3>
     fc0:	2a e0       	ldi	r18, 0x0A	; 10
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	8c ed       	ldi	r24, 0xDC	; 220
     fc6:	95 e0       	ldi	r25, 0x05	; 5
     fc8:	0c 94 0a 15 	jmp	0x2a14	; 0x2a14 <Print::println(unsigned long, int)>
     fcc:	08 95       	ret

00000fce <o2_cons_init()>:
_Z12o2_cons_initv():
     fce:	0e 94 35 02 	call	0x46a	; 0x46a <sensor_zero_calibration()>
     fd2:	80 ea       	ldi	r24, 0xA0	; 160
     fd4:	9f e0       	ldi	r25, 0x0F	; 15
     fd6:	a0 e0       	ldi	r26, 0x00	; 0
     fd8:	b0 e0       	ldi	r27, 0x00	; 0
     fda:	80 93 d8 04 	sts	0x04D8, r24	; 0x8004d8 <Production_Delay>
     fde:	90 93 d9 04 	sts	0x04D9, r25	; 0x8004d9 <Production_Delay+0x1>
     fe2:	a0 93 da 04 	sts	0x04DA, r26	; 0x8004da <Production_Delay+0x2>
     fe6:	b0 93 db 04 	sts	0x04DB, r27	; 0x8004db <Production_Delay+0x3>
     fea:	88 ec       	ldi	r24, 0xC8	; 200
     fec:	90 e0       	ldi	r25, 0x00	; 0
     fee:	a0 e0       	ldi	r26, 0x00	; 0
     ff0:	b0 e0       	ldi	r27, 0x00	; 0
     ff2:	80 93 d4 04 	sts	0x04D4, r24	; 0x8004d4 <Flush_Delay>
     ff6:	90 93 d5 04 	sts	0x04D5, r25	; 0x8004d5 <Flush_Delay+0x1>
     ffa:	a0 93 d6 04 	sts	0x04D6, r26	; 0x8004d6 <Flush_Delay+0x2>
     ffe:	b0 93 d7 04 	sts	0x04D7, r27	; 0x8004d7 <Flush_Delay+0x3>
    1002:	80 93 d0 04 	sts	0x04D0, r24	; 0x8004d0 <PreCharge_Delay>
    1006:	90 93 d1 04 	sts	0x04D1, r25	; 0x8004d1 <PreCharge_Delay+0x1>
    100a:	a0 93 d2 04 	sts	0x04D2, r26	; 0x8004d2 <PreCharge_Delay+0x2>
    100e:	b0 93 d3 04 	sts	0x04D3, r27	; 0x8004d3 <PreCharge_Delay+0x3>
    1012:	61 e0       	ldi	r22, 0x01	; 1
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
    101c:	61 e0       	ldi	r22, 0x01	; 1
    101e:	82 e0       	ldi	r24, 0x02	; 2
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
    1026:	61 e0       	ldi	r22, 0x01	; 1
    1028:	84 e0       	ldi	r24, 0x04	; 4
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
    1030:	88 ee       	ldi	r24, 0xE8	; 232
    1032:	93 e0       	ldi	r25, 0x03	; 3
    1034:	0c 94 e8 05 	jmp	0xbd0	; 0xbd0 <new_delay_msecs(unsigned int)>

00001038 <ui_print_welcome()>:
_Z16ui_print_welcomev():
    1038:	40 e0       	ldi	r20, 0x00	; 0
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	87 ef       	ldi	r24, 0xF7	; 247
    103e:	94 e0       	ldi	r25, 0x04	; 4
    1040:	0e 94 31 0a 	call	0x1462	; 0x1462 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1044:	62 e7       	ldi	r22, 0x72	; 114
    1046:	73 e0       	ldi	r23, 0x03	; 3
    1048:	87 ef       	ldi	r24, 0xF7	; 247
    104a:	94 e0       	ldi	r25, 0x04	; 4
    104c:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
    1050:	41 e0       	ldi	r20, 0x01	; 1
    1052:	60 e0       	ldi	r22, 0x00	; 0
    1054:	87 ef       	ldi	r24, 0xF7	; 247
    1056:	94 e0       	ldi	r25, 0x04	; 4
    1058:	0e 94 31 0a 	call	0x1462	; 0x1462 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    105c:	65 e8       	ldi	r22, 0x85	; 133
    105e:	73 e0       	ldi	r23, 0x03	; 3
    1060:	87 ef       	ldi	r24, 0xF7	; 247
    1062:	94 e0       	ldi	r25, 0x04	; 4
    1064:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
    1068:	42 e0       	ldi	r20, 0x02	; 2
    106a:	60 e0       	ldi	r22, 0x00	; 0
    106c:	87 ef       	ldi	r24, 0xF7	; 247
    106e:	94 e0       	ldi	r25, 0x04	; 4
    1070:	0e 94 31 0a 	call	0x1462	; 0x1462 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1074:	64 e9       	ldi	r22, 0x94	; 148
    1076:	73 e0       	ldi	r23, 0x03	; 3
    1078:	87 ef       	ldi	r24, 0xF7	; 247
    107a:	94 e0       	ldi	r25, 0x04	; 4
    107c:	0c 94 0e 14 	jmp	0x281c	; 0x281c <Print::print(char const*)>

00001080 <setup>:
_ZN14HardwareSerial5beginEm():
    1080:	26 e0       	ldi	r18, 0x06	; 6
    1082:	40 e0       	ldi	r20, 0x00	; 0
    1084:	52 ec       	ldi	r21, 0xC2	; 194
    1086:	61 e0       	ldi	r22, 0x01	; 1
    1088:	70 e0       	ldi	r23, 0x00	; 0
    108a:	8c ed       	ldi	r24, 0xDC	; 220
    108c:	95 e0       	ldi	r25, 0x05	; 5
    108e:	0e 94 af 12 	call	0x255e	; 0x255e <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
    1092:	69 ea       	ldi	r22, 0xA9	; 169
    1094:	73 e0       	ldi	r23, 0x03	; 3
    1096:	8c ed       	ldi	r24, 0xDC	; 220
    1098:	95 e0       	ldi	r25, 0x05	; 5
    109a:	0e 94 33 14 	call	0x2866	; 0x2866 <Print::println(char const*)>
    109e:	0e 94 14 06 	call	0xc28	; 0xc28 <platform_init()>
_Z7db_initv():
    10a2:	10 92 e4 04 	sts	0x04E4, r1	; 0x8004e4 <f_system_running>
_Z7ui_initv():
    10a6:	0e 94 1c 08 	call	0x1038	; 0x1038 <ui_print_welcome()>
setup():
    10aa:	0e 94 11 02 	call	0x422	; 0x422 <ads_init()>
    10ae:	0c 94 e7 07 	jmp	0xfce	; 0xfce <o2_cons_init()>

000010b2 <beep_for(int)>:
_Z8beep_fori():
    10b2:	cf 93       	push	r28
    10b4:	df 93       	push	r29
    10b6:	ec 01       	movw	r28, r24
    10b8:	60 e0       	ldi	r22, 0x00	; 0
    10ba:	80 e1       	ldi	r24, 0x10	; 16
    10bc:	90 e0       	ldi	r25, 0x00	; 0
    10be:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
    10c2:	ce 01       	movw	r24, r28
    10c4:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <new_delay_msecs(unsigned int)>
    10c8:	61 e0       	ldi	r22, 0x01	; 1
    10ca:	80 e1       	ldi	r24, 0x10	; 16
    10cc:	90 e0       	ldi	r25, 0x00	; 0
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	0c 94 8b 06 	jmp	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>

000010d6 <ui_task_main()>:
_Z12ui_task_mainv():
    10d6:	80 91 e2 04 	lds	r24, 0x04E2	; 0x8004e2 <f_sec_change_ui_task>
    10da:	88 23       	and	r24, r24
    10dc:	59 f0       	breq	.+22     	; 0x10f4 <ui_task_main()+0x1e>
    10de:	10 92 e2 04 	sts	0x04E2, r1	; 0x8004e2 <f_sec_change_ui_task>
    10e2:	80 91 7e 04 	lds	r24, 0x047E	; 0x80047e <__data_end>
    10e6:	90 91 7f 04 	lds	r25, 0x047F	; 0x80047f <__data_end+0x1>
    10ea:	01 96       	adiw	r24, 0x01	; 1
    10ec:	90 93 7f 04 	sts	0x047F, r25	; 0x80047f <__data_end+0x1>
    10f0:	80 93 7e 04 	sts	0x047E, r24	; 0x80047e <__data_end>
    10f4:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <ui_state>
    10f8:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <ui_state+0x1>
    10fc:	85 30       	cpi	r24, 0x05	; 5
    10fe:	91 05       	cpc	r25, r1
    1100:	09 f4       	brne	.+2      	; 0x1104 <ui_task_main()+0x2e>
    1102:	70 c0       	rjmp	.+224    	; 0x11e4 <ui_task_main()+0x10e>
    1104:	54 f4       	brge	.+20     	; 0x111a <ui_task_main()+0x44>
    1106:	00 97       	sbiw	r24, 0x00	; 0
    1108:	71 f1       	breq	.+92     	; 0x1166 <ui_task_main()+0x90>
    110a:	04 97       	sbiw	r24, 0x04	; 4
    110c:	09 f4       	brne	.+2      	; 0x1110 <ui_task_main()+0x3a>
    110e:	55 c0       	rjmp	.+170    	; 0x11ba <ui_task_main()+0xe4>
    1110:	10 92 83 04 	sts	0x0483, r1	; 0x800483 <ui_state+0x1>
    1114:	10 92 82 04 	sts	0x0482, r1	; 0x800482 <ui_state>
    1118:	2c c0       	rjmp	.+88     	; 0x1172 <ui_task_main()+0x9c>
    111a:	86 30       	cpi	r24, 0x06	; 6
    111c:	91 05       	cpc	r25, r1
    111e:	09 f4       	brne	.+2      	; 0x1122 <ui_task_main()+0x4c>
    1120:	91 c0       	rjmp	.+290    	; 0x1244 <ui_task_main()+0x16e>
    1122:	07 97       	sbiw	r24, 0x07	; 7
    1124:	a9 f7       	brne	.-22     	; 0x1110 <ui_task_main()+0x3a>
    1126:	60 e0       	ldi	r22, 0x00	; 0
    1128:	88 e0       	ldi	r24, 0x08	; 8
    112a:	90 e0       	ldi	r25, 0x00	; 0
    112c:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
    1130:	8f e6       	ldi	r24, 0x6F	; 111
    1132:	90 e0       	ldi	r25, 0x00	; 0
    1134:	0e 94 59 08 	call	0x10b2	; 0x10b2 <beep_for(int)>
    1138:	88 ee       	ldi	r24, 0xE8	; 232
    113a:	93 e0       	ldi	r25, 0x03	; 3
    113c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <new_delay_msecs(unsigned int)>
    1140:	43 e0       	ldi	r20, 0x03	; 3
    1142:	60 e0       	ldi	r22, 0x00	; 0
    1144:	87 ef       	ldi	r24, 0xF7	; 247
    1146:	94 e0       	ldi	r25, 0x04	; 4
    1148:	0e 94 31 0a 	call	0x1462	; 0x1462 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    114c:	6d e1       	ldi	r22, 0x1D	; 29
    114e:	74 e0       	ldi	r23, 0x04	; 4
    1150:	87 ef       	ldi	r24, 0xF7	; 247
    1152:	94 e0       	ldi	r25, 0x04	; 4
    1154:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
    1158:	88 ee       	ldi	r24, 0xE8	; 232
    115a:	93 e0       	ldi	r25, 0x03	; 3
    115c:	0e 94 e8 05 	call	0xbd0	; 0xbd0 <new_delay_msecs(unsigned int)>
    1160:	88 e0       	ldi	r24, 0x08	; 8
    1162:	90 e0       	ldi	r25, 0x00	; 0
    1164:	02 c0       	rjmp	.+4      	; 0x116a <ui_task_main()+0x94>
    1166:	84 e0       	ldi	r24, 0x04	; 4
    1168:	90 e0       	ldi	r25, 0x00	; 0
    116a:	90 93 83 04 	sts	0x0483, r25	; 0x800483 <ui_state+0x1>
    116e:	80 93 82 04 	sts	0x0482, r24	; 0x800482 <ui_state>
    1172:	80 91 82 04 	lds	r24, 0x0482	; 0x800482 <ui_state>
    1176:	90 91 83 04 	lds	r25, 0x0483	; 0x800483 <ui_state+0x1>
    117a:	20 91 80 04 	lds	r18, 0x0480	; 0x800480 <prev_ui_state>
    117e:	30 91 81 04 	lds	r19, 0x0481	; 0x800481 <prev_ui_state+0x1>
    1182:	82 17       	cp	r24, r18
    1184:	93 07       	cpc	r25, r19
    1186:	09 f4       	brne	.+2      	; 0x118a <ui_task_main()+0xb4>
    1188:	64 c0       	rjmp	.+200    	; 0x1252 <ui_task_main()+0x17c>
    118a:	90 93 81 04 	sts	0x0481, r25	; 0x800481 <prev_ui_state+0x1>
    118e:	80 93 80 04 	sts	0x0480, r24	; 0x800480 <prev_ui_state>
    1192:	10 92 7f 04 	sts	0x047F, r1	; 0x80047f <__data_end+0x1>
    1196:	10 92 7e 04 	sts	0x047E, r1	; 0x80047e <__data_end>
    119a:	62 e3       	ldi	r22, 0x32	; 50
    119c:	74 e0       	ldi	r23, 0x04	; 4
    119e:	8c ed       	ldi	r24, 0xDC	; 220
    11a0:	95 e0       	ldi	r25, 0x05	; 5
    11a2:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
    11a6:	60 91 82 04 	lds	r22, 0x0482	; 0x800482 <ui_state>
    11aa:	70 91 83 04 	lds	r23, 0x0483	; 0x800483 <ui_state+0x1>
    11ae:	4a e0       	ldi	r20, 0x0A	; 10
    11b0:	50 e0       	ldi	r21, 0x00	; 0
    11b2:	8c ed       	ldi	r24, 0xDC	; 220
    11b4:	95 e0       	ldi	r25, 0x05	; 5
    11b6:	0c 94 e5 14 	jmp	0x29ca	; 0x29ca <Print::println(int, int)>
    11ba:	87 ef       	ldi	r24, 0xF7	; 247
    11bc:	94 e0       	ldi	r25, 0x04	; 4
    11be:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LiquidCrystal::clear()>
    11c2:	0e 94 1c 08 	call	0x1038	; 0x1038 <ui_print_welcome()>
    11c6:	43 e0       	ldi	r20, 0x03	; 3
    11c8:	60 e0       	ldi	r22, 0x00	; 0
    11ca:	87 ef       	ldi	r24, 0xF7	; 247
    11cc:	94 e0       	ldi	r25, 0x04	; 4
    11ce:	0e 94 31 0a 	call	0x1462	; 0x1462 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    11d2:	65 ec       	ldi	r22, 0xC5	; 197
    11d4:	73 e0       	ldi	r23, 0x03	; 3
    11d6:	87 ef       	ldi	r24, 0xF7	; 247
    11d8:	94 e0       	ldi	r25, 0x04	; 4
    11da:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
    11de:	85 e0       	ldi	r24, 0x05	; 5
    11e0:	90 e0       	ldi	r25, 0x00	; 0
    11e2:	c3 cf       	rjmp	.-122    	; 0x116a <ui_task_main()+0x94>
    11e4:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <start_switch_pressed>
    11e8:	81 30       	cpi	r24, 0x01	; 1
    11ea:	19 f6       	brne	.-122    	; 0x1172 <ui_task_main()+0x9c>
    11ec:	80 93 e4 04 	sts	0x04E4, r24	; 0x8004e4 <f_system_running>
    11f0:	6a ed       	ldi	r22, 0xDA	; 218
    11f2:	73 e0       	ldi	r23, 0x03	; 3
    11f4:	8c ed       	ldi	r24, 0xDC	; 220
    11f6:	95 e0       	ldi	r25, 0x05	; 5
    11f8:	0e 94 33 14 	call	0x2866	; 0x2866 <Print::println(char const*)>
    11fc:	43 e0       	ldi	r20, 0x03	; 3
    11fe:	60 e0       	ldi	r22, 0x00	; 0
    1200:	87 ef       	ldi	r24, 0xF7	; 247
    1202:	94 e0       	ldi	r25, 0x04	; 4
    1204:	0e 94 31 0a 	call	0x1462	; 0x1462 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1208:	62 ef       	ldi	r22, 0xF2	; 242
    120a:	73 e0       	ldi	r23, 0x03	; 3
    120c:	87 ef       	ldi	r24, 0xF7	; 247
    120e:	94 e0       	ldi	r25, 0x04	; 4
    1210:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
    1214:	8b e2       	ldi	r24, 0x2B	; 43
    1216:	92 e0       	ldi	r25, 0x02	; 2
    1218:	0e 94 59 08 	call	0x10b2	; 0x10b2 <beep_for(int)>
    121c:	61 e0       	ldi	r22, 0x01	; 1
    121e:	88 e0       	ldi	r24, 0x08	; 8
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	0e 94 8b 06 	call	0xd16	; 0xd16 <do_control(DO_CONTROLS_E, bool)>
    1226:	43 e0       	ldi	r20, 0x03	; 3
    1228:	60 e0       	ldi	r22, 0x00	; 0
    122a:	87 ef       	ldi	r24, 0xF7	; 247
    122c:	94 e0       	ldi	r25, 0x04	; 4
    122e:	0e 94 31 0a 	call	0x1462	; 0x1462 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1232:	67 e0       	ldi	r22, 0x07	; 7
    1234:	74 e0       	ldi	r23, 0x04	; 4
    1236:	87 ef       	ldi	r24, 0xF7	; 247
    1238:	94 e0       	ldi	r25, 0x04	; 4
    123a:	0e 94 0e 14 	call	0x281c	; 0x281c <Print::print(char const*)>
    123e:	86 e0       	ldi	r24, 0x06	; 6
    1240:	90 e0       	ldi	r25, 0x00	; 0
    1242:	93 cf       	rjmp	.-218    	; 0x116a <ui_task_main()+0x94>
    1244:	80 91 df 04 	lds	r24, 0x04DF	; 0x8004df <start_switch_pressed>
    1248:	81 11       	cpse	r24, r1
    124a:	93 cf       	rjmp	.-218    	; 0x1172 <ui_task_main()+0x9c>
    124c:	87 e0       	ldi	r24, 0x07	; 7
    124e:	90 e0       	ldi	r25, 0x00	; 0
    1250:	8c cf       	rjmp	.-232    	; 0x116a <ui_task_main()+0x94>
    1252:	08 95       	ret

00001254 <loop>:
loop():
    1254:	80 91 ea 04 	lds	r24, 0x04EA	; 0x8004ea <f_msec>
    1258:	88 23       	and	r24, r24
    125a:	19 f0       	breq	.+6      	; 0x1262 <loop+0xe>
    125c:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <f_msec>
    1260:	08 95       	ret
    1262:	80 91 e9 04 	lds	r24, 0x04E9	; 0x8004e9 <f_10msec>
    1266:	88 23       	and	r24, r24
    1268:	19 f0       	breq	.+6      	; 0x1270 <loop+0x1c>
    126a:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <f_10msec>
    126e:	08 95       	ret
    1270:	80 91 e8 04 	lds	r24, 0x04E8	; 0x8004e8 <f_100msec>
    1274:	88 23       	and	r24, r24
    1276:	19 f0       	breq	.+6      	; 0x127e <loop+0x2a>
    1278:	10 92 e8 04 	sts	0x04E8, r1	; 0x8004e8 <f_100msec>
    127c:	08 95       	ret
    127e:	80 91 e7 04 	lds	r24, 0x04E7	; 0x8004e7 <f_1sec>
    1282:	88 23       	and	r24, r24
    1284:	99 f0       	breq	.+38     	; 0x12ac <loop+0x58>
    1286:	10 92 e7 04 	sts	0x04E7, r1	; 0x8004e7 <f_1sec>
    128a:	81 e0       	ldi	r24, 0x01	; 1
    128c:	80 93 e3 04 	sts	0x04E3, r24	; 0x8004e3 <f_sec_logs_task>
    1290:	80 93 e2 04 	sts	0x04E2, r24	; 0x8004e2 <f_sec_change_ui_task>
    1294:	80 93 e1 04 	sts	0x04E1, r24	; 0x8004e1 <f_sec_change_o2_task>
    1298:	80 93 e0 04 	sts	0x04E0, r24	; 0x8004e0 <f_sec_change_sensor_task>
    129c:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <o2_sensor_scan()>
    12a0:	64 e6       	ldi	r22, 0x64	; 100
    12a2:	73 e0       	ldi	r23, 0x03	; 3
    12a4:	8c ed       	ldi	r24, 0xDC	; 220
    12a6:	95 e0       	ldi	r25, 0x05	; 5
    12a8:	0c 94 0e 14 	jmp	0x281c	; 0x281c <Print::print(char const*)>
    12ac:	80 91 e6 04 	lds	r24, 0x04E6	; 0x8004e6 <f_1min>
    12b0:	88 23       	and	r24, r24
    12b2:	19 f0       	breq	.+6      	; 0x12ba <loop+0x66>
    12b4:	10 92 e6 04 	sts	0x04E6, r1	; 0x8004e6 <f_1min>
    12b8:	08 95       	ret
    12ba:	80 91 e5 04 	lds	r24, 0x04E5	; 0x8004e5 <f_1hr>
    12be:	88 23       	and	r24, r24
    12c0:	19 f0       	breq	.+6      	; 0x12c8 <loop+0x74>
    12c2:	10 92 e5 04 	sts	0x04E5, r1	; 0x8004e5 <f_1hr>
    12c6:	08 95       	ret
    12c8:	0e 94 67 07 	call	0xece	; 0xece <o2_main_task()>
    12cc:	0e 94 6b 08 	call	0x10d6	; 0x10d6 <ui_task_main()>
    12d0:	0c 94 ab 01 	jmp	0x356	; 0x356 <logs_task()>

000012d4 <_GLOBAL__sub_I_lcd>:
_GLOBAL__sub_I_lcd():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:291

}
    12d4:	cf 92       	push	r12
    12d6:	ef 92       	push	r14
    12d8:	0f 93       	push	r16
__static_initialization_and_destruction_0():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/display.h:39


#define LCD_ROWS   ( 4)
#define LCD_COLS   (20)

LiquidCrystal lcd(RS, EN, D4, D5, D6, D7);
    12da:	87 e1       	ldi	r24, 0x17	; 23
    12dc:	c8 2e       	mov	r12, r24
    12de:	96 e1       	ldi	r25, 0x16	; 22
    12e0:	e9 2e       	mov	r14, r25
    12e2:	05 e1       	ldi	r16, 0x15	; 21
    12e4:	24 e1       	ldi	r18, 0x14	; 20
    12e6:	43 e1       	ldi	r20, 0x13	; 19
    12e8:	62 e1       	ldi	r22, 0x12	; 18
    12ea:	87 ef       	ldi	r24, 0xF7	; 247
    12ec:	94 e0       	ldi	r25, 0x04	; 4
    12ee:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:19
float x_samples[NUM_OF_SAMPLES_O2]   = {227.0, 1134.0, 5069.0};




ADS1115 ADS(O2_SENSOR_ADS_ADDR);
    12f2:	4f e0       	ldi	r20, 0x0F	; 15
    12f4:	55 e0       	ldi	r21, 0x05	; 5
    12f6:	69 e4       	ldi	r22, 0x49	; 73
    12f8:	88 e8       	ldi	r24, 0x88	; 136
    12fa:	94 e0       	ldi	r25, 0x04	; 4
_GLOBAL__sub_I_lcd():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:291
    12fc:	0f 91       	pop	r16
    12fe:	ef 90       	pop	r14
    1300:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:19
    1302:	0c 94 7d 0c 	jmp	0x18fa	; 0x18fa <ADS1115::ADS1115(unsigned char, TwoWire*)>

00001306 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:271
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	80 e0       	ldi	r24, 0x00	; 0
    130a:	08 95       	ret

0000130c <Print::flush()>:
_ZN5Print5flushEv():
    130c:	08 95       	ret

0000130e <LiquidCrystal::pulseEnable()>:
_ZN13LiquidCrystal11pulseEnableEv():
    130e:	cf 93       	push	r28
    1310:	df 93       	push	r29
    1312:	ec 01       	movw	r28, r24
    1314:	60 e0       	ldi	r22, 0x00	; 0
    1316:	8e 81       	ldd	r24, Y+6	; 0x06
    1318:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
    131c:	81 e0       	ldi	r24, 0x01	; 1
    131e:	90 e0       	ldi	r25, 0x00	; 0
    1320:	0e 94 c7 10 	call	0x218e	; 0x218e <delayMicroseconds>
    1324:	61 e0       	ldi	r22, 0x01	; 1
    1326:	8e 81       	ldd	r24, Y+6	; 0x06
    1328:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
    132c:	81 e0       	ldi	r24, 0x01	; 1
    132e:	90 e0       	ldi	r25, 0x00	; 0
    1330:	0e 94 c7 10 	call	0x218e	; 0x218e <delayMicroseconds>
    1334:	60 e0       	ldi	r22, 0x00	; 0
    1336:	8e 81       	ldd	r24, Y+6	; 0x06
    1338:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
    133c:	84 e6       	ldi	r24, 0x64	; 100
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	df 91       	pop	r29
    1342:	cf 91       	pop	r28
    1344:	0c 94 c7 10 	jmp	0x218e	; 0x218e <delayMicroseconds>

00001348 <LiquidCrystal::write4bits(unsigned char)>:
_ZN13LiquidCrystal10write4bitsEh():
    1348:	cf 92       	push	r12
    134a:	df 92       	push	r13
    134c:	ef 92       	push	r14
    134e:	ff 92       	push	r15
    1350:	0f 93       	push	r16
    1352:	1f 93       	push	r17
    1354:	cf 93       	push	r28
    1356:	df 93       	push	r29
    1358:	6c 01       	movw	r12, r24
    135a:	7c 01       	movw	r14, r24
    135c:	87 e0       	ldi	r24, 0x07	; 7
    135e:	e8 0e       	add	r14, r24
    1360:	f1 1c       	adc	r15, r1
    1362:	d0 e0       	ldi	r29, 0x00	; 0
    1364:	c0 e0       	ldi	r28, 0x00	; 0
    1366:	06 2f       	mov	r16, r22
    1368:	10 e0       	ldi	r17, 0x00	; 0
    136a:	b8 01       	movw	r22, r16
    136c:	0c 2e       	mov	r0, r28
    136e:	02 c0       	rjmp	.+4      	; 0x1374 <LiquidCrystal::write4bits(unsigned char)+0x2c>
    1370:	75 95       	asr	r23
    1372:	67 95       	ror	r22
    1374:	0a 94       	dec	r0
    1376:	e2 f7       	brpl	.-8      	; 0x1370 <LiquidCrystal::write4bits(unsigned char)+0x28>
    1378:	61 70       	andi	r22, 0x01	; 1
    137a:	f7 01       	movw	r30, r14
    137c:	81 91       	ld	r24, Z+
    137e:	7f 01       	movw	r14, r30
    1380:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
    1384:	21 96       	adiw	r28, 0x01	; 1
    1386:	c4 30       	cpi	r28, 0x04	; 4
    1388:	d1 05       	cpc	r29, r1
    138a:	79 f7       	brne	.-34     	; 0x136a <LiquidCrystal::write4bits(unsigned char)+0x22>
    138c:	c6 01       	movw	r24, r12
    138e:	df 91       	pop	r29
    1390:	cf 91       	pop	r28
    1392:	1f 91       	pop	r17
    1394:	0f 91       	pop	r16
    1396:	ff 90       	pop	r15
    1398:	ef 90       	pop	r14
    139a:	df 90       	pop	r13
    139c:	cf 90       	pop	r12
    139e:	0c 94 87 09 	jmp	0x130e	; 0x130e <LiquidCrystal::pulseEnable()>

000013a2 <LiquidCrystal::write8bits(unsigned char)>:
_ZN13LiquidCrystal10write8bitsEh():
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	6c 01       	movw	r12, r24
    13b4:	7c 01       	movw	r14, r24
    13b6:	87 e0       	ldi	r24, 0x07	; 7
    13b8:	e8 0e       	add	r14, r24
    13ba:	f1 1c       	adc	r15, r1
    13bc:	d0 e0       	ldi	r29, 0x00	; 0
    13be:	c0 e0       	ldi	r28, 0x00	; 0
    13c0:	06 2f       	mov	r16, r22
    13c2:	10 e0       	ldi	r17, 0x00	; 0
    13c4:	b8 01       	movw	r22, r16
    13c6:	0c 2e       	mov	r0, r28
    13c8:	02 c0       	rjmp	.+4      	; 0x13ce <LiquidCrystal::write8bits(unsigned char)+0x2c>
    13ca:	75 95       	asr	r23
    13cc:	67 95       	ror	r22
    13ce:	0a 94       	dec	r0
    13d0:	e2 f7       	brpl	.-8      	; 0x13ca <LiquidCrystal::write8bits(unsigned char)+0x28>
    13d2:	61 70       	andi	r22, 0x01	; 1
    13d4:	f7 01       	movw	r30, r14
    13d6:	81 91       	ld	r24, Z+
    13d8:	7f 01       	movw	r14, r30
    13da:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
    13de:	21 96       	adiw	r28, 0x01	; 1
    13e0:	c8 30       	cpi	r28, 0x08	; 8
    13e2:	d1 05       	cpc	r29, r1
    13e4:	79 f7       	brne	.-34     	; 0x13c4 <LiquidCrystal::write8bits(unsigned char)+0x22>
    13e6:	c6 01       	movw	r24, r12
    13e8:	df 91       	pop	r29
    13ea:	cf 91       	pop	r28
    13ec:	1f 91       	pop	r17
    13ee:	0f 91       	pop	r16
    13f0:	ff 90       	pop	r15
    13f2:	ef 90       	pop	r14
    13f4:	df 90       	pop	r13
    13f6:	cf 90       	pop	r12
    13f8:	0c 94 87 09 	jmp	0x130e	; 0x130e <LiquidCrystal::pulseEnable()>

000013fc <LiquidCrystal::send(unsigned char, unsigned char)>:
_ZN13LiquidCrystal4sendEhh():
    13fc:	1f 93       	push	r17
    13fe:	cf 93       	push	r28
    1400:	df 93       	push	r29
    1402:	ec 01       	movw	r28, r24
    1404:	16 2f       	mov	r17, r22
    1406:	64 2f       	mov	r22, r20
    1408:	8c 81       	ldd	r24, Y+4	; 0x04
    140a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	8f 3f       	cpi	r24, 0xFF	; 255
    1412:	19 f0       	breq	.+6      	; 0x141a <LiquidCrystal::send(unsigned char, unsigned char)+0x1e>
    1414:	60 e0       	ldi	r22, 0x00	; 0
    1416:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
    141a:	8f 85       	ldd	r24, Y+15	; 0x0f
    141c:	61 2f       	mov	r22, r17
    141e:	84 ff       	sbrs	r24, 4
    1420:	06 c0       	rjmp	.+12     	; 0x142e <LiquidCrystal::send(unsigned char, unsigned char)+0x32>
    1422:	ce 01       	movw	r24, r28
    1424:	df 91       	pop	r29
    1426:	cf 91       	pop	r28
    1428:	1f 91       	pop	r17
    142a:	0c 94 d1 09 	jmp	0x13a2	; 0x13a2 <LiquidCrystal::write8bits(unsigned char)>
    142e:	70 e0       	ldi	r23, 0x00	; 0
    1430:	84 e0       	ldi	r24, 0x04	; 4
    1432:	75 95       	asr	r23
    1434:	67 95       	ror	r22
    1436:	8a 95       	dec	r24
    1438:	e1 f7       	brne	.-8      	; 0x1432 <LiquidCrystal::send(unsigned char, unsigned char)+0x36>
    143a:	ce 01       	movw	r24, r28
    143c:	0e 94 a4 09 	call	0x1348	; 0x1348 <LiquidCrystal::write4bits(unsigned char)>
    1440:	61 2f       	mov	r22, r17
    1442:	ce 01       	movw	r24, r28
    1444:	df 91       	pop	r29
    1446:	cf 91       	pop	r28
    1448:	1f 91       	pop	r17
    144a:	0c 94 a4 09 	jmp	0x1348	; 0x1348 <LiquidCrystal::write4bits(unsigned char)>

0000144e <LiquidCrystal::command(unsigned char)>:
_ZN13LiquidCrystal7commandEh():
    144e:	40 e0       	ldi	r20, 0x00	; 0
    1450:	0c 94 fe 09 	jmp	0x13fc	; 0x13fc <LiquidCrystal::send(unsigned char, unsigned char)>

00001454 <LiquidCrystal::clear()>:
_ZN13LiquidCrystal5clearEv():
    1454:	61 e0       	ldi	r22, 0x01	; 1
    1456:	0e 94 27 0a 	call	0x144e	; 0x144e <LiquidCrystal::command(unsigned char)>
    145a:	80 ed       	ldi	r24, 0xD0	; 208
    145c:	97 e0       	ldi	r25, 0x07	; 7
    145e:	0c 94 c7 10 	jmp	0x218e	; 0x218e <delayMicroseconds>

00001462 <LiquidCrystal::setCursor(unsigned char, unsigned char)>:
_ZN13LiquidCrystal9setCursorEhh():
    1462:	44 30       	cpi	r20, 0x04	; 4
    1464:	08 f0       	brcs	.+2      	; 0x1468 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x6>
    1466:	43 e0       	ldi	r20, 0x03	; 3
    1468:	fc 01       	movw	r30, r24
    146a:	23 89       	ldd	r18, Z+19	; 0x13
    146c:	42 17       	cp	r20, r18
    146e:	10 f0       	brcs	.+4      	; 0x1474 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x12>
    1470:	4f ef       	ldi	r20, 0xFF	; 255
    1472:	42 0f       	add	r20, r18
    1474:	fc 01       	movw	r30, r24
    1476:	e4 0f       	add	r30, r20
    1478:	f1 1d       	adc	r31, r1
    147a:	24 89       	ldd	r18, Z+20	; 0x14
    147c:	62 0f       	add	r22, r18
    147e:	60 68       	ori	r22, 0x80	; 128
    1480:	0c 94 27 0a 	jmp	0x144e	; 0x144e <LiquidCrystal::command(unsigned char)>

00001484 <LiquidCrystal::display()>:
_ZN13LiquidCrystal7displayEv():
    1484:	fc 01       	movw	r30, r24
    1486:	60 89       	ldd	r22, Z+16	; 0x10
    1488:	26 2f       	mov	r18, r22
    148a:	24 60       	ori	r18, 0x04	; 4
    148c:	20 8b       	std	Z+16, r18	; 0x10
    148e:	6c 60       	ori	r22, 0x0C	; 12
    1490:	0c 94 27 0a 	jmp	0x144e	; 0x144e <LiquidCrystal::command(unsigned char)>

00001494 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystal5beginEhhh():
    1494:	0f 93       	push	r16
    1496:	1f 93       	push	r17
    1498:	cf 93       	push	r28
    149a:	df 93       	push	r29
    149c:	ec 01       	movw	r28, r24
    149e:	42 30       	cpi	r20, 0x02	; 2
    14a0:	18 f0       	brcs	.+6      	; 0x14a8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x14>
    14a2:	8f 85       	ldd	r24, Y+15	; 0x0f
    14a4:	88 60       	ori	r24, 0x08	; 8
    14a6:	8f 87       	std	Y+15, r24	; 0x0f
    14a8:	4b 8b       	std	Y+19, r20	; 0x13
_ZN13LiquidCrystal13setRowOffsetsEiiii():
    14aa:	1c 8a       	std	Y+20, r1	; 0x14
    14ac:	80 e4       	ldi	r24, 0x40	; 64
    14ae:	8d 8b       	std	Y+21, r24	; 0x15
    14b0:	6e 8b       	std	Y+22, r22	; 0x16
    14b2:	60 5c       	subi	r22, 0xC0	; 192
    14b4:	6f 8b       	std	Y+23, r22	; 0x17
_ZN13LiquidCrystal5beginEhhh():
    14b6:	22 23       	and	r18, r18
    14b8:	29 f0       	breq	.+10     	; 0x14c4 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    14ba:	41 30       	cpi	r20, 0x01	; 1
    14bc:	19 f4       	brne	.+6      	; 0x14c4 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    14be:	8f 85       	ldd	r24, Y+15	; 0x0f
    14c0:	84 60       	ori	r24, 0x04	; 4
    14c2:	8f 87       	std	Y+15, r24	; 0x0f
    14c4:	61 e0       	ldi	r22, 0x01	; 1
    14c6:	8c 81       	ldd	r24, Y+4	; 0x04
    14c8:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
    14cc:	8d 81       	ldd	r24, Y+5	; 0x05
    14ce:	8f 3f       	cpi	r24, 0xFF	; 255
    14d0:	19 f0       	breq	.+6      	; 0x14d8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x44>
    14d2:	61 e0       	ldi	r22, 0x01	; 1
    14d4:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
    14d8:	61 e0       	ldi	r22, 0x01	; 1
    14da:	8e 81       	ldd	r24, Y+6	; 0x06
    14dc:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
    14e0:	8e 01       	movw	r16, r28
    14e2:	98 01       	movw	r18, r16
    14e4:	2c 1b       	sub	r18, r28
    14e6:	3d 0b       	sbc	r19, r29
    14e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    14ea:	84 fd       	sbrc	r24, 4
    14ec:	0d c0       	rjmp	.+26     	; 0x1508 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x74>
    14ee:	84 e0       	ldi	r24, 0x04	; 4
    14f0:	90 e0       	ldi	r25, 0x00	; 0
    14f2:	0f 5f       	subi	r16, 0xFF	; 255
    14f4:	1f 4f       	sbci	r17, 0xFF	; 255
    14f6:	28 17       	cp	r18, r24
    14f8:	39 07       	cpc	r19, r25
    14fa:	4c f4       	brge	.+18     	; 0x150e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x7a>
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	f8 01       	movw	r30, r16
    1500:	86 81       	ldd	r24, Z+6	; 0x06
    1502:	0e 94 3c 11 	call	0x2278	; 0x2278 <pinMode>
    1506:	ed cf       	rjmp	.-38     	; 0x14e2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x4e>
    1508:	88 e0       	ldi	r24, 0x08	; 8
    150a:	90 e0       	ldi	r25, 0x00	; 0
    150c:	f2 cf       	rjmp	.-28     	; 0x14f2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x5e>
    150e:	80 e5       	ldi	r24, 0x50	; 80
    1510:	93 ec       	ldi	r25, 0xC3	; 195
    1512:	0e 94 c7 10 	call	0x218e	; 0x218e <delayMicroseconds>
    1516:	60 e0       	ldi	r22, 0x00	; 0
    1518:	8c 81       	ldd	r24, Y+4	; 0x04
    151a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
    151e:	60 e0       	ldi	r22, 0x00	; 0
    1520:	8e 81       	ldd	r24, Y+6	; 0x06
    1522:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
    1526:	8d 81       	ldd	r24, Y+5	; 0x05
    1528:	8f 3f       	cpi	r24, 0xFF	; 255
    152a:	19 f0       	breq	.+6      	; 0x1532 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x9e>
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
    1532:	6f 85       	ldd	r22, Y+15	; 0x0f
    1534:	64 fd       	sbrc	r22, 4
    1536:	33 c0       	rjmp	.+102    	; 0x159e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x10a>
    1538:	63 e0       	ldi	r22, 0x03	; 3
    153a:	ce 01       	movw	r24, r28
    153c:	0e 94 a4 09 	call	0x1348	; 0x1348 <LiquidCrystal::write4bits(unsigned char)>
    1540:	84 e9       	ldi	r24, 0x94	; 148
    1542:	91 e1       	ldi	r25, 0x11	; 17
    1544:	0e 94 c7 10 	call	0x218e	; 0x218e <delayMicroseconds>
    1548:	63 e0       	ldi	r22, 0x03	; 3
    154a:	ce 01       	movw	r24, r28
    154c:	0e 94 a4 09 	call	0x1348	; 0x1348 <LiquidCrystal::write4bits(unsigned char)>
    1550:	84 e9       	ldi	r24, 0x94	; 148
    1552:	91 e1       	ldi	r25, 0x11	; 17
    1554:	0e 94 c7 10 	call	0x218e	; 0x218e <delayMicroseconds>
    1558:	63 e0       	ldi	r22, 0x03	; 3
    155a:	ce 01       	movw	r24, r28
    155c:	0e 94 a4 09 	call	0x1348	; 0x1348 <LiquidCrystal::write4bits(unsigned char)>
    1560:	86 e9       	ldi	r24, 0x96	; 150
    1562:	90 e0       	ldi	r25, 0x00	; 0
    1564:	0e 94 c7 10 	call	0x218e	; 0x218e <delayMicroseconds>
    1568:	62 e0       	ldi	r22, 0x02	; 2
    156a:	ce 01       	movw	r24, r28
    156c:	0e 94 a4 09 	call	0x1348	; 0x1348 <LiquidCrystal::write4bits(unsigned char)>
    1570:	6f 85       	ldd	r22, Y+15	; 0x0f
    1572:	60 62       	ori	r22, 0x20	; 32
    1574:	ce 01       	movw	r24, r28
    1576:	0e 94 27 0a 	call	0x144e	; 0x144e <LiquidCrystal::command(unsigned char)>
    157a:	84 e0       	ldi	r24, 0x04	; 4
    157c:	88 8b       	std	Y+16, r24	; 0x10
    157e:	ce 01       	movw	r24, r28
    1580:	0e 94 42 0a 	call	0x1484	; 0x1484 <LiquidCrystal::display()>
    1584:	ce 01       	movw	r24, r28
    1586:	0e 94 2a 0a 	call	0x1454	; 0x1454 <LiquidCrystal::clear()>
    158a:	82 e0       	ldi	r24, 0x02	; 2
    158c:	89 8b       	std	Y+17, r24	; 0x11
    158e:	66 e0       	ldi	r22, 0x06	; 6
    1590:	ce 01       	movw	r24, r28
    1592:	df 91       	pop	r29
    1594:	cf 91       	pop	r28
    1596:	1f 91       	pop	r17
    1598:	0f 91       	pop	r16
    159a:	0c 94 27 0a 	jmp	0x144e	; 0x144e <LiquidCrystal::command(unsigned char)>
    159e:	60 62       	ori	r22, 0x20	; 32
    15a0:	ce 01       	movw	r24, r28
    15a2:	0e 94 27 0a 	call	0x144e	; 0x144e <LiquidCrystal::command(unsigned char)>
    15a6:	84 e9       	ldi	r24, 0x94	; 148
    15a8:	91 e1       	ldi	r25, 0x11	; 17
    15aa:	0e 94 c7 10 	call	0x218e	; 0x218e <delayMicroseconds>
    15ae:	6f 85       	ldd	r22, Y+15	; 0x0f
    15b0:	60 62       	ori	r22, 0x20	; 32
    15b2:	ce 01       	movw	r24, r28
    15b4:	0e 94 27 0a 	call	0x144e	; 0x144e <LiquidCrystal::command(unsigned char)>
    15b8:	86 e9       	ldi	r24, 0x96	; 150
    15ba:	90 e0       	ldi	r25, 0x00	; 0
    15bc:	0e 94 c7 10 	call	0x218e	; 0x218e <delayMicroseconds>
    15c0:	6f 85       	ldd	r22, Y+15	; 0x0f
    15c2:	60 62       	ori	r22, 0x20	; 32
    15c4:	ce 01       	movw	r24, r28
    15c6:	0e 94 27 0a 	call	0x144e	; 0x144e <LiquidCrystal::command(unsigned char)>
    15ca:	d2 cf       	rjmp	.-92     	; 0x1570 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xdc>

000015cc <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystalC2Ehhhhhh():
    15cc:	cf 92       	push	r12
    15ce:	ef 92       	push	r14
    15d0:	0f 93       	push	r16
    15d2:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    15d4:	13 82       	std	Z+3, r1	; 0x03
    15d6:	12 82       	std	Z+2, r1	; 0x02
_ZN13LiquidCrystalC2Ehhhhhh():
    15d8:	82 e4       	ldi	r24, 0x42	; 66
    15da:	94 e0       	ldi	r25, 0x04	; 4
    15dc:	91 83       	std	Z+1, r25	; 0x01
    15de:	80 83       	st	Z, r24
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    15e0:	64 83       	std	Z+4, r22	; 0x04
    15e2:	8f ef       	ldi	r24, 0xFF	; 255
    15e4:	85 83       	std	Z+5, r24	; 0x05
    15e6:	46 83       	std	Z+6, r20	; 0x06
    15e8:	27 83       	std	Z+7, r18	; 0x07
    15ea:	00 87       	std	Z+8, r16	; 0x08
    15ec:	e1 86       	std	Z+9, r14	; 0x09
    15ee:	c2 86       	std	Z+10, r12	; 0x0a
    15f0:	13 86       	std	Z+11, r1	; 0x0b
    15f2:	14 86       	std	Z+12, r1	; 0x0c
    15f4:	15 86       	std	Z+13, r1	; 0x0d
    15f6:	16 86       	std	Z+14, r1	; 0x0e
    15f8:	17 86       	std	Z+15, r1	; 0x0f
    15fa:	20 e0       	ldi	r18, 0x00	; 0
    15fc:	41 e0       	ldi	r20, 0x01	; 1
    15fe:	60 e1       	ldi	r22, 0x10	; 16
    1600:	cf 01       	movw	r24, r30
_ZN13LiquidCrystalC2Ehhhhhh():
    1602:	0f 91       	pop	r16
    1604:	ef 90       	pop	r14
    1606:	cf 90       	pop	r12
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    1608:	0c 94 4a 0a 	jmp	0x1494	; 0x1494 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>

0000160c <LiquidCrystal::write(unsigned char)>:
_ZN13LiquidCrystal5writeEh():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    160c:	41 e0       	ldi	r20, 0x01	; 1
    160e:	0e 94 fe 09 	call	0x13fc	; 0x13fc <LiquidCrystal::send(unsigned char, unsigned char)>
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
    1612:	81 e0       	ldi	r24, 0x01	; 1
    1614:	90 e0       	ldi	r25, 0x00	; 0
    1616:	08 95       	ret

00001618 <ADS1X15::isConnected()>:
_ZN7ADS1X1511isConnectedEv():
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:570
  _wire = wire;
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_1;
  _conversionDelay = ADS1115_CONVERSION_DELAY;
  _bitShift = 0;
  _maxPorts = 1;
}
    1618:	cf 93       	push	r28
    161a:	df 93       	push	r29
    161c:	ec 01       	movw	r28, r24
    161e:	6a 81       	ldd	r22, Y+2	; 0x02
    1620:	88 89       	ldd	r24, Y+16	; 0x10
    1622:	99 89       	ldd	r25, Y+17	; 0x11
    1624:	0e 94 65 0d 	call	0x1aca	; 0x1aca <TwoWire::beginTransmission(unsigned char)>
    1628:	88 89       	ldd	r24, Y+16	; 0x10
    162a:	99 89       	ldd	r25, Y+17	; 0x11
    162c:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <TwoWire::endTransmission()>
    1630:	91 e0       	ldi	r25, 0x01	; 1
    1632:	81 11       	cpse	r24, r1
    1634:	90 e0       	ldi	r25, 0x00	; 0
    1636:	89 2f       	mov	r24, r25
    1638:	df 91       	pop	r29
    163a:	cf 91       	pop	r28
    163c:	08 95       	ret

0000163e <ADS1X15::begin()>:
_ZN7ADS1X155beginEv():
    163e:	cf 93       	push	r28
    1640:	df 93       	push	r29
    1642:	ec 01       	movw	r28, r24
    1644:	88 89       	ldd	r24, Y+16	; 0x10
    1646:	99 89       	ldd	r25, Y+17	; 0x11
    1648:	0e 94 53 0d 	call	0x1aa6	; 0x1aa6 <TwoWire::begin()>
    164c:	8a 81       	ldd	r24, Y+2	; 0x02
    164e:	88 54       	subi	r24, 0x48	; 72
    1650:	84 30       	cpi	r24, 0x04	; 4
    1652:	28 f4       	brcc	.+10     	; 0x165e <ADS1X15::begin()+0x20>
    1654:	ce 01       	movw	r24, r28
    1656:	df 91       	pop	r29
    1658:	cf 91       	pop	r28
    165a:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <ADS1X15::isConnected()>
    165e:	80 e0       	ldi	r24, 0x00	; 0
    1660:	df 91       	pop	r29
    1662:	cf 91       	pop	r28
    1664:	08 95       	ret

00001666 <ADS1X15::setGain(unsigned char)>:
_ZN7ADS1X157setGainEh():
    1666:	fc 01       	movw	r30, r24
    1668:	80 81       	ld	r24, Z
    166a:	84 ff       	sbrs	r24, 4
    166c:	09 c0       	rjmp	.+18     	; 0x1680 <ADS1X15::setGain(unsigned char)+0x1a>
    166e:	64 30       	cpi	r22, 0x04	; 4
    1670:	b1 f0       	breq	.+44     	; 0x169e <ADS1X15::setGain(unsigned char)+0x38>
    1672:	48 f4       	brcc	.+18     	; 0x1686 <ADS1X15::setGain(unsigned char)+0x20>
    1674:	61 30       	cpi	r22, 0x01	; 1
    1676:	81 f0       	breq	.+32     	; 0x1698 <ADS1X15::setGain(unsigned char)+0x32>
    1678:	80 e0       	ldi	r24, 0x00	; 0
    167a:	94 e0       	ldi	r25, 0x04	; 4
    167c:	62 30       	cpi	r22, 0x02	; 2
    167e:	49 f0       	breq	.+18     	; 0x1692 <ADS1X15::setGain(unsigned char)+0x2c>
    1680:	16 82       	std	Z+6, r1	; 0x06
    1682:	15 82       	std	Z+5, r1	; 0x05
    1684:	08 95       	ret
    1686:	68 30       	cpi	r22, 0x08	; 8
    1688:	69 f0       	breq	.+26     	; 0x16a4 <ADS1X15::setGain(unsigned char)+0x3e>
    168a:	80 e0       	ldi	r24, 0x00	; 0
    168c:	9a e0       	ldi	r25, 0x0A	; 10
    168e:	60 31       	cpi	r22, 0x10	; 16
    1690:	b9 f7       	brne	.-18     	; 0x1680 <ADS1X15::setGain(unsigned char)+0x1a>
    1692:	96 83       	std	Z+6, r25	; 0x06
    1694:	85 83       	std	Z+5, r24	; 0x05
    1696:	08 95       	ret
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	92 e0       	ldi	r25, 0x02	; 2
    169c:	fa cf       	rjmp	.-12     	; 0x1692 <ADS1X15::setGain(unsigned char)+0x2c>
    169e:	80 e0       	ldi	r24, 0x00	; 0
    16a0:	96 e0       	ldi	r25, 0x06	; 6
    16a2:	f7 cf       	rjmp	.-18     	; 0x1692 <ADS1X15::setGain(unsigned char)+0x2c>
    16a4:	80 e0       	ldi	r24, 0x00	; 0
    16a6:	98 e0       	ldi	r25, 0x08	; 8
    16a8:	f4 cf       	rjmp	.-24     	; 0x1692 <ADS1X15::setGain(unsigned char)+0x2c>

000016aa <ADS1X15::reset()>:
_ZN7ADS1X155resetEv():
    16aa:	cf 93       	push	r28
    16ac:	df 93       	push	r29
    16ae:	ec 01       	movw	r28, r24
    16b0:	60 e0       	ldi	r22, 0x00	; 0
    16b2:	0e 94 33 0b 	call	0x1666	; 0x1666 <ADS1X15::setGain(unsigned char)>
_ZN7ADS1X157setModeEh():
    16b6:	80 e0       	ldi	r24, 0x00	; 0
    16b8:	91 e0       	ldi	r25, 0x01	; 1
    16ba:	98 87       	std	Y+8, r25	; 0x08
    16bc:	8f 83       	std	Y+7, r24	; 0x07
_ZN7ADS1X1511setDataRateEh():
    16be:	80 e8       	ldi	r24, 0x80	; 128
    16c0:	90 e0       	ldi	r25, 0x00	; 0
    16c2:	9a 87       	std	Y+10, r25	; 0x0a
    16c4:	89 87       	std	Y+9, r24	; 0x09
_ZN7ADS1X155resetEv():
    16c6:	1b 86       	std	Y+11, r1	; 0x0b
    16c8:	81 e0       	ldi	r24, 0x01	; 1
    16ca:	8c 87       	std	Y+12, r24	; 0x0c
    16cc:	1d 86       	std	Y+13, r1	; 0x0d
    16ce:	83 e0       	ldi	r24, 0x03	; 3
    16d0:	8e 87       	std	Y+14, r24	; 0x0e
    16d2:	df 91       	pop	r29
    16d4:	cf 91       	pop	r28
    16d6:	08 95       	ret

000016d8 <ADS1X15::ADS1X15()>:
_ZN7ADS1X15C2Ev():
    16d8:	fc 01       	movw	r30, r24
    16da:	17 86       	std	Z+15, r1	; 0x0f
    16dc:	12 8a       	std	Z+18, r1	; 0x12
    16de:	13 8a       	std	Z+19, r1	; 0x13
    16e0:	14 8a       	std	Z+20, r1	; 0x14
    16e2:	15 8a       	std	Z+21, r1	; 0x15
    16e4:	0c 94 55 0b 	jmp	0x16aa	; 0x16aa <ADS1X15::reset()>

000016e8 <ADS1X15::setMode(unsigned char)>:
_ZN7ADS1X157setModeEh():
    16e8:	61 11       	cpse	r22, r1
    16ea:	04 c0       	rjmp	.+8      	; 0x16f4 <ADS1X15::setMode(unsigned char)+0xc>
    16ec:	fc 01       	movw	r30, r24
    16ee:	10 86       	std	Z+8, r1	; 0x08
    16f0:	17 82       	std	Z+7, r1	; 0x07
    16f2:	08 95       	ret
    16f4:	20 e0       	ldi	r18, 0x00	; 0
    16f6:	31 e0       	ldi	r19, 0x01	; 1
    16f8:	fc 01       	movw	r30, r24
    16fa:	30 87       	std	Z+8, r19	; 0x08
    16fc:	27 83       	std	Z+7, r18	; 0x07
    16fe:	08 95       	ret

00001700 <ADS1X15::setDataRate(unsigned char)>:
_ZN7ADS1X1511setDataRateEh():
    1700:	fc 01       	movw	r30, r24
    1702:	70 e0       	ldi	r23, 0x00	; 0
    1704:	68 30       	cpi	r22, 0x08	; 8
    1706:	71 05       	cpc	r23, r1
    1708:	60 f4       	brcc	.+24     	; 0x1722 <ADS1X15::setDataRate(unsigned char)+0x22>
    170a:	72 87       	std	Z+10, r23	; 0x0a
    170c:	61 87       	std	Z+9, r22	; 0x09
    170e:	81 85       	ldd	r24, Z+9	; 0x09
    1710:	92 85       	ldd	r25, Z+10	; 0x0a
    1712:	25 e0       	ldi	r18, 0x05	; 5
    1714:	88 0f       	add	r24, r24
    1716:	99 1f       	adc	r25, r25
    1718:	2a 95       	dec	r18
    171a:	e1 f7       	brne	.-8      	; 0x1714 <ADS1X15::setDataRate(unsigned char)+0x14>
    171c:	92 87       	std	Z+10, r25	; 0x0a
    171e:	81 87       	std	Z+9, r24	; 0x09
    1720:	08 95       	ret
    1722:	84 e0       	ldi	r24, 0x04	; 4
    1724:	90 e0       	ldi	r25, 0x00	; 0
    1726:	92 87       	std	Z+10, r25	; 0x0a
    1728:	81 87       	std	Z+9, r24	; 0x09
    172a:	f1 cf       	rjmp	.-30     	; 0x170e <ADS1X15::setDataRate(unsigned char)+0xe>

0000172c <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>:
_ZN7ADS1X1514_writeRegisterEhhj():
    172c:	ff 92       	push	r15
    172e:	0f 93       	push	r16
    1730:	1f 93       	push	r17
    1732:	cf 93       	push	r28
    1734:	df 93       	push	r29
    1736:	ec 01       	movw	r28, r24
    1738:	f4 2e       	mov	r15, r20
    173a:	12 2f       	mov	r17, r18
    173c:	03 2f       	mov	r16, r19
    173e:	88 89       	ldd	r24, Y+16	; 0x10
    1740:	99 89       	ldd	r25, Y+17	; 0x11
    1742:	0e 94 65 0d 	call	0x1aca	; 0x1aca <TwoWire::beginTransmission(unsigned char)>
    1746:	88 89       	ldd	r24, Y+16	; 0x10
    1748:	99 89       	ldd	r25, Y+17	; 0x11
    174a:	dc 01       	movw	r26, r24
    174c:	ed 91       	ld	r30, X+
    174e:	fc 91       	ld	r31, X
    1750:	01 90       	ld	r0, Z+
    1752:	f0 81       	ld	r31, Z
    1754:	e0 2d       	mov	r30, r0
    1756:	6f 2d       	mov	r22, r15
    1758:	09 95       	icall
    175a:	88 89       	ldd	r24, Y+16	; 0x10
    175c:	99 89       	ldd	r25, Y+17	; 0x11
    175e:	dc 01       	movw	r26, r24
    1760:	ed 91       	ld	r30, X+
    1762:	fc 91       	ld	r31, X
    1764:	01 90       	ld	r0, Z+
    1766:	f0 81       	ld	r31, Z
    1768:	e0 2d       	mov	r30, r0
    176a:	60 2f       	mov	r22, r16
    176c:	09 95       	icall
    176e:	88 89       	ldd	r24, Y+16	; 0x10
    1770:	99 89       	ldd	r25, Y+17	; 0x11
    1772:	dc 01       	movw	r26, r24
    1774:	ed 91       	ld	r30, X+
    1776:	fc 91       	ld	r31, X
    1778:	01 90       	ld	r0, Z+
    177a:	f0 81       	ld	r31, Z
    177c:	e0 2d       	mov	r30, r0
    177e:	61 2f       	mov	r22, r17
    1780:	09 95       	icall
    1782:	88 89       	ldd	r24, Y+16	; 0x10
    1784:	99 89       	ldd	r25, Y+17	; 0x11
    1786:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <TwoWire::endTransmission()>
    178a:	91 e0       	ldi	r25, 0x01	; 1
    178c:	81 11       	cpse	r24, r1
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	89 2f       	mov	r24, r25
    1792:	df 91       	pop	r29
    1794:	cf 91       	pop	r28
    1796:	1f 91       	pop	r17
    1798:	0f 91       	pop	r16
    179a:	ff 90       	pop	r15
    179c:	08 95       	ret

0000179e <ADS1X15::_requestADC(unsigned int)>:
_ZN7ADS1X1511_requestADCEj():
    179e:	fc 01       	movw	r30, r24
    17a0:	25 81       	ldd	r18, Z+5	; 0x05
    17a2:	36 81       	ldd	r19, Z+6	; 0x06
    17a4:	87 81       	ldd	r24, Z+7	; 0x07
    17a6:	90 85       	ldd	r25, Z+8	; 0x08
    17a8:	28 2b       	or	r18, r24
    17aa:	39 2b       	or	r19, r25
    17ac:	30 68       	ori	r19, 0x80	; 128
    17ae:	81 85       	ldd	r24, Z+9	; 0x09
    17b0:	92 85       	ldd	r25, Z+10	; 0x0a
    17b2:	28 2b       	or	r18, r24
    17b4:	39 2b       	or	r19, r25
    17b6:	26 2b       	or	r18, r22
    17b8:	37 2b       	or	r19, r23
    17ba:	83 85       	ldd	r24, Z+11	; 0x0b
    17bc:	81 11       	cpse	r24, r1
    17be:	20 61       	ori	r18, 0x10	; 16
    17c0:	84 85       	ldd	r24, Z+12	; 0x0c
    17c2:	81 11       	cpse	r24, r1
    17c4:	28 60       	ori	r18, 0x08	; 8
    17c6:	85 85       	ldd	r24, Z+13	; 0x0d
    17c8:	81 11       	cpse	r24, r1
    17ca:	24 60       	ori	r18, 0x04	; 4
    17cc:	86 85       	ldd	r24, Z+14	; 0x0e
    17ce:	28 2b       	or	r18, r24
    17d0:	41 e0       	ldi	r20, 0x01	; 1
    17d2:	62 81       	ldd	r22, Z+2	; 0x02
    17d4:	cf 01       	movw	r24, r30
    17d6:	0c 94 96 0b 	jmp	0x172c	; 0x172c <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>

000017da <ADS1X15::_readRegister(unsigned char, unsigned char)>:
_ZN7ADS1X1513_readRegisterEhh():
    17da:	0f 93       	push	r16
    17dc:	1f 93       	push	r17
    17de:	cf 93       	push	r28
    17e0:	df 93       	push	r29
    17e2:	8c 01       	movw	r16, r24
    17e4:	c6 2f       	mov	r28, r22
    17e6:	d4 2f       	mov	r29, r20
    17e8:	dc 01       	movw	r26, r24
    17ea:	50 96       	adiw	r26, 0x10	; 16
    17ec:	8d 91       	ld	r24, X+
    17ee:	9c 91       	ld	r25, X
    17f0:	0e 94 65 0d 	call	0x1aca	; 0x1aca <TwoWire::beginTransmission(unsigned char)>
    17f4:	f8 01       	movw	r30, r16
    17f6:	80 89       	ldd	r24, Z+16	; 0x10
    17f8:	91 89       	ldd	r25, Z+17	; 0x11
    17fa:	dc 01       	movw	r26, r24
    17fc:	ed 91       	ld	r30, X+
    17fe:	fc 91       	ld	r31, X
    1800:	01 90       	ld	r0, Z+
    1802:	f0 81       	ld	r31, Z
    1804:	e0 2d       	mov	r30, r0
    1806:	6d 2f       	mov	r22, r29
    1808:	09 95       	icall
    180a:	f8 01       	movw	r30, r16
    180c:	80 89       	ldd	r24, Z+16	; 0x10
    180e:	91 89       	ldd	r25, Z+17	; 0x11
    1810:	0e 94 e8 0d 	call	0x1bd0	; 0x1bd0 <TwoWire::endTransmission()>
    1814:	42 e0       	ldi	r20, 0x02	; 2
    1816:	6c 2f       	mov	r22, r28
    1818:	d8 01       	movw	r26, r16
    181a:	50 96       	adiw	r26, 0x10	; 16
    181c:	8d 91       	ld	r24, X+
    181e:	9c 91       	ld	r25, X
    1820:	0e 94 e5 0d 	call	0x1bca	; 0x1bca <TwoWire::requestFrom(unsigned char, unsigned char)>
    1824:	82 30       	cpi	r24, 0x02	; 2
    1826:	f1 f4       	brne	.+60     	; 0x1864 <ADS1X15::_readRegister(unsigned char, unsigned char)+0x8a>
    1828:	f8 01       	movw	r30, r16
    182a:	80 89       	ldd	r24, Z+16	; 0x10
    182c:	91 89       	ldd	r25, Z+17	; 0x11
    182e:	dc 01       	movw	r26, r24
    1830:	ed 91       	ld	r30, X+
    1832:	fc 91       	ld	r31, X
    1834:	02 84       	ldd	r0, Z+10	; 0x0a
    1836:	f3 85       	ldd	r31, Z+11	; 0x0b
    1838:	e0 2d       	mov	r30, r0
    183a:	09 95       	icall
    183c:	d8 2f       	mov	r29, r24
    183e:	b0 e0       	ldi	r27, 0x00	; 0
    1840:	cb 2f       	mov	r28, r27
    1842:	f8 01       	movw	r30, r16
    1844:	80 89       	ldd	r24, Z+16	; 0x10
    1846:	91 89       	ldd	r25, Z+17	; 0x11
    1848:	dc 01       	movw	r26, r24
    184a:	ed 91       	ld	r30, X+
    184c:	fc 91       	ld	r31, X
    184e:	02 84       	ldd	r0, Z+10	; 0x0a
    1850:	f3 85       	ldd	r31, Z+11	; 0x0b
    1852:	e0 2d       	mov	r30, r0
    1854:	09 95       	icall
    1856:	8c 0f       	add	r24, r28
    1858:	9d 1f       	adc	r25, r29
    185a:	df 91       	pop	r29
    185c:	cf 91       	pop	r28
    185e:	1f 91       	pop	r17
    1860:	0f 91       	pop	r16
    1862:	08 95       	ret
    1864:	90 e0       	ldi	r25, 0x00	; 0
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	f8 cf       	rjmp	.-16     	; 0x185a <ADS1X15::_readRegister(unsigned char, unsigned char)+0x80>

0000186a <ADS1X15::isBusy()>:
_ZN7ADS1X156isBusyEv():
    186a:	41 e0       	ldi	r20, 0x01	; 1
    186c:	fc 01       	movw	r30, r24
    186e:	62 81       	ldd	r22, Z+2	; 0x02
    1870:	0e 94 ed 0b 	call	0x17da	; 0x17da <ADS1X15::_readRegister(unsigned char, unsigned char)>
    1874:	89 2f       	mov	r24, r25
    1876:	80 95       	com	r24
    1878:	88 1f       	adc	r24, r24
    187a:	88 27       	eor	r24, r24
    187c:	88 1f       	adc	r24, r24
    187e:	08 95       	ret

00001880 <ADS1X15::getValue()>:
_ZN7ADS1X158getValueEv():
    1880:	cf 93       	push	r28
    1882:	df 93       	push	r29
    1884:	ec 01       	movw	r28, r24
    1886:	40 e0       	ldi	r20, 0x00	; 0
    1888:	6a 81       	ldd	r22, Y+2	; 0x02
    188a:	0e 94 ed 0b 	call	0x17da	; 0x17da <ADS1X15::_readRegister(unsigned char, unsigned char)>
    188e:	2c 81       	ldd	r18, Y+4	; 0x04
    1890:	22 23       	and	r18, r18
    1892:	29 f0       	breq	.+10     	; 0x189e <ADS1X15::getValue()+0x1e>
    1894:	02 c0       	rjmp	.+4      	; 0x189a <ADS1X15::getValue()+0x1a>
    1896:	95 95       	asr	r25
    1898:	87 95       	ror	r24
    189a:	2a 95       	dec	r18
    189c:	e2 f7       	brpl	.-8      	; 0x1896 <ADS1X15::getValue()+0x16>
    189e:	df 91       	pop	r29
    18a0:	cf 91       	pop	r28
    18a2:	08 95       	ret

000018a4 <ADS1X15::_readADC(unsigned int)>:
_ZN7ADS1X158_readADCEj():
    18a4:	cf 93       	push	r28
    18a6:	df 93       	push	r29
    18a8:	ec 01       	movw	r28, r24
    18aa:	0e 94 cf 0b 	call	0x179e	; 0x179e <ADS1X15::_requestADC(unsigned int)>
    18ae:	8f 81       	ldd	r24, Y+7	; 0x07
    18b0:	98 85       	ldd	r25, Y+8	; 0x08
    18b2:	81 15       	cp	r24, r1
    18b4:	91 40       	sbci	r25, 0x01	; 1
    18b6:	41 f4       	brne	.+16     	; 0x18c8 <ADS1X15::_readADC(unsigned int)+0x24>
    18b8:	ce 01       	movw	r24, r28
    18ba:	0e 94 35 0c 	call	0x186a	; 0x186a <ADS1X15::isBusy()>
    18be:	88 23       	and	r24, r24
    18c0:	49 f0       	breq	.+18     	; 0x18d4 <ADS1X15::_readADC(unsigned int)+0x30>
    18c2:	0e 94 1e 10 	call	0x203c	; 0x203c <yield>
    18c6:	f8 cf       	rjmp	.-16     	; 0x18b8 <ADS1X15::_readADC(unsigned int)+0x14>
    18c8:	6b 81       	ldd	r22, Y+3	; 0x03
    18ca:	70 e0       	ldi	r23, 0x00	; 0
    18cc:	90 e0       	ldi	r25, 0x00	; 0
    18ce:	80 e0       	ldi	r24, 0x00	; 0
    18d0:	0e 94 8e 10 	call	0x211c	; 0x211c <delay>
    18d4:	ce 01       	movw	r24, r28
    18d6:	df 91       	pop	r29
    18d8:	cf 91       	pop	r28
    18da:	0c 94 40 0c 	jmp	0x1880	; 0x1880 <ADS1X15::getValue()>

000018de <ADS1X15::readADC(unsigned char)>:
_ZN7ADS1X157readADCEh():
    18de:	fc 01       	movw	r30, r24
    18e0:	21 81       	ldd	r18, Z+1	; 0x01
    18e2:	62 17       	cp	r22, r18
    18e4:	38 f4       	brcc	.+14     	; 0x18f4 <ADS1X15::readADC(unsigned char)+0x16>
    18e6:	62 95       	swap	r22
    18e8:	60 7f       	andi	r22, 0xF0	; 240
    18ea:	70 e4       	ldi	r23, 0x40	; 64
    18ec:	76 0f       	add	r23, r22
    18ee:	60 e0       	ldi	r22, 0x00	; 0
    18f0:	0c 94 52 0c 	jmp	0x18a4	; 0x18a4 <ADS1X15::_readADC(unsigned int)>
    18f4:	90 e0       	ldi	r25, 0x00	; 0
    18f6:	80 e0       	ldi	r24, 0x00	; 0
    18f8:	08 95       	ret

000018fa <ADS1115::ADS1115(unsigned char, TwoWire*)>:
_ZN7ADS1115C2EhP7TwoWire():
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:577

///////////////////////////////////////////////////////////////////////////
//
// ADS1115
//
ADS1115::ADS1115(uint8_t address, TwoWire *wire)
    18fa:	ff 92       	push	r15
    18fc:	0f 93       	push	r16
    18fe:	1f 93       	push	r17
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	ec 01       	movw	r28, r24
    1906:	f6 2e       	mov	r15, r22
    1908:	8a 01       	movw	r16, r20
    190a:	0e 94 6c 0b 	call	0x16d8	; 0x16d8 <ADS1X15::ADS1X15()>
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:579
{
  _address = address;
    190e:	fa 82       	std	Y+2, r15	; 0x02
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:580
  _wire = wire;
    1910:	19 8b       	std	Y+17, r17	; 0x11
    1912:	08 8b       	std	Y+16, r16	; 0x10
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:581
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_4;
    1914:	85 e3       	ldi	r24, 0x35	; 53
    1916:	88 83       	st	Y, r24
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:582
  _conversionDelay = ADS1115_CONVERSION_DELAY;
    1918:	88 e0       	ldi	r24, 0x08	; 8
    191a:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:583
  _bitShift = 0;
    191c:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:584
  _maxPorts = 4;
    191e:	84 e0       	ldi	r24, 0x04	; 4
    1920:	89 83       	std	Y+1, r24	; 0x01
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:585
}
    1922:	df 91       	pop	r29
    1924:	cf 91       	pop	r28
    1926:	1f 91       	pop	r17
    1928:	0f 91       	pop	r16
    192a:	ff 90       	pop	r15
    192c:	08 95       	ret

0000192e <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:329

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    192e:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <TwoWire::rxBufferLength>
    1932:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <TwoWire::rxBufferIndex>
    1936:	89 1b       	sub	r24, r25
    1938:	99 0b       	sbc	r25, r25
    193a:	08 95       	ret

0000193c <TwoWire::read()>:
_ZN7TwoWire4readEv():
    193c:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <TwoWire::rxBufferIndex>
    1940:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <TwoWire::rxBufferLength>
    1944:	2f ef       	ldi	r18, 0xFF	; 255
    1946:	3f ef       	ldi	r19, 0xFF	; 255
    1948:	98 17       	cp	r25, r24
    194a:	48 f4       	brcc	.+18     	; 0x195e <TwoWire::read()+0x22>
    194c:	e9 2f       	mov	r30, r25
    194e:	f0 e0       	ldi	r31, 0x00	; 0
    1950:	eb 5b       	subi	r30, 0xBB	; 187
    1952:	fa 4f       	sbci	r31, 0xFA	; 250
    1954:	20 81       	ld	r18, Z
    1956:	30 e0       	ldi	r19, 0x00	; 0
    1958:	9f 5f       	subi	r25, 0xFF	; 255
    195a:	90 93 44 05 	sts	0x0544, r25	; 0x800544 <TwoWire::rxBufferIndex>
    195e:	c9 01       	movw	r24, r18
    1960:	08 95       	ret

00001962 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    1962:	e0 91 44 05 	lds	r30, 0x0544	; 0x800544 <TwoWire::rxBufferIndex>
    1966:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <TwoWire::rxBufferLength>
    196a:	e8 17       	cp	r30, r24
    196c:	30 f4       	brcc	.+12     	; 0x197a <TwoWire::peek()+0x18>
    196e:	f0 e0       	ldi	r31, 0x00	; 0
    1970:	eb 5b       	subi	r30, 0xBB	; 187
    1972:	fa 4f       	sbci	r31, 0xFA	; 250
    1974:	80 81       	ld	r24, Z
    1976:	90 e0       	ldi	r25, 0x00	; 0
    1978:	08 95       	ret
    197a:	8f ef       	ldi	r24, 0xFF	; 255
    197c:	9f ef       	ldi	r25, 0xFF	; 255
    197e:	08 95       	ret

00001980 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    1980:	08 95       	ret

00001982 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	ec 01       	movw	r28, r24
    1988:	e0 91 1b 05 	lds	r30, 0x051B	; 0x80051b <TwoWire::user_onReceive>
    198c:	f0 91 1c 05 	lds	r31, 0x051C	; 0x80051c <TwoWire::user_onReceive+0x1>
    1990:	30 97       	sbiw	r30, 0x00	; 0
    1992:	f1 f0       	breq	.+60     	; 0x19d0 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    1994:	90 91 44 05 	lds	r25, 0x0544	; 0x800544 <TwoWire::rxBufferIndex>
    1998:	80 91 43 05 	lds	r24, 0x0543	; 0x800543 <TwoWire::rxBufferLength>
    199c:	98 17       	cp	r25, r24
    199e:	c0 f0       	brcs	.+48     	; 0x19d0 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    19a0:	90 e0       	ldi	r25, 0x00	; 0
    19a2:	29 2f       	mov	r18, r25
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	26 17       	cp	r18, r22
    19a8:	37 07       	cpc	r19, r23
    19aa:	54 f4       	brge	.+20     	; 0x19c0 <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
    19ac:	de 01       	movw	r26, r28
    19ae:	a2 0f       	add	r26, r18
    19b0:	b3 1f       	adc	r27, r19
    19b2:	4c 91       	ld	r20, X
    19b4:	2b 5b       	subi	r18, 0xBB	; 187
    19b6:	3a 4f       	sbci	r19, 0xFA	; 250
    19b8:	d9 01       	movw	r26, r18
    19ba:	4c 93       	st	X, r20
    19bc:	9f 5f       	subi	r25, 0xFF	; 255
    19be:	f1 cf       	rjmp	.-30     	; 0x19a2 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
    19c0:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <TwoWire::rxBufferIndex>
    19c4:	60 93 43 05 	sts	0x0543, r22	; 0x800543 <TwoWire::rxBufferLength>
    19c8:	cb 01       	movw	r24, r22
    19ca:	df 91       	pop	r29
    19cc:	cf 91       	pop	r28
    19ce:	09 94       	ijmp
    19d0:	df 91       	pop	r29
    19d2:	cf 91       	pop	r28
    19d4:	08 95       	ret

000019d6 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    19d6:	e0 91 1d 05 	lds	r30, 0x051D	; 0x80051d <TwoWire::user_onRequest>
    19da:	f0 91 1e 05 	lds	r31, 0x051E	; 0x80051e <TwoWire::user_onRequest+0x1>
    19de:	30 97       	sbiw	r30, 0x00	; 0
    19e0:	29 f0       	breq	.+10     	; 0x19ec <TwoWire::onRequestService()+0x16>
    19e2:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <TwoWire::txBufferIndex>
    19e6:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <TwoWire::txBufferLength>
    19ea:	09 94       	ijmp
    19ec:	08 95       	ret

000019ee <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    19f2:	1f 92       	push	r1
    19f4:	cd b7       	in	r28, 0x3d	; 61
    19f6:	de b7       	in	r29, 0x3e	; 62
    19f8:	69 83       	std	Y+1, r22	; 0x01
    19fa:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <TwoWire::transmitting>
    19fe:	22 23       	and	r18, r18
    1a00:	f9 f0       	breq	.+62     	; 0x1a40 <TwoWire::write(unsigned char)+0x52>
    1a02:	20 91 20 05 	lds	r18, 0x0520	; 0x800520 <TwoWire::txBufferLength>
    1a06:	20 32       	cpi	r18, 0x20	; 32
    1a08:	58 f0       	brcs	.+22     	; 0x1a20 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    1a0a:	21 e0       	ldi	r18, 0x01	; 1
    1a0c:	30 e0       	ldi	r19, 0x00	; 0
    1a0e:	fc 01       	movw	r30, r24
    1a10:	33 83       	std	Z+3, r19	; 0x03
    1a12:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    1a14:	90 e0       	ldi	r25, 0x00	; 0
    1a16:	80 e0       	ldi	r24, 0x00	; 0
    1a18:	0f 90       	pop	r0
    1a1a:	df 91       	pop	r29
    1a1c:	cf 91       	pop	r28
    1a1e:	08 95       	ret
    1a20:	80 91 21 05 	lds	r24, 0x0521	; 0x800521 <TwoWire::txBufferIndex>
    1a24:	e8 2f       	mov	r30, r24
    1a26:	f0 e0       	ldi	r31, 0x00	; 0
    1a28:	ee 5d       	subi	r30, 0xDE	; 222
    1a2a:	fa 4f       	sbci	r31, 0xFA	; 250
    1a2c:	99 81       	ldd	r25, Y+1	; 0x01
    1a2e:	90 83       	st	Z, r25
    1a30:	8f 5f       	subi	r24, 0xFF	; 255
    1a32:	80 93 21 05 	sts	0x0521, r24	; 0x800521 <TwoWire::txBufferIndex>
    1a36:	80 93 20 05 	sts	0x0520, r24	; 0x800520 <TwoWire::txBufferLength>
    1a3a:	81 e0       	ldi	r24, 0x01	; 1
    1a3c:	90 e0       	ldi	r25, 0x00	; 0
    1a3e:	ec cf       	rjmp	.-40     	; 0x1a18 <TwoWire::write(unsigned char)+0x2a>
    1a40:	61 e0       	ldi	r22, 0x01	; 1
    1a42:	ce 01       	movw	r24, r28
    1a44:	01 96       	adiw	r24, 0x01	; 1
    1a46:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <twi_transmit>
    1a4a:	f7 cf       	rjmp	.-18     	; 0x1a3a <TwoWire::write(unsigned char)+0x4c>

00001a4c <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    1a4c:	cf 92       	push	r12
    1a4e:	df 92       	push	r13
    1a50:	ef 92       	push	r14
    1a52:	ff 92       	push	r15
    1a54:	0f 93       	push	r16
    1a56:	1f 93       	push	r17
    1a58:	cf 93       	push	r28
    1a5a:	df 93       	push	r29
    1a5c:	7c 01       	movw	r14, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	8a 01       	movw	r16, r20
    1a62:	20 91 1f 05 	lds	r18, 0x051F	; 0x80051f <TwoWire::transmitting>
    1a66:	22 23       	and	r18, r18
    1a68:	89 f0       	breq	.+34     	; 0x1a8c <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    1a6a:	eb 01       	movw	r28, r22
    1a6c:	6b 01       	movw	r12, r22
    1a6e:	c4 0e       	add	r12, r20
    1a70:	d5 1e       	adc	r13, r21
    1a72:	cc 15       	cp	r28, r12
    1a74:	dd 05       	cpc	r29, r13
    1a76:	69 f0       	breq	.+26     	; 0x1a92 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    1a78:	69 91       	ld	r22, Y+
    1a7a:	d7 01       	movw	r26, r14
    1a7c:	ed 91       	ld	r30, X+
    1a7e:	fc 91       	ld	r31, X
    1a80:	01 90       	ld	r0, Z+
    1a82:	f0 81       	ld	r31, Z
    1a84:	e0 2d       	mov	r30, r0
    1a86:	c7 01       	movw	r24, r14
    1a88:	09 95       	icall
    1a8a:	f3 cf       	rjmp	.-26     	; 0x1a72 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    1a8c:	64 2f       	mov	r22, r20
    1a8e:	0e 94 b9 0e 	call	0x1d72	; 0x1d72 <twi_transmit>
    1a92:	c8 01       	movw	r24, r16
    1a94:	df 91       	pop	r29
    1a96:	cf 91       	pop	r28
    1a98:	1f 91       	pop	r17
    1a9a:	0f 91       	pop	r16
    1a9c:	ff 90       	pop	r15
    1a9e:	ef 90       	pop	r14
    1aa0:	df 90       	pop	r13
    1aa2:	cf 90       	pop	r12
    1aa4:	08 95       	ret

00001aa6 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    1aa6:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <TwoWire::rxBufferIndex>
    1aaa:	10 92 43 05 	sts	0x0543, r1	; 0x800543 <TwoWire::rxBufferLength>
    1aae:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <TwoWire::txBufferIndex>
    1ab2:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <TwoWire::txBufferLength>
    1ab6:	0e 94 fc 0d 	call	0x1bf8	; 0x1bf8 <twi_init>
    1aba:	8b ee       	ldi	r24, 0xEB	; 235
    1abc:	9c e0       	ldi	r25, 0x0C	; 12
    1abe:	0e 94 e5 0e 	call	0x1dca	; 0x1dca <twi_attachSlaveTxEvent>
    1ac2:	81 ec       	ldi	r24, 0xC1	; 193
    1ac4:	9c e0       	ldi	r25, 0x0C	; 12
    1ac6:	0c 94 e0 0e 	jmp	0x1dc0	; 0x1dc0 <twi_attachSlaveRxEvent>

00001aca <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    1aca:	81 e0       	ldi	r24, 0x01	; 1
    1acc:	80 93 1f 05 	sts	0x051F, r24	; 0x80051f <TwoWire::transmitting>
    1ad0:	60 93 42 05 	sts	0x0542, r22	; 0x800542 <TwoWire::txAddress>
    1ad4:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <TwoWire::txBufferIndex>
    1ad8:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <TwoWire::txBufferLength>
    1adc:	08 95       	ret

00001ade <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    1ade:	0f 93       	push	r16
    1ae0:	06 2f       	mov	r16, r22
    1ae2:	21 e0       	ldi	r18, 0x01	; 1
    1ae4:	40 91 20 05 	lds	r20, 0x0520	; 0x800520 <TwoWire::txBufferLength>
    1ae8:	62 e2       	ldi	r22, 0x22	; 34
    1aea:	75 e0       	ldi	r23, 0x05	; 5
    1aec:	80 91 42 05 	lds	r24, 0x0542	; 0x800542 <TwoWire::txAddress>
    1af0:	0e 94 62 0e 	call	0x1cc4	; 0x1cc4 <twi_writeTo>
    1af4:	10 92 21 05 	sts	0x0521, r1	; 0x800521 <TwoWire::txBufferIndex>
    1af8:	10 92 20 05 	sts	0x0520, r1	; 0x800520 <TwoWire::txBufferLength>
    1afc:	10 92 1f 05 	sts	0x051F, r1	; 0x80051f <TwoWire::transmitting>
    1b00:	0f 91       	pop	r16
    1b02:	08 95       	ret

00001b04 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    1b04:	4f 92       	push	r4
    1b06:	5f 92       	push	r5
    1b08:	6f 92       	push	r6
    1b0a:	7f 92       	push	r7
    1b0c:	af 92       	push	r10
    1b0e:	bf 92       	push	r11
    1b10:	cf 92       	push	r12
    1b12:	ef 92       	push	r14
    1b14:	ff 92       	push	r15
    1b16:	0f 93       	push	r16
    1b18:	1f 93       	push	r17
    1b1a:	cf 93       	push	r28
    1b1c:	df 93       	push	r29
    1b1e:	5c 01       	movw	r10, r24
    1b20:	f6 2e       	mov	r15, r22
    1b22:	d4 2f       	mov	r29, r20
    1b24:	28 01       	movw	r4, r16
    1b26:	39 01       	movw	r6, r18
    1b28:	ee 20       	and	r14, r14
    1b2a:	19 f1       	breq	.+70     	; 0x1b72 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    1b2c:	0e 94 65 0d 	call	0x1aca	; 0x1aca <TwoWire::beginTransmission(unsigned char)>
    1b30:	ce 2d       	mov	r28, r14
    1b32:	c4 30       	cpi	r28, 0x04	; 4
    1b34:	08 f0       	brcs	.+2      	; 0x1b38 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    1b36:	c3 e0       	ldi	r28, 0x03	; 3
    1b38:	c1 50       	subi	r28, 0x01	; 1
    1b3a:	b8 f0       	brcs	.+46     	; 0x1b6a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    1b3c:	28 e0       	ldi	r18, 0x08	; 8
    1b3e:	c2 9f       	mul	r28, r18
    1b40:	c0 01       	movw	r24, r0
    1b42:	11 24       	eor	r1, r1
    1b44:	a3 01       	movw	r20, r6
    1b46:	92 01       	movw	r18, r4
    1b48:	04 c0       	rjmp	.+8      	; 0x1b52 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    1b4a:	56 95       	lsr	r21
    1b4c:	47 95       	ror	r20
    1b4e:	37 95       	ror	r19
    1b50:	27 95       	ror	r18
    1b52:	8a 95       	dec	r24
    1b54:	d2 f7       	brpl	.-12     	; 0x1b4a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    1b56:	b9 01       	movw	r22, r18
    1b58:	d5 01       	movw	r26, r10
    1b5a:	ed 91       	ld	r30, X+
    1b5c:	fc 91       	ld	r31, X
    1b5e:	01 90       	ld	r0, Z+
    1b60:	f0 81       	ld	r31, Z
    1b62:	e0 2d       	mov	r30, r0
    1b64:	c5 01       	movw	r24, r10
    1b66:	09 95       	icall
    1b68:	e7 cf       	rjmp	.-50     	; 0x1b38 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    1b6a:	60 e0       	ldi	r22, 0x00	; 0
    1b6c:	c5 01       	movw	r24, r10
    1b6e:	0e 94 6f 0d 	call	0x1ade	; 0x1ade <TwoWire::endTransmission(unsigned char)>
    1b72:	4d 2f       	mov	r20, r29
    1b74:	d1 32       	cpi	r29, 0x21	; 33
    1b76:	08 f0       	brcs	.+2      	; 0x1b7a <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    1b78:	40 e2       	ldi	r20, 0x20	; 32
    1b7a:	2c 2d       	mov	r18, r12
    1b7c:	65 e4       	ldi	r22, 0x45	; 69
    1b7e:	75 e0       	ldi	r23, 0x05	; 5
    1b80:	8f 2d       	mov	r24, r15
    1b82:	0e 94 1a 0e 	call	0x1c34	; 0x1c34 <twi_readFrom>
    1b86:	10 92 44 05 	sts	0x0544, r1	; 0x800544 <TwoWire::rxBufferIndex>
    1b8a:	80 93 43 05 	sts	0x0543, r24	; 0x800543 <TwoWire::rxBufferLength>
    1b8e:	df 91       	pop	r29
    1b90:	cf 91       	pop	r28
    1b92:	1f 91       	pop	r17
    1b94:	0f 91       	pop	r16
    1b96:	ff 90       	pop	r15
    1b98:	ef 90       	pop	r14
    1b9a:	cf 90       	pop	r12
    1b9c:	bf 90       	pop	r11
    1b9e:	af 90       	pop	r10
    1ba0:	7f 90       	pop	r7
    1ba2:	6f 90       	pop	r6
    1ba4:	5f 90       	pop	r5
    1ba6:	4f 90       	pop	r4
    1ba8:	08 95       	ret

00001baa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    1baa:	cf 92       	push	r12
    1bac:	ef 92       	push	r14
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	c2 2e       	mov	r12, r18
    1bb4:	e1 2c       	mov	r14, r1
    1bb6:	00 e0       	ldi	r16, 0x00	; 0
    1bb8:	10 e0       	ldi	r17, 0x00	; 0
    1bba:	98 01       	movw	r18, r16
    1bbc:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    1bc0:	1f 91       	pop	r17
    1bc2:	0f 91       	pop	r16
    1bc4:	ef 90       	pop	r14
    1bc6:	cf 90       	pop	r12
    1bc8:	08 95       	ret

00001bca <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
    1bca:	21 e0       	ldi	r18, 0x01	; 1
    1bcc:	0c 94 d5 0d 	jmp	0x1baa	; 0x1baa <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00001bd0 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	0c 94 6f 0d 	jmp	0x1ade	; 0x1ade <TwoWire::endTransmission(unsigned char)>

00001bd6 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1bd6:	ef e0       	ldi	r30, 0x0F	; 15
    1bd8:	f5 e0       	ldi	r31, 0x05	; 5
    1bda:	13 82       	std	Z+3, r1	; 0x03
    1bdc:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1bde:	88 ee       	ldi	r24, 0xE8	; 232
    1be0:	93 e0       	ldi	r25, 0x03	; 3
    1be2:	a0 e0       	ldi	r26, 0x00	; 0
    1be4:	b0 e0       	ldi	r27, 0x00	; 0
    1be6:	84 83       	std	Z+4, r24	; 0x04
    1be8:	95 83       	std	Z+5, r25	; 0x05
    1bea:	a6 83       	std	Z+6, r26	; 0x06
    1bec:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:52
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1bee:	8e e4       	ldi	r24, 0x4E	; 78
    1bf0:	94 e0       	ldi	r25, 0x04	; 4
    1bf2:	91 83       	std	Z+1, r25	; 0x01
    1bf4:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:333
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1bf6:	08 95       	ret

00001bf8 <twi_init>:
twi_init():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1bf8:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <twi_state>
    1bfc:	81 e0       	ldi	r24, 0x01	; 1
    1bfe:	80 93 d0 05 	sts	0x05D0, r24	; 0x8005d0 <twi_sendStop>
    1c02:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <twi_inRepStart>
    1c06:	61 e0       	ldi	r22, 0x01	; 1
    1c08:	81 e1       	ldi	r24, 0x11	; 17
    1c0a:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
    1c0e:	61 e0       	ldi	r22, 0x01	; 1
    1c10:	80 e1       	ldi	r24, 0x10	; 16
    1c12:	0e 94 78 11 	call	0x22f0	; 0x22f0 <digitalWrite>
    1c16:	e9 eb       	ldi	r30, 0xB9	; 185
    1c18:	f0 e0       	ldi	r31, 0x00	; 0
    1c1a:	80 81       	ld	r24, Z
    1c1c:	8e 7f       	andi	r24, 0xFE	; 254
    1c1e:	80 83       	st	Z, r24
    1c20:	80 81       	ld	r24, Z
    1c22:	8d 7f       	andi	r24, 0xFD	; 253
    1c24:	80 83       	st	Z, r24
    1c26:	88 e4       	ldi	r24, 0x48	; 72
    1c28:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1c2c:	85 e4       	ldi	r24, 0x45	; 69
    1c2e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c32:	08 95       	ret

00001c34 <twi_readFrom>:
twi_readFrom():
    1c34:	41 32       	cpi	r20, 0x21	; 33
    1c36:	08 f0       	brcs	.+2      	; 0x1c3a <twi_readFrom+0x6>
    1c38:	43 c0       	rjmp	.+134    	; 0x1cc0 <twi_readFrom+0x8c>
    1c3a:	90 91 d2 05 	lds	r25, 0x05D2	; 0x8005d2 <twi_state>
    1c3e:	91 11       	cpse	r25, r1
    1c40:	fc cf       	rjmp	.-8      	; 0x1c3a <twi_readFrom+0x6>
    1c42:	91 e0       	ldi	r25, 0x01	; 1
    1c44:	90 93 d2 05 	sts	0x05D2, r25	; 0x8005d2 <twi_state>
    1c48:	20 93 d0 05 	sts	0x05D0, r18	; 0x8005d0 <twi_sendStop>
    1c4c:	2f ef       	ldi	r18, 0xFF	; 255
    1c4e:	20 93 65 05 	sts	0x0565, r18	; 0x800565 <twi_error>
    1c52:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <twi_masterBufferIndex>
    1c56:	24 0f       	add	r18, r20
    1c58:	20 93 a9 05 	sts	0x05A9, r18	; 0x8005a9 <twi_masterBufferLength>
    1c5c:	90 93 d1 05 	sts	0x05D1, r25	; 0x8005d1 <twi_slarw>
    1c60:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <twi_slarw>
    1c64:	88 0f       	add	r24, r24
    1c66:	89 2b       	or	r24, r25
    1c68:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <twi_slarw>
    1c6c:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <twi_inRepStart>
    1c70:	81 30       	cpi	r24, 0x01	; 1
    1c72:	09 f5       	brne	.+66     	; 0x1cb6 <twi_readFrom+0x82>
    1c74:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <twi_inRepStart>
    1c78:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <twi_slarw>
    1c7c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1c80:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c84:	83 fd       	sbrc	r24, 3
    1c86:	f8 cf       	rjmp	.-16     	; 0x1c78 <twi_readFrom+0x44>
    1c88:	85 ec       	ldi	r24, 0xC5	; 197
    1c8a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1c8e:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <twi_state>
    1c92:	81 30       	cpi	r24, 0x01	; 1
    1c94:	e1 f3       	breq	.-8      	; 0x1c8e <twi_readFrom+0x5a>
    1c96:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <twi_masterBufferIndex>
    1c9a:	84 17       	cp	r24, r20
    1c9c:	10 f4       	brcc	.+4      	; 0x1ca2 <twi_readFrom+0x6e>
    1c9e:	40 91 aa 05 	lds	r20, 0x05AA	; 0x8005aa <twi_masterBufferIndex>
    1ca2:	ab ea       	ldi	r26, 0xAB	; 171
    1ca4:	b5 e0       	ldi	r27, 0x05	; 5
    1ca6:	96 2f       	mov	r25, r22
    1ca8:	fb 01       	movw	r30, r22
    1caa:	8e 2f       	mov	r24, r30
    1cac:	89 1b       	sub	r24, r25
    1cae:	84 17       	cp	r24, r20
    1cb0:	20 f0       	brcs	.+8      	; 0x1cba <twi_readFrom+0x86>
    1cb2:	84 2f       	mov	r24, r20
    1cb4:	08 95       	ret
    1cb6:	85 ee       	ldi	r24, 0xE5	; 229
    1cb8:	e8 cf       	rjmp	.-48     	; 0x1c8a <twi_readFrom+0x56>
    1cba:	8d 91       	ld	r24, X+
    1cbc:	81 93       	st	Z+, r24
    1cbe:	f5 cf       	rjmp	.-22     	; 0x1caa <twi_readFrom+0x76>
    1cc0:	40 e0       	ldi	r20, 0x00	; 0
    1cc2:	f7 cf       	rjmp	.-18     	; 0x1cb2 <twi_readFrom+0x7e>

00001cc4 <twi_writeTo>:
twi_writeTo():
    1cc4:	0f 93       	push	r16
    1cc6:	41 32       	cpi	r20, 0x21	; 33
    1cc8:	08 f0       	brcs	.+2      	; 0x1ccc <twi_writeTo+0x8>
    1cca:	4b c0       	rjmp	.+150    	; 0x1d62 <twi_writeTo+0x9e>
    1ccc:	90 91 d2 05 	lds	r25, 0x05D2	; 0x8005d2 <twi_state>
    1cd0:	91 11       	cpse	r25, r1
    1cd2:	fc cf       	rjmp	.-8      	; 0x1ccc <twi_writeTo+0x8>
    1cd4:	92 e0       	ldi	r25, 0x02	; 2
    1cd6:	90 93 d2 05 	sts	0x05D2, r25	; 0x8005d2 <twi_state>
    1cda:	00 93 d0 05 	sts	0x05D0, r16	; 0x8005d0 <twi_sendStop>
    1cde:	9f ef       	ldi	r25, 0xFF	; 255
    1ce0:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <twi_error>
    1ce4:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <twi_masterBufferIndex>
    1ce8:	40 93 a9 05 	sts	0x05A9, r20	; 0x8005a9 <twi_masterBufferLength>
    1cec:	36 2f       	mov	r19, r22
    1cee:	ab ea       	ldi	r26, 0xAB	; 171
    1cf0:	b5 e0       	ldi	r27, 0x05	; 5
    1cf2:	fb 01       	movw	r30, r22
    1cf4:	9e 2f       	mov	r25, r30
    1cf6:	93 1b       	sub	r25, r19
    1cf8:	94 17       	cp	r25, r20
    1cfa:	70 f1       	brcs	.+92     	; 0x1d58 <twi_writeTo+0x94>
    1cfc:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <twi_slarw>
    1d00:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <twi_slarw>
    1d04:	88 0f       	add	r24, r24
    1d06:	89 2b       	or	r24, r25
    1d08:	80 93 d1 05 	sts	0x05D1, r24	; 0x8005d1 <twi_slarw>
    1d0c:	80 91 cf 05 	lds	r24, 0x05CF	; 0x8005cf <twi_inRepStart>
    1d10:	81 30       	cpi	r24, 0x01	; 1
    1d12:	29 f5       	brne	.+74     	; 0x1d5e <twi_writeTo+0x9a>
    1d14:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <twi_inRepStart>
    1d18:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <twi_slarw>
    1d1c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1d20:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d24:	83 fd       	sbrc	r24, 3
    1d26:	f8 cf       	rjmp	.-16     	; 0x1d18 <twi_writeTo+0x54>
    1d28:	85 ec       	ldi	r24, 0xC5	; 197
    1d2a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1d2e:	22 23       	and	r18, r18
    1d30:	21 f0       	breq	.+8      	; 0x1d3a <twi_writeTo+0x76>
    1d32:	80 91 d2 05 	lds	r24, 0x05D2	; 0x8005d2 <twi_state>
    1d36:	82 30       	cpi	r24, 0x02	; 2
    1d38:	d1 f3       	breq	.-12     	; 0x1d2e <twi_writeTo+0x6a>
    1d3a:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <twi_error>
    1d3e:	8f 3f       	cpi	r24, 0xFF	; 255
    1d40:	91 f0       	breq	.+36     	; 0x1d66 <twi_writeTo+0xa2>
    1d42:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <twi_error>
    1d46:	80 32       	cpi	r24, 0x20	; 32
    1d48:	81 f0       	breq	.+32     	; 0x1d6a <twi_writeTo+0xa6>
    1d4a:	80 91 65 05 	lds	r24, 0x0565	; 0x800565 <twi_error>
    1d4e:	80 33       	cpi	r24, 0x30	; 48
    1d50:	71 f0       	breq	.+28     	; 0x1d6e <twi_writeTo+0xaa>
    1d52:	84 e0       	ldi	r24, 0x04	; 4
    1d54:	0f 91       	pop	r16
    1d56:	08 95       	ret
    1d58:	91 91       	ld	r25, Z+
    1d5a:	9d 93       	st	X+, r25
    1d5c:	cb cf       	rjmp	.-106    	; 0x1cf4 <twi_writeTo+0x30>
    1d5e:	85 ee       	ldi	r24, 0xE5	; 229
    1d60:	e4 cf       	rjmp	.-56     	; 0x1d2a <twi_writeTo+0x66>
    1d62:	81 e0       	ldi	r24, 0x01	; 1
    1d64:	f7 cf       	rjmp	.-18     	; 0x1d54 <twi_writeTo+0x90>
    1d66:	80 e0       	ldi	r24, 0x00	; 0
    1d68:	f5 cf       	rjmp	.-22     	; 0x1d54 <twi_writeTo+0x90>
    1d6a:	82 e0       	ldi	r24, 0x02	; 2
    1d6c:	f3 cf       	rjmp	.-26     	; 0x1d54 <twi_writeTo+0x90>
    1d6e:	83 e0       	ldi	r24, 0x03	; 3
    1d70:	f1 cf       	rjmp	.-30     	; 0x1d54 <twi_writeTo+0x90>

00001d72 <twi_transmit>:
twi_transmit():
    1d72:	20 91 87 05 	lds	r18, 0x0587	; 0x800587 <twi_txBufferLength>
    1d76:	26 0f       	add	r18, r22
    1d78:	33 27       	eor	r19, r19
    1d7a:	33 1f       	adc	r19, r19
    1d7c:	21 32       	cpi	r18, 0x21	; 33
    1d7e:	31 05       	cpc	r19, r1
    1d80:	ec f4       	brge	.+58     	; 0x1dbc <twi_transmit+0x4a>
    1d82:	20 91 d2 05 	lds	r18, 0x05D2	; 0x8005d2 <twi_state>
    1d86:	fc 01       	movw	r30, r24
    1d88:	90 e0       	ldi	r25, 0x00	; 0
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	24 30       	cpi	r18, 0x04	; 4
    1d8e:	69 f0       	breq	.+26     	; 0x1daa <twi_transmit+0x38>
    1d90:	82 e0       	ldi	r24, 0x02	; 2
    1d92:	08 95       	ret
    1d94:	a0 91 87 05 	lds	r26, 0x0587	; 0x800587 <twi_txBufferLength>
    1d98:	21 91       	ld	r18, Z+
    1d9a:	ac 01       	movw	r20, r24
    1d9c:	47 57       	subi	r20, 0x77	; 119
    1d9e:	5a 4f       	sbci	r21, 0xFA	; 250
    1da0:	a4 0f       	add	r26, r20
    1da2:	b5 2f       	mov	r27, r21
    1da4:	b1 1d       	adc	r27, r1
    1da6:	2c 93       	st	X, r18
    1da8:	01 96       	adiw	r24, 0x01	; 1
    1daa:	86 17       	cp	r24, r22
    1dac:	98 f3       	brcs	.-26     	; 0x1d94 <twi_transmit+0x22>
    1dae:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <twi_txBufferLength>
    1db2:	68 0f       	add	r22, r24
    1db4:	60 93 87 05 	sts	0x0587, r22	; 0x800587 <twi_txBufferLength>
    1db8:	80 e0       	ldi	r24, 0x00	; 0
    1dba:	08 95       	ret
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	08 95       	ret

00001dc0 <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    1dc0:	90 93 cc 05 	sts	0x05CC, r25	; 0x8005cc <twi_onSlaveReceive+0x1>
    1dc4:	80 93 cb 05 	sts	0x05CB, r24	; 0x8005cb <twi_onSlaveReceive>
    1dc8:	08 95       	ret

00001dca <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    1dca:	90 93 ce 05 	sts	0x05CE, r25	; 0x8005ce <twi_onSlaveTransmit+0x1>
    1dce:	80 93 cd 05 	sts	0x05CD, r24	; 0x8005cd <twi_onSlaveTransmit>
    1dd2:	08 95       	ret

00001dd4 <twi_stop>:
twi_stop():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    1dd4:	85 ed       	ldi	r24, 0xD5	; 213
    1dd6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    1dda:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1dde:	84 fd       	sbrc	r24, 4
    1de0:	fc cf       	rjmp	.-8      	; 0x1dda <twi_stop+0x6>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    1de2:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <twi_state>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
    1de6:	08 95       	ret

00001de8 <twi_releaseBus>:
twi_releaseBus():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    1de8:	85 ec       	ldi	r24, 0xC5	; 197
    1dea:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    1dee:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <twi_state>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:397
}
    1df2:	08 95       	ret

00001df4 <__vector_26>:
__vector_26():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
    1df4:	1f 92       	push	r1
    1df6:	0f 92       	push	r0
    1df8:	0f b6       	in	r0, 0x3f	; 63
    1dfa:	0f 92       	push	r0
    1dfc:	11 24       	eor	r1, r1
    1dfe:	0b b6       	in	r0, 0x3b	; 59
    1e00:	0f 92       	push	r0
    1e02:	2f 93       	push	r18
    1e04:	3f 93       	push	r19
    1e06:	4f 93       	push	r20
    1e08:	5f 93       	push	r21
    1e0a:	6f 93       	push	r22
    1e0c:	7f 93       	push	r23
    1e0e:	8f 93       	push	r24
    1e10:	9f 93       	push	r25
    1e12:	af 93       	push	r26
    1e14:	bf 93       	push	r27
    1e16:	ef 93       	push	r30
    1e18:	ff 93       	push	r31
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    1e1a:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    1e1e:	88 7f       	andi	r24, 0xF8	; 248
    1e20:	80 36       	cpi	r24, 0x60	; 96
    1e22:	09 f4       	brne	.+2      	; 0x1e26 <__vector_26+0x32>
    1e24:	4e c0       	rjmp	.+156    	; 0x1ec2 <__vector_26+0xce>
    1e26:	08 f0       	brcs	.+2      	; 0x1e2a <__vector_26+0x36>
    1e28:	41 c0       	rjmp	.+130    	; 0x1eac <__vector_26+0xb8>
    1e2a:	88 32       	cpi	r24, 0x28	; 40
    1e2c:	09 f4       	brne	.+2      	; 0x1e30 <__vector_26+0x3c>
    1e2e:	aa c0       	rjmp	.+340    	; 0x1f84 <__vector_26+0x190>
    1e30:	28 f5       	brcc	.+74     	; 0x1e7c <__vector_26+0x88>
    1e32:	80 31       	cpi	r24, 0x10	; 16
    1e34:	09 f4       	brne	.+2      	; 0x1e38 <__vector_26+0x44>
    1e36:	9e c0       	rjmp	.+316    	; 0x1f74 <__vector_26+0x180>
    1e38:	c8 f4       	brcc	.+50     	; 0x1e6c <__vector_26+0x78>
    1e3a:	88 23       	and	r24, r24
    1e3c:	09 f4       	brne	.+2      	; 0x1e40 <__vector_26+0x4c>
    1e3e:	fb c0       	rjmp	.+502    	; 0x2036 <__vector_26+0x242>
    1e40:	88 30       	cpi	r24, 0x08	; 8
    1e42:	09 f4       	brne	.+2      	; 0x1e46 <__vector_26+0x52>
    1e44:	97 c0       	rjmp	.+302    	; 0x1f74 <__vector_26+0x180>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    1e46:	ff 91       	pop	r31
    1e48:	ef 91       	pop	r30
    1e4a:	bf 91       	pop	r27
    1e4c:	af 91       	pop	r26
    1e4e:	9f 91       	pop	r25
    1e50:	8f 91       	pop	r24
    1e52:	7f 91       	pop	r23
    1e54:	6f 91       	pop	r22
    1e56:	5f 91       	pop	r21
    1e58:	4f 91       	pop	r20
    1e5a:	3f 91       	pop	r19
    1e5c:	2f 91       	pop	r18
    1e5e:	0f 90       	pop	r0
    1e60:	0b be       	out	0x3b, r0	; 59
    1e62:	0f 90       	pop	r0
    1e64:	0f be       	out	0x3f, r0	; 63
    1e66:	0f 90       	pop	r0
    1e68:	1f 90       	pop	r1
    1e6a:	18 95       	reti
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e6c:	88 31       	cpi	r24, 0x18	; 24
    1e6e:	09 f4       	brne	.+2      	; 0x1e72 <__vector_26+0x7e>
    1e70:	89 c0       	rjmp	.+274    	; 0x1f84 <__vector_26+0x190>
    1e72:	80 32       	cpi	r24, 0x20	; 32
    1e74:	41 f7       	brne	.-48     	; 0x1e46 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    1e76:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <twi_error>
    1e7a:	15 c0       	rjmp	.+42     	; 0x1ea6 <__vector_26+0xb2>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e7c:	80 34       	cpi	r24, 0x40	; 64
    1e7e:	09 f4       	brne	.+2      	; 0x1e82 <__vector_26+0x8e>
    1e80:	9e c0       	rjmp	.+316    	; 0x1fbe <__vector_26+0x1ca>
    1e82:	48 f4       	brcc	.+18     	; 0x1e96 <__vector_26+0xa2>
    1e84:	80 33       	cpi	r24, 0x30	; 48
    1e86:	b9 f3       	breq	.-18     	; 0x1e76 <__vector_26+0x82>
    1e88:	88 33       	cpi	r24, 0x38	; 56
    1e8a:	e9 f6       	brne	.-70     	; 0x1e46 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    1e8c:	80 93 65 05 	sts	0x0565, r24	; 0x800565 <twi_error>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
    1e90:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <twi_releaseBus>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:442
      break;
    1e94:	d8 cf       	rjmp	.-80     	; 0x1e46 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1e96:	80 35       	cpi	r24, 0x50	; 80
    1e98:	09 f4       	brne	.+2      	; 0x1e9c <__vector_26+0xa8>
    1e9a:	85 c0       	rjmp	.+266    	; 0x1fa6 <__vector_26+0x1b2>
    1e9c:	88 35       	cpi	r24, 0x58	; 88
    1e9e:	09 f4       	brne	.+2      	; 0x1ea2 <__vector_26+0xae>
    1ea0:	96 c0       	rjmp	.+300    	; 0x1fce <__vector_26+0x1da>
    1ea2:	88 34       	cpi	r24, 0x48	; 72
    1ea4:	81 f6       	brne	.-96     	; 0x1e46 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    1ea6:	0e 94 ea 0e 	call	0x1dd4	; 0x1dd4 <twi_stop>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
    1eaa:	cd cf       	rjmp	.-102    	; 0x1e46 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1eac:	88 39       	cpi	r24, 0x98	; 152
    1eae:	09 f4       	brne	.+2      	; 0x1eb2 <__vector_26+0xbe>
    1eb0:	8c c0       	rjmp	.+280    	; 0x1fca <__vector_26+0x1d6>
    1eb2:	38 f5       	brcc	.+78     	; 0x1f02 <__vector_26+0x10e>
    1eb4:	88 37       	cpi	r24, 0x78	; 120
    1eb6:	29 f0       	breq	.+10     	; 0x1ec2 <__vector_26+0xce>
    1eb8:	50 f4       	brcc	.+20     	; 0x1ece <__vector_26+0xda>
    1eba:	88 36       	cpi	r24, 0x68	; 104
    1ebc:	11 f0       	breq	.+4      	; 0x1ec2 <__vector_26+0xce>
    1ebe:	80 37       	cpi	r24, 0x70	; 112
    1ec0:	11 f6       	brne	.-124    	; 0x1e46 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    1ec2:	83 e0       	ldi	r24, 0x03	; 3
    1ec4:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <twi_state>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    1ec8:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <twi_rxBufferIndex>
    1ecc:	57 c0       	rjmp	.+174    	; 0x1f7c <__vector_26+0x188>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1ece:	88 38       	cpi	r24, 0x88	; 136
    1ed0:	09 f4       	brne	.+2      	; 0x1ed4 <__vector_26+0xe0>
    1ed2:	7b c0       	rjmp	.+246    	; 0x1fca <__vector_26+0x1d6>
    1ed4:	80 39       	cpi	r24, 0x90	; 144
    1ed6:	19 f0       	breq	.+6      	; 0x1ede <__vector_26+0xea>
    1ed8:	80 38       	cpi	r24, 0x80	; 128
    1eda:	09 f0       	breq	.+2      	; 0x1ede <__vector_26+0xea>
    1edc:	b4 cf       	rjmp	.-152    	; 0x1e46 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    1ede:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <twi_rxBufferIndex>
    1ee2:	80 32       	cpi	r24, 0x20	; 32
    1ee4:	08 f0       	brcs	.+2      	; 0x1ee8 <__vector_26+0xf4>
    1ee6:	71 c0       	rjmp	.+226    	; 0x1fca <__vector_26+0x1d6>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    1ee8:	e0 91 66 05 	lds	r30, 0x0566	; 0x800566 <twi_rxBufferIndex>
    1eec:	81 e0       	ldi	r24, 0x01	; 1
    1eee:	8e 0f       	add	r24, r30
    1ef0:	80 93 66 05 	sts	0x0566, r24	; 0x800566 <twi_rxBufferIndex>
    1ef4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1ef8:	f0 e0       	ldi	r31, 0x00	; 0
    1efa:	e9 59       	subi	r30, 0x99	; 153
    1efc:	fa 4f       	sbci	r31, 0xFA	; 250
    1efe:	80 83       	st	Z, r24
    1f00:	3d c0       	rjmp	.+122    	; 0x1f7c <__vector_26+0x188>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1f02:	80 3b       	cpi	r24, 0xB0	; 176
    1f04:	39 f0       	breq	.+14     	; 0x1f14 <__vector_26+0x120>
    1f06:	e0 f4       	brcc	.+56     	; 0x1f40 <__vector_26+0x14c>
    1f08:	80 3a       	cpi	r24, 0xA0	; 160
    1f0a:	09 f4       	brne	.+2      	; 0x1f0e <__vector_26+0x11a>
    1f0c:	79 c0       	rjmp	.+242    	; 0x2000 <__vector_26+0x20c>
    1f0e:	88 3a       	cpi	r24, 0xA8	; 168
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <__vector_26+0x120>
    1f12:	99 cf       	rjmp	.-206    	; 0x1e46 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    1f14:	84 e0       	ldi	r24, 0x04	; 4
    1f16:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <twi_state>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    1f1a:	10 92 88 05 	sts	0x0588, r1	; 0x800588 <twi_txBufferIndex>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    1f1e:	10 92 87 05 	sts	0x0587, r1	; 0x800587 <twi_txBufferLength>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    1f22:	e0 91 cd 05 	lds	r30, 0x05CD	; 0x8005cd <twi_onSlaveTransmit>
    1f26:	f0 91 ce 05 	lds	r31, 0x05CE	; 0x8005ce <twi_onSlaveTransmit+0x1>
    1f2a:	09 95       	icall
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    1f2c:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <twi_txBufferLength>
    1f30:	81 11       	cpse	r24, r1
    1f32:	0f c0       	rjmp	.+30     	; 0x1f52 <__vector_26+0x15e>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    1f34:	81 e0       	ldi	r24, 0x01	; 1
    1f36:	80 93 87 05 	sts	0x0587, r24	; 0x800587 <twi_txBufferLength>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    1f3a:	10 92 89 05 	sts	0x0589, r1	; 0x800589 <twi_txBuffer>
    1f3e:	09 c0       	rjmp	.+18     	; 0x1f52 <__vector_26+0x15e>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    1f40:	80 3c       	cpi	r24, 0xC0	; 192
    1f42:	09 f4       	brne	.+2      	; 0x1f46 <__vector_26+0x152>
    1f44:	76 c0       	rjmp	.+236    	; 0x2032 <__vector_26+0x23e>
    1f46:	88 3c       	cpi	r24, 0xC8	; 200
    1f48:	09 f4       	brne	.+2      	; 0x1f4c <__vector_26+0x158>
    1f4a:	73 c0       	rjmp	.+230    	; 0x2032 <__vector_26+0x23e>
    1f4c:	88 3b       	cpi	r24, 0xB8	; 184
    1f4e:	09 f0       	breq	.+2      	; 0x1f52 <__vector_26+0x15e>
    1f50:	7a cf       	rjmp	.-268    	; 0x1e46 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    1f52:	e0 91 88 05 	lds	r30, 0x0588	; 0x800588 <twi_txBufferIndex>
    1f56:	81 e0       	ldi	r24, 0x01	; 1
    1f58:	8e 0f       	add	r24, r30
    1f5a:	80 93 88 05 	sts	0x0588, r24	; 0x800588 <twi_txBufferIndex>
    1f5e:	f0 e0       	ldi	r31, 0x00	; 0
    1f60:	e7 57       	subi	r30, 0x77	; 119
    1f62:	fa 4f       	sbci	r31, 0xFA	; 250
    1f64:	80 81       	ld	r24, Z
    1f66:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1f6a:	90 91 88 05 	lds	r25, 0x0588	; 0x800588 <twi_txBufferIndex>
    1f6e:	80 91 87 05 	lds	r24, 0x0587	; 0x800587 <twi_txBufferLength>
    1f72:	29 c0       	rjmp	.+82     	; 0x1fc6 <__vector_26+0x1d2>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    1f74:	80 91 d1 05 	lds	r24, 0x05D1	; 0x8005d1 <twi_slarw>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1f78:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
twi_reply():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1f7c:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1f7e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f82:	61 cf       	rjmp	.-318    	; 0x1e46 <__vector_26+0x52>
__vector_26():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1f84:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <twi_masterBufferIndex>
    1f88:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <twi_masterBufferLength>
    1f8c:	98 17       	cp	r25, r24
    1f8e:	58 f5       	brcc	.+86     	; 0x1fe6 <__vector_26+0x1f2>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    1f90:	e0 91 aa 05 	lds	r30, 0x05AA	; 0x8005aa <twi_masterBufferIndex>
    1f94:	81 e0       	ldi	r24, 0x01	; 1
    1f96:	8e 0f       	add	r24, r30
    1f98:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <twi_masterBufferIndex>
    1f9c:	f0 e0       	ldi	r31, 0x00	; 0
    1f9e:	e5 55       	subi	r30, 0x55	; 85
    1fa0:	fa 4f       	sbci	r31, 0xFA	; 250
    1fa2:	80 81       	ld	r24, Z
    1fa4:	e9 cf       	rjmp	.-46     	; 0x1f78 <__vector_26+0x184>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1fa6:	e0 91 aa 05 	lds	r30, 0x05AA	; 0x8005aa <twi_masterBufferIndex>
    1faa:	81 e0       	ldi	r24, 0x01	; 1
    1fac:	8e 0f       	add	r24, r30
    1fae:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <twi_masterBufferIndex>
    1fb2:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1fb6:	f0 e0       	ldi	r31, 0x00	; 0
    1fb8:	e5 55       	subi	r30, 0x55	; 85
    1fba:	fa 4f       	sbci	r31, 0xFA	; 250
    1fbc:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    1fbe:	90 91 aa 05 	lds	r25, 0x05AA	; 0x8005aa <twi_masterBufferIndex>
    1fc2:	80 91 a9 05 	lds	r24, 0x05A9	; 0x8005a9 <twi_masterBufferLength>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    1fc6:	98 17       	cp	r25, r24
    1fc8:	c8 f2       	brcs	.-78     	; 0x1f7c <__vector_26+0x188>
twi_reply():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1fca:	85 e8       	ldi	r24, 0x85	; 133
    1fcc:	d8 cf       	rjmp	.-80     	; 0x1f7e <__vector_26+0x18a>
__vector_26():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    1fce:	e0 91 aa 05 	lds	r30, 0x05AA	; 0x8005aa <twi_masterBufferIndex>
    1fd2:	81 e0       	ldi	r24, 0x01	; 1
    1fd4:	8e 0f       	add	r24, r30
    1fd6:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <twi_masterBufferIndex>
    1fda:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1fde:	f0 e0       	ldi	r31, 0x00	; 0
    1fe0:	e5 55       	subi	r30, 0x55	; 85
    1fe2:	fa 4f       	sbci	r31, 0xFA	; 250
    1fe4:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    1fe6:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <twi_sendStop>
    1fea:	81 11       	cpse	r24, r1
    1fec:	5c cf       	rjmp	.-328    	; 0x1ea6 <__vector_26+0xb2>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	80 93 cf 05 	sts	0x05CF, r24	; 0x8005cf <twi_inRepStart>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    1ff4:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    1ff6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
__vector_26():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    1ffa:	10 92 d2 05 	sts	0x05D2, r1	; 0x8005d2 <twi_state>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:552
      break;
    1ffe:	23 cf       	rjmp	.-442    	; 0x1e46 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    2000:	0e 94 f4 0e 	call	0x1de8	; 0x1de8 <twi_releaseBus>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2004:	80 91 66 05 	lds	r24, 0x0566	; 0x800566 <twi_rxBufferIndex>
    2008:	80 32       	cpi	r24, 0x20	; 32
    200a:	30 f4       	brcc	.+12     	; 0x2018 <__vector_26+0x224>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    200c:	e0 91 66 05 	lds	r30, 0x0566	; 0x800566 <twi_rxBufferIndex>
    2010:	f0 e0       	ldi	r31, 0x00	; 0
    2012:	e9 59       	subi	r30, 0x99	; 153
    2014:	fa 4f       	sbci	r31, 0xFA	; 250
    2016:	10 82       	st	Z, r1
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2018:	60 91 66 05 	lds	r22, 0x0566	; 0x800566 <twi_rxBufferIndex>
    201c:	70 e0       	ldi	r23, 0x00	; 0
    201e:	e0 91 cb 05 	lds	r30, 0x05CB	; 0x8005cb <twi_onSlaveReceive>
    2022:	f0 91 cc 05 	lds	r31, 0x05CC	; 0x8005cc <twi_onSlaveReceive+0x1>
    2026:	87 e6       	ldi	r24, 0x67	; 103
    2028:	95 e0       	ldi	r25, 0x05	; 5
    202a:	09 95       	icall
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    202c:	10 92 66 05 	sts	0x0566, r1	; 0x800566 <twi_rxBufferIndex>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:510
      break;
    2030:	0a cf       	rjmp	.-492    	; 0x1e46 <__vector_26+0x52>
twi_reply():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2032:	85 ec       	ldi	r24, 0xC5	; 197
    2034:	e0 cf       	rjmp	.-64     	; 0x1ff6 <__vector_26+0x202>
__vector_26():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2036:	10 92 65 05 	sts	0x0565, r1	; 0x800565 <twi_error>
    203a:	35 cf       	rjmp	.-406    	; 0x1ea6 <__vector_26+0xb2>

0000203c <yield>:
__empty():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    203c:	08 95       	ret

0000203e <__vector_18>:
__vector_18():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227
  cli();
  m = timer0_millis;
  SREG = oldSREG;

  return m;
}
    203e:	1f 92       	push	r1
    2040:	0f 92       	push	r0
    2042:	0f b6       	in	r0, 0x3f	; 63
    2044:	0f 92       	push	r0
    2046:	11 24       	eor	r1, r1
    2048:	2f 93       	push	r18
    204a:	3f 93       	push	r19
    204c:	8f 93       	push	r24
    204e:	9f 93       	push	r25
    2050:	af 93       	push	r26
    2052:	bf 93       	push	r27
    2054:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <timer0_millis>
    2058:	90 91 d9 05 	lds	r25, 0x05D9	; 0x8005d9 <timer0_millis+0x1>
    205c:	a0 91 da 05 	lds	r26, 0x05DA	; 0x8005da <timer0_millis+0x2>
    2060:	b0 91 db 05 	lds	r27, 0x05DB	; 0x8005db <timer0_millis+0x3>
    2064:	30 91 d7 05 	lds	r19, 0x05D7	; 0x8005d7 <timer0_fract>
    2068:	23 e0       	ldi	r18, 0x03	; 3
    206a:	23 0f       	add	r18, r19
    206c:	2d 37       	cpi	r18, 0x7D	; 125
    206e:	68 f1       	brcs	.+90     	; 0x20ca <__vector_18+0x8c>
    2070:	26 e8       	ldi	r18, 0x86	; 134
    2072:	23 0f       	add	r18, r19
    2074:	02 96       	adiw	r24, 0x02	; 2
    2076:	a1 1d       	adc	r26, r1
    2078:	b1 1d       	adc	r27, r1
    207a:	20 93 d7 05 	sts	0x05D7, r18	; 0x8005d7 <timer0_fract>
    207e:	80 93 d8 05 	sts	0x05D8, r24	; 0x8005d8 <timer0_millis>
    2082:	90 93 d9 05 	sts	0x05D9, r25	; 0x8005d9 <timer0_millis+0x1>
    2086:	a0 93 da 05 	sts	0x05DA, r26	; 0x8005da <timer0_millis+0x2>
    208a:	b0 93 db 05 	sts	0x05DB, r27	; 0x8005db <timer0_millis+0x3>
    208e:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <timer0_overflow_count>
    2092:	90 91 d4 05 	lds	r25, 0x05D4	; 0x8005d4 <timer0_overflow_count+0x1>
    2096:	a0 91 d5 05 	lds	r26, 0x05D5	; 0x8005d5 <timer0_overflow_count+0x2>
    209a:	b0 91 d6 05 	lds	r27, 0x05D6	; 0x8005d6 <timer0_overflow_count+0x3>
    209e:	01 96       	adiw	r24, 0x01	; 1
    20a0:	a1 1d       	adc	r26, r1
    20a2:	b1 1d       	adc	r27, r1
    20a4:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <timer0_overflow_count>
    20a8:	90 93 d4 05 	sts	0x05D4, r25	; 0x8005d4 <timer0_overflow_count+0x1>
    20ac:	a0 93 d5 05 	sts	0x05D5, r26	; 0x8005d5 <timer0_overflow_count+0x2>
    20b0:	b0 93 d6 05 	sts	0x05D6, r27	; 0x8005d6 <timer0_overflow_count+0x3>
    20b4:	bf 91       	pop	r27
    20b6:	af 91       	pop	r26
    20b8:	9f 91       	pop	r25
    20ba:	8f 91       	pop	r24
    20bc:	3f 91       	pop	r19
    20be:	2f 91       	pop	r18
    20c0:	0f 90       	pop	r0
    20c2:	0f be       	out	0x3f, r0	; 63
    20c4:	0f 90       	pop	r0
    20c6:	1f 90       	pop	r1
    20c8:	18 95       	reti
    20ca:	01 96       	adiw	r24, 0x01	; 1
    20cc:	a1 1d       	adc	r26, r1
    20ce:	b1 1d       	adc	r27, r1
    20d0:	d4 cf       	rjmp	.-88     	; 0x207a <__vector_18+0x3c>

000020d2 <micros>:
micros():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    20d2:	3f b7       	in	r19, 0x3f	; 63
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    20d4:	f8 94       	cli
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    20d6:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <timer0_overflow_count>
    20da:	90 91 d4 05 	lds	r25, 0x05D4	; 0x8005d4 <timer0_overflow_count+0x1>
    20de:	a0 91 d5 05 	lds	r26, 0x05D5	; 0x8005d5 <timer0_overflow_count+0x2>
    20e2:	b0 91 d6 05 	lds	r27, 0x05D6	; 0x8005d6 <timer0_overflow_count+0x3>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    20e6:	26 b5       	in	r18, 0x26	; 38
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    20e8:	a8 9b       	sbis	0x15, 0	; 21
    20ea:	05 c0       	rjmp	.+10     	; 0x20f6 <micros+0x24>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    20ec:	2f 3f       	cpi	r18, 0xFF	; 255
    20ee:	19 f0       	breq	.+6      	; 0x20f6 <micros+0x24>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    20f0:	01 96       	adiw	r24, 0x01	; 1
    20f2:	a1 1d       	adc	r26, r1
    20f4:	b1 1d       	adc	r27, r1
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    20f6:	3f bf       	out	0x3f, r19	; 63
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    20f8:	ba 2f       	mov	r27, r26
    20fa:	a9 2f       	mov	r26, r25
    20fc:	98 2f       	mov	r25, r24
    20fe:	88 27       	eor	r24, r24
    2100:	bc 01       	movw	r22, r24
    2102:	cd 01       	movw	r24, r26
    2104:	62 0f       	add	r22, r18
    2106:	71 1d       	adc	r23, r1
    2108:	81 1d       	adc	r24, r1
    210a:	91 1d       	adc	r25, r1
    210c:	42 e0       	ldi	r20, 0x02	; 2
    210e:	66 0f       	add	r22, r22
    2110:	77 1f       	adc	r23, r23
    2112:	88 1f       	adc	r24, r24
    2114:	99 1f       	adc	r25, r25
    2116:	4a 95       	dec	r20
    2118:	d1 f7       	brne	.-12     	; 0x210e <micros+0x3c>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    211a:	08 95       	ret

0000211c <delay>:
delay():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    211c:	8f 92       	push	r8
    211e:	9f 92       	push	r9
    2120:	af 92       	push	r10
    2122:	bf 92       	push	r11
    2124:	cf 92       	push	r12
    2126:	df 92       	push	r13
    2128:	ef 92       	push	r14
    212a:	ff 92       	push	r15
    212c:	6b 01       	movw	r12, r22
    212e:	7c 01       	movw	r14, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    2130:	0e 94 69 10 	call	0x20d2	; 0x20d2 <micros>
    2134:	4b 01       	movw	r8, r22
    2136:	5c 01       	movw	r10, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    2138:	c1 14       	cp	r12, r1
    213a:	d1 04       	cpc	r13, r1
    213c:	e1 04       	cpc	r14, r1
    213e:	f1 04       	cpc	r15, r1
    2140:	e9 f0       	breq	.+58     	; 0x217c <delay+0x60>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    2142:	0e 94 1e 10 	call	0x203c	; 0x203c <yield>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    2146:	0e 94 69 10 	call	0x20d2	; 0x20d2 <micros>
    214a:	68 19       	sub	r22, r8
    214c:	79 09       	sbc	r23, r9
    214e:	8a 09       	sbc	r24, r10
    2150:	9b 09       	sbc	r25, r11
    2152:	68 3e       	cpi	r22, 0xE8	; 232
    2154:	73 40       	sbci	r23, 0x03	; 3
    2156:	81 05       	cpc	r24, r1
    2158:	91 05       	cpc	r25, r1
    215a:	70 f3       	brcs	.-36     	; 0x2138 <delay+0x1c>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    215c:	21 e0       	ldi	r18, 0x01	; 1
    215e:	c2 1a       	sub	r12, r18
    2160:	d1 08       	sbc	r13, r1
    2162:	e1 08       	sbc	r14, r1
    2164:	f1 08       	sbc	r15, r1
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    2166:	88 ee       	ldi	r24, 0xE8	; 232
    2168:	88 0e       	add	r8, r24
    216a:	83 e0       	ldi	r24, 0x03	; 3
    216c:	98 1e       	adc	r9, r24
    216e:	a1 1c       	adc	r10, r1
    2170:	b1 1c       	adc	r11, r1
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    2172:	c1 14       	cp	r12, r1
    2174:	d1 04       	cpc	r13, r1
    2176:	e1 04       	cpc	r14, r1
    2178:	f1 04       	cpc	r15, r1
    217a:	29 f7       	brne	.-54     	; 0x2146 <delay+0x2a>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    217c:	ff 90       	pop	r15
    217e:	ef 90       	pop	r14
    2180:	df 90       	pop	r13
    2182:	cf 90       	pop	r12
    2184:	bf 90       	pop	r11
    2186:	af 90       	pop	r10
    2188:	9f 90       	pop	r9
    218a:	8f 90       	pop	r8
    218c:	08 95       	ret

0000218e <delayMicroseconds>:
delayMicroseconds():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    218e:	82 30       	cpi	r24, 0x02	; 2
    2190:	91 05       	cpc	r25, r1
    2192:	38 f0       	brcs	.+14     	; 0x21a2 <delayMicroseconds+0x14>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    2194:	88 0f       	add	r24, r24
    2196:	99 1f       	adc	r25, r25
    2198:	88 0f       	add	r24, r24
    219a:	99 1f       	adc	r25, r25
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    219c:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    219e:	01 97       	sbiw	r24, 0x01	; 1
    21a0:	f1 f7       	brne	.-4      	; 0x219e <delayMicroseconds+0x10>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    21a2:	08 95       	ret

000021a4 <init>:
init():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    21a4:	78 94       	sei
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    21a6:	84 b5       	in	r24, 0x24	; 36
    21a8:	83 60       	ori	r24, 0x03	; 3
    21aa:	84 bd       	out	0x24, r24	; 36
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    21ac:	85 b5       	in	r24, 0x25	; 37
    21ae:	83 60       	ori	r24, 0x03	; 3
    21b0:	85 bd       	out	0x25, r24	; 37
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    21b2:	ee e6       	ldi	r30, 0x6E	; 110
    21b4:	f0 e0       	ldi	r31, 0x00	; 0
    21b6:	80 81       	ld	r24, Z
    21b8:	81 60       	ori	r24, 0x01	; 1
    21ba:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    21bc:	e1 e8       	ldi	r30, 0x81	; 129
    21be:	f0 e0       	ldi	r31, 0x00	; 0
    21c0:	82 e0       	ldi	r24, 0x02	; 2
    21c2:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    21c4:	80 81       	ld	r24, Z
    21c6:	81 60       	ori	r24, 0x01	; 1
    21c8:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    21ca:	e0 e8       	ldi	r30, 0x80	; 128
    21cc:	f0 e0       	ldi	r31, 0x00	; 0
    21ce:	80 81       	ld	r24, Z
    21d0:	81 60       	ori	r24, 0x01	; 1
    21d2:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    21d4:	e1 eb       	ldi	r30, 0xB1	; 177
    21d6:	f0 e0       	ldi	r31, 0x00	; 0
    21d8:	80 81       	ld	r24, Z
    21da:	84 60       	ori	r24, 0x04	; 4
    21dc:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    21de:	e0 eb       	ldi	r30, 0xB0	; 176
    21e0:	f0 e0       	ldi	r31, 0x00	; 0
    21e2:	80 81       	ld	r24, Z
    21e4:	81 60       	ori	r24, 0x01	; 1
    21e6:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    21e8:	e1 e9       	ldi	r30, 0x91	; 145
    21ea:	f0 e0       	ldi	r31, 0x00	; 0
    21ec:	80 81       	ld	r24, Z
    21ee:	83 60       	ori	r24, 0x03	; 3
    21f0:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    21f2:	e0 e9       	ldi	r30, 0x90	; 144
    21f4:	f0 e0       	ldi	r31, 0x00	; 0
    21f6:	80 81       	ld	r24, Z
    21f8:	81 60       	ori	r24, 0x01	; 1
    21fa:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    21fc:	87 e8       	ldi	r24, 0x87	; 135
    21fe:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    2202:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    2206:	08 95       	ret

00002208 <turnOffPWM>:
turnOffPWM():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    2208:	82 50       	subi	r24, 0x02	; 2
    220a:	8a 30       	cpi	r24, 0x0A	; 10
    220c:	88 f5       	brcc	.+98     	; 0x2270 <turnOffPWM+0x68>
    220e:	e8 2f       	mov	r30, r24
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	e3 5f       	subi	r30, 0xF3	; 243
    2214:	fe 4e       	sbci	r31, 0xEE	; 238
    2216:	0c 94 86 18 	jmp	0x310c	; 0x310c <__tablejump2__>
    221a:	35 11       	cpse	r19, r5
    221c:	39 11       	cpse	r19, r9
    221e:	17 11       	cpse	r17, r7
    2220:	1d 11       	cpse	r17, r13
    2222:	38 11       	cpse	r19, r8
    2224:	38 11       	cpse	r19, r8
    2226:	21 11       	cpse	r18, r1
    2228:	27 11       	cpse	r18, r7
    222a:	2b 11       	cpse	r18, r11
    222c:	31 11       	cpse	r19, r1
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    222e:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2232:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2234:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    2238:	08 95       	ret
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    223a:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    223e:	8f 7d       	andi	r24, 0xDF	; 223
    2240:	f9 cf       	rjmp	.-14     	; 0x2234 <turnOffPWM+0x2c>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    2242:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2246:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2248:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    224c:	08 95       	ret
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    224e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2252:	8f 7d       	andi	r24, 0xDF	; 223
    2254:	f9 cf       	rjmp	.-14     	; 0x2248 <turnOffPWM+0x40>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    2256:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    225a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    225c:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    2260:	08 95       	ret
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    2262:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2266:	8f 7d       	andi	r24, 0xDF	; 223
    2268:	f9 cf       	rjmp	.-14     	; 0x225c <turnOffPWM+0x54>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    226a:	84 b5       	in	r24, 0x24	; 36
    226c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    226e:	84 bd       	out	0x24, r24	; 36
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    2270:	08 95       	ret
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2272:	84 b5       	in	r24, 0x24	; 36
    2274:	8f 7d       	andi	r24, 0xDF	; 223
    2276:	fb cf       	rjmp	.-10     	; 0x226e <turnOffPWM+0x66>

00002278 <pinMode>:
pinMode():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2278:	cf 93       	push	r28
    227a:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	fc 01       	movw	r30, r24
    2280:	ee 54       	subi	r30, 0x4E	; 78
    2282:	ff 4f       	sbci	r31, 0xFF	; 255
    2284:	24 91       	lpm	r18, Z
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    2286:	8e 52       	subi	r24, 0x2E	; 46
    2288:	9f 4f       	sbci	r25, 0xFF	; 255
    228a:	fc 01       	movw	r30, r24
    228c:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    228e:	88 23       	and	r24, r24
    2290:	c9 f0       	breq	.+50     	; 0x22c4 <pinMode+0x4c>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    2292:	90 e0       	ldi	r25, 0x00	; 0
    2294:	88 0f       	add	r24, r24
    2296:	99 1f       	adc	r25, r25
    2298:	fc 01       	movw	r30, r24
    229a:	ea 5f       	subi	r30, 0xFA	; 250
    229c:	fe 4f       	sbci	r31, 0xFE	; 254
    229e:	a5 91       	lpm	r26, Z+
    22a0:	b4 91       	lpm	r27, Z
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    22a2:	fc 01       	movw	r30, r24
    22a4:	e4 50       	subi	r30, 0x04	; 4
    22a6:	ff 4f       	sbci	r31, 0xFF	; 255
    22a8:	c5 91       	lpm	r28, Z+
    22aa:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    22ac:	61 11       	cpse	r22, r1
    22ae:	0d c0       	rjmp	.+26     	; 0x22ca <pinMode+0x52>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    22b0:	9f b7       	in	r25, 0x3f	; 63
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    22b2:	f8 94       	cli
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    22b4:	8c 91       	ld	r24, X
    22b6:	20 95       	com	r18
    22b8:	82 23       	and	r24, r18
    22ba:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    22bc:	88 81       	ld	r24, Y
    22be:	28 23       	and	r18, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    22c0:	28 83       	st	Y, r18
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    22c2:	9f bf       	out	0x3f, r25	; 63
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    22c4:	df 91       	pop	r29
    22c6:	cf 91       	pop	r28
    22c8:	08 95       	ret
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    22ca:	62 30       	cpi	r22, 0x02	; 2
    22cc:	51 f4       	brne	.+20     	; 0x22e2 <pinMode+0x6a>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    22ce:	9f b7       	in	r25, 0x3f	; 63
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    22d0:	f8 94       	cli
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    22d2:	3c 91       	ld	r19, X
    22d4:	82 2f       	mov	r24, r18
    22d6:	80 95       	com	r24
    22d8:	83 23       	and	r24, r19
    22da:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    22dc:	e8 81       	ld	r30, Y
    22de:	2e 2b       	or	r18, r30
    22e0:	ef cf       	rjmp	.-34     	; 0x22c0 <pinMode+0x48>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    22e2:	8f b7       	in	r24, 0x3f	; 63
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    22e4:	f8 94       	cli
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    22e6:	ec 91       	ld	r30, X
    22e8:	2e 2b       	or	r18, r30
    22ea:	2c 93       	st	X, r18
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    22ec:	8f bf       	out	0x3f, r24	; 63
    22ee:	ea cf       	rjmp	.-44     	; 0x22c4 <pinMode+0x4c>

000022f0 <digitalWrite>:
digitalWrite():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    22f0:	1f 93       	push	r17
    22f2:	cf 93       	push	r28
    22f4:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    22f6:	28 2f       	mov	r18, r24
    22f8:	30 e0       	ldi	r19, 0x00	; 0
    22fa:	f9 01       	movw	r30, r18
    22fc:	ee 56       	subi	r30, 0x6E	; 110
    22fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2300:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    2302:	f9 01       	movw	r30, r18
    2304:	ee 54       	subi	r30, 0x4E	; 78
    2306:	ff 4f       	sbci	r31, 0xFF	; 255
    2308:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    230a:	f9 01       	movw	r30, r18
    230c:	ee 52       	subi	r30, 0x2E	; 46
    230e:	ff 4f       	sbci	r31, 0xFF	; 255
    2310:	c4 91       	lpm	r28, Z
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    2312:	cc 23       	and	r28, r28
    2314:	a9 f0       	breq	.+42     	; 0x2340 <digitalWrite+0x50>
    2316:	16 2f       	mov	r17, r22
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2318:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    231a:	0e 94 04 11 	call	0x2208	; 0x2208 <turnOffPWM>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    231e:	ec 2f       	mov	r30, r28
    2320:	f0 e0       	ldi	r31, 0x00	; 0
    2322:	ee 0f       	add	r30, r30
    2324:	ff 1f       	adc	r31, r31
    2326:	e4 50       	subi	r30, 0x04	; 4
    2328:	ff 4f       	sbci	r31, 0xFF	; 255
    232a:	a5 91       	lpm	r26, Z+
    232c:	b4 91       	lpm	r27, Z
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    232e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    2330:	f8 94       	cli
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    2332:	ec 91       	ld	r30, X
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    2334:	11 11       	cpse	r17, r1
    2336:	08 c0       	rjmp	.+16     	; 0x2348 <digitalWrite+0x58>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    2338:	d0 95       	com	r29
    233a:	de 23       	and	r29, r30
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    233c:	dc 93       	st	X, r29
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    233e:	8f bf       	out	0x3f, r24	; 63
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    2340:	df 91       	pop	r29
    2342:	cf 91       	pop	r28
    2344:	1f 91       	pop	r17
    2346:	08 95       	ret
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    2348:	de 2b       	or	r29, r30
    234a:	f8 cf       	rjmp	.-16     	; 0x233c <digitalWrite+0x4c>

0000234c <digitalRead>:
digitalRead():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    234c:	cf 93       	push	r28
    234e:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    2350:	28 2f       	mov	r18, r24
    2352:	30 e0       	ldi	r19, 0x00	; 0
    2354:	f9 01       	movw	r30, r18
    2356:	ee 56       	subi	r30, 0x6E	; 110
    2358:	ff 4f       	sbci	r31, 0xFF	; 255
    235a:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    235c:	f9 01       	movw	r30, r18
    235e:	ee 54       	subi	r30, 0x4E	; 78
    2360:	ff 4f       	sbci	r31, 0xFF	; 255
    2362:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    2364:	f9 01       	movw	r30, r18
    2366:	ee 52       	subi	r30, 0x2E	; 46
    2368:	ff 4f       	sbci	r31, 0xFF	; 255
    236a:	c4 91       	lpm	r28, Z
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    236c:	cc 23       	and	r28, r28
    236e:	a1 f0       	breq	.+40     	; 0x2398 <digitalRead+0x4c>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2370:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    2372:	0e 94 04 11 	call	0x2208	; 0x2208 <turnOffPWM>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    2376:	ec 2f       	mov	r30, r28
    2378:	f0 e0       	ldi	r31, 0x00	; 0
    237a:	ee 0f       	add	r30, r30
    237c:	ff 1f       	adc	r31, r31
    237e:	ee 50       	subi	r30, 0x0E	; 14
    2380:	ff 4f       	sbci	r31, 0xFF	; 255
    2382:	a5 91       	lpm	r26, Z+
    2384:	b4 91       	lpm	r27, Z
    2386:	ec 91       	ld	r30, X
    2388:	ed 23       	and	r30, r29
    238a:	81 e0       	ldi	r24, 0x01	; 1
    238c:	90 e0       	ldi	r25, 0x00	; 0
    238e:	09 f4       	brne	.+2      	; 0x2392 <digitalRead+0x46>
    2390:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    2392:	df 91       	pop	r29
    2394:	cf 91       	pop	r28
    2396:	08 95       	ret
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    2398:	80 e0       	ldi	r24, 0x00	; 0
    239a:	90 e0       	ldi	r25, 0x00	; 0
    239c:	fa cf       	rjmp	.-12     	; 0x2392 <digitalRead+0x46>

0000239e <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    239e:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    23a0:	91 8d       	ldd	r25, Z+25	; 0x19
    23a2:	22 8d       	ldd	r18, Z+26	; 0x1a
    23a4:	89 2f       	mov	r24, r25
    23a6:	90 e0       	ldi	r25, 0x00	; 0
    23a8:	80 5c       	subi	r24, 0xC0	; 192
    23aa:	9f 4f       	sbci	r25, 0xFF	; 255
    23ac:	82 1b       	sub	r24, r18
    23ae:	91 09       	sbc	r25, r1
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    23b0:	8f 73       	andi	r24, 0x3F	; 63
    23b2:	99 27       	eor	r25, r25
    23b4:	08 95       	ret

000023b6 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    23b6:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    23b8:	91 8d       	ldd	r25, Z+25	; 0x19
    23ba:	82 8d       	ldd	r24, Z+26	; 0x1a
    23bc:	98 17       	cp	r25, r24
    23be:	31 f0       	breq	.+12     	; 0x23cc <HardwareSerial::peek()+0x16>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    23c0:	82 8d       	ldd	r24, Z+26	; 0x1a
    23c2:	e8 0f       	add	r30, r24
    23c4:	f1 1d       	adc	r31, r1
    23c6:	85 8d       	ldd	r24, Z+29	; 0x1d
    23c8:	90 e0       	ldi	r25, 0x00	; 0
    23ca:	08 95       	ret
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    23cc:	8f ef       	ldi	r24, 0xFF	; 255
    23ce:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    23d0:	08 95       	ret

000023d2 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    23d2:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    23d4:	91 8d       	ldd	r25, Z+25	; 0x19
    23d6:	82 8d       	ldd	r24, Z+26	; 0x1a
    23d8:	98 17       	cp	r25, r24
    23da:	61 f0       	breq	.+24     	; 0x23f4 <HardwareSerial::read()+0x22>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    23dc:	a2 8d       	ldd	r26, Z+26	; 0x1a
    23de:	ae 0f       	add	r26, r30
    23e0:	bf 2f       	mov	r27, r31
    23e2:	b1 1d       	adc	r27, r1
    23e4:	5d 96       	adiw	r26, 0x1d	; 29
    23e6:	8c 91       	ld	r24, X
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    23e8:	92 8d       	ldd	r25, Z+26	; 0x1a
    23ea:	9f 5f       	subi	r25, 0xFF	; 255
    23ec:	9f 73       	andi	r25, 0x3F	; 63
    23ee:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    23f0:	90 e0       	ldi	r25, 0x00	; 0
    23f2:	08 95       	ret
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    23f4:	8f ef       	ldi	r24, 0xFF	; 255
    23f6:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    23f8:	08 95       	ret

000023fa <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    23fa:	fc 01       	movw	r30, r24
    23fc:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    23fe:	44 8d       	ldd	r20, Z+28	; 0x1c
    2400:	25 2f       	mov	r18, r21
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	84 2f       	mov	r24, r20
    2406:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2408:	82 1b       	sub	r24, r18
    240a:	93 0b       	sbc	r25, r19
    240c:	54 17       	cp	r21, r20
    240e:	10 f0       	brcs	.+4      	; 0x2414 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    2410:	cf 96       	adiw	r24, 0x3f	; 63
    2412:	08 95       	ret
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    2414:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    2416:	08 95       	ret

00002418 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2418:	87 e6       	ldi	r24, 0x67	; 103
    241a:	93 e1       	ldi	r25, 0x13	; 19
    241c:	89 2b       	or	r24, r25
    241e:	49 f0       	breq	.+18     	; 0x2432 <serialEventRun()+0x1a>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    2420:	80 e0       	ldi	r24, 0x00	; 0
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	89 2b       	or	r24, r25
    2426:	29 f0       	breq	.+10     	; 0x2432 <serialEventRun()+0x1a>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    2428:	0e 94 67 13 	call	0x26ce	; 0x26ce <Serial0_available()>
    242c:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    242e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	90 e0       	ldi	r25, 0x00	; 0
    2436:	89 2b       	or	r24, r25
    2438:	49 f0       	breq	.+18     	; 0x244c <serialEventRun()+0x34>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    243a:	80 e0       	ldi	r24, 0x00	; 0
    243c:	90 e0       	ldi	r25, 0x00	; 0
    243e:	89 2b       	or	r24, r25
    2440:	29 f0       	breq	.+10     	; 0x244c <serialEventRun()+0x34>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    2442:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2446:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    2448:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    244c:	08 95       	ret

0000244e <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    244e:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2450:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2452:	a8 0f       	add	r26, r24
    2454:	b9 2f       	mov	r27, r25
    2456:	b1 1d       	adc	r27, r1
    2458:	a3 5a       	subi	r26, 0xA3	; 163
    245a:	bf 4f       	sbci	r27, 0xFF	; 255
    245c:	2c 91       	ld	r18, X
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    245e:	84 8d       	ldd	r24, Z+28	; 0x1c
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	01 96       	adiw	r24, 0x01	; 1
    2464:	8f 73       	andi	r24, 0x3F	; 63
    2466:	99 27       	eor	r25, r25
    2468:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    246a:	a6 89       	ldd	r26, Z+22	; 0x16
    246c:	b7 89       	ldd	r27, Z+23	; 0x17
    246e:	2c 93       	st	X, r18
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    2470:	a0 89       	ldd	r26, Z+16	; 0x10
    2472:	b1 89       	ldd	r27, Z+17	; 0x11
    2474:	8c 91       	ld	r24, X
    2476:	80 64       	ori	r24, 0x40	; 64
    2478:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    247a:	93 8d       	ldd	r25, Z+27	; 0x1b
    247c:	84 8d       	ldd	r24, Z+28	; 0x1c
    247e:	98 13       	cpse	r25, r24
    2480:	06 c0       	rjmp	.+12     	; 0x248e <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    2482:	02 88       	ldd	r0, Z+18	; 0x12
    2484:	f3 89       	ldd	r31, Z+19	; 0x13
    2486:	e0 2d       	mov	r30, r0
    2488:	80 81       	ld	r24, Z
    248a:	8f 7d       	andi	r24, 0xDF	; 223
    248c:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    248e:	08 95       	ret

00002490 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2490:	cf 93       	push	r28
    2492:	df 93       	push	r29
    2494:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2496:	88 8d       	ldd	r24, Y+24	; 0x18
    2498:	88 23       	and	r24, r24
    249a:	b9 f0       	breq	.+46     	; 0x24ca <HardwareSerial::flush()+0x3a>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    249c:	aa 89       	ldd	r26, Y+18	; 0x12
    249e:	bb 89       	ldd	r27, Y+19	; 0x13
    24a0:	e8 89       	ldd	r30, Y+16	; 0x10
    24a2:	f9 89       	ldd	r31, Y+17	; 0x11
    24a4:	8c 91       	ld	r24, X
    24a6:	85 fd       	sbrc	r24, 5
    24a8:	03 c0       	rjmp	.+6      	; 0x24b0 <HardwareSerial::flush()+0x20>
    24aa:	80 81       	ld	r24, Z
    24ac:	86 fd       	sbrc	r24, 6
    24ae:	0d c0       	rjmp	.+26     	; 0x24ca <HardwareSerial::flush()+0x3a>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    24b0:	0f b6       	in	r0, 0x3f	; 63
    24b2:	07 fc       	sbrc	r0, 7
    24b4:	f7 cf       	rjmp	.-18     	; 0x24a4 <HardwareSerial::flush()+0x14>
    24b6:	8c 91       	ld	r24, X
    24b8:	85 ff       	sbrs	r24, 5
    24ba:	f2 cf       	rjmp	.-28     	; 0x24a0 <HardwareSerial::flush()+0x10>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    24bc:	80 81       	ld	r24, Z
    24be:	85 ff       	sbrs	r24, 5
    24c0:	ed cf       	rjmp	.-38     	; 0x249c <HardwareSerial::flush()+0xc>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    24c2:	ce 01       	movw	r24, r28
    24c4:	0e 94 27 12 	call	0x244e	; 0x244e <HardwareSerial::_tx_udr_empty_irq()>
    24c8:	e9 cf       	rjmp	.-46     	; 0x249c <HardwareSerial::flush()+0xc>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    24ca:	df 91       	pop	r29
    24cc:	cf 91       	pop	r28
    24ce:	08 95       	ret

000024d0 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    24d0:	ef 92       	push	r14
    24d2:	ff 92       	push	r15
    24d4:	0f 93       	push	r16
    24d6:	1f 93       	push	r17
    24d8:	cf 93       	push	r28
    24da:	df 93       	push	r29
    24dc:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    24e2:	9b 8d       	ldd	r25, Y+27	; 0x1b
    24e4:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24e6:	98 13       	cpse	r25, r24
    24e8:	16 c0       	rjmp	.+44     	; 0x2516 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    24ea:	e8 89       	ldd	r30, Y+16	; 0x10
    24ec:	f9 89       	ldd	r31, Y+17	; 0x11
    24ee:	80 81       	ld	r24, Z
    24f0:	85 ff       	sbrs	r24, 5
    24f2:	11 c0       	rjmp	.+34     	; 0x2516 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    24f4:	ee 89       	ldd	r30, Y+22	; 0x16
    24f6:	ff 89       	ldd	r31, Y+23	; 0x17
    24f8:	60 83       	st	Z, r22
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    24fa:	e8 89       	ldd	r30, Y+16	; 0x10
    24fc:	f9 89       	ldd	r31, Y+17	; 0x11
    24fe:	80 81       	ld	r24, Z
    2500:	80 64       	ori	r24, 0x40	; 64
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    2502:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    2504:	81 e0       	ldi	r24, 0x01	; 1
    2506:	90 e0       	ldi	r25, 0x00	; 0
    2508:	df 91       	pop	r29
    250a:	cf 91       	pop	r28
    250c:	1f 91       	pop	r17
    250e:	0f 91       	pop	r16
    2510:	ff 90       	pop	r15
    2512:	ef 90       	pop	r14
    2514:	08 95       	ret
    2516:	f6 2e       	mov	r15, r22
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2518:	0b 8d       	ldd	r16, Y+27	; 0x1b
    251a:	10 e0       	ldi	r17, 0x00	; 0
    251c:	0f 5f       	subi	r16, 0xFF	; 255
    251e:	1f 4f       	sbci	r17, 0xFF	; 255
    2520:	0f 73       	andi	r16, 0x3F	; 63
    2522:	11 27       	eor	r17, r17
    2524:	e0 2e       	mov	r14, r16
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2526:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2528:	8e 11       	cpse	r24, r14
    252a:	0c c0       	rjmp	.+24     	; 0x2544 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    252c:	0f b6       	in	r0, 0x3f	; 63
    252e:	07 fc       	sbrc	r0, 7
    2530:	fa cf       	rjmp	.-12     	; 0x2526 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2532:	e8 89       	ldd	r30, Y+16	; 0x10
    2534:	f9 89       	ldd	r31, Y+17	; 0x11
    2536:	80 81       	ld	r24, Z
    2538:	85 ff       	sbrs	r24, 5
    253a:	f5 cf       	rjmp	.-22     	; 0x2526 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    253c:	ce 01       	movw	r24, r28
    253e:	0e 94 27 12 	call	0x244e	; 0x244e <HardwareSerial::_tx_udr_empty_irq()>
    2542:	f1 cf       	rjmp	.-30     	; 0x2526 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2544:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2546:	ec 0f       	add	r30, r28
    2548:	fd 2f       	mov	r31, r29
    254a:	f1 1d       	adc	r31, r1
    254c:	e3 5a       	subi	r30, 0xA3	; 163
    254e:	ff 4f       	sbci	r31, 0xFF	; 255
    2550:	f0 82       	st	Z, r15
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    2552:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    2554:	ea 89       	ldd	r30, Y+18	; 0x12
    2556:	fb 89       	ldd	r31, Y+19	; 0x13
    2558:	80 81       	ld	r24, Z
    255a:	80 62       	ori	r24, 0x20	; 32
    255c:	d2 cf       	rjmp	.-92     	; 0x2502 <HardwareSerial::write(unsigned char)+0x32>

0000255e <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    255e:	cf 92       	push	r12
    2560:	df 92       	push	r13
    2562:	ef 92       	push	r14
    2564:	ff 92       	push	r15
    2566:	1f 93       	push	r17
    2568:	cf 93       	push	r28
    256a:	df 93       	push	r29
    256c:	ec 01       	movw	r28, r24
    256e:	6a 01       	movw	r12, r20
    2570:	7b 01       	movw	r14, r22
    2572:	12 2f       	mov	r17, r18
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2574:	e8 89       	ldd	r30, Y+16	; 0x10
    2576:	f9 89       	ldd	r31, Y+17	; 0x11
    2578:	82 e0       	ldi	r24, 0x02	; 2
    257a:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    257c:	c1 14       	cp	r12, r1
    257e:	81 ee       	ldi	r24, 0xE1	; 225
    2580:	d8 06       	cpc	r13, r24
    2582:	e1 04       	cpc	r14, r1
    2584:	f1 04       	cpc	r15, r1
    2586:	a1 f0       	breq	.+40     	; 0x25b0 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2588:	60 e0       	ldi	r22, 0x00	; 0
    258a:	79 e0       	ldi	r23, 0x09	; 9
    258c:	8d e3       	ldi	r24, 0x3D	; 61
    258e:	90 e0       	ldi	r25, 0x00	; 0
    2590:	a7 01       	movw	r20, r14
    2592:	96 01       	movw	r18, r12
    2594:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
    2598:	21 50       	subi	r18, 0x01	; 1
    259a:	31 09       	sbc	r19, r1
    259c:	41 09       	sbc	r20, r1
    259e:	51 09       	sbc	r21, r1
    25a0:	56 95       	lsr	r21
    25a2:	47 95       	ror	r20
    25a4:	37 95       	ror	r19
    25a6:	27 95       	ror	r18
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    25a8:	21 15       	cp	r18, r1
    25aa:	80 e1       	ldi	r24, 0x10	; 16
    25ac:	38 07       	cpc	r19, r24
    25ae:	98 f0       	brcs	.+38     	; 0x25d6 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    25b0:	e8 89       	ldd	r30, Y+16	; 0x10
    25b2:	f9 89       	ldd	r31, Y+17	; 0x11
    25b4:	10 82       	st	Z, r1
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    25b6:	60 e8       	ldi	r22, 0x80	; 128
    25b8:	74 e8       	ldi	r23, 0x84	; 132
    25ba:	8e e1       	ldi	r24, 0x1E	; 30
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	a7 01       	movw	r20, r14
    25c0:	96 01       	movw	r18, r12
    25c2:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
    25c6:	21 50       	subi	r18, 0x01	; 1
    25c8:	31 09       	sbc	r19, r1
    25ca:	41 09       	sbc	r20, r1
    25cc:	51 09       	sbc	r21, r1
    25ce:	56 95       	lsr	r21
    25d0:	47 95       	ror	r20
    25d2:	37 95       	ror	r19
    25d4:	27 95       	ror	r18
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    25d6:	ec 85       	ldd	r30, Y+12	; 0x0c
    25d8:	fd 85       	ldd	r31, Y+13	; 0x0d
    25da:	30 83       	st	Z, r19
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    25dc:	ee 85       	ldd	r30, Y+14	; 0x0e
    25de:	ff 85       	ldd	r31, Y+15	; 0x0f
    25e0:	20 83       	st	Z, r18
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    25e2:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    25e4:	ec 89       	ldd	r30, Y+20	; 0x14
    25e6:	fd 89       	ldd	r31, Y+21	; 0x15
    25e8:	10 83       	st	Z, r17
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    25ea:	ea 89       	ldd	r30, Y+18	; 0x12
    25ec:	fb 89       	ldd	r31, Y+19	; 0x13
    25ee:	80 81       	ld	r24, Z
    25f0:	88 69       	ori	r24, 0x98	; 152
    25f2:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    25f4:	ea 89       	ldd	r30, Y+18	; 0x12
    25f6:	fb 89       	ldd	r31, Y+19	; 0x13
    25f8:	80 81       	ld	r24, Z
    25fa:	8f 7d       	andi	r24, 0xDF	; 223
    25fc:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    25fe:	df 91       	pop	r29
    2600:	cf 91       	pop	r28
    2602:	1f 91       	pop	r17
    2604:	ff 90       	pop	r15
    2606:	ef 90       	pop	r14
    2608:	df 90       	pop	r13
    260a:	cf 90       	pop	r12
    260c:	08 95       	ret

0000260e <__vector_20>:
__vector_20():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    260e:	1f 92       	push	r1
    2610:	0f 92       	push	r0
    2612:	0f b6       	in	r0, 0x3f	; 63
    2614:	0f 92       	push	r0
    2616:	11 24       	eor	r1, r1
    2618:	0b b6       	in	r0, 0x3b	; 59
    261a:	0f 92       	push	r0
    261c:	2f 93       	push	r18
    261e:	8f 93       	push	r24
    2620:	9f 93       	push	r25
    2622:	ef 93       	push	r30
    2624:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2626:	e0 91 ec 05 	lds	r30, 0x05EC	; 0x8005ec <Serial+0x10>
    262a:	f0 91 ed 05 	lds	r31, 0x05ED	; 0x8005ed <Serial+0x11>
    262e:	80 81       	ld	r24, Z
    2630:	e0 91 f2 05 	lds	r30, 0x05F2	; 0x8005f2 <Serial+0x16>
    2634:	f0 91 f3 05 	lds	r31, 0x05F3	; 0x8005f3 <Serial+0x17>
    2638:	82 fd       	sbrc	r24, 2
    263a:	1d c0       	rjmp	.+58     	; 0x2676 <__vector_20+0x68>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    263c:	90 81       	ld	r25, Z
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    263e:	80 91 f5 05 	lds	r24, 0x05F5	; 0x8005f5 <Serial+0x19>
    2642:	8f 5f       	subi	r24, 0xFF	; 255
    2644:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2646:	20 91 f6 05 	lds	r18, 0x05F6	; 0x8005f6 <Serial+0x1a>
    264a:	82 17       	cp	r24, r18
    264c:	41 f0       	breq	.+16     	; 0x265e <__vector_20+0x50>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    264e:	e0 91 f5 05 	lds	r30, 0x05F5	; 0x8005f5 <Serial+0x19>
    2652:	f0 e0       	ldi	r31, 0x00	; 0
    2654:	e4 52       	subi	r30, 0x24	; 36
    2656:	fa 4f       	sbci	r31, 0xFA	; 250
    2658:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    265a:	80 93 f5 05 	sts	0x05F5, r24	; 0x8005f5 <Serial+0x19>
__vector_20():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    265e:	ff 91       	pop	r31
    2660:	ef 91       	pop	r30
    2662:	9f 91       	pop	r25
    2664:	8f 91       	pop	r24
    2666:	2f 91       	pop	r18
    2668:	0f 90       	pop	r0
    266a:	0b be       	out	0x3b, r0	; 59
    266c:	0f 90       	pop	r0
    266e:	0f be       	out	0x3f, r0	; 63
    2670:	0f 90       	pop	r0
    2672:	1f 90       	pop	r1
    2674:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2676:	80 81       	ld	r24, Z
__vector_20():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    2678:	f2 cf       	rjmp	.-28     	; 0x265e <__vector_20+0x50>

0000267a <__vector_21>:
__vector_21():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    267a:	1f 92       	push	r1
    267c:	0f 92       	push	r0
    267e:	0f b6       	in	r0, 0x3f	; 63
    2680:	0f 92       	push	r0
    2682:	11 24       	eor	r1, r1
    2684:	0b b6       	in	r0, 0x3b	; 59
    2686:	0f 92       	push	r0
    2688:	2f 93       	push	r18
    268a:	3f 93       	push	r19
    268c:	4f 93       	push	r20
    268e:	5f 93       	push	r21
    2690:	6f 93       	push	r22
    2692:	7f 93       	push	r23
    2694:	8f 93       	push	r24
    2696:	9f 93       	push	r25
    2698:	af 93       	push	r26
    269a:	bf 93       	push	r27
    269c:	ef 93       	push	r30
    269e:	ff 93       	push	r31
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    26a0:	8c ed       	ldi	r24, 0xDC	; 220
    26a2:	95 e0       	ldi	r25, 0x05	; 5
    26a4:	0e 94 27 12 	call	0x244e	; 0x244e <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    26a8:	ff 91       	pop	r31
    26aa:	ef 91       	pop	r30
    26ac:	bf 91       	pop	r27
    26ae:	af 91       	pop	r26
    26b0:	9f 91       	pop	r25
    26b2:	8f 91       	pop	r24
    26b4:	7f 91       	pop	r23
    26b6:	6f 91       	pop	r22
    26b8:	5f 91       	pop	r21
    26ba:	4f 91       	pop	r20
    26bc:	3f 91       	pop	r19
    26be:	2f 91       	pop	r18
    26c0:	0f 90       	pop	r0
    26c2:	0b be       	out	0x3b, r0	; 59
    26c4:	0f 90       	pop	r0
    26c6:	0f be       	out	0x3f, r0	; 63
    26c8:	0f 90       	pop	r0
    26ca:	1f 90       	pop	r1
    26cc:	18 95       	reti

000026ce <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    26ce:	8c ed       	ldi	r24, 0xDC	; 220
    26d0:	95 e0       	ldi	r25, 0x05	; 5
    26d2:	0e 94 cf 11 	call	0x239e	; 0x239e <HardwareSerial::available()>
    26d6:	21 e0       	ldi	r18, 0x01	; 1
    26d8:	89 2b       	or	r24, r25
    26da:	09 f4       	brne	.+2      	; 0x26de <Serial0_available()+0x10>
    26dc:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    26de:	82 2f       	mov	r24, r18
    26e0:	08 95       	ret

000026e2 <_GLOBAL__sub_I___vector_20>:
_ZN5PrintC4Ev():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    26e2:	ec ed       	ldi	r30, 0xDC	; 220
    26e4:	f5 e0       	ldi	r31, 0x05	; 5
    26e6:	13 82       	std	Z+3, r1	; 0x03
    26e8:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
    26ea:	88 ee       	ldi	r24, 0xE8	; 232
    26ec:	93 e0       	ldi	r25, 0x03	; 3
    26ee:	a0 e0       	ldi	r26, 0x00	; 0
    26f0:	b0 e0       	ldi	r27, 0x00	; 0
    26f2:	84 83       	std	Z+4, r24	; 0x04
    26f4:	95 83       	std	Z+5, r25	; 0x05
    26f6:	a6 83       	std	Z+6, r26	; 0x06
    26f8:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    26fa:	80 e6       	ldi	r24, 0x60	; 96
    26fc:	94 e0       	ldi	r25, 0x04	; 4
    26fe:	91 83       	std	Z+1, r25	; 0x01
    2700:	80 83       	st	Z, r24
    2702:	85 ec       	ldi	r24, 0xC5	; 197
    2704:	90 e0       	ldi	r25, 0x00	; 0
    2706:	95 87       	std	Z+13, r25	; 0x0d
    2708:	84 87       	std	Z+12, r24	; 0x0c
    270a:	84 ec       	ldi	r24, 0xC4	; 196
    270c:	90 e0       	ldi	r25, 0x00	; 0
    270e:	97 87       	std	Z+15, r25	; 0x0f
    2710:	86 87       	std	Z+14, r24	; 0x0e
    2712:	80 ec       	ldi	r24, 0xC0	; 192
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	91 8b       	std	Z+17, r25	; 0x11
    2718:	80 8b       	std	Z+16, r24	; 0x10
    271a:	81 ec       	ldi	r24, 0xC1	; 193
    271c:	90 e0       	ldi	r25, 0x00	; 0
    271e:	93 8b       	std	Z+19, r25	; 0x13
    2720:	82 8b       	std	Z+18, r24	; 0x12
    2722:	82 ec       	ldi	r24, 0xC2	; 194
    2724:	90 e0       	ldi	r25, 0x00	; 0
    2726:	95 8b       	std	Z+21, r25	; 0x15
    2728:	84 8b       	std	Z+20, r24	; 0x14
    272a:	86 ec       	ldi	r24, 0xC6	; 198
    272c:	90 e0       	ldi	r25, 0x00	; 0
    272e:	97 8b       	std	Z+23, r25	; 0x17
    2730:	86 8b       	std	Z+22, r24	; 0x16
    2732:	11 8e       	std	Z+25, r1	; 0x19
    2734:	12 8e       	std	Z+26, r1	; 0x1a
    2736:	13 8e       	std	Z+27, r1	; 0x1b
    2738:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_20():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    273a:	08 95       	ret

0000273c <initVariant>:
initVariant():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    273c:	08 95       	ret

0000273e <main>:
main():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    273e:	0e 94 d2 10 	call	0x21a4	; 0x21a4 <init>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    2742:	0e 94 9e 13 	call	0x273c	; 0x273c <initVariant>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    2746:	0e 94 40 08 	call	0x1080	; 0x1080 <setup>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    274a:	cc e0       	ldi	r28, 0x0C	; 12
    274c:	d2 e1       	ldi	r29, 0x12	; 18
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    274e:	0e 94 2a 09 	call	0x1254	; 0x1254 <loop>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    2752:	20 97       	sbiw	r28, 0x00	; 0
    2754:	e1 f3       	breq	.-8      	; 0x274e <main+0x10>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    2756:	0e 94 0c 12 	call	0x2418	; 0x2418 <serialEventRun()>
    275a:	f9 cf       	rjmp	.-14     	; 0x274e <main+0x10>

0000275c <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:171
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    275c:	af 92       	push	r10
    275e:	bf 92       	push	r11
    2760:	cf 92       	push	r12
    2762:	df 92       	push	r13
    2764:	ef 92       	push	r14
    2766:	ff 92       	push	r15
    2768:	0f 93       	push	r16
    276a:	1f 93       	push	r17
    276c:	cf 93       	push	r28
    276e:	df 93       	push	r29
    2770:	6c 01       	movw	r12, r24
    2772:	7b 01       	movw	r14, r22
    2774:	8b 01       	movw	r16, r22
    2776:	04 0f       	add	r16, r20
    2778:	15 1f       	adc	r17, r21
    277a:	eb 01       	movw	r28, r22
    277c:	5e 01       	movw	r10, r28
    277e:	ae 18       	sub	r10, r14
    2780:	bf 08       	sbc	r11, r15
    2782:	c0 17       	cp	r28, r16
    2784:	d1 07       	cpc	r29, r17
    2786:	59 f0       	breq	.+22     	; 0x279e <Print::write(unsigned char const*, unsigned int)+0x42>
    2788:	69 91       	ld	r22, Y+
    278a:	d6 01       	movw	r26, r12
    278c:	ed 91       	ld	r30, X+
    278e:	fc 91       	ld	r31, X
    2790:	01 90       	ld	r0, Z+
    2792:	f0 81       	ld	r31, Z
    2794:	e0 2d       	mov	r30, r0
    2796:	c6 01       	movw	r24, r12
    2798:	09 95       	icall
    279a:	89 2b       	or	r24, r25
    279c:	79 f7       	brne	.-34     	; 0x277c <Print::write(unsigned char const*, unsigned int)+0x20>
    279e:	c5 01       	movw	r24, r10
    27a0:	df 91       	pop	r29
    27a2:	cf 91       	pop	r28
    27a4:	1f 91       	pop	r17
    27a6:	0f 91       	pop	r16
    27a8:	ff 90       	pop	r15
    27aa:	ef 90       	pop	r14
    27ac:	df 90       	pop	r13
    27ae:	cf 90       	pop	r12
    27b0:	bf 90       	pop	r11
    27b2:	af 90       	pop	r10
    27b4:	08 95       	ret

000027b6 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    27b6:	fb 01       	movw	r30, r22
    27b8:	01 90       	ld	r0, Z+
    27ba:	00 20       	and	r0, r0
    27bc:	e9 f7       	brne	.-6      	; 0x27b8 <Print::write(char const*) [clone .part.2]+0x2>
    27be:	31 97       	sbiw	r30, 0x01	; 1
    27c0:	af 01       	movw	r20, r30
    27c2:	46 1b       	sub	r20, r22
    27c4:	57 0b       	sbc	r21, r23
    27c6:	dc 01       	movw	r26, r24
    27c8:	ed 91       	ld	r30, X+
    27ca:	fc 91       	ld	r31, X
    27cc:	02 80       	ldd	r0, Z+2	; 0x02
    27ce:	f3 81       	ldd	r31, Z+3	; 0x03
    27d0:	e0 2d       	mov	r30, r0
    27d2:	09 94       	ijmp

000027d4 <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    27d4:	ef 92       	push	r14
    27d6:	ff 92       	push	r15
    27d8:	0f 93       	push	r16
    27da:	1f 93       	push	r17
    27dc:	cf 93       	push	r28
    27de:	df 93       	push	r29
    27e0:	8c 01       	movw	r16, r24
    27e2:	7b 01       	movw	r14, r22
    27e4:	d0 e0       	ldi	r29, 0x00	; 0
    27e6:	c0 e0       	ldi	r28, 0x00	; 0
    27e8:	f7 01       	movw	r30, r14
    27ea:	ec 0f       	add	r30, r28
    27ec:	fd 1f       	adc	r31, r29
    27ee:	64 91       	lpm	r22, Z
    27f0:	66 23       	and	r22, r22
    27f2:	61 f0       	breq	.+24     	; 0x280c <Print::print(__FlashStringHelper const*)+0x38>
    27f4:	d8 01       	movw	r26, r16
    27f6:	ed 91       	ld	r30, X+
    27f8:	fc 91       	ld	r31, X
    27fa:	01 90       	ld	r0, Z+
    27fc:	f0 81       	ld	r31, Z
    27fe:	e0 2d       	mov	r30, r0
    2800:	c8 01       	movw	r24, r16
    2802:	09 95       	icall
    2804:	89 2b       	or	r24, r25
    2806:	11 f0       	breq	.+4      	; 0x280c <Print::print(__FlashStringHelper const*)+0x38>
    2808:	21 96       	adiw	r28, 0x01	; 1
    280a:	ee cf       	rjmp	.-36     	; 0x27e8 <Print::print(__FlashStringHelper const*)+0x14>
    280c:	ce 01       	movw	r24, r28
    280e:	df 91       	pop	r29
    2810:	cf 91       	pop	r28
    2812:	1f 91       	pop	r17
    2814:	0f 91       	pop	r16
    2816:	ff 90       	pop	r15
    2818:	ef 90       	pop	r14
    281a:	08 95       	ret

0000281c <Print::print(char const*)>:
_ZN5Print5writeEPKc():
    281c:	61 15       	cp	r22, r1
    281e:	71 05       	cpc	r23, r1
    2820:	11 f0       	breq	.+4      	; 0x2826 <Print::print(char const*)+0xa>
    2822:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    2826:	90 e0       	ldi	r25, 0x00	; 0
    2828:	80 e0       	ldi	r24, 0x00	; 0
    282a:	08 95       	ret

0000282c <Print::print(char)>:
_ZN5Print5printEc():
    282c:	dc 01       	movw	r26, r24
    282e:	ed 91       	ld	r30, X+
    2830:	fc 91       	ld	r31, X
    2832:	01 90       	ld	r0, Z+
    2834:	f0 81       	ld	r31, Z
    2836:	e0 2d       	mov	r30, r0
    2838:	09 94       	ijmp

0000283a <Print::println()>:
_ZN5Print5writeEPKc():
    283a:	6e e6       	ldi	r22, 0x6E	; 110
    283c:	74 e0       	ldi	r23, 0x04	; 4
    283e:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <Print::write(char const*) [clone .part.2]>

00002842 <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
    2842:	0f 93       	push	r16
    2844:	1f 93       	push	r17
    2846:	cf 93       	push	r28
    2848:	df 93       	push	r29
    284a:	ec 01       	movw	r28, r24
    284c:	0e 94 ea 13 	call	0x27d4	; 0x27d4 <Print::print(__FlashStringHelper const*)>
    2850:	8c 01       	movw	r16, r24
    2852:	ce 01       	movw	r24, r28
    2854:	0e 94 1d 14 	call	0x283a	; 0x283a <Print::println()>
    2858:	80 0f       	add	r24, r16
    285a:	91 1f       	adc	r25, r17
    285c:	df 91       	pop	r29
    285e:	cf 91       	pop	r28
    2860:	1f 91       	pop	r17
    2862:	0f 91       	pop	r16
    2864:	08 95       	ret

00002866 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    2866:	0f 93       	push	r16
    2868:	1f 93       	push	r17
    286a:	cf 93       	push	r28
    286c:	df 93       	push	r29
    286e:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    2870:	d0 e0       	ldi	r29, 0x00	; 0
    2872:	c0 e0       	ldi	r28, 0x00	; 0
    2874:	61 15       	cp	r22, r1
    2876:	71 05       	cpc	r23, r1
    2878:	19 f0       	breq	.+6      	; 0x2880 <Print::println(char const*)+0x1a>
    287a:	0e 94 db 13 	call	0x27b6	; 0x27b6 <Print::write(char const*) [clone .part.2]>
    287e:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    2880:	c8 01       	movw	r24, r16
    2882:	0e 94 1d 14 	call	0x283a	; 0x283a <Print::println()>
    2886:	8c 0f       	add	r24, r28
    2888:	9d 1f       	adc	r25, r29
    288a:	df 91       	pop	r29
    288c:	cf 91       	pop	r28
    288e:	1f 91       	pop	r17
    2890:	0f 91       	pop	r16
    2892:	08 95       	ret

00002894 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    2894:	8f 92       	push	r8
    2896:	9f 92       	push	r9
    2898:	af 92       	push	r10
    289a:	bf 92       	push	r11
    289c:	ef 92       	push	r14
    289e:	ff 92       	push	r15
    28a0:	0f 93       	push	r16
    28a2:	1f 93       	push	r17
    28a4:	cf 93       	push	r28
    28a6:	df 93       	push	r29
    28a8:	cd b7       	in	r28, 0x3d	; 61
    28aa:	de b7       	in	r29, 0x3e	; 62
    28ac:	a1 97       	sbiw	r28, 0x21	; 33
    28ae:	0f b6       	in	r0, 0x3f	; 63
    28b0:	f8 94       	cli
    28b2:	de bf       	out	0x3e, r29	; 62
    28b4:	0f be       	out	0x3f, r0	; 63
    28b6:	cd bf       	out	0x3d, r28	; 61
    28b8:	7c 01       	movw	r14, r24
    28ba:	fa 01       	movw	r30, r20
    28bc:	cb 01       	movw	r24, r22
    28be:	19 a2       	std	Y+33, r1	; 0x21
    28c0:	22 30       	cpi	r18, 0x02	; 2
    28c2:	08 f4       	brcc	.+2      	; 0x28c6 <Print::printNumber(unsigned long, unsigned char)+0x32>
    28c4:	2a e0       	ldi	r18, 0x0A	; 10
    28c6:	8e 01       	movw	r16, r28
    28c8:	0f 5d       	subi	r16, 0xDF	; 223
    28ca:	1f 4f       	sbci	r17, 0xFF	; 255
    28cc:	82 2e       	mov	r8, r18
    28ce:	91 2c       	mov	r9, r1
    28d0:	b1 2c       	mov	r11, r1
    28d2:	a1 2c       	mov	r10, r1
    28d4:	bf 01       	movw	r22, r30
    28d6:	a5 01       	movw	r20, r10
    28d8:	94 01       	movw	r18, r8
    28da:	0e 94 64 18 	call	0x30c8	; 0x30c8 <__udivmodsi4>
    28de:	f9 01       	movw	r30, r18
    28e0:	ca 01       	movw	r24, r20
    28e2:	6a 30       	cpi	r22, 0x0A	; 10
    28e4:	0c f5       	brge	.+66     	; 0x2928 <Print::printNumber(unsigned long, unsigned char)+0x94>
    28e6:	60 5d       	subi	r22, 0xD0	; 208
    28e8:	d8 01       	movw	r26, r16
    28ea:	6e 93       	st	-X, r22
    28ec:	8d 01       	movw	r16, r26
    28ee:	23 2b       	or	r18, r19
    28f0:	24 2b       	or	r18, r20
    28f2:	25 2b       	or	r18, r21
    28f4:	79 f7       	brne	.-34     	; 0x28d4 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    28f6:	90 e0       	ldi	r25, 0x00	; 0
    28f8:	80 e0       	ldi	r24, 0x00	; 0
    28fa:	10 97       	sbiw	r26, 0x00	; 0
    28fc:	21 f0       	breq	.+8      	; 0x2906 <Print::printNumber(unsigned long, unsigned char)+0x72>
    28fe:	bd 01       	movw	r22, r26
    2900:	c7 01       	movw	r24, r14
    2902:	0e 94 db 13 	call	0x27b6	; 0x27b6 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    2906:	a1 96       	adiw	r28, 0x21	; 33
    2908:	0f b6       	in	r0, 0x3f	; 63
    290a:	f8 94       	cli
    290c:	de bf       	out	0x3e, r29	; 62
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	cd bf       	out	0x3d, r28	; 61
    2912:	df 91       	pop	r29
    2914:	cf 91       	pop	r28
    2916:	1f 91       	pop	r17
    2918:	0f 91       	pop	r16
    291a:	ff 90       	pop	r15
    291c:	ef 90       	pop	r14
    291e:	bf 90       	pop	r11
    2920:	af 90       	pop	r10
    2922:	9f 90       	pop	r9
    2924:	8f 90       	pop	r8
    2926:	08 95       	ret
    2928:	69 5c       	subi	r22, 0xC9	; 201
    292a:	de cf       	rjmp	.-68     	; 0x28e8 <Print::printNumber(unsigned long, unsigned char)+0x54>

0000292c <Print::print(long, int)>:
_ZN5Print5printEli():
    292c:	cf 92       	push	r12
    292e:	df 92       	push	r13
    2930:	ef 92       	push	r14
    2932:	ff 92       	push	r15
    2934:	0f 93       	push	r16
    2936:	1f 93       	push	r17
    2938:	cf 93       	push	r28
    293a:	df 93       	push	r29
    293c:	21 15       	cp	r18, r1
    293e:	31 05       	cpc	r19, r1
    2940:	81 f4       	brne	.+32     	; 0x2962 <Print::print(long, int)+0x36>
    2942:	dc 01       	movw	r26, r24
    2944:	ed 91       	ld	r30, X+
    2946:	fc 91       	ld	r31, X
    2948:	01 90       	ld	r0, Z+
    294a:	f0 81       	ld	r31, Z
    294c:	e0 2d       	mov	r30, r0
    294e:	64 2f       	mov	r22, r20
    2950:	df 91       	pop	r29
    2952:	cf 91       	pop	r28
    2954:	1f 91       	pop	r17
    2956:	0f 91       	pop	r16
    2958:	ff 90       	pop	r15
    295a:	ef 90       	pop	r14
    295c:	df 90       	pop	r13
    295e:	cf 90       	pop	r12
    2960:	09 94       	ijmp
    2962:	2a 30       	cpi	r18, 0x0A	; 10
    2964:	31 05       	cpc	r19, r1
    2966:	01 f5       	brne	.+64     	; 0x29a8 <Print::print(long, int)+0x7c>
    2968:	2a e0       	ldi	r18, 0x0A	; 10
    296a:	77 ff       	sbrs	r23, 7
    296c:	1d c0       	rjmp	.+58     	; 0x29a8 <Print::print(long, int)+0x7c>
    296e:	6a 01       	movw	r12, r20
    2970:	7b 01       	movw	r14, r22
    2972:	ec 01       	movw	r28, r24
    2974:	6d e2       	ldi	r22, 0x2D	; 45
    2976:	0e 94 16 14 	call	0x282c	; 0x282c <Print::print(char)>
    297a:	8c 01       	movw	r16, r24
    297c:	44 27       	eor	r20, r20
    297e:	55 27       	eor	r21, r21
    2980:	ba 01       	movw	r22, r20
    2982:	4c 19       	sub	r20, r12
    2984:	5d 09       	sbc	r21, r13
    2986:	6e 09       	sbc	r22, r14
    2988:	7f 09       	sbc	r23, r15
    298a:	2a e0       	ldi	r18, 0x0A	; 10
    298c:	ce 01       	movw	r24, r28
    298e:	0e 94 4a 14 	call	0x2894	; 0x2894 <Print::printNumber(unsigned long, unsigned char)>
    2992:	80 0f       	add	r24, r16
    2994:	91 1f       	adc	r25, r17
    2996:	df 91       	pop	r29
    2998:	cf 91       	pop	r28
    299a:	1f 91       	pop	r17
    299c:	0f 91       	pop	r16
    299e:	ff 90       	pop	r15
    29a0:	ef 90       	pop	r14
    29a2:	df 90       	pop	r13
    29a4:	cf 90       	pop	r12
    29a6:	08 95       	ret
    29a8:	df 91       	pop	r29
    29aa:	cf 91       	pop	r28
    29ac:	1f 91       	pop	r17
    29ae:	0f 91       	pop	r16
    29b0:	ff 90       	pop	r15
    29b2:	ef 90       	pop	r14
    29b4:	df 90       	pop	r13
    29b6:	cf 90       	pop	r12
    29b8:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <Print::printNumber(unsigned long, unsigned char)>

000029bc <Print::print(int, int)>:
_ZN5Print5printEii():
    29bc:	9a 01       	movw	r18, r20
    29be:	ab 01       	movw	r20, r22
    29c0:	77 0f       	add	r23, r23
    29c2:	66 0b       	sbc	r22, r22
    29c4:	77 0b       	sbc	r23, r23
    29c6:	0c 94 96 14 	jmp	0x292c	; 0x292c <Print::print(long, int)>

000029ca <Print::println(int, int)>:
_ZN5Print7printlnEii():
    29ca:	0f 93       	push	r16
    29cc:	1f 93       	push	r17
    29ce:	cf 93       	push	r28
    29d0:	df 93       	push	r29
    29d2:	ec 01       	movw	r28, r24
    29d4:	0e 94 de 14 	call	0x29bc	; 0x29bc <Print::print(int, int)>
    29d8:	8c 01       	movw	r16, r24
    29da:	ce 01       	movw	r24, r28
    29dc:	0e 94 1d 14 	call	0x283a	; 0x283a <Print::println()>
    29e0:	80 0f       	add	r24, r16
    29e2:	91 1f       	adc	r25, r17
    29e4:	df 91       	pop	r29
    29e6:	cf 91       	pop	r28
    29e8:	1f 91       	pop	r17
    29ea:	0f 91       	pop	r16
    29ec:	08 95       	ret

000029ee <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    29ee:	21 15       	cp	r18, r1
    29f0:	31 05       	cpc	r19, r1
    29f2:	41 f4       	brne	.+16     	; 0x2a04 <Print::print(unsigned long, int)+0x16>
    29f4:	dc 01       	movw	r26, r24
    29f6:	ed 91       	ld	r30, X+
    29f8:	fc 91       	ld	r31, X
    29fa:	01 90       	ld	r0, Z+
    29fc:	f0 81       	ld	r31, Z
    29fe:	e0 2d       	mov	r30, r0
    2a00:	64 2f       	mov	r22, r20
    2a02:	09 94       	ijmp
    2a04:	0c 94 4a 14 	jmp	0x2894	; 0x2894 <Print::printNumber(unsigned long, unsigned char)>

00002a08 <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
    2a08:	9a 01       	movw	r18, r20
    2a0a:	ab 01       	movw	r20, r22
    2a0c:	70 e0       	ldi	r23, 0x00	; 0
    2a0e:	60 e0       	ldi	r22, 0x00	; 0
    2a10:	0c 94 f7 14 	jmp	0x29ee	; 0x29ee <Print::print(unsigned long, int)>

00002a14 <Print::println(unsigned long, int)>:
_ZN5Print7printlnEmi():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:181
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    2a14:	0f 93       	push	r16
    2a16:	1f 93       	push	r17
    2a18:	cf 93       	push	r28
    2a1a:	df 93       	push	r29
    2a1c:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:182
  size_t n = print(num, base);
    2a1e:	0e 94 f7 14 	call	0x29ee	; 0x29ee <Print::print(unsigned long, int)>
    2a22:	8c 01       	movw	r16, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:183
  n += println();
    2a24:	ce 01       	movw	r24, r28
    2a26:	0e 94 1d 14 	call	0x283a	; 0x283a <Print::println()>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
  return n;
}
    2a2a:	80 0f       	add	r24, r16
    2a2c:	91 1f       	adc	r25, r17
    2a2e:	df 91       	pop	r29
    2a30:	cf 91       	pop	r28
    2a32:	1f 91       	pop	r17
    2a34:	0f 91       	pop	r16
    2a36:	08 95       	ret

00002a38 <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2a38:	2f 92       	push	r2
    2a3a:	3f 92       	push	r3
    2a3c:	4f 92       	push	r4
    2a3e:	5f 92       	push	r5
    2a40:	6f 92       	push	r6
    2a42:	7f 92       	push	r7
    2a44:	8f 92       	push	r8
    2a46:	9f 92       	push	r9
    2a48:	af 92       	push	r10
    2a4a:	bf 92       	push	r11
    2a4c:	cf 92       	push	r12
    2a4e:	df 92       	push	r13
    2a50:	ef 92       	push	r14
    2a52:	ff 92       	push	r15
    2a54:	1f 93       	push	r17
    2a56:	cf 93       	push	r28
    2a58:	df 93       	push	r29
    2a5a:	ec 01       	movw	r28, r24
    2a5c:	6a 01       	movw	r12, r20
    2a5e:	7b 01       	movw	r14, r22
    2a60:	72 2e       	mov	r7, r18
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2a62:	ab 01       	movw	r20, r22
    2a64:	96 01       	movw	r18, r12
    2a66:	cb 01       	movw	r24, r22
    2a68:	b6 01       	movw	r22, r12
    2a6a:	0e 94 4b 18 	call	0x3096	; 0x3096 <__unordsf2>
_ZN5Print5writeEPKc():
    2a6e:	61 e7       	ldi	r22, 0x71	; 113
    2a70:	74 e0       	ldi	r23, 0x04	; 4
_ZN5Print10printFloatEdh():
    2a72:	81 11       	cpse	r24, r1
    2a74:	26 c0       	rjmp	.+76     	; 0x2ac2 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    2a76:	46 01       	movw	r8, r12
    2a78:	57 01       	movw	r10, r14
    2a7a:	e8 94       	clt
    2a7c:	b7 f8       	bld	r11, 7
    2a7e:	2f ef       	ldi	r18, 0xFF	; 255
    2a80:	3f ef       	ldi	r19, 0xFF	; 255
    2a82:	4f e7       	ldi	r20, 0x7F	; 127
    2a84:	5f e7       	ldi	r21, 0x7F	; 127
    2a86:	c5 01       	movw	r24, r10
    2a88:	b4 01       	movw	r22, r8
    2a8a:	0e 94 4b 18 	call	0x3096	; 0x3096 <__unordsf2>
    2a8e:	81 11       	cpse	r24, r1
    2a90:	0c c0       	rjmp	.+24     	; 0x2aaa <Print::printFloat(double, unsigned char)+0x72>
    2a92:	2f ef       	ldi	r18, 0xFF	; 255
    2a94:	3f ef       	ldi	r19, 0xFF	; 255
    2a96:	4f e7       	ldi	r20, 0x7F	; 127
    2a98:	5f e7       	ldi	r21, 0x7F	; 127
    2a9a:	c5 01       	movw	r24, r10
    2a9c:	b4 01       	movw	r22, r8
    2a9e:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__cmpsf2>
_ZN5Print5writeEPKc():
    2aa2:	65 e7       	ldi	r22, 0x75	; 117
    2aa4:	74 e0       	ldi	r23, 0x04	; 4
_ZN5Print10printFloatEdh():
    2aa6:	18 16       	cp	r1, r24
    2aa8:	64 f0       	brlt	.+24     	; 0x2ac2 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2aaa:	2f ef       	ldi	r18, 0xFF	; 255
    2aac:	3f ef       	ldi	r19, 0xFF	; 255
    2aae:	4f e7       	ldi	r20, 0x7F	; 127
    2ab0:	5f e4       	ldi	r21, 0x4F	; 79
    2ab2:	c7 01       	movw	r24, r14
    2ab4:	b6 01       	movw	r22, r12
    2ab6:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <__gesf2>
    2aba:	18 16       	cp	r1, r24
    2abc:	b4 f4       	brge	.+44     	; 0x2aea <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
    2abe:	69 e7       	ldi	r22, 0x79	; 121
    2ac0:	74 e0       	ldi	r23, 0x04	; 4
    2ac2:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2ac4:	df 91       	pop	r29
    2ac6:	cf 91       	pop	r28
    2ac8:	1f 91       	pop	r17
    2aca:	ff 90       	pop	r15
    2acc:	ef 90       	pop	r14
    2ace:	df 90       	pop	r13
    2ad0:	cf 90       	pop	r12
    2ad2:	bf 90       	pop	r11
    2ad4:	af 90       	pop	r10
    2ad6:	9f 90       	pop	r9
    2ad8:	8f 90       	pop	r8
    2ada:	7f 90       	pop	r7
    2adc:	6f 90       	pop	r6
    2ade:	5f 90       	pop	r5
    2ae0:	4f 90       	pop	r4
    2ae2:	3f 90       	pop	r3
    2ae4:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
    2ae6:	0c 94 db 13 	jmp	0x27b6	; 0x27b6 <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2aea:	2f ef       	ldi	r18, 0xFF	; 255
    2aec:	3f ef       	ldi	r19, 0xFF	; 255
    2aee:	4f e7       	ldi	r20, 0x7F	; 127
    2af0:	5f ec       	ldi	r21, 0xCF	; 207
    2af2:	c7 01       	movw	r24, r14
    2af4:	b6 01       	movw	r22, r12
    2af6:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__cmpsf2>
    2afa:	87 fd       	sbrc	r24, 7
    2afc:	e0 cf       	rjmp	.-64     	; 0x2abe <Print::printFloat(double, unsigned char)+0x86>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    2afe:	20 e0       	ldi	r18, 0x00	; 0
    2b00:	30 e0       	ldi	r19, 0x00	; 0
    2b02:	a9 01       	movw	r20, r18
    2b04:	c7 01       	movw	r24, r14
    2b06:	b6 01       	movw	r22, r12
    2b08:	0e 94 81 16 	call	0x2d02	; 0x2d02 <__cmpsf2>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2b0c:	31 2c       	mov	r3, r1
    2b0e:	21 2c       	mov	r2, r1
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    2b10:	87 ff       	sbrs	r24, 7
    2b12:	09 c0       	rjmp	.+18     	; 0x2b26 <Print::printFloat(double, unsigned char)+0xee>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
    2b14:	6d e2       	ldi	r22, 0x2D	; 45
    2b16:	ce 01       	movw	r24, r28
    2b18:	0e 94 16 14 	call	0x282c	; 0x282c <Print::print(char)>
    2b1c:	1c 01       	movw	r2, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
    2b1e:	f7 fa       	bst	r15, 7
    2b20:	f0 94       	com	r15
    2b22:	f7 f8       	bld	r15, 7
    2b24:	f0 94       	com	r15
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2b26:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2b28:	60 e0       	ldi	r22, 0x00	; 0
    2b2a:	70 e0       	ldi	r23, 0x00	; 0
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    2b30:	71 16       	cp	r7, r17
    2b32:	41 f0       	breq	.+16     	; 0x2b44 <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    2b34:	20 e0       	ldi	r18, 0x00	; 0
    2b36:	30 e0       	ldi	r19, 0x00	; 0
    2b38:	40 e2       	ldi	r20, 0x20	; 32
    2b3a:	51 e4       	ldi	r21, 0x41	; 65
    2b3c:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <__divsf3>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2b40:	1f 5f       	subi	r17, 0xFF	; 255
    2b42:	f6 cf       	rjmp	.-20     	; 0x2b30 <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    2b44:	a7 01       	movw	r20, r14
    2b46:	96 01       	movw	r18, r12
    2b48:	0e 94 15 16 	call	0x2c2a	; 0x2c2a <__addsf3>
    2b4c:	2b 01       	movw	r4, r22
    2b4e:	3c 01       	movw	r6, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2b50:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__fixunssfsi>
    2b54:	4b 01       	movw	r8, r22
    2b56:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2b58:	2a e0       	ldi	r18, 0x0A	; 10
    2b5a:	bc 01       	movw	r22, r24
    2b5c:	a4 01       	movw	r20, r8
    2b5e:	ce 01       	movw	r24, r28
    2b60:	0e 94 4a 14 	call	0x2894	; 0x2894 <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2b64:	7c 01       	movw	r14, r24
    2b66:	e2 0c       	add	r14, r2
    2b68:	f3 1c       	adc	r15, r3
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2b6a:	11 23       	and	r17, r17
    2b6c:	b1 f1       	breq	.+108    	; 0x2bda <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2b6e:	c5 01       	movw	r24, r10
    2b70:	b4 01       	movw	r22, r8
    2b72:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__floatunsisf>
    2b76:	9b 01       	movw	r18, r22
    2b78:	ac 01       	movw	r20, r24
    2b7a:	c3 01       	movw	r24, r6
    2b7c:	b2 01       	movw	r22, r4
    2b7e:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__subsf3>
    2b82:	4b 01       	movw	r8, r22
    2b84:	5c 01       	movw	r10, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2b86:	6e e2       	ldi	r22, 0x2E	; 46
    2b88:	ce 01       	movw	r24, r28
    2b8a:	0e 94 16 14 	call	0x282c	; 0x282c <Print::print(char)>
    2b8e:	e8 0e       	add	r14, r24
    2b90:	f9 1e       	adc	r15, r25
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2b92:	11 50       	subi	r17, 0x01	; 1
    2b94:	10 f1       	brcs	.+68     	; 0x2bda <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    2b96:	20 e0       	ldi	r18, 0x00	; 0
    2b98:	30 e0       	ldi	r19, 0x00	; 0
    2b9a:	40 e2       	ldi	r20, 0x20	; 32
    2b9c:	51 e4       	ldi	r21, 0x41	; 65
    2b9e:	c5 01       	movw	r24, r10
    2ba0:	b4 01       	movw	r22, r8
    2ba2:	0e 94 de 17 	call	0x2fbc	; 0x2fbc <__mulsf3>
    2ba6:	2b 01       	movw	r4, r22
    2ba8:	3c 01       	movw	r6, r24
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    2baa:	0e 94 f8 16 	call	0x2df0	; 0x2df0 <__fixunssfsi>
    2bae:	4b 01       	movw	r8, r22
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    2bb0:	4a e0       	ldi	r20, 0x0A	; 10
    2bb2:	50 e0       	ldi	r21, 0x00	; 0
    2bb4:	ce 01       	movw	r24, r28
    2bb6:	0e 94 04 15 	call	0x2a08	; 0x2a08 <Print::print(unsigned int, int)>
    2bba:	e8 0e       	add	r14, r24
    2bbc:	f9 1e       	adc	r15, r25
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    2bbe:	b4 01       	movw	r22, r8
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	0e 94 27 17 	call	0x2e4e	; 0x2e4e <__floatunsisf>
    2bc8:	9b 01       	movw	r18, r22
    2bca:	ac 01       	movw	r20, r24
    2bcc:	c3 01       	movw	r24, r6
    2bce:	b2 01       	movw	r22, r4
    2bd0:	0e 94 14 16 	call	0x2c28	; 0x2c28 <__subsf3>
    2bd4:	4b 01       	movw	r8, r22
    2bd6:	5c 01       	movw	r10, r24
    2bd8:	dc cf       	rjmp	.-72     	; 0x2b92 <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    2bda:	c7 01       	movw	r24, r14
    2bdc:	df 91       	pop	r29
    2bde:	cf 91       	pop	r28
    2be0:	1f 91       	pop	r17
    2be2:	ff 90       	pop	r15
    2be4:	ef 90       	pop	r14
    2be6:	df 90       	pop	r13
    2be8:	cf 90       	pop	r12
    2bea:	bf 90       	pop	r11
    2bec:	af 90       	pop	r10
    2bee:	9f 90       	pop	r9
    2bf0:	8f 90       	pop	r8
    2bf2:	7f 90       	pop	r7
    2bf4:	6f 90       	pop	r6
    2bf6:	5f 90       	pop	r5
    2bf8:	4f 90       	pop	r4
    2bfa:	3f 90       	pop	r3
    2bfc:	2f 90       	pop	r2
    2bfe:	08 95       	ret

00002c00 <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2c00:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <Print::printFloat(double, unsigned char)>

00002c04 <Print::println(double, int)>:
_ZN5Print7printlnEdi():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:188
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    2c04:	0f 93       	push	r16
    2c06:	1f 93       	push	r17
    2c08:	cf 93       	push	r28
    2c0a:	df 93       	push	r29
    2c0c:	ec 01       	movw	r28, r24
_ZN5Print5printEdi():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2c0e:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <Print::printFloat(double, unsigned char)>
    2c12:	8c 01       	movw	r16, r24
_ZN5Print7printlnEdi():
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:190
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    2c14:	ce 01       	movw	r24, r28
    2c16:	0e 94 1d 14 	call	0x283a	; 0x283a <Print::println()>
C:\Users\habeeba\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:192
  return n;
}
    2c1a:	80 0f       	add	r24, r16
    2c1c:	91 1f       	adc	r25, r17
    2c1e:	df 91       	pop	r29
    2c20:	cf 91       	pop	r28
    2c22:	1f 91       	pop	r17
    2c24:	0f 91       	pop	r16
    2c26:	08 95       	ret

00002c28 <__subsf3>:
__subsf3():
    2c28:	50 58       	subi	r21, 0x80	; 128

00002c2a <__addsf3>:
    2c2a:	bb 27       	eor	r27, r27
    2c2c:	aa 27       	eor	r26, r26
    2c2e:	0e 94 2c 16 	call	0x2c58	; 0x2c58 <__addsf3x>
    2c32:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <__fp_round>
__addsf3():
    2c36:	0e 94 91 17 	call	0x2f22	; 0x2f22 <__fp_pscA>
    2c3a:	38 f0       	brcs	.+14     	; 0x2c4a <__addsf3+0x20>
    2c3c:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__fp_pscB>
    2c40:	20 f0       	brcs	.+8      	; 0x2c4a <__addsf3+0x20>
    2c42:	39 f4       	brne	.+14     	; 0x2c52 <__addsf3+0x28>
    2c44:	9f 3f       	cpi	r25, 0xFF	; 255
    2c46:	19 f4       	brne	.+6      	; 0x2c4e <__addsf3+0x24>
    2c48:	26 f4       	brtc	.+8      	; 0x2c52 <__addsf3+0x28>
    2c4a:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__fp_nan>
    2c4e:	0e f4       	brtc	.+2      	; 0x2c52 <__addsf3+0x28>
    2c50:	e0 95       	com	r30
    2c52:	e7 fb       	bst	r30, 7
    2c54:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__fp_inf>

00002c58 <__addsf3x>:
__addsf3x():
    2c58:	e9 2f       	mov	r30, r25
    2c5a:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__fp_split3>
    2c5e:	58 f3       	brcs	.-42     	; 0x2c36 <__addsf3+0xc>
    2c60:	ba 17       	cp	r27, r26
    2c62:	62 07       	cpc	r22, r18
    2c64:	73 07       	cpc	r23, r19
    2c66:	84 07       	cpc	r24, r20
    2c68:	95 07       	cpc	r25, r21
    2c6a:	20 f0       	brcs	.+8      	; 0x2c74 <__addsf3x+0x1c>
    2c6c:	79 f4       	brne	.+30     	; 0x2c8c <__addsf3x+0x34>
    2c6e:	a6 f5       	brtc	.+104    	; 0x2cd8 <__addsf3x+0x80>
    2c70:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__fp_zero>
    2c74:	0e f4       	brtc	.+2      	; 0x2c78 <__addsf3x+0x20>
    2c76:	e0 95       	com	r30
    2c78:	0b 2e       	mov	r0, r27
    2c7a:	ba 2f       	mov	r27, r26
    2c7c:	a0 2d       	mov	r26, r0
    2c7e:	0b 01       	movw	r0, r22
    2c80:	b9 01       	movw	r22, r18
    2c82:	90 01       	movw	r18, r0
    2c84:	0c 01       	movw	r0, r24
    2c86:	ca 01       	movw	r24, r20
    2c88:	a0 01       	movw	r20, r0
    2c8a:	11 24       	eor	r1, r1
    2c8c:	ff 27       	eor	r31, r31
    2c8e:	59 1b       	sub	r21, r25
    2c90:	99 f0       	breq	.+38     	; 0x2cb8 <__addsf3x+0x60>
    2c92:	59 3f       	cpi	r21, 0xF9	; 249
    2c94:	50 f4       	brcc	.+20     	; 0x2caa <__addsf3x+0x52>
    2c96:	50 3e       	cpi	r21, 0xE0	; 224
    2c98:	68 f1       	brcs	.+90     	; 0x2cf4 <__addsf3x+0x9c>
    2c9a:	1a 16       	cp	r1, r26
    2c9c:	f0 40       	sbci	r31, 0x00	; 0
    2c9e:	a2 2f       	mov	r26, r18
    2ca0:	23 2f       	mov	r18, r19
    2ca2:	34 2f       	mov	r19, r20
    2ca4:	44 27       	eor	r20, r20
    2ca6:	58 5f       	subi	r21, 0xF8	; 248
    2ca8:	f3 cf       	rjmp	.-26     	; 0x2c90 <__addsf3x+0x38>
    2caa:	46 95       	lsr	r20
    2cac:	37 95       	ror	r19
    2cae:	27 95       	ror	r18
    2cb0:	a7 95       	ror	r26
    2cb2:	f0 40       	sbci	r31, 0x00	; 0
    2cb4:	53 95       	inc	r21
    2cb6:	c9 f7       	brne	.-14     	; 0x2caa <__addsf3x+0x52>
    2cb8:	7e f4       	brtc	.+30     	; 0x2cd8 <__addsf3x+0x80>
    2cba:	1f 16       	cp	r1, r31
    2cbc:	ba 0b       	sbc	r27, r26
    2cbe:	62 0b       	sbc	r22, r18
    2cc0:	73 0b       	sbc	r23, r19
    2cc2:	84 0b       	sbc	r24, r20
    2cc4:	ba f0       	brmi	.+46     	; 0x2cf4 <__addsf3x+0x9c>
    2cc6:	91 50       	subi	r25, 0x01	; 1
    2cc8:	a1 f0       	breq	.+40     	; 0x2cf2 <__addsf3x+0x9a>
    2cca:	ff 0f       	add	r31, r31
    2ccc:	bb 1f       	adc	r27, r27
    2cce:	66 1f       	adc	r22, r22
    2cd0:	77 1f       	adc	r23, r23
    2cd2:	88 1f       	adc	r24, r24
    2cd4:	c2 f7       	brpl	.-16     	; 0x2cc6 <__addsf3x+0x6e>
    2cd6:	0e c0       	rjmp	.+28     	; 0x2cf4 <__addsf3x+0x9c>
    2cd8:	ba 0f       	add	r27, r26
    2cda:	62 1f       	adc	r22, r18
    2cdc:	73 1f       	adc	r23, r19
    2cde:	84 1f       	adc	r24, r20
    2ce0:	48 f4       	brcc	.+18     	; 0x2cf4 <__addsf3x+0x9c>
    2ce2:	87 95       	ror	r24
    2ce4:	77 95       	ror	r23
    2ce6:	67 95       	ror	r22
    2ce8:	b7 95       	ror	r27
    2cea:	f7 95       	ror	r31
    2cec:	9e 3f       	cpi	r25, 0xFE	; 254
    2cee:	08 f0       	brcs	.+2      	; 0x2cf2 <__addsf3x+0x9a>
    2cf0:	b0 cf       	rjmp	.-160    	; 0x2c52 <__addsf3+0x28>
    2cf2:	93 95       	inc	r25
    2cf4:	88 0f       	add	r24, r24
    2cf6:	08 f0       	brcs	.+2      	; 0x2cfa <__addsf3x+0xa2>
    2cf8:	99 27       	eor	r25, r25
    2cfa:	ee 0f       	add	r30, r30
    2cfc:	97 95       	ror	r25
    2cfe:	87 95       	ror	r24
    2d00:	08 95       	ret

00002d02 <__cmpsf2>:
    2d02:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <__fp_cmp>
    2d06:	08 f4       	brcc	.+2      	; 0x2d0a <__cmpsf2+0x8>
    2d08:	81 e0       	ldi	r24, 0x01	; 1
    2d0a:	08 95       	ret

00002d0c <__divsf3>:
    2d0c:	0e 94 9a 16 	call	0x2d34	; 0x2d34 <__divsf3x>
    2d10:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <__fp_round>
    2d14:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__fp_pscB>
    2d18:	58 f0       	brcs	.+22     	; 0x2d30 <__divsf3+0x24>
    2d1a:	0e 94 91 17 	call	0x2f22	; 0x2f22 <__fp_pscA>
    2d1e:	40 f0       	brcs	.+16     	; 0x2d30 <__divsf3+0x24>
    2d20:	29 f4       	brne	.+10     	; 0x2d2c <__divsf3+0x20>
    2d22:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    2d24:	29 f0       	breq	.+10     	; 0x2d30 <__divsf3+0x24>
    2d26:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__fp_inf>
    2d2a:	51 11       	cpse	r21, r1
    2d2c:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__fp_szero>
    2d30:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__fp_nan>

00002d34 <__divsf3x>:
__divsf3x():
    2d34:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__fp_split3>
    2d38:	68 f3       	brcs	.-38     	; 0x2d14 <__divsf3+0x8>

00002d3a <__divsf3_pse>:
    2d3a:	99 23       	and	r25, r25
    2d3c:	b1 f3       	breq	.-20     	; 0x2d2a <__divsf3+0x1e>
    2d3e:	55 23       	and	r21, r21
    2d40:	91 f3       	breq	.-28     	; 0x2d26 <__divsf3+0x1a>
    2d42:	95 1b       	sub	r25, r21
    2d44:	55 0b       	sbc	r21, r21
    2d46:	bb 27       	eor	r27, r27
    2d48:	aa 27       	eor	r26, r26
    2d4a:	62 17       	cp	r22, r18
    2d4c:	73 07       	cpc	r23, r19
    2d4e:	84 07       	cpc	r24, r20
    2d50:	38 f0       	brcs	.+14     	; 0x2d60 <__divsf3_pse+0x26>
    2d52:	9f 5f       	subi	r25, 0xFF	; 255
    2d54:	5f 4f       	sbci	r21, 0xFF	; 255
    2d56:	22 0f       	add	r18, r18
    2d58:	33 1f       	adc	r19, r19
    2d5a:	44 1f       	adc	r20, r20
    2d5c:	aa 1f       	adc	r26, r26
    2d5e:	a9 f3       	breq	.-22     	; 0x2d4a <__divsf3_pse+0x10>
    2d60:	35 d0       	rcall	.+106    	; 0x2dcc <__divsf3_pse+0x92>
    2d62:	0e 2e       	mov	r0, r30
    2d64:	3a f0       	brmi	.+14     	; 0x2d74 <__divsf3_pse+0x3a>
    2d66:	e0 e8       	ldi	r30, 0x80	; 128
    2d68:	32 d0       	rcall	.+100    	; 0x2dce <__divsf3_pse+0x94>
    2d6a:	91 50       	subi	r25, 0x01	; 1
    2d6c:	50 40       	sbci	r21, 0x00	; 0
    2d6e:	e6 95       	lsr	r30
    2d70:	00 1c       	adc	r0, r0
    2d72:	ca f7       	brpl	.-14     	; 0x2d66 <__divsf3_pse+0x2c>
    2d74:	2b d0       	rcall	.+86     	; 0x2dcc <__divsf3_pse+0x92>
    2d76:	fe 2f       	mov	r31, r30
    2d78:	29 d0       	rcall	.+82     	; 0x2dcc <__divsf3_pse+0x92>
    2d7a:	66 0f       	add	r22, r22
    2d7c:	77 1f       	adc	r23, r23
    2d7e:	88 1f       	adc	r24, r24
    2d80:	bb 1f       	adc	r27, r27
    2d82:	26 17       	cp	r18, r22
    2d84:	37 07       	cpc	r19, r23
    2d86:	48 07       	cpc	r20, r24
    2d88:	ab 07       	cpc	r26, r27
    2d8a:	b0 e8       	ldi	r27, 0x80	; 128
    2d8c:	09 f0       	breq	.+2      	; 0x2d90 <__divsf3_pse+0x56>
    2d8e:	bb 0b       	sbc	r27, r27
    2d90:	80 2d       	mov	r24, r0
    2d92:	bf 01       	movw	r22, r30
    2d94:	ff 27       	eor	r31, r31
    2d96:	93 58       	subi	r25, 0x83	; 131
    2d98:	5f 4f       	sbci	r21, 0xFF	; 255
    2d9a:	3a f0       	brmi	.+14     	; 0x2daa <__divsf3_pse+0x70>
    2d9c:	9e 3f       	cpi	r25, 0xFE	; 254
    2d9e:	51 05       	cpc	r21, r1
    2da0:	78 f0       	brcs	.+30     	; 0x2dc0 <__divsf3_pse+0x86>
    2da2:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__fp_inf>
    2da6:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__fp_szero>
    2daa:	5f 3f       	cpi	r21, 0xFF	; 255
    2dac:	e4 f3       	brlt	.-8      	; 0x2da6 <__divsf3_pse+0x6c>
    2dae:	98 3e       	cpi	r25, 0xE8	; 232
    2db0:	d4 f3       	brlt	.-12     	; 0x2da6 <__divsf3_pse+0x6c>
    2db2:	86 95       	lsr	r24
    2db4:	77 95       	ror	r23
    2db6:	67 95       	ror	r22
    2db8:	b7 95       	ror	r27
    2dba:	f7 95       	ror	r31
    2dbc:	9f 5f       	subi	r25, 0xFF	; 255
    2dbe:	c9 f7       	brne	.-14     	; 0x2db2 <__divsf3_pse+0x78>
    2dc0:	88 0f       	add	r24, r24
    2dc2:	91 1d       	adc	r25, r1
    2dc4:	96 95       	lsr	r25
    2dc6:	87 95       	ror	r24
    2dc8:	97 f9       	bld	r25, 7
    2dca:	08 95       	ret
    2dcc:	e1 e0       	ldi	r30, 0x01	; 1
    2dce:	66 0f       	add	r22, r22
    2dd0:	77 1f       	adc	r23, r23
    2dd2:	88 1f       	adc	r24, r24
    2dd4:	bb 1f       	adc	r27, r27
    2dd6:	62 17       	cp	r22, r18
    2dd8:	73 07       	cpc	r23, r19
    2dda:	84 07       	cpc	r24, r20
    2ddc:	ba 07       	cpc	r27, r26
    2dde:	20 f0       	brcs	.+8      	; 0x2de8 <__divsf3_pse+0xae>
    2de0:	62 1b       	sub	r22, r18
    2de2:	73 0b       	sbc	r23, r19
    2de4:	84 0b       	sbc	r24, r20
    2de6:	ba 0b       	sbc	r27, r26
    2de8:	ee 1f       	adc	r30, r30
    2dea:	88 f7       	brcc	.-30     	; 0x2dce <__divsf3_pse+0x94>
    2dec:	e0 95       	com	r30
    2dee:	08 95       	ret

00002df0 <__fixunssfsi>:
    2df0:	0e 94 b8 17 	call	0x2f70	; 0x2f70 <__fp_splitA>
    2df4:	88 f0       	brcs	.+34     	; 0x2e18 <__fixunssfsi+0x28>
    2df6:	9f 57       	subi	r25, 0x7F	; 127
    2df8:	98 f0       	brcs	.+38     	; 0x2e20 <__fixunssfsi+0x30>
    2dfa:	b9 2f       	mov	r27, r25
    2dfc:	99 27       	eor	r25, r25
    2dfe:	b7 51       	subi	r27, 0x17	; 23
    2e00:	b0 f0       	brcs	.+44     	; 0x2e2e <__fixunssfsi+0x3e>
    2e02:	e1 f0       	breq	.+56     	; 0x2e3c <__fixunssfsi+0x4c>
    2e04:	66 0f       	add	r22, r22
    2e06:	77 1f       	adc	r23, r23
    2e08:	88 1f       	adc	r24, r24
    2e0a:	99 1f       	adc	r25, r25
    2e0c:	1a f0       	brmi	.+6      	; 0x2e14 <__fixunssfsi+0x24>
    2e0e:	ba 95       	dec	r27
__fixunssfsi():
    2e10:	c9 f7       	brne	.-14     	; 0x2e04 <__fixunssfsi+0x14>
    2e12:	14 c0       	rjmp	.+40     	; 0x2e3c <__fixunssfsi+0x4c>
    2e14:	b1 30       	cpi	r27, 0x01	; 1
    2e16:	91 f0       	breq	.+36     	; 0x2e3c <__fixunssfsi+0x4c>
    2e18:	0e 94 d2 17 	call	0x2fa4	; 0x2fa4 <__fp_zero>
    2e1c:	b1 e0       	ldi	r27, 0x01	; 1
    2e1e:	08 95       	ret
    2e20:	0c 94 d2 17 	jmp	0x2fa4	; 0x2fa4 <__fp_zero>
    2e24:	67 2f       	mov	r22, r23
    2e26:	78 2f       	mov	r23, r24
    2e28:	88 27       	eor	r24, r24
    2e2a:	b8 5f       	subi	r27, 0xF8	; 248
    2e2c:	39 f0       	breq	.+14     	; 0x2e3c <__fixunssfsi+0x4c>
    2e2e:	b9 3f       	cpi	r27, 0xF9	; 249
    2e30:	cc f3       	brlt	.-14     	; 0x2e24 <__fixunssfsi+0x34>
    2e32:	86 95       	lsr	r24
    2e34:	77 95       	ror	r23
    2e36:	67 95       	ror	r22
    2e38:	b3 95       	inc	r27
    2e3a:	d9 f7       	brne	.-10     	; 0x2e32 <__fixunssfsi+0x42>
    2e3c:	3e f4       	brtc	.+14     	; 0x2e4c <__fixunssfsi+0x5c>
    2e3e:	90 95       	com	r25
    2e40:	80 95       	com	r24
    2e42:	70 95       	com	r23
    2e44:	61 95       	neg	r22
    2e46:	7f 4f       	sbci	r23, 0xFF	; 255
    2e48:	8f 4f       	sbci	r24, 0xFF	; 255
    2e4a:	9f 4f       	sbci	r25, 0xFF	; 255
    2e4c:	08 95       	ret

00002e4e <__floatunsisf>:
__floatunsisf():
    2e4e:	e8 94       	clt
    2e50:	09 c0       	rjmp	.+18     	; 0x2e64 <__floatsisf+0x12>

00002e52 <__floatsisf>:
    2e52:	97 fb       	bst	r25, 7
    2e54:	3e f4       	brtc	.+14     	; 0x2e64 <__floatsisf+0x12>
    2e56:	90 95       	com	r25
    2e58:	80 95       	com	r24
    2e5a:	70 95       	com	r23
    2e5c:	61 95       	neg	r22
    2e5e:	7f 4f       	sbci	r23, 0xFF	; 255
    2e60:	8f 4f       	sbci	r24, 0xFF	; 255
    2e62:	9f 4f       	sbci	r25, 0xFF	; 255
    2e64:	99 23       	and	r25, r25
    2e66:	a9 f0       	breq	.+42     	; 0x2e92 <__floatsisf+0x40>
    2e68:	f9 2f       	mov	r31, r25
    2e6a:	96 e9       	ldi	r25, 0x96	; 150
    2e6c:	bb 27       	eor	r27, r27
    2e6e:	93 95       	inc	r25
    2e70:	f6 95       	lsr	r31
    2e72:	87 95       	ror	r24
    2e74:	77 95       	ror	r23
    2e76:	67 95       	ror	r22
    2e78:	b7 95       	ror	r27
    2e7a:	f1 11       	cpse	r31, r1
    2e7c:	f8 cf       	rjmp	.-16     	; 0x2e6e <__floatsisf+0x1c>
    2e7e:	fa f4       	brpl	.+62     	; 0x2ebe <__floatsisf+0x6c>
    2e80:	bb 0f       	add	r27, r27
    2e82:	11 f4       	brne	.+4      	; 0x2e88 <__floatsisf+0x36>
    2e84:	60 ff       	sbrs	r22, 0
    2e86:	1b c0       	rjmp	.+54     	; 0x2ebe <__floatsisf+0x6c>
    2e88:	6f 5f       	subi	r22, 0xFF	; 255
    2e8a:	7f 4f       	sbci	r23, 0xFF	; 255
    2e8c:	8f 4f       	sbci	r24, 0xFF	; 255
    2e8e:	9f 4f       	sbci	r25, 0xFF	; 255
    2e90:	16 c0       	rjmp	.+44     	; 0x2ebe <__floatsisf+0x6c>
    2e92:	88 23       	and	r24, r24
    2e94:	11 f0       	breq	.+4      	; 0x2e9a <__floatsisf+0x48>
    2e96:	96 e9       	ldi	r25, 0x96	; 150
    2e98:	11 c0       	rjmp	.+34     	; 0x2ebc <__floatsisf+0x6a>
    2e9a:	77 23       	and	r23, r23
    2e9c:	21 f0       	breq	.+8      	; 0x2ea6 <__floatsisf+0x54>
    2e9e:	9e e8       	ldi	r25, 0x8E	; 142
    2ea0:	87 2f       	mov	r24, r23
    2ea2:	76 2f       	mov	r23, r22
    2ea4:	05 c0       	rjmp	.+10     	; 0x2eb0 <__floatsisf+0x5e>
    2ea6:	66 23       	and	r22, r22
    2ea8:	71 f0       	breq	.+28     	; 0x2ec6 <__floatsisf+0x74>
    2eaa:	96 e8       	ldi	r25, 0x86	; 134
    2eac:	86 2f       	mov	r24, r22
    2eae:	70 e0       	ldi	r23, 0x00	; 0
    2eb0:	60 e0       	ldi	r22, 0x00	; 0
    2eb2:	2a f0       	brmi	.+10     	; 0x2ebe <__floatsisf+0x6c>
    2eb4:	9a 95       	dec	r25
    2eb6:	66 0f       	add	r22, r22
    2eb8:	77 1f       	adc	r23, r23
    2eba:	88 1f       	adc	r24, r24
    2ebc:	da f7       	brpl	.-10     	; 0x2eb4 <__floatsisf+0x62>
    2ebe:	88 0f       	add	r24, r24
    2ec0:	96 95       	lsr	r25
    2ec2:	87 95       	ror	r24
    2ec4:	97 f9       	bld	r25, 7
    2ec6:	08 95       	ret

00002ec8 <__fp_cmp>:
__fp_cmp():
    2ec8:	99 0f       	add	r25, r25
    2eca:	00 08       	sbc	r0, r0
    2ecc:	55 0f       	add	r21, r21
    2ece:	aa 0b       	sbc	r26, r26
    2ed0:	e0 e8       	ldi	r30, 0x80	; 128
    2ed2:	fe ef       	ldi	r31, 0xFE	; 254
    2ed4:	16 16       	cp	r1, r22
    2ed6:	17 06       	cpc	r1, r23
    2ed8:	e8 07       	cpc	r30, r24
    2eda:	f9 07       	cpc	r31, r25
    2edc:	c0 f0       	brcs	.+48     	; 0x2f0e <__fp_cmp+0x46>
    2ede:	12 16       	cp	r1, r18
    2ee0:	13 06       	cpc	r1, r19
    2ee2:	e4 07       	cpc	r30, r20
    2ee4:	f5 07       	cpc	r31, r21
    2ee6:	98 f0       	brcs	.+38     	; 0x2f0e <__fp_cmp+0x46>
    2ee8:	62 1b       	sub	r22, r18
    2eea:	73 0b       	sbc	r23, r19
    2eec:	84 0b       	sbc	r24, r20
    2eee:	95 0b       	sbc	r25, r21
    2ef0:	39 f4       	brne	.+14     	; 0x2f00 <__fp_cmp+0x38>
    2ef2:	0a 26       	eor	r0, r26
    2ef4:	61 f0       	breq	.+24     	; 0x2f0e <__fp_cmp+0x46>
    2ef6:	23 2b       	or	r18, r19
    2ef8:	24 2b       	or	r18, r20
    2efa:	25 2b       	or	r18, r21
    2efc:	21 f4       	brne	.+8      	; 0x2f06 <__fp_cmp+0x3e>
    2efe:	08 95       	ret
    2f00:	0a 26       	eor	r0, r26
    2f02:	09 f4       	brne	.+2      	; 0x2f06 <__fp_cmp+0x3e>
    2f04:	a1 40       	sbci	r26, 0x01	; 1
    2f06:	a6 95       	lsr	r26
    2f08:	8f ef       	ldi	r24, 0xFF	; 255
    2f0a:	81 1d       	adc	r24, r1
    2f0c:	81 1d       	adc	r24, r1
    2f0e:	08 95       	ret

00002f10 <__fp_inf>:
__fp_inf():
    2f10:	97 f9       	bld	r25, 7
    2f12:	9f 67       	ori	r25, 0x7F	; 127
    2f14:	80 e8       	ldi	r24, 0x80	; 128
    2f16:	70 e0       	ldi	r23, 0x00	; 0
    2f18:	60 e0       	ldi	r22, 0x00	; 0
    2f1a:	08 95       	ret

00002f1c <__fp_nan>:
__fp_nan():
    2f1c:	9f ef       	ldi	r25, 0xFF	; 255
    2f1e:	80 ec       	ldi	r24, 0xC0	; 192
    2f20:	08 95       	ret

00002f22 <__fp_pscA>:
__fp_pscA():
    2f22:	00 24       	eor	r0, r0
    2f24:	0a 94       	dec	r0
    2f26:	16 16       	cp	r1, r22
    2f28:	17 06       	cpc	r1, r23
    2f2a:	18 06       	cpc	r1, r24
    2f2c:	09 06       	cpc	r0, r25
    2f2e:	08 95       	ret

00002f30 <__fp_pscB>:
__fp_pscB():
    2f30:	00 24       	eor	r0, r0
    2f32:	0a 94       	dec	r0
    2f34:	12 16       	cp	r1, r18
    2f36:	13 06       	cpc	r1, r19
    2f38:	14 06       	cpc	r1, r20
    2f3a:	05 06       	cpc	r0, r21
    2f3c:	08 95       	ret

00002f3e <__fp_round>:
__fp_round():
    2f3e:	09 2e       	mov	r0, r25
    2f40:	03 94       	inc	r0
    2f42:	00 0c       	add	r0, r0
    2f44:	11 f4       	brne	.+4      	; 0x2f4a <__fp_round+0xc>
    2f46:	88 23       	and	r24, r24
    2f48:	52 f0       	brmi	.+20     	; 0x2f5e <__fp_round+0x20>
    2f4a:	bb 0f       	add	r27, r27
    2f4c:	40 f4       	brcc	.+16     	; 0x2f5e <__fp_round+0x20>
    2f4e:	bf 2b       	or	r27, r31
    2f50:	11 f4       	brne	.+4      	; 0x2f56 <__fp_round+0x18>
    2f52:	60 ff       	sbrs	r22, 0
    2f54:	04 c0       	rjmp	.+8      	; 0x2f5e <__fp_round+0x20>
    2f56:	6f 5f       	subi	r22, 0xFF	; 255
    2f58:	7f 4f       	sbci	r23, 0xFF	; 255
    2f5a:	8f 4f       	sbci	r24, 0xFF	; 255
    2f5c:	9f 4f       	sbci	r25, 0xFF	; 255
    2f5e:	08 95       	ret

00002f60 <__fp_split3>:
__fp_split3():
    2f60:	57 fd       	sbrc	r21, 7
    2f62:	90 58       	subi	r25, 0x80	; 128
    2f64:	44 0f       	add	r20, r20
    2f66:	55 1f       	adc	r21, r21
    2f68:	59 f0       	breq	.+22     	; 0x2f80 <__fp_splitA+0x10>
    2f6a:	5f 3f       	cpi	r21, 0xFF	; 255
    2f6c:	71 f0       	breq	.+28     	; 0x2f8a <__fp_splitA+0x1a>
    2f6e:	47 95       	ror	r20

00002f70 <__fp_splitA>:
    2f70:	88 0f       	add	r24, r24
    2f72:	97 fb       	bst	r25, 7
    2f74:	99 1f       	adc	r25, r25
    2f76:	61 f0       	breq	.+24     	; 0x2f90 <__fp_splitA+0x20>
    2f78:	9f 3f       	cpi	r25, 0xFF	; 255
    2f7a:	79 f0       	breq	.+30     	; 0x2f9a <__fp_splitA+0x2a>
    2f7c:	87 95       	ror	r24
    2f7e:	08 95       	ret
    2f80:	12 16       	cp	r1, r18
    2f82:	13 06       	cpc	r1, r19
    2f84:	14 06       	cpc	r1, r20
    2f86:	55 1f       	adc	r21, r21
    2f88:	f2 cf       	rjmp	.-28     	; 0x2f6e <__fp_split3+0xe>
    2f8a:	46 95       	lsr	r20
    2f8c:	f1 df       	rcall	.-30     	; 0x2f70 <__fp_splitA>
    2f8e:	08 c0       	rjmp	.+16     	; 0x2fa0 <__fp_splitA+0x30>
    2f90:	16 16       	cp	r1, r22
    2f92:	17 06       	cpc	r1, r23
    2f94:	18 06       	cpc	r1, r24
    2f96:	99 1f       	adc	r25, r25
    2f98:	f1 cf       	rjmp	.-30     	; 0x2f7c <__fp_splitA+0xc>
    2f9a:	86 95       	lsr	r24
    2f9c:	71 05       	cpc	r23, r1
    2f9e:	61 05       	cpc	r22, r1
    2fa0:	08 94       	sec
    2fa2:	08 95       	ret

00002fa4 <__fp_zero>:
__fp_zero():
    2fa4:	e8 94       	clt

00002fa6 <__fp_szero>:
    2fa6:	bb 27       	eor	r27, r27
    2fa8:	66 27       	eor	r22, r22
    2faa:	77 27       	eor	r23, r23
    2fac:	cb 01       	movw	r24, r22
    2fae:	97 f9       	bld	r25, 7
    2fb0:	08 95       	ret

00002fb2 <__gesf2>:
__gesf2():
    2fb2:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <__fp_cmp>
    2fb6:	08 f4       	brcc	.+2      	; 0x2fba <__gesf2+0x8>
    2fb8:	8f ef       	ldi	r24, 0xFF	; 255
    2fba:	08 95       	ret

00002fbc <__mulsf3>:
__mulsf3():
    2fbc:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__mulsf3x>
    2fc0:	0c 94 9f 17 	jmp	0x2f3e	; 0x2f3e <__fp_round>
    2fc4:	0e 94 91 17 	call	0x2f22	; 0x2f22 <__fp_pscA>
    2fc8:	38 f0       	brcs	.+14     	; 0x2fd8 <__mulsf3+0x1c>
    2fca:	0e 94 98 17 	call	0x2f30	; 0x2f30 <__fp_pscB>
    2fce:	20 f0       	brcs	.+8      	; 0x2fd8 <__mulsf3+0x1c>
    2fd0:	95 23       	and	r25, r21
    2fd2:	11 f0       	breq	.+4      	; 0x2fd8 <__mulsf3+0x1c>
    2fd4:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__fp_inf>
    2fd8:	0c 94 8e 17 	jmp	0x2f1c	; 0x2f1c <__fp_nan>
    2fdc:	11 24       	eor	r1, r1
    2fde:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__fp_szero>

00002fe2 <__mulsf3x>:
__mulsf3x():
    2fe2:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <__fp_split3>
    2fe6:	70 f3       	brcs	.-36     	; 0x2fc4 <__mulsf3+0x8>

00002fe8 <__mulsf3_pse>:
    2fe8:	95 9f       	mul	r25, r21
    2fea:	c1 f3       	breq	.-16     	; 0x2fdc <__mulsf3+0x20>
    2fec:	95 0f       	add	r25, r21
    2fee:	50 e0       	ldi	r21, 0x00	; 0
    2ff0:	55 1f       	adc	r21, r21
    2ff2:	62 9f       	mul	r22, r18
    2ff4:	f0 01       	movw	r30, r0
    2ff6:	72 9f       	mul	r23, r18
    2ff8:	bb 27       	eor	r27, r27
    2ffa:	f0 0d       	add	r31, r0
    2ffc:	b1 1d       	adc	r27, r1
    2ffe:	63 9f       	mul	r22, r19
    3000:	aa 27       	eor	r26, r26
    3002:	f0 0d       	add	r31, r0
    3004:	b1 1d       	adc	r27, r1
    3006:	aa 1f       	adc	r26, r26
    3008:	64 9f       	mul	r22, r20
    300a:	66 27       	eor	r22, r22
    300c:	b0 0d       	add	r27, r0
    300e:	a1 1d       	adc	r26, r1
    3010:	66 1f       	adc	r22, r22
    3012:	82 9f       	mul	r24, r18
    3014:	22 27       	eor	r18, r18
    3016:	b0 0d       	add	r27, r0
    3018:	a1 1d       	adc	r26, r1
    301a:	62 1f       	adc	r22, r18
    301c:	73 9f       	mul	r23, r19
    301e:	b0 0d       	add	r27, r0
    3020:	a1 1d       	adc	r26, r1
    3022:	62 1f       	adc	r22, r18
    3024:	83 9f       	mul	r24, r19
    3026:	a0 0d       	add	r26, r0
    3028:	61 1d       	adc	r22, r1
    302a:	22 1f       	adc	r18, r18
    302c:	74 9f       	mul	r23, r20
    302e:	33 27       	eor	r19, r19
    3030:	a0 0d       	add	r26, r0
    3032:	61 1d       	adc	r22, r1
    3034:	23 1f       	adc	r18, r19
    3036:	84 9f       	mul	r24, r20
    3038:	60 0d       	add	r22, r0
    303a:	21 1d       	adc	r18, r1
    303c:	82 2f       	mov	r24, r18
    303e:	76 2f       	mov	r23, r22
    3040:	6a 2f       	mov	r22, r26
    3042:	11 24       	eor	r1, r1
    3044:	9f 57       	subi	r25, 0x7F	; 127
    3046:	50 40       	sbci	r21, 0x00	; 0
    3048:	9a f0       	brmi	.+38     	; 0x3070 <__mulsf3_pse+0x88>
    304a:	f1 f0       	breq	.+60     	; 0x3088 <__mulsf3_pse+0xa0>
    304c:	88 23       	and	r24, r24
    304e:	4a f0       	brmi	.+18     	; 0x3062 <__mulsf3_pse+0x7a>
    3050:	ee 0f       	add	r30, r30
    3052:	ff 1f       	adc	r31, r31
    3054:	bb 1f       	adc	r27, r27
    3056:	66 1f       	adc	r22, r22
    3058:	77 1f       	adc	r23, r23
    305a:	88 1f       	adc	r24, r24
    305c:	91 50       	subi	r25, 0x01	; 1
    305e:	50 40       	sbci	r21, 0x00	; 0
    3060:	a9 f7       	brne	.-22     	; 0x304c <__mulsf3_pse+0x64>
    3062:	9e 3f       	cpi	r25, 0xFE	; 254
    3064:	51 05       	cpc	r21, r1
    3066:	80 f0       	brcs	.+32     	; 0x3088 <__mulsf3_pse+0xa0>
    3068:	0c 94 88 17 	jmp	0x2f10	; 0x2f10 <__fp_inf>
    306c:	0c 94 d3 17 	jmp	0x2fa6	; 0x2fa6 <__fp_szero>
    3070:	5f 3f       	cpi	r21, 0xFF	; 255
    3072:	e4 f3       	brlt	.-8      	; 0x306c <__mulsf3_pse+0x84>
    3074:	98 3e       	cpi	r25, 0xE8	; 232
    3076:	d4 f3       	brlt	.-12     	; 0x306c <__mulsf3_pse+0x84>
    3078:	86 95       	lsr	r24
    307a:	77 95       	ror	r23
    307c:	67 95       	ror	r22
    307e:	b7 95       	ror	r27
    3080:	f7 95       	ror	r31
    3082:	e7 95       	ror	r30
    3084:	9f 5f       	subi	r25, 0xFF	; 255
    3086:	c1 f7       	brne	.-16     	; 0x3078 <__mulsf3_pse+0x90>
    3088:	fe 2b       	or	r31, r30
    308a:	88 0f       	add	r24, r24
    308c:	91 1d       	adc	r25, r1
    308e:	96 95       	lsr	r25
    3090:	87 95       	ror	r24
    3092:	97 f9       	bld	r25, 7
    3094:	08 95       	ret

00003096 <__unordsf2>:
    3096:	0e 94 64 17 	call	0x2ec8	; 0x2ec8 <__fp_cmp>
    309a:	88 0b       	sbc	r24, r24
    309c:	99 0b       	sbc	r25, r25
    309e:	08 95       	ret

000030a0 <__udivmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    30a0:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    30a2:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    30a4:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    30a6:	07 c0       	rjmp	.+14     	; 0x30b6 <__udivmodhi4_ep>

000030a8 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    30a8:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    30aa:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    30ac:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    30ae:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    30b0:	10 f0       	brcs	.+4      	; 0x30b6 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    30b2:	a6 1b       	sub	r26, r22
__udivmodhi4_loop():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    30b4:	b7 0b       	sbc	r27, r23

000030b6 <__udivmodhi4_ep>:
__udivmodhi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    30b6:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    30b8:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    30ba:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    30bc:	a9 f7       	brne	.-22     	; 0x30a8 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    30be:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    30c0:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    30c2:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    30c4:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    30c6:	08 95       	ret

000030c8 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    30c8:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    30ca:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    30cc:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    30ce:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    30d0:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    30d2:	0d c0       	rjmp	.+26     	; 0x30ee <__udivmodsi4_ep>

000030d4 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    30d4:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    30d6:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    30d8:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    30da:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    30dc:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    30de:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    30e0:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    30e2:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    30e4:	20 f0       	brcs	.+8      	; 0x30ee <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    30e6:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    30e8:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    30ea:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    30ec:	f5 0b       	sbc	r31, r21

000030ee <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    30ee:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    30f0:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    30f2:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    30f4:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    30f6:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    30f8:	69 f7       	brne	.-38     	; 0x30d4 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    30fa:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    30fc:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    30fe:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    3100:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    3102:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    3104:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3106:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3108:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    310a:	08 95       	ret

0000310c <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    310c:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    310e:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    3110:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    3112:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    3114:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    3116:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    3118:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    311a:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    311c:	09 94       	ijmp

0000311e <sprintf>:
sprintf():
    311e:	0f 93       	push	r16
    3120:	1f 93       	push	r17
    3122:	cf 93       	push	r28
    3124:	df 93       	push	r29
    3126:	cd b7       	in	r28, 0x3d	; 61
    3128:	de b7       	in	r29, 0x3e	; 62
    312a:	2e 97       	sbiw	r28, 0x0e	; 14
    312c:	0f b6       	in	r0, 0x3f	; 63
    312e:	f8 94       	cli
    3130:	de bf       	out	0x3e, r29	; 62
    3132:	0f be       	out	0x3f, r0	; 63
    3134:	cd bf       	out	0x3d, r28	; 61
    3136:	0d 89       	ldd	r16, Y+21	; 0x15
    3138:	1e 89       	ldd	r17, Y+22	; 0x16
    313a:	86 e0       	ldi	r24, 0x06	; 6
    313c:	8c 83       	std	Y+4, r24	; 0x04
    313e:	1a 83       	std	Y+2, r17	; 0x02
    3140:	09 83       	std	Y+1, r16	; 0x01
    3142:	8f ef       	ldi	r24, 0xFF	; 255
    3144:	9f e7       	ldi	r25, 0x7F	; 127
    3146:	9e 83       	std	Y+6, r25	; 0x06
    3148:	8d 83       	std	Y+5, r24	; 0x05
    314a:	ae 01       	movw	r20, r28
    314c:	47 5e       	subi	r20, 0xE7	; 231
    314e:	5f 4f       	sbci	r21, 0xFF	; 255
    3150:	6f 89       	ldd	r22, Y+23	; 0x17
    3152:	78 8d       	ldd	r23, Y+24	; 0x18
    3154:	ce 01       	movw	r24, r28
    3156:	01 96       	adiw	r24, 0x01	; 1
    3158:	0e 94 bf 18 	call	0x317e	; 0x317e <vfprintf>
    315c:	2f 81       	ldd	r18, Y+7	; 0x07
    315e:	38 85       	ldd	r19, Y+8	; 0x08
    3160:	02 0f       	add	r16, r18
    3162:	13 1f       	adc	r17, r19
    3164:	f8 01       	movw	r30, r16
    3166:	10 82       	st	Z, r1
    3168:	2e 96       	adiw	r28, 0x0e	; 14
    316a:	0f b6       	in	r0, 0x3f	; 63
    316c:	f8 94       	cli
    316e:	de bf       	out	0x3e, r29	; 62
    3170:	0f be       	out	0x3f, r0	; 63
    3172:	cd bf       	out	0x3d, r28	; 61
    3174:	df 91       	pop	r29
    3176:	cf 91       	pop	r28
    3178:	1f 91       	pop	r17
    317a:	0f 91       	pop	r16
    317c:	08 95       	ret

0000317e <vfprintf>:
vfprintf():
    317e:	2f 92       	push	r2
    3180:	3f 92       	push	r3
    3182:	4f 92       	push	r4
    3184:	5f 92       	push	r5
    3186:	6f 92       	push	r6
    3188:	7f 92       	push	r7
    318a:	8f 92       	push	r8
    318c:	9f 92       	push	r9
    318e:	af 92       	push	r10
    3190:	bf 92       	push	r11
    3192:	cf 92       	push	r12
    3194:	df 92       	push	r13
    3196:	ef 92       	push	r14
    3198:	ff 92       	push	r15
    319a:	0f 93       	push	r16
    319c:	1f 93       	push	r17
    319e:	cf 93       	push	r28
    31a0:	df 93       	push	r29
    31a2:	cd b7       	in	r28, 0x3d	; 61
    31a4:	de b7       	in	r29, 0x3e	; 62
    31a6:	2b 97       	sbiw	r28, 0x0b	; 11
    31a8:	0f b6       	in	r0, 0x3f	; 63
    31aa:	f8 94       	cli
    31ac:	de bf       	out	0x3e, r29	; 62
    31ae:	0f be       	out	0x3f, r0	; 63
    31b0:	cd bf       	out	0x3d, r28	; 61
    31b2:	7c 01       	movw	r14, r24
    31b4:	3b 01       	movw	r6, r22
    31b6:	8a 01       	movw	r16, r20
    31b8:	fc 01       	movw	r30, r24
    31ba:	17 82       	std	Z+7, r1	; 0x07
    31bc:	16 82       	std	Z+6, r1	; 0x06
    31be:	83 81       	ldd	r24, Z+3	; 0x03
    31c0:	81 ff       	sbrs	r24, 1
    31c2:	dd c1       	rjmp	.+954    	; 0x357e <vfprintf+0x400>
    31c4:	ce 01       	movw	r24, r28
    31c6:	01 96       	adiw	r24, 0x01	; 1
    31c8:	5c 01       	movw	r10, r24
    31ca:	f7 01       	movw	r30, r14
    31cc:	93 81       	ldd	r25, Z+3	; 0x03
    31ce:	f3 01       	movw	r30, r6
    31d0:	93 fd       	sbrc	r25, 3
    31d2:	85 91       	lpm	r24, Z+
    31d4:	93 ff       	sbrs	r25, 3
    31d6:	81 91       	ld	r24, Z+
    31d8:	3f 01       	movw	r6, r30
    31da:	88 23       	and	r24, r24
    31dc:	09 f4       	brne	.+2      	; 0x31e0 <vfprintf+0x62>
    31de:	53 c1       	rjmp	.+678    	; 0x3486 <vfprintf+0x308>
    31e0:	85 32       	cpi	r24, 0x25	; 37
    31e2:	39 f4       	brne	.+14     	; 0x31f2 <vfprintf+0x74>
    31e4:	93 fd       	sbrc	r25, 3
    31e6:	85 91       	lpm	r24, Z+
    31e8:	93 ff       	sbrs	r25, 3
    31ea:	81 91       	ld	r24, Z+
    31ec:	3f 01       	movw	r6, r30
    31ee:	85 32       	cpi	r24, 0x25	; 37
    31f0:	29 f4       	brne	.+10     	; 0x31fc <vfprintf+0x7e>
    31f2:	b7 01       	movw	r22, r14
    31f4:	90 e0       	ldi	r25, 0x00	; 0
    31f6:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <fputc>
    31fa:	e7 cf       	rjmp	.-50     	; 0x31ca <vfprintf+0x4c>
    31fc:	91 2c       	mov	r9, r1
    31fe:	21 2c       	mov	r2, r1
    3200:	31 2c       	mov	r3, r1
    3202:	ff e1       	ldi	r31, 0x1F	; 31
    3204:	f3 15       	cp	r31, r3
    3206:	38 f0       	brcs	.+14     	; 0x3216 <vfprintf+0x98>
    3208:	8b 32       	cpi	r24, 0x2B	; 43
    320a:	11 f1       	breq	.+68     	; 0x3250 <vfprintf+0xd2>
    320c:	90 f4       	brcc	.+36     	; 0x3232 <vfprintf+0xb4>
    320e:	80 32       	cpi	r24, 0x20	; 32
    3210:	09 f1       	breq	.+66     	; 0x3254 <vfprintf+0xd6>
    3212:	83 32       	cpi	r24, 0x23	; 35
    3214:	29 f1       	breq	.+74     	; 0x3260 <vfprintf+0xe2>
    3216:	37 fc       	sbrc	r3, 7
    3218:	3c c0       	rjmp	.+120    	; 0x3292 <vfprintf+0x114>
    321a:	20 ed       	ldi	r18, 0xD0	; 208
    321c:	28 0f       	add	r18, r24
    321e:	2a 30       	cpi	r18, 0x0A	; 10
    3220:	50 f5       	brcc	.+84     	; 0x3276 <vfprintf+0xf8>
    3222:	36 fe       	sbrs	r3, 6
    3224:	20 c0       	rjmp	.+64     	; 0x3266 <vfprintf+0xe8>
    3226:	8a e0       	ldi	r24, 0x0A	; 10
    3228:	98 9e       	mul	r9, r24
    322a:	20 0d       	add	r18, r0
    322c:	11 24       	eor	r1, r1
    322e:	92 2e       	mov	r9, r18
    3230:	06 c0       	rjmp	.+12     	; 0x323e <vfprintf+0xc0>
    3232:	8d 32       	cpi	r24, 0x2D	; 45
    3234:	91 f0       	breq	.+36     	; 0x325a <vfprintf+0xdc>
    3236:	80 33       	cpi	r24, 0x30	; 48
    3238:	71 f7       	brne	.-36     	; 0x3216 <vfprintf+0x98>
    323a:	68 94       	set
    323c:	30 f8       	bld	r3, 0
    323e:	f3 01       	movw	r30, r6
    3240:	93 fd       	sbrc	r25, 3
    3242:	85 91       	lpm	r24, Z+
    3244:	93 ff       	sbrs	r25, 3
    3246:	81 91       	ld	r24, Z+
    3248:	3f 01       	movw	r6, r30
    324a:	81 11       	cpse	r24, r1
    324c:	da cf       	rjmp	.-76     	; 0x3202 <vfprintf+0x84>
    324e:	21 c0       	rjmp	.+66     	; 0x3292 <vfprintf+0x114>
    3250:	68 94       	set
    3252:	31 f8       	bld	r3, 1
    3254:	68 94       	set
    3256:	32 f8       	bld	r3, 2
    3258:	f2 cf       	rjmp	.-28     	; 0x323e <vfprintf+0xc0>
    325a:	68 94       	set
    325c:	33 f8       	bld	r3, 3
    325e:	ef cf       	rjmp	.-34     	; 0x323e <vfprintf+0xc0>
    3260:	68 94       	set
    3262:	34 f8       	bld	r3, 4
    3264:	ec cf       	rjmp	.-40     	; 0x323e <vfprintf+0xc0>
    3266:	ea e0       	ldi	r30, 0x0A	; 10
    3268:	2e 9e       	mul	r2, r30
    326a:	20 0d       	add	r18, r0
    326c:	11 24       	eor	r1, r1
    326e:	22 2e       	mov	r2, r18
    3270:	68 94       	set
    3272:	35 f8       	bld	r3, 5
    3274:	e4 cf       	rjmp	.-56     	; 0x323e <vfprintf+0xc0>
    3276:	8e 32       	cpi	r24, 0x2E	; 46
    3278:	29 f4       	brne	.+10     	; 0x3284 <vfprintf+0x106>
    327a:	36 fc       	sbrc	r3, 6
    327c:	04 c1       	rjmp	.+520    	; 0x3486 <vfprintf+0x308>
    327e:	68 94       	set
    3280:	36 f8       	bld	r3, 6
    3282:	dd cf       	rjmp	.-70     	; 0x323e <vfprintf+0xc0>
    3284:	8c 36       	cpi	r24, 0x6C	; 108
    3286:	19 f4       	brne	.+6      	; 0x328e <vfprintf+0x110>
    3288:	68 94       	set
    328a:	37 f8       	bld	r3, 7
    328c:	d8 cf       	rjmp	.-80     	; 0x323e <vfprintf+0xc0>
    328e:	88 36       	cpi	r24, 0x68	; 104
    3290:	b1 f2       	breq	.-84     	; 0x323e <vfprintf+0xc0>
    3292:	98 2f       	mov	r25, r24
    3294:	9f 7d       	andi	r25, 0xDF	; 223
    3296:	95 54       	subi	r25, 0x45	; 69
    3298:	93 30       	cpi	r25, 0x03	; 3
    329a:	e0 f0       	brcs	.+56     	; 0x32d4 <vfprintf+0x156>
    329c:	83 36       	cpi	r24, 0x63	; 99
    329e:	a1 f1       	breq	.+104    	; 0x3308 <vfprintf+0x18a>
    32a0:	83 37       	cpi	r24, 0x73	; 115
    32a2:	c1 f1       	breq	.+112    	; 0x3314 <vfprintf+0x196>
    32a4:	83 35       	cpi	r24, 0x53	; 83
    32a6:	09 f0       	breq	.+2      	; 0x32aa <vfprintf+0x12c>
    32a8:	63 c0       	rjmp	.+198    	; 0x3370 <vfprintf+0x1f2>
    32aa:	28 01       	movw	r4, r16
    32ac:	f2 e0       	ldi	r31, 0x02	; 2
    32ae:	4f 0e       	add	r4, r31
    32b0:	51 1c       	adc	r5, r1
    32b2:	f8 01       	movw	r30, r16
    32b4:	c0 80       	ld	r12, Z
    32b6:	d1 80       	ldd	r13, Z+1	; 0x01
    32b8:	69 2d       	mov	r22, r9
    32ba:	70 e0       	ldi	r23, 0x00	; 0
    32bc:	36 fc       	sbrc	r3, 6
    32be:	02 c0       	rjmp	.+4      	; 0x32c4 <vfprintf+0x146>
    32c0:	6f ef       	ldi	r22, 0xFF	; 255
    32c2:	7f ef       	ldi	r23, 0xFF	; 255
    32c4:	c6 01       	movw	r24, r12
    32c6:	0e 94 c2 1a 	call	0x3584	; 0x3584 <strnlen_P>
    32ca:	4c 01       	movw	r8, r24
    32cc:	68 94       	set
    32ce:	37 f8       	bld	r3, 7
    32d0:	82 01       	movw	r16, r4
    32d2:	0a c0       	rjmp	.+20     	; 0x32e8 <vfprintf+0x16a>
    32d4:	0c 5f       	subi	r16, 0xFC	; 252
    32d6:	1f 4f       	sbci	r17, 0xFF	; 255
    32d8:	ff e3       	ldi	r31, 0x3F	; 63
    32da:	f9 83       	std	Y+1, r31	; 0x01
    32dc:	88 24       	eor	r8, r8
    32de:	83 94       	inc	r8
    32e0:	91 2c       	mov	r9, r1
    32e2:	65 01       	movw	r12, r10
    32e4:	e8 94       	clt
    32e6:	37 f8       	bld	r3, 7
    32e8:	33 fe       	sbrs	r3, 3
    32ea:	2d c0       	rjmp	.+90     	; 0x3346 <vfprintf+0x1c8>
    32ec:	52 2c       	mov	r5, r2
    32ee:	81 14       	cp	r8, r1
    32f0:	91 04       	cpc	r9, r1
    32f2:	71 f5       	brne	.+92     	; 0x3350 <vfprintf+0x1d2>
    32f4:	55 20       	and	r5, r5
    32f6:	09 f4       	brne	.+2      	; 0x32fa <vfprintf+0x17c>
    32f8:	68 cf       	rjmp	.-304    	; 0x31ca <vfprintf+0x4c>
    32fa:	b7 01       	movw	r22, r14
    32fc:	80 e2       	ldi	r24, 0x20	; 32
    32fe:	90 e0       	ldi	r25, 0x00	; 0
    3300:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <fputc>
    3304:	5a 94       	dec	r5
    3306:	f6 cf       	rjmp	.-20     	; 0x32f4 <vfprintf+0x176>
    3308:	f8 01       	movw	r30, r16
    330a:	80 81       	ld	r24, Z
    330c:	89 83       	std	Y+1, r24	; 0x01
    330e:	0e 5f       	subi	r16, 0xFE	; 254
    3310:	1f 4f       	sbci	r17, 0xFF	; 255
    3312:	e4 cf       	rjmp	.-56     	; 0x32dc <vfprintf+0x15e>
    3314:	28 01       	movw	r4, r16
    3316:	f2 e0       	ldi	r31, 0x02	; 2
    3318:	4f 0e       	add	r4, r31
    331a:	51 1c       	adc	r5, r1
    331c:	f8 01       	movw	r30, r16
    331e:	c0 80       	ld	r12, Z
    3320:	d1 80       	ldd	r13, Z+1	; 0x01
    3322:	69 2d       	mov	r22, r9
    3324:	70 e0       	ldi	r23, 0x00	; 0
    3326:	36 fc       	sbrc	r3, 6
    3328:	02 c0       	rjmp	.+4      	; 0x332e <vfprintf+0x1b0>
    332a:	6f ef       	ldi	r22, 0xFF	; 255
    332c:	7f ef       	ldi	r23, 0xFF	; 255
    332e:	c6 01       	movw	r24, r12
    3330:	0e 94 cd 1a 	call	0x359a	; 0x359a <strnlen>
    3334:	4c 01       	movw	r8, r24
    3336:	82 01       	movw	r16, r4
    3338:	d5 cf       	rjmp	.-86     	; 0x32e4 <vfprintf+0x166>
    333a:	b7 01       	movw	r22, r14
    333c:	80 e2       	ldi	r24, 0x20	; 32
    333e:	90 e0       	ldi	r25, 0x00	; 0
    3340:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <fputc>
    3344:	2a 94       	dec	r2
    3346:	28 14       	cp	r2, r8
    3348:	19 04       	cpc	r1, r9
    334a:	09 f0       	breq	.+2      	; 0x334e <vfprintf+0x1d0>
    334c:	b0 f7       	brcc	.-20     	; 0x333a <vfprintf+0x1bc>
    334e:	ce cf       	rjmp	.-100    	; 0x32ec <vfprintf+0x16e>
    3350:	f6 01       	movw	r30, r12
    3352:	37 fc       	sbrc	r3, 7
    3354:	85 91       	lpm	r24, Z+
    3356:	37 fe       	sbrs	r3, 7
    3358:	81 91       	ld	r24, Z+
    335a:	6f 01       	movw	r12, r30
    335c:	b7 01       	movw	r22, r14
    335e:	90 e0       	ldi	r25, 0x00	; 0
    3360:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <fputc>
    3364:	51 10       	cpse	r5, r1
    3366:	5a 94       	dec	r5
    3368:	f1 e0       	ldi	r31, 0x01	; 1
    336a:	8f 1a       	sub	r8, r31
    336c:	91 08       	sbc	r9, r1
    336e:	bf cf       	rjmp	.-130    	; 0x32ee <vfprintf+0x170>
    3370:	84 36       	cpi	r24, 0x64	; 100
    3372:	19 f0       	breq	.+6      	; 0x337a <vfprintf+0x1fc>
    3374:	89 36       	cpi	r24, 0x69	; 105
    3376:	09 f0       	breq	.+2      	; 0x337a <vfprintf+0x1fc>
    3378:	77 c0       	rjmp	.+238    	; 0x3468 <vfprintf+0x2ea>
    337a:	f8 01       	movw	r30, r16
    337c:	37 fe       	sbrs	r3, 7
    337e:	6b c0       	rjmp	.+214    	; 0x3456 <vfprintf+0x2d8>
    3380:	60 81       	ld	r22, Z
    3382:	71 81       	ldd	r23, Z+1	; 0x01
    3384:	82 81       	ldd	r24, Z+2	; 0x02
    3386:	93 81       	ldd	r25, Z+3	; 0x03
    3388:	0c 5f       	subi	r16, 0xFC	; 252
    338a:	1f 4f       	sbci	r17, 0xFF	; 255
    338c:	f3 2d       	mov	r31, r3
    338e:	ff 76       	andi	r31, 0x6F	; 111
    3390:	3f 2e       	mov	r3, r31
    3392:	97 ff       	sbrs	r25, 7
    3394:	09 c0       	rjmp	.+18     	; 0x33a8 <vfprintf+0x22a>
    3396:	90 95       	com	r25
    3398:	80 95       	com	r24
    339a:	70 95       	com	r23
    339c:	61 95       	neg	r22
    339e:	7f 4f       	sbci	r23, 0xFF	; 255
    33a0:	8f 4f       	sbci	r24, 0xFF	; 255
    33a2:	9f 4f       	sbci	r25, 0xFF	; 255
    33a4:	68 94       	set
    33a6:	37 f8       	bld	r3, 7
    33a8:	2a e0       	ldi	r18, 0x0A	; 10
    33aa:	30 e0       	ldi	r19, 0x00	; 0
    33ac:	a5 01       	movw	r20, r10
    33ae:	0e 94 08 1b 	call	0x3610	; 0x3610 <__ultoa_invert>
    33b2:	c8 2e       	mov	r12, r24
    33b4:	ca 18       	sub	r12, r10
    33b6:	8c 2c       	mov	r8, r12
    33b8:	43 2c       	mov	r4, r3
    33ba:	36 fe       	sbrs	r3, 6
    33bc:	0c c0       	rjmp	.+24     	; 0x33d6 <vfprintf+0x258>
    33be:	e8 94       	clt
    33c0:	40 f8       	bld	r4, 0
    33c2:	c9 14       	cp	r12, r9
    33c4:	40 f4       	brcc	.+16     	; 0x33d6 <vfprintf+0x258>
    33c6:	34 fe       	sbrs	r3, 4
    33c8:	05 c0       	rjmp	.+10     	; 0x33d4 <vfprintf+0x256>
    33ca:	32 fc       	sbrc	r3, 2
    33cc:	03 c0       	rjmp	.+6      	; 0x33d4 <vfprintf+0x256>
    33ce:	f3 2d       	mov	r31, r3
    33d0:	fe 7e       	andi	r31, 0xEE	; 238
    33d2:	4f 2e       	mov	r4, r31
    33d4:	89 2c       	mov	r8, r9
    33d6:	44 fe       	sbrs	r4, 4
    33d8:	aa c0       	rjmp	.+340    	; 0x352e <vfprintf+0x3b0>
    33da:	fe 01       	movw	r30, r28
    33dc:	ec 0d       	add	r30, r12
    33de:	f1 1d       	adc	r31, r1
    33e0:	80 81       	ld	r24, Z
    33e2:	80 33       	cpi	r24, 0x30	; 48
    33e4:	09 f0       	breq	.+2      	; 0x33e8 <vfprintf+0x26a>
    33e6:	9c c0       	rjmp	.+312    	; 0x3520 <vfprintf+0x3a2>
    33e8:	24 2d       	mov	r18, r4
    33ea:	29 7e       	andi	r18, 0xE9	; 233
    33ec:	42 2e       	mov	r4, r18
    33ee:	84 2d       	mov	r24, r4
    33f0:	88 70       	andi	r24, 0x08	; 8
    33f2:	58 2e       	mov	r5, r24
    33f4:	43 fc       	sbrc	r4, 3
    33f6:	aa c0       	rjmp	.+340    	; 0x354c <vfprintf+0x3ce>
    33f8:	40 fe       	sbrs	r4, 0
    33fa:	a4 c0       	rjmp	.+328    	; 0x3544 <vfprintf+0x3c6>
    33fc:	9c 2c       	mov	r9, r12
    33fe:	82 14       	cp	r8, r2
    3400:	18 f4       	brcc	.+6      	; 0x3408 <vfprintf+0x28a>
    3402:	2c 0c       	add	r2, r12
    3404:	92 2c       	mov	r9, r2
    3406:	98 18       	sub	r9, r8
    3408:	44 fe       	sbrs	r4, 4
    340a:	a6 c0       	rjmp	.+332    	; 0x3558 <vfprintf+0x3da>
    340c:	b7 01       	movw	r22, r14
    340e:	80 e3       	ldi	r24, 0x30	; 48
    3410:	90 e0       	ldi	r25, 0x00	; 0
    3412:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <fputc>
    3416:	42 fe       	sbrs	r4, 2
    3418:	09 c0       	rjmp	.+18     	; 0x342c <vfprintf+0x2ae>
    341a:	88 e7       	ldi	r24, 0x78	; 120
    341c:	90 e0       	ldi	r25, 0x00	; 0
    341e:	41 fe       	sbrs	r4, 1
    3420:	02 c0       	rjmp	.+4      	; 0x3426 <vfprintf+0x2a8>
    3422:	88 e5       	ldi	r24, 0x58	; 88
    3424:	90 e0       	ldi	r25, 0x00	; 0
    3426:	b7 01       	movw	r22, r14
    3428:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <fputc>
    342c:	c9 14       	cp	r12, r9
    342e:	08 f4       	brcc	.+2      	; 0x3432 <vfprintf+0x2b4>
    3430:	9f c0       	rjmp	.+318    	; 0x3570 <vfprintf+0x3f2>
    3432:	ca 94       	dec	r12
    3434:	d1 2c       	mov	r13, r1
    3436:	9f ef       	ldi	r25, 0xFF	; 255
    3438:	c9 1a       	sub	r12, r25
    343a:	d9 0a       	sbc	r13, r25
    343c:	ca 0c       	add	r12, r10
    343e:	db 1c       	adc	r13, r11
    3440:	f6 01       	movw	r30, r12
    3442:	82 91       	ld	r24, -Z
    3444:	6f 01       	movw	r12, r30
    3446:	b7 01       	movw	r22, r14
    3448:	90 e0       	ldi	r25, 0x00	; 0
    344a:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <fputc>
    344e:	ac 14       	cp	r10, r12
    3450:	bd 04       	cpc	r11, r13
    3452:	b1 f7       	brne	.-20     	; 0x3440 <vfprintf+0x2c2>
    3454:	4f cf       	rjmp	.-354    	; 0x32f4 <vfprintf+0x176>
    3456:	60 81       	ld	r22, Z
    3458:	71 81       	ldd	r23, Z+1	; 0x01
    345a:	07 2e       	mov	r0, r23
    345c:	00 0c       	add	r0, r0
    345e:	88 0b       	sbc	r24, r24
    3460:	99 0b       	sbc	r25, r25
    3462:	0e 5f       	subi	r16, 0xFE	; 254
    3464:	1f 4f       	sbci	r17, 0xFF	; 255
    3466:	92 cf       	rjmp	.-220    	; 0x338c <vfprintf+0x20e>
    3468:	d3 2c       	mov	r13, r3
    346a:	e8 94       	clt
    346c:	d4 f8       	bld	r13, 4
    346e:	2a e0       	ldi	r18, 0x0A	; 10
    3470:	30 e0       	ldi	r19, 0x00	; 0
    3472:	85 37       	cpi	r24, 0x75	; 117
    3474:	e1 f1       	breq	.+120    	; 0x34ee <vfprintf+0x370>
    3476:	23 2d       	mov	r18, r3
    3478:	29 7f       	andi	r18, 0xF9	; 249
    347a:	d2 2e       	mov	r13, r18
    347c:	8f 36       	cpi	r24, 0x6F	; 111
    347e:	a9 f1       	breq	.+106    	; 0x34ea <vfprintf+0x36c>
    3480:	f0 f4       	brcc	.+60     	; 0x34be <vfprintf+0x340>
    3482:	88 35       	cpi	r24, 0x58	; 88
    3484:	51 f1       	breq	.+84     	; 0x34da <vfprintf+0x35c>
    3486:	f7 01       	movw	r30, r14
    3488:	86 81       	ldd	r24, Z+6	; 0x06
    348a:	97 81       	ldd	r25, Z+7	; 0x07
    348c:	2b 96       	adiw	r28, 0x0b	; 11
    348e:	0f b6       	in	r0, 0x3f	; 63
    3490:	f8 94       	cli
    3492:	de bf       	out	0x3e, r29	; 62
    3494:	0f be       	out	0x3f, r0	; 63
    3496:	cd bf       	out	0x3d, r28	; 61
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	1f 91       	pop	r17
    349e:	0f 91       	pop	r16
    34a0:	ff 90       	pop	r15
    34a2:	ef 90       	pop	r14
    34a4:	df 90       	pop	r13
    34a6:	cf 90       	pop	r12
    34a8:	bf 90       	pop	r11
    34aa:	af 90       	pop	r10
    34ac:	9f 90       	pop	r9
    34ae:	8f 90       	pop	r8
    34b0:	7f 90       	pop	r7
    34b2:	6f 90       	pop	r6
    34b4:	5f 90       	pop	r5
    34b6:	4f 90       	pop	r4
    34b8:	3f 90       	pop	r3
    34ba:	2f 90       	pop	r2
    34bc:	08 95       	ret
    34be:	80 37       	cpi	r24, 0x70	; 112
    34c0:	49 f0       	breq	.+18     	; 0x34d4 <vfprintf+0x356>
    34c2:	88 37       	cpi	r24, 0x78	; 120
    34c4:	01 f7       	brne	.-64     	; 0x3486 <vfprintf+0x308>
    34c6:	d4 fe       	sbrs	r13, 4
    34c8:	02 c0       	rjmp	.+4      	; 0x34ce <vfprintf+0x350>
    34ca:	68 94       	set
    34cc:	d2 f8       	bld	r13, 2
    34ce:	20 e1       	ldi	r18, 0x10	; 16
    34d0:	30 e0       	ldi	r19, 0x00	; 0
    34d2:	0d c0       	rjmp	.+26     	; 0x34ee <vfprintf+0x370>
    34d4:	68 94       	set
    34d6:	d4 f8       	bld	r13, 4
    34d8:	f6 cf       	rjmp	.-20     	; 0x34c6 <vfprintf+0x348>
    34da:	34 fe       	sbrs	r3, 4
    34dc:	03 c0       	rjmp	.+6      	; 0x34e4 <vfprintf+0x366>
    34de:	82 2f       	mov	r24, r18
    34e0:	86 60       	ori	r24, 0x06	; 6
    34e2:	d8 2e       	mov	r13, r24
    34e4:	20 e1       	ldi	r18, 0x10	; 16
    34e6:	32 e0       	ldi	r19, 0x02	; 2
    34e8:	02 c0       	rjmp	.+4      	; 0x34ee <vfprintf+0x370>
    34ea:	28 e0       	ldi	r18, 0x08	; 8
    34ec:	30 e0       	ldi	r19, 0x00	; 0
    34ee:	f8 01       	movw	r30, r16
    34f0:	d7 fe       	sbrs	r13, 7
    34f2:	0f c0       	rjmp	.+30     	; 0x3512 <vfprintf+0x394>
    34f4:	60 81       	ld	r22, Z
    34f6:	71 81       	ldd	r23, Z+1	; 0x01
    34f8:	82 81       	ldd	r24, Z+2	; 0x02
    34fa:	93 81       	ldd	r25, Z+3	; 0x03
    34fc:	0c 5f       	subi	r16, 0xFC	; 252
    34fe:	1f 4f       	sbci	r17, 0xFF	; 255
    3500:	a5 01       	movw	r20, r10
    3502:	0e 94 08 1b 	call	0x3610	; 0x3610 <__ultoa_invert>
    3506:	c8 2e       	mov	r12, r24
    3508:	ca 18       	sub	r12, r10
    350a:	3d 2c       	mov	r3, r13
    350c:	e8 94       	clt
    350e:	37 f8       	bld	r3, 7
    3510:	52 cf       	rjmp	.-348    	; 0x33b6 <vfprintf+0x238>
    3512:	60 81       	ld	r22, Z
    3514:	71 81       	ldd	r23, Z+1	; 0x01
    3516:	90 e0       	ldi	r25, 0x00	; 0
    3518:	80 e0       	ldi	r24, 0x00	; 0
    351a:	0e 5f       	subi	r16, 0xFE	; 254
    351c:	1f 4f       	sbci	r17, 0xFF	; 255
    351e:	f0 cf       	rjmp	.-32     	; 0x3500 <vfprintf+0x382>
    3520:	42 fc       	sbrc	r4, 2
    3522:	02 c0       	rjmp	.+4      	; 0x3528 <vfprintf+0x3aa>
    3524:	83 94       	inc	r8
    3526:	63 cf       	rjmp	.-314    	; 0x33ee <vfprintf+0x270>
    3528:	83 94       	inc	r8
    352a:	83 94       	inc	r8
    352c:	60 cf       	rjmp	.-320    	; 0x33ee <vfprintf+0x270>
    352e:	84 2d       	mov	r24, r4
    3530:	86 78       	andi	r24, 0x86	; 134
    3532:	09 f4       	brne	.+2      	; 0x3536 <vfprintf+0x3b8>
    3534:	5c cf       	rjmp	.-328    	; 0x33ee <vfprintf+0x270>
    3536:	f6 cf       	rjmp	.-20     	; 0x3524 <vfprintf+0x3a6>
    3538:	b7 01       	movw	r22, r14
    353a:	80 e2       	ldi	r24, 0x20	; 32
    353c:	90 e0       	ldi	r25, 0x00	; 0
    353e:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <fputc>
    3542:	83 94       	inc	r8
    3544:	82 14       	cp	r8, r2
    3546:	c0 f3       	brcs	.-16     	; 0x3538 <vfprintf+0x3ba>
    3548:	51 2c       	mov	r5, r1
    354a:	5e cf       	rjmp	.-324    	; 0x3408 <vfprintf+0x28a>
    354c:	52 2c       	mov	r5, r2
    354e:	58 18       	sub	r5, r8
    3550:	82 14       	cp	r8, r2
    3552:	08 f4       	brcc	.+2      	; 0x3556 <vfprintf+0x3d8>
    3554:	59 cf       	rjmp	.-334    	; 0x3408 <vfprintf+0x28a>
    3556:	f8 cf       	rjmp	.-16     	; 0x3548 <vfprintf+0x3ca>
    3558:	84 2d       	mov	r24, r4
    355a:	86 78       	andi	r24, 0x86	; 134
    355c:	09 f4       	brne	.+2      	; 0x3560 <vfprintf+0x3e2>
    355e:	66 cf       	rjmp	.-308    	; 0x342c <vfprintf+0x2ae>
    3560:	8b e2       	ldi	r24, 0x2B	; 43
    3562:	41 fe       	sbrs	r4, 1
    3564:	80 e2       	ldi	r24, 0x20	; 32
    3566:	47 fc       	sbrc	r4, 7
    3568:	8d e2       	ldi	r24, 0x2D	; 45
    356a:	b7 01       	movw	r22, r14
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	5c cf       	rjmp	.-328    	; 0x3428 <vfprintf+0x2aa>
    3570:	b7 01       	movw	r22, r14
    3572:	80 e3       	ldi	r24, 0x30	; 48
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	0e 94 d8 1a 	call	0x35b0	; 0x35b0 <fputc>
    357a:	9a 94       	dec	r9
    357c:	57 cf       	rjmp	.-338    	; 0x342c <vfprintf+0x2ae>
    357e:	8f ef       	ldi	r24, 0xFF	; 255
    3580:	9f ef       	ldi	r25, 0xFF	; 255
    3582:	84 cf       	rjmp	.-248    	; 0x348c <vfprintf+0x30e>

00003584 <strnlen_P>:
strnlen_P():
    3584:	fc 01       	movw	r30, r24
    3586:	05 90       	lpm	r0, Z+
    3588:	61 50       	subi	r22, 0x01	; 1
    358a:	70 40       	sbci	r23, 0x00	; 0
    358c:	01 10       	cpse	r0, r1
    358e:	d8 f7       	brcc	.-10     	; 0x3586 <strnlen_P+0x2>
    3590:	80 95       	com	r24
    3592:	90 95       	com	r25
    3594:	8e 0f       	add	r24, r30
    3596:	9f 1f       	adc	r25, r31
    3598:	08 95       	ret

0000359a <strnlen>:
strnlen():
    359a:	fc 01       	movw	r30, r24
    359c:	61 50       	subi	r22, 0x01	; 1
    359e:	70 40       	sbci	r23, 0x00	; 0
    35a0:	01 90       	ld	r0, Z+
    35a2:	01 10       	cpse	r0, r1
    35a4:	d8 f7       	brcc	.-10     	; 0x359c <strnlen+0x2>
    35a6:	80 95       	com	r24
    35a8:	90 95       	com	r25
    35aa:	8e 0f       	add	r24, r30
    35ac:	9f 1f       	adc	r25, r31
    35ae:	08 95       	ret

000035b0 <fputc>:
fputc():
    35b0:	0f 93       	push	r16
    35b2:	1f 93       	push	r17
    35b4:	cf 93       	push	r28
    35b6:	df 93       	push	r29
    35b8:	18 2f       	mov	r17, r24
    35ba:	09 2f       	mov	r16, r25
    35bc:	eb 01       	movw	r28, r22
    35be:	8b 81       	ldd	r24, Y+3	; 0x03
    35c0:	81 fd       	sbrc	r24, 1
    35c2:	09 c0       	rjmp	.+18     	; 0x35d6 <fputc+0x26>
    35c4:	1f ef       	ldi	r17, 0xFF	; 255
    35c6:	0f ef       	ldi	r16, 0xFF	; 255
    35c8:	81 2f       	mov	r24, r17
    35ca:	90 2f       	mov	r25, r16
    35cc:	df 91       	pop	r29
    35ce:	cf 91       	pop	r28
    35d0:	1f 91       	pop	r17
    35d2:	0f 91       	pop	r16
    35d4:	08 95       	ret
    35d6:	82 ff       	sbrs	r24, 2
    35d8:	14 c0       	rjmp	.+40     	; 0x3602 <fputc+0x52>
    35da:	2e 81       	ldd	r18, Y+6	; 0x06
    35dc:	3f 81       	ldd	r19, Y+7	; 0x07
    35de:	8c 81       	ldd	r24, Y+4	; 0x04
    35e0:	9d 81       	ldd	r25, Y+5	; 0x05
    35e2:	28 17       	cp	r18, r24
    35e4:	39 07       	cpc	r19, r25
    35e6:	3c f4       	brge	.+14     	; 0x35f6 <fputc+0x46>
    35e8:	e8 81       	ld	r30, Y
    35ea:	f9 81       	ldd	r31, Y+1	; 0x01
    35ec:	cf 01       	movw	r24, r30
    35ee:	01 96       	adiw	r24, 0x01	; 1
    35f0:	99 83       	std	Y+1, r25	; 0x01
    35f2:	88 83       	st	Y, r24
    35f4:	10 83       	st	Z, r17
    35f6:	8e 81       	ldd	r24, Y+6	; 0x06
    35f8:	9f 81       	ldd	r25, Y+7	; 0x07
    35fa:	01 96       	adiw	r24, 0x01	; 1
    35fc:	9f 83       	std	Y+7, r25	; 0x07
    35fe:	8e 83       	std	Y+6, r24	; 0x06
    3600:	e3 cf       	rjmp	.-58     	; 0x35c8 <fputc+0x18>
    3602:	e8 85       	ldd	r30, Y+8	; 0x08
    3604:	f9 85       	ldd	r31, Y+9	; 0x09
    3606:	81 2f       	mov	r24, r17
    3608:	09 95       	icall
    360a:	89 2b       	or	r24, r25
    360c:	a1 f3       	breq	.-24     	; 0x35f6 <fputc+0x46>
    360e:	da cf       	rjmp	.-76     	; 0x35c4 <fputc+0x14>

00003610 <__ultoa_invert>:
__ultoa_invert():
    3610:	fa 01       	movw	r30, r20
    3612:	aa 27       	eor	r26, r26
    3614:	28 30       	cpi	r18, 0x08	; 8
    3616:	51 f1       	breq	.+84     	; 0x366c <__ultoa_invert+0x5c>
    3618:	20 31       	cpi	r18, 0x10	; 16
    361a:	81 f1       	breq	.+96     	; 0x367c <__ultoa_invert+0x6c>
    361c:	e8 94       	clt
    361e:	6f 93       	push	r22
    3620:	6e 7f       	andi	r22, 0xFE	; 254
    3622:	6e 5f       	subi	r22, 0xFE	; 254
    3624:	7f 4f       	sbci	r23, 0xFF	; 255
    3626:	8f 4f       	sbci	r24, 0xFF	; 255
    3628:	9f 4f       	sbci	r25, 0xFF	; 255
    362a:	af 4f       	sbci	r26, 0xFF	; 255
    362c:	b1 e0       	ldi	r27, 0x01	; 1
    362e:	3e d0       	rcall	.+124    	; 0x36ac <__ultoa_invert+0x9c>
    3630:	b4 e0       	ldi	r27, 0x04	; 4
    3632:	3c d0       	rcall	.+120    	; 0x36ac <__ultoa_invert+0x9c>
    3634:	67 0f       	add	r22, r23
    3636:	78 1f       	adc	r23, r24
    3638:	89 1f       	adc	r24, r25
    363a:	9a 1f       	adc	r25, r26
    363c:	a1 1d       	adc	r26, r1
    363e:	68 0f       	add	r22, r24
    3640:	79 1f       	adc	r23, r25
    3642:	8a 1f       	adc	r24, r26
    3644:	91 1d       	adc	r25, r1
    3646:	a1 1d       	adc	r26, r1
    3648:	6a 0f       	add	r22, r26
    364a:	71 1d       	adc	r23, r1
    364c:	81 1d       	adc	r24, r1
    364e:	91 1d       	adc	r25, r1
    3650:	a1 1d       	adc	r26, r1
    3652:	20 d0       	rcall	.+64     	; 0x3694 <__ultoa_invert+0x84>
    3654:	09 f4       	brne	.+2      	; 0x3658 <__ultoa_invert+0x48>
    3656:	68 94       	set
    3658:	3f 91       	pop	r19
    365a:	2a e0       	ldi	r18, 0x0A	; 10
    365c:	26 9f       	mul	r18, r22
    365e:	11 24       	eor	r1, r1
    3660:	30 19       	sub	r19, r0
    3662:	30 5d       	subi	r19, 0xD0	; 208
    3664:	31 93       	st	Z+, r19
    3666:	de f6       	brtc	.-74     	; 0x361e <__ultoa_invert+0xe>
    3668:	cf 01       	movw	r24, r30
    366a:	08 95       	ret
    366c:	46 2f       	mov	r20, r22
    366e:	47 70       	andi	r20, 0x07	; 7
    3670:	40 5d       	subi	r20, 0xD0	; 208
    3672:	41 93       	st	Z+, r20
    3674:	b3 e0       	ldi	r27, 0x03	; 3
    3676:	0f d0       	rcall	.+30     	; 0x3696 <__ultoa_invert+0x86>
    3678:	c9 f7       	brne	.-14     	; 0x366c <__ultoa_invert+0x5c>
    367a:	f6 cf       	rjmp	.-20     	; 0x3668 <__ultoa_invert+0x58>
    367c:	46 2f       	mov	r20, r22
    367e:	4f 70       	andi	r20, 0x0F	; 15
    3680:	40 5d       	subi	r20, 0xD0	; 208
    3682:	4a 33       	cpi	r20, 0x3A	; 58
    3684:	18 f0       	brcs	.+6      	; 0x368c <__ultoa_invert+0x7c>
    3686:	49 5d       	subi	r20, 0xD9	; 217
    3688:	31 fd       	sbrc	r19, 1
    368a:	40 52       	subi	r20, 0x20	; 32
    368c:	41 93       	st	Z+, r20
    368e:	02 d0       	rcall	.+4      	; 0x3694 <__ultoa_invert+0x84>
    3690:	a9 f7       	brne	.-22     	; 0x367c <__ultoa_invert+0x6c>
    3692:	ea cf       	rjmp	.-44     	; 0x3668 <__ultoa_invert+0x58>
    3694:	b4 e0       	ldi	r27, 0x04	; 4
    3696:	a6 95       	lsr	r26
    3698:	97 95       	ror	r25
    369a:	87 95       	ror	r24
    369c:	77 95       	ror	r23
    369e:	67 95       	ror	r22
    36a0:	ba 95       	dec	r27
    36a2:	c9 f7       	brne	.-14     	; 0x3696 <__ultoa_invert+0x86>
    36a4:	00 97       	sbiw	r24, 0x00	; 0
    36a6:	61 05       	cpc	r22, r1
    36a8:	71 05       	cpc	r23, r1
    36aa:	08 95       	ret
    36ac:	9b 01       	movw	r18, r22
    36ae:	ac 01       	movw	r20, r24
    36b0:	0a 2e       	mov	r0, r26
    36b2:	06 94       	lsr	r0
    36b4:	57 95       	ror	r21
    36b6:	47 95       	ror	r20
    36b8:	37 95       	ror	r19
    36ba:	27 95       	ror	r18
    36bc:	ba 95       	dec	r27
    36be:	c9 f7       	brne	.-14     	; 0x36b2 <__ultoa_invert+0xa2>
    36c0:	62 0f       	add	r22, r18
    36c2:	73 1f       	adc	r23, r19
    36c4:	84 1f       	adc	r24, r20
    36c6:	95 1f       	adc	r25, r21
    36c8:	a0 1d       	adc	r26, r0
    36ca:	08 95       	ret

000036cc <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    36cc:	f8 94       	cli

000036ce <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    36ce:	ff cf       	rjmp	.-2      	; 0x36ce <__stop_program>
