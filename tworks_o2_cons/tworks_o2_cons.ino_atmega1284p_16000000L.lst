
C:\Users\abdul\AppData\Local\Temp\arduino_build_208755/tworks_o2_cons.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 05 01 	jmp	0x20a	; 0x20a <__ctors_end>
       4:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
       8:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
       c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      10:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      14:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      18:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      1c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      20:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      24:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      28:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      2c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      30:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      34:	0c 94 0e 04 	jmp	0x81c	; 0x81c <__vector_13>
      38:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      3c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      40:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      44:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      48:	0c 94 ca 11 	jmp	0x2394	; 0x2394 <__vector_18>
      4c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      50:	0c 94 b2 14 	jmp	0x2964	; 0x2964 <__vector_20>
      54:	0c 94 e8 14 	jmp	0x29d0	; 0x29d0 <__vector_21>
      58:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      5c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      60:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      64:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      68:	0c 94 a5 10 	jmp	0x214a	; 0x214a <__vector_26>
      6c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      70:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      74:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      78:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      7c:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      80:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      84:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>
      88:	0c 94 2f 01 	jmp	0x25e	; 0x25e <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 40       	sbci	r16, 0x00	; 0
      8e:	7a 10       	cpse	r7, r10
      90:	f3 5a       	subi	r31, 0xA3	; 163
      92:	00 a0       	ldd	r0, Z+32	; 0x20
      94:	72 4e       	sbci	r23, 0xE2	; 226
      96:	18 09       	sbc	r17, r8
      98:	00 10       	cpse	r0, r0
      9a:	a5 d4       	rcall	.+2378   	; 0x9e6 <platform_init()+0x56>
      9c:	e8 00       	.word	0x00e8	; ????
      9e:	00 e8       	ldi	r16, 0x80	; 128
      a0:	76 48       	sbci	r23, 0x86	; 134
      a2:	17 00       	.word	0x0017	; ????
      a4:	00 e4       	ldi	r16, 0x40	; 64
      a6:	0b 54       	subi	r16, 0x4B	; 75
      a8:	02 00       	.word	0x0002	; ????
      aa:	00 ca       	rjmp	.-3072   	; 0xfffff4ac <__eeprom_end+0xff7ef4ac>
      ac:	9a 3b       	cpi	r25, 0xBA	; 186
      ae:	00 00       	nop
      b0:	00 e1       	ldi	r16, 0x10	; 16
      b2:	f5 05       	cpc	r31, r5
      b4:	00 00       	nop
      b6:	80 96       	adiw	r24, 0x20	; 32
      b8:	98 00       	.word	0x0098	; ????
      ba:	00 00       	nop
      bc:	40 42       	sbci	r20, 0x20	; 32
      be:	0f 00       	.word	0x000f	; ????
      c0:	00 00       	nop
      c2:	a0 86       	std	Z+8, r10	; 0x08
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	10 27       	eor	r17, r16
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	e8 03       	fmulsu	r22, r16
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	64 00       	.word	0x0064	; ????
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	0a 00       	.word	0x000a	; ????
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	01 00       	.word	0x0001	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	2c 76       	andi	r18, 0x6C	; 108
      e8:	d8 88       	ldd	r13, Y+16	; 0x10
      ea:	dc 67       	ori	r29, 0x7C	; 124
      ec:	4f 08       	sbc	r4, r15
      ee:	23 df       	rcall	.-442    	; 0xffffff36 <__eeprom_end+0xff7eff36>
      f0:	c1 df       	rcall	.-126    	; 0x74 <__SREG__+0x35>
      f2:	ae 59       	subi	r26, 0x9E	; 158
      f4:	e1 b1       	in	r30, 0x01	; 1
      f6:	b7 96       	adiw	r30, 0x27	; 39
      f8:	e5 e3       	ldi	r30, 0x35	; 53
      fa:	e4 53       	subi	r30, 0x34	; 52
      fc:	c6 3a       	cpi	r28, 0xA6	; 166
      fe:	e6 51       	subi	r30, 0x16	; 22
     100:	99 76       	andi	r25, 0x69	; 105
     102:	96 e8       	ldi	r25, 0x86	; 134
     104:	e6 c2       	rjmp	.+1484   	; 0x6d2 <sensor_zero_calibration()+0x208>
     106:	84 26       	eor	r8, r20
     108:	eb 89       	ldd	r30, Y+19	; 0x13
     10a:	8c 9b       	sbis	0x11, 4	; 17
     10c:	62 ed       	ldi	r22, 0xD2	; 210
     10e:	40 7c       	andi	r20, 0xC0	; 192
     110:	6f fc       	.word	0xfc6f	; ????
     112:	ef bc       	out	0x2f, r14	; 47
     114:	9c 9f       	mul	r25, r28
     116:	40 f2       	brcs	.-112    	; 0xa8 <__trampolines_end+0x1c>
     118:	ba a5       	ldd	r27, Y+42	; 0x2a
     11a:	6f a5       	ldd	r22, Y+47	; 0x2f
     11c:	f4 90       	lpm	r15, Z
     11e:	05 5a       	subi	r16, 0xA5	; 165
     120:	2a f7       	brpl	.-54     	; 0xec <__trampolines_end+0x60>
     122:	5c 93       	st	X, r21
     124:	6b 6c       	ori	r22, 0xCB	; 203
     126:	f9 67       	ori	r31, 0x79	; 121
     128:	6d c1       	rjmp	.+730    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     12a:	1b fc       	.word	0xfc1b	; ????
     12c:	e0 e4       	ldi	r30, 0x40	; 64
     12e:	0d 47       	sbci	r16, 0x7D	; 125
     130:	fe f5       	brtc	.+126    	; 0x1b0 <digital_pin_to_bit_mask_PGM+0xa>
     132:	20 e6       	ldi	r18, 0x60	; 96
     134:	b5 00       	.word	0x00b5	; ????
     136:	d0 ed       	ldi	r29, 0xD0	; 208
     138:	90 2e       	mov	r9, r16
     13a:	03 00       	.word	0x0003	; ????
     13c:	94 35       	cpi	r25, 0x54	; 84
     13e:	77 05       	cpc	r23, r7
     140:	00 80       	ld	r0, Z
     142:	84 1e       	adc	r8, r20
     144:	08 00       	.word	0x0008	; ????
     146:	00 20       	and	r0, r0
     148:	4e 0a       	sbc	r4, r30
     14a:	00 00       	nop
     14c:	00 c8       	rjmp	.-4096   	; 0xfffff14e <__eeprom_end+0xff7ef14e>
     14e:	0c 33       	cpi	r16, 0x3C	; 60
     150:	33 33       	cpi	r19, 0x33	; 51
     152:	33 0f       	add	r19, r19
     154:	98 6e       	ori	r25, 0xE8	; 232
     156:	12 83       	std	Z+2, r17	; 0x02
     158:	11 41       	sbci	r17, 0x11	; 17
     15a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     15c:	21 14       	cp	r2, r1
     15e:	89 3b       	cpi	r24, 0xB9	; 185
     160:	e6 55       	subi	r30, 0x56	; 86
     162:	16 cf       	rjmp	.-468    	; 0xffffff90 <__eeprom_end+0xff7eff90>
     164:	fe e6       	ldi	r31, 0x6E	; 110
     166:	db 18       	sub	r13, r11
     168:	d1 84       	ldd	r13, Z+9	; 0x09
     16a:	4b 38       	cpi	r20, 0x8B	; 139
     16c:	1b f7       	brvc	.-58     	; 0x134 <__trampolines_end+0xa8>
     16e:	7c 1d       	adc	r23, r12
     170:	90 1d       	adc	r25, r0
     172:	a4 bb       	out	0x14, r26	; 20
     174:	e4 24       	eor	r14, r4
     176:	20 32       	cpi	r18, 0x20	; 32
     178:	84 72       	andi	r24, 0x24	; 36
     17a:	5e 22       	and	r5, r30
     17c:	81 00       	.word	0x0081	; ????
     17e:	c9 f1       	breq	.+114    	; 0x1f2 <port_to_output_PGM+0x2>
     180:	24 ec       	ldi	r18, 0xC4	; 196
     182:	a1 e5       	ldi	r26, 0x51	; 81
     184:	3d 27       	eor	r19, r29

00000186 <digital_pin_to_timer_PGM>:
     186:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

000001a6 <digital_pin_to_bit_mask_PGM>:
     1a6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     1b6:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000001c6 <digital_pin_to_port_PGM>:
     1c6:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     1d6:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

000001e6 <port_to_input_PGM>:
     1e6:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

000001f0 <port_to_output_PGM>:
     1f0:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

000001fa <port_to_mode_PGM>:
     1fa:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

00000204 <__ctors_start>:
__ctors_start():
     204:	de 0a       	sbc	r13, r30
     206:	21 0f       	add	r18, r17
     208:	1c 15       	cp	r17, r12

0000020a <__ctors_end>:
__dtors_end():
     20a:	11 24       	eor	r1, r1
     20c:	1f be       	out	0x3f, r1	; 63
     20e:	cf ef       	ldi	r28, 0xFF	; 255
     210:	d0 e4       	ldi	r29, 0x40	; 64
     212:	de bf       	out	0x3e, r29	; 62
     214:	cd bf       	out	0x3d, r28	; 61

00000216 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     216:	13 e0       	ldi	r17, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     218:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     21a:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     21c:	e2 eb       	ldi	r30, 0xB2	; 178
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     21e:	fe e3       	ldi	r31, 0x3E	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     220:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     222:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     224:	02 c0       	rjmp	.+4      	; 0x22a <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     226:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     228:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     22a:	a6 39       	cpi	r26, 0x96	; 150
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     22c:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     22e:	d9 f7       	brne	.-10     	; 0x226 <__do_copy_data+0x10>

00000230 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     230:	25 e0       	ldi	r18, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     232:	a6 e9       	ldi	r26, 0x96	; 150
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     234:	b3 e0       	ldi	r27, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     236:	01 c0       	rjmp	.+2      	; 0x23a <.do_clear_bss_start>

00000238 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     238:	1d 92       	st	X+, r1

0000023a <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     23a:	ad 39       	cpi	r26, 0x9D	; 157
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     23c:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     23e:	e1 f7       	brne	.-8      	; 0x238 <.do_clear_bss_loop>

00000240 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     240:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     242:	c5 e0       	ldi	r28, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     244:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     246:	04 c0       	rjmp	.+8      	; 0x250 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     248:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     24a:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     24c:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     250:	c2 30       	cpi	r28, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     252:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     254:	c9 f7       	brne	.-14     	; 0x248 <__do_global_ctors+0x8>
     256:	0e 94 44 17 	call	0x2e88	; 0x2e88 <main>
     25a:	0c 94 57 1f 	jmp	0x3eae	; 0x3eae <_exit>

0000025e <__bad_interrupt>:
__vector_22():
     25e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000262 <lcd_clear_buf(char*)>:
_Z13lcd_clear_bufPc():
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:36
}

void ui_init (void) {

    // Print a message to the LCD.
    ui_print_welcome ();
     262:	00 97       	sbiw	r24, 0x00	; 0
     264:	49 f0       	breq	.+18     	; 0x278 <lcd_clear_buf(char*)+0x16>
     266:	fc 01       	movw	r30, r24
     268:	9c 01       	movw	r18, r24
     26a:	2c 5e       	subi	r18, 0xEC	; 236
     26c:	3f 4f       	sbci	r19, 0xFF	; 255
     26e:	40 e2       	ldi	r20, 0x20	; 32
     270:	41 93       	st	Z+, r20
     272:	2e 17       	cp	r18, r30
     274:	3f 07       	cpc	r19, r31
     276:	e1 f7       	brne	.-8      	; 0x270 <lcd_clear_buf(char*)+0xe>
     278:	fc 01       	movw	r30, r24
     27a:	14 8a       	std	Z+20, r1	; 0x14
     27c:	08 95       	ret

0000027e <log_dump()>:
_Z8log_dumpv():
     27e:	0f 93       	push	r16
     280:	1f 93       	push	r17
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	20 91 0f 04 	lds	r18, 0x040F	; 0x80040f <systemtick_secs>
     28a:	90 91 0e 04 	lds	r25, 0x040E	; 0x80040e <systemtick_mins>
     28e:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <systemtick_hrs>
     292:	1f 92       	push	r1
     294:	2f 93       	push	r18
     296:	1f 92       	push	r1
     298:	9f 93       	push	r25
     29a:	1f 92       	push	r1
     29c:	8f 93       	push	r24
     29e:	04 e2       	ldi	r16, 0x24	; 36
     2a0:	11 e0       	ldi	r17, 0x01	; 1
     2a2:	1f 93       	push	r17
     2a4:	0f 93       	push	r16
     2a6:	c2 ec       	ldi	r28, 0xC2	; 194
     2a8:	d3 e0       	ldi	r29, 0x03	; 3
     2aa:	df 93       	push	r29
     2ac:	cf 93       	push	r28
     2ae:	0e 94 2c 1a 	call	0x3458	; 0x3458 <sprintf>
     2b2:	be 01       	movw	r22, r28
     2b4:	80 e0       	ldi	r24, 0x00	; 0
     2b6:	95 e0       	ldi	r25, 0x05	; 5
     2b8:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
     2bc:	e0 91 fc 03 	lds	r30, 0x03FC	; 0x8003fc <production_time_secs>
     2c0:	f0 91 fd 03 	lds	r31, 0x03FD	; 0x8003fd <production_time_secs+0x1>
     2c4:	2c e3       	ldi	r18, 0x3C	; 60
     2c6:	30 e0       	ldi	r19, 0x00	; 0
     2c8:	cf 01       	movw	r24, r30
     2ca:	b9 01       	movw	r22, r18
     2cc:	0e 94 8f 19 	call	0x331e	; 0x331e <__udivmodhi4>
     2d0:	9f 93       	push	r25
     2d2:	8f 93       	push	r24
     2d4:	cf 01       	movw	r24, r30
     2d6:	60 e1       	ldi	r22, 0x10	; 16
     2d8:	7e e0       	ldi	r23, 0x0E	; 14
     2da:	0e 94 8f 19 	call	0x331e	; 0x331e <__udivmodhi4>
     2de:	46 2f       	mov	r20, r22
     2e0:	e7 2f       	mov	r30, r23
     2e2:	b9 01       	movw	r22, r18
     2e4:	0e 94 8f 19 	call	0x331e	; 0x331e <__udivmodhi4>
     2e8:	7f 93       	push	r23
     2ea:	6f 93       	push	r22
     2ec:	ef 93       	push	r30
     2ee:	4f 93       	push	r20
     2f0:	1f 93       	push	r17
     2f2:	0f 93       	push	r16
     2f4:	df 93       	push	r29
     2f6:	cf 93       	push	r28
     2f8:	0e 94 2c 1a 	call	0x3458	; 0x3458 <sprintf>
     2fc:	be 01       	movw	r22, r28
     2fe:	80 e0       	ldi	r24, 0x00	; 0
     300:	95 e0       	ldi	r25, 0x05	; 5
     302:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
     306:	40 91 f6 03 	lds	r20, 0x03F6	; 0x8003f6 <Production_Delay>
     30a:	50 91 f7 03 	lds	r21, 0x03F7	; 0x8003f7 <Production_Delay+0x1>
     30e:	60 91 f8 03 	lds	r22, 0x03F8	; 0x8003f8 <Production_Delay+0x2>
     312:	70 91 f9 03 	lds	r23, 0x03F9	; 0x8003f9 <Production_Delay+0x3>
     316:	2a e0       	ldi	r18, 0x0A	; 10
     318:	30 e0       	ldi	r19, 0x00	; 0
     31a:	80 e0       	ldi	r24, 0x00	; 0
     31c:	95 e0       	ldi	r25, 0x05	; 5
     31e:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <Print::print(unsigned long, int)>
     322:	63 e2       	ldi	r22, 0x23	; 35
     324:	72 e0       	ldi	r23, 0x02	; 2
     326:	80 e0       	ldi	r24, 0x00	; 0
     328:	95 e0       	ldi	r25, 0x05	; 5
     32a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
     32e:	40 91 f2 03 	lds	r20, 0x03F2	; 0x8003f2 <Flush_Delay>
     332:	50 91 f3 03 	lds	r21, 0x03F3	; 0x8003f3 <Flush_Delay+0x1>
     336:	60 91 f4 03 	lds	r22, 0x03F4	; 0x8003f4 <Flush_Delay+0x2>
     33a:	70 91 f5 03 	lds	r23, 0x03F5	; 0x8003f5 <Flush_Delay+0x3>
     33e:	2a e0       	ldi	r18, 0x0A	; 10
     340:	30 e0       	ldi	r19, 0x00	; 0
     342:	80 e0       	ldi	r24, 0x00	; 0
     344:	95 e0       	ldi	r25, 0x05	; 5
     346:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <Print::print(unsigned long, int)>
     34a:	63 e2       	ldi	r22, 0x23	; 35
     34c:	72 e0       	ldi	r23, 0x02	; 2
     34e:	80 e0       	ldi	r24, 0x00	; 0
     350:	95 e0       	ldi	r25, 0x05	; 5
     352:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
     356:	40 91 ee 03 	lds	r20, 0x03EE	; 0x8003ee <PreCharge_Delay>
     35a:	50 91 ef 03 	lds	r21, 0x03EF	; 0x8003ef <PreCharge_Delay+0x1>
     35e:	60 91 f0 03 	lds	r22, 0x03F0	; 0x8003f0 <PreCharge_Delay+0x2>
     362:	70 91 f1 03 	lds	r23, 0x03F1	; 0x8003f1 <PreCharge_Delay+0x3>
     366:	2a e0       	ldi	r18, 0x0A	; 10
     368:	30 e0       	ldi	r19, 0x00	; 0
     36a:	80 e0       	ldi	r24, 0x00	; 0
     36c:	95 e0       	ldi	r25, 0x05	; 5
     36e:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <Print::print(unsigned long, int)>
     372:	63 e2       	ldi	r22, 0x23	; 35
     374:	72 e0       	ldi	r23, 0x02	; 2
     376:	80 e0       	ldi	r24, 0x00	; 0
     378:	95 e0       	ldi	r25, 0x05	; 5
     37a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
     37e:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <do_byte>
     382:	82 fb       	bst	r24, 2
     384:	99 27       	eor	r25, r25
     386:	90 f9       	bld	r25, 0
     388:	1f 92       	push	r1
     38a:	9f 93       	push	r25
     38c:	81 fb       	bst	r24, 1
     38e:	99 27       	eor	r25, r25
     390:	90 f9       	bld	r25, 0
     392:	1f 92       	push	r1
     394:	9f 93       	push	r25
     396:	81 70       	andi	r24, 0x01	; 1
     398:	1f 92       	push	r1
     39a:	8f 93       	push	r24
     39c:	04 e3       	ldi	r16, 0x34	; 52
     39e:	11 e0       	ldi	r17, 0x01	; 1
     3a0:	1f 93       	push	r17
     3a2:	0f 93       	push	r16
     3a4:	df 93       	push	r29
     3a6:	cf 93       	push	r28
     3a8:	0e 94 2c 1a 	call	0x3458	; 0x3458 <sprintf>
     3ac:	be 01       	movw	r22, r28
     3ae:	80 e0       	ldi	r24, 0x00	; 0
     3b0:	95 e0       	ldi	r25, 0x05	; 5
     3b2:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
     3b6:	60 91 e3 03 	lds	r22, 0x03E3	; 0x8003e3 <o2_raw_adc_count>
     3ba:	70 91 e4 03 	lds	r23, 0x03E4	; 0x8003e4 <o2_raw_adc_count+0x1>
     3be:	4a e0       	ldi	r20, 0x0A	; 10
     3c0:	50 e0       	ldi	r21, 0x00	; 0
     3c2:	80 e0       	ldi	r24, 0x00	; 0
     3c4:	95 e0       	ldi	r25, 0x05	; 5
     3c6:	0e 94 43 16 	call	0x2c86	; 0x2c86 <Print::print(int, int)>
     3ca:	63 e2       	ldi	r22, 0x23	; 35
     3cc:	72 e0       	ldi	r23, 0x02	; 2
     3ce:	80 e0       	ldi	r24, 0x00	; 0
     3d0:	95 e0       	ldi	r25, 0x05	; 5
     3d2:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
     3d6:	40 91 d7 03 	lds	r20, 0x03D7	; 0x8003d7 <m_raw_voltage>
     3da:	50 91 d8 03 	lds	r21, 0x03D8	; 0x8003d8 <m_raw_voltage+0x1>
     3de:	60 91 d9 03 	lds	r22, 0x03D9	; 0x8003d9 <m_raw_voltage+0x2>
     3e2:	70 91 da 03 	lds	r23, 0x03DA	; 0x8003da <m_raw_voltage+0x3>
     3e6:	22 e0       	ldi	r18, 0x02	; 2
     3e8:	30 e0       	ldi	r19, 0x00	; 0
     3ea:	80 e0       	ldi	r24, 0x00	; 0
     3ec:	95 e0       	ldi	r25, 0x05	; 5
     3ee:	0e 94 41 17 	call	0x2e82	; 0x2e82 <Print::print(double, int)>
     3f2:	63 e2       	ldi	r22, 0x23	; 35
     3f4:	72 e0       	ldi	r23, 0x02	; 2
     3f6:	80 e0       	ldi	r24, 0x00	; 0
     3f8:	95 e0       	ldi	r25, 0x05	; 5
     3fa:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
     3fe:	40 91 20 01 	lds	r20, 0x0120	; 0x800120 <o2_concentration>
     402:	50 91 21 01 	lds	r21, 0x0121	; 0x800121 <o2_concentration+0x1>
     406:	60 91 22 01 	lds	r22, 0x0122	; 0x800122 <o2_concentration+0x2>
     40a:	70 91 23 01 	lds	r23, 0x0123	; 0x800123 <o2_concentration+0x3>
     40e:	22 e0       	ldi	r18, 0x02	; 2
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	80 e0       	ldi	r24, 0x00	; 0
     414:	95 e0       	ldi	r25, 0x05	; 5
     416:	0e 94 41 17 	call	0x2e82	; 0x2e82 <Print::print(double, int)>
     41a:	63 e2       	ldi	r22, 0x23	; 35
     41c:	72 e0       	ldi	r23, 0x02	; 2
     41e:	80 e0       	ldi	r24, 0x00	; 0
     420:	95 e0       	ldi	r25, 0x05	; 5
     422:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
     426:	1f 92       	push	r1
     428:	83 e0       	ldi	r24, 0x03	; 3
     42a:	8f 93       	push	r24
     42c:	1f 92       	push	r1
     42e:	82 e0       	ldi	r24, 0x02	; 2
     430:	8f 93       	push	r24
     432:	1f 92       	push	r1
     434:	81 e0       	ldi	r24, 0x01	; 1
     436:	8f 93       	push	r24
     438:	1f 93       	push	r17
     43a:	0f 93       	push	r16
     43c:	df 93       	push	r29
     43e:	cf 93       	push	r28
     440:	0e 94 2c 1a 	call	0x3458	; 0x3458 <sprintf>
     444:	8d b7       	in	r24, 0x3d	; 61
     446:	9e b7       	in	r25, 0x3e	; 62
     448:	88 96       	adiw	r24, 0x28	; 40
     44a:	0f b6       	in	r0, 0x3f	; 63
     44c:	f8 94       	cli
     44e:	9e bf       	out	0x3e, r25	; 62
     450:	0f be       	out	0x3f, r0	; 63
     452:	8d bf       	out	0x3d, r24	; 61
     454:	be 01       	movw	r22, r28
     456:	80 e0       	ldi	r24, 0x00	; 0
     458:	95 e0       	ldi	r25, 0x05	; 5
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	1f 91       	pop	r17
     460:	0f 91       	pop	r16
     462:	0c 94 98 15 	jmp	0x2b30	; 0x2b30 <Print::println(char const*)>

00000466 <logs_task()>:
_Z9logs_taskv():
     466:	80 91 05 04 	lds	r24, 0x0405	; 0x800405 <f_sec_logs_task>
     46a:	88 23       	and	r24, r24
     46c:	a9 f0       	breq	.+42     	; 0x498 <logs_task()+0x32>
     46e:	10 92 05 04 	sts	0x0405, r1	; 0x800405 <f_sec_logs_task>
     472:	80 91 c0 03 	lds	r24, 0x03C0	; 0x8003c0 <logs_task()::log_period>
     476:	90 91 c1 03 	lds	r25, 0x03C1	; 0x8003c1 <logs_task()::log_period+0x1>
     47a:	01 96       	adiw	r24, 0x01	; 1
     47c:	82 30       	cpi	r24, 0x02	; 2
     47e:	91 05       	cpc	r25, r1
     480:	2c f4       	brge	.+10     	; 0x48c <logs_task()+0x26>
     482:	90 93 c1 03 	sts	0x03C1, r25	; 0x8003c1 <logs_task()::log_period+0x1>
     486:	80 93 c0 03 	sts	0x03C0, r24	; 0x8003c0 <logs_task()::log_period>
     48a:	08 95       	ret
     48c:	10 92 c1 03 	sts	0x03C1, r1	; 0x8003c1 <logs_task()::log_period+0x1>
     490:	10 92 c0 03 	sts	0x03C0, r1	; 0x8003c0 <logs_task()::log_period>
     494:	0c 94 3f 01 	jmp	0x27e	; 0x27e <log_dump()>
     498:	08 95       	ret

0000049a <ads_init()>:
_Z8ads_initv():
     49a:	8a ea       	ldi	r24, 0xAA	; 170
     49c:	93 e0       	ldi	r25, 0x03	; 3
     49e:	0e 94 93 0c 	call	0x1926	; 0x1926 <ADS1X15::begin()>
     4a2:	61 e0       	ldi	r22, 0x01	; 1
     4a4:	8a ea       	ldi	r24, 0xAA	; 170
     4a6:	93 e0       	ldi	r25, 0x03	; 3
     4a8:	0e 94 a7 0c 	call	0x194e	; 0x194e <ADS1X15::setGain(unsigned char)>
     4ac:	67 e0       	ldi	r22, 0x07	; 7
     4ae:	8a ea       	ldi	r24, 0xAA	; 170
     4b0:	93 e0       	ldi	r25, 0x03	; 3
     4b2:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <ADS1X15::setDataRate(unsigned char)>
     4b6:	60 e0       	ldi	r22, 0x00	; 0
     4b8:	8a ea       	ldi	r24, 0xAA	; 170
     4ba:	93 e0       	ldi	r25, 0x03	; 3
     4bc:	0e 94 e8 0c 	call	0x19d0	; 0x19d0 <ADS1X15::setMode(unsigned char)>
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	8a ea       	ldi	r24, 0xAA	; 170
     4c4:	93 e0       	ldi	r25, 0x03	; 3
     4c6:	0c 94 e3 0d 	jmp	0x1bc6	; 0x1bc6 <ADS1X15::readADC(unsigned char)>

000004ca <sensor_zero_calibration()>:
_Z23sensor_zero_calibrationv():
     4ca:	2f 92       	push	r2
     4cc:	3f 92       	push	r3
     4ce:	4f 92       	push	r4
     4d0:	5f 92       	push	r5
     4d2:	6f 92       	push	r6
     4d4:	7f 92       	push	r7
     4d6:	8f 92       	push	r8
     4d8:	9f 92       	push	r9
     4da:	af 92       	push	r10
     4dc:	bf 92       	push	r11
     4de:	cf 92       	push	r12
     4e0:	df 92       	push	r13
     4e2:	ef 92       	push	r14
     4e4:	ff 92       	push	r15
     4e6:	0f 93       	push	r16
     4e8:	1f 93       	push	r17
     4ea:	cf 93       	push	r28
     4ec:	df 93       	push	r29
     4ee:	cd b7       	in	r28, 0x3d	; 61
     4f0:	de b7       	in	r29, 0x3e	; 62
     4f2:	2e 97       	sbiw	r28, 0x0e	; 14
     4f4:	0f b6       	in	r0, 0x3f	; 63
     4f6:	f8 94       	cli
     4f8:	de bf       	out	0x3e, r29	; 62
     4fa:	0f be       	out	0x3f, r0	; 63
     4fc:	cd bf       	out	0x3d, r28	; 61
     4fe:	8c e0       	ldi	r24, 0x0C	; 12
     500:	91 e0       	ldi	r25, 0x01	; 1
     502:	9e 87       	std	Y+14, r25	; 0x0e
     504:	8d 87       	std	Y+13, r24	; 0x0d
     506:	00 e0       	ldi	r16, 0x00	; 0
     508:	11 e0       	ldi	r17, 0x01	; 1
     50a:	88 e1       	ldi	r24, 0x18	; 24
     50c:	28 2e       	mov	r2, r24
     50e:	81 e0       	ldi	r24, 0x01	; 1
     510:	38 2e       	mov	r3, r24
     512:	19 86       	std	Y+9, r1	; 0x09
     514:	1a 86       	std	Y+10, r1	; 0x0a
     516:	1b 86       	std	Y+11, r1	; 0x0b
     518:	1c 86       	std	Y+12, r1	; 0x0c
     51a:	1d 82       	std	Y+5, r1	; 0x05
     51c:	1e 82       	std	Y+6, r1	; 0x06
     51e:	1f 82       	std	Y+7, r1	; 0x07
     520:	18 86       	std	Y+8, r1	; 0x08
     522:	19 82       	std	Y+1, r1	; 0x01
     524:	1a 82       	std	Y+2, r1	; 0x02
     526:	1b 82       	std	Y+3, r1	; 0x03
     528:	1c 82       	std	Y+4, r1	; 0x04
     52a:	c1 2c       	mov	r12, r1
     52c:	d1 2c       	mov	r13, r1
     52e:	76 01       	movw	r14, r12
     530:	ed 85       	ldd	r30, Y+13	; 0x0d
     532:	fe 85       	ldd	r31, Y+14	; 0x0e
     534:	41 90       	ld	r4, Z+
     536:	51 90       	ld	r5, Z+
     538:	61 90       	ld	r6, Z+
     53a:	71 90       	ld	r7, Z+
     53c:	fe 87       	std	Y+14, r31	; 0x0e
     53e:	ed 87       	std	Y+13, r30	; 0x0d
     540:	f8 01       	movw	r30, r16
     542:	81 90       	ld	r8, Z+
     544:	91 90       	ld	r9, Z+
     546:	a1 90       	ld	r10, Z+
     548:	b1 90       	ld	r11, Z+
     54a:	8f 01       	movw	r16, r30
     54c:	a5 01       	movw	r20, r10
     54e:	94 01       	movw	r18, r8
     550:	c7 01       	movw	r24, r14
     552:	b6 01       	movw	r22, r12
     554:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__addsf3>
     558:	6b 01       	movw	r12, r22
     55a:	7c 01       	movw	r14, r24
     55c:	a3 01       	movw	r20, r6
     55e:	92 01       	movw	r18, r4
     560:	69 81       	ldd	r22, Y+1	; 0x01
     562:	7a 81       	ldd	r23, Y+2	; 0x02
     564:	8b 81       	ldd	r24, Y+3	; 0x03
     566:	9c 81       	ldd	r25, Y+4	; 0x04
     568:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__addsf3>
     56c:	69 83       	std	Y+1, r22	; 0x01
     56e:	7a 83       	std	Y+2, r23	; 0x02
     570:	8b 83       	std	Y+3, r24	; 0x03
     572:	9c 83       	std	Y+4, r25	; 0x04
     574:	a5 01       	movw	r20, r10
     576:	94 01       	movw	r18, r8
     578:	c5 01       	movw	r24, r10
     57a:	b4 01       	movw	r22, r8
     57c:	0e 94 1d 19 	call	0x323a	; 0x323a <__mulsf3>
     580:	9b 01       	movw	r18, r22
     582:	ac 01       	movw	r20, r24
     584:	6d 81       	ldd	r22, Y+5	; 0x05
     586:	7e 81       	ldd	r23, Y+6	; 0x06
     588:	8f 81       	ldd	r24, Y+7	; 0x07
     58a:	98 85       	ldd	r25, Y+8	; 0x08
     58c:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__addsf3>
     590:	6d 83       	std	Y+5, r22	; 0x05
     592:	7e 83       	std	Y+6, r23	; 0x06
     594:	8f 83       	std	Y+7, r24	; 0x07
     596:	98 87       	std	Y+8, r25	; 0x08
     598:	a5 01       	movw	r20, r10
     59a:	94 01       	movw	r18, r8
     59c:	c3 01       	movw	r24, r6
     59e:	b2 01       	movw	r22, r4
     5a0:	0e 94 1d 19 	call	0x323a	; 0x323a <__mulsf3>
     5a4:	9b 01       	movw	r18, r22
     5a6:	ac 01       	movw	r20, r24
     5a8:	69 85       	ldd	r22, Y+9	; 0x09
     5aa:	7a 85       	ldd	r23, Y+10	; 0x0a
     5ac:	8b 85       	ldd	r24, Y+11	; 0x0b
     5ae:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b0:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__addsf3>
     5b4:	69 87       	std	Y+9, r22	; 0x09
     5b6:	7a 87       	std	Y+10, r23	; 0x0a
     5b8:	8b 87       	std	Y+11, r24	; 0x0b
     5ba:	9c 87       	std	Y+12, r25	; 0x0c
     5bc:	8d 85       	ldd	r24, Y+13	; 0x0d
     5be:	9e 85       	ldd	r25, Y+14	; 0x0e
     5c0:	28 16       	cp	r2, r24
     5c2:	39 06       	cpc	r3, r25
     5c4:	09 f0       	breq	.+2      	; 0x5c8 <sensor_zero_calibration()+0xfe>
     5c6:	b4 cf       	rjmp	.-152    	; 0x530 <sensor_zero_calibration()+0x66>
     5c8:	20 e0       	ldi	r18, 0x00	; 0
     5ca:	30 e0       	ldi	r19, 0x00	; 0
     5cc:	40 e4       	ldi	r20, 0x40	; 64
     5ce:	50 e4       	ldi	r21, 0x40	; 64
     5d0:	6d 81       	ldd	r22, Y+5	; 0x05
     5d2:	7e 81       	ldd	r23, Y+6	; 0x06
     5d4:	8f 81       	ldd	r24, Y+7	; 0x07
     5d6:	98 85       	ldd	r25, Y+8	; 0x08
     5d8:	0e 94 1d 19 	call	0x323a	; 0x323a <__mulsf3>
     5dc:	4b 01       	movw	r8, r22
     5de:	5c 01       	movw	r10, r24
     5e0:	a7 01       	movw	r20, r14
     5e2:	96 01       	movw	r18, r12
     5e4:	c7 01       	movw	r24, r14
     5e6:	b6 01       	movw	r22, r12
     5e8:	0e 94 1d 19 	call	0x323a	; 0x323a <__mulsf3>
     5ec:	9b 01       	movw	r18, r22
     5ee:	ac 01       	movw	r20, r24
     5f0:	c5 01       	movw	r24, r10
     5f2:	b4 01       	movw	r22, r8
     5f4:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <__subsf3>
     5f8:	4b 01       	movw	r8, r22
     5fa:	5c 01       	movw	r10, r24
     5fc:	20 e0       	ldi	r18, 0x00	; 0
     5fe:	30 e0       	ldi	r19, 0x00	; 0
     600:	a9 01       	movw	r20, r18
     602:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <__cmpsf2>
     606:	88 23       	and	r24, r24
     608:	09 f4       	brne	.+2      	; 0x60c <sensor_zero_calibration()+0x142>
     60a:	67 c0       	rjmp	.+206    	; 0x6da <sensor_zero_calibration()+0x210>
     60c:	20 e0       	ldi	r18, 0x00	; 0
     60e:	30 e0       	ldi	r19, 0x00	; 0
     610:	40 e4       	ldi	r20, 0x40	; 64
     612:	50 e4       	ldi	r21, 0x40	; 64
     614:	69 85       	ldd	r22, Y+9	; 0x09
     616:	7a 85       	ldd	r23, Y+10	; 0x0a
     618:	8b 85       	ldd	r24, Y+11	; 0x0b
     61a:	9c 85       	ldd	r25, Y+12	; 0x0c
     61c:	0e 94 1d 19 	call	0x323a	; 0x323a <__mulsf3>
     620:	2b 01       	movw	r4, r22
     622:	3c 01       	movw	r6, r24
     624:	29 81       	ldd	r18, Y+1	; 0x01
     626:	3a 81       	ldd	r19, Y+2	; 0x02
     628:	4b 81       	ldd	r20, Y+3	; 0x03
     62a:	5c 81       	ldd	r21, Y+4	; 0x04
     62c:	c7 01       	movw	r24, r14
     62e:	b6 01       	movw	r22, r12
     630:	0e 94 1d 19 	call	0x323a	; 0x323a <__mulsf3>
     634:	9b 01       	movw	r18, r22
     636:	ac 01       	movw	r20, r24
     638:	c3 01       	movw	r24, r6
     63a:	b2 01       	movw	r22, r4
     63c:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <__subsf3>
     640:	a5 01       	movw	r20, r10
     642:	94 01       	movw	r18, r8
     644:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <__divsf3>
     648:	60 93 df 03 	sts	0x03DF, r22	; 0x8003df <o2_slope>
     64c:	70 93 e0 03 	sts	0x03E0, r23	; 0x8003e0 <o2_slope+0x1>
     650:	80 93 e1 03 	sts	0x03E1, r24	; 0x8003e1 <o2_slope+0x2>
     654:	90 93 e2 03 	sts	0x03E2, r25	; 0x8003e2 <o2_slope+0x3>
     658:	2d 81       	ldd	r18, Y+5	; 0x05
     65a:	3e 81       	ldd	r19, Y+6	; 0x06
     65c:	4f 81       	ldd	r20, Y+7	; 0x07
     65e:	58 85       	ldd	r21, Y+8	; 0x08
     660:	69 81       	ldd	r22, Y+1	; 0x01
     662:	7a 81       	ldd	r23, Y+2	; 0x02
     664:	8b 81       	ldd	r24, Y+3	; 0x03
     666:	9c 81       	ldd	r25, Y+4	; 0x04
     668:	0e 94 1d 19 	call	0x323a	; 0x323a <__mulsf3>
     66c:	2b 01       	movw	r4, r22
     66e:	3c 01       	movw	r6, r24
     670:	29 85       	ldd	r18, Y+9	; 0x09
     672:	3a 85       	ldd	r19, Y+10	; 0x0a
     674:	4b 85       	ldd	r20, Y+11	; 0x0b
     676:	5c 85       	ldd	r21, Y+12	; 0x0c
     678:	c7 01       	movw	r24, r14
     67a:	b6 01       	movw	r22, r12
     67c:	0e 94 1d 19 	call	0x323a	; 0x323a <__mulsf3>
     680:	9b 01       	movw	r18, r22
     682:	ac 01       	movw	r20, r24
     684:	c3 01       	movw	r24, r6
     686:	b2 01       	movw	r22, r4
     688:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <__subsf3>
     68c:	a5 01       	movw	r20, r10
     68e:	94 01       	movw	r18, r8
     690:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <__divsf3>
     694:	60 93 db 03 	sts	0x03DB, r22	; 0x8003db <o2_const_val>
     698:	70 93 dc 03 	sts	0x03DC, r23	; 0x8003dc <o2_const_val+0x1>
     69c:	80 93 dd 03 	sts	0x03DD, r24	; 0x8003dd <o2_const_val+0x2>
     6a0:	90 93 de 03 	sts	0x03DE, r25	; 0x8003de <o2_const_val+0x3>
     6a4:	90 e0       	ldi	r25, 0x00	; 0
     6a6:	80 e0       	ldi	r24, 0x00	; 0
     6a8:	2e 96       	adiw	r28, 0x0e	; 14
     6aa:	0f b6       	in	r0, 0x3f	; 63
     6ac:	f8 94       	cli
     6ae:	de bf       	out	0x3e, r29	; 62
     6b0:	0f be       	out	0x3f, r0	; 63
     6b2:	cd bf       	out	0x3d, r28	; 61
     6b4:	df 91       	pop	r29
     6b6:	cf 91       	pop	r28
     6b8:	1f 91       	pop	r17
     6ba:	0f 91       	pop	r16
     6bc:	ff 90       	pop	r15
     6be:	ef 90       	pop	r14
     6c0:	df 90       	pop	r13
     6c2:	cf 90       	pop	r12
     6c4:	bf 90       	pop	r11
     6c6:	af 90       	pop	r10
     6c8:	9f 90       	pop	r9
     6ca:	8f 90       	pop	r8
     6cc:	7f 90       	pop	r7
     6ce:	6f 90       	pop	r6
     6d0:	5f 90       	pop	r5
     6d2:	4f 90       	pop	r4
     6d4:	3f 90       	pop	r3
     6d6:	2f 90       	pop	r2
     6d8:	08 95       	ret
     6da:	10 92 df 03 	sts	0x03DF, r1	; 0x8003df <o2_slope>
     6de:	10 92 e0 03 	sts	0x03E0, r1	; 0x8003e0 <o2_slope+0x1>
     6e2:	10 92 e1 03 	sts	0x03E1, r1	; 0x8003e1 <o2_slope+0x2>
     6e6:	10 92 e2 03 	sts	0x03E2, r1	; 0x8003e2 <o2_slope+0x3>
     6ea:	10 92 db 03 	sts	0x03DB, r1	; 0x8003db <o2_const_val>
     6ee:	10 92 dc 03 	sts	0x03DC, r1	; 0x8003dc <o2_const_val+0x1>
     6f2:	10 92 dd 03 	sts	0x03DD, r1	; 0x8003dd <o2_const_val+0x2>
     6f6:	10 92 de 03 	sts	0x03DE, r1	; 0x8003de <o2_const_val+0x3>
     6fa:	88 ef       	ldi	r24, 0xF8	; 248
     6fc:	9f ef       	ldi	r25, 0xFF	; 255
     6fe:	d4 cf       	rjmp	.-88     	; 0x6a8 <sensor_zero_calibration()+0x1de>

00000700 <o2_sensor_scan()>:
_Z14o2_sensor_scanv():
     700:	8f 92       	push	r8
     702:	9f 92       	push	r9
     704:	af 92       	push	r10
     706:	bf 92       	push	r11
     708:	cf 92       	push	r12
     70a:	df 92       	push	r13
     70c:	ef 92       	push	r14
     70e:	ff 92       	push	r15
     710:	60 e0       	ldi	r22, 0x00	; 0
     712:	8a ea       	ldi	r24, 0xAA	; 170
     714:	93 e0       	ldi	r25, 0x03	; 3
     716:	0e 94 e3 0d 	call	0x1bc6	; 0x1bc6 <ADS1X15::readADC(unsigned char)>
     71a:	8a ea       	ldi	r24, 0xAA	; 170
     71c:	93 e0       	ldi	r25, 0x03	; 3
     71e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <ADS1X15::getValue()>
     722:	90 93 e4 03 	sts	0x03E4, r25	; 0x8003e4 <o2_raw_adc_count+0x1>
     726:	80 93 e3 03 	sts	0x03E3, r24	; 0x8003e3 <o2_raw_adc_count>
     72a:	60 91 e3 03 	lds	r22, 0x03E3	; 0x8003e3 <o2_raw_adc_count>
     72e:	70 91 e4 03 	lds	r23, 0x03E4	; 0x8003e4 <o2_raw_adc_count+0x1>
     732:	07 2e       	mov	r0, r23
     734:	00 0c       	add	r0, r0
     736:	88 0b       	sbc	r24, r24
     738:	99 0b       	sbc	r25, r25
     73a:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__floatsisf>
     73e:	20 e0       	ldi	r18, 0x00	; 0
     740:	30 e0       	ldi	r19, 0x00	; 0
     742:	4a e7       	ldi	r20, 0x7A	; 122
     744:	54 e4       	ldi	r21, 0x44	; 68
     746:	0e 94 1d 19 	call	0x323a	; 0x323a <__mulsf3>
     74a:	2f e6       	ldi	r18, 0x6F	; 111
     74c:	32 e1       	ldi	r19, 0x12	; 18
     74e:	43 e0       	ldi	r20, 0x03	; 3
     750:	59 e3       	ldi	r21, 0x39	; 57
     752:	0e 94 1d 19 	call	0x323a	; 0x323a <__mulsf3>
     756:	60 93 d7 03 	sts	0x03D7, r22	; 0x8003d7 <m_raw_voltage>
     75a:	70 93 d8 03 	sts	0x03D8, r23	; 0x8003d8 <m_raw_voltage+0x1>
     75e:	80 93 d9 03 	sts	0x03D9, r24	; 0x8003d9 <m_raw_voltage+0x2>
     762:	90 93 da 03 	sts	0x03DA, r25	; 0x8003da <m_raw_voltage+0x3>
     766:	80 91 d7 03 	lds	r24, 0x03D7	; 0x8003d7 <m_raw_voltage>
     76a:	90 91 d8 03 	lds	r25, 0x03D8	; 0x8003d8 <m_raw_voltage+0x1>
     76e:	a0 91 d9 03 	lds	r26, 0x03D9	; 0x8003d9 <m_raw_voltage+0x2>
     772:	b0 91 da 03 	lds	r27, 0x03DA	; 0x8003da <m_raw_voltage+0x3>
     776:	60 91 e3 03 	lds	r22, 0x03E3	; 0x8003e3 <o2_raw_adc_count>
     77a:	70 91 e4 03 	lds	r23, 0x03E4	; 0x8003e4 <o2_raw_adc_count+0x1>
     77e:	c0 90 df 03 	lds	r12, 0x03DF	; 0x8003df <o2_slope>
     782:	d0 90 e0 03 	lds	r13, 0x03E0	; 0x8003e0 <o2_slope+0x1>
     786:	e0 90 e1 03 	lds	r14, 0x03E1	; 0x8003e1 <o2_slope+0x2>
     78a:	f0 90 e2 03 	lds	r15, 0x03E2	; 0x8003e2 <o2_slope+0x3>
     78e:	80 90 db 03 	lds	r8, 0x03DB	; 0x8003db <o2_const_val>
     792:	90 90 dc 03 	lds	r9, 0x03DC	; 0x8003dc <o2_const_val+0x1>
     796:	a0 90 dd 03 	lds	r10, 0x03DD	; 0x8003dd <o2_const_val+0x2>
     79a:	b0 90 de 03 	lds	r11, 0x03DE	; 0x8003de <o2_const_val+0x3>
     79e:	07 2e       	mov	r0, r23
     7a0:	00 0c       	add	r0, r0
     7a2:	88 0b       	sbc	r24, r24
     7a4:	99 0b       	sbc	r25, r25
     7a6:	0e 94 68 18 	call	0x30d0	; 0x30d0 <__floatsisf>
     7aa:	a7 01       	movw	r20, r14
     7ac:	96 01       	movw	r18, r12
     7ae:	0e 94 1d 19 	call	0x323a	; 0x323a <__mulsf3>
     7b2:	a5 01       	movw	r20, r10
     7b4:	94 01       	movw	r18, r8
     7b6:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__addsf3>
     7ba:	60 93 20 01 	sts	0x0120, r22	; 0x800120 <o2_concentration>
     7be:	70 93 21 01 	sts	0x0121, r23	; 0x800121 <o2_concentration+0x1>
     7c2:	80 93 22 01 	sts	0x0122, r24	; 0x800122 <o2_concentration+0x2>
     7c6:	90 93 23 01 	sts	0x0123, r25	; 0x800123 <o2_concentration+0x3>
     7ca:	ff 90       	pop	r15
     7cc:	ef 90       	pop	r14
     7ce:	df 90       	pop	r13
     7d0:	cf 90       	pop	r12
     7d2:	bf 90       	pop	r11
     7d4:	af 90       	pop	r10
     7d6:	9f 90       	pop	r9
     7d8:	8f 90       	pop	r8
     7da:	08 95       	ret

000007dc <config_timer1()>:
_Z13config_timer1v():
     7dc:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     7e0:	e1 e8       	ldi	r30, 0x81	; 129
     7e2:	f0 e0       	ldi	r31, 0x00	; 0
     7e4:	10 82       	st	Z, r1
     7e6:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     7ea:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     7ee:	89 ef       	ldi	r24, 0xF9	; 249
     7f0:	90 e0       	ldi	r25, 0x00	; 0
     7f2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     7f6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     7fa:	80 81       	ld	r24, Z
     7fc:	88 60       	ori	r24, 0x08	; 8
     7fe:	80 83       	st	Z, r24
     800:	80 81       	ld	r24, Z
     802:	83 60       	ori	r24, 0x03	; 3
     804:	80 83       	st	Z, r24
     806:	ef e6       	ldi	r30, 0x6F	; 111
     808:	f0 e0       	ldi	r31, 0x00	; 0
     80a:	80 81       	ld	r24, Z
     80c:	82 60       	ori	r24, 0x02	; 2
     80e:	80 83       	st	Z, r24
     810:	08 95       	ret

00000812 <timer_init()>:
_Z10timer_initv():
     812:	f8 94       	cli
     814:	0e 94 ee 03 	call	0x7dc	; 0x7dc <config_timer1()>
     818:	78 94       	sei
     81a:	08 95       	ret

0000081c <__vector_13>:
__vector_13():
     81c:	1f 92       	push	r1
     81e:	0f 92       	push	r0
     820:	0f b6       	in	r0, 0x3f	; 63
     822:	0f 92       	push	r0
     824:	11 24       	eor	r1, r1
     826:	0b b6       	in	r0, 0x3b	; 59
     828:	0f 92       	push	r0
     82a:	2f 93       	push	r18
     82c:	3f 93       	push	r19
     82e:	4f 93       	push	r20
     830:	5f 93       	push	r21
     832:	6f 93       	push	r22
     834:	7f 93       	push	r23
     836:	8f 93       	push	r24
     838:	9f 93       	push	r25
     83a:	af 93       	push	r26
     83c:	bf 93       	push	r27
     83e:	cf 93       	push	r28
     840:	ef 93       	push	r30
     842:	ff 93       	push	r31
     844:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <systemtick_msecs>
     848:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <systemtick_msecs+0x1>
     84c:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <systemtick_msecs+0x2>
     850:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <systemtick_msecs+0x3>
     854:	01 96       	adiw	r24, 0x01	; 1
     856:	a1 1d       	adc	r26, r1
     858:	b1 1d       	adc	r27, r1
     85a:	80 93 10 04 	sts	0x0410, r24	; 0x800410 <systemtick_msecs>
     85e:	90 93 11 04 	sts	0x0411, r25	; 0x800411 <systemtick_msecs+0x1>
     862:	a0 93 12 04 	sts	0x0412, r26	; 0x800412 <systemtick_msecs+0x2>
     866:	b0 93 13 04 	sts	0x0413, r27	; 0x800413 <systemtick_msecs+0x3>
     86a:	c1 e0       	ldi	r28, 0x01	; 1
     86c:	c0 93 0c 04 	sts	0x040C, r28	; 0x80040c <f_msec>
     870:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <systemtick_msecs>
     874:	70 91 11 04 	lds	r23, 0x0411	; 0x800411 <systemtick_msecs+0x1>
     878:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <systemtick_msecs+0x2>
     87c:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <systemtick_msecs+0x3>
     880:	2a e0       	ldi	r18, 0x0A	; 10
     882:	30 e0       	ldi	r19, 0x00	; 0
     884:	40 e0       	ldi	r20, 0x00	; 0
     886:	50 e0       	ldi	r21, 0x00	; 0
     888:	0e 94 a3 19 	call	0x3346	; 0x3346 <__udivmodsi4>
     88c:	67 2b       	or	r22, r23
     88e:	68 2b       	or	r22, r24
     890:	69 2b       	or	r22, r25
     892:	09 f0       	breq	.+2      	; 0x896 <__vector_13+0x7a>
     894:	49 c0       	rjmp	.+146    	; 0x928 <__vector_13+0x10c>
     896:	c0 93 0b 04 	sts	0x040B, r28	; 0x80040b <f_10msec>
     89a:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <systemtick_msecs>
     89e:	70 91 11 04 	lds	r23, 0x0411	; 0x800411 <systemtick_msecs+0x1>
     8a2:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <systemtick_msecs+0x2>
     8a6:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <systemtick_msecs+0x3>
     8aa:	24 e6       	ldi	r18, 0x64	; 100
     8ac:	30 e0       	ldi	r19, 0x00	; 0
     8ae:	40 e0       	ldi	r20, 0x00	; 0
     8b0:	50 e0       	ldi	r21, 0x00	; 0
     8b2:	0e 94 a3 19 	call	0x3346	; 0x3346 <__udivmodsi4>
     8b6:	67 2b       	or	r22, r23
     8b8:	68 2b       	or	r22, r24
     8ba:	69 2b       	or	r22, r25
     8bc:	a9 f5       	brne	.+106    	; 0x928 <__vector_13+0x10c>
     8be:	c0 93 0a 04 	sts	0x040A, r28	; 0x80040a <f_100msec>
     8c2:	60 91 10 04 	lds	r22, 0x0410	; 0x800410 <systemtick_msecs>
     8c6:	70 91 11 04 	lds	r23, 0x0411	; 0x800411 <systemtick_msecs+0x1>
     8ca:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <systemtick_msecs+0x2>
     8ce:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <systemtick_msecs+0x3>
     8d2:	28 ee       	ldi	r18, 0xE8	; 232
     8d4:	33 e0       	ldi	r19, 0x03	; 3
     8d6:	40 e0       	ldi	r20, 0x00	; 0
     8d8:	50 e0       	ldi	r21, 0x00	; 0
     8da:	0e 94 a3 19 	call	0x3346	; 0x3346 <__udivmodsi4>
     8de:	67 2b       	or	r22, r23
     8e0:	68 2b       	or	r22, r24
     8e2:	69 2b       	or	r22, r25
     8e4:	09 f5       	brne	.+66     	; 0x928 <__vector_13+0x10c>
     8e6:	c0 93 09 04 	sts	0x0409, r28	; 0x800409 <f_1sec>
     8ea:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <systemtick_secs>
     8ee:	8f 5f       	subi	r24, 0xFF	; 255
     8f0:	80 93 0f 04 	sts	0x040F, r24	; 0x80040f <systemtick_secs>
     8f4:	80 91 0f 04 	lds	r24, 0x040F	; 0x80040f <systemtick_secs>
     8f8:	8c 33       	cpi	r24, 0x3C	; 60
     8fa:	b0 f0       	brcs	.+44     	; 0x928 <__vector_13+0x10c>
     8fc:	10 92 0f 04 	sts	0x040F, r1	; 0x80040f <systemtick_secs>
     900:	c0 93 08 04 	sts	0x0408, r28	; 0x800408 <f_1min>
     904:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <systemtick_mins>
     908:	8f 5f       	subi	r24, 0xFF	; 255
     90a:	80 93 0e 04 	sts	0x040E, r24	; 0x80040e <systemtick_mins>
     90e:	80 91 0e 04 	lds	r24, 0x040E	; 0x80040e <systemtick_mins>
     912:	8c 33       	cpi	r24, 0x3C	; 60
     914:	48 f0       	brcs	.+18     	; 0x928 <__vector_13+0x10c>
     916:	10 92 0e 04 	sts	0x040E, r1	; 0x80040e <systemtick_mins>
     91a:	c0 93 07 04 	sts	0x0407, r28	; 0x800407 <f_1hr>
     91e:	80 91 0d 04 	lds	r24, 0x040D	; 0x80040d <systemtick_hrs>
     922:	8f 5f       	subi	r24, 0xFF	; 255
     924:	80 93 0d 04 	sts	0x040D, r24	; 0x80040d <systemtick_hrs>
     928:	ff 91       	pop	r31
     92a:	ef 91       	pop	r30
     92c:	cf 91       	pop	r28
     92e:	bf 91       	pop	r27
     930:	af 91       	pop	r26
     932:	9f 91       	pop	r25
     934:	8f 91       	pop	r24
     936:	7f 91       	pop	r23
     938:	6f 91       	pop	r22
     93a:	5f 91       	pop	r21
     93c:	4f 91       	pop	r20
     93e:	3f 91       	pop	r19
     940:	2f 91       	pop	r18
     942:	0f 90       	pop	r0
     944:	0b be       	out	0x3b, r0	; 59
     946:	0f 90       	pop	r0
     948:	0f be       	out	0x3f, r0	; 63
     94a:	0f 90       	pop	r0
     94c:	1f 90       	pop	r1
     94e:	18 95       	reti

00000950 <new_delay_msecs(unsigned int)>:
_Z15new_delay_msecsj():
     950:	0f 93       	push	r16
     952:	1f 93       	push	r17
     954:	00 91 10 04 	lds	r16, 0x0410	; 0x800410 <systemtick_msecs>
     958:	10 91 11 04 	lds	r17, 0x0411	; 0x800411 <systemtick_msecs+0x1>
     95c:	20 91 12 04 	lds	r18, 0x0412	; 0x800412 <systemtick_msecs+0x2>
     960:	30 91 13 04 	lds	r19, 0x0413	; 0x800413 <systemtick_msecs+0x3>
     964:	b0 e0       	ldi	r27, 0x00	; 0
     966:	a0 e0       	ldi	r26, 0x00	; 0
_Z12time_elapsedm():
     968:	40 91 10 04 	lds	r20, 0x0410	; 0x800410 <systemtick_msecs>
     96c:	50 91 11 04 	lds	r21, 0x0411	; 0x800411 <systemtick_msecs+0x1>
     970:	60 91 12 04 	lds	r22, 0x0412	; 0x800412 <systemtick_msecs+0x2>
     974:	70 91 13 04 	lds	r23, 0x0413	; 0x800413 <systemtick_msecs+0x3>
     978:	40 1b       	sub	r20, r16
     97a:	51 0b       	sbc	r21, r17
     97c:	62 0b       	sbc	r22, r18
     97e:	73 0b       	sbc	r23, r19
_Z15new_delay_msecsj():
     980:	48 17       	cp	r20, r24
     982:	59 07       	cpc	r21, r25
     984:	6a 07       	cpc	r22, r26
     986:	7b 07       	cpc	r23, r27
     988:	78 f3       	brcs	.-34     	; 0x968 <new_delay_msecs(unsigned int)+0x18>
     98a:	1f 91       	pop	r17
     98c:	0f 91       	pop	r16
     98e:	08 95       	ret

00000990 <platform_init()>:
_Z13platform_initv():
     990:	0e 94 09 04 	call	0x812	; 0x812 <timer_init()>
     994:	20 e0       	ldi	r18, 0x00	; 0
     996:	44 e0       	ldi	r20, 0x04	; 4
     998:	64 e1       	ldi	r22, 0x14	; 20
     99a:	89 e1       	ldi	r24, 0x19	; 25
     99c:	94 e0       	ldi	r25, 0x04	; 4
     99e:	0e 94 be 0b 	call	0x177c	; 0x177c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	85 e0       	ldi	r24, 0x05	; 5
     9a6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
     9aa:	61 e0       	ldi	r22, 0x01	; 1
     9ac:	84 e0       	ldi	r24, 0x04	; 4
     9ae:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
     9b2:	61 e0       	ldi	r22, 0x01	; 1
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
     9ba:	61 e0       	ldi	r22, 0x01	; 1
     9bc:	8d e1       	ldi	r24, 0x1D	; 29
     9be:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
     9c2:	61 e0       	ldi	r22, 0x01	; 1
     9c4:	8c e1       	ldi	r24, 0x1C	; 28
     9c6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	8c e0       	ldi	r24, 0x0C	; 12
     9ce:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
     9d2:	62 e0       	ldi	r22, 0x02	; 2
     9d4:	8c e0       	ldi	r24, 0x0C	; 12
     9d6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
     9da:	60 e0       	ldi	r22, 0x00	; 0
     9dc:	8d e1       	ldi	r24, 0x1D	; 29
     9de:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
     9e2:	60 e0       	ldi	r22, 0x00	; 0
     9e4:	8c e1       	ldi	r24, 0x1C	; 28
     9e6:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
     9ea:	61 e0       	ldi	r22, 0x01	; 1
     9ec:	85 e0       	ldi	r24, 0x05	; 5
     9ee:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
     9f2:	61 e0       	ldi	r22, 0x01	; 1
     9f4:	87 e0       	ldi	r24, 0x07	; 7
     9f6:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
     9fa:	61 e0       	ldi	r22, 0x01	; 1
     9fc:	8d e0       	ldi	r24, 0x0D	; 13
     9fe:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	85 e0       	ldi	r24, 0x05	; 5
     a06:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
     a0a:	60 e0       	ldi	r22, 0x00	; 0
     a0c:	87 e0       	ldi	r24, 0x07	; 7
     a0e:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
     a12:	60 e0       	ldi	r22, 0x00	; 0
     a14:	8d e0       	ldi	r24, 0x0D	; 13
     a16:	0c 94 23 13 	jmp	0x2646	; 0x2646 <digitalWrite>

00000a1a <do_control(DO_CONTROLS_E, bool)>:
_Z10do_control13DO_CONTROLS_Eb():
     a1a:	1f 93       	push	r17
     a1c:	cf 93       	push	r28
     a1e:	df 93       	push	r29
     a20:	ec 01       	movw	r28, r24
     a22:	16 2f       	mov	r17, r22
     a24:	88 30       	cpi	r24, 0x08	; 8
     a26:	91 05       	cpc	r25, r1
     a28:	71 f1       	breq	.+92     	; 0xa86 <do_control(DO_CONTROLS_E, bool)+0x6c>
     a2a:	60 f4       	brcc	.+24     	; 0xa44 <do_control(DO_CONTROLS_E, bool)+0x2a>
     a2c:	82 30       	cpi	r24, 0x02	; 2
     a2e:	91 05       	cpc	r25, r1
     a30:	31 f1       	breq	.+76     	; 0xa7e <do_control(DO_CONTROLS_E, bool)+0x64>
     a32:	84 30       	cpi	r24, 0x04	; 4
     a34:	91 05       	cpc	r25, r1
     a36:	29 f1       	breq	.+74     	; 0xa82 <do_control(DO_CONTROLS_E, bool)+0x68>
     a38:	01 97       	sbiw	r24, 0x01	; 1
     a3a:	71 f4       	brne	.+28     	; 0xa58 <do_control(DO_CONTROLS_E, bool)+0x3e>
     a3c:	83 e0       	ldi	r24, 0x03	; 3
     a3e:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
     a42:	15 c0       	rjmp	.+42     	; 0xa6e <do_control(DO_CONTROLS_E, bool)+0x54>
     a44:	80 32       	cpi	r24, 0x20	; 32
     a46:	91 05       	cpc	r25, r1
     a48:	91 f0       	breq	.+36     	; 0xa6e <do_control(DO_CONTROLS_E, bool)+0x54>
     a4a:	58 f4       	brcc	.+22     	; 0xa62 <do_control(DO_CONTROLS_E, bool)+0x48>
     a4c:	61 e0       	ldi	r22, 0x01	; 1
     a4e:	61 27       	eor	r22, r17
     a50:	8d e1       	ldi	r24, 0x1D	; 29
     a52:	c0 31       	cpi	r28, 0x10	; 16
     a54:	d1 05       	cpc	r29, r1
     a56:	99 f3       	breq	.-26     	; 0xa3e <do_control(DO_CONTROLS_E, bool)+0x24>
     a58:	80 e0       	ldi	r24, 0x00	; 0
     a5a:	df 91       	pop	r29
     a5c:	cf 91       	pop	r28
     a5e:	1f 91       	pop	r17
     a60:	08 95       	ret
     a62:	80 34       	cpi	r24, 0x40	; 64
     a64:	91 05       	cpc	r25, r1
     a66:	19 f0       	breq	.+6      	; 0xa6e <do_control(DO_CONTROLS_E, bool)+0x54>
     a68:	80 38       	cpi	r24, 0x80	; 128
     a6a:	91 05       	cpc	r25, r1
     a6c:	a9 f7       	brne	.-22     	; 0xa58 <do_control(DO_CONTROLS_E, bool)+0x3e>
     a6e:	80 91 e5 03 	lds	r24, 0x03E5	; 0x8003e5 <do_byte>
     a72:	11 23       	and	r17, r17
     a74:	51 f0       	breq	.+20     	; 0xa8a <do_control(DO_CONTROLS_E, bool)+0x70>
     a76:	c8 2b       	or	r28, r24
     a78:	c0 93 e5 03 	sts	0x03E5, r28	; 0x8003e5 <do_byte>
     a7c:	ed cf       	rjmp	.-38     	; 0xa58 <do_control(DO_CONTROLS_E, bool)+0x3e>
     a7e:	84 e0       	ldi	r24, 0x04	; 4
     a80:	de cf       	rjmp	.-68     	; 0xa3e <do_control(DO_CONTROLS_E, bool)+0x24>
     a82:	85 e0       	ldi	r24, 0x05	; 5
     a84:	dc cf       	rjmp	.-72     	; 0xa3e <do_control(DO_CONTROLS_E, bool)+0x24>
     a86:	8c e1       	ldi	r24, 0x1C	; 28
     a88:	da cf       	rjmp	.-76     	; 0xa3e <do_control(DO_CONTROLS_E, bool)+0x24>
     a8a:	c0 95       	com	r28
     a8c:	c8 23       	and	r28, r24
     a8e:	f4 cf       	rjmp	.-24     	; 0xa78 <do_control(DO_CONTROLS_E, bool)+0x5e>

00000a90 <tworks2_PSA_logic()>:
_Z17tworks2_PSA_logicv():
     a90:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <cycle>
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	21 f1       	breq	.+72     	; 0xae0 <tworks2_PSA_logic()+0x50>
     a98:	80 f0       	brcs	.+32     	; 0xaba <tworks2_PSA_logic()+0x2a>
     a9a:	82 30       	cpi	r24, 0x02	; 2
     a9c:	09 f4       	brne	.+2      	; 0xaa0 <tworks2_PSA_logic()+0x10>
     a9e:	40 c0       	rjmp	.+128    	; 0xb20 <tworks2_PSA_logic()+0x90>
     aa0:	83 30       	cpi	r24, 0x03	; 3
     aa2:	f1 f0       	breq	.+60     	; 0xae0 <tworks2_PSA_logic()+0x50>
     aa4:	10 92 18 04 	sts	0x0418, r1	; 0x800418 <cycle>
     aa8:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <nb_delay>
     aac:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <nb_delay+0x1>
     ab0:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <nb_delay+0x2>
     ab4:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <nb_delay+0x3>
     ab8:	08 95       	ret
     aba:	60 e0       	ldi	r22, 0x00	; 0
     abc:	81 e0       	ldi	r24, 0x01	; 1
     abe:	90 e0       	ldi	r25, 0x00	; 0
     ac0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>
     ac4:	61 e0       	ldi	r22, 0x01	; 1
     ac6:	82 e0       	ldi	r24, 0x02	; 2
     ac8:	90 e0       	ldi	r25, 0x00	; 0
     aca:	0e 94 0d 05 	call	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>
     ace:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <Production_Delay>
     ad2:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <Production_Delay+0x1>
     ad6:	a0 91 f8 03 	lds	r26, 0x03F8	; 0x8003f8 <Production_Delay+0x2>
     ada:	b0 91 f9 03 	lds	r27, 0x03F9	; 0x8003f9 <Production_Delay+0x3>
     ade:	12 c0       	rjmp	.+36     	; 0xb04 <tworks2_PSA_logic()+0x74>
     ae0:	60 e0       	ldi	r22, 0x00	; 0
     ae2:	81 e0       	ldi	r24, 0x01	; 1
     ae4:	90 e0       	ldi	r25, 0x00	; 0
     ae6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>
     aea:	60 e0       	ldi	r22, 0x00	; 0
     aec:	82 e0       	ldi	r24, 0x02	; 2
     aee:	90 e0       	ldi	r25, 0x00	; 0
     af0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>
     af4:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <PreCharge_Delay>
     af8:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <PreCharge_Delay+0x1>
     afc:	a0 91 f0 03 	lds	r26, 0x03F0	; 0x8003f0 <PreCharge_Delay+0x2>
     b00:	b0 91 f1 03 	lds	r27, 0x03F1	; 0x8003f1 <PreCharge_Delay+0x3>
     b04:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <nb_delay>
     b08:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <nb_delay+0x1>
     b0c:	a0 93 ec 03 	sts	0x03EC, r26	; 0x8003ec <nb_delay+0x2>
     b10:	b0 93 ed 03 	sts	0x03ED, r27	; 0x8003ed <nb_delay+0x3>
     b14:	80 91 18 04 	lds	r24, 0x0418	; 0x800418 <cycle>
     b18:	8f 5f       	subi	r24, 0xFF	; 255
     b1a:	80 93 18 04 	sts	0x0418, r24	; 0x800418 <cycle>
     b1e:	08 95       	ret
     b20:	61 e0       	ldi	r22, 0x01	; 1
     b22:	81 e0       	ldi	r24, 0x01	; 1
     b24:	90 e0       	ldi	r25, 0x00	; 0
     b26:	0e 94 0d 05 	call	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>
     b2a:	60 e0       	ldi	r22, 0x00	; 0
     b2c:	cc cf       	rjmp	.-104    	; 0xac6 <tworks2_PSA_logic()+0x36>

00000b2e <o2_main_task()>:
_Z12o2_main_taskv():
     b2e:	80 91 06 04 	lds	r24, 0x0406	; 0x800406 <f_system_running>
     b32:	88 23       	and	r24, r24
     b34:	09 f4       	brne	.+2      	; 0xb38 <o2_main_task()+0xa>
     b36:	5f c0       	rjmp	.+190    	; 0xbf6 <o2_main_task()+0xc8>
     b38:	80 91 03 04 	lds	r24, 0x0403	; 0x800403 <f_sec_change_o2_task>
     b3c:	88 23       	and	r24, r24
     b3e:	59 f0       	breq	.+22     	; 0xb56 <o2_main_task()+0x28>
     b40:	10 92 03 04 	sts	0x0403, r1	; 0x800403 <f_sec_change_o2_task>
     b44:	80 91 fc 03 	lds	r24, 0x03FC	; 0x8003fc <production_time_secs>
     b48:	90 91 fd 03 	lds	r25, 0x03FD	; 0x8003fd <production_time_secs+0x1>
     b4c:	01 96       	adiw	r24, 0x01	; 1
     b4e:	90 93 fd 03 	sts	0x03FD, r25	; 0x8003fd <production_time_secs+0x1>
     b52:	80 93 fc 03 	sts	0x03FC, r24	; 0x8003fc <production_time_secs>
_Z12time_elapsedm():
     b56:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <systemtick_msecs>
     b5a:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <systemtick_msecs+0x1>
     b5e:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <systemtick_msecs+0x2>
     b62:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <systemtick_msecs+0x3>
     b66:	40 91 14 04 	lds	r20, 0x0414	; 0x800414 <o2_main_task()::time_tag>
     b6a:	50 91 15 04 	lds	r21, 0x0415	; 0x800415 <o2_main_task()::time_tag+0x1>
     b6e:	60 91 16 04 	lds	r22, 0x0416	; 0x800416 <o2_main_task()::time_tag+0x2>
     b72:	70 91 17 04 	lds	r23, 0x0417	; 0x800417 <o2_main_task()::time_tag+0x3>
     b76:	84 1b       	sub	r24, r20
     b78:	95 0b       	sbc	r25, r21
     b7a:	a6 0b       	sbc	r26, r22
     b7c:	b7 0b       	sbc	r27, r23
_Z12o2_main_taskv():
     b7e:	40 91 ea 03 	lds	r20, 0x03EA	; 0x8003ea <nb_delay>
     b82:	50 91 eb 03 	lds	r21, 0x03EB	; 0x8003eb <nb_delay+0x1>
     b86:	60 91 ec 03 	lds	r22, 0x03EC	; 0x8003ec <nb_delay+0x2>
     b8a:	70 91 ed 03 	lds	r23, 0x03ED	; 0x8003ed <nb_delay+0x3>
     b8e:	84 17       	cp	r24, r20
     b90:	95 07       	cpc	r25, r21
     b92:	a6 07       	cpc	r26, r22
     b94:	b7 07       	cpc	r27, r23
     b96:	78 f1       	brcs	.+94     	; 0xbf6 <o2_main_task()+0xc8>
     b98:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <systemtick_msecs>
     b9c:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <systemtick_msecs+0x1>
     ba0:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <systemtick_msecs+0x2>
     ba4:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <systemtick_msecs+0x3>
     ba8:	80 93 14 04 	sts	0x0414, r24	; 0x800414 <o2_main_task()::time_tag>
     bac:	90 93 15 04 	sts	0x0415, r25	; 0x800415 <o2_main_task()::time_tag+0x1>
     bb0:	a0 93 16 04 	sts	0x0416, r26	; 0x800416 <o2_main_task()::time_tag+0x2>
     bb4:	b0 93 17 04 	sts	0x0417, r27	; 0x800417 <o2_main_task()::time_tag+0x3>
     bb8:	0e 94 48 05 	call	0xa90	; 0xa90 <tworks2_PSA_logic()>
     bbc:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <nb_delay>
     bc0:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <nb_delay+0x1>
     bc4:	a0 91 ec 03 	lds	r26, 0x03EC	; 0x8003ec <nb_delay+0x2>
     bc8:	b0 91 ed 03 	lds	r27, 0x03ED	; 0x8003ed <nb_delay+0x3>
     bcc:	40 91 e6 03 	lds	r20, 0x03E6	; 0x8003e6 <prev_nb_delay>
     bd0:	50 91 e7 03 	lds	r21, 0x03E7	; 0x8003e7 <prev_nb_delay+0x1>
     bd4:	60 91 e8 03 	lds	r22, 0x03E8	; 0x8003e8 <prev_nb_delay+0x2>
     bd8:	70 91 e9 03 	lds	r23, 0x03E9	; 0x8003e9 <prev_nb_delay+0x3>
     bdc:	84 17       	cp	r24, r20
     bde:	95 07       	cpc	r25, r21
     be0:	a6 07       	cpc	r26, r22
     be2:	b7 07       	cpc	r27, r23
     be4:	41 f0       	breq	.+16     	; 0xbf6 <o2_main_task()+0xc8>
     be6:	80 93 e6 03 	sts	0x03E6, r24	; 0x8003e6 <prev_nb_delay>
     bea:	90 93 e7 03 	sts	0x03E7, r25	; 0x8003e7 <prev_nb_delay+0x1>
     bee:	a0 93 e8 03 	sts	0x03E8, r26	; 0x8003e8 <prev_nb_delay+0x2>
     bf2:	b0 93 e9 03 	sts	0x03E9, r27	; 0x8003e9 <prev_nb_delay+0x3>
     bf6:	08 95       	ret

00000bf8 <o2_cons_init()>:
_Z12o2_cons_initv():
     bf8:	0e 94 65 02 	call	0x4ca	; 0x4ca <sensor_zero_calibration()>
     bfc:	88 e1       	ldi	r24, 0x18	; 24
     bfe:	95 e1       	ldi	r25, 0x15	; 21
     c00:	a0 e0       	ldi	r26, 0x00	; 0
     c02:	b0 e0       	ldi	r27, 0x00	; 0
     c04:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <Production_Delay>
     c08:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <Production_Delay+0x1>
     c0c:	a0 93 f8 03 	sts	0x03F8, r26	; 0x8003f8 <Production_Delay+0x2>
     c10:	b0 93 f9 03 	sts	0x03F9, r27	; 0x8003f9 <Production_Delay+0x3>
     c14:	8c eb       	ldi	r24, 0xBC	; 188
     c16:	92 e0       	ldi	r25, 0x02	; 2
     c18:	a0 e0       	ldi	r26, 0x00	; 0
     c1a:	b0 e0       	ldi	r27, 0x00	; 0
     c1c:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <PreCharge_Delay>
     c20:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <PreCharge_Delay+0x1>
     c24:	a0 93 f0 03 	sts	0x03F0, r26	; 0x8003f0 <PreCharge_Delay+0x2>
     c28:	b0 93 f1 03 	sts	0x03F1, r27	; 0x8003f1 <PreCharge_Delay+0x3>
     c2c:	60 e0       	ldi	r22, 0x00	; 0
     c2e:	81 e0       	ldi	r24, 0x01	; 1
     c30:	90 e0       	ldi	r25, 0x00	; 0
     c32:	0e 94 0d 05 	call	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>
     c36:	60 e0       	ldi	r22, 0x00	; 0
     c38:	82 e0       	ldi	r24, 0x02	; 2
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	0e 94 0d 05 	call	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>
     c40:	61 e0       	ldi	r22, 0x01	; 1
     c42:	84 e0       	ldi	r24, 0x04	; 4
     c44:	90 e0       	ldi	r25, 0x00	; 0
     c46:	0e 94 0d 05 	call	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>
     c4a:	84 ef       	ldi	r24, 0xF4	; 244
     c4c:	91 e0       	ldi	r25, 0x01	; 1
     c4e:	0c 94 a8 04 	jmp	0x950	; 0x950 <new_delay_msecs(unsigned int)>

00000c52 <ui_print_welcome()>:
_Z16ui_print_welcomev():
     c52:	40 e0       	ldi	r20, 0x00	; 0
     c54:	60 e0       	ldi	r22, 0x00	; 0
     c56:	89 e1       	ldi	r24, 0x19	; 25
     c58:	94 e0       	ldi	r25, 0x04	; 4
     c5a:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     c5e:	6e e3       	ldi	r22, 0x3E	; 62
     c60:	71 e0       	ldi	r23, 0x01	; 1
     c62:	89 e1       	ldi	r24, 0x19	; 25
     c64:	94 e0       	ldi	r25, 0x04	; 4
     c66:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
     c6a:	41 e0       	ldi	r20, 0x01	; 1
     c6c:	60 e0       	ldi	r22, 0x00	; 0
     c6e:	89 e1       	ldi	r24, 0x19	; 25
     c70:	94 e0       	ldi	r25, 0x04	; 4
     c72:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     c76:	61 e5       	ldi	r22, 0x51	; 81
     c78:	71 e0       	ldi	r23, 0x01	; 1
     c7a:	89 e1       	ldi	r24, 0x19	; 25
     c7c:	94 e0       	ldi	r25, 0x04	; 4
     c7e:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
     c82:	42 e0       	ldi	r20, 0x02	; 2
     c84:	60 e0       	ldi	r22, 0x00	; 0
     c86:	89 e1       	ldi	r24, 0x19	; 25
     c88:	94 e0       	ldi	r25, 0x04	; 4
     c8a:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     c8e:	60 e6       	ldi	r22, 0x60	; 96
     c90:	71 e0       	ldi	r23, 0x01	; 1
     c92:	89 e1       	ldi	r24, 0x19	; 25
     c94:	94 e0       	ldi	r25, 0x04	; 4
     c96:	0c 94 85 15 	jmp	0x2b0a	; 0x2b0a <Print::print(char const*)>

00000c9a <setup>:
_ZN14HardwareSerial5beginEm():
     c9a:	26 e0       	ldi	r18, 0x06	; 6
     c9c:	40 e0       	ldi	r20, 0x00	; 0
     c9e:	52 ec       	ldi	r21, 0xC2	; 194
     ca0:	61 e0       	ldi	r22, 0x01	; 1
     ca2:	70 e0       	ldi	r23, 0x00	; 0
     ca4:	80 e0       	ldi	r24, 0x00	; 0
     ca6:	95 e0       	ldi	r25, 0x05	; 5
     ca8:	0e 94 5a 14 	call	0x28b4	; 0x28b4 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
     cac:	0e 94 c8 04 	call	0x990	; 0x990 <platform_init()>
_Z7db_initv():
     cb0:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <f_system_running>
_Z7ui_initv():
     cb4:	0e 94 29 06 	call	0xc52	; 0xc52 <ui_print_welcome()>
setup():
     cb8:	0e 94 4d 02 	call	0x49a	; 0x49a <ads_init()>
     cbc:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <o2_cons_init()>

00000cc0 <beep_for(int)>:
_Z8beep_fori():
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:42

}



void beep_for (int msecs) {
     cc0:	cf 93       	push	r28
     cc2:	df 93       	push	r29
     cc4:	ec 01       	movw	r28, r24
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:44

    BUUZZER_CNTRL (BUZZ_ON);
     cc6:	61 e0       	ldi	r22, 0x01	; 1
     cc8:	80 e1       	ldi	r24, 0x10	; 16
     cca:	90 e0       	ldi	r25, 0x00	; 0
     ccc:	0e 94 0d 05 	call	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:45
    new_delay_msecs (msecs);
     cd0:	ce 01       	movw	r24, r28
     cd2:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:46
    BUUZZER_CNTRL (BUZZ_OFF);
     cd6:	60 e0       	ldi	r22, 0x00	; 0
     cd8:	80 e1       	ldi	r24, 0x10	; 16
     cda:	90 e0       	ldi	r25, 0x00	; 0
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:48

}
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:46

void beep_for (int msecs) {

    BUUZZER_CNTRL (BUZZ_ON);
    new_delay_msecs (msecs);
    BUUZZER_CNTRL (BUZZ_OFF);
     ce0:	0c 94 0d 05 	jmp	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>

00000ce4 <multi_beeps(int)>:
_Z11multi_beepsi():
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:51

}


void multi_beeps (int count) {
     ce4:	0f 93       	push	r16
     ce6:	1f 93       	push	r17
     ce8:	cf 93       	push	r28
     cea:	df 93       	push	r29
     cec:	8c 01       	movw	r16, r24
     cee:	0b 97       	sbiw	r24, 0x0b	; 11
     cf0:	14 f0       	brlt	.+4      	; 0xcf6 <multi_beeps(int)+0x12>
     cf2:	0a e0       	ldi	r16, 0x0A	; 10
     cf4:	10 e0       	ldi	r17, 0x00	; 0
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:58
    int   i;
    if (count > 10) {
        count = 10;
    }

    for (i = 0; i < count; i++)
     cf6:	d0 e0       	ldi	r29, 0x00	; 0
     cf8:	c0 e0       	ldi	r28, 0x00	; 0
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:58 (discriminator 3)
     cfa:	c0 17       	cp	r28, r16
     cfc:	d1 07       	cpc	r29, r17
     cfe:	54 f4       	brge	.+20     	; 0xd14 <multi_beeps(int)+0x30>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:60 (discriminator 2)
    {
        beep_for (50);
     d00:	82 e3       	ldi	r24, 0x32	; 50
     d02:	90 e0       	ldi	r25, 0x00	; 0
     d04:	0e 94 60 06 	call	0xcc0	; 0xcc0 <beep_for(int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:61 (discriminator 2)
        new_delay_msecs (100);
     d08:	84 e6       	ldi	r24, 0x64	; 100
     d0a:	90 e0       	ldi	r25, 0x00	; 0
     d0c:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:58 (discriminator 2)
    int   i;
    if (count > 10) {
        count = 10;
    }

    for (i = 0; i < count; i++)
     d10:	21 96       	adiw	r28, 0x01	; 1
     d12:	f3 cf       	rjmp	.-26     	; 0xcfa <multi_beeps(int)+0x16>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:64
    {
        beep_for (50);
        new_delay_msecs (100);
    }

}
     d14:	df 91       	pop	r29
     d16:	cf 91       	pop	r28
     d18:	1f 91       	pop	r17
     d1a:	0f 91       	pop	r16
     d1c:	08 95       	ret

00000d1e <power_on_self_test()>:
_Z18power_on_self_testv():
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:319



void power_on_self_test (void) {

    lcd.setCursor(0, 1);
     d1e:	41 e0       	ldi	r20, 0x01	; 1
     d20:	60 e0       	ldi	r22, 0x00	; 0
     d22:	89 e1       	ldi	r24, 0x19	; 25
     d24:	94 e0       	ldi	r25, 0x04	; 4
     d26:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:320
    lcd.print("Relay Tests..");
     d2a:	65 e7       	ldi	r22, 0x75	; 117
     d2c:	71 e0       	ldi	r23, 0x01	; 1
     d2e:	89 e1       	ldi	r24, 0x19	; 25
     d30:	94 e0       	ldi	r25, 0x04	; 4
     d32:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:323

    // 1. Relay Z1TSOL
    lcd.setCursor(0, 2);
     d36:	42 e0       	ldi	r20, 0x02	; 2
     d38:	60 e0       	ldi	r22, 0x00	; 0
     d3a:	89 e1       	ldi	r24, 0x19	; 25
     d3c:	94 e0       	ldi	r25, 0x04	; 4
     d3e:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:324
    lcd.print("Z1TSOL - OPEN   ");
     d42:	63 e8       	ldi	r22, 0x83	; 131
     d44:	71 e0       	ldi	r23, 0x01	; 1
     d46:	89 e1       	ldi	r24, 0x19	; 25
     d48:	94 e0       	ldi	r25, 0x04	; 4
     d4a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:325
    digitalWrite(Sieve_A_Valve_Z1,      OPEN_VALVE);
     d4e:	60 e0       	ldi	r22, 0x00	; 0
     d50:	83 e0       	ldi	r24, 0x03	; 3
     d52:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:326
    beep_for (HIGH_BEEP);   // msecs
     d56:	88 ec       	ldi	r24, 0xC8	; 200
     d58:	90 e0       	ldi	r25, 0x00	; 0
     d5a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <beep_for(int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:327
    new_delay_msecs (5000);
     d5e:	88 e8       	ldi	r24, 0x88	; 136
     d60:	93 e1       	ldi	r25, 0x13	; 19
     d62:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:329

    lcd.setCursor(0, 2);
     d66:	42 e0       	ldi	r20, 0x02	; 2
     d68:	60 e0       	ldi	r22, 0x00	; 0
     d6a:	89 e1       	ldi	r24, 0x19	; 25
     d6c:	94 e0       	ldi	r25, 0x04	; 4
     d6e:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:330
    lcd.print("Z1TSOL - CLOSE  ");
     d72:	64 e9       	ldi	r22, 0x94	; 148
     d74:	71 e0       	ldi	r23, 0x01	; 1
     d76:	89 e1       	ldi	r24, 0x19	; 25
     d78:	94 e0       	ldi	r25, 0x04	; 4
     d7a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:331
    digitalWrite(Sieve_A_Valve_Z1,      CLOSE_VALVE);
     d7e:	61 e0       	ldi	r22, 0x01	; 1
     d80:	83 e0       	ldi	r24, 0x03	; 3
     d82:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:332
    beep_for (LOW_BEEP);   // msecs
     d86:	82 e3       	ldi	r24, 0x32	; 50
     d88:	90 e0       	ldi	r25, 0x00	; 0
     d8a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <beep_for(int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:334

    new_delay_msecs (5000);
     d8e:	88 e8       	ldi	r24, 0x88	; 136
     d90:	93 e1       	ldi	r25, 0x13	; 19
     d92:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:338


    // 2. Relay Z2TSOL
    lcd.setCursor(0, 2);
     d96:	42 e0       	ldi	r20, 0x02	; 2
     d98:	60 e0       	ldi	r22, 0x00	; 0
     d9a:	89 e1       	ldi	r24, 0x19	; 25
     d9c:	94 e0       	ldi	r25, 0x04	; 4
     d9e:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:339
    lcd.print("Z2TSOL - OPEN   ");
     da2:	65 ea       	ldi	r22, 0xA5	; 165
     da4:	71 e0       	ldi	r23, 0x01	; 1
     da6:	89 e1       	ldi	r24, 0x19	; 25
     da8:	94 e0       	ldi	r25, 0x04	; 4
     daa:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:340
    digitalWrite(Sieve_B_Valve_Z2,      OPEN_VALVE);
     dae:	60 e0       	ldi	r22, 0x00	; 0
     db0:	84 e0       	ldi	r24, 0x04	; 4
     db2:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:341
    beep_for (HIGH_BEEP);   // msecs
     db6:	88 ec       	ldi	r24, 0xC8	; 200
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	0e 94 60 06 	call	0xcc0	; 0xcc0 <beep_for(int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:342
    new_delay_msecs (5000);
     dbe:	88 e8       	ldi	r24, 0x88	; 136
     dc0:	93 e1       	ldi	r25, 0x13	; 19
     dc2:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:343
    lcd.setCursor(0, 2);
     dc6:	42 e0       	ldi	r20, 0x02	; 2
     dc8:	60 e0       	ldi	r22, 0x00	; 0
     dca:	89 e1       	ldi	r24, 0x19	; 25
     dcc:	94 e0       	ldi	r25, 0x04	; 4
     dce:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:344
    lcd.print("Z2TSOL - CLOSE  ");
     dd2:	66 eb       	ldi	r22, 0xB6	; 182
     dd4:	71 e0       	ldi	r23, 0x01	; 1
     dd6:	89 e1       	ldi	r24, 0x19	; 25
     dd8:	94 e0       	ldi	r25, 0x04	; 4
     dda:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:345
    digitalWrite(Sieve_B_Valve_Z2,      CLOSE_VALVE);
     dde:	61 e0       	ldi	r22, 0x01	; 1
     de0:	84 e0       	ldi	r24, 0x04	; 4
     de2:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:346
    beep_for (LOW_BEEP);   // msecs
     de6:	82 e3       	ldi	r24, 0x32	; 50
     de8:	90 e0       	ldi	r25, 0x00	; 0
     dea:	0e 94 60 06 	call	0xcc0	; 0xcc0 <beep_for(int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:347
    new_delay_msecs (2000);
     dee:	80 ed       	ldi	r24, 0xD0	; 208
     df0:	97 e0       	ldi	r25, 0x07	; 7
     df2:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:350

    // 3. Relay BCKFSOL
    lcd.setCursor(0, 2);
     df6:	42 e0       	ldi	r20, 0x02	; 2
     df8:	60 e0       	ldi	r22, 0x00	; 0
     dfa:	89 e1       	ldi	r24, 0x19	; 25
     dfc:	94 e0       	ldi	r25, 0x04	; 4
     dfe:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:351
    lcd.print("BCKFSOL - OPEN  ");
     e02:	67 ec       	ldi	r22, 0xC7	; 199
     e04:	71 e0       	ldi	r23, 0x01	; 1
     e06:	89 e1       	ldi	r24, 0x19	; 25
     e08:	94 e0       	ldi	r25, 0x04	; 4
     e0a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:352
    digitalWrite(PreCharge_Valve_BCKF,  OPEN_VALVE);
     e0e:	60 e0       	ldi	r22, 0x00	; 0
     e10:	85 e0       	ldi	r24, 0x05	; 5
     e12:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:353
    beep_for (HIGH_BEEP);   // msecs
     e16:	88 ec       	ldi	r24, 0xC8	; 200
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <beep_for(int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:354
    new_delay_msecs (5000);
     e1e:	88 e8       	ldi	r24, 0x88	; 136
     e20:	93 e1       	ldi	r25, 0x13	; 19
     e22:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:356

    lcd.setCursor(0, 2);
     e26:	42 e0       	ldi	r20, 0x02	; 2
     e28:	60 e0       	ldi	r22, 0x00	; 0
     e2a:	89 e1       	ldi	r24, 0x19	; 25
     e2c:	94 e0       	ldi	r25, 0x04	; 4
     e2e:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:357
    lcd.print("BCKFSOL - CLOSE ");
     e32:	68 ed       	ldi	r22, 0xD8	; 216
     e34:	71 e0       	ldi	r23, 0x01	; 1
     e36:	89 e1       	ldi	r24, 0x19	; 25
     e38:	94 e0       	ldi	r25, 0x04	; 4
     e3a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:358
    digitalWrite(PreCharge_Valve_BCKF,  CLOSE_VALVE);
     e3e:	61 e0       	ldi	r22, 0x01	; 1
     e40:	85 e0       	ldi	r24, 0x05	; 5
     e42:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:359
    beep_for (LOW_BEEP);   // msecs
     e46:	82 e3       	ldi	r24, 0x32	; 50
     e48:	90 e0       	ldi	r25, 0x00	; 0
     e4a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <beep_for(int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:360
    new_delay_msecs (2000);
     e4e:	80 ed       	ldi	r24, 0xD0	; 208
     e50:	97 e0       	ldi	r25, 0x07	; 7
     e52:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:363

    //lcd.clear();
    lcd.setCursor(0, 1);
     e56:	41 e0       	ldi	r20, 0x01	; 1
     e58:	60 e0       	ldi	r22, 0x00	; 0
     e5a:	89 e1       	ldi	r24, 0x19	; 25
     e5c:	94 e0       	ldi	r25, 0x04	; 4
     e5e:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:364
    lcd.print("Compressor Test..");
     e62:	69 ee       	ldi	r22, 0xE9	; 233
     e64:	71 e0       	ldi	r23, 0x01	; 1
     e66:	89 e1       	ldi	r24, 0x19	; 25
     e68:	94 e0       	ldi	r25, 0x04	; 4
     e6a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:368

    // 4. Compressor check
    // Open release valves.. to avoid blocking of compressor o/p during its test-run
    lcd.setCursor(0, 2);
     e6e:	42 e0       	ldi	r20, 0x02	; 2
     e70:	60 e0       	ldi	r22, 0x00	; 0
     e72:	89 e1       	ldi	r24, 0x19	; 25
     e74:	94 e0       	ldi	r25, 0x04	; 4
     e76:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:370
    //        "...................."
    lcd.print("Opening releaseValvs");
     e7a:	6b ef       	ldi	r22, 0xFB	; 251
     e7c:	71 e0       	ldi	r23, 0x01	; 1
     e7e:	89 e1       	ldi	r24, 0x19	; 25
     e80:	94 e0       	ldi	r25, 0x04	; 4
     e82:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:371
    beep_for (HIGH_BEEP);   // msecs
     e86:	88 ec       	ldi	r24, 0xC8	; 200
     e88:	90 e0       	ldi	r25, 0x00	; 0
     e8a:	0e 94 60 06 	call	0xcc0	; 0xcc0 <beep_for(int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:372
    digitalWrite(Sieve_A_Valve_Z1,      OPEN_VALVE);
     e8e:	60 e0       	ldi	r22, 0x00	; 0
     e90:	83 e0       	ldi	r24, 0x03	; 3
     e92:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:373
    digitalWrite(Sieve_B_Valve_Z2,      OPEN_VALVE);
     e96:	60 e0       	ldi	r22, 0x00	; 0
     e98:	84 e0       	ldi	r24, 0x04	; 4
     e9a:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:374
    new_delay_msecs (1000);
     e9e:	88 ee       	ldi	r24, 0xE8	; 232
     ea0:	93 e0       	ldi	r25, 0x03	; 3
     ea2:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:376

    lcd.setCursor(0, 2);
     ea6:	42 e0       	ldi	r20, 0x02	; 2
     ea8:	60 e0       	ldi	r22, 0x00	; 0
     eaa:	89 e1       	ldi	r24, 0x19	; 25
     eac:	94 e0       	ldi	r25, 0x04	; 4
     eae:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:377
    lcd.print("Compressor - ON     ");
     eb2:	60 e1       	ldi	r22, 0x10	; 16
     eb4:	72 e0       	ldi	r23, 0x02	; 2
     eb6:	89 e1       	ldi	r24, 0x19	; 25
     eb8:	94 e0       	ldi	r25, 0x04	; 4
     eba:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:378
    digitalWrite(PreCharge_Valve_BCKF,  OPEN_VALVE);
     ebe:	60 e0       	ldi	r22, 0x00	; 0
     ec0:	85 e0       	ldi	r24, 0x05	; 5
     ec2:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:379
    beep_for (HIGH_BEEP);   // msecs
     ec6:	88 ec       	ldi	r24, 0xC8	; 200
     ec8:	90 e0       	ldi	r25, 0x00	; 0
     eca:	0e 94 60 06 	call	0xcc0	; 0xcc0 <beep_for(int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:380
    new_delay_msecs (5000);
     ece:	88 e8       	ldi	r24, 0x88	; 136
     ed0:	93 e1       	ldi	r25, 0x13	; 19
     ed2:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:381
    COMPRSSR_CNTRL (COMPRSSR_ON);
     ed6:	61 e0       	ldi	r22, 0x01	; 1
     ed8:	88 e0       	ldi	r24, 0x08	; 8
     eda:	90 e0       	ldi	r25, 0x00	; 0
     edc:	0e 94 0d 05 	call	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:383

    BUUZZER_CNTRL (BUZZ_OFF);
     ee0:	60 e0       	ldi	r22, 0x00	; 0
     ee2:	80 e1       	ldi	r24, 0x10	; 16
     ee4:	90 e0       	ldi	r25, 0x00	; 0
     ee6:	0e 94 0d 05 	call	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:384
    COMPRSSR_CNTRL (COMPRSSR_OFF);
     eea:	60 e0       	ldi	r22, 0x00	; 0
     eec:	88 e0       	ldi	r24, 0x08	; 8
     eee:	90 e0       	ldi	r25, 0x00	; 0
     ef0:	0e 94 0d 05 	call	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:385
    lcd.setCursor(0, 2);
     ef4:	42 e0       	ldi	r20, 0x02	; 2
     ef6:	60 e0       	ldi	r22, 0x00	; 0
     ef8:	89 e1       	ldi	r24, 0x19	; 25
     efa:	94 e0       	ldi	r25, 0x04	; 4
     efc:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:386
    lcd.print("Compressor - OFF    ");
     f00:	65 e2       	ldi	r22, 0x25	; 37
     f02:	72 e0       	ldi	r23, 0x02	; 2
     f04:	89 e1       	ldi	r24, 0x19	; 25
     f06:	94 e0       	ldi	r25, 0x04	; 4
     f08:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:387
    digitalWrite(PreCharge_Valve_BCKF,  CLOSE_VALVE);
     f0c:	61 e0       	ldi	r22, 0x01	; 1
     f0e:	85 e0       	ldi	r24, 0x05	; 5
     f10:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:388
    beep_for (LOW_BEEP);   // msecs
     f14:	82 e3       	ldi	r24, 0x32	; 50
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 60 06 	call	0xcc0	; 0xcc0 <beep_for(int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:389
    new_delay_msecs (1000);
     f1c:	88 ee       	ldi	r24, 0xE8	; 232
     f1e:	93 e0       	ldi	r25, 0x03	; 3
     f20:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:391

    lcd.clear();
     f24:	89 e1       	ldi	r24, 0x19	; 25
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	0e 94 9e 0b 	call	0x173c	; 0x173c <LiquidCrystal::clear()>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:392
    lcd.setCursor(0, 3);
     f2c:	43 e0       	ldi	r20, 0x03	; 3
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	89 e1       	ldi	r24, 0x19	; 25
     f32:	94 e0       	ldi	r25, 0x04	; 4
     f34:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:394
    //  "1.3.5.7.9.........20"
    lcd.print("Testing over...!!   ");
     f38:	6a e3       	ldi	r22, 0x3A	; 58
     f3a:	72 e0       	ldi	r23, 0x02	; 2
     f3c:	89 e1       	ldi	r24, 0x19	; 25
     f3e:	94 e0       	ldi	r25, 0x04	; 4
     f40:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:395
    new_delay_msecs (2000);
     f44:	80 ed       	ldi	r24, 0xD0	; 208
     f46:	97 e0       	ldi	r25, 0x07	; 7
     f48:	0c 94 a8 04 	jmp	0x950	; 0x950 <new_delay_msecs(unsigned int)>

00000f4c <ui_task_main()>:
_Z12ui_task_mainv():
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:68

}



void ui_task_main (void)    {
     f4c:	8f 92       	push	r8
     f4e:	9f 92       	push	r9
     f50:	af 92       	push	r10
     f52:	bf 92       	push	r11
     f54:	cf 92       	push	r12
     f56:	df 92       	push	r13
     f58:	ef 92       	push	r14
     f5a:	ff 92       	push	r15
     f5c:	0f 93       	push	r16
     f5e:	1f 93       	push	r17
     f60:	cf 93       	push	r28
     f62:	df 93       	push	r29
     f64:	cd b7       	in	r28, 0x3d	; 61
     f66:	de b7       	in	r29, 0x3e	; 62
     f68:	2c 97       	sbiw	r28, 0x0c	; 12
     f6a:	0f b6       	in	r0, 0x3f	; 63
     f6c:	f8 94       	cli
     f6e:	de bf       	out	0x3e, r29	; 62
     f70:	0f be       	out	0x3f, r0	; 63
     f72:	cd bf       	out	0x3d, r28	; 61
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:76
    static unsigned long  time_tag;
    static unsigned int   state_time;
    char                  str_temp[6];
    char                  str_temp2[6];

    buttonState = digitalRead(startButtonPin);
     f74:	8c e0       	ldi	r24, 0x0C	; 12
     f76:	0e 94 51 13 	call	0x26a2	; 0x26a2 <digitalRead>
     f7a:	90 93 a3 03 	sts	0x03A3, r25	; 0x8003a3 <buttonState+0x1>
     f7e:	80 93 a2 03 	sts	0x03A2, r24	; 0x8003a2 <buttonState>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:78

    if (f_sec_change_ui_task) {
     f82:	20 91 04 04 	lds	r18, 0x0404	; 0x800404 <f_sec_change_ui_task>
     f86:	22 23       	and	r18, r18
     f88:	61 f0       	breq	.+24     	; 0xfa2 <ui_task_main()+0x56>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:79
        f_sec_change_ui_task = 0;
     f8a:	10 92 04 04 	sts	0x0404, r1	; 0x800404 <f_sec_change_ui_task>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:80
        state_time++;
     f8e:	20 91 96 03 	lds	r18, 0x0396	; 0x800396 <__data_end>
     f92:	30 91 97 03 	lds	r19, 0x0397	; 0x800397 <__data_end+0x1>
     f96:	2f 5f       	subi	r18, 0xFF	; 255
     f98:	3f 4f       	sbci	r19, 0xFF	; 255
     f9a:	30 93 97 03 	sts	0x0397, r19	; 0x800397 <__data_end+0x1>
     f9e:	20 93 96 03 	sts	0x0396, r18	; 0x800396 <__data_end>
     fa2:	20 91 9c 03 	lds	r18, 0x039C	; 0x80039c <ui_task_main()::button_debounce_delay>
     fa6:	30 91 9d 03 	lds	r19, 0x039D	; 0x80039d <ui_task_main()::button_debounce_delay+0x1>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:83
    }

    if (buttonState == BUTTON_ACTIVE) {   // press detection
     faa:	89 2b       	or	r24, r25
     fac:	41 f5       	brne	.+80     	; 0xffe <ui_task_main()+0xb2>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:84
        button_debounce_delay++;
     fae:	2f 5f       	subi	r18, 0xFF	; 255
     fb0:	3f 4f       	sbci	r19, 0xFF	; 255
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:85
        if (button_debounce_delay >= BUTTON_DEBOUNCE_DLY)   {
     fb2:	27 33       	cpi	r18, 0x37	; 55
     fb4:	31 05       	cpc	r19, r1
     fb6:	c4 f4       	brge	.+48     	; 0xfe8 <ui_task_main()+0x9c>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:84
        f_sec_change_ui_task = 0;
        state_time++;
    }

    if (buttonState == BUTTON_ACTIVE) {   // press detection
        button_debounce_delay++;
     fb8:	30 93 9d 03 	sts	0x039D, r19	; 0x80039d <ui_task_main()::button_debounce_delay+0x1>
     fbc:	20 93 9c 03 	sts	0x039C, r18	; 0x80039c <ui_task_main()::button_debounce_delay>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:110
        }

    }


    switch (ui_state)
     fc0:	e0 91 a8 03 	lds	r30, 0x03A8	; 0x8003a8 <ui_state>
     fc4:	f0 91 a9 03 	lds	r31, 0x03A9	; 0x8003a9 <ui_state+0x1>
     fc8:	e8 30       	cpi	r30, 0x08	; 8
     fca:	f1 05       	cpc	r31, r1
     fcc:	08 f0       	brcs	.+2      	; 0xfd0 <ui_task_main()+0x84>
     fce:	b7 c2       	rjmp	.+1390   	; 0x153e <ui_task_main()+0x5f2>
     fd0:	e4 51       	subi	r30, 0x14	; 20
     fd2:	f8 4f       	sbci	r31, 0xF8	; 248
     fd4:	0c 94 e4 19 	jmp	0x33c8	; 0x33c8 <__tablejump2__>
     fd8:	32 08       	sbc	r3, r2
     fda:	cb 08       	sbc	r12, r11
     fdc:	ec 08       	sbc	r14, r12
     fde:	05 09       	sbc	r16, r5
     fe0:	1e 09       	sbc	r17, r14
     fe2:	33 09       	sbc	r19, r3
     fe4:	6d 09       	sbc	r22, r13
     fe6:	5a 0a       	sbc	r5, r26
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:86
    }

    if (buttonState == BUTTON_ACTIVE) {   // press detection
        button_debounce_delay++;
        if (button_debounce_delay >= BUTTON_DEBOUNCE_DLY)   {
            button_debounce_delay = 0;
     fe8:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <ui_task_main()::button_debounce_delay+0x1>
     fec:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <ui_task_main()::button_debounce_delay>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:87
            button_pressed = true;
     ff0:	81 e0       	ldi	r24, 0x01	; 1
     ff2:	90 e0       	ldi	r25, 0x00	; 0
     ff4:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <button_pressed+0x1>
     ff8:	80 93 a0 03 	sts	0x03A0, r24	; 0x8003a0 <button_pressed>
     ffc:	e1 cf       	rjmp	.-62     	; 0xfc0 <ui_task_main()+0x74>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:94
        // temp
        DBG_PRINT  ("button_debounce_delay : ");
        DBG_PRINTLN(button_debounce_delay);
    }
    else {  // release detection
        if (button_debounce_delay)
     ffe:	21 15       	cp	r18, r1
    1000:	31 05       	cpc	r19, r1
    1002:	31 f0       	breq	.+12     	; 0x1010 <ui_task_main()+0xc4>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:95
            button_debounce_delay--;
    1004:	21 50       	subi	r18, 0x01	; 1
    1006:	31 09       	sbc	r19, r1
    1008:	30 93 9d 03 	sts	0x039D, r19	; 0x80039d <ui_task_main()::button_debounce_delay+0x1>
    100c:	20 93 9c 03 	sts	0x039C, r18	; 0x80039c <ui_task_main()::button_debounce_delay>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:96
        if (button_debounce_delay == 0)    {
    1010:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <ui_task_main()::button_debounce_delay>
    1014:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <ui_task_main()::button_debounce_delay+0x1>
    1018:	89 2b       	or	r24, r25
    101a:	91 f6       	brne	.-92     	; 0xfc0 <ui_task_main()+0x74>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:97
            if (button_pressed) {
    101c:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <button_pressed>
    1020:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <button_pressed+0x1>
    1024:	89 2b       	or	r24, r25
    1026:	61 f2       	breq	.-104    	; 0xfc0 <ui_task_main()+0x74>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:98
                button_pressed = false;
    1028:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <button_pressed+0x1>
    102c:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <button_pressed>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:99
                button_press_count++;
    1030:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <button_press_count>
    1034:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <button_press_count+0x1>
    1038:	01 96       	adiw	r24, 0x01	; 1
    103a:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <button_press_count+0x1>
    103e:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <button_press_count>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:100
                time_tag = systemtick_msecs;
    1042:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <systemtick_msecs>
    1046:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <systemtick_msecs+0x1>
    104a:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <systemtick_msecs+0x2>
    104e:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <systemtick_msecs+0x3>
    1052:	80 93 98 03 	sts	0x0398, r24	; 0x800398 <ui_task_main()::time_tag>
    1056:	90 93 99 03 	sts	0x0399, r25	; 0x800399 <ui_task_main()::time_tag+0x1>
    105a:	a0 93 9a 03 	sts	0x039A, r26	; 0x80039a <ui_task_main()::time_tag+0x2>
    105e:	b0 93 9b 03 	sts	0x039B, r27	; 0x80039b <ui_task_main()::time_tag+0x3>
    1062:	ae cf       	rjmp	.-164    	; 0xfc0 <ui_task_main()+0x74>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:114

    switch (ui_state)
    {
        case UI_START:
            //if (powerUpTimer.check())   {
            if (state_time >= 5) {
    1064:	80 91 96 03 	lds	r24, 0x0396	; 0x800396 <__data_end>
    1068:	90 91 97 03 	lds	r25, 0x0397	; 0x800397 <__data_end+0x1>
    106c:	05 97       	sbiw	r24, 0x05	; 5
    106e:	08 f4       	brcc	.+2      	; 0x1072 <ui_task_main()+0x126>
    1070:	42 c0       	rjmp	.+132    	; 0x10f6 <ui_task_main()+0x1aa>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:115
                ui_state = UI_SYS_INIT;
    1072:	84 e0       	ldi	r24, 0x04	; 4
    1074:	90 e0       	ldi	r25, 0x00	; 0
    1076:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <ui_state+0x1>
    107a:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <ui_state>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:116
                lcd.setCursor(0, 3);
    107e:	43 e0       	ldi	r20, 0x03	; 3
    1080:	60 e0       	ldi	r22, 0x00	; 0
    1082:	89 e1       	ldi	r24, 0x19	; 25
    1084:	94 e0       	ldi	r25, 0x04	; 4
    1086:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:117
                button_press_count = 0;
    108a:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <button_press_count+0x1>
    108e:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <button_press_count>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:118
                lcd.print("Press ButtonToStart!");
    1092:	6f e4       	ldi	r22, 0x4F	; 79
    1094:	72 e0       	ldi	r23, 0x02	; 2
    1096:	89 e1       	ldi	r24, 0x19	; 25
    1098:	94 e0       	ldi	r25, 0x04	; 4
    109a:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:305
        case UI_LAST:
            ui_state = UI_START;
            break;
    }

    if (ui_state != prev_ui_state ) {
    109e:	80 91 a8 03 	lds	r24, 0x03A8	; 0x8003a8 <ui_state>
    10a2:	90 91 a9 03 	lds	r25, 0x03A9	; 0x8003a9 <ui_state+0x1>
    10a6:	20 91 a6 03 	lds	r18, 0x03A6	; 0x8003a6 <prev_ui_state>
    10aa:	30 91 a7 03 	lds	r19, 0x03A7	; 0x8003a7 <prev_ui_state+0x1>
    10ae:	82 17       	cp	r24, r18
    10b0:	93 07       	cpc	r25, r19
    10b2:	71 f0       	breq	.+28     	; 0x10d0 <ui_task_main()+0x184>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:306
        prev_ui_state = ui_state;
    10b4:	90 93 a7 03 	sts	0x03A7, r25	; 0x8003a7 <prev_ui_state+0x1>
    10b8:	80 93 a6 03 	sts	0x03A6, r24	; 0x8003a6 <prev_ui_state>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:307
        f_state_changed = 1;
    10bc:	81 e0       	ldi	r24, 0x01	; 1
    10be:	90 e0       	ldi	r25, 0x00	; 0
    10c0:	90 93 a5 03 	sts	0x03A5, r25	; 0x8003a5 <f_state_changed+0x1>
    10c4:	80 93 a4 03 	sts	0x03A4, r24	; 0x8003a4 <f_state_changed>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:308
        state_time = 0;
    10c8:	10 92 97 03 	sts	0x0397, r1	; 0x800397 <__data_end+0x1>
    10cc:	10 92 96 03 	sts	0x0396, r1	; 0x800396 <__data_end>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:312
        DBG_PRINT("ui_state : ");
        DBG_PRINTLN(ui_state);
    }
}
    10d0:	2c 96       	adiw	r28, 0x0c	; 12
    10d2:	0f b6       	in	r0, 0x3f	; 63
    10d4:	f8 94       	cli
    10d6:	de bf       	out	0x3e, r29	; 62
    10d8:	0f be       	out	0x3f, r0	; 63
    10da:	cd bf       	out	0x3d, r28	; 61
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	1f 91       	pop	r17
    10e2:	0f 91       	pop	r16
    10e4:	ff 90       	pop	r15
    10e6:	ef 90       	pop	r14
    10e8:	df 90       	pop	r13
    10ea:	cf 90       	pop	r12
    10ec:	bf 90       	pop	r11
    10ee:	af 90       	pop	r10
    10f0:	9f 90       	pop	r9
    10f2:	8f 90       	pop	r8
    10f4:	08 95       	ret
_Z12time_elapsedm():
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/platform.ino:187



unsigned long int time_elapsed (unsigned long int time_delay)  {

    return systemtick_msecs - time_delay;
    10f6:	80 91 10 04 	lds	r24, 0x0410	; 0x800410 <systemtick_msecs>
    10fa:	90 91 11 04 	lds	r25, 0x0411	; 0x800411 <systemtick_msecs+0x1>
    10fe:	a0 91 12 04 	lds	r26, 0x0412	; 0x800412 <systemtick_msecs+0x2>
    1102:	b0 91 13 04 	lds	r27, 0x0413	; 0x800413 <systemtick_msecs+0x3>
    1106:	40 91 98 03 	lds	r20, 0x0398	; 0x800398 <ui_task_main()::time_tag>
    110a:	50 91 99 03 	lds	r21, 0x0399	; 0x800399 <ui_task_main()::time_tag+0x1>
    110e:	60 91 9a 03 	lds	r22, 0x039A	; 0x80039a <ui_task_main()::time_tag+0x2>
    1112:	70 91 9b 03 	lds	r23, 0x039B	; 0x80039b <ui_task_main()::time_tag+0x3>
    1116:	84 1b       	sub	r24, r20
    1118:	95 0b       	sbc	r25, r21
    111a:	a6 0b       	sbc	r26, r22
    111c:	b7 0b       	sbc	r27, r23
_Z12ui_task_mainv():
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:120
                ui_state = UI_SYS_INIT;
                lcd.setCursor(0, 3);
                button_press_count = 0;
                lcd.print("Press ButtonToStart!");
            }
            else if (time_elapsed (time_tag) > 1500) {
    111e:	8d 3d       	cpi	r24, 0xDD	; 221
    1120:	95 40       	sbci	r25, 0x05	; 5
    1122:	a1 05       	cpc	r26, r1
    1124:	b1 05       	cpc	r27, r1
    1126:	68 f1       	brcs	.+90     	; 0x1182 <ui_task_main()+0x236>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:121
                if (button_press_count >= CALIBRATION_MODE_ENTRY_CHECK)  {
    1128:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <button_press_count>
    112c:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <button_press_count+0x1>
    1130:	85 30       	cpi	r24, 0x05	; 5
    1132:	91 05       	cpc	r25, r1
    1134:	ec f0       	brlt	.+58     	; 0x1170 <ui_task_main()+0x224>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:122
                    button_press_count = 0;
    1136:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <button_press_count+0x1>
    113a:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <button_press_count>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:123
                    ui_state = UI_CALIB_MODE;
    113e:	81 e0       	ldi	r24, 0x01	; 1
    1140:	90 e0       	ldi	r25, 0x00	; 0
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:127
                }
                else if (button_press_count >= FACTORY_MODE_ENTRY_CHECK)  {
                    button_press_count = 0;
                    ui_state = UI_FACTORY_MODE;
    1142:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <ui_state+0x1>
    1146:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <ui_state>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:129
                }
                if (button_press_count >= CONFIG_MODE_ENTRY_CHECK)  {
    114a:	80 91 9e 03 	lds	r24, 0x039E	; 0x80039e <button_press_count>
    114e:	90 91 9f 03 	lds	r25, 0x039F	; 0x80039f <button_press_count+0x1>
    1152:	18 16       	cp	r1, r24
    1154:	19 06       	cpc	r1, r25
    1156:	0c f0       	brlt	.+2      	; 0x115a <ui_task_main()+0x20e>
    1158:	a2 cf       	rjmp	.-188    	; 0x109e <ui_task_main()+0x152>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:130
                    button_press_count = 0;
    115a:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <button_press_count+0x1>
    115e:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <button_press_count>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:131
                    ui_state = UI_CONFIG_MODE;
    1162:	83 e0       	ldi	r24, 0x03	; 3
    1164:	90 e0       	ldi	r25, 0x00	; 0
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:161

            multi_beeps (3);

            // Power On self test - on demand
            power_on_self_test ();
            ui_state = UI_SYS_INIT;
    1166:	90 93 a9 03 	sts	0x03A9, r25	; 0x8003a9 <ui_state+0x1>
    116a:	80 93 a8 03 	sts	0x03A8, r24	; 0x8003a8 <ui_state>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:162
            break;
    116e:	97 cf       	rjmp	.-210    	; 0x109e <ui_task_main()+0x152>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:125
            else if (time_elapsed (time_tag) > 1500) {
                if (button_press_count >= CALIBRATION_MODE_ENTRY_CHECK)  {
                    button_press_count = 0;
                    ui_state = UI_CALIB_MODE;
                }
                else if (button_press_count >= FACTORY_MODE_ENTRY_CHECK)  {
    1170:	03 97       	sbiw	r24, 0x03	; 3
    1172:	5c f3       	brlt	.-42     	; 0x114a <ui_task_main()+0x1fe>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:126
                    button_press_count = 0;
    1174:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <button_press_count+0x1>
    1178:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <button_press_count>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:127
                    ui_state = UI_FACTORY_MODE;
    117c:	82 e0       	ldi	r24, 0x02	; 2
    117e:	90 e0       	ldi	r25, 0x00	; 0
    1180:	e0 cf       	rjmp	.-64     	; 0x1142 <ui_task_main()+0x1f6>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:135
                    button_press_count = 0;
                    ui_state = UI_CONFIG_MODE;
                }
            }
            else {
                if (f_state_changed)  {
    1182:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <f_state_changed>
    1186:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <f_state_changed+0x1>
    118a:	89 2b       	or	r24, r25
    118c:	09 f4       	brne	.+2      	; 0x1190 <ui_task_main()+0x244>
    118e:	87 cf       	rjmp	.-242    	; 0x109e <ui_task_main()+0x152>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:136
                    ui_print_welcome ();
    1190:	0e 94 29 06 	call	0xc52	; 0xc52 <ui_print_welcome()>
    1194:	84 cf       	rjmp	.-248    	; 0x109e <ui_task_main()+0x152>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:142
                }
            }
            break;
        case UI_CALIB_MODE:
            DBG_PRINTLN("Entered Calibration Mode..");
            lcd.clear();
    1196:	89 e1       	ldi	r24, 0x19	; 25
    1198:	94 e0       	ldi	r25, 0x04	; 4
    119a:	0e 94 9e 0b 	call	0x173c	; 0x173c <LiquidCrystal::clear()>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:143
            lcd.setCursor(0, 0);
    119e:	40 e0       	ldi	r20, 0x00	; 0
    11a0:	60 e0       	ldi	r22, 0x00	; 0
    11a2:	89 e1       	ldi	r24, 0x19	; 25
    11a4:	94 e0       	ldi	r25, 0x04	; 4
    11a6:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:144
            lcd.print("Calibration Mode..");
    11aa:	64 e6       	ldi	r22, 0x64	; 100
    11ac:	72 e0       	ldi	r23, 0x02	; 2
    11ae:	89 e1       	ldi	r24, 0x19	; 25
    11b0:	94 e0       	ldi	r25, 0x04	; 4
    11b2:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:145
            lcd.setCursor(0, 1);
    11b6:	41 e0       	ldi	r20, 0x01	; 1
    11b8:	60 e0       	ldi	r22, 0x00	; 0
    11ba:	89 e1       	ldi	r24, 0x19	; 25
    11bc:	94 e0       	ldi	r25, 0x04	; 4
    11be:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:146
            lcd.print("O2 sensorCalibration");
    11c2:	67 e7       	ldi	r22, 0x77	; 119
    11c4:	72 e0       	ldi	r23, 0x02	; 2
    11c6:	89 e1       	ldi	r24, 0x19	; 25
    11c8:	94 e0       	ldi	r25, 0x04	; 4
    11ca:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:147
            multi_beeps (5);
    11ce:	85 e0       	ldi	r24, 0x05	; 5
    11d0:	90 e0       	ldi	r25, 0x00	; 0
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:171
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Configuration Mode..");
            lcd.setCursor(0, 1);

            multi_beeps (2);
    11d2:	0e 94 72 06 	call	0xce4	; 0xce4 <multi_beeps(int)>
    11d6:	16 c0       	rjmp	.+44     	; 0x1204 <ui_task_main()+0x2b8>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:153

            ui_state = UI_SYS_INIT;
            break;
        case UI_FACTORY_MODE:
            DBG_PRINTLN("Factory Mode..");
            lcd.clear();
    11d8:	89 e1       	ldi	r24, 0x19	; 25
    11da:	94 e0       	ldi	r25, 0x04	; 4
    11dc:	0e 94 9e 0b 	call	0x173c	; 0x173c <LiquidCrystal::clear()>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:154
            lcd.setCursor(0, 0);
    11e0:	40 e0       	ldi	r20, 0x00	; 0
    11e2:	60 e0       	ldi	r22, 0x00	; 0
    11e4:	89 e1       	ldi	r24, 0x19	; 25
    11e6:	94 e0       	ldi	r25, 0x04	; 4
    11e8:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:155
            lcd.print("Factory Mode..");
    11ec:	6c e8       	ldi	r22, 0x8C	; 140
    11ee:	72 e0       	ldi	r23, 0x02	; 2
    11f0:	89 e1       	ldi	r24, 0x19	; 25
    11f2:	94 e0       	ldi	r25, 0x04	; 4
    11f4:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:157

            multi_beeps (3);
    11f8:	83 e0       	ldi	r24, 0x03	; 3
    11fa:	90 e0       	ldi	r25, 0x00	; 0
    11fc:	0e 94 72 06 	call	0xce4	; 0xce4 <multi_beeps(int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:160

            // Power On self test - on demand
            power_on_self_test ();
    1200:	0e 94 8f 06 	call	0xd1e	; 0xd1e <power_on_self_test()>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:161
            ui_state = UI_SYS_INIT;
    1204:	84 e0       	ldi	r24, 0x04	; 4
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	ae cf       	rjmp	.-164    	; 0x1166 <ui_task_main()+0x21a>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:166
            break;

        case UI_CONFIG_MODE:
            DBG_PRINTLN("Entered Configuration Mode..");
            lcd.clear();
    120a:	89 e1       	ldi	r24, 0x19	; 25
    120c:	94 e0       	ldi	r25, 0x04	; 4
    120e:	0e 94 9e 0b 	call	0x173c	; 0x173c <LiquidCrystal::clear()>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:167
            lcd.setCursor(0, 0);
    1212:	40 e0       	ldi	r20, 0x00	; 0
    1214:	60 e0       	ldi	r22, 0x00	; 0
    1216:	89 e1       	ldi	r24, 0x19	; 25
    1218:	94 e0       	ldi	r25, 0x04	; 4
    121a:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:168
            lcd.print("Configuration Mode..");
    121e:	6b e9       	ldi	r22, 0x9B	; 155
    1220:	72 e0       	ldi	r23, 0x02	; 2
    1222:	89 e1       	ldi	r24, 0x19	; 25
    1224:	94 e0       	ldi	r25, 0x04	; 4
    1226:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:169
            lcd.setCursor(0, 1);
    122a:	41 e0       	ldi	r20, 0x01	; 1
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	89 e1       	ldi	r24, 0x19	; 25
    1230:	94 e0       	ldi	r25, 0x04	; 4
    1232:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:171

            multi_beeps (2);
    1236:	82 e0       	ldi	r24, 0x02	; 2
    1238:	90 e0       	ldi	r25, 0x00	; 0
    123a:	cb cf       	rjmp	.-106    	; 0x11d2 <ui_task_main()+0x286>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:176
            ui_state = UI_SYS_INIT;
            break;

        case UI_SYS_INIT:
            lcd.clear();
    123c:	89 e1       	ldi	r24, 0x19	; 25
    123e:	94 e0       	ldi	r25, 0x04	; 4
    1240:	0e 94 9e 0b 	call	0x173c	; 0x173c <LiquidCrystal::clear()>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:177
            ui_print_welcome ();
    1244:	0e 94 29 06 	call	0xc52	; 0xc52 <ui_print_welcome()>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:178
            lcd.setCursor(0, 3);
    1248:	43 e0       	ldi	r20, 0x03	; 3
    124a:	60 e0       	ldi	r22, 0x00	; 0
    124c:	89 e1       	ldi	r24, 0x19	; 25
    124e:	94 e0       	ldi	r25, 0x04	; 4
    1250:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:179
            lcd.print("Press ButtonToStart!");
    1254:	6f e4       	ldi	r22, 0x4F	; 79
    1256:	72 e0       	ldi	r23, 0x02	; 2
    1258:	89 e1       	ldi	r24, 0x19	; 25
    125a:	94 e0       	ldi	r25, 0x04	; 4
    125c:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:180
            ui_state = UI_SYS_ON_CHECK;
    1260:	85 e0       	ldi	r24, 0x05	; 5
    1262:	90 e0       	ldi	r25, 0x00	; 0
    1264:	80 cf       	rjmp	.-256    	; 0x1166 <ui_task_main()+0x21a>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:184
            break;
        case UI_SYS_ON_CHECK:
            // System ON check
            if (button_pressed == true)  {
    1266:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <button_pressed>
    126a:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <button_pressed+0x1>
    126e:	01 97       	sbiw	r24, 0x01	; 1
    1270:	09 f0       	breq	.+2      	; 0x1274 <ui_task_main()+0x328>
    1272:	15 cf       	rjmp	.-470    	; 0x109e <ui_task_main()+0x152>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:185
                button_pressed = false;
    1274:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <button_pressed+0x1>
    1278:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <button_pressed>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:186
                f_system_running = true;
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	80 93 06 04 	sts	0x0406, r24	; 0x800406 <f_system_running>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:189

                DBG_PRINTLN("Start Button Pressed..!");
                lcd.setCursor(0, 3);
    1282:	43 e0       	ldi	r20, 0x03	; 3
    1284:	60 e0       	ldi	r22, 0x00	; 0
    1286:	89 e1       	ldi	r24, 0x19	; 25
    1288:	94 e0       	ldi	r25, 0x04	; 4
    128a:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:190
                lcd.print("Start Button Pressed");
    128e:	60 eb       	ldi	r22, 0xB0	; 176
    1290:	72 e0       	ldi	r23, 0x02	; 2
    1292:	89 e1       	ldi	r24, 0x19	; 25
    1294:	94 e0       	ldi	r25, 0x04	; 4
    1296:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:191
                beep_for (SYS_ON_BEEP);   // msecs
    129a:	8b e2       	ldi	r24, 0x2B	; 43
    129c:	92 e0       	ldi	r25, 0x02	; 2
    129e:	0e 94 60 06 	call	0xcc0	; 0xcc0 <beep_for(int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:193

                COMPRSSR_CNTRL (COMPRSSR_ON);
    12a2:	61 e0       	ldi	r22, 0x01	; 1
    12a4:	88 e0       	ldi	r24, 0x08	; 8
    12a6:	90 e0       	ldi	r25, 0x00	; 0
    12a8:	0e 94 0d 05 	call	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:194
                new_delay_msecs (1000);
    12ac:	88 ee       	ldi	r24, 0xE8	; 232
    12ae:	93 e0       	ldi	r25, 0x03	; 3
    12b0:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:196

                lcd.setCursor(0, 3);
    12b4:	43 e0       	ldi	r20, 0x03	; 3
    12b6:	60 e0       	ldi	r22, 0x00	; 0
    12b8:	89 e1       	ldi	r24, 0x19	; 25
    12ba:	94 e0       	ldi	r25, 0x04	; 4
    12bc:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:197
                lcd.print("O2 Cons. Starting... ");
    12c0:	65 ec       	ldi	r22, 0xC5	; 197
    12c2:	72 e0       	ldi	r23, 0x02	; 2
    12c4:	89 e1       	ldi	r24, 0x19	; 25
    12c6:	94 e0       	ldi	r25, 0x04	; 4
    12c8:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:198
                new_delay_msecs (1000);
    12cc:	88 ee       	ldi	r24, 0xE8	; 232
    12ce:	93 e0       	ldi	r25, 0x03	; 3
    12d0:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:296
                lcd.print("O2 Cons. Stopped..! ");
                ui_state = UI_LAST;
            }
            else {
                // back to run state..
                ui_state = UI_SYS_RUNNING;
    12d4:	86 e0       	ldi	r24, 0x06	; 6
    12d6:	90 e0       	ldi	r25, 0x00	; 0
    12d8:	46 cf       	rjmp	.-372    	; 0x1166 <ui_task_main()+0x21a>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:208


        case UI_SYS_RUNNING:
            // system running
            // LCD Line 1
            if (f_state_changed)  {
    12da:	80 91 a4 03 	lds	r24, 0x03A4	; 0x8003a4 <f_state_changed>
    12de:	90 91 a5 03 	lds	r25, 0x03A5	; 0x8003a5 <f_state_changed+0x1>
    12e2:	89 2b       	or	r24, r25
    12e4:	31 f1       	breq	.+76     	; 0x1332 <ui_task_main()+0x3e6>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:209
                f_state_changed = 0;
    12e6:	10 92 a5 03 	sts	0x03A5, r1	; 0x8003a5 <f_state_changed+0x1>
    12ea:	10 92 a4 03 	sts	0x03A4, r1	; 0x8003a4 <f_state_changed>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:210
                lcd_clear_buf (lcd_temp_string);
    12ee:	82 ec       	ldi	r24, 0xC2	; 194
    12f0:	93 e0       	ldi	r25, 0x03	; 3
    12f2:	0e 94 31 01 	call	0x262	; 0x262 <lcd_clear_buf(char*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:213


                lcd.clear();
    12f6:	89 e1       	ldi	r24, 0x19	; 25
    12f8:	94 e0       	ldi	r25, 0x04	; 4
    12fa:	0e 94 9e 0b 	call	0x173c	; 0x173c <LiquidCrystal::clear()>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:214
                lcd.setCursor(0, 0);
    12fe:	40 e0       	ldi	r20, 0x00	; 0
    1300:	60 e0       	ldi	r22, 0x00	; 0
    1302:	89 e1       	ldi	r24, 0x19	; 25
    1304:	94 e0       	ldi	r25, 0x04	; 4
    1306:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:215
                sprintf(lcd_temp_string, "O2 CONC   PRESSURE ");
    130a:	6b ed       	ldi	r22, 0xDB	; 219
    130c:	72 e0       	ldi	r23, 0x02	; 2
    130e:	82 ec       	ldi	r24, 0xC2	; 194
    1310:	93 e0       	ldi	r25, 0x03	; 3
    1312:	0e 94 25 1a 	call	0x344a	; 0x344a <strcpy>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:218
                DBG_PRINTLN(lcd_temp_string);
                //        "...................."
                lcd.print(lcd_temp_string);
    1316:	62 ec       	ldi	r22, 0xC2	; 194
    1318:	73 e0       	ldi	r23, 0x03	; 3
    131a:	89 e1       	ldi	r24, 0x19	; 25
    131c:	94 e0       	ldi	r25, 0x04	; 4
    131e:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:221

                // temp : just to trigger LCD refresh for O2 values
                prev_o2_concentration = 0;
    1322:	10 92 fe 03 	sts	0x03FE, r1	; 0x8003fe <prev_o2_concentration>
    1326:	10 92 ff 03 	sts	0x03FF, r1	; 0x8003ff <prev_o2_concentration+0x1>
    132a:	10 92 00 04 	sts	0x0400, r1	; 0x800400 <prev_o2_concentration+0x2>
    132e:	10 92 01 04 	sts	0x0401, r1	; 0x800401 <prev_o2_concentration+0x3>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:226
            }

            // LCD Line 2
            // O2 concentration / output pressure
            if (prev_o2_concentration != o2_concentration || prev_output_pressure != output_pressure)  {
    1332:	80 90 20 01 	lds	r8, 0x0120	; 0x800120 <o2_concentration>
    1336:	90 90 21 01 	lds	r9, 0x0121	; 0x800121 <o2_concentration+0x1>
    133a:	a0 90 22 01 	lds	r10, 0x0122	; 0x800122 <o2_concentration+0x2>
    133e:	b0 90 23 01 	lds	r11, 0x0123	; 0x800123 <o2_concentration+0x3>
    1342:	c0 90 1c 01 	lds	r12, 0x011C	; 0x80011c <output_pressure>
    1346:	d0 90 1d 01 	lds	r13, 0x011D	; 0x80011d <output_pressure+0x1>
    134a:	e0 90 1e 01 	lds	r14, 0x011E	; 0x80011e <output_pressure+0x2>
    134e:	f0 90 1f 01 	lds	r15, 0x011F	; 0x80011f <output_pressure+0x3>
    1352:	a5 01       	movw	r20, r10
    1354:	94 01       	movw	r18, r8
    1356:	60 91 fe 03 	lds	r22, 0x03FE	; 0x8003fe <prev_o2_concentration>
    135a:	70 91 ff 03 	lds	r23, 0x03FF	; 0x8003ff <prev_o2_concentration+0x1>
    135e:	80 91 00 04 	lds	r24, 0x0400	; 0x800400 <prev_o2_concentration+0x2>
    1362:	90 91 01 04 	lds	r25, 0x0401	; 0x800401 <prev_o2_concentration+0x3>
    1366:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <__cmpsf2>
    136a:	81 11       	cpse	r24, r1
    136c:	0f c0       	rjmp	.+30     	; 0x138c <ui_task_main()+0x440>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:226 (discriminator 1)
    136e:	a7 01       	movw	r20, r14
    1370:	96 01       	movw	r18, r12
    1372:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <prev_output_pressure>
    1376:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <prev_output_pressure+0x1>
    137a:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <prev_output_pressure+0x2>
    137e:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <prev_output_pressure+0x3>
    1382:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <__cmpsf2>
    1386:	88 23       	and	r24, r24
    1388:	09 f4       	brne	.+2      	; 0x138c <ui_task_main()+0x440>
    138a:	4b c0       	rjmp	.+150    	; 0x1422 <ui_task_main()+0x4d6>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:227
                prev_o2_concentration  = o2_concentration;
    138c:	80 92 fe 03 	sts	0x03FE, r8	; 0x8003fe <prev_o2_concentration>
    1390:	90 92 ff 03 	sts	0x03FF, r9	; 0x8003ff <prev_o2_concentration+0x1>
    1394:	a0 92 00 04 	sts	0x0400, r10	; 0x800400 <prev_o2_concentration+0x2>
    1398:	b0 92 01 04 	sts	0x0401, r11	; 0x800401 <prev_o2_concentration+0x3>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:228
                prev_output_pressure = output_pressure;
    139c:	c0 92 18 01 	sts	0x0118, r12	; 0x800118 <prev_output_pressure>
    13a0:	d0 92 19 01 	sts	0x0119, r13	; 0x800119 <prev_output_pressure+0x1>
    13a4:	e0 92 1a 01 	sts	0x011A, r14	; 0x80011a <prev_output_pressure+0x2>
    13a8:	f0 92 1b 01 	sts	0x011B, r15	; 0x80011b <prev_output_pressure+0x3>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:232
                // sprintf(lcd_temp_string, "%f \%%   %2d psi", o2_concentration, output_pressure);
                // DBG_PRINTLN(lcd_temp_string);
                /* 4 is mininum width, 2 is precision; float value is copied onto str_temp*/
                dtostrf(o2_concentration, 4, 2, str_temp);
    13ac:	7e 01       	movw	r14, r28
    13ae:	37 e0       	ldi	r19, 0x07	; 7
    13b0:	e3 0e       	add	r14, r19
    13b2:	f1 1c       	adc	r15, r1
    13b4:	87 01       	movw	r16, r14
    13b6:	22 e0       	ldi	r18, 0x02	; 2
    13b8:	44 e0       	ldi	r20, 0x04	; 4
    13ba:	c5 01       	movw	r24, r10
    13bc:	b4 01       	movw	r22, r8
    13be:	0e 94 07 1a 	call	0x340e	; 0x340e <dtostrf>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:235


                dtostrf(output_pressure, 5, 2, str_temp2);
    13c2:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <output_pressure>
    13c6:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <output_pressure+0x1>
    13ca:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <output_pressure+0x2>
    13ce:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <output_pressure+0x3>
    13d2:	9e 01       	movw	r18, r28
    13d4:	2f 5f       	subi	r18, 0xFF	; 255
    13d6:	3f 4f       	sbci	r19, 0xFF	; 255
    13d8:	59 01       	movw	r10, r18
    13da:	89 01       	movw	r16, r18
    13dc:	22 e0       	ldi	r18, 0x02	; 2
    13de:	45 e0       	ldi	r20, 0x05	; 5
    13e0:	0e 94 07 1a 	call	0x340e	; 0x340e <dtostrf>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:237
                // sprintf(lcd_temp_string, "%f \%%   %2d psi", o2_concentration, output_pressure);
                sprintf(lcd_temp_string, "%s %%   %s psi", str_temp, str_temp2);
    13e4:	bf 92       	push	r11
    13e6:	af 92       	push	r10
    13e8:	ff 92       	push	r15
    13ea:	ef 92       	push	r14
    13ec:	8f ee       	ldi	r24, 0xEF	; 239
    13ee:	92 e0       	ldi	r25, 0x02	; 2
    13f0:	9f 93       	push	r25
    13f2:	8f 93       	push	r24
    13f4:	82 ec       	ldi	r24, 0xC2	; 194
    13f6:	93 e0       	ldi	r25, 0x03	; 3
    13f8:	9f 93       	push	r25
    13fa:	8f 93       	push	r24
    13fc:	0e 94 2c 1a 	call	0x3458	; 0x3458 <sprintf>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:240

                DBG_PRINTLN(lcd_temp_string);
                lcd.setCursor(0, 1);
    1400:	41 e0       	ldi	r20, 0x01	; 1
    1402:	60 e0       	ldi	r22, 0x00	; 0
    1404:	89 e1       	ldi	r24, 0x19	; 25
    1406:	94 e0       	ldi	r25, 0x04	; 4
    1408:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:241
                lcd.print(lcd_temp_string);
    140c:	62 ec       	ldi	r22, 0xC2	; 194
    140e:	73 e0       	ldi	r23, 0x03	; 3
    1410:	89 e1       	ldi	r24, 0x19	; 25
    1412:	94 e0       	ldi	r25, 0x04	; 4
    1414:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
    1418:	0f b6       	in	r0, 0x3f	; 63
    141a:	f8 94       	cli
    141c:	de bf       	out	0x3e, r29	; 62
    141e:	0f be       	out	0x3f, r0	; 63
    1420:	cd bf       	out	0x3d, r28	; 61
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:253
            // LCD Line 3
            // lcd.setCursor(0, 2);
            // blank for now

            // LCD Line 4
            if (prev_production_time_secs ^ production_time_secs) {
    1422:	20 91 fc 03 	lds	r18, 0x03FC	; 0x8003fc <production_time_secs>
    1426:	30 91 fd 03 	lds	r19, 0x03FD	; 0x8003fd <production_time_secs+0x1>
    142a:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <prev_production_time_secs>
    142e:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <prev_production_time_secs+0x1>
    1432:	82 17       	cp	r24, r18
    1434:	93 07       	cpc	r25, r19
    1436:	a1 f1       	breq	.+104    	; 0x14a0 <ui_task_main()+0x554>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:254
                prev_production_time_secs = production_time_secs;
    1438:	30 93 fb 03 	sts	0x03FB, r19	; 0x8003fb <prev_production_time_secs+0x1>
    143c:	20 93 fa 03 	sts	0x03FA, r18	; 0x8003fa <prev_production_time_secs>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:256

                int secs = ( production_time_secs %  60);
    1440:	ec e3       	ldi	r30, 0x3C	; 60
    1442:	f0 e0       	ldi	r31, 0x00	; 0
    1444:	c9 01       	movw	r24, r18
    1446:	bf 01       	movw	r22, r30
    1448:	0e 94 8f 19 	call	0x331e	; 0x331e <__udivmodhi4>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:259
                int mins = ((production_time_secs % (60 * 60)) / 60);
                int hrs  = ( production_time_secs / (60 * 60));
                sprintf(lcd_temp_string, "RUN TIME  %02d:%02d:%02d", hrs, mins, secs);
    144c:	9f 93       	push	r25
    144e:	8f 93       	push	r24
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:257
            // LCD Line 4
            if (prev_production_time_secs ^ production_time_secs) {
                prev_production_time_secs = production_time_secs;

                int secs = ( production_time_secs %  60);
                int mins = ((production_time_secs % (60 * 60)) / 60);
    1450:	c9 01       	movw	r24, r18
    1452:	60 e1       	ldi	r22, 0x10	; 16
    1454:	7e e0       	ldi	r23, 0x0E	; 14
    1456:	0e 94 8f 19 	call	0x331e	; 0x331e <__udivmodhi4>
    145a:	9b 01       	movw	r18, r22
    145c:	bf 01       	movw	r22, r30
    145e:	0e 94 8f 19 	call	0x331e	; 0x331e <__udivmodhi4>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:259
                int hrs  = ( production_time_secs / (60 * 60));
                sprintf(lcd_temp_string, "RUN TIME  %02d:%02d:%02d", hrs, mins, secs);
    1462:	7f 93       	push	r23
    1464:	6f 93       	push	r22
    1466:	3f 93       	push	r19
    1468:	2f 93       	push	r18
    146a:	8e ef       	ldi	r24, 0xFE	; 254
    146c:	92 e0       	ldi	r25, 0x02	; 2
    146e:	9f 93       	push	r25
    1470:	8f 93       	push	r24
    1472:	82 ec       	ldi	r24, 0xC2	; 194
    1474:	93 e0       	ldi	r25, 0x03	; 3
    1476:	9f 93       	push	r25
    1478:	8f 93       	push	r24
    147a:	0e 94 2c 1a 	call	0x3458	; 0x3458 <sprintf>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:261
                DBG_PRINTLN(lcd_temp_string);
                lcd.setCursor(0, 3);
    147e:	43 e0       	ldi	r20, 0x03	; 3
    1480:	60 e0       	ldi	r22, 0x00	; 0
    1482:	89 e1       	ldi	r24, 0x19	; 25
    1484:	94 e0       	ldi	r25, 0x04	; 4
    1486:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:262
                lcd.print(lcd_temp_string);
    148a:	62 ec       	ldi	r22, 0xC2	; 194
    148c:	73 e0       	ldi	r23, 0x03	; 3
    148e:	89 e1       	ldi	r24, 0x19	; 25
    1490:	94 e0       	ldi	r25, 0x04	; 4
    1492:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
    1496:	0f b6       	in	r0, 0x3f	; 63
    1498:	f8 94       	cli
    149a:	de bf       	out	0x3e, r29	; 62
    149c:	0f be       	out	0x3f, r0	; 63
    149e:	cd bf       	out	0x3d, r28	; 61
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:266
            }

            // System OFF check
            if (button_pressed == true)  {
    14a0:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <button_pressed>
    14a4:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <button_pressed+0x1>
    14a8:	01 97       	sbiw	r24, 0x01	; 1
    14aa:	09 f0       	breq	.+2      	; 0x14ae <ui_task_main()+0x562>
    14ac:	f8 cd       	rjmp	.-1040   	; 0x109e <ui_task_main()+0x152>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:267
                ui_state = UI_SYS_OFF_CHECK;
    14ae:	87 e0       	ldi	r24, 0x07	; 7
    14b0:	90 e0       	ldi	r25, 0x00	; 0
    14b2:	59 ce       	rjmp	.-846    	; 0x1166 <ui_task_main()+0x21a>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:276
            }
            break;

        case UI_SYS_OFF_CHECK:
            // System OFF check
            if (button_pressed == true)  {
    14b4:	80 91 a0 03 	lds	r24, 0x03A0	; 0x8003a0 <button_pressed>
    14b8:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <button_pressed+0x1>
    14bc:	01 97       	sbiw	r24, 0x01	; 1
    14be:	09 f0       	breq	.+2      	; 0x14c2 <ui_task_main()+0x576>
    14c0:	09 cf       	rjmp	.-494    	; 0x12d4 <ui_task_main()+0x388>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:277
                button_pressed = false;
    14c2:	10 92 a1 03 	sts	0x03A1, r1	; 0x8003a1 <button_pressed+0x1>
    14c6:	10 92 a0 03 	sts	0x03A0, r1	; 0x8003a0 <button_pressed>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:278
                f_system_running = false;
    14ca:	10 92 06 04 	sts	0x0406, r1	; 0x800406 <f_system_running>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:280
                DBG_PRINTLN("Stop Button Pressed!");
                lcd.setCursor(0, 3);
    14ce:	43 e0       	ldi	r20, 0x03	; 3
    14d0:	60 e0       	ldi	r22, 0x00	; 0
    14d2:	89 e1       	ldi	r24, 0x19	; 25
    14d4:	94 e0       	ldi	r25, 0x04	; 4
    14d6:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:281
                lcd.print("Stop Button Pressed ");
    14da:	67 e1       	ldi	r22, 0x17	; 23
    14dc:	73 e0       	ldi	r23, 0x03	; 3
    14de:	89 e1       	ldi	r24, 0x19	; 25
    14e0:	94 e0       	ldi	r25, 0x04	; 4
    14e2:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:282
                COMPRSSR_CNTRL (COMPRSSR_OFF);
    14e6:	60 e0       	ldi	r22, 0x00	; 0
    14e8:	88 e0       	ldi	r24, 0x08	; 8
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	0e 94 0d 05 	call	0xa1a	; 0xa1a <do_control(DO_CONTROLS_E, bool)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:283
                beep_for (SYS_OFF_BEEP);   // msecs
    14f0:	8f e6       	ldi	r24, 0x6F	; 111
    14f2:	90 e0       	ldi	r25, 0x00	; 0
    14f4:	0e 94 60 06 	call	0xcc0	; 0xcc0 <beep_for(int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:285

                new_delay_msecs (1000);
    14f8:	88 ee       	ldi	r24, 0xE8	; 232
    14fa:	93 e0       	ldi	r25, 0x03	; 3
    14fc:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:286
                lcd.setCursor(0, 3);
    1500:	43 e0       	ldi	r20, 0x03	; 3
    1502:	60 e0       	ldi	r22, 0x00	; 0
    1504:	89 e1       	ldi	r24, 0x19	; 25
    1506:	94 e0       	ldi	r25, 0x04	; 4
    1508:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:287
                lcd.print("O2 Cons. Stopping.. ");
    150c:	6c e2       	ldi	r22, 0x2C	; 44
    150e:	73 e0       	ldi	r23, 0x03	; 3
    1510:	89 e1       	ldi	r24, 0x19	; 25
    1512:	94 e0       	ldi	r25, 0x04	; 4
    1514:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:288
                new_delay_msecs (1000);
    1518:	88 ee       	ldi	r24, 0xE8	; 232
    151a:	93 e0       	ldi	r25, 0x03	; 3
    151c:	0e 94 a8 04 	call	0x950	; 0x950 <new_delay_msecs(unsigned int)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:290

                lcd.setCursor(0, 3);
    1520:	43 e0       	ldi	r20, 0x03	; 3
    1522:	60 e0       	ldi	r22, 0x00	; 0
    1524:	89 e1       	ldi	r24, 0x19	; 25
    1526:	94 e0       	ldi	r25, 0x04	; 4
    1528:	0e 94 a5 0b 	call	0x174a	; 0x174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:291
                lcd.print("O2 Cons. Stopped..! ");
    152c:	61 e4       	ldi	r22, 0x41	; 65
    152e:	73 e0       	ldi	r23, 0x03	; 3
    1530:	89 e1       	ldi	r24, 0x19	; 25
    1532:	94 e0       	ldi	r25, 0x04	; 4
    1534:	0e 94 85 15 	call	0x2b0a	; 0x2b0a <Print::print(char const*)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:292
                ui_state = UI_LAST;
    1538:	88 e0       	ldi	r24, 0x08	; 8
    153a:	90 e0       	ldi	r25, 0x00	; 0
    153c:	14 ce       	rjmp	.-984    	; 0x1166 <ui_task_main()+0x21a>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:301
                ui_state = UI_SYS_RUNNING;
            }
            break;
        default:
        case UI_LAST:
            ui_state = UI_START;
    153e:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <ui_state+0x1>
    1542:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <ui_state>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:302
            break;
    1546:	ab cd       	rjmp	.-1194   	; 0x109e <ui_task_main()+0x152>

00001548 <loop>:
loop():
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:47


void loop (void) {

    // 1. periodic tasks are called here
    if (f_msec) {
    1548:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <f_msec>
    154c:	88 23       	and	r24, r24
    154e:	19 f0       	breq	.+6      	; 0x1556 <loop+0xe>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:48
        f_msec = 0;
    1550:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <f_msec>
    1554:	08 95       	ret
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:52
        // milli second tasks go here..

    }
    else if (f_10msec) {
    1556:	80 91 0b 04 	lds	r24, 0x040B	; 0x80040b <f_10msec>
    155a:	88 23       	and	r24, r24
    155c:	19 f0       	breq	.+6      	; 0x1564 <loop+0x1c>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:53
        f_10msec = 0;
    155e:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <f_10msec>
    1562:	08 95       	ret
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:57
        // 10 milli second tasks go here..

    }
    else if (f_100msec) {
    1564:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <f_100msec>
    1568:	88 23       	and	r24, r24
    156a:	19 f0       	breq	.+6      	; 0x1572 <loop+0x2a>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:58
        f_100msec = 0;
    156c:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <f_100msec>
    1570:	08 95       	ret
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:61
        // 100 milli second tasks go here..
    }
    else if (f_1sec) {
    1572:	80 91 09 04 	lds	r24, 0x0409	; 0x800409 <f_1sec>
    1576:	88 23       	and	r24, r24
    1578:	69 f0       	breq	.+26     	; 0x1594 <loop+0x4c>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:62
        f_1sec = 0;
    157a:	10 92 09 04 	sts	0x0409, r1	; 0x800409 <f_1sec>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:64
        // 1 second tasks go here..
        f_sec_logs_task = 1;
    157e:	81 e0       	ldi	r24, 0x01	; 1
    1580:	80 93 05 04 	sts	0x0405, r24	; 0x800405 <f_sec_logs_task>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:65
        f_sec_change_ui_task = 1;
    1584:	80 93 04 04 	sts	0x0404, r24	; 0x800404 <f_sec_change_ui_task>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:66
        f_sec_change_o2_task = 1;
    1588:	80 93 03 04 	sts	0x0403, r24	; 0x800403 <f_sec_change_o2_task>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:67
        f_sec_change_sensor_task = 1;
    158c:	80 93 02 04 	sts	0x0402, r24	; 0x800402 <f_sec_change_sensor_task>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:69

        o2_sensor_scan ();
    1590:	0c 94 80 03 	jmp	0x700	; 0x700 <o2_sensor_scan()>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:75
        // read_pressure ();

        DBG_PRINT (".");

    }
    else if (f_1min) {
    1594:	80 91 08 04 	lds	r24, 0x0408	; 0x800408 <f_1min>
    1598:	88 23       	and	r24, r24
    159a:	19 f0       	breq	.+6      	; 0x15a2 <loop+0x5a>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:76
        f_1min = 0;
    159c:	10 92 08 04 	sts	0x0408, r1	; 0x800408 <f_1min>
    15a0:	08 95       	ret
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:80
        // 1 minute tasks go here..

    }
    else if (f_1hr) {
    15a2:	80 91 07 04 	lds	r24, 0x0407	; 0x800407 <f_1hr>
    15a6:	88 23       	and	r24, r24
    15a8:	19 f0       	breq	.+6      	; 0x15b0 <loop+0x68>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:81
        f_1hr = 0;
    15aa:	10 92 07 04 	sts	0x0407, r1	; 0x800407 <f_1hr>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:93
        o2_main_task ();
        ui_task_main ();
        logs_task ();
    }

}
    15ae:	08 95       	ret
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:88

    }

    // 2. contineous tasks are called here
    else {
        o2_main_task ();
    15b0:	0e 94 97 05 	call	0xb2e	; 0xb2e <o2_main_task()>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:89
        ui_task_main ();
    15b4:	0e 94 a6 07 	call	0xf4c	; 0xf4c <ui_task_main()>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:90
        logs_task ();
    15b8:	0c 94 33 02 	jmp	0x466	; 0x466 <logs_task()>

000015bc <_GLOBAL__sub_I_lcd>:
_GLOBAL__sub_I_lcd():
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:397
    lcd.setCursor(0, 3);
    //  "1.3.5.7.9.........20"
    lcd.print("Testing over...!!   ");
    new_delay_msecs (2000);

}
    15bc:	cf 92       	push	r12
    15be:	ef 92       	push	r14
    15c0:	0f 93       	push	r16
__static_initialization_and_destruction_0():
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/display.h:39


#define LCD_ROWS   ( 4)
#define LCD_COLS   (20)

LiquidCrystal lcd(RS, EN, D4, D5, D6, D7);
    15c2:	87 e1       	ldi	r24, 0x17	; 23
    15c4:	c8 2e       	mov	r12, r24
    15c6:	96 e1       	ldi	r25, 0x16	; 22
    15c8:	e9 2e       	mov	r14, r25
    15ca:	05 e1       	ldi	r16, 0x15	; 21
    15cc:	24 e1       	ldi	r18, 0x14	; 20
    15ce:	43 e1       	ldi	r20, 0x13	; 19
    15d0:	62 e1       	ldi	r22, 0x12	; 18
    15d2:	89 e1       	ldi	r24, 0x19	; 25
    15d4:	94 e0       	ldi	r25, 0x04	; 4
    15d6:	0e 94 5a 0c 	call	0x18b4	; 0x18b4 <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:19
float x_samples[NUM_OF_SAMPLES_O2]   = {224.0, 1083.0, 4888.0};




ADS1115 ADS(O2_SENSOR_ADS_ADDR);
    15da:	41 e3       	ldi	r20, 0x31	; 49
    15dc:	54 e0       	ldi	r21, 0x04	; 4
    15de:	69 e4       	ldi	r22, 0x49	; 73
    15e0:	8a ea       	ldi	r24, 0xAA	; 170
    15e2:	93 e0       	ldi	r25, 0x03	; 3
_GLOBAL__sub_I_lcd():
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:397
    15e4:	0f 91       	pop	r16
    15e6:	ef 90       	pop	r14
    15e8:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
E:\4_O2Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:19
    15ea:	0c 94 f1 0d 	jmp	0x1be2	; 0x1be2 <ADS1115::ADS1115(unsigned char, TwoWire*)>

000015ee <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:271
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    15ee:	90 e0       	ldi	r25, 0x00	; 0
    15f0:	80 e0       	ldi	r24, 0x00	; 0
    15f2:	08 95       	ret

000015f4 <Print::flush()>:
_ZN5Print5flushEv():
    15f4:	08 95       	ret

000015f6 <LiquidCrystal::pulseEnable()>:
_ZN13LiquidCrystal11pulseEnableEv():
    15f6:	cf 93       	push	r28
    15f8:	df 93       	push	r29
    15fa:	ec 01       	movw	r28, r24
    15fc:	60 e0       	ldi	r22, 0x00	; 0
    15fe:	8e 81       	ldd	r24, Y+6	; 0x06
    1600:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
    1604:	81 e0       	ldi	r24, 0x01	; 1
    1606:	90 e0       	ldi	r25, 0x00	; 0
    1608:	0e 94 72 12 	call	0x24e4	; 0x24e4 <delayMicroseconds>
    160c:	61 e0       	ldi	r22, 0x01	; 1
    160e:	8e 81       	ldd	r24, Y+6	; 0x06
    1610:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
    1614:	81 e0       	ldi	r24, 0x01	; 1
    1616:	90 e0       	ldi	r25, 0x00	; 0
    1618:	0e 94 72 12 	call	0x24e4	; 0x24e4 <delayMicroseconds>
    161c:	60 e0       	ldi	r22, 0x00	; 0
    161e:	8e 81       	ldd	r24, Y+6	; 0x06
    1620:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
    1624:	84 e6       	ldi	r24, 0x64	; 100
    1626:	90 e0       	ldi	r25, 0x00	; 0
    1628:	df 91       	pop	r29
    162a:	cf 91       	pop	r28
    162c:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <delayMicroseconds>

00001630 <LiquidCrystal::write4bits(unsigned char)>:
_ZN13LiquidCrystal10write4bitsEh():
    1630:	cf 92       	push	r12
    1632:	df 92       	push	r13
    1634:	ef 92       	push	r14
    1636:	ff 92       	push	r15
    1638:	0f 93       	push	r16
    163a:	1f 93       	push	r17
    163c:	cf 93       	push	r28
    163e:	df 93       	push	r29
    1640:	6c 01       	movw	r12, r24
    1642:	7c 01       	movw	r14, r24
    1644:	87 e0       	ldi	r24, 0x07	; 7
    1646:	e8 0e       	add	r14, r24
    1648:	f1 1c       	adc	r15, r1
    164a:	d0 e0       	ldi	r29, 0x00	; 0
    164c:	c0 e0       	ldi	r28, 0x00	; 0
    164e:	06 2f       	mov	r16, r22
    1650:	10 e0       	ldi	r17, 0x00	; 0
    1652:	b8 01       	movw	r22, r16
    1654:	0c 2e       	mov	r0, r28
    1656:	02 c0       	rjmp	.+4      	; 0x165c <LiquidCrystal::write4bits(unsigned char)+0x2c>
    1658:	75 95       	asr	r23
    165a:	67 95       	ror	r22
    165c:	0a 94       	dec	r0
    165e:	e2 f7       	brpl	.-8      	; 0x1658 <LiquidCrystal::write4bits(unsigned char)+0x28>
    1660:	61 70       	andi	r22, 0x01	; 1
    1662:	f7 01       	movw	r30, r14
    1664:	81 91       	ld	r24, Z+
    1666:	7f 01       	movw	r14, r30
    1668:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
    166c:	21 96       	adiw	r28, 0x01	; 1
    166e:	c4 30       	cpi	r28, 0x04	; 4
    1670:	d1 05       	cpc	r29, r1
    1672:	79 f7       	brne	.-34     	; 0x1652 <LiquidCrystal::write4bits(unsigned char)+0x22>
    1674:	c6 01       	movw	r24, r12
    1676:	df 91       	pop	r29
    1678:	cf 91       	pop	r28
    167a:	1f 91       	pop	r17
    167c:	0f 91       	pop	r16
    167e:	ff 90       	pop	r15
    1680:	ef 90       	pop	r14
    1682:	df 90       	pop	r13
    1684:	cf 90       	pop	r12
    1686:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <LiquidCrystal::pulseEnable()>

0000168a <LiquidCrystal::write8bits(unsigned char)>:
_ZN13LiquidCrystal10write8bitsEh():
    168a:	cf 92       	push	r12
    168c:	df 92       	push	r13
    168e:	ef 92       	push	r14
    1690:	ff 92       	push	r15
    1692:	0f 93       	push	r16
    1694:	1f 93       	push	r17
    1696:	cf 93       	push	r28
    1698:	df 93       	push	r29
    169a:	6c 01       	movw	r12, r24
    169c:	7c 01       	movw	r14, r24
    169e:	87 e0       	ldi	r24, 0x07	; 7
    16a0:	e8 0e       	add	r14, r24
    16a2:	f1 1c       	adc	r15, r1
    16a4:	d0 e0       	ldi	r29, 0x00	; 0
    16a6:	c0 e0       	ldi	r28, 0x00	; 0
    16a8:	06 2f       	mov	r16, r22
    16aa:	10 e0       	ldi	r17, 0x00	; 0
    16ac:	b8 01       	movw	r22, r16
    16ae:	0c 2e       	mov	r0, r28
    16b0:	02 c0       	rjmp	.+4      	; 0x16b6 <LiquidCrystal::write8bits(unsigned char)+0x2c>
    16b2:	75 95       	asr	r23
    16b4:	67 95       	ror	r22
    16b6:	0a 94       	dec	r0
    16b8:	e2 f7       	brpl	.-8      	; 0x16b2 <LiquidCrystal::write8bits(unsigned char)+0x28>
    16ba:	61 70       	andi	r22, 0x01	; 1
    16bc:	f7 01       	movw	r30, r14
    16be:	81 91       	ld	r24, Z+
    16c0:	7f 01       	movw	r14, r30
    16c2:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
    16c6:	21 96       	adiw	r28, 0x01	; 1
    16c8:	c8 30       	cpi	r28, 0x08	; 8
    16ca:	d1 05       	cpc	r29, r1
    16cc:	79 f7       	brne	.-34     	; 0x16ac <LiquidCrystal::write8bits(unsigned char)+0x22>
    16ce:	c6 01       	movw	r24, r12
    16d0:	df 91       	pop	r29
    16d2:	cf 91       	pop	r28
    16d4:	1f 91       	pop	r17
    16d6:	0f 91       	pop	r16
    16d8:	ff 90       	pop	r15
    16da:	ef 90       	pop	r14
    16dc:	df 90       	pop	r13
    16de:	cf 90       	pop	r12
    16e0:	0c 94 fb 0a 	jmp	0x15f6	; 0x15f6 <LiquidCrystal::pulseEnable()>

000016e4 <LiquidCrystal::send(unsigned char, unsigned char)>:
_ZN13LiquidCrystal4sendEhh():
    16e4:	1f 93       	push	r17
    16e6:	cf 93       	push	r28
    16e8:	df 93       	push	r29
    16ea:	ec 01       	movw	r28, r24
    16ec:	16 2f       	mov	r17, r22
    16ee:	64 2f       	mov	r22, r20
    16f0:	8c 81       	ldd	r24, Y+4	; 0x04
    16f2:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
    16f6:	8d 81       	ldd	r24, Y+5	; 0x05
    16f8:	8f 3f       	cpi	r24, 0xFF	; 255
    16fa:	19 f0       	breq	.+6      	; 0x1702 <LiquidCrystal::send(unsigned char, unsigned char)+0x1e>
    16fc:	60 e0       	ldi	r22, 0x00	; 0
    16fe:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
    1702:	8f 85       	ldd	r24, Y+15	; 0x0f
    1704:	61 2f       	mov	r22, r17
    1706:	84 ff       	sbrs	r24, 4
    1708:	06 c0       	rjmp	.+12     	; 0x1716 <LiquidCrystal::send(unsigned char, unsigned char)+0x32>
    170a:	ce 01       	movw	r24, r28
    170c:	df 91       	pop	r29
    170e:	cf 91       	pop	r28
    1710:	1f 91       	pop	r17
    1712:	0c 94 45 0b 	jmp	0x168a	; 0x168a <LiquidCrystal::write8bits(unsigned char)>
    1716:	70 e0       	ldi	r23, 0x00	; 0
    1718:	84 e0       	ldi	r24, 0x04	; 4
    171a:	75 95       	asr	r23
    171c:	67 95       	ror	r22
    171e:	8a 95       	dec	r24
    1720:	e1 f7       	brne	.-8      	; 0x171a <LiquidCrystal::send(unsigned char, unsigned char)+0x36>
    1722:	ce 01       	movw	r24, r28
    1724:	0e 94 18 0b 	call	0x1630	; 0x1630 <LiquidCrystal::write4bits(unsigned char)>
    1728:	61 2f       	mov	r22, r17
    172a:	ce 01       	movw	r24, r28
    172c:	df 91       	pop	r29
    172e:	cf 91       	pop	r28
    1730:	1f 91       	pop	r17
    1732:	0c 94 18 0b 	jmp	0x1630	; 0x1630 <LiquidCrystal::write4bits(unsigned char)>

00001736 <LiquidCrystal::command(unsigned char)>:
_ZN13LiquidCrystal7commandEh():
    1736:	40 e0       	ldi	r20, 0x00	; 0
    1738:	0c 94 72 0b 	jmp	0x16e4	; 0x16e4 <LiquidCrystal::send(unsigned char, unsigned char)>

0000173c <LiquidCrystal::clear()>:
_ZN13LiquidCrystal5clearEv():
    173c:	61 e0       	ldi	r22, 0x01	; 1
    173e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LiquidCrystal::command(unsigned char)>
    1742:	80 ed       	ldi	r24, 0xD0	; 208
    1744:	97 e0       	ldi	r25, 0x07	; 7
    1746:	0c 94 72 12 	jmp	0x24e4	; 0x24e4 <delayMicroseconds>

0000174a <LiquidCrystal::setCursor(unsigned char, unsigned char)>:
_ZN13LiquidCrystal9setCursorEhh():
    174a:	44 30       	cpi	r20, 0x04	; 4
    174c:	08 f0       	brcs	.+2      	; 0x1750 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x6>
    174e:	43 e0       	ldi	r20, 0x03	; 3
    1750:	fc 01       	movw	r30, r24
    1752:	23 89       	ldd	r18, Z+19	; 0x13
    1754:	42 17       	cp	r20, r18
    1756:	10 f0       	brcs	.+4      	; 0x175c <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x12>
    1758:	4f ef       	ldi	r20, 0xFF	; 255
    175a:	42 0f       	add	r20, r18
    175c:	fc 01       	movw	r30, r24
    175e:	e4 0f       	add	r30, r20
    1760:	f1 1d       	adc	r31, r1
    1762:	24 89       	ldd	r18, Z+20	; 0x14
    1764:	62 0f       	add	r22, r18
    1766:	60 68       	ori	r22, 0x80	; 128
    1768:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <LiquidCrystal::command(unsigned char)>

0000176c <LiquidCrystal::display()>:
_ZN13LiquidCrystal7displayEv():
    176c:	fc 01       	movw	r30, r24
    176e:	60 89       	ldd	r22, Z+16	; 0x10
    1770:	26 2f       	mov	r18, r22
    1772:	24 60       	ori	r18, 0x04	; 4
    1774:	20 8b       	std	Z+16, r18	; 0x10
    1776:	6c 60       	ori	r22, 0x0C	; 12
    1778:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <LiquidCrystal::command(unsigned char)>

0000177c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystal5beginEhhh():
    177c:	0f 93       	push	r16
    177e:	1f 93       	push	r17
    1780:	cf 93       	push	r28
    1782:	df 93       	push	r29
    1784:	ec 01       	movw	r28, r24
    1786:	42 30       	cpi	r20, 0x02	; 2
    1788:	18 f0       	brcs	.+6      	; 0x1790 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x14>
    178a:	8f 85       	ldd	r24, Y+15	; 0x0f
    178c:	88 60       	ori	r24, 0x08	; 8
    178e:	8f 87       	std	Y+15, r24	; 0x0f
    1790:	4b 8b       	std	Y+19, r20	; 0x13
_ZN13LiquidCrystal13setRowOffsetsEiiii():
    1792:	1c 8a       	std	Y+20, r1	; 0x14
    1794:	80 e4       	ldi	r24, 0x40	; 64
    1796:	8d 8b       	std	Y+21, r24	; 0x15
    1798:	6e 8b       	std	Y+22, r22	; 0x16
    179a:	60 5c       	subi	r22, 0xC0	; 192
    179c:	6f 8b       	std	Y+23, r22	; 0x17
_ZN13LiquidCrystal5beginEhhh():
    179e:	22 23       	and	r18, r18
    17a0:	29 f0       	breq	.+10     	; 0x17ac <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    17a2:	41 30       	cpi	r20, 0x01	; 1
    17a4:	19 f4       	brne	.+6      	; 0x17ac <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    17a6:	8f 85       	ldd	r24, Y+15	; 0x0f
    17a8:	84 60       	ori	r24, 0x04	; 4
    17aa:	8f 87       	std	Y+15, r24	; 0x0f
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	8c 81       	ldd	r24, Y+4	; 0x04
    17b0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
    17b4:	8d 81       	ldd	r24, Y+5	; 0x05
    17b6:	8f 3f       	cpi	r24, 0xFF	; 255
    17b8:	19 f0       	breq	.+6      	; 0x17c0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x44>
    17ba:	61 e0       	ldi	r22, 0x01	; 1
    17bc:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	8e 81       	ldd	r24, Y+6	; 0x06
    17c4:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
    17c8:	8e 01       	movw	r16, r28
    17ca:	98 01       	movw	r18, r16
    17cc:	2c 1b       	sub	r18, r28
    17ce:	3d 0b       	sbc	r19, r29
    17d0:	8f 85       	ldd	r24, Y+15	; 0x0f
    17d2:	84 fd       	sbrc	r24, 4
    17d4:	0d c0       	rjmp	.+26     	; 0x17f0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x74>
    17d6:	84 e0       	ldi	r24, 0x04	; 4
    17d8:	90 e0       	ldi	r25, 0x00	; 0
    17da:	0f 5f       	subi	r16, 0xFF	; 255
    17dc:	1f 4f       	sbci	r17, 0xFF	; 255
    17de:	28 17       	cp	r18, r24
    17e0:	39 07       	cpc	r19, r25
    17e2:	4c f4       	brge	.+18     	; 0x17f6 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x7a>
    17e4:	61 e0       	ldi	r22, 0x01	; 1
    17e6:	f8 01       	movw	r30, r16
    17e8:	86 81       	ldd	r24, Z+6	; 0x06
    17ea:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
    17ee:	ed cf       	rjmp	.-38     	; 0x17ca <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x4e>
    17f0:	88 e0       	ldi	r24, 0x08	; 8
    17f2:	90 e0       	ldi	r25, 0x00	; 0
    17f4:	f2 cf       	rjmp	.-28     	; 0x17da <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x5e>
    17f6:	80 e5       	ldi	r24, 0x50	; 80
    17f8:	93 ec       	ldi	r25, 0xC3	; 195
    17fa:	0e 94 72 12 	call	0x24e4	; 0x24e4 <delayMicroseconds>
    17fe:	60 e0       	ldi	r22, 0x00	; 0
    1800:	8c 81       	ldd	r24, Y+4	; 0x04
    1802:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	8e 81       	ldd	r24, Y+6	; 0x06
    180a:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
    180e:	8d 81       	ldd	r24, Y+5	; 0x05
    1810:	8f 3f       	cpi	r24, 0xFF	; 255
    1812:	19 f0       	breq	.+6      	; 0x181a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x9e>
    1814:	60 e0       	ldi	r22, 0x00	; 0
    1816:	0e 94 23 13 	call	0x2646	; 0x2646 <digitalWrite>
    181a:	6f 85       	ldd	r22, Y+15	; 0x0f
    181c:	64 fd       	sbrc	r22, 4
    181e:	33 c0       	rjmp	.+102    	; 0x1886 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x10a>
    1820:	63 e0       	ldi	r22, 0x03	; 3
    1822:	ce 01       	movw	r24, r28
    1824:	0e 94 18 0b 	call	0x1630	; 0x1630 <LiquidCrystal::write4bits(unsigned char)>
    1828:	84 e9       	ldi	r24, 0x94	; 148
    182a:	91 e1       	ldi	r25, 0x11	; 17
    182c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <delayMicroseconds>
    1830:	63 e0       	ldi	r22, 0x03	; 3
    1832:	ce 01       	movw	r24, r28
    1834:	0e 94 18 0b 	call	0x1630	; 0x1630 <LiquidCrystal::write4bits(unsigned char)>
    1838:	84 e9       	ldi	r24, 0x94	; 148
    183a:	91 e1       	ldi	r25, 0x11	; 17
    183c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <delayMicroseconds>
    1840:	63 e0       	ldi	r22, 0x03	; 3
    1842:	ce 01       	movw	r24, r28
    1844:	0e 94 18 0b 	call	0x1630	; 0x1630 <LiquidCrystal::write4bits(unsigned char)>
    1848:	86 e9       	ldi	r24, 0x96	; 150
    184a:	90 e0       	ldi	r25, 0x00	; 0
    184c:	0e 94 72 12 	call	0x24e4	; 0x24e4 <delayMicroseconds>
    1850:	62 e0       	ldi	r22, 0x02	; 2
    1852:	ce 01       	movw	r24, r28
    1854:	0e 94 18 0b 	call	0x1630	; 0x1630 <LiquidCrystal::write4bits(unsigned char)>
    1858:	6f 85       	ldd	r22, Y+15	; 0x0f
    185a:	60 62       	ori	r22, 0x20	; 32
    185c:	ce 01       	movw	r24, r28
    185e:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LiquidCrystal::command(unsigned char)>
    1862:	84 e0       	ldi	r24, 0x04	; 4
    1864:	88 8b       	std	Y+16, r24	; 0x10
    1866:	ce 01       	movw	r24, r28
    1868:	0e 94 b6 0b 	call	0x176c	; 0x176c <LiquidCrystal::display()>
    186c:	ce 01       	movw	r24, r28
    186e:	0e 94 9e 0b 	call	0x173c	; 0x173c <LiquidCrystal::clear()>
    1872:	82 e0       	ldi	r24, 0x02	; 2
    1874:	89 8b       	std	Y+17, r24	; 0x11
    1876:	66 e0       	ldi	r22, 0x06	; 6
    1878:	ce 01       	movw	r24, r28
    187a:	df 91       	pop	r29
    187c:	cf 91       	pop	r28
    187e:	1f 91       	pop	r17
    1880:	0f 91       	pop	r16
    1882:	0c 94 9b 0b 	jmp	0x1736	; 0x1736 <LiquidCrystal::command(unsigned char)>
    1886:	60 62       	ori	r22, 0x20	; 32
    1888:	ce 01       	movw	r24, r28
    188a:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LiquidCrystal::command(unsigned char)>
    188e:	84 e9       	ldi	r24, 0x94	; 148
    1890:	91 e1       	ldi	r25, 0x11	; 17
    1892:	0e 94 72 12 	call	0x24e4	; 0x24e4 <delayMicroseconds>
    1896:	6f 85       	ldd	r22, Y+15	; 0x0f
    1898:	60 62       	ori	r22, 0x20	; 32
    189a:	ce 01       	movw	r24, r28
    189c:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LiquidCrystal::command(unsigned char)>
    18a0:	86 e9       	ldi	r24, 0x96	; 150
    18a2:	90 e0       	ldi	r25, 0x00	; 0
    18a4:	0e 94 72 12 	call	0x24e4	; 0x24e4 <delayMicroseconds>
    18a8:	6f 85       	ldd	r22, Y+15	; 0x0f
    18aa:	60 62       	ori	r22, 0x20	; 32
    18ac:	ce 01       	movw	r24, r28
    18ae:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LiquidCrystal::command(unsigned char)>
    18b2:	d2 cf       	rjmp	.-92     	; 0x1858 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xdc>

000018b4 <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystalC2Ehhhhhh():
    18b4:	cf 92       	push	r12
    18b6:	ef 92       	push	r14
    18b8:	0f 93       	push	r16
    18ba:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    18bc:	13 82       	std	Z+3, r1	; 0x03
    18be:	12 82       	std	Z+2, r1	; 0x02
_ZN13LiquidCrystalC2Ehhhhhh():
    18c0:	8a e5       	ldi	r24, 0x5A	; 90
    18c2:	93 e0       	ldi	r25, 0x03	; 3
    18c4:	91 83       	std	Z+1, r25	; 0x01
    18c6:	80 83       	st	Z, r24
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    18c8:	64 83       	std	Z+4, r22	; 0x04
    18ca:	8f ef       	ldi	r24, 0xFF	; 255
    18cc:	85 83       	std	Z+5, r24	; 0x05
    18ce:	46 83       	std	Z+6, r20	; 0x06
    18d0:	27 83       	std	Z+7, r18	; 0x07
    18d2:	00 87       	std	Z+8, r16	; 0x08
    18d4:	e1 86       	std	Z+9, r14	; 0x09
    18d6:	c2 86       	std	Z+10, r12	; 0x0a
    18d8:	13 86       	std	Z+11, r1	; 0x0b
    18da:	14 86       	std	Z+12, r1	; 0x0c
    18dc:	15 86       	std	Z+13, r1	; 0x0d
    18de:	16 86       	std	Z+14, r1	; 0x0e
    18e0:	17 86       	std	Z+15, r1	; 0x0f
    18e2:	20 e0       	ldi	r18, 0x00	; 0
    18e4:	41 e0       	ldi	r20, 0x01	; 1
    18e6:	60 e1       	ldi	r22, 0x10	; 16
    18e8:	cf 01       	movw	r24, r30
_ZN13LiquidCrystalC2Ehhhhhh():
    18ea:	0f 91       	pop	r16
    18ec:	ef 90       	pop	r14
    18ee:	cf 90       	pop	r12
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    18f0:	0c 94 be 0b 	jmp	0x177c	; 0x177c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>

000018f4 <LiquidCrystal::write(unsigned char)>:
_ZN13LiquidCrystal5writeEh():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    18f4:	41 e0       	ldi	r20, 0x01	; 1
    18f6:	0e 94 72 0b 	call	0x16e4	; 0x16e4 <LiquidCrystal::send(unsigned char, unsigned char)>
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
    18fa:	81 e0       	ldi	r24, 0x01	; 1
    18fc:	90 e0       	ldi	r25, 0x00	; 0
    18fe:	08 95       	ret

00001900 <ADS1X15::isConnected()>:
_ZN7ADS1X1511isConnectedEv():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:570
  _wire = wire;
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_1;
  _conversionDelay = ADS1115_CONVERSION_DELAY;
  _bitShift = 0;
  _maxPorts = 1;
}
    1900:	cf 93       	push	r28
    1902:	df 93       	push	r29
    1904:	ec 01       	movw	r28, r24
    1906:	6a 81       	ldd	r22, Y+2	; 0x02
    1908:	88 89       	ldd	r24, Y+16	; 0x10
    190a:	99 89       	ldd	r25, Y+17	; 0x11
    190c:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <TwoWire::beginTransmission(unsigned char)>
    1910:	88 89       	ldd	r24, Y+16	; 0x10
    1912:	99 89       	ldd	r25, Y+17	; 0x11
    1914:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <TwoWire::endTransmission()>
    1918:	91 e0       	ldi	r25, 0x01	; 1
    191a:	81 11       	cpse	r24, r1
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	89 2f       	mov	r24, r25
    1920:	df 91       	pop	r29
    1922:	cf 91       	pop	r28
    1924:	08 95       	ret

00001926 <ADS1X15::begin()>:
_ZN7ADS1X155beginEv():
    1926:	cf 93       	push	r28
    1928:	df 93       	push	r29
    192a:	ec 01       	movw	r28, r24
    192c:	88 89       	ldd	r24, Y+16	; 0x10
    192e:	99 89       	ldd	r25, Y+17	; 0x11
    1930:	0e 94 91 0e 	call	0x1d22	; 0x1d22 <TwoWire::begin()>
    1934:	8a 81       	ldd	r24, Y+2	; 0x02
    1936:	88 54       	subi	r24, 0x48	; 72
    1938:	84 30       	cpi	r24, 0x04	; 4
    193a:	28 f4       	brcc	.+10     	; 0x1946 <ADS1X15::begin()+0x20>
    193c:	ce 01       	movw	r24, r28
    193e:	df 91       	pop	r29
    1940:	cf 91       	pop	r28
    1942:	0c 94 80 0c 	jmp	0x1900	; 0x1900 <ADS1X15::isConnected()>
    1946:	80 e0       	ldi	r24, 0x00	; 0
    1948:	df 91       	pop	r29
    194a:	cf 91       	pop	r28
    194c:	08 95       	ret

0000194e <ADS1X15::setGain(unsigned char)>:
_ZN7ADS1X157setGainEh():
    194e:	fc 01       	movw	r30, r24
    1950:	80 81       	ld	r24, Z
    1952:	84 ff       	sbrs	r24, 4
    1954:	09 c0       	rjmp	.+18     	; 0x1968 <ADS1X15::setGain(unsigned char)+0x1a>
    1956:	64 30       	cpi	r22, 0x04	; 4
    1958:	b1 f0       	breq	.+44     	; 0x1986 <ADS1X15::setGain(unsigned char)+0x38>
    195a:	48 f4       	brcc	.+18     	; 0x196e <ADS1X15::setGain(unsigned char)+0x20>
    195c:	61 30       	cpi	r22, 0x01	; 1
    195e:	81 f0       	breq	.+32     	; 0x1980 <ADS1X15::setGain(unsigned char)+0x32>
    1960:	80 e0       	ldi	r24, 0x00	; 0
    1962:	94 e0       	ldi	r25, 0x04	; 4
    1964:	62 30       	cpi	r22, 0x02	; 2
    1966:	49 f0       	breq	.+18     	; 0x197a <ADS1X15::setGain(unsigned char)+0x2c>
    1968:	16 82       	std	Z+6, r1	; 0x06
    196a:	15 82       	std	Z+5, r1	; 0x05
    196c:	08 95       	ret
    196e:	68 30       	cpi	r22, 0x08	; 8
    1970:	69 f0       	breq	.+26     	; 0x198c <ADS1X15::setGain(unsigned char)+0x3e>
    1972:	80 e0       	ldi	r24, 0x00	; 0
    1974:	9a e0       	ldi	r25, 0x0A	; 10
    1976:	60 31       	cpi	r22, 0x10	; 16
    1978:	b9 f7       	brne	.-18     	; 0x1968 <ADS1X15::setGain(unsigned char)+0x1a>
    197a:	96 83       	std	Z+6, r25	; 0x06
    197c:	85 83       	std	Z+5, r24	; 0x05
    197e:	08 95       	ret
    1980:	80 e0       	ldi	r24, 0x00	; 0
    1982:	92 e0       	ldi	r25, 0x02	; 2
    1984:	fa cf       	rjmp	.-12     	; 0x197a <ADS1X15::setGain(unsigned char)+0x2c>
    1986:	80 e0       	ldi	r24, 0x00	; 0
    1988:	96 e0       	ldi	r25, 0x06	; 6
    198a:	f7 cf       	rjmp	.-18     	; 0x197a <ADS1X15::setGain(unsigned char)+0x2c>
    198c:	80 e0       	ldi	r24, 0x00	; 0
    198e:	98 e0       	ldi	r25, 0x08	; 8
    1990:	f4 cf       	rjmp	.-24     	; 0x197a <ADS1X15::setGain(unsigned char)+0x2c>

00001992 <ADS1X15::reset()>:
_ZN7ADS1X155resetEv():
    1992:	cf 93       	push	r28
    1994:	df 93       	push	r29
    1996:	ec 01       	movw	r28, r24
    1998:	60 e0       	ldi	r22, 0x00	; 0
    199a:	0e 94 a7 0c 	call	0x194e	; 0x194e <ADS1X15::setGain(unsigned char)>
_ZN7ADS1X157setModeEh():
    199e:	80 e0       	ldi	r24, 0x00	; 0
    19a0:	91 e0       	ldi	r25, 0x01	; 1
    19a2:	98 87       	std	Y+8, r25	; 0x08
    19a4:	8f 83       	std	Y+7, r24	; 0x07
_ZN7ADS1X1511setDataRateEh():
    19a6:	80 e8       	ldi	r24, 0x80	; 128
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	9a 87       	std	Y+10, r25	; 0x0a
    19ac:	89 87       	std	Y+9, r24	; 0x09
_ZN7ADS1X155resetEv():
    19ae:	1b 86       	std	Y+11, r1	; 0x0b
    19b0:	81 e0       	ldi	r24, 0x01	; 1
    19b2:	8c 87       	std	Y+12, r24	; 0x0c
    19b4:	1d 86       	std	Y+13, r1	; 0x0d
    19b6:	83 e0       	ldi	r24, 0x03	; 3
    19b8:	8e 87       	std	Y+14, r24	; 0x0e
    19ba:	df 91       	pop	r29
    19bc:	cf 91       	pop	r28
    19be:	08 95       	ret

000019c0 <ADS1X15::ADS1X15()>:
_ZN7ADS1X15C2Ev():
    19c0:	fc 01       	movw	r30, r24
    19c2:	17 86       	std	Z+15, r1	; 0x0f
    19c4:	12 8a       	std	Z+18, r1	; 0x12
    19c6:	13 8a       	std	Z+19, r1	; 0x13
    19c8:	14 8a       	std	Z+20, r1	; 0x14
    19ca:	15 8a       	std	Z+21, r1	; 0x15
    19cc:	0c 94 c9 0c 	jmp	0x1992	; 0x1992 <ADS1X15::reset()>

000019d0 <ADS1X15::setMode(unsigned char)>:
_ZN7ADS1X157setModeEh():
    19d0:	61 11       	cpse	r22, r1
    19d2:	04 c0       	rjmp	.+8      	; 0x19dc <ADS1X15::setMode(unsigned char)+0xc>
    19d4:	fc 01       	movw	r30, r24
    19d6:	10 86       	std	Z+8, r1	; 0x08
    19d8:	17 82       	std	Z+7, r1	; 0x07
    19da:	08 95       	ret
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	31 e0       	ldi	r19, 0x01	; 1
    19e0:	fc 01       	movw	r30, r24
    19e2:	30 87       	std	Z+8, r19	; 0x08
    19e4:	27 83       	std	Z+7, r18	; 0x07
    19e6:	08 95       	ret

000019e8 <ADS1X15::setDataRate(unsigned char)>:
_ZN7ADS1X1511setDataRateEh():
    19e8:	fc 01       	movw	r30, r24
    19ea:	70 e0       	ldi	r23, 0x00	; 0
    19ec:	68 30       	cpi	r22, 0x08	; 8
    19ee:	71 05       	cpc	r23, r1
    19f0:	60 f4       	brcc	.+24     	; 0x1a0a <ADS1X15::setDataRate(unsigned char)+0x22>
    19f2:	72 87       	std	Z+10, r23	; 0x0a
    19f4:	61 87       	std	Z+9, r22	; 0x09
    19f6:	81 85       	ldd	r24, Z+9	; 0x09
    19f8:	92 85       	ldd	r25, Z+10	; 0x0a
    19fa:	25 e0       	ldi	r18, 0x05	; 5
    19fc:	88 0f       	add	r24, r24
    19fe:	99 1f       	adc	r25, r25
    1a00:	2a 95       	dec	r18
    1a02:	e1 f7       	brne	.-8      	; 0x19fc <ADS1X15::setDataRate(unsigned char)+0x14>
    1a04:	92 87       	std	Z+10, r25	; 0x0a
    1a06:	81 87       	std	Z+9, r24	; 0x09
    1a08:	08 95       	ret
    1a0a:	84 e0       	ldi	r24, 0x04	; 4
    1a0c:	90 e0       	ldi	r25, 0x00	; 0
    1a0e:	92 87       	std	Z+10, r25	; 0x0a
    1a10:	81 87       	std	Z+9, r24	; 0x09
    1a12:	f1 cf       	rjmp	.-30     	; 0x19f6 <ADS1X15::setDataRate(unsigned char)+0xe>

00001a14 <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>:
_ZN7ADS1X1514_writeRegisterEhhj():
    1a14:	ff 92       	push	r15
    1a16:	0f 93       	push	r16
    1a18:	1f 93       	push	r17
    1a1a:	cf 93       	push	r28
    1a1c:	df 93       	push	r29
    1a1e:	ec 01       	movw	r28, r24
    1a20:	f4 2e       	mov	r15, r20
    1a22:	12 2f       	mov	r17, r18
    1a24:	03 2f       	mov	r16, r19
    1a26:	88 89       	ldd	r24, Y+16	; 0x10
    1a28:	99 89       	ldd	r25, Y+17	; 0x11
    1a2a:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <TwoWire::beginTransmission(unsigned char)>
    1a2e:	88 89       	ldd	r24, Y+16	; 0x10
    1a30:	99 89       	ldd	r25, Y+17	; 0x11
    1a32:	dc 01       	movw	r26, r24
    1a34:	ed 91       	ld	r30, X+
    1a36:	fc 91       	ld	r31, X
    1a38:	01 90       	ld	r0, Z+
    1a3a:	f0 81       	ld	r31, Z
    1a3c:	e0 2d       	mov	r30, r0
    1a3e:	6f 2d       	mov	r22, r15
    1a40:	09 95       	icall
    1a42:	88 89       	ldd	r24, Y+16	; 0x10
    1a44:	99 89       	ldd	r25, Y+17	; 0x11
    1a46:	dc 01       	movw	r26, r24
    1a48:	ed 91       	ld	r30, X+
    1a4a:	fc 91       	ld	r31, X
    1a4c:	01 90       	ld	r0, Z+
    1a4e:	f0 81       	ld	r31, Z
    1a50:	e0 2d       	mov	r30, r0
    1a52:	60 2f       	mov	r22, r16
    1a54:	09 95       	icall
    1a56:	88 89       	ldd	r24, Y+16	; 0x10
    1a58:	99 89       	ldd	r25, Y+17	; 0x11
    1a5a:	dc 01       	movw	r26, r24
    1a5c:	ed 91       	ld	r30, X+
    1a5e:	fc 91       	ld	r31, X
    1a60:	01 90       	ld	r0, Z+
    1a62:	f0 81       	ld	r31, Z
    1a64:	e0 2d       	mov	r30, r0
    1a66:	61 2f       	mov	r22, r17
    1a68:	09 95       	icall
    1a6a:	88 89       	ldd	r24, Y+16	; 0x10
    1a6c:	99 89       	ldd	r25, Y+17	; 0x11
    1a6e:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <TwoWire::endTransmission()>
    1a72:	91 e0       	ldi	r25, 0x01	; 1
    1a74:	81 11       	cpse	r24, r1
    1a76:	90 e0       	ldi	r25, 0x00	; 0
    1a78:	89 2f       	mov	r24, r25
    1a7a:	df 91       	pop	r29
    1a7c:	cf 91       	pop	r28
    1a7e:	1f 91       	pop	r17
    1a80:	0f 91       	pop	r16
    1a82:	ff 90       	pop	r15
    1a84:	08 95       	ret

00001a86 <ADS1X15::_requestADC(unsigned int)>:
_ZN7ADS1X1511_requestADCEj():
    1a86:	fc 01       	movw	r30, r24
    1a88:	25 81       	ldd	r18, Z+5	; 0x05
    1a8a:	36 81       	ldd	r19, Z+6	; 0x06
    1a8c:	87 81       	ldd	r24, Z+7	; 0x07
    1a8e:	90 85       	ldd	r25, Z+8	; 0x08
    1a90:	28 2b       	or	r18, r24
    1a92:	39 2b       	or	r19, r25
    1a94:	30 68       	ori	r19, 0x80	; 128
    1a96:	81 85       	ldd	r24, Z+9	; 0x09
    1a98:	92 85       	ldd	r25, Z+10	; 0x0a
    1a9a:	28 2b       	or	r18, r24
    1a9c:	39 2b       	or	r19, r25
    1a9e:	26 2b       	or	r18, r22
    1aa0:	37 2b       	or	r19, r23
    1aa2:	83 85       	ldd	r24, Z+11	; 0x0b
    1aa4:	81 11       	cpse	r24, r1
    1aa6:	20 61       	ori	r18, 0x10	; 16
    1aa8:	84 85       	ldd	r24, Z+12	; 0x0c
    1aaa:	81 11       	cpse	r24, r1
    1aac:	28 60       	ori	r18, 0x08	; 8
    1aae:	85 85       	ldd	r24, Z+13	; 0x0d
    1ab0:	81 11       	cpse	r24, r1
    1ab2:	24 60       	ori	r18, 0x04	; 4
    1ab4:	86 85       	ldd	r24, Z+14	; 0x0e
    1ab6:	28 2b       	or	r18, r24
    1ab8:	41 e0       	ldi	r20, 0x01	; 1
    1aba:	62 81       	ldd	r22, Z+2	; 0x02
    1abc:	cf 01       	movw	r24, r30
    1abe:	0c 94 0a 0d 	jmp	0x1a14	; 0x1a14 <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>

00001ac2 <ADS1X15::_readRegister(unsigned char, unsigned char)>:
_ZN7ADS1X1513_readRegisterEhh():
    1ac2:	0f 93       	push	r16
    1ac4:	1f 93       	push	r17
    1ac6:	cf 93       	push	r28
    1ac8:	df 93       	push	r29
    1aca:	8c 01       	movw	r16, r24
    1acc:	c6 2f       	mov	r28, r22
    1ace:	d4 2f       	mov	r29, r20
    1ad0:	dc 01       	movw	r26, r24
    1ad2:	50 96       	adiw	r26, 0x10	; 16
    1ad4:	8d 91       	ld	r24, X+
    1ad6:	9c 91       	ld	r25, X
    1ad8:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <TwoWire::beginTransmission(unsigned char)>
    1adc:	f8 01       	movw	r30, r16
    1ade:	80 89       	ldd	r24, Z+16	; 0x10
    1ae0:	91 89       	ldd	r25, Z+17	; 0x11
    1ae2:	dc 01       	movw	r26, r24
    1ae4:	ed 91       	ld	r30, X+
    1ae6:	fc 91       	ld	r31, X
    1ae8:	01 90       	ld	r0, Z+
    1aea:	f0 81       	ld	r31, Z
    1aec:	e0 2d       	mov	r30, r0
    1aee:	6d 2f       	mov	r22, r29
    1af0:	09 95       	icall
    1af2:	f8 01       	movw	r30, r16
    1af4:	80 89       	ldd	r24, Z+16	; 0x10
    1af6:	91 89       	ldd	r25, Z+17	; 0x11
    1af8:	0e 94 1e 0f 	call	0x1e3c	; 0x1e3c <TwoWire::endTransmission()>
    1afc:	42 e0       	ldi	r20, 0x02	; 2
    1afe:	6c 2f       	mov	r22, r28
    1b00:	d8 01       	movw	r26, r16
    1b02:	50 96       	adiw	r26, 0x10	; 16
    1b04:	8d 91       	ld	r24, X+
    1b06:	9c 91       	ld	r25, X
    1b08:	0e 94 1b 0f 	call	0x1e36	; 0x1e36 <TwoWire::requestFrom(unsigned char, unsigned char)>
    1b0c:	82 30       	cpi	r24, 0x02	; 2
    1b0e:	f1 f4       	brne	.+60     	; 0x1b4c <ADS1X15::_readRegister(unsigned char, unsigned char)+0x8a>
    1b10:	f8 01       	movw	r30, r16
    1b12:	80 89       	ldd	r24, Z+16	; 0x10
    1b14:	91 89       	ldd	r25, Z+17	; 0x11
    1b16:	dc 01       	movw	r26, r24
    1b18:	ed 91       	ld	r30, X+
    1b1a:	fc 91       	ld	r31, X
    1b1c:	02 84       	ldd	r0, Z+10	; 0x0a
    1b1e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1b20:	e0 2d       	mov	r30, r0
    1b22:	09 95       	icall
    1b24:	d8 2f       	mov	r29, r24
    1b26:	b0 e0       	ldi	r27, 0x00	; 0
    1b28:	cb 2f       	mov	r28, r27
    1b2a:	f8 01       	movw	r30, r16
    1b2c:	80 89       	ldd	r24, Z+16	; 0x10
    1b2e:	91 89       	ldd	r25, Z+17	; 0x11
    1b30:	dc 01       	movw	r26, r24
    1b32:	ed 91       	ld	r30, X+
    1b34:	fc 91       	ld	r31, X
    1b36:	02 84       	ldd	r0, Z+10	; 0x0a
    1b38:	f3 85       	ldd	r31, Z+11	; 0x0b
    1b3a:	e0 2d       	mov	r30, r0
    1b3c:	09 95       	icall
    1b3e:	8c 0f       	add	r24, r28
    1b40:	9d 1f       	adc	r25, r29
    1b42:	df 91       	pop	r29
    1b44:	cf 91       	pop	r28
    1b46:	1f 91       	pop	r17
    1b48:	0f 91       	pop	r16
    1b4a:	08 95       	ret
    1b4c:	90 e0       	ldi	r25, 0x00	; 0
    1b4e:	80 e0       	ldi	r24, 0x00	; 0
    1b50:	f8 cf       	rjmp	.-16     	; 0x1b42 <ADS1X15::_readRegister(unsigned char, unsigned char)+0x80>

00001b52 <ADS1X15::isBusy()>:
_ZN7ADS1X156isBusyEv():
    1b52:	41 e0       	ldi	r20, 0x01	; 1
    1b54:	fc 01       	movw	r30, r24
    1b56:	62 81       	ldd	r22, Z+2	; 0x02
    1b58:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <ADS1X15::_readRegister(unsigned char, unsigned char)>
    1b5c:	89 2f       	mov	r24, r25
    1b5e:	80 95       	com	r24
    1b60:	88 1f       	adc	r24, r24
    1b62:	88 27       	eor	r24, r24
    1b64:	88 1f       	adc	r24, r24
    1b66:	08 95       	ret

00001b68 <ADS1X15::getValue()>:
_ZN7ADS1X158getValueEv():
    1b68:	cf 93       	push	r28
    1b6a:	df 93       	push	r29
    1b6c:	ec 01       	movw	r28, r24
    1b6e:	40 e0       	ldi	r20, 0x00	; 0
    1b70:	6a 81       	ldd	r22, Y+2	; 0x02
    1b72:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <ADS1X15::_readRegister(unsigned char, unsigned char)>
    1b76:	2c 81       	ldd	r18, Y+4	; 0x04
    1b78:	22 23       	and	r18, r18
    1b7a:	29 f0       	breq	.+10     	; 0x1b86 <ADS1X15::getValue()+0x1e>
    1b7c:	02 c0       	rjmp	.+4      	; 0x1b82 <ADS1X15::getValue()+0x1a>
    1b7e:	95 95       	asr	r25
    1b80:	87 95       	ror	r24
    1b82:	2a 95       	dec	r18
    1b84:	e2 f7       	brpl	.-8      	; 0x1b7e <ADS1X15::getValue()+0x16>
    1b86:	df 91       	pop	r29
    1b88:	cf 91       	pop	r28
    1b8a:	08 95       	ret

00001b8c <ADS1X15::_readADC(unsigned int)>:
_ZN7ADS1X158_readADCEj():
    1b8c:	cf 93       	push	r28
    1b8e:	df 93       	push	r29
    1b90:	ec 01       	movw	r28, r24
    1b92:	0e 94 43 0d 	call	0x1a86	; 0x1a86 <ADS1X15::_requestADC(unsigned int)>
    1b96:	8f 81       	ldd	r24, Y+7	; 0x07
    1b98:	98 85       	ldd	r25, Y+8	; 0x08
    1b9a:	81 15       	cp	r24, r1
    1b9c:	91 40       	sbci	r25, 0x01	; 1
    1b9e:	41 f4       	brne	.+16     	; 0x1bb0 <ADS1X15::_readADC(unsigned int)+0x24>
    1ba0:	ce 01       	movw	r24, r28
    1ba2:	0e 94 a9 0d 	call	0x1b52	; 0x1b52 <ADS1X15::isBusy()>
    1ba6:	88 23       	and	r24, r24
    1ba8:	49 f0       	breq	.+18     	; 0x1bbc <ADS1X15::_readADC(unsigned int)+0x30>
    1baa:	0e 94 c9 11 	call	0x2392	; 0x2392 <yield>
    1bae:	f8 cf       	rjmp	.-16     	; 0x1ba0 <ADS1X15::_readADC(unsigned int)+0x14>
    1bb0:	6b 81       	ldd	r22, Y+3	; 0x03
    1bb2:	70 e0       	ldi	r23, 0x00	; 0
    1bb4:	90 e0       	ldi	r25, 0x00	; 0
    1bb6:	80 e0       	ldi	r24, 0x00	; 0
    1bb8:	0e 94 39 12 	call	0x2472	; 0x2472 <delay>
    1bbc:	ce 01       	movw	r24, r28
    1bbe:	df 91       	pop	r29
    1bc0:	cf 91       	pop	r28
    1bc2:	0c 94 b4 0d 	jmp	0x1b68	; 0x1b68 <ADS1X15::getValue()>

00001bc6 <ADS1X15::readADC(unsigned char)>:
_ZN7ADS1X157readADCEh():
    1bc6:	fc 01       	movw	r30, r24
    1bc8:	21 81       	ldd	r18, Z+1	; 0x01
    1bca:	62 17       	cp	r22, r18
    1bcc:	38 f4       	brcc	.+14     	; 0x1bdc <ADS1X15::readADC(unsigned char)+0x16>
    1bce:	62 95       	swap	r22
    1bd0:	60 7f       	andi	r22, 0xF0	; 240
    1bd2:	70 e4       	ldi	r23, 0x40	; 64
    1bd4:	76 0f       	add	r23, r22
    1bd6:	60 e0       	ldi	r22, 0x00	; 0
    1bd8:	0c 94 c6 0d 	jmp	0x1b8c	; 0x1b8c <ADS1X15::_readADC(unsigned int)>
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	80 e0       	ldi	r24, 0x00	; 0
    1be0:	08 95       	ret

00001be2 <ADS1115::ADS1115(unsigned char, TwoWire*)>:
_ZN7ADS1115C2EhP7TwoWire():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:577

///////////////////////////////////////////////////////////////////////////
//
// ADS1115
//
ADS1115::ADS1115(uint8_t address, TwoWire *wire)
    1be2:	ff 92       	push	r15
    1be4:	0f 93       	push	r16
    1be6:	1f 93       	push	r17
    1be8:	cf 93       	push	r28
    1bea:	df 93       	push	r29
    1bec:	ec 01       	movw	r28, r24
    1bee:	f6 2e       	mov	r15, r22
    1bf0:	8a 01       	movw	r16, r20
    1bf2:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <ADS1X15::ADS1X15()>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:579
{
  _address = address;
    1bf6:	fa 82       	std	Y+2, r15	; 0x02
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:580
  _wire = wire;
    1bf8:	19 8b       	std	Y+17, r17	; 0x11
    1bfa:	08 8b       	std	Y+16, r16	; 0x10
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:581
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_4;
    1bfc:	85 e3       	ldi	r24, 0x35	; 53
    1bfe:	88 83       	st	Y, r24
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:582
  _conversionDelay = ADS1115_CONVERSION_DELAY;
    1c00:	88 e0       	ldi	r24, 0x08	; 8
    1c02:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:583
  _bitShift = 0;
    1c04:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:584
  _maxPorts = 4;
    1c06:	84 e0       	ldi	r24, 0x04	; 4
    1c08:	89 83       	std	Y+1, r24	; 0x01
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:585
}
    1c0a:	df 91       	pop	r29
    1c0c:	cf 91       	pop	r28
    1c0e:	1f 91       	pop	r17
    1c10:	0f 91       	pop	r16
    1c12:	ff 90       	pop	r15
    1c14:	08 95       	ret

00001c16 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src/jm_Wire.cpp:327

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    1c16:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <TwoWire::rxBufferLength>
    1c1a:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <TwoWire::rxBufferIndex>
    1c1e:	89 1b       	sub	r24, r25
    1c20:	99 0b       	sbc	r25, r25
    1c22:	08 95       	ret

00001c24 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    1c24:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <TwoWire::rxBufferIndex>
    1c28:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <TwoWire::rxBufferLength>
    1c2c:	2f ef       	ldi	r18, 0xFF	; 255
    1c2e:	3f ef       	ldi	r19, 0xFF	; 255
    1c30:	98 17       	cp	r25, r24
    1c32:	48 f4       	brcc	.+18     	; 0x1c46 <TwoWire::read()+0x22>
    1c34:	e9 2f       	mov	r30, r25
    1c36:	f0 e0       	ldi	r31, 0x00	; 0
    1c38:	ed 59       	subi	r30, 0x9D	; 157
    1c3a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c3c:	20 81       	ld	r18, Z
    1c3e:	30 e0       	ldi	r19, 0x00	; 0
    1c40:	9f 5f       	subi	r25, 0xFF	; 255
    1c42:	90 93 62 04 	sts	0x0462, r25	; 0x800462 <TwoWire::rxBufferIndex>
    1c46:	c9 01       	movw	r24, r18
    1c48:	08 95       	ret

00001c4a <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    1c4a:	e0 91 62 04 	lds	r30, 0x0462	; 0x800462 <TwoWire::rxBufferIndex>
    1c4e:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <TwoWire::rxBufferLength>
    1c52:	e8 17       	cp	r30, r24
    1c54:	30 f4       	brcc	.+12     	; 0x1c62 <TwoWire::peek()+0x18>
    1c56:	f0 e0       	ldi	r31, 0x00	; 0
    1c58:	ed 59       	subi	r30, 0x9D	; 157
    1c5a:	fb 4f       	sbci	r31, 0xFB	; 251
    1c5c:	80 81       	ld	r24, Z
    1c5e:	90 e0       	ldi	r25, 0x00	; 0
    1c60:	08 95       	ret
    1c62:	8f ef       	ldi	r24, 0xFF	; 255
    1c64:	9f ef       	ldi	r25, 0xFF	; 255
    1c66:	08 95       	ret

00001c68 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    1c68:	08 95       	ret

00001c6a <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    1c6a:	cf 93       	push	r28
    1c6c:	df 93       	push	r29
    1c6e:	1f 92       	push	r1
    1c70:	cd b7       	in	r28, 0x3d	; 61
    1c72:	de b7       	in	r29, 0x3e	; 62
    1c74:	69 83       	std	Y+1, r22	; 0x01
    1c76:	20 91 3d 04 	lds	r18, 0x043D	; 0x80043d <TwoWire::transmitting>
    1c7a:	22 23       	and	r18, r18
    1c7c:	f9 f0       	breq	.+62     	; 0x1cbc <TwoWire::write(unsigned char)+0x52>
    1c7e:	20 91 3e 04 	lds	r18, 0x043E	; 0x80043e <TwoWire::txBufferLength>
    1c82:	20 32       	cpi	r18, 0x20	; 32
    1c84:	58 f0       	brcs	.+22     	; 0x1c9c <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    1c86:	21 e0       	ldi	r18, 0x01	; 1
    1c88:	30 e0       	ldi	r19, 0x00	; 0
    1c8a:	fc 01       	movw	r30, r24
    1c8c:	33 83       	std	Z+3, r19	; 0x03
    1c8e:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    1c90:	90 e0       	ldi	r25, 0x00	; 0
    1c92:	80 e0       	ldi	r24, 0x00	; 0
    1c94:	0f 90       	pop	r0
    1c96:	df 91       	pop	r29
    1c98:	cf 91       	pop	r28
    1c9a:	08 95       	ret
    1c9c:	80 91 3f 04 	lds	r24, 0x043F	; 0x80043f <TwoWire::txBufferIndex>
    1ca0:	e8 2f       	mov	r30, r24
    1ca2:	f0 e0       	ldi	r31, 0x00	; 0
    1ca4:	e0 5c       	subi	r30, 0xC0	; 192
    1ca6:	fb 4f       	sbci	r31, 0xFB	; 251
    1ca8:	99 81       	ldd	r25, Y+1	; 0x01
    1caa:	90 83       	st	Z, r25
    1cac:	8f 5f       	subi	r24, 0xFF	; 255
    1cae:	80 93 3f 04 	sts	0x043F, r24	; 0x80043f <TwoWire::txBufferIndex>
    1cb2:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <TwoWire::txBufferLength>
    1cb6:	81 e0       	ldi	r24, 0x01	; 1
    1cb8:	90 e0       	ldi	r25, 0x00	; 0
    1cba:	ec cf       	rjmp	.-40     	; 0x1c94 <TwoWire::write(unsigned char)+0x2a>
    1cbc:	61 e0       	ldi	r22, 0x01	; 1
    1cbe:	ce 01       	movw	r24, r28
    1cc0:	01 96       	adiw	r24, 0x01	; 1
    1cc2:	0e 94 80 10 	call	0x2100	; 0x2100 <twi_transmit>
    1cc6:	f7 cf       	rjmp	.-18     	; 0x1cb6 <TwoWire::write(unsigned char)+0x4c>

00001cc8 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	7c 01       	movw	r14, r24
    1cda:	cb 01       	movw	r24, r22
    1cdc:	8a 01       	movw	r16, r20
    1cde:	20 91 3d 04 	lds	r18, 0x043D	; 0x80043d <TwoWire::transmitting>
    1ce2:	22 23       	and	r18, r18
    1ce4:	89 f0       	breq	.+34     	; 0x1d08 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    1ce6:	eb 01       	movw	r28, r22
    1ce8:	6b 01       	movw	r12, r22
    1cea:	c4 0e       	add	r12, r20
    1cec:	d5 1e       	adc	r13, r21
    1cee:	cc 15       	cp	r28, r12
    1cf0:	dd 05       	cpc	r29, r13
    1cf2:	69 f0       	breq	.+26     	; 0x1d0e <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    1cf4:	69 91       	ld	r22, Y+
    1cf6:	d7 01       	movw	r26, r14
    1cf8:	ed 91       	ld	r30, X+
    1cfa:	fc 91       	ld	r31, X
    1cfc:	01 90       	ld	r0, Z+
    1cfe:	f0 81       	ld	r31, Z
    1d00:	e0 2d       	mov	r30, r0
    1d02:	c7 01       	movw	r24, r14
    1d04:	09 95       	icall
    1d06:	f3 cf       	rjmp	.-26     	; 0x1cee <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    1d08:	64 2f       	mov	r22, r20
    1d0a:	0e 94 80 10 	call	0x2100	; 0x2100 <twi_transmit>
    1d0e:	c8 01       	movw	r24, r16
    1d10:	df 91       	pop	r29
    1d12:	cf 91       	pop	r28
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	ff 90       	pop	r15
    1d1a:	ef 90       	pop	r14
    1d1c:	df 90       	pop	r13
    1d1e:	cf 90       	pop	r12
    1d20:	08 95       	ret

00001d22 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    1d22:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <TwoWire::rxBufferIndex>
    1d26:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <TwoWire::rxBufferLength>
    1d2a:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <TwoWire::txBufferIndex>
    1d2e:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <TwoWire::txBufferLength>
    1d32:	0c 94 32 0f 	jmp	0x1e64	; 0x1e64 <twi_init>

00001d36 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    1d36:	81 e0       	ldi	r24, 0x01	; 1
    1d38:	80 93 3d 04 	sts	0x043D, r24	; 0x80043d <TwoWire::transmitting>
    1d3c:	60 93 60 04 	sts	0x0460, r22	; 0x800460 <TwoWire::txAddress>
    1d40:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <TwoWire::txBufferIndex>
    1d44:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <TwoWire::txBufferLength>
    1d48:	08 95       	ret

00001d4a <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    1d4a:	0f 93       	push	r16
    1d4c:	06 2f       	mov	r16, r22
    1d4e:	21 e0       	ldi	r18, 0x01	; 1
    1d50:	40 91 3e 04 	lds	r20, 0x043E	; 0x80043e <TwoWire::txBufferLength>
    1d54:	60 e4       	ldi	r22, 0x40	; 64
    1d56:	74 e0       	ldi	r23, 0x04	; 4
    1d58:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <TwoWire::txAddress>
    1d5c:	0e 94 f0 0f 	call	0x1fe0	; 0x1fe0 <twi_writeTo>
    1d60:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <TwoWire::txBufferIndex>
    1d64:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <TwoWire::txBufferLength>
    1d68:	10 92 3d 04 	sts	0x043D, r1	; 0x80043d <TwoWire::transmitting>
    1d6c:	0f 91       	pop	r16
    1d6e:	08 95       	ret

00001d70 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    1d70:	4f 92       	push	r4
    1d72:	5f 92       	push	r5
    1d74:	6f 92       	push	r6
    1d76:	7f 92       	push	r7
    1d78:	af 92       	push	r10
    1d7a:	bf 92       	push	r11
    1d7c:	cf 92       	push	r12
    1d7e:	ef 92       	push	r14
    1d80:	ff 92       	push	r15
    1d82:	0f 93       	push	r16
    1d84:	1f 93       	push	r17
    1d86:	cf 93       	push	r28
    1d88:	df 93       	push	r29
    1d8a:	5c 01       	movw	r10, r24
    1d8c:	f6 2e       	mov	r15, r22
    1d8e:	d4 2f       	mov	r29, r20
    1d90:	28 01       	movw	r4, r16
    1d92:	39 01       	movw	r6, r18
    1d94:	ee 20       	and	r14, r14
    1d96:	19 f1       	breq	.+70     	; 0x1dde <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    1d98:	0e 94 9b 0e 	call	0x1d36	; 0x1d36 <TwoWire::beginTransmission(unsigned char)>
    1d9c:	ce 2d       	mov	r28, r14
    1d9e:	c4 30       	cpi	r28, 0x04	; 4
    1da0:	08 f0       	brcs	.+2      	; 0x1da4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    1da2:	c3 e0       	ldi	r28, 0x03	; 3
    1da4:	c1 50       	subi	r28, 0x01	; 1
    1da6:	b8 f0       	brcs	.+46     	; 0x1dd6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    1da8:	28 e0       	ldi	r18, 0x08	; 8
    1daa:	c2 9f       	mul	r28, r18
    1dac:	c0 01       	movw	r24, r0
    1dae:	11 24       	eor	r1, r1
    1db0:	a3 01       	movw	r20, r6
    1db2:	92 01       	movw	r18, r4
    1db4:	04 c0       	rjmp	.+8      	; 0x1dbe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    1db6:	56 95       	lsr	r21
    1db8:	47 95       	ror	r20
    1dba:	37 95       	ror	r19
    1dbc:	27 95       	ror	r18
    1dbe:	8a 95       	dec	r24
    1dc0:	d2 f7       	brpl	.-12     	; 0x1db6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    1dc2:	b9 01       	movw	r22, r18
    1dc4:	d5 01       	movw	r26, r10
    1dc6:	ed 91       	ld	r30, X+
    1dc8:	fc 91       	ld	r31, X
    1dca:	01 90       	ld	r0, Z+
    1dcc:	f0 81       	ld	r31, Z
    1dce:	e0 2d       	mov	r30, r0
    1dd0:	c5 01       	movw	r24, r10
    1dd2:	09 95       	icall
    1dd4:	e7 cf       	rjmp	.-50     	; 0x1da4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    1dd6:	60 e0       	ldi	r22, 0x00	; 0
    1dd8:	c5 01       	movw	r24, r10
    1dda:	0e 94 a5 0e 	call	0x1d4a	; 0x1d4a <TwoWire::endTransmission(unsigned char)>
    1dde:	4d 2f       	mov	r20, r29
    1de0:	d1 32       	cpi	r29, 0x21	; 33
    1de2:	08 f0       	brcs	.+2      	; 0x1de6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    1de4:	40 e2       	ldi	r20, 0x20	; 32
    1de6:	2c 2d       	mov	r18, r12
    1de8:	63 e6       	ldi	r22, 0x63	; 99
    1dea:	74 e0       	ldi	r23, 0x04	; 4
    1dec:	8f 2d       	mov	r24, r15
    1dee:	0e 94 66 0f 	call	0x1ecc	; 0x1ecc <twi_readFrom>
    1df2:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <TwoWire::rxBufferIndex>
    1df6:	80 93 61 04 	sts	0x0461, r24	; 0x800461 <TwoWire::rxBufferLength>
    1dfa:	df 91       	pop	r29
    1dfc:	cf 91       	pop	r28
    1dfe:	1f 91       	pop	r17
    1e00:	0f 91       	pop	r16
    1e02:	ff 90       	pop	r15
    1e04:	ef 90       	pop	r14
    1e06:	cf 90       	pop	r12
    1e08:	bf 90       	pop	r11
    1e0a:	af 90       	pop	r10
    1e0c:	7f 90       	pop	r7
    1e0e:	6f 90       	pop	r6
    1e10:	5f 90       	pop	r5
    1e12:	4f 90       	pop	r4
    1e14:	08 95       	ret

00001e16 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    1e16:	cf 92       	push	r12
    1e18:	ef 92       	push	r14
    1e1a:	0f 93       	push	r16
    1e1c:	1f 93       	push	r17
    1e1e:	c2 2e       	mov	r12, r18
    1e20:	e1 2c       	mov	r14, r1
    1e22:	00 e0       	ldi	r16, 0x00	; 0
    1e24:	10 e0       	ldi	r17, 0x00	; 0
    1e26:	98 01       	movw	r18, r16
    1e28:	0e 94 b8 0e 	call	0x1d70	; 0x1d70 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    1e2c:	1f 91       	pop	r17
    1e2e:	0f 91       	pop	r16
    1e30:	ef 90       	pop	r14
    1e32:	cf 90       	pop	r12
    1e34:	08 95       	ret

00001e36 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
    1e36:	21 e0       	ldi	r18, 0x01	; 1
    1e38:	0c 94 0b 0f 	jmp	0x1e16	; 0x1e16 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00001e3c <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    1e3c:	61 e0       	ldi	r22, 0x01	; 1
    1e3e:	0c 94 a5 0e 	jmp	0x1d4a	; 0x1d4a <TwoWire::endTransmission(unsigned char)>

00001e42 <_GLOBAL__sub_I_twi_readFrom_timeout>:
_ZN5PrintC4Ev():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1e42:	e1 e3       	ldi	r30, 0x31	; 49
    1e44:	f4 e0       	ldi	r31, 0x04	; 4
    1e46:	13 82       	std	Z+3, r1	; 0x03
    1e48:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1e4a:	88 ee       	ldi	r24, 0xE8	; 232
    1e4c:	93 e0       	ldi	r25, 0x03	; 3
    1e4e:	a0 e0       	ldi	r26, 0x00	; 0
    1e50:	b0 e0       	ldi	r27, 0x00	; 0
    1e52:	84 83       	std	Z+4, r24	; 0x04
    1e54:	95 83       	std	Z+5, r25	; 0x05
    1e56:	a6 83       	std	Z+6, r26	; 0x06
    1e58:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src/jm_Wire.cpp:50
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1e5a:	86 e6       	ldi	r24, 0x66	; 102
    1e5c:	93 e0       	ldi	r25, 0x03	; 3
    1e5e:	91 83       	std	Z+1, r25	; 0x01
    1e60:	80 83       	st	Z, r24
_GLOBAL__sub_I_twi_readFrom_timeout():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src/jm_Wire.cpp:331
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1e62:	08 95       	ret

00001e64 <twi_init>:
twi_init():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:427
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
	}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1e64:	0f 93       	push	r16
    1e66:	1f 93       	push	r17
    1e68:	cf 93       	push	r28
    1e6a:	0c eb       	ldi	r16, 0xBC	; 188
    1e6c:	10 e0       	ldi	r17, 0x00	; 0
    1e6e:	f8 01       	movw	r30, r16
    1e70:	10 82       	st	Z, r1
    1e72:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <twi_state>
    1e76:	c1 e0       	ldi	r28, 0x01	; 1
    1e78:	c0 93 f4 04 	sts	0x04F4, r28	; 0x8004f4 <twi_sendStop>
    1e7c:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <twi_inRepStart>
    1e80:	62 e0       	ldi	r22, 0x02	; 2
    1e82:	81 e1       	ldi	r24, 0x11	; 17
    1e84:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
    1e88:	62 e0       	ldi	r22, 0x02	; 2
    1e8a:	80 e1       	ldi	r24, 0x10	; 16
    1e8c:	0e 94 e7 12 	call	0x25ce	; 0x25ce <pinMode>
    1e90:	e9 eb       	ldi	r30, 0xB9	; 185
    1e92:	f0 e0       	ldi	r31, 0x00	; 0
    1e94:	80 81       	ld	r24, Z
    1e96:	8e 7f       	andi	r24, 0xFE	; 254
    1e98:	80 83       	st	Z, r24
    1e9a:	80 81       	ld	r24, Z
    1e9c:	8d 7f       	andi	r24, 0xFD	; 253
    1e9e:	80 83       	st	Z, r24
    1ea0:	88 e4       	ldi	r24, 0x48	; 72
    1ea2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1ea6:	85 e4       	ldi	r24, 0x45	; 69
    1ea8:	f8 01       	movw	r30, r16
    1eaa:	80 83       	st	Z, r24
    1eac:	10 92 88 04 	sts	0x0488, r1	; 0x800488 <twi_readFrom_timeout+0x1>
    1eb0:	10 92 87 04 	sts	0x0487, r1	; 0x800487 <twi_readFrom_timeout>
    1eb4:	10 92 86 04 	sts	0x0486, r1	; 0x800486 <twi_writeTo_timeout+0x1>
    1eb8:	10 92 85 04 	sts	0x0485, r1	; 0x800485 <twi_writeTo_timeout>
    1ebc:	c0 93 84 04 	sts	0x0484, r28	; 0x800484 <twi_readFrom_wait>
    1ec0:	c0 93 83 04 	sts	0x0483, r28	; 0x800483 <twi_writeTo_wait>
    1ec4:	cf 91       	pop	r28
    1ec6:	1f 91       	pop	r17
    1ec8:	0f 91       	pop	r16
    1eca:	08 95       	ret

00001ecc <twi_readFrom>:
twi_readFrom():
    1ecc:	8f 92       	push	r8
    1ece:	9f 92       	push	r9
    1ed0:	af 92       	push	r10
    1ed2:	bf 92       	push	r11
    1ed4:	ff 92       	push	r15
    1ed6:	0f 93       	push	r16
    1ed8:	1f 93       	push	r17
    1eda:	cf 93       	push	r28
    1edc:	df 93       	push	r29
    1ede:	d6 2f       	mov	r29, r22
    1ee0:	f7 2e       	mov	r15, r23
    1ee2:	c4 2f       	mov	r28, r20
    1ee4:	41 32       	cpi	r20, 0x21	; 33
    1ee6:	60 f0       	brcs	.+24     	; 0x1f00 <twi_readFrom+0x34>
    1ee8:	c0 e0       	ldi	r28, 0x00	; 0
    1eea:	8c 2f       	mov	r24, r28
    1eec:	df 91       	pop	r29
    1eee:	cf 91       	pop	r28
    1ef0:	1f 91       	pop	r17
    1ef2:	0f 91       	pop	r16
    1ef4:	ff 90       	pop	r15
    1ef6:	bf 90       	pop	r11
    1ef8:	af 90       	pop	r10
    1efa:	9f 90       	pop	r9
    1efc:	8f 90       	pop	r8
    1efe:	08 95       	ret
    1f00:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <twi_state>
    1f04:	91 11       	cpse	r25, r1
    1f06:	f0 cf       	rjmp	.-32     	; 0x1ee8 <twi_readFrom+0x1c>
    1f08:	91 e0       	ldi	r25, 0x01	; 1
    1f0a:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <twi_state>
    1f0e:	20 93 f4 04 	sts	0x04F4, r18	; 0x8004f4 <twi_sendStop>
    1f12:	2f ef       	ldi	r18, 0xFF	; 255
    1f14:	20 93 89 04 	sts	0x0489, r18	; 0x800489 <twi_error>
    1f18:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <twi_masterBufferIndex>
    1f1c:	24 0f       	add	r18, r20
    1f1e:	20 93 cd 04 	sts	0x04CD, r18	; 0x8004cd <twi_masterBufferLength>
    1f22:	90 93 f5 04 	sts	0x04F5, r25	; 0x8004f5 <twi_slarw>
    1f26:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <twi_slarw>
    1f2a:	88 0f       	add	r24, r24
    1f2c:	89 2b       	or	r24, r25
    1f2e:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <twi_slarw>
    1f32:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <twi_inRepStart>
    1f36:	81 30       	cpi	r24, 0x01	; 1
    1f38:	c1 f5       	brne	.+112    	; 0x1faa <twi_readFrom+0xde>
    1f3a:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <twi_inRepStart>
    1f3e:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <twi_slarw>
    1f42:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1f46:	85 ec       	ldi	r24, 0xC5	; 197
    1f48:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f4c:	80 91 84 04 	lds	r24, 0x0484	; 0x800484 <twi_readFrom_wait>
    1f50:	88 23       	and	r24, r24
    1f52:	51 f2       	breq	.-108    	; 0x1ee8 <twi_readFrom+0x1c>
    1f54:	0e 94 14 12 	call	0x2428	; 0x2428 <micros>
    1f58:	8b 01       	movw	r16, r22
    1f5a:	ac 2f       	mov	r26, r28
    1f5c:	b0 e0       	ldi	r27, 0x00	; 0
    1f5e:	14 96       	adiw	r26, 0x04	; 4
    1f60:	20 ef       	ldi	r18, 0xF0	; 240
    1f62:	3d e8       	ldi	r19, 0x8D	; 141
    1f64:	4c e0       	ldi	r20, 0x0C	; 12
    1f66:	51 e0       	ldi	r21, 0x01	; 1
    1f68:	0e 94 ed 19 	call	0x33da	; 0x33da <__muluhisi3>
    1f6c:	20 ea       	ldi	r18, 0xA0	; 160
    1f6e:	36 e8       	ldi	r19, 0x86	; 134
    1f70:	41 e0       	ldi	r20, 0x01	; 1
    1f72:	50 e0       	ldi	r21, 0x00	; 0
    1f74:	0e 94 c5 19 	call	0x338a	; 0x338a <__divmodsi4>
    1f78:	49 01       	movw	r8, r18
    1f7a:	5a 01       	movw	r10, r20
    1f7c:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <twi_state>
    1f80:	81 11       	cpse	r24, r1
    1f82:	15 c0       	rjmp	.+42     	; 0x1fae <twi_readFrom+0xe2>
    1f84:	80 91 ce 04 	lds	r24, 0x04CE	; 0x8004ce <twi_masterBufferIndex>
    1f88:	8c 17       	cp	r24, r28
    1f8a:	10 f4       	brcc	.+4      	; 0x1f90 <twi_readFrom+0xc4>
    1f8c:	c0 91 ce 04 	lds	r28, 0x04CE	; 0x8004ce <twi_masterBufferIndex>
    1f90:	af ec       	ldi	r26, 0xCF	; 207
    1f92:	b4 e0       	ldi	r27, 0x04	; 4
    1f94:	9d 2f       	mov	r25, r29
    1f96:	ed 2f       	mov	r30, r29
    1f98:	ff 2d       	mov	r31, r15
    1f9a:	8e 2f       	mov	r24, r30
    1f9c:	89 1b       	sub	r24, r25
    1f9e:	8c 17       	cp	r24, r28
    1fa0:	08 f0       	brcs	.+2      	; 0x1fa4 <twi_readFrom+0xd8>
    1fa2:	a3 cf       	rjmp	.-186    	; 0x1eea <twi_readFrom+0x1e>
    1fa4:	8d 91       	ld	r24, X+
    1fa6:	81 93       	st	Z+, r24
    1fa8:	f8 cf       	rjmp	.-16     	; 0x1f9a <twi_readFrom+0xce>
    1faa:	85 ee       	ldi	r24, 0xE5	; 229
    1fac:	cd cf       	rjmp	.-102    	; 0x1f48 <twi_readFrom+0x7c>
    1fae:	0e 94 14 12 	call	0x2428	; 0x2428 <micros>
    1fb2:	60 1b       	sub	r22, r16
    1fb4:	71 0b       	sbc	r23, r17
    1fb6:	cb 01       	movw	r24, r22
    1fb8:	b0 e0       	ldi	r27, 0x00	; 0
    1fba:	a0 e0       	ldi	r26, 0x00	; 0
    1fbc:	20 91 87 04 	lds	r18, 0x0487	; 0x800487 <twi_readFrom_timeout>
    1fc0:	30 91 88 04 	lds	r19, 0x0488	; 0x800488 <twi_readFrom_timeout+0x1>
    1fc4:	2c 59       	subi	r18, 0x9C	; 156
    1fc6:	3f 4f       	sbci	r19, 0xFF	; 255
    1fc8:	b5 01       	movw	r22, r10
    1fca:	a4 01       	movw	r20, r8
    1fcc:	42 0f       	add	r20, r18
    1fce:	53 1f       	adc	r21, r19
    1fd0:	61 1d       	adc	r22, r1
    1fd2:	71 1d       	adc	r23, r1
    1fd4:	48 17       	cp	r20, r24
    1fd6:	59 07       	cpc	r21, r25
    1fd8:	6a 07       	cpc	r22, r26
    1fda:	7b 07       	cpc	r23, r27
    1fdc:	7c f6       	brge	.-98     	; 0x1f7c <twi_readFrom+0xb0>
    1fde:	84 cf       	rjmp	.-248    	; 0x1ee8 <twi_readFrom+0x1c>

00001fe0 <twi_writeTo>:
twi_writeTo():
    1fe0:	cf 92       	push	r12
    1fe2:	df 92       	push	r13
    1fe4:	ef 92       	push	r14
    1fe6:	ff 92       	push	r15
    1fe8:	0f 93       	push	r16
    1fea:	1f 93       	push	r17
    1fec:	cf 93       	push	r28
    1fee:	df 93       	push	r29
    1ff0:	41 32       	cpi	r20, 0x21	; 33
    1ff2:	08 f0       	brcs	.+2      	; 0x1ff6 <twi_writeTo+0x16>
    1ff4:	7d c0       	rjmp	.+250    	; 0x20f0 <twi_writeTo+0x110>
    1ff6:	90 91 f6 04 	lds	r25, 0x04F6	; 0x8004f6 <twi_state>
    1ffa:	91 11       	cpse	r25, r1
    1ffc:	7b c0       	rjmp	.+246    	; 0x20f4 <twi_writeTo+0x114>
    1ffe:	92 e0       	ldi	r25, 0x02	; 2
    2000:	90 93 f6 04 	sts	0x04F6, r25	; 0x8004f6 <twi_state>
    2004:	00 93 f4 04 	sts	0x04F4, r16	; 0x8004f4 <twi_sendStop>
    2008:	9f ef       	ldi	r25, 0xFF	; 255
    200a:	90 93 89 04 	sts	0x0489, r25	; 0x800489 <twi_error>
    200e:	10 92 ce 04 	sts	0x04CE, r1	; 0x8004ce <twi_masterBufferIndex>
    2012:	40 93 cd 04 	sts	0x04CD, r20	; 0x8004cd <twi_masterBufferLength>
    2016:	36 2f       	mov	r19, r22
    2018:	af ec       	ldi	r26, 0xCF	; 207
    201a:	b4 e0       	ldi	r27, 0x04	; 4
    201c:	fb 01       	movw	r30, r22
    201e:	9e 2f       	mov	r25, r30
    2020:	93 1b       	sub	r25, r19
    2022:	94 17       	cp	r25, r20
    2024:	18 f1       	brcs	.+70     	; 0x206c <twi_writeTo+0x8c>
    2026:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <twi_slarw>
    202a:	90 91 f5 04 	lds	r25, 0x04F5	; 0x8004f5 <twi_slarw>
    202e:	88 0f       	add	r24, r24
    2030:	89 2b       	or	r24, r25
    2032:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <twi_slarw>
    2036:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <twi_inRepStart>
    203a:	81 30       	cpi	r24, 0x01	; 1
    203c:	d1 f4       	brne	.+52     	; 0x2072 <twi_writeTo+0x92>
    203e:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <twi_inRepStart>
    2042:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <twi_slarw>
    2046:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    204a:	85 ec       	ldi	r24, 0xC5	; 197
    204c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2050:	80 91 83 04 	lds	r24, 0x0483	; 0x800483 <twi_writeTo_wait>
    2054:	81 11       	cpse	r24, r1
    2056:	0f c0       	rjmp	.+30     	; 0x2076 <twi_writeTo+0x96>
    2058:	80 e0       	ldi	r24, 0x00	; 0
    205a:	df 91       	pop	r29
    205c:	cf 91       	pop	r28
    205e:	1f 91       	pop	r17
    2060:	0f 91       	pop	r16
    2062:	ff 90       	pop	r15
    2064:	ef 90       	pop	r14
    2066:	df 90       	pop	r13
    2068:	cf 90       	pop	r12
    206a:	08 95       	ret
    206c:	91 91       	ld	r25, Z+
    206e:	9d 93       	st	X+, r25
    2070:	d6 cf       	rjmp	.-84     	; 0x201e <twi_writeTo+0x3e>
    2072:	85 ee       	ldi	r24, 0xE5	; 229
    2074:	eb cf       	rjmp	.-42     	; 0x204c <twi_writeTo+0x6c>
    2076:	d2 2f       	mov	r29, r18
    2078:	c4 2f       	mov	r28, r20
    207a:	0e 94 14 12 	call	0x2428	; 0x2428 <micros>
    207e:	8b 01       	movw	r16, r22
    2080:	ac 2f       	mov	r26, r28
    2082:	b0 e0       	ldi	r27, 0x00	; 0
    2084:	14 96       	adiw	r26, 0x04	; 4
    2086:	20 ef       	ldi	r18, 0xF0	; 240
    2088:	3d e8       	ldi	r19, 0x8D	; 141
    208a:	4c e0       	ldi	r20, 0x0C	; 12
    208c:	51 e0       	ldi	r21, 0x01	; 1
    208e:	0e 94 ed 19 	call	0x33da	; 0x33da <__muluhisi3>
    2092:	20 ea       	ldi	r18, 0xA0	; 160
    2094:	36 e8       	ldi	r19, 0x86	; 134
    2096:	41 e0       	ldi	r20, 0x01	; 1
    2098:	50 e0       	ldi	r21, 0x00	; 0
    209a:	0e 94 c5 19 	call	0x338a	; 0x338a <__divmodsi4>
    209e:	69 01       	movw	r12, r18
    20a0:	7a 01       	movw	r14, r20
    20a2:	84 e6       	ldi	r24, 0x64	; 100
    20a4:	c8 0e       	add	r12, r24
    20a6:	d1 1c       	adc	r13, r1
    20a8:	e1 1c       	adc	r14, r1
    20aa:	f1 1c       	adc	r15, r1
    20ac:	dd 23       	and	r29, r29
    20ae:	21 f0       	breq	.+8      	; 0x20b8 <twi_writeTo+0xd8>
    20b0:	80 91 f6 04 	lds	r24, 0x04F6	; 0x8004f6 <twi_state>
    20b4:	81 11       	cpse	r24, r1
    20b6:	0e c0       	rjmp	.+28     	; 0x20d4 <twi_writeTo+0xf4>
    20b8:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <twi_error>
    20bc:	8f 3f       	cpi	r24, 0xFF	; 255
    20be:	61 f2       	breq	.-104    	; 0x2058 <twi_writeTo+0x78>
    20c0:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <twi_error>
    20c4:	80 32       	cpi	r24, 0x20	; 32
    20c6:	c1 f0       	breq	.+48     	; 0x20f8 <twi_writeTo+0x118>
    20c8:	80 91 89 04 	lds	r24, 0x0489	; 0x800489 <twi_error>
    20cc:	80 33       	cpi	r24, 0x30	; 48
    20ce:	b1 f0       	breq	.+44     	; 0x20fc <twi_writeTo+0x11c>
    20d0:	84 e0       	ldi	r24, 0x04	; 4
    20d2:	c3 cf       	rjmp	.-122    	; 0x205a <twi_writeTo+0x7a>
    20d4:	0e 94 14 12 	call	0x2428	; 0x2428 <micros>
    20d8:	60 1b       	sub	r22, r16
    20da:	71 0b       	sbc	r23, r17
    20dc:	cb 01       	movw	r24, r22
    20de:	b0 e0       	ldi	r27, 0x00	; 0
    20e0:	a0 e0       	ldi	r26, 0x00	; 0
    20e2:	c8 16       	cp	r12, r24
    20e4:	d9 06       	cpc	r13, r25
    20e6:	ea 06       	cpc	r14, r26
    20e8:	fb 06       	cpc	r15, r27
    20ea:	04 f7       	brge	.-64     	; 0x20ac <twi_writeTo+0xcc>
    20ec:	86 e0       	ldi	r24, 0x06	; 6
    20ee:	b5 cf       	rjmp	.-150    	; 0x205a <twi_writeTo+0x7a>
    20f0:	81 e0       	ldi	r24, 0x01	; 1
    20f2:	b3 cf       	rjmp	.-154    	; 0x205a <twi_writeTo+0x7a>
    20f4:	85 e0       	ldi	r24, 0x05	; 5
    20f6:	b1 cf       	rjmp	.-158    	; 0x205a <twi_writeTo+0x7a>
    20f8:	82 e0       	ldi	r24, 0x02	; 2
    20fa:	af cf       	rjmp	.-162    	; 0x205a <twi_writeTo+0x7a>
    20fc:	83 e0       	ldi	r24, 0x03	; 3
    20fe:	ad cf       	rjmp	.-166    	; 0x205a <twi_writeTo+0x7a>

00002100 <twi_transmit>:
twi_transmit():
    2100:	61 32       	cpi	r22, 0x21	; 33
    2102:	98 f4       	brcc	.+38     	; 0x212a <twi_transmit+0x2a>
    2104:	20 91 f6 04 	lds	r18, 0x04F6	; 0x8004f6 <twi_state>
    2108:	24 30       	cpi	r18, 0x04	; 4
    210a:	89 f4       	brne	.+34     	; 0x212e <twi_transmit+0x2e>
    210c:	60 93 ab 04 	sts	0x04AB, r22	; 0x8004ab <twi_txBufferLength>
    2110:	28 2f       	mov	r18, r24
    2112:	ad ea       	ldi	r26, 0xAD	; 173
    2114:	b4 e0       	ldi	r27, 0x04	; 4
    2116:	fc 01       	movw	r30, r24
    2118:	8e 2f       	mov	r24, r30
    211a:	82 1b       	sub	r24, r18
    211c:	86 17       	cp	r24, r22
    211e:	10 f0       	brcs	.+4      	; 0x2124 <twi_transmit+0x24>
    2120:	80 e0       	ldi	r24, 0x00	; 0
    2122:	08 95       	ret
    2124:	81 91       	ld	r24, Z+
    2126:	8d 93       	st	X+, r24
    2128:	f7 cf       	rjmp	.-18     	; 0x2118 <twi_transmit+0x18>
    212a:	81 e0       	ldi	r24, 0x01	; 1
    212c:	08 95       	ret
    212e:	82 e0       	ldi	r24, 0x02	; 2
    2130:	08 95       	ret

00002132 <twi_stop>:
twi_stop():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:442
 * Output	 none
 */
void twi_stop(void)
{
	// send stop condition
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2132:	85 ed       	ldi	r24, 0xD5	; 213
    2134:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:446
//	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWSTO);

	// update twi state
	twi_state = TWI_READY;
    2138:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <twi_state>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:447
}
    213c:	08 95       	ret

0000213e <twi_releaseBus>:
twi_releaseBus():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:460
 * Output	 none
 */
void twi_releaseBus(void)
{
	// release bus
	TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    213e:	85 ec       	ldi	r24, 0xC5	; 197
    2140:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:463

	// update twi state
	twi_state = TWI_READY;
    2144:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <twi_state>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:464
}
    2148:	08 95       	ret

0000214a <__vector_26>:
__vector_26():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:469



ISR(TWI_vect)
{
    214a:	1f 92       	push	r1
    214c:	0f 92       	push	r0
    214e:	0f b6       	in	r0, 0x3f	; 63
    2150:	0f 92       	push	r0
    2152:	11 24       	eor	r1, r1
    2154:	0b b6       	in	r0, 0x3b	; 59
    2156:	0f 92       	push	r0
    2158:	2f 93       	push	r18
    215a:	3f 93       	push	r19
    215c:	4f 93       	push	r20
    215e:	5f 93       	push	r21
    2160:	6f 93       	push	r22
    2162:	7f 93       	push	r23
    2164:	8f 93       	push	r24
    2166:	9f 93       	push	r25
    2168:	af 93       	push	r26
    216a:	bf 93       	push	r27
    216c:	ef 93       	push	r30
    216e:	ff 93       	push	r31
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:471

	switch(TW_STATUS){
    2170:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2174:	88 7f       	andi	r24, 0xF8	; 248
    2176:	80 36       	cpi	r24, 0x60	; 96
    2178:	09 f4       	brne	.+2      	; 0x217c <__vector_26+0x32>
    217a:	4e c0       	rjmp	.+156    	; 0x2218 <__vector_26+0xce>
    217c:	08 f0       	brcs	.+2      	; 0x2180 <__vector_26+0x36>
    217e:	41 c0       	rjmp	.+130    	; 0x2202 <__vector_26+0xb8>
    2180:	88 32       	cpi	r24, 0x28	; 40
    2182:	09 f4       	brne	.+2      	; 0x2186 <__vector_26+0x3c>
    2184:	aa c0       	rjmp	.+340    	; 0x22da <__vector_26+0x190>
    2186:	28 f5       	brcc	.+74     	; 0x21d2 <__vector_26+0x88>
    2188:	80 31       	cpi	r24, 0x10	; 16
    218a:	09 f4       	brne	.+2      	; 0x218e <__vector_26+0x44>
    218c:	9e c0       	rjmp	.+316    	; 0x22ca <__vector_26+0x180>
    218e:	c8 f4       	brcc	.+50     	; 0x21c2 <__vector_26+0x78>
    2190:	88 23       	and	r24, r24
    2192:	09 f4       	brne	.+2      	; 0x2196 <__vector_26+0x4c>
    2194:	fb c0       	rjmp	.+502    	; 0x238c <__vector_26+0x242>
    2196:	88 30       	cpi	r24, 0x08	; 8
    2198:	09 f4       	brne	.+2      	; 0x219c <__vector_26+0x52>
    219a:	97 c0       	rjmp	.+302    	; 0x22ca <__vector_26+0x180>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:673

default: // D0 - D8 - E0 - E8 - F0 - undocumented states
break;
	}

}
    219c:	ff 91       	pop	r31
    219e:	ef 91       	pop	r30
    21a0:	bf 91       	pop	r27
    21a2:	af 91       	pop	r26
    21a4:	9f 91       	pop	r25
    21a6:	8f 91       	pop	r24
    21a8:	7f 91       	pop	r23
    21aa:	6f 91       	pop	r22
    21ac:	5f 91       	pop	r21
    21ae:	4f 91       	pop	r20
    21b0:	3f 91       	pop	r19
    21b2:	2f 91       	pop	r18
    21b4:	0f 90       	pop	r0
    21b6:	0b be       	out	0x3b, r0	; 59
    21b8:	0f 90       	pop	r0
    21ba:	0f be       	out	0x3f, r0	; 63
    21bc:	0f 90       	pop	r0
    21be:	1f 90       	pop	r1
    21c0:	18 95       	reti
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:471


ISR(TWI_vect)
{

	switch(TW_STATUS){
    21c2:	88 31       	cpi	r24, 0x18	; 24
    21c4:	09 f4       	brne	.+2      	; 0x21c8 <__vector_26+0x7e>
    21c6:	89 c0       	rjmp	.+274    	; 0x22da <__vector_26+0x190>
    21c8:	80 32       	cpi	r24, 0x20	; 32
    21ca:	41 f7       	brne	.-48     	; 0x219c <__vector_26+0x52>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:518
			twi_stop();
			break;

		case TW_MT_DATA_NACK: // 30 - data sent, nack received
//digitalWrite(13, HIGH);
			twi_error = TW_MT_DATA_NACK;
    21cc:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <twi_error>
    21d0:	15 c0       	rjmp	.+42     	; 0x21fc <__vector_26+0xb2>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:471


ISR(TWI_vect)
{

	switch(TW_STATUS){
    21d2:	80 34       	cpi	r24, 0x40	; 64
    21d4:	09 f4       	brne	.+2      	; 0x21d8 <__vector_26+0x8e>
    21d6:	9e c0       	rjmp	.+316    	; 0x2314 <__vector_26+0x1ca>
    21d8:	48 f4       	brcc	.+18     	; 0x21ec <__vector_26+0xa2>
    21da:	80 33       	cpi	r24, 0x30	; 48
    21dc:	b9 f3       	breq	.-18     	; 0x21cc <__vector_26+0x82>
    21de:	88 33       	cpi	r24, 0x38	; 56
    21e0:	e9 f6       	brne	.-70     	; 0x219c <__vector_26+0x52>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:524
			twi_stop();
//digitalWrite(13, LOW);
			break;

		case TW_MT_ARB_LOST: // 38 - lost bus arbitration
			twi_error = TW_MT_ARB_LOST;
    21e2:	80 93 89 04 	sts	0x0489, r24	; 0x800489 <twi_error>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:611
			// callback to user defined callback
			twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
			// since we submit rx buffer to "wire" library, we can reset it
			twi_rxBufferIndex = 0;
			// ack future responses and leave slave receiver state
			twi_releaseBus();
    21e6:	0e 94 9f 10 	call	0x213e	; 0x213e <twi_releaseBus>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:612
			break;
    21ea:	d8 cf       	rjmp	.-80     	; 0x219c <__vector_26+0x52>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:471


ISR(TWI_vect)
{

	switch(TW_STATUS){
    21ec:	80 35       	cpi	r24, 0x50	; 80
    21ee:	09 f4       	brne	.+2      	; 0x21f2 <__vector_26+0xa8>
    21f0:	85 c0       	rjmp	.+266    	; 0x22fc <__vector_26+0x1b2>
    21f2:	88 35       	cpi	r24, 0x58	; 88
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <__vector_26+0xae>
    21f6:	96 c0       	rjmp	.+300    	; 0x2324 <__vector_26+0x1da>
    21f8:	88 34       	cpi	r24, 0x48	; 72
    21fa:	81 f6       	brne	.-96     	; 0x219c <__vector_26+0x52>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:666
		case TW_NO_INFO:	 // F8 - no state information
			break;

		case TW_BUS_ERROR: // 00 - bus error, illegal stop/start
			twi_error = TW_BUS_ERROR;
			twi_stop();
    21fc:	0e 94 99 10 	call	0x2132	; 0x2132 <twi_stop>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:673

default: // D0 - D8 - E0 - E8 - F0 - undocumented states
break;
	}

}
    2200:	cd cf       	rjmp	.-102    	; 0x219c <__vector_26+0x52>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:471


ISR(TWI_vect)
{

	switch(TW_STATUS){
    2202:	88 39       	cpi	r24, 0x98	; 152
    2204:	09 f4       	brne	.+2      	; 0x2208 <__vector_26+0xbe>
    2206:	8c c0       	rjmp	.+280    	; 0x2320 <__vector_26+0x1d6>
    2208:	38 f5       	brcc	.+78     	; 0x2258 <__vector_26+0x10e>
    220a:	88 37       	cpi	r24, 0x78	; 120
    220c:	29 f0       	breq	.+10     	; 0x2218 <__vector_26+0xce>
    220e:	50 f4       	brcc	.+20     	; 0x2224 <__vector_26+0xda>
    2210:	88 36       	cpi	r24, 0x68	; 104
    2212:	11 f0       	breq	.+4      	; 0x2218 <__vector_26+0xce>
    2214:	80 37       	cpi	r24, 0x70	; 112
    2216:	11 f6       	brne	.-124    	; 0x219c <__vector_26+0x52>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:577
		case TW_SR_SLA_ACK:	 // 60 - addressed, returned ack
		case TW_SR_GCALL_ACK: // 70 - addressed generally, returned ack
		case TW_SR_ARB_LOST_SLA_ACK:	 // 68 - lost arbitration, returned ack
		case TW_SR_ARB_LOST_GCALL_ACK: // 78 - lost arbitration, returned ack
			// enter slave receiver mode
			twi_state = TWI_SRX;
    2218:	83 e0       	ldi	r24, 0x03	; 3
    221a:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <twi_state>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:579
			// indicate that rx buffer can be overwritten and ack
			twi_rxBufferIndex = 0;
    221e:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <twi_rxBufferIndex>
    2222:	57 c0       	rjmp	.+174    	; 0x22d2 <__vector_26+0x188>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:471


ISR(TWI_vect)
{

	switch(TW_STATUS){
    2224:	88 38       	cpi	r24, 0x88	; 136
    2226:	09 f4       	brne	.+2      	; 0x222a <__vector_26+0xe0>
    2228:	7b c0       	rjmp	.+246    	; 0x2320 <__vector_26+0x1d6>
    222a:	80 39       	cpi	r24, 0x90	; 144
    222c:	19 f0       	breq	.+6      	; 0x2234 <__vector_26+0xea>
    222e:	80 38       	cpi	r24, 0x80	; 128
    2230:	09 f0       	breq	.+2      	; 0x2234 <__vector_26+0xea>
    2232:	b4 cf       	rjmp	.-152    	; 0x219c <__vector_26+0x52>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:586
			break;

		case TW_SR_DATA_ACK:			 // 80 - data received, returned ack
		case TW_SR_GCALL_DATA_ACK: // 90 - data received generally, returned ack
			// if there is still room in the rx buffer
			if (twi_rxBufferIndex < TWI_BUFFER_LENGTH)
    2234:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <twi_rxBufferIndex>
    2238:	80 32       	cpi	r24, 0x20	; 32
    223a:	08 f0       	brcs	.+2      	; 0x223e <__vector_26+0xf4>
    223c:	71 c0       	rjmp	.+226    	; 0x2320 <__vector_26+0x1d6>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:589
			{
				// put byte in buffer and ack
				twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    223e:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <twi_rxBufferIndex>
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	8e 0f       	add	r24, r30
    2246:	80 93 8a 04 	sts	0x048A, r24	; 0x80048a <twi_rxBufferIndex>
    224a:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	e5 57       	subi	r30, 0x75	; 117
    2252:	fb 4f       	sbci	r31, 0xFB	; 251
    2254:	80 83       	st	Z, r24
    2256:	3d c0       	rjmp	.+122    	; 0x22d2 <__vector_26+0x188>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:471


ISR(TWI_vect)
{

	switch(TW_STATUS){
    2258:	80 3b       	cpi	r24, 0xB0	; 176
    225a:	39 f0       	breq	.+14     	; 0x226a <__vector_26+0x120>
    225c:	e0 f4       	brcc	.+56     	; 0x2296 <__vector_26+0x14c>
    225e:	80 3a       	cpi	r24, 0xA0	; 160
    2260:	09 f4       	brne	.+2      	; 0x2264 <__vector_26+0x11a>
    2262:	79 c0       	rjmp	.+242    	; 0x2356 <__vector_26+0x20c>
    2264:	88 3a       	cpi	r24, 0xA8	; 168
    2266:	09 f0       	breq	.+2      	; 0x226a <__vector_26+0x120>
    2268:	99 cf       	rjmp	.-206    	; 0x219c <__vector_26+0x52>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:625
		// Slave Transmitter

		case TW_ST_SLA_ACK:					// A8 - addressed, returned ack
		case TW_ST_ARB_LOST_SLA_ACK: // B0 - arbitration lost, returned ack
			// enter slave transmitter mode
			twi_state = TWI_STX;
    226a:	84 e0       	ldi	r24, 0x04	; 4
    226c:	80 93 f6 04 	sts	0x04F6, r24	; 0x8004f6 <twi_state>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:627
			// ready the tx buffer index for iteration
			twi_txBufferIndex = 0;
    2270:	10 92 ac 04 	sts	0x04AC, r1	; 0x8004ac <twi_txBufferIndex>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:629
			// set tx buffer length to be zero, to verify if user changes it
			twi_txBufferLength = 0;
    2274:	10 92 ab 04 	sts	0x04AB, r1	; 0x8004ab <twi_txBufferLength>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:632
			// request for txBuffer to be filled and length to be set
			// note: user must call twi_transmit(bytes, length) to do this
			twi_onSlaveTransmit();
    2278:	e0 91 f1 04 	lds	r30, 0x04F1	; 0x8004f1 <twi_onSlaveTransmit>
    227c:	f0 91 f2 04 	lds	r31, 0x04F2	; 0x8004f2 <twi_onSlaveTransmit+0x1>
    2280:	09 95       	icall
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:634
			// if they didn't change buffer & length, initialize it
			if(0 == twi_txBufferLength)
    2282:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <twi_txBufferLength>
    2286:	81 11       	cpse	r24, r1
    2288:	0f c0       	rjmp	.+30     	; 0x22a8 <__vector_26+0x15e>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:636
			{
				twi_txBufferLength = 1;
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	80 93 ab 04 	sts	0x04AB, r24	; 0x8004ab <twi_txBufferLength>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:637
				twi_txBuffer[0] = 0x00;
    2290:	10 92 ad 04 	sts	0x04AD, r1	; 0x8004ad <twi_txBuffer>
    2294:	09 c0       	rjmp	.+18     	; 0x22a8 <__vector_26+0x15e>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:471


ISR(TWI_vect)
{

	switch(TW_STATUS){
    2296:	80 3c       	cpi	r24, 0xC0	; 192
    2298:	09 f4       	brne	.+2      	; 0x229c <__vector_26+0x152>
    229a:	76 c0       	rjmp	.+236    	; 0x2388 <__vector_26+0x23e>
    229c:	88 3c       	cpi	r24, 0xC8	; 200
    229e:	09 f4       	brne	.+2      	; 0x22a2 <__vector_26+0x158>
    22a0:	73 c0       	rjmp	.+230    	; 0x2388 <__vector_26+0x23e>
    22a2:	88 3b       	cpi	r24, 0xB8	; 184
    22a4:	09 f0       	breq	.+2      	; 0x22a8 <__vector_26+0x15e>
    22a6:	7a cf       	rjmp	.-268    	; 0x219c <__vector_26+0x52>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:642
				twi_txBuffer[0] = 0x00;
			}
			// transmit first byte from buffer, fall
		case TW_ST_DATA_ACK: // B8 - byte sent, ack returned
			// copy data to output register
			TWDR = twi_txBuffer[twi_txBufferIndex++];
    22a8:	e0 91 ac 04 	lds	r30, 0x04AC	; 0x8004ac <twi_txBufferIndex>
    22ac:	81 e0       	ldi	r24, 0x01	; 1
    22ae:	8e 0f       	add	r24, r30
    22b0:	80 93 ac 04 	sts	0x04AC, r24	; 0x8004ac <twi_txBufferIndex>
    22b4:	f0 e0       	ldi	r31, 0x00	; 0
    22b6:	e3 55       	subi	r30, 0x53	; 83
    22b8:	fb 4f       	sbci	r31, 0xFB	; 251
    22ba:	80 81       	ld	r24, Z
    22bc:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:644
			// if there is more to send, ack, otherwise nack
			if(twi_txBufferIndex < twi_txBufferLength){
    22c0:	90 91 ac 04 	lds	r25, 0x04AC	; 0x8004ac <twi_txBufferIndex>
    22c4:	80 91 ab 04 	lds	r24, 0x04AB	; 0x8004ab <twi_txBufferLength>
    22c8:	29 c0       	rjmp	.+82     	; 0x231c <__vector_26+0x1d2>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:479

		case TW_START:		 // 08 - sent start condition
		case TW_REP_START: // 10 - sent repeated start condition
//digitalWrite(13, HIGH);
			// copy device address and r/w bit to output register and ack
			TWDR = twi_slarw;
    22ca:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <twi_slarw>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:492
		case TW_MT_DATA_ACK: // 28 - slave receiver acked data
			// if there is data to send, send it, otherwise stop
			if(twi_masterBufferIndex < twi_masterBufferLength)
			{
				// copy data to output register and ack
				TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    22ce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
twi_reply():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:425
 */
void twi_reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22d2:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:427
	}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22d4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    22d8:	61 cf       	rjmp	.-318    	; 0x219c <__vector_26+0x52>
__vector_26():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:489
		// Master Transmitter

		case TW_MT_SLA_ACK:	// 18 - slave receiver acked address
		case TW_MT_DATA_ACK: // 28 - slave receiver acked data
			// if there is data to send, send it, otherwise stop
			if(twi_masterBufferIndex < twi_masterBufferLength)
    22da:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <twi_masterBufferIndex>
    22de:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <twi_masterBufferLength>
    22e2:	98 17       	cp	r25, r24
    22e4:	58 f5       	brcc	.+86     	; 0x233c <__vector_26+0x1f2>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:492
			{
				// copy data to output register and ack
				TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    22e6:	e0 91 ce 04 	lds	r30, 0x04CE	; 0x8004ce <twi_masterBufferIndex>
    22ea:	81 e0       	ldi	r24, 0x01	; 1
    22ec:	8e 0f       	add	r24, r30
    22ee:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <twi_masterBufferIndex>
    22f2:	f0 e0       	ldi	r31, 0x00	; 0
    22f4:	e1 53       	subi	r30, 0x31	; 49
    22f6:	fb 4f       	sbci	r31, 0xFB	; 251
    22f8:	80 81       	ld	r24, Z
    22fa:	e9 cf       	rjmp	.-46     	; 0x22ce <__vector_26+0x184>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:533
		// Master Receiver

		case TW_MR_DATA_ACK: // 50 - data received, ack sent
			// put byte into buffer
//digitalWrite(13, HIGH);
			twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    22fc:	e0 91 ce 04 	lds	r30, 0x04CE	; 0x8004ce <twi_masterBufferIndex>
    2300:	81 e0       	ldi	r24, 0x01	; 1
    2302:	8e 0f       	add	r24, r30
    2304:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <twi_masterBufferIndex>
    2308:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    230c:	f0 e0       	ldi	r31, 0x00	; 0
    230e:	e1 53       	subi	r30, 0x31	; 49
    2310:	fb 4f       	sbci	r31, 0xFB	; 251
    2312:	80 83       	st	Z, r24
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:537
//digitalWrite(13, LOW);
		case TW_MR_SLA_ACK:	// 40 - address sent, ack received
			// ack if more bytes are expected, otherwise nack
			if (twi_masterBufferIndex < twi_masterBufferLength)
    2314:	90 91 ce 04 	lds	r25, 0x04CE	; 0x8004ce <twi_masterBufferIndex>
    2318:	80 91 cd 04 	lds	r24, 0x04CD	; 0x8004cd <twi_masterBufferLength>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:644
			// transmit first byte from buffer, fall
		case TW_ST_DATA_ACK: // B8 - byte sent, ack returned
			// copy data to output register
			TWDR = twi_txBuffer[twi_txBufferIndex++];
			// if there is more to send, ack, otherwise nack
			if(twi_txBufferIndex < twi_txBufferLength){
    231c:	98 17       	cp	r25, r24
    231e:	c8 f2       	brcs	.-78     	; 0x22d2 <__vector_26+0x188>
twi_reply():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:427
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
	}else{
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2320:	85 e8       	ldi	r24, 0x85	; 133
    2322:	d8 cf       	rjmp	.-80     	; 0x22d4 <__vector_26+0x18a>
__vector_26():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:550
			break;

		case TW_MR_DATA_NACK: // 58 - data received, nack sent
			// put final byte into buffer
//digitalWrite(13, HIGH);
			twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2324:	e0 91 ce 04 	lds	r30, 0x04CE	; 0x8004ce <twi_masterBufferIndex>
    2328:	81 e0       	ldi	r24, 0x01	; 1
    232a:	8e 0f       	add	r24, r30
    232c:	80 93 ce 04 	sts	0x04CE, r24	; 0x8004ce <twi_masterBufferIndex>
    2330:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2334:	f0 e0       	ldi	r31, 0x00	; 0
    2336:	e1 53       	subi	r30, 0x31	; 49
    2338:	fb 4f       	sbci	r31, 0xFB	; 251
    233a:	80 83       	st	Z, r24
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:552
//digitalWrite(13, LOW);
			if (twi_sendStop)
    233c:	80 91 f4 04 	lds	r24, 0x04F4	; 0x8004f4 <twi_sendStop>
    2340:	81 11       	cpse	r24, r1
    2342:	5c cf       	rjmp	.-328    	; 0x21fc <__vector_26+0xb2>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:556
				twi_stop();
			else
			{
				twi_inRepStart = true;	// we're gonna send the START
    2344:	81 e0       	ldi	r24, 0x01	; 1
    2346:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <twi_inRepStart>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:560
				// don't enable the interrupt. We'll generate the start, but we
				// avoid handling the interrupt until we're in the next transaction,
				// at the point where we would normally issue the start.
				TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    234a:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:425
 */
void twi_reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    234c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
__vector_26():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:656
		case TW_ST_DATA_NACK: // C0 - received nack, we are done
		case TW_ST_LAST_DATA: // C8 - received ack, but we are done already!
			// ack future responses
			twi_reply(1);
			// leave slave receiver state
			twi_state = TWI_READY;
    2350:	10 92 f6 04 	sts	0x04F6, r1	; 0x8004f6 <twi_state>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:657
			break;
    2354:	23 cf       	rjmp	.-442    	; 0x219c <__vector_26+0x52>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:601
			}
			break;

		case TW_SR_STOP: // A0 - stop or repeated start condition received
			// put a null char after data if there's room
			if(twi_rxBufferIndex < TWI_BUFFER_LENGTH){
    2356:	80 91 8a 04 	lds	r24, 0x048A	; 0x80048a <twi_rxBufferIndex>
    235a:	80 32       	cpi	r24, 0x20	; 32
    235c:	30 f4       	brcc	.+12     	; 0x236a <__vector_26+0x220>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:602
				twi_rxBuffer[twi_rxBufferIndex] = '\0';
    235e:	e0 91 8a 04 	lds	r30, 0x048A	; 0x80048a <twi_rxBufferIndex>
    2362:	f0 e0       	ldi	r31, 0x00	; 0
    2364:	e5 57       	subi	r30, 0x75	; 117
    2366:	fb 4f       	sbci	r31, 0xFB	; 251
    2368:	10 82       	st	Z, r1
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:605
			}
			// sends ack and stops interface for clock stretching
			twi_stop();
    236a:	0e 94 99 10 	call	0x2132	; 0x2132 <twi_stop>
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:607
			// callback to user defined callback
			twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    236e:	60 91 8a 04 	lds	r22, 0x048A	; 0x80048a <twi_rxBufferIndex>
    2372:	70 e0       	ldi	r23, 0x00	; 0
    2374:	e0 91 ef 04 	lds	r30, 0x04EF	; 0x8004ef <twi_onSlaveReceive>
    2378:	f0 91 f0 04 	lds	r31, 0x04F0	; 0x8004f0 <twi_onSlaveReceive+0x1>
    237c:	8b e8       	ldi	r24, 0x8B	; 139
    237e:	94 e0       	ldi	r25, 0x04	; 4
    2380:	09 95       	icall
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:609
			// since we submit rx buffer to "wire" library, we can reset it
			twi_rxBufferIndex = 0;
    2382:	10 92 8a 04 	sts	0x048A, r1	; 0x80048a <twi_rxBufferIndex>
    2386:	2f cf       	rjmp	.-418    	; 0x21e6 <__vector_26+0x9c>
twi_reply():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:425
 */
void twi_reply(uint8_t ack)
{
	// transmit master read ready signal, with or without ack
	if(ack){
		TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2388:	85 ec       	ldi	r24, 0xC5	; 197
    238a:	e0 cf       	rjmp	.-64     	; 0x234c <__vector_26+0x202>
__vector_26():
C:\Users\abdul\OneDrive\Documents\Arduino\libraries\jm_Wire\src\utility/jm_twi.c:665

		case TW_NO_INFO:	 // F8 - no state information
			break;

		case TW_BUS_ERROR: // 00 - bus error, illegal stop/start
			twi_error = TW_BUS_ERROR;
    238c:	10 92 89 04 	sts	0x0489, r1	; 0x800489 <twi_error>
    2390:	35 cf       	rjmp	.-406    	; 0x21fc <__vector_26+0xb2>

00002392 <yield>:
__empty():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    2392:	08 95       	ret

00002394 <__vector_18>:
__vector_18():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227
  cli();
  m = timer0_millis;
  SREG = oldSREG;

  return m;
}
    2394:	1f 92       	push	r1
    2396:	0f 92       	push	r0
    2398:	0f b6       	in	r0, 0x3f	; 63
    239a:	0f 92       	push	r0
    239c:	11 24       	eor	r1, r1
    239e:	2f 93       	push	r18
    23a0:	3f 93       	push	r19
    23a2:	8f 93       	push	r24
    23a4:	9f 93       	push	r25
    23a6:	af 93       	push	r26
    23a8:	bf 93       	push	r27
    23aa:	80 91 fc 04 	lds	r24, 0x04FC	; 0x8004fc <timer0_millis>
    23ae:	90 91 fd 04 	lds	r25, 0x04FD	; 0x8004fd <timer0_millis+0x1>
    23b2:	a0 91 fe 04 	lds	r26, 0x04FE	; 0x8004fe <timer0_millis+0x2>
    23b6:	b0 91 ff 04 	lds	r27, 0x04FF	; 0x8004ff <timer0_millis+0x3>
    23ba:	30 91 fb 04 	lds	r19, 0x04FB	; 0x8004fb <timer0_fract>
    23be:	23 e0       	ldi	r18, 0x03	; 3
    23c0:	23 0f       	add	r18, r19
    23c2:	2d 37       	cpi	r18, 0x7D	; 125
    23c4:	68 f1       	brcs	.+90     	; 0x2420 <__vector_18+0x8c>
    23c6:	26 e8       	ldi	r18, 0x86	; 134
    23c8:	23 0f       	add	r18, r19
    23ca:	02 96       	adiw	r24, 0x02	; 2
    23cc:	a1 1d       	adc	r26, r1
    23ce:	b1 1d       	adc	r27, r1
    23d0:	20 93 fb 04 	sts	0x04FB, r18	; 0x8004fb <timer0_fract>
    23d4:	80 93 fc 04 	sts	0x04FC, r24	; 0x8004fc <timer0_millis>
    23d8:	90 93 fd 04 	sts	0x04FD, r25	; 0x8004fd <timer0_millis+0x1>
    23dc:	a0 93 fe 04 	sts	0x04FE, r26	; 0x8004fe <timer0_millis+0x2>
    23e0:	b0 93 ff 04 	sts	0x04FF, r27	; 0x8004ff <timer0_millis+0x3>
    23e4:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <timer0_overflow_count>
    23e8:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <timer0_overflow_count+0x1>
    23ec:	a0 91 f9 04 	lds	r26, 0x04F9	; 0x8004f9 <timer0_overflow_count+0x2>
    23f0:	b0 91 fa 04 	lds	r27, 0x04FA	; 0x8004fa <timer0_overflow_count+0x3>
    23f4:	01 96       	adiw	r24, 0x01	; 1
    23f6:	a1 1d       	adc	r26, r1
    23f8:	b1 1d       	adc	r27, r1
    23fa:	80 93 f7 04 	sts	0x04F7, r24	; 0x8004f7 <timer0_overflow_count>
    23fe:	90 93 f8 04 	sts	0x04F8, r25	; 0x8004f8 <timer0_overflow_count+0x1>
    2402:	a0 93 f9 04 	sts	0x04F9, r26	; 0x8004f9 <timer0_overflow_count+0x2>
    2406:	b0 93 fa 04 	sts	0x04FA, r27	; 0x8004fa <timer0_overflow_count+0x3>
    240a:	bf 91       	pop	r27
    240c:	af 91       	pop	r26
    240e:	9f 91       	pop	r25
    2410:	8f 91       	pop	r24
    2412:	3f 91       	pop	r19
    2414:	2f 91       	pop	r18
    2416:	0f 90       	pop	r0
    2418:	0f be       	out	0x3f, r0	; 63
    241a:	0f 90       	pop	r0
    241c:	1f 90       	pop	r1
    241e:	18 95       	reti
    2420:	01 96       	adiw	r24, 0x01	; 1
    2422:	a1 1d       	adc	r26, r1
    2424:	b1 1d       	adc	r27, r1
    2426:	d4 cf       	rjmp	.-88     	; 0x23d0 <__vector_18+0x3c>

00002428 <micros>:
micros():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    2428:	3f b7       	in	r19, 0x3f	; 63
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    242a:	f8 94       	cli
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    242c:	80 91 f7 04 	lds	r24, 0x04F7	; 0x8004f7 <timer0_overflow_count>
    2430:	90 91 f8 04 	lds	r25, 0x04F8	; 0x8004f8 <timer0_overflow_count+0x1>
    2434:	a0 91 f9 04 	lds	r26, 0x04F9	; 0x8004f9 <timer0_overflow_count+0x2>
    2438:	b0 91 fa 04 	lds	r27, 0x04FA	; 0x8004fa <timer0_overflow_count+0x3>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    243c:	26 b5       	in	r18, 0x26	; 38
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    243e:	a8 9b       	sbis	0x15, 0	; 21
    2440:	05 c0       	rjmp	.+10     	; 0x244c <micros+0x24>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    2442:	2f 3f       	cpi	r18, 0xFF	; 255
    2444:	19 f0       	breq	.+6      	; 0x244c <micros+0x24>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    2446:	01 96       	adiw	r24, 0x01	; 1
    2448:	a1 1d       	adc	r26, r1
    244a:	b1 1d       	adc	r27, r1
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    244c:	3f bf       	out	0x3f, r19	; 63
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    244e:	ba 2f       	mov	r27, r26
    2450:	a9 2f       	mov	r26, r25
    2452:	98 2f       	mov	r25, r24
    2454:	88 27       	eor	r24, r24
    2456:	bc 01       	movw	r22, r24
    2458:	cd 01       	movw	r24, r26
    245a:	62 0f       	add	r22, r18
    245c:	71 1d       	adc	r23, r1
    245e:	81 1d       	adc	r24, r1
    2460:	91 1d       	adc	r25, r1
    2462:	42 e0       	ldi	r20, 0x02	; 2
    2464:	66 0f       	add	r22, r22
    2466:	77 1f       	adc	r23, r23
    2468:	88 1f       	adc	r24, r24
    246a:	99 1f       	adc	r25, r25
    246c:	4a 95       	dec	r20
    246e:	d1 f7       	brne	.-12     	; 0x2464 <micros+0x3c>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    2470:	08 95       	ret

00002472 <delay>:
delay():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    2472:	8f 92       	push	r8
    2474:	9f 92       	push	r9
    2476:	af 92       	push	r10
    2478:	bf 92       	push	r11
    247a:	cf 92       	push	r12
    247c:	df 92       	push	r13
    247e:	ef 92       	push	r14
    2480:	ff 92       	push	r15
    2482:	6b 01       	movw	r12, r22
    2484:	7c 01       	movw	r14, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    2486:	0e 94 14 12 	call	0x2428	; 0x2428 <micros>
    248a:	4b 01       	movw	r8, r22
    248c:	5c 01       	movw	r10, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    248e:	c1 14       	cp	r12, r1
    2490:	d1 04       	cpc	r13, r1
    2492:	e1 04       	cpc	r14, r1
    2494:	f1 04       	cpc	r15, r1
    2496:	e9 f0       	breq	.+58     	; 0x24d2 <delay+0x60>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    2498:	0e 94 c9 11 	call	0x2392	; 0x2392 <yield>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    249c:	0e 94 14 12 	call	0x2428	; 0x2428 <micros>
    24a0:	68 19       	sub	r22, r8
    24a2:	79 09       	sbc	r23, r9
    24a4:	8a 09       	sbc	r24, r10
    24a6:	9b 09       	sbc	r25, r11
    24a8:	68 3e       	cpi	r22, 0xE8	; 232
    24aa:	73 40       	sbci	r23, 0x03	; 3
    24ac:	81 05       	cpc	r24, r1
    24ae:	91 05       	cpc	r25, r1
    24b0:	70 f3       	brcs	.-36     	; 0x248e <delay+0x1c>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    24b2:	21 e0       	ldi	r18, 0x01	; 1
    24b4:	c2 1a       	sub	r12, r18
    24b6:	d1 08       	sbc	r13, r1
    24b8:	e1 08       	sbc	r14, r1
    24ba:	f1 08       	sbc	r15, r1
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    24bc:	88 ee       	ldi	r24, 0xE8	; 232
    24be:	88 0e       	add	r8, r24
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	98 1e       	adc	r9, r24
    24c4:	a1 1c       	adc	r10, r1
    24c6:	b1 1c       	adc	r11, r1
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    24c8:	c1 14       	cp	r12, r1
    24ca:	d1 04       	cpc	r13, r1
    24cc:	e1 04       	cpc	r14, r1
    24ce:	f1 04       	cpc	r15, r1
    24d0:	29 f7       	brne	.-54     	; 0x249c <delay+0x2a>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    24d2:	ff 90       	pop	r15
    24d4:	ef 90       	pop	r14
    24d6:	df 90       	pop	r13
    24d8:	cf 90       	pop	r12
    24da:	bf 90       	pop	r11
    24dc:	af 90       	pop	r10
    24de:	9f 90       	pop	r9
    24e0:	8f 90       	pop	r8
    24e2:	08 95       	ret

000024e4 <delayMicroseconds>:
delayMicroseconds():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    24e4:	82 30       	cpi	r24, 0x02	; 2
    24e6:	91 05       	cpc	r25, r1
    24e8:	38 f0       	brcs	.+14     	; 0x24f8 <delayMicroseconds+0x14>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    24ea:	88 0f       	add	r24, r24
    24ec:	99 1f       	adc	r25, r25
    24ee:	88 0f       	add	r24, r24
    24f0:	99 1f       	adc	r25, r25
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    24f2:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    24f4:	01 97       	sbiw	r24, 0x01	; 1
    24f6:	f1 f7       	brne	.-4      	; 0x24f4 <delayMicroseconds+0x10>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    24f8:	08 95       	ret

000024fa <init>:
init():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    24fa:	78 94       	sei
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    24fc:	84 b5       	in	r24, 0x24	; 36
    24fe:	83 60       	ori	r24, 0x03	; 3
    2500:	84 bd       	out	0x24, r24	; 36
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    2502:	85 b5       	in	r24, 0x25	; 37
    2504:	83 60       	ori	r24, 0x03	; 3
    2506:	85 bd       	out	0x25, r24	; 37
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    2508:	ee e6       	ldi	r30, 0x6E	; 110
    250a:	f0 e0       	ldi	r31, 0x00	; 0
    250c:	80 81       	ld	r24, Z
    250e:	81 60       	ori	r24, 0x01	; 1
    2510:	80 83       	st	Z, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    2512:	e1 e8       	ldi	r30, 0x81	; 129
    2514:	f0 e0       	ldi	r31, 0x00	; 0
    2516:	82 e0       	ldi	r24, 0x02	; 2
    2518:	80 83       	st	Z, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    251a:	80 81       	ld	r24, Z
    251c:	81 60       	ori	r24, 0x01	; 1
    251e:	80 83       	st	Z, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    2520:	e0 e8       	ldi	r30, 0x80	; 128
    2522:	f0 e0       	ldi	r31, 0x00	; 0
    2524:	80 81       	ld	r24, Z
    2526:	81 60       	ori	r24, 0x01	; 1
    2528:	80 83       	st	Z, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    252a:	e1 eb       	ldi	r30, 0xB1	; 177
    252c:	f0 e0       	ldi	r31, 0x00	; 0
    252e:	80 81       	ld	r24, Z
    2530:	84 60       	ori	r24, 0x04	; 4
    2532:	80 83       	st	Z, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    2534:	e0 eb       	ldi	r30, 0xB0	; 176
    2536:	f0 e0       	ldi	r31, 0x00	; 0
    2538:	80 81       	ld	r24, Z
    253a:	81 60       	ori	r24, 0x01	; 1
    253c:	80 83       	st	Z, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    253e:	e1 e9       	ldi	r30, 0x91	; 145
    2540:	f0 e0       	ldi	r31, 0x00	; 0
    2542:	80 81       	ld	r24, Z
    2544:	83 60       	ori	r24, 0x03	; 3
    2546:	80 83       	st	Z, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    2548:	e0 e9       	ldi	r30, 0x90	; 144
    254a:	f0 e0       	ldi	r31, 0x00	; 0
    254c:	80 81       	ld	r24, Z
    254e:	81 60       	ori	r24, 0x01	; 1
    2550:	80 83       	st	Z, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    2552:	87 e8       	ldi	r24, 0x87	; 135
    2554:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    2558:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    255c:	08 95       	ret

0000255e <turnOffPWM>:
turnOffPWM():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    255e:	82 50       	subi	r24, 0x02	; 2
    2560:	8a 30       	cpi	r24, 0x0A	; 10
    2562:	88 f5       	brcc	.+98     	; 0x25c6 <turnOffPWM+0x68>
    2564:	e8 2f       	mov	r30, r24
    2566:	f0 e0       	ldi	r31, 0x00	; 0
    2568:	e8 54       	subi	r30, 0x48	; 72
    256a:	fd 4e       	sbci	r31, 0xED	; 237
    256c:	0c 94 e4 19 	jmp	0x33c8	; 0x33c8 <__tablejump2__>
    2570:	e0 12       	cpse	r14, r16
    2572:	e4 12       	cpse	r14, r20
    2574:	c2 12       	cpse	r12, r18
    2576:	c8 12       	cpse	r12, r24
    2578:	e3 12       	cpse	r14, r19
    257a:	e3 12       	cpse	r14, r19
    257c:	cc 12       	cpse	r12, r28
    257e:	d2 12       	cpse	r13, r18
    2580:	d6 12       	cpse	r13, r22
    2582:	dc 12       	cpse	r13, r28
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    2584:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2588:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    258a:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    258e:	08 95       	ret
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2590:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2594:	8f 7d       	andi	r24, 0xDF	; 223
    2596:	f9 cf       	rjmp	.-14     	; 0x258a <turnOffPWM+0x2c>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    2598:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    259c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    259e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    25a2:	08 95       	ret
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    25a4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    25a8:	8f 7d       	andi	r24, 0xDF	; 223
    25aa:	f9 cf       	rjmp	.-14     	; 0x259e <turnOffPWM+0x40>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    25ac:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    25b0:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    25b2:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    25b6:	08 95       	ret
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    25b8:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    25bc:	8f 7d       	andi	r24, 0xDF	; 223
    25be:	f9 cf       	rjmp	.-14     	; 0x25b2 <turnOffPWM+0x54>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    25c0:	84 b5       	in	r24, 0x24	; 36
    25c2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    25c4:	84 bd       	out	0x24, r24	; 36
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    25c6:	08 95       	ret
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    25c8:	84 b5       	in	r24, 0x24	; 36
    25ca:	8f 7d       	andi	r24, 0xDF	; 223
    25cc:	fb cf       	rjmp	.-10     	; 0x25c4 <turnOffPWM+0x66>

000025ce <pinMode>:
pinMode():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    25d2:	90 e0       	ldi	r25, 0x00	; 0
    25d4:	fc 01       	movw	r30, r24
    25d6:	ea 55       	subi	r30, 0x5A	; 90
    25d8:	fe 4f       	sbci	r31, 0xFE	; 254
    25da:	24 91       	lpm	r18, Z
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    25dc:	8a 53       	subi	r24, 0x3A	; 58
    25de:	9e 4f       	sbci	r25, 0xFE	; 254
    25e0:	fc 01       	movw	r30, r24
    25e2:	84 91       	lpm	r24, Z
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    25e4:	88 23       	and	r24, r24
    25e6:	c9 f0       	breq	.+50     	; 0x261a <pinMode+0x4c>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    25e8:	90 e0       	ldi	r25, 0x00	; 0
    25ea:	88 0f       	add	r24, r24
    25ec:	99 1f       	adc	r25, r25
    25ee:	fc 01       	movw	r30, r24
    25f0:	e6 50       	subi	r30, 0x06	; 6
    25f2:	fe 4f       	sbci	r31, 0xFE	; 254
    25f4:	a5 91       	lpm	r26, Z+
    25f6:	b4 91       	lpm	r27, Z
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    25f8:	fc 01       	movw	r30, r24
    25fa:	e0 51       	subi	r30, 0x10	; 16
    25fc:	fe 4f       	sbci	r31, 0xFE	; 254
    25fe:	c5 91       	lpm	r28, Z+
    2600:	d4 91       	lpm	r29, Z
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    2602:	61 11       	cpse	r22, r1
    2604:	0d c0       	rjmp	.+26     	; 0x2620 <pinMode+0x52>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    2606:	9f b7       	in	r25, 0x3f	; 63
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    2608:	f8 94       	cli
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    260a:	8c 91       	ld	r24, X
    260c:	20 95       	com	r18
    260e:	82 23       	and	r24, r18
    2610:	8c 93       	st	X, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    2612:	88 81       	ld	r24, Y
    2614:	28 23       	and	r18, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    2616:	28 83       	st	Y, r18
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    2618:	9f bf       	out	0x3f, r25	; 63
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	08 95       	ret
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    2620:	62 30       	cpi	r22, 0x02	; 2
    2622:	51 f4       	brne	.+20     	; 0x2638 <pinMode+0x6a>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    2624:	9f b7       	in	r25, 0x3f	; 63
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    2626:	f8 94       	cli
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    2628:	3c 91       	ld	r19, X
    262a:	82 2f       	mov	r24, r18
    262c:	80 95       	com	r24
    262e:	83 23       	and	r24, r19
    2630:	8c 93       	st	X, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    2632:	e8 81       	ld	r30, Y
    2634:	2e 2b       	or	r18, r30
    2636:	ef cf       	rjmp	.-34     	; 0x2616 <pinMode+0x48>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    2638:	8f b7       	in	r24, 0x3f	; 63
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    263a:	f8 94       	cli
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    263c:	ec 91       	ld	r30, X
    263e:	2e 2b       	or	r18, r30
    2640:	2c 93       	st	X, r18
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    2642:	8f bf       	out	0x3f, r24	; 63
    2644:	ea cf       	rjmp	.-44     	; 0x261a <pinMode+0x4c>

00002646 <digitalWrite>:
digitalWrite():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2646:	1f 93       	push	r17
    2648:	cf 93       	push	r28
    264a:	df 93       	push	r29
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    264c:	28 2f       	mov	r18, r24
    264e:	30 e0       	ldi	r19, 0x00	; 0
    2650:	f9 01       	movw	r30, r18
    2652:	ea 57       	subi	r30, 0x7A	; 122
    2654:	fe 4f       	sbci	r31, 0xFE	; 254
    2656:	84 91       	lpm	r24, Z
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    2658:	f9 01       	movw	r30, r18
    265a:	ea 55       	subi	r30, 0x5A	; 90
    265c:	fe 4f       	sbci	r31, 0xFE	; 254
    265e:	d4 91       	lpm	r29, Z
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    2660:	f9 01       	movw	r30, r18
    2662:	ea 53       	subi	r30, 0x3A	; 58
    2664:	fe 4f       	sbci	r31, 0xFE	; 254
    2666:	c4 91       	lpm	r28, Z
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    2668:	cc 23       	and	r28, r28
    266a:	a9 f0       	breq	.+42     	; 0x2696 <digitalWrite+0x50>
    266c:	16 2f       	mov	r17, r22
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    266e:	81 11       	cpse	r24, r1
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    2670:	0e 94 af 12 	call	0x255e	; 0x255e <turnOffPWM>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    2674:	ec 2f       	mov	r30, r28
    2676:	f0 e0       	ldi	r31, 0x00	; 0
    2678:	ee 0f       	add	r30, r30
    267a:	ff 1f       	adc	r31, r31
    267c:	e0 51       	subi	r30, 0x10	; 16
    267e:	fe 4f       	sbci	r31, 0xFE	; 254
    2680:	a5 91       	lpm	r26, Z+
    2682:	b4 91       	lpm	r27, Z
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    2684:	8f b7       	in	r24, 0x3f	; 63
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    2686:	f8 94       	cli
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    2688:	ec 91       	ld	r30, X
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    268a:	11 11       	cpse	r17, r1
    268c:	08 c0       	rjmp	.+16     	; 0x269e <digitalWrite+0x58>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    268e:	d0 95       	com	r29
    2690:	de 23       	and	r29, r30
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    2692:	dc 93       	st	X, r29
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    2694:	8f bf       	out	0x3f, r24	; 63
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    2696:	df 91       	pop	r29
    2698:	cf 91       	pop	r28
    269a:	1f 91       	pop	r17
    269c:	08 95       	ret
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    269e:	de 2b       	or	r29, r30
    26a0:	f8 cf       	rjmp	.-16     	; 0x2692 <digitalWrite+0x4c>

000026a2 <digitalRead>:
digitalRead():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    26a2:	cf 93       	push	r28
    26a4:	df 93       	push	r29
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    26a6:	28 2f       	mov	r18, r24
    26a8:	30 e0       	ldi	r19, 0x00	; 0
    26aa:	f9 01       	movw	r30, r18
    26ac:	ea 57       	subi	r30, 0x7A	; 122
    26ae:	fe 4f       	sbci	r31, 0xFE	; 254
    26b0:	84 91       	lpm	r24, Z
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    26b2:	f9 01       	movw	r30, r18
    26b4:	ea 55       	subi	r30, 0x5A	; 90
    26b6:	fe 4f       	sbci	r31, 0xFE	; 254
    26b8:	d4 91       	lpm	r29, Z
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    26ba:	f9 01       	movw	r30, r18
    26bc:	ea 53       	subi	r30, 0x3A	; 58
    26be:	fe 4f       	sbci	r31, 0xFE	; 254
    26c0:	c4 91       	lpm	r28, Z
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    26c2:	cc 23       	and	r28, r28
    26c4:	a1 f0       	breq	.+40     	; 0x26ee <digitalRead+0x4c>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    26c6:	81 11       	cpse	r24, r1
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    26c8:	0e 94 af 12 	call	0x255e	; 0x255e <turnOffPWM>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    26cc:	ec 2f       	mov	r30, r28
    26ce:	f0 e0       	ldi	r31, 0x00	; 0
    26d0:	ee 0f       	add	r30, r30
    26d2:	ff 1f       	adc	r31, r31
    26d4:	ea 51       	subi	r30, 0x1A	; 26
    26d6:	fe 4f       	sbci	r31, 0xFE	; 254
    26d8:	a5 91       	lpm	r26, Z+
    26da:	b4 91       	lpm	r27, Z
    26dc:	ec 91       	ld	r30, X
    26de:	ed 23       	and	r30, r29
    26e0:	81 e0       	ldi	r24, 0x01	; 1
    26e2:	90 e0       	ldi	r25, 0x00	; 0
    26e4:	09 f4       	brne	.+2      	; 0x26e8 <digitalRead+0x46>
    26e6:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    26e8:	df 91       	pop	r29
    26ea:	cf 91       	pop	r28
    26ec:	08 95       	ret
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    26ee:	80 e0       	ldi	r24, 0x00	; 0
    26f0:	90 e0       	ldi	r25, 0x00	; 0
    26f2:	fa cf       	rjmp	.-12     	; 0x26e8 <digitalRead+0x46>

000026f4 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    26f4:	fc 01       	movw	r30, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    26f6:	91 8d       	ldd	r25, Z+25	; 0x19
    26f8:	22 8d       	ldd	r18, Z+26	; 0x1a
    26fa:	89 2f       	mov	r24, r25
    26fc:	90 e0       	ldi	r25, 0x00	; 0
    26fe:	80 5c       	subi	r24, 0xC0	; 192
    2700:	9f 4f       	sbci	r25, 0xFF	; 255
    2702:	82 1b       	sub	r24, r18
    2704:	91 09       	sbc	r25, r1
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    2706:	8f 73       	andi	r24, 0x3F	; 63
    2708:	99 27       	eor	r25, r25
    270a:	08 95       	ret

0000270c <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    270c:	fc 01       	movw	r30, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    270e:	91 8d       	ldd	r25, Z+25	; 0x19
    2710:	82 8d       	ldd	r24, Z+26	; 0x1a
    2712:	98 17       	cp	r25, r24
    2714:	31 f0       	breq	.+12     	; 0x2722 <HardwareSerial::peek()+0x16>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2716:	82 8d       	ldd	r24, Z+26	; 0x1a
    2718:	e8 0f       	add	r30, r24
    271a:	f1 1d       	adc	r31, r1
    271c:	85 8d       	ldd	r24, Z+29	; 0x1d
    271e:	90 e0       	ldi	r25, 0x00	; 0
    2720:	08 95       	ret
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2722:	8f ef       	ldi	r24, 0xFF	; 255
    2724:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2726:	08 95       	ret

00002728 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    2728:	fc 01       	movw	r30, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    272a:	91 8d       	ldd	r25, Z+25	; 0x19
    272c:	82 8d       	ldd	r24, Z+26	; 0x1a
    272e:	98 17       	cp	r25, r24
    2730:	61 f0       	breq	.+24     	; 0x274a <HardwareSerial::read()+0x22>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2732:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2734:	ae 0f       	add	r26, r30
    2736:	bf 2f       	mov	r27, r31
    2738:	b1 1d       	adc	r27, r1
    273a:	5d 96       	adiw	r26, 0x1d	; 29
    273c:	8c 91       	ld	r24, X
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    273e:	92 8d       	ldd	r25, Z+26	; 0x1a
    2740:	9f 5f       	subi	r25, 0xFF	; 255
    2742:	9f 73       	andi	r25, 0x3F	; 63
    2744:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	08 95       	ret
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    274a:	8f ef       	ldi	r24, 0xFF	; 255
    274c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    274e:	08 95       	ret

00002750 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    2750:	fc 01       	movw	r30, r24
    2752:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    2754:	44 8d       	ldd	r20, Z+28	; 0x1c
    2756:	25 2f       	mov	r18, r21
    2758:	30 e0       	ldi	r19, 0x00	; 0
    275a:	84 2f       	mov	r24, r20
    275c:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    275e:	82 1b       	sub	r24, r18
    2760:	93 0b       	sbc	r25, r19
    2762:	54 17       	cp	r21, r20
    2764:	10 f0       	brcs	.+4      	; 0x276a <HardwareSerial::availableForWrite()+0x1a>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    2766:	cf 96       	adiw	r24, 0x3f	; 63
    2768:	08 95       	ret
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    276a:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    276c:	08 95       	ret

0000276e <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    276e:	82 e1       	ldi	r24, 0x12	; 18
    2770:	95 e1       	ldi	r25, 0x15	; 21
    2772:	89 2b       	or	r24, r25
    2774:	49 f0       	breq	.+18     	; 0x2788 <serialEventRun()+0x1a>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    2776:	80 e0       	ldi	r24, 0x00	; 0
    2778:	90 e0       	ldi	r25, 0x00	; 0
    277a:	89 2b       	or	r24, r25
    277c:	29 f0       	breq	.+10     	; 0x2788 <serialEventRun()+0x1a>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    277e:	0e 94 12 15 	call	0x2a24	; 0x2a24 <Serial0_available()>
    2782:	81 11       	cpse	r24, r1
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    2784:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    2788:	80 e0       	ldi	r24, 0x00	; 0
    278a:	90 e0       	ldi	r25, 0x00	; 0
    278c:	89 2b       	or	r24, r25
    278e:	49 f0       	breq	.+18     	; 0x27a2 <serialEventRun()+0x34>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    2790:	80 e0       	ldi	r24, 0x00	; 0
    2792:	90 e0       	ldi	r25, 0x00	; 0
    2794:	89 2b       	or	r24, r25
    2796:	29 f0       	breq	.+10     	; 0x27a2 <serialEventRun()+0x34>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    2798:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    279c:	81 11       	cpse	r24, r1
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    279e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    27a2:	08 95       	ret

000027a4 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    27a4:	fc 01       	movw	r30, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    27a6:	a4 8d       	ldd	r26, Z+28	; 0x1c
    27a8:	a8 0f       	add	r26, r24
    27aa:	b9 2f       	mov	r27, r25
    27ac:	b1 1d       	adc	r27, r1
    27ae:	a3 5a       	subi	r26, 0xA3	; 163
    27b0:	bf 4f       	sbci	r27, 0xFF	; 255
    27b2:	2c 91       	ld	r18, X
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    27b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    27b6:	90 e0       	ldi	r25, 0x00	; 0
    27b8:	01 96       	adiw	r24, 0x01	; 1
    27ba:	8f 73       	andi	r24, 0x3F	; 63
    27bc:	99 27       	eor	r25, r25
    27be:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    27c0:	a6 89       	ldd	r26, Z+22	; 0x16
    27c2:	b7 89       	ldd	r27, Z+23	; 0x17
    27c4:	2c 93       	st	X, r18
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    27c6:	a0 89       	ldd	r26, Z+16	; 0x10
    27c8:	b1 89       	ldd	r27, Z+17	; 0x11
    27ca:	8c 91       	ld	r24, X
    27cc:	80 64       	ori	r24, 0x40	; 64
    27ce:	8c 93       	st	X, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    27d0:	93 8d       	ldd	r25, Z+27	; 0x1b
    27d2:	84 8d       	ldd	r24, Z+28	; 0x1c
    27d4:	98 13       	cpse	r25, r24
    27d6:	06 c0       	rjmp	.+12     	; 0x27e4 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    27d8:	02 88       	ldd	r0, Z+18	; 0x12
    27da:	f3 89       	ldd	r31, Z+19	; 0x13
    27dc:	e0 2d       	mov	r30, r0
    27de:	80 81       	ld	r24, Z
    27e0:	8f 7d       	andi	r24, 0xDF	; 223
    27e2:	80 83       	st	Z, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    27e4:	08 95       	ret

000027e6 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    27e6:	cf 93       	push	r28
    27e8:	df 93       	push	r29
    27ea:	ec 01       	movw	r28, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    27ec:	88 8d       	ldd	r24, Y+24	; 0x18
    27ee:	88 23       	and	r24, r24
    27f0:	b9 f0       	breq	.+46     	; 0x2820 <HardwareSerial::flush()+0x3a>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    27f2:	aa 89       	ldd	r26, Y+18	; 0x12
    27f4:	bb 89       	ldd	r27, Y+19	; 0x13
    27f6:	e8 89       	ldd	r30, Y+16	; 0x10
    27f8:	f9 89       	ldd	r31, Y+17	; 0x11
    27fa:	8c 91       	ld	r24, X
    27fc:	85 fd       	sbrc	r24, 5
    27fe:	03 c0       	rjmp	.+6      	; 0x2806 <HardwareSerial::flush()+0x20>
    2800:	80 81       	ld	r24, Z
    2802:	86 fd       	sbrc	r24, 6
    2804:	0d c0       	rjmp	.+26     	; 0x2820 <HardwareSerial::flush()+0x3a>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2806:	0f b6       	in	r0, 0x3f	; 63
    2808:	07 fc       	sbrc	r0, 7
    280a:	f7 cf       	rjmp	.-18     	; 0x27fa <HardwareSerial::flush()+0x14>
    280c:	8c 91       	ld	r24, X
    280e:	85 ff       	sbrs	r24, 5
    2810:	f2 cf       	rjmp	.-28     	; 0x27f6 <HardwareSerial::flush()+0x10>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    2812:	80 81       	ld	r24, Z
    2814:	85 ff       	sbrs	r24, 5
    2816:	ed cf       	rjmp	.-38     	; 0x27f2 <HardwareSerial::flush()+0xc>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    2818:	ce 01       	movw	r24, r28
    281a:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <HardwareSerial::_tx_udr_empty_irq()>
    281e:	e9 cf       	rjmp	.-46     	; 0x27f2 <HardwareSerial::flush()+0xc>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2820:	df 91       	pop	r29
    2822:	cf 91       	pop	r28
    2824:	08 95       	ret

00002826 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    2826:	ef 92       	push	r14
    2828:	ff 92       	push	r15
    282a:	0f 93       	push	r16
    282c:	1f 93       	push	r17
    282e:	cf 93       	push	r28
    2830:	df 93       	push	r29
    2832:	ec 01       	movw	r28, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2838:	9b 8d       	ldd	r25, Y+27	; 0x1b
    283a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    283c:	98 13       	cpse	r25, r24
    283e:	16 c0       	rjmp	.+44     	; 0x286c <HardwareSerial::write(unsigned char)+0x46>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    2840:	e8 89       	ldd	r30, Y+16	; 0x10
    2842:	f9 89       	ldd	r31, Y+17	; 0x11
    2844:	80 81       	ld	r24, Z
    2846:	85 ff       	sbrs	r24, 5
    2848:	11 c0       	rjmp	.+34     	; 0x286c <HardwareSerial::write(unsigned char)+0x46>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    284a:	ee 89       	ldd	r30, Y+22	; 0x16
    284c:	ff 89       	ldd	r31, Y+23	; 0x17
    284e:	60 83       	st	Z, r22
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    2850:	e8 89       	ldd	r30, Y+16	; 0x10
    2852:	f9 89       	ldd	r31, Y+17	; 0x11
    2854:	80 81       	ld	r24, Z
    2856:	80 64       	ori	r24, 0x40	; 64
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    2858:	80 83       	st	Z, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    285a:	81 e0       	ldi	r24, 0x01	; 1
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	df 91       	pop	r29
    2860:	cf 91       	pop	r28
    2862:	1f 91       	pop	r17
    2864:	0f 91       	pop	r16
    2866:	ff 90       	pop	r15
    2868:	ef 90       	pop	r14
    286a:	08 95       	ret
    286c:	f6 2e       	mov	r15, r22
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    286e:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2870:	10 e0       	ldi	r17, 0x00	; 0
    2872:	0f 5f       	subi	r16, 0xFF	; 255
    2874:	1f 4f       	sbci	r17, 0xFF	; 255
    2876:	0f 73       	andi	r16, 0x3F	; 63
    2878:	11 27       	eor	r17, r17
    287a:	e0 2e       	mov	r14, r16
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    287c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    287e:	8e 11       	cpse	r24, r14
    2880:	0c c0       	rjmp	.+24     	; 0x289a <HardwareSerial::write(unsigned char)+0x74>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    2882:	0f b6       	in	r0, 0x3f	; 63
    2884:	07 fc       	sbrc	r0, 7
    2886:	fa cf       	rjmp	.-12     	; 0x287c <HardwareSerial::write(unsigned char)+0x56>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2888:	e8 89       	ldd	r30, Y+16	; 0x10
    288a:	f9 89       	ldd	r31, Y+17	; 0x11
    288c:	80 81       	ld	r24, Z
    288e:	85 ff       	sbrs	r24, 5
    2890:	f5 cf       	rjmp	.-22     	; 0x287c <HardwareSerial::write(unsigned char)+0x56>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    2892:	ce 01       	movw	r24, r28
    2894:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <HardwareSerial::_tx_udr_empty_irq()>
    2898:	f1 cf       	rjmp	.-30     	; 0x287c <HardwareSerial::write(unsigned char)+0x56>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    289a:	eb 8d       	ldd	r30, Y+27	; 0x1b
    289c:	ec 0f       	add	r30, r28
    289e:	fd 2f       	mov	r31, r29
    28a0:	f1 1d       	adc	r31, r1
    28a2:	e3 5a       	subi	r30, 0xA3	; 163
    28a4:	ff 4f       	sbci	r31, 0xFF	; 255
    28a6:	f0 82       	st	Z, r15
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    28a8:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    28aa:	ea 89       	ldd	r30, Y+18	; 0x12
    28ac:	fb 89       	ldd	r31, Y+19	; 0x13
    28ae:	80 81       	ld	r24, Z
    28b0:	80 62       	ori	r24, 0x20	; 32
    28b2:	d2 cf       	rjmp	.-92     	; 0x2858 <HardwareSerial::write(unsigned char)+0x32>

000028b4 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    28b4:	cf 92       	push	r12
    28b6:	df 92       	push	r13
    28b8:	ef 92       	push	r14
    28ba:	ff 92       	push	r15
    28bc:	1f 93       	push	r17
    28be:	cf 93       	push	r28
    28c0:	df 93       	push	r29
    28c2:	ec 01       	movw	r28, r24
    28c4:	6a 01       	movw	r12, r20
    28c6:	7b 01       	movw	r14, r22
    28c8:	12 2f       	mov	r17, r18
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    28ca:	e8 89       	ldd	r30, Y+16	; 0x10
    28cc:	f9 89       	ldd	r31, Y+17	; 0x11
    28ce:	82 e0       	ldi	r24, 0x02	; 2
    28d0:	80 83       	st	Z, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    28d2:	c1 14       	cp	r12, r1
    28d4:	81 ee       	ldi	r24, 0xE1	; 225
    28d6:	d8 06       	cpc	r13, r24
    28d8:	e1 04       	cpc	r14, r1
    28da:	f1 04       	cpc	r15, r1
    28dc:	a1 f0       	breq	.+40     	; 0x2906 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    28de:	60 e0       	ldi	r22, 0x00	; 0
    28e0:	79 e0       	ldi	r23, 0x09	; 9
    28e2:	8d e3       	ldi	r24, 0x3D	; 61
    28e4:	90 e0       	ldi	r25, 0x00	; 0
    28e6:	a7 01       	movw	r20, r14
    28e8:	96 01       	movw	r18, r12
    28ea:	0e 94 a3 19 	call	0x3346	; 0x3346 <__udivmodsi4>
    28ee:	21 50       	subi	r18, 0x01	; 1
    28f0:	31 09       	sbc	r19, r1
    28f2:	41 09       	sbc	r20, r1
    28f4:	51 09       	sbc	r21, r1
    28f6:	56 95       	lsr	r21
    28f8:	47 95       	ror	r20
    28fa:	37 95       	ror	r19
    28fc:	27 95       	ror	r18
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    28fe:	21 15       	cp	r18, r1
    2900:	80 e1       	ldi	r24, 0x10	; 16
    2902:	38 07       	cpc	r19, r24
    2904:	98 f0       	brcs	.+38     	; 0x292c <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    2906:	e8 89       	ldd	r30, Y+16	; 0x10
    2908:	f9 89       	ldd	r31, Y+17	; 0x11
    290a:	10 82       	st	Z, r1
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    290c:	60 e8       	ldi	r22, 0x80	; 128
    290e:	74 e8       	ldi	r23, 0x84	; 132
    2910:	8e e1       	ldi	r24, 0x1E	; 30
    2912:	90 e0       	ldi	r25, 0x00	; 0
    2914:	a7 01       	movw	r20, r14
    2916:	96 01       	movw	r18, r12
    2918:	0e 94 a3 19 	call	0x3346	; 0x3346 <__udivmodsi4>
    291c:	21 50       	subi	r18, 0x01	; 1
    291e:	31 09       	sbc	r19, r1
    2920:	41 09       	sbc	r20, r1
    2922:	51 09       	sbc	r21, r1
    2924:	56 95       	lsr	r21
    2926:	47 95       	ror	r20
    2928:	37 95       	ror	r19
    292a:	27 95       	ror	r18
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    292c:	ec 85       	ldd	r30, Y+12	; 0x0c
    292e:	fd 85       	ldd	r31, Y+13	; 0x0d
    2930:	30 83       	st	Z, r19
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    2932:	ee 85       	ldd	r30, Y+14	; 0x0e
    2934:	ff 85       	ldd	r31, Y+15	; 0x0f
    2936:	20 83       	st	Z, r18
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    2938:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    293a:	ec 89       	ldd	r30, Y+20	; 0x14
    293c:	fd 89       	ldd	r31, Y+21	; 0x15
    293e:	10 83       	st	Z, r17
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    2940:	ea 89       	ldd	r30, Y+18	; 0x12
    2942:	fb 89       	ldd	r31, Y+19	; 0x13
    2944:	80 81       	ld	r24, Z
    2946:	88 69       	ori	r24, 0x98	; 152
    2948:	80 83       	st	Z, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    294a:	ea 89       	ldd	r30, Y+18	; 0x12
    294c:	fb 89       	ldd	r31, Y+19	; 0x13
    294e:	80 81       	ld	r24, Z
    2950:	8f 7d       	andi	r24, 0xDF	; 223
    2952:	80 83       	st	Z, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    2954:	df 91       	pop	r29
    2956:	cf 91       	pop	r28
    2958:	1f 91       	pop	r17
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	df 90       	pop	r13
    2960:	cf 90       	pop	r12
    2962:	08 95       	ret

00002964 <__vector_20>:
__vector_20():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2964:	1f 92       	push	r1
    2966:	0f 92       	push	r0
    2968:	0f b6       	in	r0, 0x3f	; 63
    296a:	0f 92       	push	r0
    296c:	11 24       	eor	r1, r1
    296e:	0b b6       	in	r0, 0x3b	; 59
    2970:	0f 92       	push	r0
    2972:	2f 93       	push	r18
    2974:	8f 93       	push	r24
    2976:	9f 93       	push	r25
    2978:	ef 93       	push	r30
    297a:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    297c:	e0 91 10 05 	lds	r30, 0x0510	; 0x800510 <Serial+0x10>
    2980:	f0 91 11 05 	lds	r31, 0x0511	; 0x800511 <Serial+0x11>
    2984:	80 81       	ld	r24, Z
    2986:	e0 91 16 05 	lds	r30, 0x0516	; 0x800516 <Serial+0x16>
    298a:	f0 91 17 05 	lds	r31, 0x0517	; 0x800517 <Serial+0x17>
    298e:	82 fd       	sbrc	r24, 2
    2990:	1d c0       	rjmp	.+58     	; 0x29cc <__vector_20+0x68>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2992:	90 81       	ld	r25, Z
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2994:	80 91 19 05 	lds	r24, 0x0519	; 0x800519 <Serial+0x19>
    2998:	8f 5f       	subi	r24, 0xFF	; 255
    299a:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    299c:	20 91 1a 05 	lds	r18, 0x051A	; 0x80051a <Serial+0x1a>
    29a0:	82 17       	cp	r24, r18
    29a2:	41 f0       	breq	.+16     	; 0x29b4 <__vector_20+0x50>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    29a4:	e0 91 19 05 	lds	r30, 0x0519	; 0x800519 <Serial+0x19>
    29a8:	f0 e0       	ldi	r31, 0x00	; 0
    29aa:	e0 50       	subi	r30, 0x00	; 0
    29ac:	fb 4f       	sbci	r31, 0xFB	; 251
    29ae:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    29b0:	80 93 19 05 	sts	0x0519, r24	; 0x800519 <Serial+0x19>
__vector_20():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    29b4:	ff 91       	pop	r31
    29b6:	ef 91       	pop	r30
    29b8:	9f 91       	pop	r25
    29ba:	8f 91       	pop	r24
    29bc:	2f 91       	pop	r18
    29be:	0f 90       	pop	r0
    29c0:	0b be       	out	0x3b, r0	; 59
    29c2:	0f 90       	pop	r0
    29c4:	0f be       	out	0x3f, r0	; 63
    29c6:	0f 90       	pop	r0
    29c8:	1f 90       	pop	r1
    29ca:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    29cc:	80 81       	ld	r24, Z
__vector_20():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    29ce:	f2 cf       	rjmp	.-28     	; 0x29b4 <__vector_20+0x50>

000029d0 <__vector_21>:
__vector_21():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    29d0:	1f 92       	push	r1
    29d2:	0f 92       	push	r0
    29d4:	0f b6       	in	r0, 0x3f	; 63
    29d6:	0f 92       	push	r0
    29d8:	11 24       	eor	r1, r1
    29da:	0b b6       	in	r0, 0x3b	; 59
    29dc:	0f 92       	push	r0
    29de:	2f 93       	push	r18
    29e0:	3f 93       	push	r19
    29e2:	4f 93       	push	r20
    29e4:	5f 93       	push	r21
    29e6:	6f 93       	push	r22
    29e8:	7f 93       	push	r23
    29ea:	8f 93       	push	r24
    29ec:	9f 93       	push	r25
    29ee:	af 93       	push	r26
    29f0:	bf 93       	push	r27
    29f2:	ef 93       	push	r30
    29f4:	ff 93       	push	r31
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    29f6:	80 e0       	ldi	r24, 0x00	; 0
    29f8:	95 e0       	ldi	r25, 0x05	; 5
    29fa:	0e 94 d2 13 	call	0x27a4	; 0x27a4 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    29fe:	ff 91       	pop	r31
    2a00:	ef 91       	pop	r30
    2a02:	bf 91       	pop	r27
    2a04:	af 91       	pop	r26
    2a06:	9f 91       	pop	r25
    2a08:	8f 91       	pop	r24
    2a0a:	7f 91       	pop	r23
    2a0c:	6f 91       	pop	r22
    2a0e:	5f 91       	pop	r21
    2a10:	4f 91       	pop	r20
    2a12:	3f 91       	pop	r19
    2a14:	2f 91       	pop	r18
    2a16:	0f 90       	pop	r0
    2a18:	0b be       	out	0x3b, r0	; 59
    2a1a:	0f 90       	pop	r0
    2a1c:	0f be       	out	0x3f, r0	; 63
    2a1e:	0f 90       	pop	r0
    2a20:	1f 90       	pop	r1
    2a22:	18 95       	reti

00002a24 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2a24:	80 e0       	ldi	r24, 0x00	; 0
    2a26:	95 e0       	ldi	r25, 0x05	; 5
    2a28:	0e 94 7a 13 	call	0x26f4	; 0x26f4 <HardwareSerial::available()>
    2a2c:	21 e0       	ldi	r18, 0x01	; 1
    2a2e:	89 2b       	or	r24, r25
    2a30:	09 f4       	brne	.+2      	; 0x2a34 <Serial0_available()+0x10>
    2a32:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    2a34:	82 2f       	mov	r24, r18
    2a36:	08 95       	ret

00002a38 <_GLOBAL__sub_I___vector_20>:
_ZN5PrintC4Ev():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    2a38:	e0 e0       	ldi	r30, 0x00	; 0
    2a3a:	f5 e0       	ldi	r31, 0x05	; 5
    2a3c:	13 82       	std	Z+3, r1	; 0x03
    2a3e:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
    2a40:	88 ee       	ldi	r24, 0xE8	; 232
    2a42:	93 e0       	ldi	r25, 0x03	; 3
    2a44:	a0 e0       	ldi	r26, 0x00	; 0
    2a46:	b0 e0       	ldi	r27, 0x00	; 0
    2a48:	84 83       	std	Z+4, r24	; 0x04
    2a4a:	95 83       	std	Z+5, r25	; 0x05
    2a4c:	a6 83       	std	Z+6, r26	; 0x06
    2a4e:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2a50:	88 e7       	ldi	r24, 0x78	; 120
    2a52:	93 e0       	ldi	r25, 0x03	; 3
    2a54:	91 83       	std	Z+1, r25	; 0x01
    2a56:	80 83       	st	Z, r24
    2a58:	85 ec       	ldi	r24, 0xC5	; 197
    2a5a:	90 e0       	ldi	r25, 0x00	; 0
    2a5c:	95 87       	std	Z+13, r25	; 0x0d
    2a5e:	84 87       	std	Z+12, r24	; 0x0c
    2a60:	84 ec       	ldi	r24, 0xC4	; 196
    2a62:	90 e0       	ldi	r25, 0x00	; 0
    2a64:	97 87       	std	Z+15, r25	; 0x0f
    2a66:	86 87       	std	Z+14, r24	; 0x0e
    2a68:	80 ec       	ldi	r24, 0xC0	; 192
    2a6a:	90 e0       	ldi	r25, 0x00	; 0
    2a6c:	91 8b       	std	Z+17, r25	; 0x11
    2a6e:	80 8b       	std	Z+16, r24	; 0x10
    2a70:	81 ec       	ldi	r24, 0xC1	; 193
    2a72:	90 e0       	ldi	r25, 0x00	; 0
    2a74:	93 8b       	std	Z+19, r25	; 0x13
    2a76:	82 8b       	std	Z+18, r24	; 0x12
    2a78:	82 ec       	ldi	r24, 0xC2	; 194
    2a7a:	90 e0       	ldi	r25, 0x00	; 0
    2a7c:	95 8b       	std	Z+21, r25	; 0x15
    2a7e:	84 8b       	std	Z+20, r24	; 0x14
    2a80:	86 ec       	ldi	r24, 0xC6	; 198
    2a82:	90 e0       	ldi	r25, 0x00	; 0
    2a84:	97 8b       	std	Z+23, r25	; 0x17
    2a86:	86 8b       	std	Z+22, r24	; 0x16
    2a88:	11 8e       	std	Z+25, r1	; 0x19
    2a8a:	12 8e       	std	Z+26, r1	; 0x1a
    2a8c:	13 8e       	std	Z+27, r1	; 0x1b
    2a8e:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_20():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    2a90:	08 95       	ret

00002a92 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
size_t Print::println(unsigned long num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2a92:	af 92       	push	r10
    2a94:	bf 92       	push	r11
    2a96:	cf 92       	push	r12
    2a98:	df 92       	push	r13
    2a9a:	ef 92       	push	r14
    2a9c:	ff 92       	push	r15
    2a9e:	0f 93       	push	r16
    2aa0:	1f 93       	push	r17
    2aa2:	cf 93       	push	r28
    2aa4:	df 93       	push	r29
    2aa6:	6c 01       	movw	r12, r24
    2aa8:	7b 01       	movw	r14, r22
    2aaa:	8b 01       	movw	r16, r22
    2aac:	04 0f       	add	r16, r20
    2aae:	15 1f       	adc	r17, r21
    2ab0:	eb 01       	movw	r28, r22
    2ab2:	5e 01       	movw	r10, r28
    2ab4:	ae 18       	sub	r10, r14
    2ab6:	bf 08       	sbc	r11, r15
    2ab8:	c0 17       	cp	r28, r16
    2aba:	d1 07       	cpc	r29, r17
    2abc:	59 f0       	breq	.+22     	; 0x2ad4 <Print::write(unsigned char const*, unsigned int)+0x42>
    2abe:	69 91       	ld	r22, Y+
    2ac0:	d6 01       	movw	r26, r12
    2ac2:	ed 91       	ld	r30, X+
    2ac4:	fc 91       	ld	r31, X
    2ac6:	01 90       	ld	r0, Z+
    2ac8:	f0 81       	ld	r31, Z
    2aca:	e0 2d       	mov	r30, r0
    2acc:	c6 01       	movw	r24, r12
    2ace:	09 95       	icall
    2ad0:	89 2b       	or	r24, r25
    2ad2:	79 f7       	brne	.-34     	; 0x2ab2 <Print::write(unsigned char const*, unsigned int)+0x20>
    2ad4:	c5 01       	movw	r24, r10
    2ad6:	df 91       	pop	r29
    2ad8:	cf 91       	pop	r28
    2ada:	1f 91       	pop	r17
    2adc:	0f 91       	pop	r16
    2ade:	ff 90       	pop	r15
    2ae0:	ef 90       	pop	r14
    2ae2:	df 90       	pop	r13
    2ae4:	cf 90       	pop	r12
    2ae6:	bf 90       	pop	r11
    2ae8:	af 90       	pop	r10
    2aea:	08 95       	ret

00002aec <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    2aec:	fb 01       	movw	r30, r22
    2aee:	01 90       	ld	r0, Z+
    2af0:	00 20       	and	r0, r0
    2af2:	e9 f7       	brne	.-6      	; 0x2aee <Print::write(char const*) [clone .part.2]+0x2>
    2af4:	31 97       	sbiw	r30, 0x01	; 1
    2af6:	af 01       	movw	r20, r30
    2af8:	46 1b       	sub	r20, r22
    2afa:	57 0b       	sbc	r21, r23
    2afc:	dc 01       	movw	r26, r24
    2afe:	ed 91       	ld	r30, X+
    2b00:	fc 91       	ld	r31, X
    2b02:	02 80       	ldd	r0, Z+2	; 0x02
    2b04:	f3 81       	ldd	r31, Z+3	; 0x03
    2b06:	e0 2d       	mov	r30, r0
    2b08:	09 94       	ijmp

00002b0a <Print::print(char const*)>:
    2b0a:	61 15       	cp	r22, r1
    2b0c:	71 05       	cpc	r23, r1
    2b0e:	11 f0       	breq	.+4      	; 0x2b14 <Print::print(char const*)+0xa>
    2b10:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    2b14:	90 e0       	ldi	r25, 0x00	; 0
    2b16:	80 e0       	ldi	r24, 0x00	; 0
    2b18:	08 95       	ret

00002b1a <Print::print(char)>:
_ZN5Print5printEc():
    2b1a:	dc 01       	movw	r26, r24
    2b1c:	ed 91       	ld	r30, X+
    2b1e:	fc 91       	ld	r31, X
    2b20:	01 90       	ld	r0, Z+
    2b22:	f0 81       	ld	r31, Z
    2b24:	e0 2d       	mov	r30, r0
    2b26:	09 94       	ijmp

00002b28 <Print::println()>:
_ZN5Print5writeEPKc():
    2b28:	66 e8       	ldi	r22, 0x86	; 134
    2b2a:	73 e0       	ldi	r23, 0x03	; 3
    2b2c:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <Print::write(char const*) [clone .part.2]>

00002b30 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    2b30:	0f 93       	push	r16
    2b32:	1f 93       	push	r17
    2b34:	cf 93       	push	r28
    2b36:	df 93       	push	r29
    2b38:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    2b3a:	d0 e0       	ldi	r29, 0x00	; 0
    2b3c:	c0 e0       	ldi	r28, 0x00	; 0
    2b3e:	61 15       	cp	r22, r1
    2b40:	71 05       	cpc	r23, r1
    2b42:	19 f0       	breq	.+6      	; 0x2b4a <Print::println(char const*)+0x1a>
    2b44:	0e 94 76 15 	call	0x2aec	; 0x2aec <Print::write(char const*) [clone .part.2]>
    2b48:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    2b4a:	c8 01       	movw	r24, r16
    2b4c:	0e 94 94 15 	call	0x2b28	; 0x2b28 <Print::println()>
    2b50:	8c 0f       	add	r24, r28
    2b52:	9d 1f       	adc	r25, r29
    2b54:	df 91       	pop	r29
    2b56:	cf 91       	pop	r28
    2b58:	1f 91       	pop	r17
    2b5a:	0f 91       	pop	r16
    2b5c:	08 95       	ret

00002b5e <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    2b5e:	8f 92       	push	r8
    2b60:	9f 92       	push	r9
    2b62:	af 92       	push	r10
    2b64:	bf 92       	push	r11
    2b66:	ef 92       	push	r14
    2b68:	ff 92       	push	r15
    2b6a:	0f 93       	push	r16
    2b6c:	1f 93       	push	r17
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	cd b7       	in	r28, 0x3d	; 61
    2b74:	de b7       	in	r29, 0x3e	; 62
    2b76:	a1 97       	sbiw	r28, 0x21	; 33
    2b78:	0f b6       	in	r0, 0x3f	; 63
    2b7a:	f8 94       	cli
    2b7c:	de bf       	out	0x3e, r29	; 62
    2b7e:	0f be       	out	0x3f, r0	; 63
    2b80:	cd bf       	out	0x3d, r28	; 61
    2b82:	7c 01       	movw	r14, r24
    2b84:	fa 01       	movw	r30, r20
    2b86:	cb 01       	movw	r24, r22
    2b88:	19 a2       	std	Y+33, r1	; 0x21
    2b8a:	22 30       	cpi	r18, 0x02	; 2
    2b8c:	08 f4       	brcc	.+2      	; 0x2b90 <Print::printNumber(unsigned long, unsigned char)+0x32>
    2b8e:	2a e0       	ldi	r18, 0x0A	; 10
    2b90:	8e 01       	movw	r16, r28
    2b92:	0f 5d       	subi	r16, 0xDF	; 223
    2b94:	1f 4f       	sbci	r17, 0xFF	; 255
    2b96:	82 2e       	mov	r8, r18
    2b98:	91 2c       	mov	r9, r1
    2b9a:	b1 2c       	mov	r11, r1
    2b9c:	a1 2c       	mov	r10, r1
    2b9e:	bf 01       	movw	r22, r30
    2ba0:	a5 01       	movw	r20, r10
    2ba2:	94 01       	movw	r18, r8
    2ba4:	0e 94 a3 19 	call	0x3346	; 0x3346 <__udivmodsi4>
    2ba8:	f9 01       	movw	r30, r18
    2baa:	ca 01       	movw	r24, r20
    2bac:	6a 30       	cpi	r22, 0x0A	; 10
    2bae:	0c f5       	brge	.+66     	; 0x2bf2 <Print::printNumber(unsigned long, unsigned char)+0x94>
    2bb0:	60 5d       	subi	r22, 0xD0	; 208
    2bb2:	d8 01       	movw	r26, r16
    2bb4:	6e 93       	st	-X, r22
    2bb6:	8d 01       	movw	r16, r26
    2bb8:	23 2b       	or	r18, r19
    2bba:	24 2b       	or	r18, r20
    2bbc:	25 2b       	or	r18, r21
    2bbe:	79 f7       	brne	.-34     	; 0x2b9e <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    2bc0:	90 e0       	ldi	r25, 0x00	; 0
    2bc2:	80 e0       	ldi	r24, 0x00	; 0
    2bc4:	10 97       	sbiw	r26, 0x00	; 0
    2bc6:	21 f0       	breq	.+8      	; 0x2bd0 <Print::printNumber(unsigned long, unsigned char)+0x72>
    2bc8:	bd 01       	movw	r22, r26
    2bca:	c7 01       	movw	r24, r14
    2bcc:	0e 94 76 15 	call	0x2aec	; 0x2aec <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    2bd0:	a1 96       	adiw	r28, 0x21	; 33
    2bd2:	0f b6       	in	r0, 0x3f	; 63
    2bd4:	f8 94       	cli
    2bd6:	de bf       	out	0x3e, r29	; 62
    2bd8:	0f be       	out	0x3f, r0	; 63
    2bda:	cd bf       	out	0x3d, r28	; 61
    2bdc:	df 91       	pop	r29
    2bde:	cf 91       	pop	r28
    2be0:	1f 91       	pop	r17
    2be2:	0f 91       	pop	r16
    2be4:	ff 90       	pop	r15
    2be6:	ef 90       	pop	r14
    2be8:	bf 90       	pop	r11
    2bea:	af 90       	pop	r10
    2bec:	9f 90       	pop	r9
    2bee:	8f 90       	pop	r8
    2bf0:	08 95       	ret
    2bf2:	69 5c       	subi	r22, 0xC9	; 201
    2bf4:	de cf       	rjmp	.-68     	; 0x2bb2 <Print::printNumber(unsigned long, unsigned char)+0x54>

00002bf6 <Print::print(long, int)>:
_ZN5Print5printEli():
    2bf6:	cf 92       	push	r12
    2bf8:	df 92       	push	r13
    2bfa:	ef 92       	push	r14
    2bfc:	ff 92       	push	r15
    2bfe:	0f 93       	push	r16
    2c00:	1f 93       	push	r17
    2c02:	cf 93       	push	r28
    2c04:	df 93       	push	r29
    2c06:	21 15       	cp	r18, r1
    2c08:	31 05       	cpc	r19, r1
    2c0a:	81 f4       	brne	.+32     	; 0x2c2c <Print::print(long, int)+0x36>
    2c0c:	dc 01       	movw	r26, r24
    2c0e:	ed 91       	ld	r30, X+
    2c10:	fc 91       	ld	r31, X
    2c12:	01 90       	ld	r0, Z+
    2c14:	f0 81       	ld	r31, Z
    2c16:	e0 2d       	mov	r30, r0
    2c18:	64 2f       	mov	r22, r20
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	1f 91       	pop	r17
    2c20:	0f 91       	pop	r16
    2c22:	ff 90       	pop	r15
    2c24:	ef 90       	pop	r14
    2c26:	df 90       	pop	r13
    2c28:	cf 90       	pop	r12
    2c2a:	09 94       	ijmp
    2c2c:	2a 30       	cpi	r18, 0x0A	; 10
    2c2e:	31 05       	cpc	r19, r1
    2c30:	01 f5       	brne	.+64     	; 0x2c72 <Print::print(long, int)+0x7c>
    2c32:	2a e0       	ldi	r18, 0x0A	; 10
    2c34:	77 ff       	sbrs	r23, 7
    2c36:	1d c0       	rjmp	.+58     	; 0x2c72 <Print::print(long, int)+0x7c>
    2c38:	6a 01       	movw	r12, r20
    2c3a:	7b 01       	movw	r14, r22
    2c3c:	ec 01       	movw	r28, r24
    2c3e:	6d e2       	ldi	r22, 0x2D	; 45
    2c40:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <Print::print(char)>
    2c44:	8c 01       	movw	r16, r24
    2c46:	44 27       	eor	r20, r20
    2c48:	55 27       	eor	r21, r21
    2c4a:	ba 01       	movw	r22, r20
    2c4c:	4c 19       	sub	r20, r12
    2c4e:	5d 09       	sbc	r21, r13
    2c50:	6e 09       	sbc	r22, r14
    2c52:	7f 09       	sbc	r23, r15
    2c54:	2a e0       	ldi	r18, 0x0A	; 10
    2c56:	ce 01       	movw	r24, r28
    2c58:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <Print::printNumber(unsigned long, unsigned char)>
    2c5c:	80 0f       	add	r24, r16
    2c5e:	91 1f       	adc	r25, r17
    2c60:	df 91       	pop	r29
    2c62:	cf 91       	pop	r28
    2c64:	1f 91       	pop	r17
    2c66:	0f 91       	pop	r16
    2c68:	ff 90       	pop	r15
    2c6a:	ef 90       	pop	r14
    2c6c:	df 90       	pop	r13
    2c6e:	cf 90       	pop	r12
    2c70:	08 95       	ret
    2c72:	df 91       	pop	r29
    2c74:	cf 91       	pop	r28
    2c76:	1f 91       	pop	r17
    2c78:	0f 91       	pop	r16
    2c7a:	ff 90       	pop	r15
    2c7c:	ef 90       	pop	r14
    2c7e:	df 90       	pop	r13
    2c80:	cf 90       	pop	r12
    2c82:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <Print::printNumber(unsigned long, unsigned char)>

00002c86 <Print::print(int, int)>:
_ZN5Print5printEii():
    2c86:	9a 01       	movw	r18, r20
    2c88:	ab 01       	movw	r20, r22
    2c8a:	77 0f       	add	r23, r23
    2c8c:	66 0b       	sbc	r22, r22
    2c8e:	77 0b       	sbc	r23, r23
    2c90:	0c 94 fb 15 	jmp	0x2bf6	; 0x2bf6 <Print::print(long, int)>

00002c94 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    2c94:	21 15       	cp	r18, r1
    2c96:	31 05       	cpc	r19, r1
    2c98:	41 f4       	brne	.+16     	; 0x2caa <Print::print(unsigned long, int)+0x16>
    2c9a:	dc 01       	movw	r26, r24
    2c9c:	ed 91       	ld	r30, X+
    2c9e:	fc 91       	ld	r31, X
    2ca0:	01 90       	ld	r0, Z+
    2ca2:	f0 81       	ld	r31, Z
    2ca4:	e0 2d       	mov	r30, r0
    2ca6:	64 2f       	mov	r22, r20
    2ca8:	09 94       	ijmp
    2caa:	0c 94 af 15 	jmp	0x2b5e	; 0x2b5e <Print::printNumber(unsigned long, unsigned char)>

00002cae <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
    2cae:	9a 01       	movw	r18, r20
    2cb0:	ab 01       	movw	r20, r22
    2cb2:	70 e0       	ldi	r23, 0x00	; 0
    2cb4:	60 e0       	ldi	r22, 0x00	; 0
    2cb6:	0c 94 4a 16 	jmp	0x2c94	; 0x2c94 <Print::print(unsigned long, int)>

00002cba <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2cba:	2f 92       	push	r2
    2cbc:	3f 92       	push	r3
    2cbe:	4f 92       	push	r4
    2cc0:	5f 92       	push	r5
    2cc2:	6f 92       	push	r6
    2cc4:	7f 92       	push	r7
    2cc6:	8f 92       	push	r8
    2cc8:	9f 92       	push	r9
    2cca:	af 92       	push	r10
    2ccc:	bf 92       	push	r11
    2cce:	cf 92       	push	r12
    2cd0:	df 92       	push	r13
    2cd2:	ef 92       	push	r14
    2cd4:	ff 92       	push	r15
    2cd6:	1f 93       	push	r17
    2cd8:	cf 93       	push	r28
    2cda:	df 93       	push	r29
    2cdc:	ec 01       	movw	r28, r24
    2cde:	6a 01       	movw	r12, r20
    2ce0:	7b 01       	movw	r14, r22
    2ce2:	72 2e       	mov	r7, r18
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2ce4:	ab 01       	movw	r20, r22
    2ce6:	96 01       	movw	r18, r12
    2ce8:	cb 01       	movw	r24, r22
    2cea:	b6 01       	movw	r22, r12
    2cec:	0e 94 8a 19 	call	0x3314	; 0x3314 <__unordsf2>
_ZN5Print5writeEPKc():
    2cf0:	69 e8       	ldi	r22, 0x89	; 137
    2cf2:	73 e0       	ldi	r23, 0x03	; 3
_ZN5Print10printFloatEdh():
    2cf4:	81 11       	cpse	r24, r1
    2cf6:	26 c0       	rjmp	.+76     	; 0x2d44 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    2cf8:	46 01       	movw	r8, r12
    2cfa:	57 01       	movw	r10, r14
    2cfc:	e8 94       	clt
    2cfe:	b7 f8       	bld	r11, 7
    2d00:	2f ef       	ldi	r18, 0xFF	; 255
    2d02:	3f ef       	ldi	r19, 0xFF	; 255
    2d04:	4f e7       	ldi	r20, 0x7F	; 127
    2d06:	5f e7       	ldi	r21, 0x7F	; 127
    2d08:	c5 01       	movw	r24, r10
    2d0a:	b4 01       	movw	r22, r8
    2d0c:	0e 94 8a 19 	call	0x3314	; 0x3314 <__unordsf2>
    2d10:	81 11       	cpse	r24, r1
    2d12:	0c c0       	rjmp	.+24     	; 0x2d2c <Print::printFloat(double, unsigned char)+0x72>
    2d14:	2f ef       	ldi	r18, 0xFF	; 255
    2d16:	3f ef       	ldi	r19, 0xFF	; 255
    2d18:	4f e7       	ldi	r20, 0x7F	; 127
    2d1a:	5f e7       	ldi	r21, 0x7F	; 127
    2d1c:	c5 01       	movw	r24, r10
    2d1e:	b4 01       	movw	r22, r8
    2d20:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <__cmpsf2>
_ZN5Print5writeEPKc():
    2d24:	6d e8       	ldi	r22, 0x8D	; 141
    2d26:	73 e0       	ldi	r23, 0x03	; 3
_ZN5Print10printFloatEdh():
    2d28:	18 16       	cp	r1, r24
    2d2a:	64 f0       	brlt	.+24     	; 0x2d44 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2d2c:	2f ef       	ldi	r18, 0xFF	; 255
    2d2e:	3f ef       	ldi	r19, 0xFF	; 255
    2d30:	4f e7       	ldi	r20, 0x7F	; 127
    2d32:	5f e4       	ldi	r21, 0x4F	; 79
    2d34:	c7 01       	movw	r24, r14
    2d36:	b6 01       	movw	r22, r12
    2d38:	0e 94 18 19 	call	0x3230	; 0x3230 <__gesf2>
    2d3c:	18 16       	cp	r1, r24
    2d3e:	b4 f4       	brge	.+44     	; 0x2d6c <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
    2d40:	61 e9       	ldi	r22, 0x91	; 145
    2d42:	73 e0       	ldi	r23, 0x03	; 3
    2d44:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2d46:	df 91       	pop	r29
    2d48:	cf 91       	pop	r28
    2d4a:	1f 91       	pop	r17
    2d4c:	ff 90       	pop	r15
    2d4e:	ef 90       	pop	r14
    2d50:	df 90       	pop	r13
    2d52:	cf 90       	pop	r12
    2d54:	bf 90       	pop	r11
    2d56:	af 90       	pop	r10
    2d58:	9f 90       	pop	r9
    2d5a:	8f 90       	pop	r8
    2d5c:	7f 90       	pop	r7
    2d5e:	6f 90       	pop	r6
    2d60:	5f 90       	pop	r5
    2d62:	4f 90       	pop	r4
    2d64:	3f 90       	pop	r3
    2d66:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
    2d68:	0c 94 76 15 	jmp	0x2aec	; 0x2aec <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2d6c:	2f ef       	ldi	r18, 0xFF	; 255
    2d6e:	3f ef       	ldi	r19, 0xFF	; 255
    2d70:	4f e7       	ldi	r20, 0x7F	; 127
    2d72:	5f ec       	ldi	r21, 0xCF	; 207
    2d74:	c7 01       	movw	r24, r14
    2d76:	b6 01       	movw	r22, r12
    2d78:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <__cmpsf2>
    2d7c:	87 fd       	sbrc	r24, 7
    2d7e:	e0 cf       	rjmp	.-64     	; 0x2d40 <Print::printFloat(double, unsigned char)+0x86>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    2d80:	20 e0       	ldi	r18, 0x00	; 0
    2d82:	30 e0       	ldi	r19, 0x00	; 0
    2d84:	a9 01       	movw	r20, r18
    2d86:	c7 01       	movw	r24, r14
    2d88:	b6 01       	movw	r22, r12
    2d8a:	0e 94 c0 17 	call	0x2f80	; 0x2f80 <__cmpsf2>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2d8e:	31 2c       	mov	r3, r1
    2d90:	21 2c       	mov	r2, r1
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    2d92:	87 ff       	sbrs	r24, 7
    2d94:	09 c0       	rjmp	.+18     	; 0x2da8 <Print::printFloat(double, unsigned char)+0xee>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
    2d96:	6d e2       	ldi	r22, 0x2D	; 45
    2d98:	ce 01       	movw	r24, r28
    2d9a:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <Print::print(char)>
    2d9e:	1c 01       	movw	r2, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
    2da0:	f7 fa       	bst	r15, 7
    2da2:	f0 94       	com	r15
    2da4:	f7 f8       	bld	r15, 7
    2da6:	f0 94       	com	r15
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2da8:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2daa:	60 e0       	ldi	r22, 0x00	; 0
    2dac:	70 e0       	ldi	r23, 0x00	; 0
    2dae:	80 e0       	ldi	r24, 0x00	; 0
    2db0:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    2db2:	71 16       	cp	r7, r17
    2db4:	41 f0       	breq	.+16     	; 0x2dc6 <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    2db6:	20 e0       	ldi	r18, 0x00	; 0
    2db8:	30 e0       	ldi	r19, 0x00	; 0
    2dba:	40 e2       	ldi	r20, 0x20	; 32
    2dbc:	51 e4       	ldi	r21, 0x41	; 65
    2dbe:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <__divsf3>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2dc2:	1f 5f       	subi	r17, 0xFF	; 255
    2dc4:	f6 cf       	rjmp	.-20     	; 0x2db2 <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    2dc6:	a7 01       	movw	r20, r14
    2dc8:	96 01       	movw	r18, r12
    2dca:	0e 94 54 17 	call	0x2ea8	; 0x2ea8 <__addsf3>
    2dce:	2b 01       	movw	r4, r22
    2dd0:	3c 01       	movw	r6, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2dd2:	0e 94 37 18 	call	0x306e	; 0x306e <__fixunssfsi>
    2dd6:	4b 01       	movw	r8, r22
    2dd8:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2dda:	2a e0       	ldi	r18, 0x0A	; 10
    2ddc:	bc 01       	movw	r22, r24
    2dde:	a4 01       	movw	r20, r8
    2de0:	ce 01       	movw	r24, r28
    2de2:	0e 94 af 15 	call	0x2b5e	; 0x2b5e <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2de6:	7c 01       	movw	r14, r24
    2de8:	e2 0c       	add	r14, r2
    2dea:	f3 1c       	adc	r15, r3
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2dec:	11 23       	and	r17, r17
    2dee:	b1 f1       	breq	.+108    	; 0x2e5c <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2df0:	c5 01       	movw	r24, r10
    2df2:	b4 01       	movw	r22, r8
    2df4:	0e 94 66 18 	call	0x30cc	; 0x30cc <__floatunsisf>
    2df8:	9b 01       	movw	r18, r22
    2dfa:	ac 01       	movw	r20, r24
    2dfc:	c3 01       	movw	r24, r6
    2dfe:	b2 01       	movw	r22, r4
    2e00:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <__subsf3>
    2e04:	4b 01       	movw	r8, r22
    2e06:	5c 01       	movw	r10, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2e08:	6e e2       	ldi	r22, 0x2E	; 46
    2e0a:	ce 01       	movw	r24, r28
    2e0c:	0e 94 8d 15 	call	0x2b1a	; 0x2b1a <Print::print(char)>
    2e10:	e8 0e       	add	r14, r24
    2e12:	f9 1e       	adc	r15, r25
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2e14:	11 50       	subi	r17, 0x01	; 1
    2e16:	10 f1       	brcs	.+68     	; 0x2e5c <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    2e18:	20 e0       	ldi	r18, 0x00	; 0
    2e1a:	30 e0       	ldi	r19, 0x00	; 0
    2e1c:	40 e2       	ldi	r20, 0x20	; 32
    2e1e:	51 e4       	ldi	r21, 0x41	; 65
    2e20:	c5 01       	movw	r24, r10
    2e22:	b4 01       	movw	r22, r8
    2e24:	0e 94 1d 19 	call	0x323a	; 0x323a <__mulsf3>
    2e28:	2b 01       	movw	r4, r22
    2e2a:	3c 01       	movw	r6, r24
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    2e2c:	0e 94 37 18 	call	0x306e	; 0x306e <__fixunssfsi>
    2e30:	4b 01       	movw	r8, r22
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    2e32:	4a e0       	ldi	r20, 0x0A	; 10
    2e34:	50 e0       	ldi	r21, 0x00	; 0
    2e36:	ce 01       	movw	r24, r28
    2e38:	0e 94 57 16 	call	0x2cae	; 0x2cae <Print::print(unsigned int, int)>
    2e3c:	e8 0e       	add	r14, r24
    2e3e:	f9 1e       	adc	r15, r25
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    2e40:	b4 01       	movw	r22, r8
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	80 e0       	ldi	r24, 0x00	; 0
    2e46:	0e 94 66 18 	call	0x30cc	; 0x30cc <__floatunsisf>
    2e4a:	9b 01       	movw	r18, r22
    2e4c:	ac 01       	movw	r20, r24
    2e4e:	c3 01       	movw	r24, r6
    2e50:	b2 01       	movw	r22, r4
    2e52:	0e 94 53 17 	call	0x2ea6	; 0x2ea6 <__subsf3>
    2e56:	4b 01       	movw	r8, r22
    2e58:	5c 01       	movw	r10, r24
    2e5a:	dc cf       	rjmp	.-72     	; 0x2e14 <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    2e5c:	c7 01       	movw	r24, r14
    2e5e:	df 91       	pop	r29
    2e60:	cf 91       	pop	r28
    2e62:	1f 91       	pop	r17
    2e64:	ff 90       	pop	r15
    2e66:	ef 90       	pop	r14
    2e68:	df 90       	pop	r13
    2e6a:	cf 90       	pop	r12
    2e6c:	bf 90       	pop	r11
    2e6e:	af 90       	pop	r10
    2e70:	9f 90       	pop	r9
    2e72:	8f 90       	pop	r8
    2e74:	7f 90       	pop	r7
    2e76:	6f 90       	pop	r6
    2e78:	5f 90       	pop	r5
    2e7a:	4f 90       	pop	r4
    2e7c:	3f 90       	pop	r3
    2e7e:	2f 90       	pop	r2
    2e80:	08 95       	ret

00002e82 <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2e82:	0c 94 5d 16 	jmp	0x2cba	; 0x2cba <Print::printFloat(double, unsigned char)>

00002e86 <initVariant>:
initVariant():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2e86:	08 95       	ret

00002e88 <main>:
main():
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    2e88:	0e 94 7d 12 	call	0x24fa	; 0x24fa <init>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    2e8c:	0e 94 43 17 	call	0x2e86	; 0x2e86 <initVariant>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    2e90:	0e 94 4d 06 	call	0xc9a	; 0xc9a <setup>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    2e94:	c7 eb       	ldi	r28, 0xB7	; 183
    2e96:	d3 e1       	ldi	r29, 0x13	; 19
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    2e98:	0e 94 a4 0a 	call	0x1548	; 0x1548 <loop>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    2e9c:	20 97       	sbiw	r28, 0x00	; 0
    2e9e:	e1 f3       	breq	.-8      	; 0x2e98 <main+0x10>
C:\Users\abdul\AppData\Local\arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    2ea0:	0e 94 b7 13 	call	0x276e	; 0x276e <serialEventRun()>
    2ea4:	f9 cf       	rjmp	.-14     	; 0x2e98 <main+0x10>

00002ea6 <__subsf3>:
__subsf3():
    2ea6:	50 58       	subi	r21, 0x80	; 128

00002ea8 <__addsf3>:
    2ea8:	bb 27       	eor	r27, r27
    2eaa:	aa 27       	eor	r26, r26
    2eac:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__addsf3x>
    2eb0:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__fp_round>
__addsf3():
    2eb4:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__fp_pscA>
    2eb8:	38 f0       	brcs	.+14     	; 0x2ec8 <__addsf3+0x20>
    2eba:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__fp_pscB>
    2ebe:	20 f0       	brcs	.+8      	; 0x2ec8 <__addsf3+0x20>
    2ec0:	39 f4       	brne	.+14     	; 0x2ed0 <__addsf3+0x28>
    2ec2:	9f 3f       	cpi	r25, 0xFF	; 255
    2ec4:	19 f4       	brne	.+6      	; 0x2ecc <__addsf3+0x24>
    2ec6:	26 f4       	brtc	.+8      	; 0x2ed0 <__addsf3+0x28>
    2ec8:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__fp_nan>
    2ecc:	0e f4       	brtc	.+2      	; 0x2ed0 <__addsf3+0x28>
    2ece:	e0 95       	com	r30
    2ed0:	e7 fb       	bst	r30, 7
    2ed2:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__fp_inf>

00002ed6 <__addsf3x>:
__addsf3x():
    2ed6:	e9 2f       	mov	r30, r25
    2ed8:	0e 94 ef 18 	call	0x31de	; 0x31de <__fp_split3>
    2edc:	58 f3       	brcs	.-42     	; 0x2eb4 <__addsf3+0xc>
    2ede:	ba 17       	cp	r27, r26
    2ee0:	62 07       	cpc	r22, r18
    2ee2:	73 07       	cpc	r23, r19
    2ee4:	84 07       	cpc	r24, r20
    2ee6:	95 07       	cpc	r25, r21
    2ee8:	20 f0       	brcs	.+8      	; 0x2ef2 <__addsf3x+0x1c>
    2eea:	79 f4       	brne	.+30     	; 0x2f0a <__addsf3x+0x34>
    2eec:	a6 f5       	brtc	.+104    	; 0x2f56 <__addsf3x+0x80>
    2eee:	0c 94 11 19 	jmp	0x3222	; 0x3222 <__fp_zero>
    2ef2:	0e f4       	brtc	.+2      	; 0x2ef6 <__addsf3x+0x20>
    2ef4:	e0 95       	com	r30
    2ef6:	0b 2e       	mov	r0, r27
    2ef8:	ba 2f       	mov	r27, r26
    2efa:	a0 2d       	mov	r26, r0
    2efc:	0b 01       	movw	r0, r22
    2efe:	b9 01       	movw	r22, r18
    2f00:	90 01       	movw	r18, r0
    2f02:	0c 01       	movw	r0, r24
    2f04:	ca 01       	movw	r24, r20
    2f06:	a0 01       	movw	r20, r0
    2f08:	11 24       	eor	r1, r1
    2f0a:	ff 27       	eor	r31, r31
    2f0c:	59 1b       	sub	r21, r25
    2f0e:	99 f0       	breq	.+38     	; 0x2f36 <__addsf3x+0x60>
    2f10:	59 3f       	cpi	r21, 0xF9	; 249
    2f12:	50 f4       	brcc	.+20     	; 0x2f28 <__addsf3x+0x52>
    2f14:	50 3e       	cpi	r21, 0xE0	; 224
    2f16:	68 f1       	brcs	.+90     	; 0x2f72 <__addsf3x+0x9c>
    2f18:	1a 16       	cp	r1, r26
    2f1a:	f0 40       	sbci	r31, 0x00	; 0
    2f1c:	a2 2f       	mov	r26, r18
    2f1e:	23 2f       	mov	r18, r19
    2f20:	34 2f       	mov	r19, r20
    2f22:	44 27       	eor	r20, r20
    2f24:	58 5f       	subi	r21, 0xF8	; 248
    2f26:	f3 cf       	rjmp	.-26     	; 0x2f0e <__addsf3x+0x38>
    2f28:	46 95       	lsr	r20
    2f2a:	37 95       	ror	r19
    2f2c:	27 95       	ror	r18
    2f2e:	a7 95       	ror	r26
    2f30:	f0 40       	sbci	r31, 0x00	; 0
    2f32:	53 95       	inc	r21
    2f34:	c9 f7       	brne	.-14     	; 0x2f28 <__addsf3x+0x52>
    2f36:	7e f4       	brtc	.+30     	; 0x2f56 <__addsf3x+0x80>
    2f38:	1f 16       	cp	r1, r31
    2f3a:	ba 0b       	sbc	r27, r26
    2f3c:	62 0b       	sbc	r22, r18
    2f3e:	73 0b       	sbc	r23, r19
    2f40:	84 0b       	sbc	r24, r20
    2f42:	ba f0       	brmi	.+46     	; 0x2f72 <__addsf3x+0x9c>
    2f44:	91 50       	subi	r25, 0x01	; 1
    2f46:	a1 f0       	breq	.+40     	; 0x2f70 <__addsf3x+0x9a>
    2f48:	ff 0f       	add	r31, r31
    2f4a:	bb 1f       	adc	r27, r27
    2f4c:	66 1f       	adc	r22, r22
    2f4e:	77 1f       	adc	r23, r23
    2f50:	88 1f       	adc	r24, r24
    2f52:	c2 f7       	brpl	.-16     	; 0x2f44 <__addsf3x+0x6e>
    2f54:	0e c0       	rjmp	.+28     	; 0x2f72 <__addsf3x+0x9c>
    2f56:	ba 0f       	add	r27, r26
    2f58:	62 1f       	adc	r22, r18
    2f5a:	73 1f       	adc	r23, r19
    2f5c:	84 1f       	adc	r24, r20
    2f5e:	48 f4       	brcc	.+18     	; 0x2f72 <__addsf3x+0x9c>
    2f60:	87 95       	ror	r24
    2f62:	77 95       	ror	r23
    2f64:	67 95       	ror	r22
    2f66:	b7 95       	ror	r27
    2f68:	f7 95       	ror	r31
    2f6a:	9e 3f       	cpi	r25, 0xFE	; 254
    2f6c:	08 f0       	brcs	.+2      	; 0x2f70 <__addsf3x+0x9a>
    2f6e:	b0 cf       	rjmp	.-160    	; 0x2ed0 <__addsf3+0x28>
    2f70:	93 95       	inc	r25
    2f72:	88 0f       	add	r24, r24
    2f74:	08 f0       	brcs	.+2      	; 0x2f78 <__addsf3x+0xa2>
    2f76:	99 27       	eor	r25, r25
    2f78:	ee 0f       	add	r30, r30
    2f7a:	97 95       	ror	r25
    2f7c:	87 95       	ror	r24
    2f7e:	08 95       	ret

00002f80 <__cmpsf2>:
    2f80:	0e 94 a3 18 	call	0x3146	; 0x3146 <__fp_cmp>
    2f84:	08 f4       	brcc	.+2      	; 0x2f88 <__cmpsf2+0x8>
    2f86:	81 e0       	ldi	r24, 0x01	; 1
    2f88:	08 95       	ret

00002f8a <__divsf3>:
    2f8a:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <__divsf3x>
    2f8e:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__fp_round>
    2f92:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__fp_pscB>
    2f96:	58 f0       	brcs	.+22     	; 0x2fae <__divsf3+0x24>
    2f98:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__fp_pscA>
    2f9c:	40 f0       	brcs	.+16     	; 0x2fae <__divsf3+0x24>
    2f9e:	29 f4       	brne	.+10     	; 0x2faa <__divsf3+0x20>
    2fa0:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    2fa2:	29 f0       	breq	.+10     	; 0x2fae <__divsf3+0x24>
    2fa4:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__fp_inf>
    2fa8:	51 11       	cpse	r21, r1
    2faa:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__fp_szero>
    2fae:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__fp_nan>

00002fb2 <__divsf3x>:
__divsf3x():
    2fb2:	0e 94 ef 18 	call	0x31de	; 0x31de <__fp_split3>
    2fb6:	68 f3       	brcs	.-38     	; 0x2f92 <__divsf3+0x8>

00002fb8 <__divsf3_pse>:
    2fb8:	99 23       	and	r25, r25
    2fba:	b1 f3       	breq	.-20     	; 0x2fa8 <__divsf3+0x1e>
    2fbc:	55 23       	and	r21, r21
    2fbe:	91 f3       	breq	.-28     	; 0x2fa4 <__divsf3+0x1a>
    2fc0:	95 1b       	sub	r25, r21
    2fc2:	55 0b       	sbc	r21, r21
    2fc4:	bb 27       	eor	r27, r27
    2fc6:	aa 27       	eor	r26, r26
    2fc8:	62 17       	cp	r22, r18
    2fca:	73 07       	cpc	r23, r19
    2fcc:	84 07       	cpc	r24, r20
    2fce:	38 f0       	brcs	.+14     	; 0x2fde <__divsf3_pse+0x26>
    2fd0:	9f 5f       	subi	r25, 0xFF	; 255
    2fd2:	5f 4f       	sbci	r21, 0xFF	; 255
    2fd4:	22 0f       	add	r18, r18
    2fd6:	33 1f       	adc	r19, r19
    2fd8:	44 1f       	adc	r20, r20
    2fda:	aa 1f       	adc	r26, r26
    2fdc:	a9 f3       	breq	.-22     	; 0x2fc8 <__divsf3_pse+0x10>
    2fde:	35 d0       	rcall	.+106    	; 0x304a <__divsf3_pse+0x92>
    2fe0:	0e 2e       	mov	r0, r30
    2fe2:	3a f0       	brmi	.+14     	; 0x2ff2 <__divsf3_pse+0x3a>
    2fe4:	e0 e8       	ldi	r30, 0x80	; 128
    2fe6:	32 d0       	rcall	.+100    	; 0x304c <__divsf3_pse+0x94>
    2fe8:	91 50       	subi	r25, 0x01	; 1
    2fea:	50 40       	sbci	r21, 0x00	; 0
    2fec:	e6 95       	lsr	r30
    2fee:	00 1c       	adc	r0, r0
    2ff0:	ca f7       	brpl	.-14     	; 0x2fe4 <__divsf3_pse+0x2c>
    2ff2:	2b d0       	rcall	.+86     	; 0x304a <__divsf3_pse+0x92>
    2ff4:	fe 2f       	mov	r31, r30
    2ff6:	29 d0       	rcall	.+82     	; 0x304a <__divsf3_pse+0x92>
    2ff8:	66 0f       	add	r22, r22
    2ffa:	77 1f       	adc	r23, r23
    2ffc:	88 1f       	adc	r24, r24
    2ffe:	bb 1f       	adc	r27, r27
    3000:	26 17       	cp	r18, r22
    3002:	37 07       	cpc	r19, r23
    3004:	48 07       	cpc	r20, r24
    3006:	ab 07       	cpc	r26, r27
    3008:	b0 e8       	ldi	r27, 0x80	; 128
    300a:	09 f0       	breq	.+2      	; 0x300e <__divsf3_pse+0x56>
    300c:	bb 0b       	sbc	r27, r27
    300e:	80 2d       	mov	r24, r0
    3010:	bf 01       	movw	r22, r30
    3012:	ff 27       	eor	r31, r31
    3014:	93 58       	subi	r25, 0x83	; 131
    3016:	5f 4f       	sbci	r21, 0xFF	; 255
    3018:	3a f0       	brmi	.+14     	; 0x3028 <__divsf3_pse+0x70>
    301a:	9e 3f       	cpi	r25, 0xFE	; 254
    301c:	51 05       	cpc	r21, r1
    301e:	78 f0       	brcs	.+30     	; 0x303e <__divsf3_pse+0x86>
    3020:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__fp_inf>
    3024:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__fp_szero>
    3028:	5f 3f       	cpi	r21, 0xFF	; 255
    302a:	e4 f3       	brlt	.-8      	; 0x3024 <__divsf3_pse+0x6c>
    302c:	98 3e       	cpi	r25, 0xE8	; 232
    302e:	d4 f3       	brlt	.-12     	; 0x3024 <__divsf3_pse+0x6c>
    3030:	86 95       	lsr	r24
    3032:	77 95       	ror	r23
    3034:	67 95       	ror	r22
    3036:	b7 95       	ror	r27
    3038:	f7 95       	ror	r31
    303a:	9f 5f       	subi	r25, 0xFF	; 255
    303c:	c9 f7       	brne	.-14     	; 0x3030 <__divsf3_pse+0x78>
    303e:	88 0f       	add	r24, r24
    3040:	91 1d       	adc	r25, r1
    3042:	96 95       	lsr	r25
    3044:	87 95       	ror	r24
    3046:	97 f9       	bld	r25, 7
    3048:	08 95       	ret
    304a:	e1 e0       	ldi	r30, 0x01	; 1
    304c:	66 0f       	add	r22, r22
    304e:	77 1f       	adc	r23, r23
    3050:	88 1f       	adc	r24, r24
    3052:	bb 1f       	adc	r27, r27
    3054:	62 17       	cp	r22, r18
    3056:	73 07       	cpc	r23, r19
    3058:	84 07       	cpc	r24, r20
    305a:	ba 07       	cpc	r27, r26
    305c:	20 f0       	brcs	.+8      	; 0x3066 <__divsf3_pse+0xae>
    305e:	62 1b       	sub	r22, r18
    3060:	73 0b       	sbc	r23, r19
    3062:	84 0b       	sbc	r24, r20
    3064:	ba 0b       	sbc	r27, r26
    3066:	ee 1f       	adc	r30, r30
    3068:	88 f7       	brcc	.-30     	; 0x304c <__divsf3_pse+0x94>
    306a:	e0 95       	com	r30
    306c:	08 95       	ret

0000306e <__fixunssfsi>:
    306e:	0e 94 f7 18 	call	0x31ee	; 0x31ee <__fp_splitA>
    3072:	88 f0       	brcs	.+34     	; 0x3096 <__fixunssfsi+0x28>
    3074:	9f 57       	subi	r25, 0x7F	; 127
    3076:	98 f0       	brcs	.+38     	; 0x309e <__fixunssfsi+0x30>
    3078:	b9 2f       	mov	r27, r25
    307a:	99 27       	eor	r25, r25
    307c:	b7 51       	subi	r27, 0x17	; 23
    307e:	b0 f0       	brcs	.+44     	; 0x30ac <__fixunssfsi+0x3e>
    3080:	e1 f0       	breq	.+56     	; 0x30ba <__fixunssfsi+0x4c>
    3082:	66 0f       	add	r22, r22
    3084:	77 1f       	adc	r23, r23
    3086:	88 1f       	adc	r24, r24
    3088:	99 1f       	adc	r25, r25
    308a:	1a f0       	brmi	.+6      	; 0x3092 <__fixunssfsi+0x24>
    308c:	ba 95       	dec	r27
__fixunssfsi():
    308e:	c9 f7       	brne	.-14     	; 0x3082 <__fixunssfsi+0x14>
    3090:	14 c0       	rjmp	.+40     	; 0x30ba <__fixunssfsi+0x4c>
    3092:	b1 30       	cpi	r27, 0x01	; 1
    3094:	91 f0       	breq	.+36     	; 0x30ba <__fixunssfsi+0x4c>
    3096:	0e 94 11 19 	call	0x3222	; 0x3222 <__fp_zero>
    309a:	b1 e0       	ldi	r27, 0x01	; 1
    309c:	08 95       	ret
    309e:	0c 94 11 19 	jmp	0x3222	; 0x3222 <__fp_zero>
    30a2:	67 2f       	mov	r22, r23
    30a4:	78 2f       	mov	r23, r24
    30a6:	88 27       	eor	r24, r24
    30a8:	b8 5f       	subi	r27, 0xF8	; 248
    30aa:	39 f0       	breq	.+14     	; 0x30ba <__fixunssfsi+0x4c>
    30ac:	b9 3f       	cpi	r27, 0xF9	; 249
    30ae:	cc f3       	brlt	.-14     	; 0x30a2 <__fixunssfsi+0x34>
    30b0:	86 95       	lsr	r24
    30b2:	77 95       	ror	r23
    30b4:	67 95       	ror	r22
    30b6:	b3 95       	inc	r27
    30b8:	d9 f7       	brne	.-10     	; 0x30b0 <__fixunssfsi+0x42>
    30ba:	3e f4       	brtc	.+14     	; 0x30ca <__fixunssfsi+0x5c>
    30bc:	90 95       	com	r25
    30be:	80 95       	com	r24
    30c0:	70 95       	com	r23
    30c2:	61 95       	neg	r22
    30c4:	7f 4f       	sbci	r23, 0xFF	; 255
    30c6:	8f 4f       	sbci	r24, 0xFF	; 255
    30c8:	9f 4f       	sbci	r25, 0xFF	; 255
    30ca:	08 95       	ret

000030cc <__floatunsisf>:
__floatunsisf():
    30cc:	e8 94       	clt
    30ce:	09 c0       	rjmp	.+18     	; 0x30e2 <__floatsisf+0x12>

000030d0 <__floatsisf>:
    30d0:	97 fb       	bst	r25, 7
    30d2:	3e f4       	brtc	.+14     	; 0x30e2 <__floatsisf+0x12>
    30d4:	90 95       	com	r25
    30d6:	80 95       	com	r24
    30d8:	70 95       	com	r23
    30da:	61 95       	neg	r22
    30dc:	7f 4f       	sbci	r23, 0xFF	; 255
    30de:	8f 4f       	sbci	r24, 0xFF	; 255
    30e0:	9f 4f       	sbci	r25, 0xFF	; 255
    30e2:	99 23       	and	r25, r25
    30e4:	a9 f0       	breq	.+42     	; 0x3110 <__floatsisf+0x40>
    30e6:	f9 2f       	mov	r31, r25
    30e8:	96 e9       	ldi	r25, 0x96	; 150
    30ea:	bb 27       	eor	r27, r27
    30ec:	93 95       	inc	r25
    30ee:	f6 95       	lsr	r31
    30f0:	87 95       	ror	r24
    30f2:	77 95       	ror	r23
    30f4:	67 95       	ror	r22
    30f6:	b7 95       	ror	r27
    30f8:	f1 11       	cpse	r31, r1
    30fa:	f8 cf       	rjmp	.-16     	; 0x30ec <__floatsisf+0x1c>
    30fc:	fa f4       	brpl	.+62     	; 0x313c <__floatsisf+0x6c>
    30fe:	bb 0f       	add	r27, r27
    3100:	11 f4       	brne	.+4      	; 0x3106 <__floatsisf+0x36>
    3102:	60 ff       	sbrs	r22, 0
    3104:	1b c0       	rjmp	.+54     	; 0x313c <__floatsisf+0x6c>
    3106:	6f 5f       	subi	r22, 0xFF	; 255
    3108:	7f 4f       	sbci	r23, 0xFF	; 255
    310a:	8f 4f       	sbci	r24, 0xFF	; 255
    310c:	9f 4f       	sbci	r25, 0xFF	; 255
    310e:	16 c0       	rjmp	.+44     	; 0x313c <__floatsisf+0x6c>
    3110:	88 23       	and	r24, r24
    3112:	11 f0       	breq	.+4      	; 0x3118 <__floatsisf+0x48>
    3114:	96 e9       	ldi	r25, 0x96	; 150
    3116:	11 c0       	rjmp	.+34     	; 0x313a <__floatsisf+0x6a>
    3118:	77 23       	and	r23, r23
    311a:	21 f0       	breq	.+8      	; 0x3124 <__floatsisf+0x54>
    311c:	9e e8       	ldi	r25, 0x8E	; 142
    311e:	87 2f       	mov	r24, r23
    3120:	76 2f       	mov	r23, r22
    3122:	05 c0       	rjmp	.+10     	; 0x312e <__floatsisf+0x5e>
    3124:	66 23       	and	r22, r22
    3126:	71 f0       	breq	.+28     	; 0x3144 <__floatsisf+0x74>
    3128:	96 e8       	ldi	r25, 0x86	; 134
    312a:	86 2f       	mov	r24, r22
    312c:	70 e0       	ldi	r23, 0x00	; 0
    312e:	60 e0       	ldi	r22, 0x00	; 0
    3130:	2a f0       	brmi	.+10     	; 0x313c <__floatsisf+0x6c>
    3132:	9a 95       	dec	r25
    3134:	66 0f       	add	r22, r22
    3136:	77 1f       	adc	r23, r23
    3138:	88 1f       	adc	r24, r24
    313a:	da f7       	brpl	.-10     	; 0x3132 <__floatsisf+0x62>
    313c:	88 0f       	add	r24, r24
    313e:	96 95       	lsr	r25
    3140:	87 95       	ror	r24
    3142:	97 f9       	bld	r25, 7
    3144:	08 95       	ret

00003146 <__fp_cmp>:
__fp_cmp():
    3146:	99 0f       	add	r25, r25
    3148:	00 08       	sbc	r0, r0
    314a:	55 0f       	add	r21, r21
    314c:	aa 0b       	sbc	r26, r26
    314e:	e0 e8       	ldi	r30, 0x80	; 128
    3150:	fe ef       	ldi	r31, 0xFE	; 254
    3152:	16 16       	cp	r1, r22
    3154:	17 06       	cpc	r1, r23
    3156:	e8 07       	cpc	r30, r24
    3158:	f9 07       	cpc	r31, r25
    315a:	c0 f0       	brcs	.+48     	; 0x318c <__fp_cmp+0x46>
    315c:	12 16       	cp	r1, r18
    315e:	13 06       	cpc	r1, r19
    3160:	e4 07       	cpc	r30, r20
    3162:	f5 07       	cpc	r31, r21
    3164:	98 f0       	brcs	.+38     	; 0x318c <__fp_cmp+0x46>
    3166:	62 1b       	sub	r22, r18
    3168:	73 0b       	sbc	r23, r19
    316a:	84 0b       	sbc	r24, r20
    316c:	95 0b       	sbc	r25, r21
    316e:	39 f4       	brne	.+14     	; 0x317e <__fp_cmp+0x38>
    3170:	0a 26       	eor	r0, r26
    3172:	61 f0       	breq	.+24     	; 0x318c <__fp_cmp+0x46>
    3174:	23 2b       	or	r18, r19
    3176:	24 2b       	or	r18, r20
    3178:	25 2b       	or	r18, r21
    317a:	21 f4       	brne	.+8      	; 0x3184 <__fp_cmp+0x3e>
    317c:	08 95       	ret
    317e:	0a 26       	eor	r0, r26
    3180:	09 f4       	brne	.+2      	; 0x3184 <__fp_cmp+0x3e>
    3182:	a1 40       	sbci	r26, 0x01	; 1
    3184:	a6 95       	lsr	r26
    3186:	8f ef       	ldi	r24, 0xFF	; 255
    3188:	81 1d       	adc	r24, r1
    318a:	81 1d       	adc	r24, r1
    318c:	08 95       	ret

0000318e <__fp_inf>:
__fp_inf():
    318e:	97 f9       	bld	r25, 7
    3190:	9f 67       	ori	r25, 0x7F	; 127
    3192:	80 e8       	ldi	r24, 0x80	; 128
    3194:	70 e0       	ldi	r23, 0x00	; 0
    3196:	60 e0       	ldi	r22, 0x00	; 0
    3198:	08 95       	ret

0000319a <__fp_nan>:
__fp_nan():
    319a:	9f ef       	ldi	r25, 0xFF	; 255
    319c:	80 ec       	ldi	r24, 0xC0	; 192
    319e:	08 95       	ret

000031a0 <__fp_pscA>:
__fp_pscA():
    31a0:	00 24       	eor	r0, r0
    31a2:	0a 94       	dec	r0
    31a4:	16 16       	cp	r1, r22
    31a6:	17 06       	cpc	r1, r23
    31a8:	18 06       	cpc	r1, r24
    31aa:	09 06       	cpc	r0, r25
    31ac:	08 95       	ret

000031ae <__fp_pscB>:
__fp_pscB():
    31ae:	00 24       	eor	r0, r0
    31b0:	0a 94       	dec	r0
    31b2:	12 16       	cp	r1, r18
    31b4:	13 06       	cpc	r1, r19
    31b6:	14 06       	cpc	r1, r20
    31b8:	05 06       	cpc	r0, r21
    31ba:	08 95       	ret

000031bc <__fp_round>:
__fp_round():
    31bc:	09 2e       	mov	r0, r25
    31be:	03 94       	inc	r0
    31c0:	00 0c       	add	r0, r0
    31c2:	11 f4       	brne	.+4      	; 0x31c8 <__fp_round+0xc>
    31c4:	88 23       	and	r24, r24
    31c6:	52 f0       	brmi	.+20     	; 0x31dc <__fp_round+0x20>
    31c8:	bb 0f       	add	r27, r27
    31ca:	40 f4       	brcc	.+16     	; 0x31dc <__fp_round+0x20>
    31cc:	bf 2b       	or	r27, r31
    31ce:	11 f4       	brne	.+4      	; 0x31d4 <__fp_round+0x18>
    31d0:	60 ff       	sbrs	r22, 0
    31d2:	04 c0       	rjmp	.+8      	; 0x31dc <__fp_round+0x20>
    31d4:	6f 5f       	subi	r22, 0xFF	; 255
    31d6:	7f 4f       	sbci	r23, 0xFF	; 255
    31d8:	8f 4f       	sbci	r24, 0xFF	; 255
    31da:	9f 4f       	sbci	r25, 0xFF	; 255
    31dc:	08 95       	ret

000031de <__fp_split3>:
__fp_split3():
    31de:	57 fd       	sbrc	r21, 7
    31e0:	90 58       	subi	r25, 0x80	; 128
    31e2:	44 0f       	add	r20, r20
    31e4:	55 1f       	adc	r21, r21
    31e6:	59 f0       	breq	.+22     	; 0x31fe <__fp_splitA+0x10>
    31e8:	5f 3f       	cpi	r21, 0xFF	; 255
    31ea:	71 f0       	breq	.+28     	; 0x3208 <__fp_splitA+0x1a>
    31ec:	47 95       	ror	r20

000031ee <__fp_splitA>:
    31ee:	88 0f       	add	r24, r24
    31f0:	97 fb       	bst	r25, 7
    31f2:	99 1f       	adc	r25, r25
    31f4:	61 f0       	breq	.+24     	; 0x320e <__fp_splitA+0x20>
    31f6:	9f 3f       	cpi	r25, 0xFF	; 255
    31f8:	79 f0       	breq	.+30     	; 0x3218 <__fp_splitA+0x2a>
    31fa:	87 95       	ror	r24
    31fc:	08 95       	ret
    31fe:	12 16       	cp	r1, r18
    3200:	13 06       	cpc	r1, r19
    3202:	14 06       	cpc	r1, r20
    3204:	55 1f       	adc	r21, r21
    3206:	f2 cf       	rjmp	.-28     	; 0x31ec <__fp_split3+0xe>
    3208:	46 95       	lsr	r20
    320a:	f1 df       	rcall	.-30     	; 0x31ee <__fp_splitA>
    320c:	08 c0       	rjmp	.+16     	; 0x321e <__fp_splitA+0x30>
    320e:	16 16       	cp	r1, r22
    3210:	17 06       	cpc	r1, r23
    3212:	18 06       	cpc	r1, r24
    3214:	99 1f       	adc	r25, r25
    3216:	f1 cf       	rjmp	.-30     	; 0x31fa <__fp_splitA+0xc>
    3218:	86 95       	lsr	r24
    321a:	71 05       	cpc	r23, r1
    321c:	61 05       	cpc	r22, r1
    321e:	08 94       	sec
    3220:	08 95       	ret

00003222 <__fp_zero>:
__fp_zero():
    3222:	e8 94       	clt

00003224 <__fp_szero>:
    3224:	bb 27       	eor	r27, r27
    3226:	66 27       	eor	r22, r22
    3228:	77 27       	eor	r23, r23
    322a:	cb 01       	movw	r24, r22
    322c:	97 f9       	bld	r25, 7
    322e:	08 95       	ret

00003230 <__gesf2>:
__gesf2():
    3230:	0e 94 a3 18 	call	0x3146	; 0x3146 <__fp_cmp>
    3234:	08 f4       	brcc	.+2      	; 0x3238 <__gesf2+0x8>
    3236:	8f ef       	ldi	r24, 0xFF	; 255
    3238:	08 95       	ret

0000323a <__mulsf3>:
__mulsf3():
    323a:	0e 94 30 19 	call	0x3260	; 0x3260 <__mulsf3x>
    323e:	0c 94 de 18 	jmp	0x31bc	; 0x31bc <__fp_round>
    3242:	0e 94 d0 18 	call	0x31a0	; 0x31a0 <__fp_pscA>
    3246:	38 f0       	brcs	.+14     	; 0x3256 <__mulsf3+0x1c>
    3248:	0e 94 d7 18 	call	0x31ae	; 0x31ae <__fp_pscB>
    324c:	20 f0       	brcs	.+8      	; 0x3256 <__mulsf3+0x1c>
    324e:	95 23       	and	r25, r21
    3250:	11 f0       	breq	.+4      	; 0x3256 <__mulsf3+0x1c>
    3252:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__fp_inf>
    3256:	0c 94 cd 18 	jmp	0x319a	; 0x319a <__fp_nan>
    325a:	11 24       	eor	r1, r1
    325c:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__fp_szero>

00003260 <__mulsf3x>:
__mulsf3x():
    3260:	0e 94 ef 18 	call	0x31de	; 0x31de <__fp_split3>
    3264:	70 f3       	brcs	.-36     	; 0x3242 <__mulsf3+0x8>

00003266 <__mulsf3_pse>:
    3266:	95 9f       	mul	r25, r21
    3268:	c1 f3       	breq	.-16     	; 0x325a <__mulsf3+0x20>
    326a:	95 0f       	add	r25, r21
    326c:	50 e0       	ldi	r21, 0x00	; 0
    326e:	55 1f       	adc	r21, r21
    3270:	62 9f       	mul	r22, r18
    3272:	f0 01       	movw	r30, r0
    3274:	72 9f       	mul	r23, r18
    3276:	bb 27       	eor	r27, r27
    3278:	f0 0d       	add	r31, r0
    327a:	b1 1d       	adc	r27, r1
    327c:	63 9f       	mul	r22, r19
    327e:	aa 27       	eor	r26, r26
    3280:	f0 0d       	add	r31, r0
    3282:	b1 1d       	adc	r27, r1
    3284:	aa 1f       	adc	r26, r26
    3286:	64 9f       	mul	r22, r20
    3288:	66 27       	eor	r22, r22
    328a:	b0 0d       	add	r27, r0
    328c:	a1 1d       	adc	r26, r1
    328e:	66 1f       	adc	r22, r22
    3290:	82 9f       	mul	r24, r18
    3292:	22 27       	eor	r18, r18
    3294:	b0 0d       	add	r27, r0
    3296:	a1 1d       	adc	r26, r1
    3298:	62 1f       	adc	r22, r18
    329a:	73 9f       	mul	r23, r19
    329c:	b0 0d       	add	r27, r0
    329e:	a1 1d       	adc	r26, r1
    32a0:	62 1f       	adc	r22, r18
    32a2:	83 9f       	mul	r24, r19
    32a4:	a0 0d       	add	r26, r0
    32a6:	61 1d       	adc	r22, r1
    32a8:	22 1f       	adc	r18, r18
    32aa:	74 9f       	mul	r23, r20
    32ac:	33 27       	eor	r19, r19
    32ae:	a0 0d       	add	r26, r0
    32b0:	61 1d       	adc	r22, r1
    32b2:	23 1f       	adc	r18, r19
    32b4:	84 9f       	mul	r24, r20
    32b6:	60 0d       	add	r22, r0
    32b8:	21 1d       	adc	r18, r1
    32ba:	82 2f       	mov	r24, r18
    32bc:	76 2f       	mov	r23, r22
    32be:	6a 2f       	mov	r22, r26
    32c0:	11 24       	eor	r1, r1
    32c2:	9f 57       	subi	r25, 0x7F	; 127
    32c4:	50 40       	sbci	r21, 0x00	; 0
    32c6:	9a f0       	brmi	.+38     	; 0x32ee <__mulsf3_pse+0x88>
    32c8:	f1 f0       	breq	.+60     	; 0x3306 <__mulsf3_pse+0xa0>
    32ca:	88 23       	and	r24, r24
    32cc:	4a f0       	brmi	.+18     	; 0x32e0 <__mulsf3_pse+0x7a>
    32ce:	ee 0f       	add	r30, r30
    32d0:	ff 1f       	adc	r31, r31
    32d2:	bb 1f       	adc	r27, r27
    32d4:	66 1f       	adc	r22, r22
    32d6:	77 1f       	adc	r23, r23
    32d8:	88 1f       	adc	r24, r24
    32da:	91 50       	subi	r25, 0x01	; 1
    32dc:	50 40       	sbci	r21, 0x00	; 0
    32de:	a9 f7       	brne	.-22     	; 0x32ca <__mulsf3_pse+0x64>
    32e0:	9e 3f       	cpi	r25, 0xFE	; 254
    32e2:	51 05       	cpc	r21, r1
    32e4:	80 f0       	brcs	.+32     	; 0x3306 <__mulsf3_pse+0xa0>
    32e6:	0c 94 c7 18 	jmp	0x318e	; 0x318e <__fp_inf>
    32ea:	0c 94 12 19 	jmp	0x3224	; 0x3224 <__fp_szero>
    32ee:	5f 3f       	cpi	r21, 0xFF	; 255
    32f0:	e4 f3       	brlt	.-8      	; 0x32ea <__mulsf3_pse+0x84>
    32f2:	98 3e       	cpi	r25, 0xE8	; 232
    32f4:	d4 f3       	brlt	.-12     	; 0x32ea <__mulsf3_pse+0x84>
    32f6:	86 95       	lsr	r24
    32f8:	77 95       	ror	r23
    32fa:	67 95       	ror	r22
    32fc:	b7 95       	ror	r27
    32fe:	f7 95       	ror	r31
    3300:	e7 95       	ror	r30
    3302:	9f 5f       	subi	r25, 0xFF	; 255
    3304:	c1 f7       	brne	.-16     	; 0x32f6 <__mulsf3_pse+0x90>
    3306:	fe 2b       	or	r31, r30
    3308:	88 0f       	add	r24, r24
    330a:	91 1d       	adc	r25, r1
    330c:	96 95       	lsr	r25
    330e:	87 95       	ror	r24
    3310:	97 f9       	bld	r25, 7
    3312:	08 95       	ret

00003314 <__unordsf2>:
    3314:	0e 94 a3 18 	call	0x3146	; 0x3146 <__fp_cmp>
    3318:	88 0b       	sbc	r24, r24
    331a:	99 0b       	sbc	r25, r25
    331c:	08 95       	ret

0000331e <__udivmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    331e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    3320:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    3322:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    3324:	07 c0       	rjmp	.+14     	; 0x3334 <__udivmodhi4_ep>

00003326 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    3326:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    3328:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    332a:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    332c:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    332e:	10 f0       	brcs	.+4      	; 0x3334 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    3330:	a6 1b       	sub	r26, r22
__udivmodhi4_loop():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    3332:	b7 0b       	sbc	r27, r23

00003334 <__udivmodhi4_ep>:
__udivmodhi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    3334:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    3336:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    3338:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    333a:	a9 f7       	brne	.-22     	; 0x3326 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    333c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    333e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    3340:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    3342:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    3344:	08 95       	ret

00003346 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    3346:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    3348:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    334a:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    334c:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    334e:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    3350:	0d c0       	rjmp	.+26     	; 0x336c <__udivmodsi4_ep>

00003352 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    3352:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3354:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    3356:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    3358:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    335a:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    335c:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    335e:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    3360:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    3362:	20 f0       	brcs	.+8      	; 0x336c <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3364:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3366:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    3368:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    336a:	f5 0b       	sbc	r31, r21

0000336c <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    336c:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    336e:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    3370:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    3372:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3374:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3376:	69 f7       	brne	.-38     	; 0x3352 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    3378:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    337a:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    337c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    337e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    3380:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    3382:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3384:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3386:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    3388:	08 95       	ret

0000338a <__divmodsi4>:
__divmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1686
    338a:	05 2e       	mov	r0, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1687
    338c:	97 fb       	bst	r25, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1688
    338e:	1e f4       	brtc	.+6      	; 0x3396 <__divmodsi4+0xc>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1689
    3390:	00 94       	com	r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1690
    3392:	0e 94 dc 19 	call	0x33b8	; 0x33b8 <__negsi2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1692
    3396:	57 fd       	sbrc	r21, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1693
    3398:	07 d0       	rcall	.+14     	; 0x33a8 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1694
    339a:	0e 94 a3 19 	call	0x3346	; 0x3346 <__udivmodsi4>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1695
    339e:	07 fc       	sbrc	r0, 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1696
    33a0:	03 d0       	rcall	.+6      	; 0x33a8 <__divmodsi4_neg2>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1697
    33a2:	4e f4       	brtc	.+18     	; 0x33b6 <__divmodsi4_exit>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1698
    33a4:	0c 94 dc 19 	jmp	0x33b8	; 0x33b8 <__negsi2>

000033a8 <__divmodsi4_neg2>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1701
    33a8:	50 95       	com	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1702
    33aa:	40 95       	com	r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1703
    33ac:	30 95       	com	r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1704
    33ae:	21 95       	neg	r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1705
    33b0:	3f 4f       	sbci	r19, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1706
    33b2:	4f 4f       	sbci	r20, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1707
    33b4:	5f 4f       	sbci	r21, 0xFF	; 255

000033b6 <__divmodsi4_exit>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1709
    33b6:	08 95       	ret

000033b8 <__negsi2>:
__negsi2():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1718
    33b8:	90 95       	com	r25
    33ba:	80 95       	com	r24
    33bc:	70 95       	com	r23
    33be:	61 95       	neg	r22
    33c0:	7f 4f       	sbci	r23, 0xFF	; 255
    33c2:	8f 4f       	sbci	r24, 0xFF	; 255
    33c4:	9f 4f       	sbci	r25, 0xFF	; 255
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1719
    33c6:	08 95       	ret

000033c8 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    33c8:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    33ca:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    33cc:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    33ce:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    33d0:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    33d2:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    33d4:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    33d6:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    33d8:	09 94       	ijmp

000033da <__muluhisi3>:
__muluhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:626
    33da:	0e 94 f8 19 	call	0x33f0	; 0x33f0 <__umulhisi3>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:627
    33de:	a5 9f       	mul	r26, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:628
    33e0:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:629
    33e2:	b4 9f       	mul	r27, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:630
    33e4:	90 0d       	add	r25, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:631
    33e6:	a4 9f       	mul	r26, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:632
    33e8:	80 0d       	add	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:633
    33ea:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:634
    33ec:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:635
    33ee:	08 95       	ret

000033f0 <__umulhisi3>:
__umulhisi3():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:564
    33f0:	a2 9f       	mul	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:565
    33f2:	b0 01       	movw	r22, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:566
    33f4:	b3 9f       	mul	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:567
    33f6:	c0 01       	movw	r24, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:568
    33f8:	a3 9f       	mul	r26, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:573
    33fa:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:574
    33fc:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:575
    33fe:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:576
    3400:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:580
    3402:	b2 9f       	mul	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:581
    3404:	70 0d       	add	r23, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:582
    3406:	81 1d       	adc	r24, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:583
    3408:	11 24       	eor	r1, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:584
    340a:	91 1d       	adc	r25, r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:585
    340c:	08 95       	ret

0000340e <dtostrf>:
dtostrf():
    340e:	ef 92       	push	r14
    3410:	0f 93       	push	r16
    3412:	1f 93       	push	r17
    3414:	cf 93       	push	r28
    3416:	df 93       	push	r29
    3418:	e8 01       	movw	r28, r16
    341a:	34 e0       	ldi	r19, 0x04	; 4
    341c:	47 fd       	sbrc	r20, 7
    341e:	34 e1       	ldi	r19, 0x14	; 20
    3420:	04 2e       	mov	r0, r20
    3422:	00 0c       	add	r0, r0
    3424:	55 0b       	sbc	r21, r21
    3426:	57 ff       	sbrs	r21, 7
    3428:	03 c0       	rjmp	.+6      	; 0x3430 <dtostrf+0x22>
    342a:	51 95       	neg	r21
    342c:	41 95       	neg	r20
    342e:	51 09       	sbc	r21, r1
    3430:	e3 2e       	mov	r14, r19
    3432:	02 2f       	mov	r16, r18
    3434:	24 2f       	mov	r18, r20
    3436:	ae 01       	movw	r20, r28
    3438:	0e 94 5f 1c 	call	0x38be	; 0x38be <dtoa_prf>
    343c:	ce 01       	movw	r24, r28
    343e:	df 91       	pop	r29
    3440:	cf 91       	pop	r28
    3442:	1f 91       	pop	r17
    3444:	0f 91       	pop	r16
    3446:	ef 90       	pop	r14
    3448:	08 95       	ret

0000344a <strcpy>:
strcpy():
    344a:	fb 01       	movw	r30, r22
    344c:	dc 01       	movw	r26, r24
    344e:	01 90       	ld	r0, Z+
    3450:	0d 92       	st	X+, r0
    3452:	00 20       	and	r0, r0
    3454:	e1 f7       	brne	.-8      	; 0x344e <strcpy+0x4>
    3456:	08 95       	ret

00003458 <sprintf>:
sprintf():
    3458:	0f 93       	push	r16
    345a:	1f 93       	push	r17
    345c:	cf 93       	push	r28
    345e:	df 93       	push	r29
    3460:	cd b7       	in	r28, 0x3d	; 61
    3462:	de b7       	in	r29, 0x3e	; 62
    3464:	2e 97       	sbiw	r28, 0x0e	; 14
    3466:	0f b6       	in	r0, 0x3f	; 63
    3468:	f8 94       	cli
    346a:	de bf       	out	0x3e, r29	; 62
    346c:	0f be       	out	0x3f, r0	; 63
    346e:	cd bf       	out	0x3d, r28	; 61
    3470:	0d 89       	ldd	r16, Y+21	; 0x15
    3472:	1e 89       	ldd	r17, Y+22	; 0x16
    3474:	86 e0       	ldi	r24, 0x06	; 6
    3476:	8c 83       	std	Y+4, r24	; 0x04
    3478:	1a 83       	std	Y+2, r17	; 0x02
    347a:	09 83       	std	Y+1, r16	; 0x01
    347c:	8f ef       	ldi	r24, 0xFF	; 255
    347e:	9f e7       	ldi	r25, 0x7F	; 127
    3480:	9e 83       	std	Y+6, r25	; 0x06
    3482:	8d 83       	std	Y+5, r24	; 0x05
    3484:	ae 01       	movw	r20, r28
    3486:	47 5e       	subi	r20, 0xE7	; 231
    3488:	5f 4f       	sbci	r21, 0xFF	; 255
    348a:	6f 89       	ldd	r22, Y+23	; 0x17
    348c:	78 8d       	ldd	r23, Y+24	; 0x18
    348e:	ce 01       	movw	r24, r28
    3490:	01 96       	adiw	r24, 0x01	; 1
    3492:	0e 94 5c 1a 	call	0x34b8	; 0x34b8 <vfprintf>
    3496:	2f 81       	ldd	r18, Y+7	; 0x07
    3498:	38 85       	ldd	r19, Y+8	; 0x08
    349a:	02 0f       	add	r16, r18
    349c:	13 1f       	adc	r17, r19
    349e:	f8 01       	movw	r30, r16
    34a0:	10 82       	st	Z, r1
    34a2:	2e 96       	adiw	r28, 0x0e	; 14
    34a4:	0f b6       	in	r0, 0x3f	; 63
    34a6:	f8 94       	cli
    34a8:	de bf       	out	0x3e, r29	; 62
    34aa:	0f be       	out	0x3f, r0	; 63
    34ac:	cd bf       	out	0x3d, r28	; 61
    34ae:	df 91       	pop	r29
    34b0:	cf 91       	pop	r28
    34b2:	1f 91       	pop	r17
    34b4:	0f 91       	pop	r16
    34b6:	08 95       	ret

000034b8 <vfprintf>:
vfprintf():
    34b8:	2f 92       	push	r2
    34ba:	3f 92       	push	r3
    34bc:	4f 92       	push	r4
    34be:	5f 92       	push	r5
    34c0:	6f 92       	push	r6
    34c2:	7f 92       	push	r7
    34c4:	8f 92       	push	r8
    34c6:	9f 92       	push	r9
    34c8:	af 92       	push	r10
    34ca:	bf 92       	push	r11
    34cc:	cf 92       	push	r12
    34ce:	df 92       	push	r13
    34d0:	ef 92       	push	r14
    34d2:	ff 92       	push	r15
    34d4:	0f 93       	push	r16
    34d6:	1f 93       	push	r17
    34d8:	cf 93       	push	r28
    34da:	df 93       	push	r29
    34dc:	cd b7       	in	r28, 0x3d	; 61
    34de:	de b7       	in	r29, 0x3e	; 62
    34e0:	2b 97       	sbiw	r28, 0x0b	; 11
    34e2:	0f b6       	in	r0, 0x3f	; 63
    34e4:	f8 94       	cli
    34e6:	de bf       	out	0x3e, r29	; 62
    34e8:	0f be       	out	0x3f, r0	; 63
    34ea:	cd bf       	out	0x3d, r28	; 61
    34ec:	7c 01       	movw	r14, r24
    34ee:	3b 01       	movw	r6, r22
    34f0:	8a 01       	movw	r16, r20
    34f2:	fc 01       	movw	r30, r24
    34f4:	17 82       	std	Z+7, r1	; 0x07
    34f6:	16 82       	std	Z+6, r1	; 0x06
    34f8:	83 81       	ldd	r24, Z+3	; 0x03
    34fa:	81 ff       	sbrs	r24, 1
    34fc:	dd c1       	rjmp	.+954    	; 0x38b8 <vfprintf+0x400>
    34fe:	ce 01       	movw	r24, r28
    3500:	01 96       	adiw	r24, 0x01	; 1
    3502:	5c 01       	movw	r10, r24
    3504:	f7 01       	movw	r30, r14
    3506:	93 81       	ldd	r25, Z+3	; 0x03
    3508:	f3 01       	movw	r30, r6
    350a:	93 fd       	sbrc	r25, 3
    350c:	85 91       	lpm	r24, Z+
    350e:	93 ff       	sbrs	r25, 3
    3510:	81 91       	ld	r24, Z+
    3512:	3f 01       	movw	r6, r30
    3514:	88 23       	and	r24, r24
    3516:	09 f4       	brne	.+2      	; 0x351a <vfprintf+0x62>
    3518:	53 c1       	rjmp	.+678    	; 0x37c0 <vfprintf+0x308>
    351a:	85 32       	cpi	r24, 0x25	; 37
    351c:	39 f4       	brne	.+14     	; 0x352c <vfprintf+0x74>
    351e:	93 fd       	sbrc	r25, 3
    3520:	85 91       	lpm	r24, Z+
    3522:	93 ff       	sbrs	r25, 3
    3524:	81 91       	ld	r24, Z+
    3526:	3f 01       	movw	r6, r30
    3528:	85 32       	cpi	r24, 0x25	; 37
    352a:	29 f4       	brne	.+10     	; 0x3536 <vfprintf+0x7e>
    352c:	b7 01       	movw	r22, r14
    352e:	90 e0       	ldi	r25, 0x00	; 0
    3530:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <fputc>
    3534:	e7 cf       	rjmp	.-50     	; 0x3504 <vfprintf+0x4c>
    3536:	91 2c       	mov	r9, r1
    3538:	21 2c       	mov	r2, r1
    353a:	31 2c       	mov	r3, r1
    353c:	ff e1       	ldi	r31, 0x1F	; 31
    353e:	f3 15       	cp	r31, r3
    3540:	38 f0       	brcs	.+14     	; 0x3550 <vfprintf+0x98>
    3542:	8b 32       	cpi	r24, 0x2B	; 43
    3544:	11 f1       	breq	.+68     	; 0x358a <vfprintf+0xd2>
    3546:	90 f4       	brcc	.+36     	; 0x356c <vfprintf+0xb4>
    3548:	80 32       	cpi	r24, 0x20	; 32
    354a:	09 f1       	breq	.+66     	; 0x358e <vfprintf+0xd6>
    354c:	83 32       	cpi	r24, 0x23	; 35
    354e:	29 f1       	breq	.+74     	; 0x359a <vfprintf+0xe2>
    3550:	37 fc       	sbrc	r3, 7
    3552:	3c c0       	rjmp	.+120    	; 0x35cc <vfprintf+0x114>
    3554:	20 ed       	ldi	r18, 0xD0	; 208
    3556:	28 0f       	add	r18, r24
    3558:	2a 30       	cpi	r18, 0x0A	; 10
    355a:	50 f5       	brcc	.+84     	; 0x35b0 <vfprintf+0xf8>
    355c:	36 fe       	sbrs	r3, 6
    355e:	20 c0       	rjmp	.+64     	; 0x35a0 <vfprintf+0xe8>
    3560:	8a e0       	ldi	r24, 0x0A	; 10
    3562:	98 9e       	mul	r9, r24
    3564:	20 0d       	add	r18, r0
    3566:	11 24       	eor	r1, r1
    3568:	92 2e       	mov	r9, r18
    356a:	06 c0       	rjmp	.+12     	; 0x3578 <vfprintf+0xc0>
    356c:	8d 32       	cpi	r24, 0x2D	; 45
    356e:	91 f0       	breq	.+36     	; 0x3594 <vfprintf+0xdc>
    3570:	80 33       	cpi	r24, 0x30	; 48
    3572:	71 f7       	brne	.-36     	; 0x3550 <vfprintf+0x98>
    3574:	68 94       	set
    3576:	30 f8       	bld	r3, 0
    3578:	f3 01       	movw	r30, r6
    357a:	93 fd       	sbrc	r25, 3
    357c:	85 91       	lpm	r24, Z+
    357e:	93 ff       	sbrs	r25, 3
    3580:	81 91       	ld	r24, Z+
    3582:	3f 01       	movw	r6, r30
    3584:	81 11       	cpse	r24, r1
    3586:	da cf       	rjmp	.-76     	; 0x353c <vfprintf+0x84>
    3588:	21 c0       	rjmp	.+66     	; 0x35cc <vfprintf+0x114>
    358a:	68 94       	set
    358c:	31 f8       	bld	r3, 1
    358e:	68 94       	set
    3590:	32 f8       	bld	r3, 2
    3592:	f2 cf       	rjmp	.-28     	; 0x3578 <vfprintf+0xc0>
    3594:	68 94       	set
    3596:	33 f8       	bld	r3, 3
    3598:	ef cf       	rjmp	.-34     	; 0x3578 <vfprintf+0xc0>
    359a:	68 94       	set
    359c:	34 f8       	bld	r3, 4
    359e:	ec cf       	rjmp	.-40     	; 0x3578 <vfprintf+0xc0>
    35a0:	ea e0       	ldi	r30, 0x0A	; 10
    35a2:	2e 9e       	mul	r2, r30
    35a4:	20 0d       	add	r18, r0
    35a6:	11 24       	eor	r1, r1
    35a8:	22 2e       	mov	r2, r18
    35aa:	68 94       	set
    35ac:	35 f8       	bld	r3, 5
    35ae:	e4 cf       	rjmp	.-56     	; 0x3578 <vfprintf+0xc0>
    35b0:	8e 32       	cpi	r24, 0x2E	; 46
    35b2:	29 f4       	brne	.+10     	; 0x35be <vfprintf+0x106>
    35b4:	36 fc       	sbrc	r3, 6
    35b6:	04 c1       	rjmp	.+520    	; 0x37c0 <vfprintf+0x308>
    35b8:	68 94       	set
    35ba:	36 f8       	bld	r3, 6
    35bc:	dd cf       	rjmp	.-70     	; 0x3578 <vfprintf+0xc0>
    35be:	8c 36       	cpi	r24, 0x6C	; 108
    35c0:	19 f4       	brne	.+6      	; 0x35c8 <vfprintf+0x110>
    35c2:	68 94       	set
    35c4:	37 f8       	bld	r3, 7
    35c6:	d8 cf       	rjmp	.-80     	; 0x3578 <vfprintf+0xc0>
    35c8:	88 36       	cpi	r24, 0x68	; 104
    35ca:	b1 f2       	breq	.-84     	; 0x3578 <vfprintf+0xc0>
    35cc:	98 2f       	mov	r25, r24
    35ce:	9f 7d       	andi	r25, 0xDF	; 223
    35d0:	95 54       	subi	r25, 0x45	; 69
    35d2:	93 30       	cpi	r25, 0x03	; 3
    35d4:	e0 f0       	brcs	.+56     	; 0x360e <vfprintf+0x156>
    35d6:	83 36       	cpi	r24, 0x63	; 99
    35d8:	a1 f1       	breq	.+104    	; 0x3642 <vfprintf+0x18a>
    35da:	83 37       	cpi	r24, 0x73	; 115
    35dc:	c1 f1       	breq	.+112    	; 0x364e <vfprintf+0x196>
    35de:	83 35       	cpi	r24, 0x53	; 83
    35e0:	09 f0       	breq	.+2      	; 0x35e4 <vfprintf+0x12c>
    35e2:	63 c0       	rjmp	.+198    	; 0x36aa <vfprintf+0x1f2>
    35e4:	28 01       	movw	r4, r16
    35e6:	f2 e0       	ldi	r31, 0x02	; 2
    35e8:	4f 0e       	add	r4, r31
    35ea:	51 1c       	adc	r5, r1
    35ec:	f8 01       	movw	r30, r16
    35ee:	c0 80       	ld	r12, Z
    35f0:	d1 80       	ldd	r13, Z+1	; 0x01
    35f2:	69 2d       	mov	r22, r9
    35f4:	70 e0       	ldi	r23, 0x00	; 0
    35f6:	36 fc       	sbrc	r3, 6
    35f8:	02 c0       	rjmp	.+4      	; 0x35fe <vfprintf+0x146>
    35fa:	6f ef       	ldi	r22, 0xFF	; 255
    35fc:	7f ef       	ldi	r23, 0xFF	; 255
    35fe:	c6 01       	movw	r24, r12
    3600:	0e 94 b3 1e 	call	0x3d66	; 0x3d66 <strnlen_P>
    3604:	4c 01       	movw	r8, r24
    3606:	68 94       	set
    3608:	37 f8       	bld	r3, 7
    360a:	82 01       	movw	r16, r4
    360c:	0a c0       	rjmp	.+20     	; 0x3622 <vfprintf+0x16a>
    360e:	0c 5f       	subi	r16, 0xFC	; 252
    3610:	1f 4f       	sbci	r17, 0xFF	; 255
    3612:	ff e3       	ldi	r31, 0x3F	; 63
    3614:	f9 83       	std	Y+1, r31	; 0x01
    3616:	88 24       	eor	r8, r8
    3618:	83 94       	inc	r8
    361a:	91 2c       	mov	r9, r1
    361c:	65 01       	movw	r12, r10
    361e:	e8 94       	clt
    3620:	37 f8       	bld	r3, 7
    3622:	33 fe       	sbrs	r3, 3
    3624:	2d c0       	rjmp	.+90     	; 0x3680 <vfprintf+0x1c8>
    3626:	52 2c       	mov	r5, r2
    3628:	81 14       	cp	r8, r1
    362a:	91 04       	cpc	r9, r1
    362c:	71 f5       	brne	.+92     	; 0x368a <vfprintf+0x1d2>
    362e:	55 20       	and	r5, r5
    3630:	09 f4       	brne	.+2      	; 0x3634 <vfprintf+0x17c>
    3632:	68 cf       	rjmp	.-304    	; 0x3504 <vfprintf+0x4c>
    3634:	b7 01       	movw	r22, r14
    3636:	80 e2       	ldi	r24, 0x20	; 32
    3638:	90 e0       	ldi	r25, 0x00	; 0
    363a:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <fputc>
    363e:	5a 94       	dec	r5
    3640:	f6 cf       	rjmp	.-20     	; 0x362e <vfprintf+0x176>
    3642:	f8 01       	movw	r30, r16
    3644:	80 81       	ld	r24, Z
    3646:	89 83       	std	Y+1, r24	; 0x01
    3648:	0e 5f       	subi	r16, 0xFE	; 254
    364a:	1f 4f       	sbci	r17, 0xFF	; 255
    364c:	e4 cf       	rjmp	.-56     	; 0x3616 <vfprintf+0x15e>
    364e:	28 01       	movw	r4, r16
    3650:	f2 e0       	ldi	r31, 0x02	; 2
    3652:	4f 0e       	add	r4, r31
    3654:	51 1c       	adc	r5, r1
    3656:	f8 01       	movw	r30, r16
    3658:	c0 80       	ld	r12, Z
    365a:	d1 80       	ldd	r13, Z+1	; 0x01
    365c:	69 2d       	mov	r22, r9
    365e:	70 e0       	ldi	r23, 0x00	; 0
    3660:	36 fc       	sbrc	r3, 6
    3662:	02 c0       	rjmp	.+4      	; 0x3668 <vfprintf+0x1b0>
    3664:	6f ef       	ldi	r22, 0xFF	; 255
    3666:	7f ef       	ldi	r23, 0xFF	; 255
    3668:	c6 01       	movw	r24, r12
    366a:	0e 94 be 1e 	call	0x3d7c	; 0x3d7c <strnlen>
    366e:	4c 01       	movw	r8, r24
    3670:	82 01       	movw	r16, r4
    3672:	d5 cf       	rjmp	.-86     	; 0x361e <vfprintf+0x166>
    3674:	b7 01       	movw	r22, r14
    3676:	80 e2       	ldi	r24, 0x20	; 32
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <fputc>
    367e:	2a 94       	dec	r2
    3680:	28 14       	cp	r2, r8
    3682:	19 04       	cpc	r1, r9
    3684:	09 f0       	breq	.+2      	; 0x3688 <vfprintf+0x1d0>
    3686:	b0 f7       	brcc	.-20     	; 0x3674 <vfprintf+0x1bc>
    3688:	ce cf       	rjmp	.-100    	; 0x3626 <vfprintf+0x16e>
    368a:	f6 01       	movw	r30, r12
    368c:	37 fc       	sbrc	r3, 7
    368e:	85 91       	lpm	r24, Z+
    3690:	37 fe       	sbrs	r3, 7
    3692:	81 91       	ld	r24, Z+
    3694:	6f 01       	movw	r12, r30
    3696:	b7 01       	movw	r22, r14
    3698:	90 e0       	ldi	r25, 0x00	; 0
    369a:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <fputc>
    369e:	51 10       	cpse	r5, r1
    36a0:	5a 94       	dec	r5
    36a2:	f1 e0       	ldi	r31, 0x01	; 1
    36a4:	8f 1a       	sub	r8, r31
    36a6:	91 08       	sbc	r9, r1
    36a8:	bf cf       	rjmp	.-130    	; 0x3628 <vfprintf+0x170>
    36aa:	84 36       	cpi	r24, 0x64	; 100
    36ac:	19 f0       	breq	.+6      	; 0x36b4 <vfprintf+0x1fc>
    36ae:	89 36       	cpi	r24, 0x69	; 105
    36b0:	09 f0       	breq	.+2      	; 0x36b4 <vfprintf+0x1fc>
    36b2:	77 c0       	rjmp	.+238    	; 0x37a2 <vfprintf+0x2ea>
    36b4:	f8 01       	movw	r30, r16
    36b6:	37 fe       	sbrs	r3, 7
    36b8:	6b c0       	rjmp	.+214    	; 0x3790 <vfprintf+0x2d8>
    36ba:	60 81       	ld	r22, Z
    36bc:	71 81       	ldd	r23, Z+1	; 0x01
    36be:	82 81       	ldd	r24, Z+2	; 0x02
    36c0:	93 81       	ldd	r25, Z+3	; 0x03
    36c2:	0c 5f       	subi	r16, 0xFC	; 252
    36c4:	1f 4f       	sbci	r17, 0xFF	; 255
    36c6:	f3 2d       	mov	r31, r3
    36c8:	ff 76       	andi	r31, 0x6F	; 111
    36ca:	3f 2e       	mov	r3, r31
    36cc:	97 ff       	sbrs	r25, 7
    36ce:	09 c0       	rjmp	.+18     	; 0x36e2 <vfprintf+0x22a>
    36d0:	90 95       	com	r25
    36d2:	80 95       	com	r24
    36d4:	70 95       	com	r23
    36d6:	61 95       	neg	r22
    36d8:	7f 4f       	sbci	r23, 0xFF	; 255
    36da:	8f 4f       	sbci	r24, 0xFF	; 255
    36dc:	9f 4f       	sbci	r25, 0xFF	; 255
    36de:	68 94       	set
    36e0:	37 f8       	bld	r3, 7
    36e2:	2a e0       	ldi	r18, 0x0A	; 10
    36e4:	30 e0       	ldi	r19, 0x00	; 0
    36e6:	a5 01       	movw	r20, r10
    36e8:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__ultoa_invert>
    36ec:	c8 2e       	mov	r12, r24
    36ee:	ca 18       	sub	r12, r10
    36f0:	8c 2c       	mov	r8, r12
    36f2:	43 2c       	mov	r4, r3
    36f4:	36 fe       	sbrs	r3, 6
    36f6:	0c c0       	rjmp	.+24     	; 0x3710 <vfprintf+0x258>
    36f8:	e8 94       	clt
    36fa:	40 f8       	bld	r4, 0
    36fc:	c9 14       	cp	r12, r9
    36fe:	40 f4       	brcc	.+16     	; 0x3710 <vfprintf+0x258>
    3700:	34 fe       	sbrs	r3, 4
    3702:	05 c0       	rjmp	.+10     	; 0x370e <vfprintf+0x256>
    3704:	32 fc       	sbrc	r3, 2
    3706:	03 c0       	rjmp	.+6      	; 0x370e <vfprintf+0x256>
    3708:	f3 2d       	mov	r31, r3
    370a:	fe 7e       	andi	r31, 0xEE	; 238
    370c:	4f 2e       	mov	r4, r31
    370e:	89 2c       	mov	r8, r9
    3710:	44 fe       	sbrs	r4, 4
    3712:	aa c0       	rjmp	.+340    	; 0x3868 <vfprintf+0x3b0>
    3714:	fe 01       	movw	r30, r28
    3716:	ec 0d       	add	r30, r12
    3718:	f1 1d       	adc	r31, r1
    371a:	80 81       	ld	r24, Z
    371c:	80 33       	cpi	r24, 0x30	; 48
    371e:	09 f0       	breq	.+2      	; 0x3722 <vfprintf+0x26a>
    3720:	9c c0       	rjmp	.+312    	; 0x385a <vfprintf+0x3a2>
    3722:	24 2d       	mov	r18, r4
    3724:	29 7e       	andi	r18, 0xE9	; 233
    3726:	42 2e       	mov	r4, r18
    3728:	84 2d       	mov	r24, r4
    372a:	88 70       	andi	r24, 0x08	; 8
    372c:	58 2e       	mov	r5, r24
    372e:	43 fc       	sbrc	r4, 3
    3730:	aa c0       	rjmp	.+340    	; 0x3886 <vfprintf+0x3ce>
    3732:	40 fe       	sbrs	r4, 0
    3734:	a4 c0       	rjmp	.+328    	; 0x387e <vfprintf+0x3c6>
    3736:	9c 2c       	mov	r9, r12
    3738:	82 14       	cp	r8, r2
    373a:	18 f4       	brcc	.+6      	; 0x3742 <vfprintf+0x28a>
    373c:	2c 0c       	add	r2, r12
    373e:	92 2c       	mov	r9, r2
    3740:	98 18       	sub	r9, r8
    3742:	44 fe       	sbrs	r4, 4
    3744:	a6 c0       	rjmp	.+332    	; 0x3892 <vfprintf+0x3da>
    3746:	b7 01       	movw	r22, r14
    3748:	80 e3       	ldi	r24, 0x30	; 48
    374a:	90 e0       	ldi	r25, 0x00	; 0
    374c:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <fputc>
    3750:	42 fe       	sbrs	r4, 2
    3752:	09 c0       	rjmp	.+18     	; 0x3766 <vfprintf+0x2ae>
    3754:	88 e7       	ldi	r24, 0x78	; 120
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	41 fe       	sbrs	r4, 1
    375a:	02 c0       	rjmp	.+4      	; 0x3760 <vfprintf+0x2a8>
    375c:	88 e5       	ldi	r24, 0x58	; 88
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	b7 01       	movw	r22, r14
    3762:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <fputc>
    3766:	c9 14       	cp	r12, r9
    3768:	08 f4       	brcc	.+2      	; 0x376c <vfprintf+0x2b4>
    376a:	9f c0       	rjmp	.+318    	; 0x38aa <vfprintf+0x3f2>
    376c:	ca 94       	dec	r12
    376e:	d1 2c       	mov	r13, r1
    3770:	9f ef       	ldi	r25, 0xFF	; 255
    3772:	c9 1a       	sub	r12, r25
    3774:	d9 0a       	sbc	r13, r25
    3776:	ca 0c       	add	r12, r10
    3778:	db 1c       	adc	r13, r11
    377a:	f6 01       	movw	r30, r12
    377c:	82 91       	ld	r24, -Z
    377e:	6f 01       	movw	r12, r30
    3780:	b7 01       	movw	r22, r14
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <fputc>
    3788:	ac 14       	cp	r10, r12
    378a:	bd 04       	cpc	r11, r13
    378c:	b1 f7       	brne	.-20     	; 0x377a <vfprintf+0x2c2>
    378e:	4f cf       	rjmp	.-354    	; 0x362e <vfprintf+0x176>
    3790:	60 81       	ld	r22, Z
    3792:	71 81       	ldd	r23, Z+1	; 0x01
    3794:	07 2e       	mov	r0, r23
    3796:	00 0c       	add	r0, r0
    3798:	88 0b       	sbc	r24, r24
    379a:	99 0b       	sbc	r25, r25
    379c:	0e 5f       	subi	r16, 0xFE	; 254
    379e:	1f 4f       	sbci	r17, 0xFF	; 255
    37a0:	92 cf       	rjmp	.-220    	; 0x36c6 <vfprintf+0x20e>
    37a2:	d3 2c       	mov	r13, r3
    37a4:	e8 94       	clt
    37a6:	d4 f8       	bld	r13, 4
    37a8:	2a e0       	ldi	r18, 0x0A	; 10
    37aa:	30 e0       	ldi	r19, 0x00	; 0
    37ac:	85 37       	cpi	r24, 0x75	; 117
    37ae:	e1 f1       	breq	.+120    	; 0x3828 <vfprintf+0x370>
    37b0:	23 2d       	mov	r18, r3
    37b2:	29 7f       	andi	r18, 0xF9	; 249
    37b4:	d2 2e       	mov	r13, r18
    37b6:	8f 36       	cpi	r24, 0x6F	; 111
    37b8:	a9 f1       	breq	.+106    	; 0x3824 <vfprintf+0x36c>
    37ba:	f0 f4       	brcc	.+60     	; 0x37f8 <vfprintf+0x340>
    37bc:	88 35       	cpi	r24, 0x58	; 88
    37be:	51 f1       	breq	.+84     	; 0x3814 <vfprintf+0x35c>
    37c0:	f7 01       	movw	r30, r14
    37c2:	86 81       	ldd	r24, Z+6	; 0x06
    37c4:	97 81       	ldd	r25, Z+7	; 0x07
    37c6:	2b 96       	adiw	r28, 0x0b	; 11
    37c8:	0f b6       	in	r0, 0x3f	; 63
    37ca:	f8 94       	cli
    37cc:	de bf       	out	0x3e, r29	; 62
    37ce:	0f be       	out	0x3f, r0	; 63
    37d0:	cd bf       	out	0x3d, r28	; 61
    37d2:	df 91       	pop	r29
    37d4:	cf 91       	pop	r28
    37d6:	1f 91       	pop	r17
    37d8:	0f 91       	pop	r16
    37da:	ff 90       	pop	r15
    37dc:	ef 90       	pop	r14
    37de:	df 90       	pop	r13
    37e0:	cf 90       	pop	r12
    37e2:	bf 90       	pop	r11
    37e4:	af 90       	pop	r10
    37e6:	9f 90       	pop	r9
    37e8:	8f 90       	pop	r8
    37ea:	7f 90       	pop	r7
    37ec:	6f 90       	pop	r6
    37ee:	5f 90       	pop	r5
    37f0:	4f 90       	pop	r4
    37f2:	3f 90       	pop	r3
    37f4:	2f 90       	pop	r2
    37f6:	08 95       	ret
    37f8:	80 37       	cpi	r24, 0x70	; 112
    37fa:	49 f0       	breq	.+18     	; 0x380e <vfprintf+0x356>
    37fc:	88 37       	cpi	r24, 0x78	; 120
    37fe:	01 f7       	brne	.-64     	; 0x37c0 <vfprintf+0x308>
    3800:	d4 fe       	sbrs	r13, 4
    3802:	02 c0       	rjmp	.+4      	; 0x3808 <vfprintf+0x350>
    3804:	68 94       	set
    3806:	d2 f8       	bld	r13, 2
    3808:	20 e1       	ldi	r18, 0x10	; 16
    380a:	30 e0       	ldi	r19, 0x00	; 0
    380c:	0d c0       	rjmp	.+26     	; 0x3828 <vfprintf+0x370>
    380e:	68 94       	set
    3810:	d4 f8       	bld	r13, 4
    3812:	f6 cf       	rjmp	.-20     	; 0x3800 <vfprintf+0x348>
    3814:	34 fe       	sbrs	r3, 4
    3816:	03 c0       	rjmp	.+6      	; 0x381e <vfprintf+0x366>
    3818:	82 2f       	mov	r24, r18
    381a:	86 60       	ori	r24, 0x06	; 6
    381c:	d8 2e       	mov	r13, r24
    381e:	20 e1       	ldi	r18, 0x10	; 16
    3820:	32 e0       	ldi	r19, 0x02	; 2
    3822:	02 c0       	rjmp	.+4      	; 0x3828 <vfprintf+0x370>
    3824:	28 e0       	ldi	r18, 0x08	; 8
    3826:	30 e0       	ldi	r19, 0x00	; 0
    3828:	f8 01       	movw	r30, r16
    382a:	d7 fe       	sbrs	r13, 7
    382c:	0f c0       	rjmp	.+30     	; 0x384c <vfprintf+0x394>
    382e:	60 81       	ld	r22, Z
    3830:	71 81       	ldd	r23, Z+1	; 0x01
    3832:	82 81       	ldd	r24, Z+2	; 0x02
    3834:	93 81       	ldd	r25, Z+3	; 0x03
    3836:	0c 5f       	subi	r16, 0xFC	; 252
    3838:	1f 4f       	sbci	r17, 0xFF	; 255
    383a:	a5 01       	movw	r20, r10
    383c:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <__ultoa_invert>
    3840:	c8 2e       	mov	r12, r24
    3842:	ca 18       	sub	r12, r10
    3844:	3d 2c       	mov	r3, r13
    3846:	e8 94       	clt
    3848:	37 f8       	bld	r3, 7
    384a:	52 cf       	rjmp	.-348    	; 0x36f0 <vfprintf+0x238>
    384c:	60 81       	ld	r22, Z
    384e:	71 81       	ldd	r23, Z+1	; 0x01
    3850:	90 e0       	ldi	r25, 0x00	; 0
    3852:	80 e0       	ldi	r24, 0x00	; 0
    3854:	0e 5f       	subi	r16, 0xFE	; 254
    3856:	1f 4f       	sbci	r17, 0xFF	; 255
    3858:	f0 cf       	rjmp	.-32     	; 0x383a <vfprintf+0x382>
    385a:	42 fc       	sbrc	r4, 2
    385c:	02 c0       	rjmp	.+4      	; 0x3862 <vfprintf+0x3aa>
    385e:	83 94       	inc	r8
    3860:	63 cf       	rjmp	.-314    	; 0x3728 <vfprintf+0x270>
    3862:	83 94       	inc	r8
    3864:	83 94       	inc	r8
    3866:	60 cf       	rjmp	.-320    	; 0x3728 <vfprintf+0x270>
    3868:	84 2d       	mov	r24, r4
    386a:	86 78       	andi	r24, 0x86	; 134
    386c:	09 f4       	brne	.+2      	; 0x3870 <vfprintf+0x3b8>
    386e:	5c cf       	rjmp	.-328    	; 0x3728 <vfprintf+0x270>
    3870:	f6 cf       	rjmp	.-20     	; 0x385e <vfprintf+0x3a6>
    3872:	b7 01       	movw	r22, r14
    3874:	80 e2       	ldi	r24, 0x20	; 32
    3876:	90 e0       	ldi	r25, 0x00	; 0
    3878:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <fputc>
    387c:	83 94       	inc	r8
    387e:	82 14       	cp	r8, r2
    3880:	c0 f3       	brcs	.-16     	; 0x3872 <vfprintf+0x3ba>
    3882:	51 2c       	mov	r5, r1
    3884:	5e cf       	rjmp	.-324    	; 0x3742 <vfprintf+0x28a>
    3886:	52 2c       	mov	r5, r2
    3888:	58 18       	sub	r5, r8
    388a:	82 14       	cp	r8, r2
    388c:	08 f4       	brcc	.+2      	; 0x3890 <vfprintf+0x3d8>
    388e:	59 cf       	rjmp	.-334    	; 0x3742 <vfprintf+0x28a>
    3890:	f8 cf       	rjmp	.-16     	; 0x3882 <vfprintf+0x3ca>
    3892:	84 2d       	mov	r24, r4
    3894:	86 78       	andi	r24, 0x86	; 134
    3896:	09 f4       	brne	.+2      	; 0x389a <vfprintf+0x3e2>
    3898:	66 cf       	rjmp	.-308    	; 0x3766 <vfprintf+0x2ae>
    389a:	8b e2       	ldi	r24, 0x2B	; 43
    389c:	41 fe       	sbrs	r4, 1
    389e:	80 e2       	ldi	r24, 0x20	; 32
    38a0:	47 fc       	sbrc	r4, 7
    38a2:	8d e2       	ldi	r24, 0x2D	; 45
    38a4:	b7 01       	movw	r22, r14
    38a6:	90 e0       	ldi	r25, 0x00	; 0
    38a8:	5c cf       	rjmp	.-328    	; 0x3762 <vfprintf+0x2aa>
    38aa:	b7 01       	movw	r22, r14
    38ac:	80 e3       	ldi	r24, 0x30	; 48
    38ae:	90 e0       	ldi	r25, 0x00	; 0
    38b0:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <fputc>
    38b4:	9a 94       	dec	r9
    38b6:	57 cf       	rjmp	.-338    	; 0x3766 <vfprintf+0x2ae>
    38b8:	8f ef       	ldi	r24, 0xFF	; 255
    38ba:	9f ef       	ldi	r25, 0xFF	; 255
    38bc:	84 cf       	rjmp	.-248    	; 0x37c6 <vfprintf+0x30e>

000038be <dtoa_prf>:
dtoa_prf():
    38be:	8f 92       	push	r8
    38c0:	9f 92       	push	r9
    38c2:	af 92       	push	r10
    38c4:	bf 92       	push	r11
    38c6:	cf 92       	push	r12
    38c8:	df 92       	push	r13
    38ca:	ef 92       	push	r14
    38cc:	ff 92       	push	r15
    38ce:	0f 93       	push	r16
    38d0:	1f 93       	push	r17
    38d2:	cf 93       	push	r28
    38d4:	df 93       	push	r29
    38d6:	cd b7       	in	r28, 0x3d	; 61
    38d8:	de b7       	in	r29, 0x3e	; 62
    38da:	29 97       	sbiw	r28, 0x09	; 9
    38dc:	0f b6       	in	r0, 0x3f	; 63
    38de:	f8 94       	cli
    38e0:	de bf       	out	0x3e, r29	; 62
    38e2:	0f be       	out	0x3f, r0	; 63
    38e4:	cd bf       	out	0x3d, r28	; 61
    38e6:	6a 01       	movw	r12, r20
    38e8:	f2 2e       	mov	r15, r18
    38ea:	b0 2e       	mov	r11, r16
    38ec:	10 2f       	mov	r17, r16
    38ee:	fb e3       	ldi	r31, 0x3B	; 59
    38f0:	af 2e       	mov	r10, r31
    38f2:	a0 16       	cp	r10, r16
    38f4:	08 f4       	brcc	.+2      	; 0x38f8 <dtoa_prf+0x3a>
    38f6:	1b e3       	ldi	r17, 0x3B	; 59
    38f8:	1f 5f       	subi	r17, 0xFF	; 255
    38fa:	01 2f       	mov	r16, r17
    38fc:	27 e0       	ldi	r18, 0x07	; 7
    38fe:	ae 01       	movw	r20, r28
    3900:	4f 5f       	subi	r20, 0xFF	; 255
    3902:	5f 4f       	sbci	r21, 0xFF	; 255
    3904:	0e 94 db 1d 	call	0x3bb6	; 0x3bb6 <__ftoa_engine>
    3908:	bc 01       	movw	r22, r24
    390a:	89 81       	ldd	r24, Y+1	; 0x01
    390c:	98 2f       	mov	r25, r24
    390e:	99 70       	andi	r25, 0x09	; 9
    3910:	91 30       	cpi	r25, 0x01	; 1
    3912:	09 f4       	brne	.+2      	; 0x3916 <dtoa_prf+0x58>
    3914:	4e c0       	rjmp	.+156    	; 0x39b2 <dtoa_prf+0xf4>
    3916:	9b e2       	ldi	r25, 0x2B	; 43
    3918:	e1 fc       	sbrc	r14, 1
    391a:	04 c0       	rjmp	.+8      	; 0x3924 <dtoa_prf+0x66>
    391c:	9e 2d       	mov	r25, r14
    391e:	91 70       	andi	r25, 0x01	; 1
    3920:	e0 fc       	sbrc	r14, 0
    3922:	49 c0       	rjmp	.+146    	; 0x39b6 <dtoa_prf+0xf8>
    3924:	5e 2d       	mov	r21, r14
    3926:	50 71       	andi	r21, 0x10	; 16
    3928:	e8 2f       	mov	r30, r24
    392a:	e8 70       	andi	r30, 0x08	; 8
    392c:	83 ff       	sbrs	r24, 3
    392e:	55 c0       	rjmp	.+170    	; 0x39da <dtoa_prf+0x11c>
    3930:	84 e0       	ldi	r24, 0x04	; 4
    3932:	91 11       	cpse	r25, r1
    3934:	01 c0       	rjmp	.+2      	; 0x3938 <dtoa_prf+0x7a>
    3936:	83 e0       	ldi	r24, 0x03	; 3
    3938:	ef 2d       	mov	r30, r15
    393a:	e8 1b       	sub	r30, r24
    393c:	8f 15       	cp	r24, r15
    393e:	08 f0       	brcs	.+2      	; 0x3942 <dtoa_prf+0x84>
    3940:	e0 e0       	ldi	r30, 0x00	; 0
    3942:	d6 01       	movw	r26, r12
    3944:	8e 2f       	mov	r24, r30
    3946:	20 e2       	ldi	r18, 0x20	; 32
    3948:	55 23       	and	r21, r21
    394a:	c9 f1       	breq	.+114    	; 0x39be <dtoa_prf+0x100>
    394c:	99 23       	and	r25, r25
    394e:	29 f0       	breq	.+10     	; 0x395a <dtoa_prf+0x9c>
    3950:	d6 01       	movw	r26, r12
    3952:	9c 93       	st	X, r25
    3954:	c6 01       	movw	r24, r12
    3956:	01 96       	adiw	r24, 0x01	; 1
    3958:	6c 01       	movw	r12, r24
    395a:	96 01       	movw	r18, r12
    395c:	2d 5f       	subi	r18, 0xFD	; 253
    395e:	3f 4f       	sbci	r19, 0xFF	; 255
    3960:	e2 fe       	sbrs	r14, 2
    3962:	33 c0       	rjmp	.+102    	; 0x39ca <dtoa_prf+0x10c>
    3964:	8e e4       	ldi	r24, 0x4E	; 78
    3966:	d6 01       	movw	r26, r12
    3968:	8c 93       	st	X, r24
    396a:	91 e4       	ldi	r25, 0x41	; 65
    396c:	11 96       	adiw	r26, 0x01	; 1
    396e:	9c 93       	st	X, r25
    3970:	11 97       	sbiw	r26, 0x01	; 1
    3972:	12 96       	adiw	r26, 0x02	; 2
    3974:	8c 93       	st	X, r24
    3976:	d9 01       	movw	r26, r18
    3978:	8e 2f       	mov	r24, r30
    397a:	90 e2       	ldi	r25, 0x20	; 32
    397c:	81 11       	cpse	r24, r1
    397e:	2a c0       	rjmp	.+84     	; 0x39d4 <dtoa_prf+0x116>
    3980:	e2 0f       	add	r30, r18
    3982:	f3 2f       	mov	r31, r19
    3984:	f1 1d       	adc	r31, r1
    3986:	10 82       	st	Z, r1
    3988:	8e ef       	ldi	r24, 0xFE	; 254
    398a:	9f ef       	ldi	r25, 0xFF	; 255
    398c:	29 96       	adiw	r28, 0x09	; 9
    398e:	0f b6       	in	r0, 0x3f	; 63
    3990:	f8 94       	cli
    3992:	de bf       	out	0x3e, r29	; 62
    3994:	0f be       	out	0x3f, r0	; 63
    3996:	cd bf       	out	0x3d, r28	; 61
    3998:	df 91       	pop	r29
    399a:	cf 91       	pop	r28
    399c:	1f 91       	pop	r17
    399e:	0f 91       	pop	r16
    39a0:	ff 90       	pop	r15
    39a2:	ef 90       	pop	r14
    39a4:	df 90       	pop	r13
    39a6:	cf 90       	pop	r12
    39a8:	bf 90       	pop	r11
    39aa:	af 90       	pop	r10
    39ac:	9f 90       	pop	r9
    39ae:	8f 90       	pop	r8
    39b0:	08 95       	ret
    39b2:	9d e2       	ldi	r25, 0x2D	; 45
    39b4:	b7 cf       	rjmp	.-146    	; 0x3924 <dtoa_prf+0x66>
    39b6:	90 e2       	ldi	r25, 0x20	; 32
    39b8:	b5 cf       	rjmp	.-150    	; 0x3924 <dtoa_prf+0x66>
    39ba:	2d 93       	st	X+, r18
    39bc:	81 50       	subi	r24, 0x01	; 1
    39be:	81 11       	cpse	r24, r1
    39c0:	fc cf       	rjmp	.-8      	; 0x39ba <dtoa_prf+0xfc>
    39c2:	ce 0e       	add	r12, r30
    39c4:	d1 1c       	adc	r13, r1
    39c6:	e0 e0       	ldi	r30, 0x00	; 0
    39c8:	c1 cf       	rjmp	.-126    	; 0x394c <dtoa_prf+0x8e>
    39ca:	8e e6       	ldi	r24, 0x6E	; 110
    39cc:	d6 01       	movw	r26, r12
    39ce:	8c 93       	st	X, r24
    39d0:	91 e6       	ldi	r25, 0x61	; 97
    39d2:	cc cf       	rjmp	.-104    	; 0x396c <dtoa_prf+0xae>
    39d4:	9d 93       	st	X+, r25
    39d6:	81 50       	subi	r24, 0x01	; 1
    39d8:	d1 cf       	rjmp	.-94     	; 0x397c <dtoa_prf+0xbe>
    39da:	48 2f       	mov	r20, r24
    39dc:	44 70       	andi	r20, 0x04	; 4
    39de:	82 ff       	sbrs	r24, 2
    39e0:	3d c0       	rjmp	.+122    	; 0x3a5c <dtoa_prf+0x19e>
    39e2:	84 e0       	ldi	r24, 0x04	; 4
    39e4:	91 11       	cpse	r25, r1
    39e6:	01 c0       	rjmp	.+2      	; 0x39ea <dtoa_prf+0x12c>
    39e8:	83 e0       	ldi	r24, 0x03	; 3
    39ea:	8f 15       	cp	r24, r15
    39ec:	10 f4       	brcc	.+4      	; 0x39f2 <dtoa_prf+0x134>
    39ee:	ef 2d       	mov	r30, r15
    39f0:	e8 1b       	sub	r30, r24
    39f2:	d6 01       	movw	r26, r12
    39f4:	8e 2f       	mov	r24, r30
    39f6:	20 e2       	ldi	r18, 0x20	; 32
    39f8:	55 23       	and	r21, r21
    39fa:	09 f1       	breq	.+66     	; 0x3a3e <dtoa_prf+0x180>
    39fc:	99 23       	and	r25, r25
    39fe:	29 f0       	breq	.+10     	; 0x3a0a <dtoa_prf+0x14c>
    3a00:	d6 01       	movw	r26, r12
    3a02:	9c 93       	st	X, r25
    3a04:	c6 01       	movw	r24, r12
    3a06:	01 96       	adiw	r24, 0x01	; 1
    3a08:	6c 01       	movw	r12, r24
    3a0a:	96 01       	movw	r18, r12
    3a0c:	2d 5f       	subi	r18, 0xFD	; 253
    3a0e:	3f 4f       	sbci	r19, 0xFF	; 255
    3a10:	e2 fe       	sbrs	r14, 2
    3a12:	1b c0       	rjmp	.+54     	; 0x3a4a <dtoa_prf+0x18c>
    3a14:	89 e4       	ldi	r24, 0x49	; 73
    3a16:	d6 01       	movw	r26, r12
    3a18:	8c 93       	st	X, r24
    3a1a:	8e e4       	ldi	r24, 0x4E	; 78
    3a1c:	11 96       	adiw	r26, 0x01	; 1
    3a1e:	8c 93       	st	X, r24
    3a20:	11 97       	sbiw	r26, 0x01	; 1
    3a22:	86 e4       	ldi	r24, 0x46	; 70
    3a24:	12 96       	adiw	r26, 0x02	; 2
    3a26:	8c 93       	st	X, r24
    3a28:	d9 01       	movw	r26, r18
    3a2a:	8e 2f       	mov	r24, r30
    3a2c:	90 e2       	ldi	r25, 0x20	; 32
    3a2e:	88 23       	and	r24, r24
    3a30:	09 f4       	brne	.+2      	; 0x3a34 <dtoa_prf+0x176>
    3a32:	a6 cf       	rjmp	.-180    	; 0x3980 <dtoa_prf+0xc2>
    3a34:	9d 93       	st	X+, r25
    3a36:	81 50       	subi	r24, 0x01	; 1
    3a38:	fa cf       	rjmp	.-12     	; 0x3a2e <dtoa_prf+0x170>
    3a3a:	2d 93       	st	X+, r18
    3a3c:	81 50       	subi	r24, 0x01	; 1
    3a3e:	81 11       	cpse	r24, r1
    3a40:	fc cf       	rjmp	.-8      	; 0x3a3a <dtoa_prf+0x17c>
    3a42:	ce 0e       	add	r12, r30
    3a44:	d1 1c       	adc	r13, r1
    3a46:	e0 e0       	ldi	r30, 0x00	; 0
    3a48:	d9 cf       	rjmp	.-78     	; 0x39fc <dtoa_prf+0x13e>
    3a4a:	89 e6       	ldi	r24, 0x69	; 105
    3a4c:	d6 01       	movw	r26, r12
    3a4e:	8c 93       	st	X, r24
    3a50:	8e e6       	ldi	r24, 0x6E	; 110
    3a52:	11 96       	adiw	r26, 0x01	; 1
    3a54:	8c 93       	st	X, r24
    3a56:	11 97       	sbiw	r26, 0x01	; 1
    3a58:	86 e6       	ldi	r24, 0x66	; 102
    3a5a:	e4 cf       	rjmp	.-56     	; 0x3a24 <dtoa_prf+0x166>
    3a5c:	9b 01       	movw	r18, r22
    3a5e:	77 ff       	sbrs	r23, 7
    3a60:	02 c0       	rjmp	.+4      	; 0x3a66 <dtoa_prf+0x1a8>
    3a62:	30 e0       	ldi	r19, 0x00	; 0
    3a64:	20 e0       	ldi	r18, 0x00	; 0
    3a66:	a1 e0       	ldi	r26, 0x01	; 1
    3a68:	b0 e0       	ldi	r27, 0x00	; 0
    3a6a:	91 11       	cpse	r25, r1
    3a6c:	02 c0       	rjmp	.+4      	; 0x3a72 <dtoa_prf+0x1b4>
    3a6e:	b0 e0       	ldi	r27, 0x00	; 0
    3a70:	a0 e0       	ldi	r26, 0x00	; 0
    3a72:	f9 01       	movw	r30, r18
    3a74:	31 96       	adiw	r30, 0x01	; 1
    3a76:	ae 0f       	add	r26, r30
    3a78:	bf 1f       	adc	r27, r31
    3a7a:	8b 2c       	mov	r8, r11
    3a7c:	91 2c       	mov	r9, r1
    3a7e:	bb 20       	and	r11, r11
    3a80:	09 f4       	brne	.+2      	; 0x3a84 <dtoa_prf+0x1c6>
    3a82:	61 c0       	rjmp	.+194    	; 0x3b46 <dtoa_prf+0x288>
    3a84:	54 01       	movw	r10, r8
    3a86:	ef ef       	ldi	r30, 0xFF	; 255
    3a88:	ae 1a       	sub	r10, r30
    3a8a:	be 0a       	sbc	r11, r30
    3a8c:	aa 0d       	add	r26, r10
    3a8e:	bb 1d       	adc	r27, r11
    3a90:	fa 16       	cp	r15, r26
    3a92:	1b 06       	cpc	r1, r27
    3a94:	19 f0       	breq	.+6      	; 0x3a9c <dtoa_prf+0x1de>
    3a96:	14 f0       	brlt	.+4      	; 0x3a9c <dtoa_prf+0x1de>
    3a98:	4f 2d       	mov	r20, r15
    3a9a:	4a 1b       	sub	r20, r26
    3a9c:	51 11       	cpse	r21, r1
    3a9e:	88 c0       	rjmp	.+272    	; 0x3bb0 <dtoa_prf+0x2f2>
    3aa0:	e3 fc       	sbrc	r14, 3
    3aa2:	59 c0       	rjmp	.+178    	; 0x3b56 <dtoa_prf+0x298>
    3aa4:	76 01       	movw	r14, r12
    3aa6:	a4 2f       	mov	r26, r20
    3aa8:	b0 e2       	ldi	r27, 0x20	; 32
    3aaa:	a1 11       	cpse	r26, r1
    3aac:	4f c0       	rjmp	.+158    	; 0x3b4c <dtoa_prf+0x28e>
    3aae:	c4 0e       	add	r12, r20
    3ab0:	d1 1c       	adc	r13, r1
    3ab2:	99 23       	and	r25, r25
    3ab4:	09 f4       	brne	.+2      	; 0x3ab8 <dtoa_prf+0x1fa>
    3ab6:	5b c0       	rjmp	.+182    	; 0x3b6e <dtoa_prf+0x2b0>
    3ab8:	40 e0       	ldi	r20, 0x00	; 0
    3aba:	d6 01       	movw	r26, r12
    3abc:	11 96       	adiw	r26, 0x01	; 1
    3abe:	f6 01       	movw	r30, r12
    3ac0:	90 83       	st	Z, r25
    3ac2:	6d 01       	movw	r12, r26
    3ac4:	55 23       	and	r21, r21
    3ac6:	09 f4       	brne	.+2      	; 0x3aca <dtoa_prf+0x20c>
    3ac8:	48 c0       	rjmp	.+144    	; 0x3b5a <dtoa_prf+0x29c>
    3aca:	01 2f       	mov	r16, r17
    3acc:	06 0f       	add	r16, r22
    3ace:	9a 81       	ldd	r25, Y+2	; 0x02
    3ad0:	58 2f       	mov	r21, r24
    3ad2:	50 71       	andi	r21, 0x10	; 16
    3ad4:	84 ff       	sbrs	r24, 4
    3ad6:	03 c0       	rjmp	.+6      	; 0x3ade <dtoa_prf+0x220>
    3ad8:	91 33       	cpi	r25, 0x31	; 49
    3ada:	09 f4       	brne	.+2      	; 0x3ade <dtoa_prf+0x220>
    3adc:	01 50       	subi	r16, 0x01	; 1
    3ade:	10 16       	cp	r1, r16
    3ae0:	0c f0       	brlt	.+2      	; 0x3ae4 <dtoa_prf+0x226>
    3ae2:	47 c0       	rjmp	.+142    	; 0x3b72 <dtoa_prf+0x2b4>
    3ae4:	09 30       	cpi	r16, 0x09	; 9
    3ae6:	08 f0       	brcs	.+2      	; 0x3aea <dtoa_prf+0x22c>
    3ae8:	08 e0       	ldi	r16, 0x08	; 8
    3aea:	ee e2       	ldi	r30, 0x2E	; 46
    3aec:	fe 2e       	mov	r15, r30
    3aee:	5b 01       	movw	r10, r22
    3af0:	a0 1a       	sub	r10, r16
    3af2:	b1 08       	sbc	r11, r1
    3af4:	85 01       	movw	r16, r10
    3af6:	91 94       	neg	r9
    3af8:	81 94       	neg	r8
    3afa:	91 08       	sbc	r9, r1
    3afc:	2f 3f       	cpi	r18, 0xFF	; 255
    3afe:	32 07       	cpc	r19, r18
    3b00:	29 f4       	brne	.+10     	; 0x3b0c <dtoa_prf+0x24e>
    3b02:	d6 01       	movw	r26, r12
    3b04:	fc 92       	st	X, r15
    3b06:	f6 01       	movw	r30, r12
    3b08:	31 96       	adiw	r30, 0x01	; 1
    3b0a:	6f 01       	movw	r12, r30
    3b0c:	62 17       	cp	r22, r18
    3b0e:	73 07       	cpc	r23, r19
    3b10:	94 f1       	brlt	.+100    	; 0x3b76 <dtoa_prf+0x2b8>
    3b12:	02 17       	cp	r16, r18
    3b14:	13 07       	cpc	r17, r19
    3b16:	7c f5       	brge	.+94     	; 0x3b76 <dtoa_prf+0x2b8>
    3b18:	db 01       	movw	r26, r22
    3b1a:	a2 1b       	sub	r26, r18
    3b1c:	b3 0b       	sbc	r27, r19
    3b1e:	aa 24       	eor	r10, r10
    3b20:	a3 94       	inc	r10
    3b22:	b1 2c       	mov	r11, r1
    3b24:	ac 0e       	add	r10, r28
    3b26:	bd 1e       	adc	r11, r29
    3b28:	aa 0d       	add	r26, r10
    3b2a:	bb 1d       	adc	r27, r11
    3b2c:	11 96       	adiw	r26, 0x01	; 1
    3b2e:	8c 91       	ld	r24, X
    3b30:	21 50       	subi	r18, 0x01	; 1
    3b32:	31 09       	sbc	r19, r1
    3b34:	d6 01       	movw	r26, r12
    3b36:	11 96       	adiw	r26, 0x01	; 1
    3b38:	28 15       	cp	r18, r8
    3b3a:	39 05       	cpc	r19, r9
    3b3c:	f4 f0       	brlt	.+60     	; 0x3b7a <dtoa_prf+0x2bc>
    3b3e:	f6 01       	movw	r30, r12
    3b40:	80 83       	st	Z, r24
    3b42:	6d 01       	movw	r12, r26
    3b44:	db cf       	rjmp	.-74     	; 0x3afc <dtoa_prf+0x23e>
    3b46:	b1 2c       	mov	r11, r1
    3b48:	a1 2c       	mov	r10, r1
    3b4a:	a0 cf       	rjmp	.-192    	; 0x3a8c <dtoa_prf+0x1ce>
    3b4c:	f7 01       	movw	r30, r14
    3b4e:	b1 93       	st	Z+, r27
    3b50:	7f 01       	movw	r14, r30
    3b52:	a1 50       	subi	r26, 0x01	; 1
    3b54:	aa cf       	rjmp	.-172    	; 0x3aaa <dtoa_prf+0x1ec>
    3b56:	91 11       	cpse	r25, r1
    3b58:	b0 cf       	rjmp	.-160    	; 0x3aba <dtoa_prf+0x1fc>
    3b5a:	d6 01       	movw	r26, r12
    3b5c:	94 2f       	mov	r25, r20
    3b5e:	50 e3       	ldi	r21, 0x30	; 48
    3b60:	02 c0       	rjmp	.+4      	; 0x3b66 <dtoa_prf+0x2a8>
    3b62:	5d 93       	st	X+, r21
    3b64:	91 50       	subi	r25, 0x01	; 1
    3b66:	91 11       	cpse	r25, r1
    3b68:	fc cf       	rjmp	.-8      	; 0x3b62 <dtoa_prf+0x2a4>
    3b6a:	c4 0e       	add	r12, r20
    3b6c:	d1 1c       	adc	r13, r1
    3b6e:	40 e0       	ldi	r20, 0x00	; 0
    3b70:	ac cf       	rjmp	.-168    	; 0x3aca <dtoa_prf+0x20c>
    3b72:	01 e0       	ldi	r16, 0x01	; 1
    3b74:	ba cf       	rjmp	.-140    	; 0x3aea <dtoa_prf+0x22c>
    3b76:	80 e3       	ldi	r24, 0x30	; 48
    3b78:	db cf       	rjmp	.-74     	; 0x3b30 <dtoa_prf+0x272>
    3b7a:	62 17       	cp	r22, r18
    3b7c:	73 07       	cpc	r23, r19
    3b7e:	31 f4       	brne	.+12     	; 0x3b8c <dtoa_prf+0x2ce>
    3b80:	96 33       	cpi	r25, 0x36	; 54
    3b82:	88 f4       	brcc	.+34     	; 0x3ba6 <dtoa_prf+0x2e8>
    3b84:	95 33       	cpi	r25, 0x35	; 53
    3b86:	11 f4       	brne	.+4      	; 0x3b8c <dtoa_prf+0x2ce>
    3b88:	55 23       	and	r21, r21
    3b8a:	69 f0       	breq	.+26     	; 0x3ba6 <dtoa_prf+0x2e8>
    3b8c:	f6 01       	movw	r30, r12
    3b8e:	80 83       	st	Z, r24
    3b90:	fd 01       	movw	r30, r26
    3b92:	84 2f       	mov	r24, r20
    3b94:	90 e2       	ldi	r25, 0x20	; 32
    3b96:	81 11       	cpse	r24, r1
    3b98:	08 c0       	rjmp	.+16     	; 0x3baa <dtoa_prf+0x2ec>
    3b9a:	a4 0f       	add	r26, r20
    3b9c:	b1 1d       	adc	r27, r1
    3b9e:	1c 92       	st	X, r1
    3ba0:	90 e0       	ldi	r25, 0x00	; 0
    3ba2:	80 e0       	ldi	r24, 0x00	; 0
    3ba4:	f3 ce       	rjmp	.-538    	; 0x398c <dtoa_prf+0xce>
    3ba6:	81 e3       	ldi	r24, 0x31	; 49
    3ba8:	f1 cf       	rjmp	.-30     	; 0x3b8c <dtoa_prf+0x2ce>
    3baa:	91 93       	st	Z+, r25
    3bac:	81 50       	subi	r24, 0x01	; 1
    3bae:	f3 cf       	rjmp	.-26     	; 0x3b96 <dtoa_prf+0x2d8>
    3bb0:	91 11       	cpse	r25, r1
    3bb2:	83 cf       	rjmp	.-250    	; 0x3aba <dtoa_prf+0x1fc>
    3bb4:	8a cf       	rjmp	.-236    	; 0x3aca <dtoa_prf+0x20c>

00003bb6 <__ftoa_engine>:
__ftoa_engine():
    3bb6:	28 30       	cpi	r18, 0x08	; 8
    3bb8:	08 f0       	brcs	.+2      	; 0x3bbc <__ftoa_engine+0x6>
    3bba:	27 e0       	ldi	r18, 0x07	; 7
    3bbc:	33 27       	eor	r19, r19
    3bbe:	da 01       	movw	r26, r20
    3bc0:	99 0f       	add	r25, r25
    3bc2:	31 1d       	adc	r19, r1
    3bc4:	87 fd       	sbrc	r24, 7
    3bc6:	91 60       	ori	r25, 0x01	; 1
    3bc8:	00 96       	adiw	r24, 0x00	; 0
    3bca:	61 05       	cpc	r22, r1
    3bcc:	71 05       	cpc	r23, r1
    3bce:	39 f4       	brne	.+14     	; 0x3bde <__ftoa_engine+0x28>
    3bd0:	32 60       	ori	r19, 0x02	; 2
    3bd2:	2e 5f       	subi	r18, 0xFE	; 254
    3bd4:	3d 93       	st	X+, r19
    3bd6:	30 e3       	ldi	r19, 0x30	; 48
    3bd8:	2a 95       	dec	r18
    3bda:	e1 f7       	brne	.-8      	; 0x3bd4 <__ftoa_engine+0x1e>
    3bdc:	08 95       	ret
    3bde:	9f 3f       	cpi	r25, 0xFF	; 255
    3be0:	30 f0       	brcs	.+12     	; 0x3bee <__ftoa_engine+0x38>
    3be2:	80 38       	cpi	r24, 0x80	; 128
    3be4:	71 05       	cpc	r23, r1
    3be6:	61 05       	cpc	r22, r1
    3be8:	09 f0       	breq	.+2      	; 0x3bec <__ftoa_engine+0x36>
    3bea:	3c 5f       	subi	r19, 0xFC	; 252
    3bec:	3c 5f       	subi	r19, 0xFC	; 252
    3bee:	3d 93       	st	X+, r19
    3bf0:	91 30       	cpi	r25, 0x01	; 1
    3bf2:	08 f0       	brcs	.+2      	; 0x3bf6 <__ftoa_engine+0x40>
    3bf4:	80 68       	ori	r24, 0x80	; 128
    3bf6:	91 1d       	adc	r25, r1
    3bf8:	df 93       	push	r29
    3bfa:	cf 93       	push	r28
    3bfc:	1f 93       	push	r17
    3bfe:	0f 93       	push	r16
    3c00:	ff 92       	push	r15
    3c02:	ef 92       	push	r14
    3c04:	19 2f       	mov	r17, r25
    3c06:	98 7f       	andi	r25, 0xF8	; 248
    3c08:	96 95       	lsr	r25
    3c0a:	e9 2f       	mov	r30, r25
    3c0c:	96 95       	lsr	r25
    3c0e:	96 95       	lsr	r25
    3c10:	e9 0f       	add	r30, r25
    3c12:	ff 27       	eor	r31, r31
    3c14:	ea 51       	subi	r30, 0x1A	; 26
    3c16:	ff 4f       	sbci	r31, 0xFF	; 255
    3c18:	99 27       	eor	r25, r25
    3c1a:	33 27       	eor	r19, r19
    3c1c:	ee 24       	eor	r14, r14
    3c1e:	ff 24       	eor	r15, r15
    3c20:	a7 01       	movw	r20, r14
    3c22:	e7 01       	movw	r28, r14
    3c24:	05 90       	lpm	r0, Z+
    3c26:	08 94       	sec
    3c28:	07 94       	ror	r0
    3c2a:	28 f4       	brcc	.+10     	; 0x3c36 <__ftoa_engine+0x80>
    3c2c:	36 0f       	add	r19, r22
    3c2e:	e7 1e       	adc	r14, r23
    3c30:	f8 1e       	adc	r15, r24
    3c32:	49 1f       	adc	r20, r25
    3c34:	51 1d       	adc	r21, r1
    3c36:	66 0f       	add	r22, r22
    3c38:	77 1f       	adc	r23, r23
    3c3a:	88 1f       	adc	r24, r24
    3c3c:	99 1f       	adc	r25, r25
    3c3e:	06 94       	lsr	r0
    3c40:	a1 f7       	brne	.-24     	; 0x3c2a <__ftoa_engine+0x74>
    3c42:	05 90       	lpm	r0, Z+
    3c44:	07 94       	ror	r0
    3c46:	28 f4       	brcc	.+10     	; 0x3c52 <__ftoa_engine+0x9c>
    3c48:	e7 0e       	add	r14, r23
    3c4a:	f8 1e       	adc	r15, r24
    3c4c:	49 1f       	adc	r20, r25
    3c4e:	56 1f       	adc	r21, r22
    3c50:	c1 1d       	adc	r28, r1
    3c52:	77 0f       	add	r23, r23
    3c54:	88 1f       	adc	r24, r24
    3c56:	99 1f       	adc	r25, r25
    3c58:	66 1f       	adc	r22, r22
    3c5a:	06 94       	lsr	r0
    3c5c:	a1 f7       	brne	.-24     	; 0x3c46 <__ftoa_engine+0x90>
    3c5e:	05 90       	lpm	r0, Z+
    3c60:	07 94       	ror	r0
    3c62:	28 f4       	brcc	.+10     	; 0x3c6e <__ftoa_engine+0xb8>
    3c64:	f8 0e       	add	r15, r24
    3c66:	49 1f       	adc	r20, r25
    3c68:	56 1f       	adc	r21, r22
    3c6a:	c7 1f       	adc	r28, r23
    3c6c:	d1 1d       	adc	r29, r1
    3c6e:	88 0f       	add	r24, r24
    3c70:	99 1f       	adc	r25, r25
    3c72:	66 1f       	adc	r22, r22
    3c74:	77 1f       	adc	r23, r23
    3c76:	06 94       	lsr	r0
    3c78:	a1 f7       	brne	.-24     	; 0x3c62 <__ftoa_engine+0xac>
    3c7a:	05 90       	lpm	r0, Z+
    3c7c:	07 94       	ror	r0
    3c7e:	20 f4       	brcc	.+8      	; 0x3c88 <__ftoa_engine+0xd2>
    3c80:	49 0f       	add	r20, r25
    3c82:	56 1f       	adc	r21, r22
    3c84:	c7 1f       	adc	r28, r23
    3c86:	d8 1f       	adc	r29, r24
    3c88:	99 0f       	add	r25, r25
    3c8a:	66 1f       	adc	r22, r22
    3c8c:	77 1f       	adc	r23, r23
    3c8e:	88 1f       	adc	r24, r24
    3c90:	06 94       	lsr	r0
    3c92:	a9 f7       	brne	.-22     	; 0x3c7e <__ftoa_engine+0xc8>
    3c94:	84 91       	lpm	r24, Z
    3c96:	10 95       	com	r17
    3c98:	17 70       	andi	r17, 0x07	; 7
    3c9a:	41 f0       	breq	.+16     	; 0x3cac <__ftoa_engine+0xf6>
    3c9c:	d6 95       	lsr	r29
    3c9e:	c7 95       	ror	r28
    3ca0:	57 95       	ror	r21
    3ca2:	47 95       	ror	r20
    3ca4:	f7 94       	ror	r15
    3ca6:	e7 94       	ror	r14
    3ca8:	1a 95       	dec	r17
    3caa:	c1 f7       	brne	.-16     	; 0x3c9c <__ftoa_engine+0xe6>
    3cac:	ec e8       	ldi	r30, 0x8C	; 140
    3cae:	f0 e0       	ldi	r31, 0x00	; 0
    3cb0:	68 94       	set
    3cb2:	15 90       	lpm	r1, Z+
    3cb4:	15 91       	lpm	r17, Z+
    3cb6:	35 91       	lpm	r19, Z+
    3cb8:	65 91       	lpm	r22, Z+
    3cba:	95 91       	lpm	r25, Z+
    3cbc:	05 90       	lpm	r0, Z+
    3cbe:	7f e2       	ldi	r23, 0x2F	; 47
    3cc0:	73 95       	inc	r23
    3cc2:	e1 18       	sub	r14, r1
    3cc4:	f1 0a       	sbc	r15, r17
    3cc6:	43 0b       	sbc	r20, r19
    3cc8:	56 0b       	sbc	r21, r22
    3cca:	c9 0b       	sbc	r28, r25
    3ccc:	d0 09       	sbc	r29, r0
    3cce:	c0 f7       	brcc	.-16     	; 0x3cc0 <__ftoa_engine+0x10a>
    3cd0:	e1 0c       	add	r14, r1
    3cd2:	f1 1e       	adc	r15, r17
    3cd4:	43 1f       	adc	r20, r19
    3cd6:	56 1f       	adc	r21, r22
    3cd8:	c9 1f       	adc	r28, r25
    3cda:	d0 1d       	adc	r29, r0
    3cdc:	7e f4       	brtc	.+30     	; 0x3cfc <__ftoa_engine+0x146>
    3cde:	70 33       	cpi	r23, 0x30	; 48
    3ce0:	11 f4       	brne	.+4      	; 0x3ce6 <__ftoa_engine+0x130>
    3ce2:	8a 95       	dec	r24
    3ce4:	e6 cf       	rjmp	.-52     	; 0x3cb2 <__ftoa_engine+0xfc>
    3ce6:	e8 94       	clt
    3ce8:	01 50       	subi	r16, 0x01	; 1
    3cea:	30 f0       	brcs	.+12     	; 0x3cf8 <__ftoa_engine+0x142>
    3cec:	08 0f       	add	r16, r24
    3cee:	0a f4       	brpl	.+2      	; 0x3cf2 <__ftoa_engine+0x13c>
    3cf0:	00 27       	eor	r16, r16
    3cf2:	02 17       	cp	r16, r18
    3cf4:	08 f4       	brcc	.+2      	; 0x3cf8 <__ftoa_engine+0x142>
    3cf6:	20 2f       	mov	r18, r16
    3cf8:	23 95       	inc	r18
    3cfa:	02 2f       	mov	r16, r18
    3cfc:	7a 33       	cpi	r23, 0x3A	; 58
    3cfe:	28 f0       	brcs	.+10     	; 0x3d0a <__ftoa_engine+0x154>
    3d00:	79 e3       	ldi	r23, 0x39	; 57
    3d02:	7d 93       	st	X+, r23
    3d04:	2a 95       	dec	r18
    3d06:	e9 f7       	brne	.-6      	; 0x3d02 <__ftoa_engine+0x14c>
    3d08:	10 c0       	rjmp	.+32     	; 0x3d2a <__ftoa_engine+0x174>
    3d0a:	7d 93       	st	X+, r23
    3d0c:	2a 95       	dec	r18
    3d0e:	89 f6       	brne	.-94     	; 0x3cb2 <__ftoa_engine+0xfc>
    3d10:	06 94       	lsr	r0
    3d12:	97 95       	ror	r25
    3d14:	67 95       	ror	r22
    3d16:	37 95       	ror	r19
    3d18:	17 95       	ror	r17
    3d1a:	17 94       	ror	r1
    3d1c:	e1 18       	sub	r14, r1
    3d1e:	f1 0a       	sbc	r15, r17
    3d20:	43 0b       	sbc	r20, r19
    3d22:	56 0b       	sbc	r21, r22
    3d24:	c9 0b       	sbc	r28, r25
    3d26:	d0 09       	sbc	r29, r0
    3d28:	98 f0       	brcs	.+38     	; 0x3d50 <__ftoa_engine+0x19a>
    3d2a:	23 95       	inc	r18
    3d2c:	7e 91       	ld	r23, -X
    3d2e:	73 95       	inc	r23
    3d30:	7a 33       	cpi	r23, 0x3A	; 58
    3d32:	08 f0       	brcs	.+2      	; 0x3d36 <__ftoa_engine+0x180>
    3d34:	70 e3       	ldi	r23, 0x30	; 48
    3d36:	7c 93       	st	X, r23
    3d38:	20 13       	cpse	r18, r16
    3d3a:	b8 f7       	brcc	.-18     	; 0x3d2a <__ftoa_engine+0x174>
    3d3c:	7e 91       	ld	r23, -X
    3d3e:	70 61       	ori	r23, 0x10	; 16
    3d40:	7d 93       	st	X+, r23
    3d42:	30 f0       	brcs	.+12     	; 0x3d50 <__ftoa_engine+0x19a>
    3d44:	83 95       	inc	r24
    3d46:	71 e3       	ldi	r23, 0x31	; 49
    3d48:	7d 93       	st	X+, r23
    3d4a:	70 e3       	ldi	r23, 0x30	; 48
    3d4c:	2a 95       	dec	r18
    3d4e:	e1 f7       	brne	.-8      	; 0x3d48 <__ftoa_engine+0x192>
    3d50:	11 24       	eor	r1, r1
    3d52:	ef 90       	pop	r14
    3d54:	ff 90       	pop	r15
    3d56:	0f 91       	pop	r16
    3d58:	1f 91       	pop	r17
    3d5a:	cf 91       	pop	r28
    3d5c:	df 91       	pop	r29
    3d5e:	99 27       	eor	r25, r25
    3d60:	87 fd       	sbrc	r24, 7
    3d62:	90 95       	com	r25
    3d64:	08 95       	ret

00003d66 <strnlen_P>:
strnlen_P():
    3d66:	fc 01       	movw	r30, r24
    3d68:	05 90       	lpm	r0, Z+
    3d6a:	61 50       	subi	r22, 0x01	; 1
    3d6c:	70 40       	sbci	r23, 0x00	; 0
    3d6e:	01 10       	cpse	r0, r1
    3d70:	d8 f7       	brcc	.-10     	; 0x3d68 <strnlen_P+0x2>
    3d72:	80 95       	com	r24
    3d74:	90 95       	com	r25
    3d76:	8e 0f       	add	r24, r30
    3d78:	9f 1f       	adc	r25, r31
    3d7a:	08 95       	ret

00003d7c <strnlen>:
strnlen():
    3d7c:	fc 01       	movw	r30, r24
    3d7e:	61 50       	subi	r22, 0x01	; 1
    3d80:	70 40       	sbci	r23, 0x00	; 0
    3d82:	01 90       	ld	r0, Z+
    3d84:	01 10       	cpse	r0, r1
    3d86:	d8 f7       	brcc	.-10     	; 0x3d7e <strnlen+0x2>
    3d88:	80 95       	com	r24
    3d8a:	90 95       	com	r25
    3d8c:	8e 0f       	add	r24, r30
    3d8e:	9f 1f       	adc	r25, r31
    3d90:	08 95       	ret

00003d92 <fputc>:
fputc():
    3d92:	0f 93       	push	r16
    3d94:	1f 93       	push	r17
    3d96:	cf 93       	push	r28
    3d98:	df 93       	push	r29
    3d9a:	18 2f       	mov	r17, r24
    3d9c:	09 2f       	mov	r16, r25
    3d9e:	eb 01       	movw	r28, r22
    3da0:	8b 81       	ldd	r24, Y+3	; 0x03
    3da2:	81 fd       	sbrc	r24, 1
    3da4:	09 c0       	rjmp	.+18     	; 0x3db8 <fputc+0x26>
    3da6:	1f ef       	ldi	r17, 0xFF	; 255
    3da8:	0f ef       	ldi	r16, 0xFF	; 255
    3daa:	81 2f       	mov	r24, r17
    3dac:	90 2f       	mov	r25, r16
    3dae:	df 91       	pop	r29
    3db0:	cf 91       	pop	r28
    3db2:	1f 91       	pop	r17
    3db4:	0f 91       	pop	r16
    3db6:	08 95       	ret
    3db8:	82 ff       	sbrs	r24, 2
    3dba:	14 c0       	rjmp	.+40     	; 0x3de4 <fputc+0x52>
    3dbc:	2e 81       	ldd	r18, Y+6	; 0x06
    3dbe:	3f 81       	ldd	r19, Y+7	; 0x07
    3dc0:	8c 81       	ldd	r24, Y+4	; 0x04
    3dc2:	9d 81       	ldd	r25, Y+5	; 0x05
    3dc4:	28 17       	cp	r18, r24
    3dc6:	39 07       	cpc	r19, r25
    3dc8:	3c f4       	brge	.+14     	; 0x3dd8 <fputc+0x46>
    3dca:	e8 81       	ld	r30, Y
    3dcc:	f9 81       	ldd	r31, Y+1	; 0x01
    3dce:	cf 01       	movw	r24, r30
    3dd0:	01 96       	adiw	r24, 0x01	; 1
    3dd2:	99 83       	std	Y+1, r25	; 0x01
    3dd4:	88 83       	st	Y, r24
    3dd6:	10 83       	st	Z, r17
    3dd8:	8e 81       	ldd	r24, Y+6	; 0x06
    3dda:	9f 81       	ldd	r25, Y+7	; 0x07
    3ddc:	01 96       	adiw	r24, 0x01	; 1
    3dde:	9f 83       	std	Y+7, r25	; 0x07
    3de0:	8e 83       	std	Y+6, r24	; 0x06
    3de2:	e3 cf       	rjmp	.-58     	; 0x3daa <fputc+0x18>
    3de4:	e8 85       	ldd	r30, Y+8	; 0x08
    3de6:	f9 85       	ldd	r31, Y+9	; 0x09
    3de8:	81 2f       	mov	r24, r17
    3dea:	09 95       	icall
    3dec:	89 2b       	or	r24, r25
    3dee:	a1 f3       	breq	.-24     	; 0x3dd8 <fputc+0x46>
    3df0:	da cf       	rjmp	.-76     	; 0x3da6 <fputc+0x14>

00003df2 <__ultoa_invert>:
__ultoa_invert():
    3df2:	fa 01       	movw	r30, r20
    3df4:	aa 27       	eor	r26, r26
    3df6:	28 30       	cpi	r18, 0x08	; 8
    3df8:	51 f1       	breq	.+84     	; 0x3e4e <__ultoa_invert+0x5c>
    3dfa:	20 31       	cpi	r18, 0x10	; 16
    3dfc:	81 f1       	breq	.+96     	; 0x3e5e <__ultoa_invert+0x6c>
    3dfe:	e8 94       	clt
    3e00:	6f 93       	push	r22
    3e02:	6e 7f       	andi	r22, 0xFE	; 254
    3e04:	6e 5f       	subi	r22, 0xFE	; 254
    3e06:	7f 4f       	sbci	r23, 0xFF	; 255
    3e08:	8f 4f       	sbci	r24, 0xFF	; 255
    3e0a:	9f 4f       	sbci	r25, 0xFF	; 255
    3e0c:	af 4f       	sbci	r26, 0xFF	; 255
    3e0e:	b1 e0       	ldi	r27, 0x01	; 1
    3e10:	3e d0       	rcall	.+124    	; 0x3e8e <__ultoa_invert+0x9c>
    3e12:	b4 e0       	ldi	r27, 0x04	; 4
    3e14:	3c d0       	rcall	.+120    	; 0x3e8e <__ultoa_invert+0x9c>
    3e16:	67 0f       	add	r22, r23
    3e18:	78 1f       	adc	r23, r24
    3e1a:	89 1f       	adc	r24, r25
    3e1c:	9a 1f       	adc	r25, r26
    3e1e:	a1 1d       	adc	r26, r1
    3e20:	68 0f       	add	r22, r24
    3e22:	79 1f       	adc	r23, r25
    3e24:	8a 1f       	adc	r24, r26
    3e26:	91 1d       	adc	r25, r1
    3e28:	a1 1d       	adc	r26, r1
    3e2a:	6a 0f       	add	r22, r26
    3e2c:	71 1d       	adc	r23, r1
    3e2e:	81 1d       	adc	r24, r1
    3e30:	91 1d       	adc	r25, r1
    3e32:	a1 1d       	adc	r26, r1
    3e34:	20 d0       	rcall	.+64     	; 0x3e76 <__ultoa_invert+0x84>
    3e36:	09 f4       	brne	.+2      	; 0x3e3a <__ultoa_invert+0x48>
    3e38:	68 94       	set
    3e3a:	3f 91       	pop	r19
    3e3c:	2a e0       	ldi	r18, 0x0A	; 10
    3e3e:	26 9f       	mul	r18, r22
    3e40:	11 24       	eor	r1, r1
    3e42:	30 19       	sub	r19, r0
    3e44:	30 5d       	subi	r19, 0xD0	; 208
    3e46:	31 93       	st	Z+, r19
    3e48:	de f6       	brtc	.-74     	; 0x3e00 <__ultoa_invert+0xe>
    3e4a:	cf 01       	movw	r24, r30
    3e4c:	08 95       	ret
    3e4e:	46 2f       	mov	r20, r22
    3e50:	47 70       	andi	r20, 0x07	; 7
    3e52:	40 5d       	subi	r20, 0xD0	; 208
    3e54:	41 93       	st	Z+, r20
    3e56:	b3 e0       	ldi	r27, 0x03	; 3
    3e58:	0f d0       	rcall	.+30     	; 0x3e78 <__ultoa_invert+0x86>
    3e5a:	c9 f7       	brne	.-14     	; 0x3e4e <__ultoa_invert+0x5c>
    3e5c:	f6 cf       	rjmp	.-20     	; 0x3e4a <__ultoa_invert+0x58>
    3e5e:	46 2f       	mov	r20, r22
    3e60:	4f 70       	andi	r20, 0x0F	; 15
    3e62:	40 5d       	subi	r20, 0xD0	; 208
    3e64:	4a 33       	cpi	r20, 0x3A	; 58
    3e66:	18 f0       	brcs	.+6      	; 0x3e6e <__ultoa_invert+0x7c>
    3e68:	49 5d       	subi	r20, 0xD9	; 217
    3e6a:	31 fd       	sbrc	r19, 1
    3e6c:	40 52       	subi	r20, 0x20	; 32
    3e6e:	41 93       	st	Z+, r20
    3e70:	02 d0       	rcall	.+4      	; 0x3e76 <__ultoa_invert+0x84>
    3e72:	a9 f7       	brne	.-22     	; 0x3e5e <__ultoa_invert+0x6c>
    3e74:	ea cf       	rjmp	.-44     	; 0x3e4a <__ultoa_invert+0x58>
    3e76:	b4 e0       	ldi	r27, 0x04	; 4
    3e78:	a6 95       	lsr	r26
    3e7a:	97 95       	ror	r25
    3e7c:	87 95       	ror	r24
    3e7e:	77 95       	ror	r23
    3e80:	67 95       	ror	r22
    3e82:	ba 95       	dec	r27
    3e84:	c9 f7       	brne	.-14     	; 0x3e78 <__ultoa_invert+0x86>
    3e86:	00 97       	sbiw	r24, 0x00	; 0
    3e88:	61 05       	cpc	r22, r1
    3e8a:	71 05       	cpc	r23, r1
    3e8c:	08 95       	ret
    3e8e:	9b 01       	movw	r18, r22
    3e90:	ac 01       	movw	r20, r24
    3e92:	0a 2e       	mov	r0, r26
    3e94:	06 94       	lsr	r0
    3e96:	57 95       	ror	r21
    3e98:	47 95       	ror	r20
    3e9a:	37 95       	ror	r19
    3e9c:	27 95       	ror	r18
    3e9e:	ba 95       	dec	r27
    3ea0:	c9 f7       	brne	.-14     	; 0x3e94 <__ultoa_invert+0xa2>
    3ea2:	62 0f       	add	r22, r18
    3ea4:	73 1f       	adc	r23, r19
    3ea6:	84 1f       	adc	r24, r20
    3ea8:	95 1f       	adc	r25, r21
    3eaa:	a0 1d       	adc	r26, r0
    3eac:	08 95       	ret

00003eae <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    3eae:	f8 94       	cli

00003eb0 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    3eb0:	ff cf       	rjmp	.-2      	; 0x3eb0 <__stop_program>
