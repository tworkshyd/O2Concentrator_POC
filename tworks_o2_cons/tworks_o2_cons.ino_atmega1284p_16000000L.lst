
C:\Users\habeeba\AppData\Local\Temp\arduino_build_500438/tworks_o2_cons.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__ctors_end>
       4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       8:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      10:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      14:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      18:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      1c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      20:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      24:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      28:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      2c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      30:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      34:	0c 94 17 06 	jmp	0xc2e	; 0xc2e <__vector_13>
      38:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      3c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      40:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      44:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      48:	0c 94 04 14 	jmp	0x2808	; 0x2808 <__vector_18>
      4c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      50:	0c 94 25 17 	jmp	0x2e4a	; 0x2e4a <__vector_20>
      54:	0c 94 5b 17 	jmp	0x2eb6	; 0x2eb6 <__vector_21>
      58:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      5c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      60:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      64:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      68:	0c 94 df 12 	jmp	0x25be	; 0x25be <__vector_26>
      6c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      70:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      74:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      78:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      7c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      80:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      84:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      88:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	30 2e       	mov	r3, r16
      8e:	33 2e       	mov	r3, r19
      90:	31 00       	.word	0x0031	; ????

00000092 <charTable>:
      92:	7e 30 6d 79 33 5b 5f 70 7f 7b 77 1f 0d 3d 4f 47     ~0my3[_p.{w..=OG
	...
      be:	80 01 80 00 7e 30 6d 79 33 5b 5f 70 7f 7b 00 00     ....~0my3[_p.{..
      ce:	00 00 00 00 00 77 1f 0d 3d 4f 47 00 37 00 00 00     .....w..=OG.7...
      de:	0e 00 00 00 67 00 00 00 00 00 00 00 00 00 00 00     ....g...........
      ee:	00 00 00 08 00 77 1f 0d 3d 4f 47 00 37 00 00 00     .....w..=OG.7...
      fe:	0e 00 15 1d 67 00 00 00 00 00 00 00 00 00 00 00     ....g...........
     10e:	00 00 00 00                                         ....

00000112 <digital_pin_to_timer_PGM>:
     112:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

00000132 <digital_pin_to_bit_mask_PGM>:
     132:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     142:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

00000152 <digital_pin_to_port_PGM>:
     152:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     162:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

00000172 <port_to_input_PGM>:
     172:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

0000017c <port_to_output_PGM>:
     17c:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

00000186 <port_to_mode_PGM>:
     186:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

00000190 <__ctors_start>:
__ctors_start():
     190:	ab 0b       	sbc	r26, r27
     192:	d0 11       	cpse	r29, r0
     194:	8f 17       	cp	r24, r31

00000196 <__ctors_end>:
__dtors_end():
     196:	11 24       	eor	r1, r1
     198:	1f be       	out	0x3f, r1	; 63
     19a:	cf ef       	ldi	r28, 0xFF	; 255
     19c:	d0 e4       	ldi	r29, 0x40	; 64
     19e:	de bf       	out	0x3e, r29	; 62
     1a0:	cd bf       	out	0x3d, r28	; 61

000001a2 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     1a2:	13 e0       	ldi	r17, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     1a4:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     1a6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     1a8:	e8 e2       	ldi	r30, 0x28	; 40
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     1aa:	ff e3       	ldi	r31, 0x3F	; 63
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     1ac:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     1ae:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     1b2:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     1b4:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     1b6:	a8 3e       	cpi	r26, 0xE8	; 232
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     1b8:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     1ba:	d9 f7       	brne	.-10     	; 0x1b2 <__do_copy_data+0x10>

000001bc <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1bc:	26 e0       	ldi	r18, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1be:	a8 ee       	ldi	r26, 0xE8	; 232
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1c0:	b3 e0       	ldi	r27, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <.do_clear_bss_start>

000001c4 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1c4:	1d 92       	st	X+, r1

000001c6 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1c6:	a4 34       	cpi	r26, 0x44	; 68
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1c8:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     1ca:	e1 f7       	brne	.-8      	; 0x1c4 <.do_clear_bss_loop>

000001cc <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     1cc:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     1ce:	cb ec       	ldi	r28, 0xCB	; 203
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     1d0:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     1d2:	04 c0       	rjmp	.+8      	; 0x1dc <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     1d4:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     1d6:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1d8:	0e 94 ab 1c 	call	0x3956	; 0x3956 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1dc:	c8 3c       	cpi	r28, 0xC8	; 200
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1de:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1e0:	c9 f7       	brne	.-14     	; 0x1d4 <__do_global_ctors+0x8>
     1e2:	0e 94 2a 1a 	call	0x3454	; 0x3454 <main>
     1e6:	0c 94 92 1f 	jmp	0x3f24	; 0x3f24 <_exit>

000001ea <__bad_interrupt>:
__vector_22():
     1ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ee <lcd_clear_buf(char*)>:
_Z13lcd_clear_bufPc():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:466

    lcd.clear();
    lcd.setCursor(0, 3);
    //  "1.3.5.7.9.........20"
    lcd.print("Testing over...!!   ");
    new_delay_msecs (2000);
     1ee:	00 97       	sbiw	r24, 0x00	; 0
     1f0:	49 f0       	breq	.+18     	; 0x204 <lcd_clear_buf(char*)+0x16>
     1f2:	fc 01       	movw	r30, r24
     1f4:	9c 01       	movw	r18, r24
     1f6:	2c 5e       	subi	r18, 0xEC	; 236
     1f8:	3f 4f       	sbci	r19, 0xFF	; 255
     1fa:	40 e2       	ldi	r20, 0x20	; 32
     1fc:	41 93       	st	Z+, r20
     1fe:	2e 17       	cp	r18, r30
     200:	3f 07       	cpc	r19, r31
     202:	e1 f7       	brne	.-8      	; 0x1fc <lcd_clear_buf(char*)+0xe>
     204:	fc 01       	movw	r30, r24
     206:	14 8a       	std	Z+20, r1	; 0x14
     208:	08 95       	ret

0000020a <init_7segments()>:
_Z14init_7segmentsv():
     20a:	40 e0       	ldi	r20, 0x00	; 0
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	8a e6       	ldi	r24, 0x6A	; 106
     212:	94 e0       	ldi	r25, 0x04	; 4
     214:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LedControl::shutdown(int, bool)>
     218:	48 e0       	ldi	r20, 0x08	; 8
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	8a e6       	ldi	r24, 0x6A	; 106
     222:	94 e0       	ldi	r25, 0x04	; 4
     224:	0e 94 e0 0d 	call	0x1bc0	; 0x1bc0 <LedControl::setIntensity(int, int)>
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	8a e6       	ldi	r24, 0x6A	; 106
     22e:	94 e0       	ldi	r25, 0x04	; 4
     230:	0c 94 f2 0d 	jmp	0x1be4	; 0x1be4 <LedControl::clearDisplay(int)>

00000234 <display_banner()>:
_Z14display_bannerv():
     234:	20 e1       	ldi	r18, 0x10	; 16
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	8a e6       	ldi	r24, 0x6A	; 106
     240:	94 e0       	ldi	r25, 0x04	; 4
     242:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LedControl::setRow(int, int, unsigned char)>
     246:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     24a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     24e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     252:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     256:	0e 94 73 14 	call	0x28e6	; 0x28e6 <delay>
     25a:	20 e1       	ldi	r18, 0x10	; 16
     25c:	41 e0       	ldi	r20, 0x01	; 1
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	8a e6       	ldi	r24, 0x6A	; 106
     266:	94 e0       	ldi	r25, 0x04	; 4
     268:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LedControl::setRow(int, int, unsigned char)>
     26c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     270:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     274:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     278:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     27c:	0e 94 73 14 	call	0x28e6	; 0x28e6 <delay>
     280:	20 e1       	ldi	r18, 0x10	; 16
     282:	42 e0       	ldi	r20, 0x02	; 2
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	8a e6       	ldi	r24, 0x6A	; 106
     28c:	94 e0       	ldi	r25, 0x04	; 4
     28e:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LedControl::setRow(int, int, unsigned char)>
     292:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     296:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     29a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     29e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2a2:	0e 94 73 14 	call	0x28e6	; 0x28e6 <delay>
     2a6:	20 e1       	ldi	r18, 0x10	; 16
     2a8:	43 e0       	ldi	r20, 0x03	; 3
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	8a e6       	ldi	r24, 0x6A	; 106
     2b2:	94 e0       	ldi	r25, 0x04	; 4
     2b4:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LedControl::setRow(int, int, unsigned char)>
     2b8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2bc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2c4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2c8:	0e 94 73 14 	call	0x28e6	; 0x28e6 <delay>
     2cc:	20 e1       	ldi	r18, 0x10	; 16
     2ce:	44 e0       	ldi	r20, 0x04	; 4
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	8a e6       	ldi	r24, 0x6A	; 106
     2d8:	94 e0       	ldi	r25, 0x04	; 4
     2da:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LedControl::setRow(int, int, unsigned char)>
     2de:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2e2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2ea:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2ee:	0e 94 73 14 	call	0x28e6	; 0x28e6 <delay>
     2f2:	20 e1       	ldi	r18, 0x10	; 16
     2f4:	45 e0       	ldi	r20, 0x05	; 5
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	8a e6       	ldi	r24, 0x6A	; 106
     2fe:	94 e0       	ldi	r25, 0x04	; 4
     300:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LedControl::setRow(int, int, unsigned char)>
     304:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     308:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     30c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     310:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     314:	0e 94 73 14 	call	0x28e6	; 0x28e6 <delay>
     318:	20 e1       	ldi	r18, 0x10	; 16
     31a:	46 e0       	ldi	r20, 0x06	; 6
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	8a e6       	ldi	r24, 0x6A	; 106
     324:	94 e0       	ldi	r25, 0x04	; 4
     326:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LedControl::setRow(int, int, unsigned char)>
     32a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     32e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     332:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     336:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     33a:	0e 94 73 14 	call	0x28e6	; 0x28e6 <delay>
     33e:	20 e1       	ldi	r18, 0x10	; 16
     340:	47 e0       	ldi	r20, 0x07	; 7
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	8a e6       	ldi	r24, 0x6A	; 106
     34a:	94 e0       	ldi	r25, 0x04	; 4
     34c:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LedControl::setRow(int, int, unsigned char)>
     350:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     354:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     358:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     35c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     360:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <delay>

00000364 <scrollDigits()>:
_Z12scrollDigitsv():
     364:	0f 93       	push	r16
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	cd e0       	ldi	r28, 0x0D	; 13
     36c:	d0 e0       	ldi	r29, 0x00	; 0
     36e:	00 e0       	ldi	r16, 0x00	; 0
     370:	28 e0       	ldi	r18, 0x08	; 8
     372:	47 e0       	ldi	r20, 0x07	; 7
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	8a e6       	ldi	r24, 0x6A	; 106
     37c:	94 e0       	ldi	r25, 0x04	; 4
     37e:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     382:	28 e0       	ldi	r18, 0x08	; 8
     384:	46 e0       	ldi	r20, 0x06	; 6
     386:	50 e0       	ldi	r21, 0x00	; 0
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	8a e6       	ldi	r24, 0x6A	; 106
     38e:	94 e0       	ldi	r25, 0x04	; 4
     390:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     394:	28 e0       	ldi	r18, 0x08	; 8
     396:	45 e0       	ldi	r20, 0x05	; 5
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	8a e6       	ldi	r24, 0x6A	; 106
     3a0:	94 e0       	ldi	r25, 0x04	; 4
     3a2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     3a6:	28 e0       	ldi	r18, 0x08	; 8
     3a8:	44 e0       	ldi	r20, 0x04	; 4
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	8a e6       	ldi	r24, 0x6A	; 106
     3b2:	94 e0       	ldi	r25, 0x04	; 4
     3b4:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     3b8:	28 e0       	ldi	r18, 0x08	; 8
     3ba:	43 e0       	ldi	r20, 0x03	; 3
     3bc:	50 e0       	ldi	r21, 0x00	; 0
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	8a e6       	ldi	r24, 0x6A	; 106
     3c4:	94 e0       	ldi	r25, 0x04	; 4
     3c6:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     3ca:	28 e0       	ldi	r18, 0x08	; 8
     3cc:	42 e0       	ldi	r20, 0x02	; 2
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	8a e6       	ldi	r24, 0x6A	; 106
     3d6:	94 e0       	ldi	r25, 0x04	; 4
     3d8:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     3dc:	28 e0       	ldi	r18, 0x08	; 8
     3de:	41 e0       	ldi	r20, 0x01	; 1
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	8a e6       	ldi	r24, 0x6A	; 106
     3e8:	94 e0       	ldi	r25, 0x04	; 4
     3ea:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     3ee:	28 e0       	ldi	r18, 0x08	; 8
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	40 e0       	ldi	r20, 0x00	; 0
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	8a e6       	ldi	r24, 0x6A	; 106
     3fa:	94 e0       	ldi	r25, 0x04	; 4
     3fc:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     400:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     404:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     408:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     40c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     410:	0e 94 73 14 	call	0x28e6	; 0x28e6 <delay>
     414:	21 97       	sbiw	r28, 0x01	; 1
     416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     418:	aa cf       	rjmp	.-172    	; 0x36e <scrollDigits()+0xa>
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	8a e6       	ldi	r24, 0x6A	; 106
     420:	94 e0       	ldi	r25, 0x04	; 4
     422:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LedControl::clearDisplay(int)>
     426:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     42a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     42e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     432:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	0f 91       	pop	r16
     43c:	0c 94 73 14 	jmp	0x28e6	; 0x28e6 <delay>

00000440 <test_7segments()>:
_Z14test_7segmentsv():
     440:	0e 94 1a 01 	call	0x234	; 0x234 <display_banner()>
     444:	0c 94 b2 01 	jmp	0x364	; 0x364 <scrollDigits()>

00000448 <neo_pixcel_data(ERROR_CODE_E, unsigned char)>:
_Z15neo_pixcel_data12ERROR_CODE_Eh():
     448:	88 30       	cpi	r24, 0x08	; 8
     44a:	91 05       	cpc	r25, r1
     44c:	70 f4       	brcc	.+28     	; 0x46a <neo_pixcel_data(ERROR_CODE_E, unsigned char)+0x22>
     44e:	84 5d       	subi	r24, 0xD4	; 212
     450:	9d 4f       	sbci	r25, 0xFD	; 253
     452:	fc 01       	movw	r30, r24
     454:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <__tablejump2__>
     458:	56 02       	muls	r21, r22
     45a:	54 02       	muls	r21, r20
     45c:	52 02       	muls	r21, r18
     45e:	50 02       	muls	r21, r16
     460:	4e 02       	muls	r20, r30
     462:	34 02       	muls	r19, r20
     464:	5c 02       	muls	r21, r28
     466:	58 02       	muls	r21, r24
     468:	22 e0       	ldi	r18, 0x02	; 2
     46a:	80 91 0c 04 	lds	r24, 0x040C	; 0x80040c <neo_pixcel_data(ERROR_CODE_E, unsigned char)::led_byte>
     46e:	66 23       	and	r22, r22
     470:	29 f1       	breq	.+74     	; 0x4bc <neo_pixcel_data(ERROR_CODE_E, unsigned char)+0x74>
     472:	28 2b       	or	r18, r24
     474:	20 93 0c 04 	sts	0x040C, r18	; 0x80040c <neo_pixcel_data(ERROR_CODE_E, unsigned char)::led_byte>
     478:	60 91 0c 04 	lds	r22, 0x040C	; 0x80040c <neo_pixcel_data(ERROR_CODE_E, unsigned char)::led_byte>
     47c:	64 70       	andi	r22, 0x04	; 4
     47e:	86 e0       	ldi	r24, 0x06	; 6
     480:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
     484:	60 91 0c 04 	lds	r22, 0x040C	; 0x80040c <neo_pixcel_data(ERROR_CODE_E, unsigned char)::led_byte>
     488:	62 70       	andi	r22, 0x02	; 2
     48a:	8e e0       	ldi	r24, 0x0E	; 14
     48c:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
     490:	60 91 0c 04 	lds	r22, 0x040C	; 0x80040c <neo_pixcel_data(ERROR_CODE_E, unsigned char)::led_byte>
     494:	61 70       	andi	r22, 0x01	; 1
     496:	8f e0       	ldi	r24, 0x0F	; 15
     498:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <digitalWrite>
     49c:	23 e0       	ldi	r18, 0x03	; 3
     49e:	e5 cf       	rjmp	.-54     	; 0x46a <neo_pixcel_data(ERROR_CODE_E, unsigned char)+0x22>
     4a0:	24 e0       	ldi	r18, 0x04	; 4
     4a2:	e3 cf       	rjmp	.-58     	; 0x46a <neo_pixcel_data(ERROR_CODE_E, unsigned char)+0x22>
     4a4:	25 e0       	ldi	r18, 0x05	; 5
     4a6:	e1 cf       	rjmp	.-62     	; 0x46a <neo_pixcel_data(ERROR_CODE_E, unsigned char)+0x22>
     4a8:	26 e0       	ldi	r18, 0x06	; 6
     4aa:	df cf       	rjmp	.-66     	; 0x46a <neo_pixcel_data(ERROR_CODE_E, unsigned char)+0x22>
     4ac:	27 e0       	ldi	r18, 0x07	; 7
     4ae:	dd cf       	rjmp	.-70     	; 0x46a <neo_pixcel_data(ERROR_CODE_E, unsigned char)+0x22>
     4b0:	10 92 0c 04 	sts	0x040C, r1	; 0x80040c <neo_pixcel_data(ERROR_CODE_E, unsigned char)::led_byte>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	d9 cf       	rjmp	.-78     	; 0x46a <neo_pixcel_data(ERROR_CODE_E, unsigned char)+0x22>
     4b8:	21 e0       	ldi	r18, 0x01	; 1
     4ba:	d7 cf       	rjmp	.-82     	; 0x46a <neo_pixcel_data(ERROR_CODE_E, unsigned char)+0x22>
     4bc:	20 95       	com	r18
     4be:	28 23       	and	r18, r24
     4c0:	d9 cf       	rjmp	.-78     	; 0x474 <neo_pixcel_data(ERROR_CODE_E, unsigned char)+0x2c>

000004c2 <display_o2(float)>:
_Z10display_o2f():
     4c2:	ef 92       	push	r14
     4c4:	ff 92       	push	r15
     4c6:	0f 93       	push	r16
     4c8:	cf 93       	push	r28
     4ca:	df 93       	push	r29
     4cc:	20 e0       	ldi	r18, 0x00	; 0
     4ce:	30 e0       	ldi	r19, 0x00	; 0
     4d0:	40 e2       	ldi	r20, 0x20	; 32
     4d2:	51 e4       	ldi	r21, 0x41	; 65
     4d4:	0e 94 03 1c 	call	0x3806	; 0x3806 <__mulsf3>
     4d8:	0e 94 1d 1b 	call	0x363a	; 0x363a <__fixunssfsi>
     4dc:	eb 01       	movw	r28, r22
     4de:	cb 01       	movw	r24, r22
     4e0:	64 e6       	ldi	r22, 0x64	; 100
     4e2:	70 e0       	ldi	r23, 0x00	; 0
     4e4:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
     4e8:	cb 01       	movw	r24, r22
     4ea:	2a e0       	ldi	r18, 0x0A	; 10
     4ec:	e2 2e       	mov	r14, r18
     4ee:	f1 2c       	mov	r15, r1
     4f0:	b7 01       	movw	r22, r14
     4f2:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
     4f6:	00 e0       	ldi	r16, 0x00	; 0
     4f8:	28 2f       	mov	r18, r24
     4fa:	50 e0       	ldi	r21, 0x00	; 0
     4fc:	40 e0       	ldi	r20, 0x00	; 0
     4fe:	70 e0       	ldi	r23, 0x00	; 0
     500:	60 e0       	ldi	r22, 0x00	; 0
     502:	8a e6       	ldi	r24, 0x6A	; 106
     504:	94 e0       	ldi	r25, 0x04	; 4
     506:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     50a:	ce 01       	movw	r24, r28
     50c:	b7 01       	movw	r22, r14
     50e:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
     512:	c8 2f       	mov	r28, r24
     514:	cb 01       	movw	r24, r22
     516:	b7 01       	movw	r22, r14
     518:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
     51c:	01 e0       	ldi	r16, 0x01	; 1
     51e:	28 2f       	mov	r18, r24
     520:	41 e0       	ldi	r20, 0x01	; 1
     522:	50 e0       	ldi	r21, 0x00	; 0
     524:	70 e0       	ldi	r23, 0x00	; 0
     526:	60 e0       	ldi	r22, 0x00	; 0
     528:	8a e6       	ldi	r24, 0x6A	; 106
     52a:	94 e0       	ldi	r25, 0x04	; 4
     52c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     530:	00 e0       	ldi	r16, 0x00	; 0
     532:	2c 2f       	mov	r18, r28
     534:	42 e0       	ldi	r20, 0x02	; 2
     536:	50 e0       	ldi	r21, 0x00	; 0
     538:	70 e0       	ldi	r23, 0x00	; 0
     53a:	60 e0       	ldi	r22, 0x00	; 0
     53c:	8a e6       	ldi	r24, 0x6A	; 106
     53e:	94 e0       	ldi	r25, 0x04	; 4
     540:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     544:	df 91       	pop	r29
     546:	cf 91       	pop	r28
     548:	0f 91       	pop	r16
     54a:	ff 90       	pop	r15
     54c:	ef 90       	pop	r14
     54e:	08 95       	ret

00000550 <display_run_hours(unsigned long)>:
_Z17display_run_hoursm():
     550:	4f 92       	push	r4
     552:	5f 92       	push	r5
     554:	6f 92       	push	r6
     556:	7f 92       	push	r7
     558:	8f 92       	push	r8
     55a:	9f 92       	push	r9
     55c:	af 92       	push	r10
     55e:	bf 92       	push	r11
     560:	cf 92       	push	r12
     562:	df 92       	push	r13
     564:	ef 92       	push	r14
     566:	ff 92       	push	r15
     568:	0f 93       	push	r16
     56a:	1f 93       	push	r17
     56c:	cf 93       	push	r28
     56e:	df 93       	push	r29
     570:	4b 01       	movw	r8, r22
     572:	5c 01       	movw	r10, r24
     574:	8a e0       	ldi	r24, 0x0A	; 10
     576:	c8 2e       	mov	r12, r24
     578:	d1 2c       	mov	r13, r1
     57a:	e1 2c       	mov	r14, r1
     57c:	f1 2c       	mov	r15, r1
     57e:	c5 01       	movw	r24, r10
     580:	a7 01       	movw	r20, r14
     582:	96 01       	movw	r18, r12
     584:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
     588:	76 2e       	mov	r7, r22
     58a:	ca 01       	movw	r24, r20
     58c:	b9 01       	movw	r22, r18
     58e:	a7 01       	movw	r20, r14
     590:	96 01       	movw	r18, r12
     592:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
     596:	c6 2f       	mov	r28, r22
     598:	66 2e       	mov	r6, r22
     59a:	c5 01       	movw	r24, r10
     59c:	b4 01       	movw	r22, r8
     59e:	24 e6       	ldi	r18, 0x64	; 100
     5a0:	30 e0       	ldi	r19, 0x00	; 0
     5a2:	40 e0       	ldi	r20, 0x00	; 0
     5a4:	50 e0       	ldi	r21, 0x00	; 0
     5a6:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
     5aa:	ca 01       	movw	r24, r20
     5ac:	b9 01       	movw	r22, r18
     5ae:	a7 01       	movw	r20, r14
     5b0:	96 01       	movw	r18, r12
     5b2:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
     5b6:	d6 2f       	mov	r29, r22
     5b8:	56 2e       	mov	r5, r22
     5ba:	c5 01       	movw	r24, r10
     5bc:	b4 01       	movw	r22, r8
     5be:	28 ee       	ldi	r18, 0xE8	; 232
     5c0:	33 e0       	ldi	r19, 0x03	; 3
     5c2:	40 e0       	ldi	r20, 0x00	; 0
     5c4:	50 e0       	ldi	r21, 0x00	; 0
     5c6:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
     5ca:	ca 01       	movw	r24, r20
     5cc:	b9 01       	movw	r22, r18
     5ce:	a7 01       	movw	r20, r14
     5d0:	96 01       	movw	r18, r12
     5d2:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
     5d6:	16 2f       	mov	r17, r22
     5d8:	46 2e       	mov	r4, r22
     5da:	c5 01       	movw	r24, r10
     5dc:	b4 01       	movw	r22, r8
     5de:	20 e1       	ldi	r18, 0x10	; 16
     5e0:	37 e2       	ldi	r19, 0x27	; 39
     5e2:	40 e0       	ldi	r20, 0x00	; 0
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
     5ea:	ca 01       	movw	r24, r20
     5ec:	b9 01       	movw	r22, r18
     5ee:	a7 01       	movw	r20, r14
     5f0:	96 01       	movw	r18, r12
     5f2:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
     5f6:	f6 2e       	mov	r15, r22
     5f8:	00 e0       	ldi	r16, 0x00	; 0
     5fa:	26 2f       	mov	r18, r22
     5fc:	43 e0       	ldi	r20, 0x03	; 3
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	8a e6       	ldi	r24, 0x6A	; 106
     606:	94 e0       	ldi	r25, 0x04	; 4
     608:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     60c:	21 2f       	mov	r18, r17
     60e:	44 e0       	ldi	r20, 0x04	; 4
     610:	50 e0       	ldi	r21, 0x00	; 0
     612:	70 e0       	ldi	r23, 0x00	; 0
     614:	60 e0       	ldi	r22, 0x00	; 0
     616:	8a e6       	ldi	r24, 0x6A	; 106
     618:	94 e0       	ldi	r25, 0x04	; 4
     61a:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     61e:	2d 2f       	mov	r18, r29
     620:	45 e0       	ldi	r20, 0x05	; 5
     622:	50 e0       	ldi	r21, 0x00	; 0
     624:	70 e0       	ldi	r23, 0x00	; 0
     626:	60 e0       	ldi	r22, 0x00	; 0
     628:	8a e6       	ldi	r24, 0x6A	; 106
     62a:	94 e0       	ldi	r25, 0x04	; 4
     62c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     630:	2c 2f       	mov	r18, r28
     632:	46 e0       	ldi	r20, 0x06	; 6
     634:	50 e0       	ldi	r21, 0x00	; 0
     636:	70 e0       	ldi	r23, 0x00	; 0
     638:	60 e0       	ldi	r22, 0x00	; 0
     63a:	8a e6       	ldi	r24, 0x6A	; 106
     63c:	94 e0       	ldi	r25, 0x04	; 4
     63e:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     642:	27 2d       	mov	r18, r7
     644:	47 e0       	ldi	r20, 0x07	; 7
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	8a e6       	ldi	r24, 0x6A	; 106
     64e:	94 e0       	ldi	r25, 0x04	; 4
     650:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     654:	ff 20       	and	r15, r15
     656:	09 f4       	brne	.+2      	; 0x65a <display_run_hours(unsigned long)+0x10a>
     658:	4b c0       	rjmp	.+150    	; 0x6f0 <display_run_hours(unsigned long)+0x1a0>
     65a:	2f 2d       	mov	r18, r15
     65c:	43 e0       	ldi	r20, 0x03	; 3
     65e:	50 e0       	ldi	r21, 0x00	; 0
     660:	70 e0       	ldi	r23, 0x00	; 0
     662:	60 e0       	ldi	r22, 0x00	; 0
     664:	8a e6       	ldi	r24, 0x6A	; 106
     666:	94 e0       	ldi	r25, 0x04	; 4
     668:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     66c:	44 20       	and	r4, r4
     66e:	09 f4       	brne	.+2      	; 0x672 <display_run_hours(unsigned long)+0x122>
     670:	49 c0       	rjmp	.+146    	; 0x704 <display_run_hours(unsigned long)+0x1b4>
     672:	00 e0       	ldi	r16, 0x00	; 0
     674:	21 2f       	mov	r18, r17
     676:	44 e0       	ldi	r20, 0x04	; 4
     678:	50 e0       	ldi	r21, 0x00	; 0
     67a:	70 e0       	ldi	r23, 0x00	; 0
     67c:	60 e0       	ldi	r22, 0x00	; 0
     67e:	8a e6       	ldi	r24, 0x6A	; 106
     680:	94 e0       	ldi	r25, 0x04	; 4
     682:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     686:	55 20       	and	r5, r5
     688:	09 f4       	brne	.+2      	; 0x68c <display_run_hours(unsigned long)+0x13c>
     68a:	46 c0       	rjmp	.+140    	; 0x718 <display_run_hours(unsigned long)+0x1c8>
     68c:	00 e0       	ldi	r16, 0x00	; 0
     68e:	2d 2f       	mov	r18, r29
     690:	45 e0       	ldi	r20, 0x05	; 5
     692:	50 e0       	ldi	r21, 0x00	; 0
     694:	70 e0       	ldi	r23, 0x00	; 0
     696:	60 e0       	ldi	r22, 0x00	; 0
     698:	8a e6       	ldi	r24, 0x6A	; 106
     69a:	94 e0       	ldi	r25, 0x04	; 4
     69c:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     6a0:	66 20       	and	r6, r6
     6a2:	09 f4       	brne	.+2      	; 0x6a6 <display_run_hours(unsigned long)+0x156>
     6a4:	43 c0       	rjmp	.+134    	; 0x72c <display_run_hours(unsigned long)+0x1dc>
     6a6:	00 e0       	ldi	r16, 0x00	; 0
     6a8:	2c 2f       	mov	r18, r28
     6aa:	46 e0       	ldi	r20, 0x06	; 6
     6ac:	50 e0       	ldi	r21, 0x00	; 0
     6ae:	70 e0       	ldi	r23, 0x00	; 0
     6b0:	60 e0       	ldi	r22, 0x00	; 0
     6b2:	8a e6       	ldi	r24, 0x6A	; 106
     6b4:	94 e0       	ldi	r25, 0x04	; 4
     6b6:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     6ba:	00 e0       	ldi	r16, 0x00	; 0
     6bc:	27 2d       	mov	r18, r7
     6be:	47 e0       	ldi	r20, 0x07	; 7
     6c0:	50 e0       	ldi	r21, 0x00	; 0
     6c2:	70 e0       	ldi	r23, 0x00	; 0
     6c4:	60 e0       	ldi	r22, 0x00	; 0
     6c6:	8a e6       	ldi	r24, 0x6A	; 106
     6c8:	94 e0       	ldi	r25, 0x04	; 4
     6ca:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     6ce:	df 91       	pop	r29
     6d0:	cf 91       	pop	r28
     6d2:	1f 91       	pop	r17
     6d4:	0f 91       	pop	r16
     6d6:	ff 90       	pop	r15
     6d8:	ef 90       	pop	r14
     6da:	df 90       	pop	r13
     6dc:	cf 90       	pop	r12
     6de:	bf 90       	pop	r11
     6e0:	af 90       	pop	r10
     6e2:	9f 90       	pop	r9
     6e4:	8f 90       	pop	r8
     6e6:	7f 90       	pop	r7
     6e8:	6f 90       	pop	r6
     6ea:	5f 90       	pop	r5
     6ec:	4f 90       	pop	r4
     6ee:	08 95       	ret
     6f0:	20 e0       	ldi	r18, 0x00	; 0
     6f2:	43 e0       	ldi	r20, 0x03	; 3
     6f4:	50 e0       	ldi	r21, 0x00	; 0
     6f6:	70 e0       	ldi	r23, 0x00	; 0
     6f8:	60 e0       	ldi	r22, 0x00	; 0
     6fa:	8a e6       	ldi	r24, 0x6A	; 106
     6fc:	94 e0       	ldi	r25, 0x04	; 4
     6fe:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LedControl::setRow(int, int, unsigned char)>
     702:	b4 cf       	rjmp	.-152    	; 0x66c <display_run_hours(unsigned long)+0x11c>
     704:	20 e0       	ldi	r18, 0x00	; 0
     706:	44 e0       	ldi	r20, 0x04	; 4
     708:	50 e0       	ldi	r21, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	60 e0       	ldi	r22, 0x00	; 0
     70e:	8a e6       	ldi	r24, 0x6A	; 106
     710:	94 e0       	ldi	r25, 0x04	; 4
     712:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LedControl::setRow(int, int, unsigned char)>
     716:	b7 cf       	rjmp	.-146    	; 0x686 <display_run_hours(unsigned long)+0x136>
     718:	20 e0       	ldi	r18, 0x00	; 0
     71a:	45 e0       	ldi	r20, 0x05	; 5
     71c:	50 e0       	ldi	r21, 0x00	; 0
     71e:	70 e0       	ldi	r23, 0x00	; 0
     720:	60 e0       	ldi	r22, 0x00	; 0
     722:	8a e6       	ldi	r24, 0x6A	; 106
     724:	94 e0       	ldi	r25, 0x04	; 4
     726:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LedControl::setRow(int, int, unsigned char)>
     72a:	ba cf       	rjmp	.-140    	; 0x6a0 <display_run_hours(unsigned long)+0x150>
     72c:	20 e0       	ldi	r18, 0x00	; 0
     72e:	46 e0       	ldi	r20, 0x06	; 6
     730:	50 e0       	ldi	r21, 0x00	; 0
     732:	70 e0       	ldi	r23, 0x00	; 0
     734:	60 e0       	ldi	r22, 0x00	; 0
     736:	8a e6       	ldi	r24, 0x6A	; 106
     738:	94 e0       	ldi	r25, 0x04	; 4
     73a:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LedControl::setRow(int, int, unsigned char)>
     73e:	bd cf       	rjmp	.-134    	; 0x6ba <display_run_hours(unsigned long)+0x16a>

00000740 <display_run_time(unsigned int, unsigned int)>:
_Z16display_run_timejj():
     740:	ef 92       	push	r14
     742:	ff 92       	push	r15
     744:	0f 93       	push	r16
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	9c 01       	movw	r18, r24
     74e:	cb 01       	movw	r24, r22
     750:	6c e3       	ldi	r22, 0x3C	; 60
     752:	70 e0       	ldi	r23, 0x00	; 0
     754:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
     758:	ec 01       	movw	r28, r24
     75a:	c9 01       	movw	r24, r18
     75c:	67 ee       	ldi	r22, 0xE7	; 231
     75e:	73 e0       	ldi	r23, 0x03	; 3
     760:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
     764:	fc 01       	movw	r30, r24
     766:	2a e0       	ldi	r18, 0x0A	; 10
     768:	30 e0       	ldi	r19, 0x00	; 0
     76a:	ce 01       	movw	r24, r28
     76c:	b9 01       	movw	r22, r18
     76e:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
     772:	16 2f       	mov	r17, r22
     774:	d8 2f       	mov	r29, r24
     776:	cf 01       	movw	r24, r30
     778:	b9 01       	movw	r22, r18
     77a:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
     77e:	f8 2e       	mov	r15, r24
     780:	cb 01       	movw	r24, r22
     782:	b9 01       	movw	r22, r18
     784:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
     788:	c8 2f       	mov	r28, r24
     78a:	e8 2e       	mov	r14, r24
     78c:	cf 01       	movw	r24, r30
     78e:	64 e6       	ldi	r22, 0x64	; 100
     790:	70 e0       	ldi	r23, 0x00	; 0
     792:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
     796:	26 2f       	mov	r18, r22
     798:	66 23       	and	r22, r22
     79a:	c9 f1       	breq	.+114    	; 0x80e <display_run_time(unsigned int, unsigned int)+0xce>
     79c:	00 e0       	ldi	r16, 0x00	; 0
     79e:	43 e0       	ldi	r20, 0x03	; 3
     7a0:	50 e0       	ldi	r21, 0x00	; 0
     7a2:	70 e0       	ldi	r23, 0x00	; 0
     7a4:	60 e0       	ldi	r22, 0x00	; 0
     7a6:	8a e6       	ldi	r24, 0x6A	; 106
     7a8:	94 e0       	ldi	r25, 0x04	; 4
     7aa:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     7ae:	ee 20       	and	r14, r14
     7b0:	c1 f1       	breq	.+112    	; 0x822 <display_run_time(unsigned int, unsigned int)+0xe2>
     7b2:	00 e0       	ldi	r16, 0x00	; 0
     7b4:	2c 2f       	mov	r18, r28
     7b6:	44 e0       	ldi	r20, 0x04	; 4
     7b8:	50 e0       	ldi	r21, 0x00	; 0
     7ba:	70 e0       	ldi	r23, 0x00	; 0
     7bc:	60 e0       	ldi	r22, 0x00	; 0
     7be:	8a e6       	ldi	r24, 0x6A	; 106
     7c0:	94 e0       	ldi	r25, 0x04	; 4
     7c2:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     7c6:	01 e0       	ldi	r16, 0x01	; 1
     7c8:	2f 2d       	mov	r18, r15
     7ca:	45 e0       	ldi	r20, 0x05	; 5
     7cc:	50 e0       	ldi	r21, 0x00	; 0
     7ce:	70 e0       	ldi	r23, 0x00	; 0
     7d0:	60 e0       	ldi	r22, 0x00	; 0
     7d2:	8a e6       	ldi	r24, 0x6A	; 106
     7d4:	94 e0       	ldi	r25, 0x04	; 4
     7d6:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     7da:	00 e0       	ldi	r16, 0x00	; 0
     7dc:	21 2f       	mov	r18, r17
     7de:	46 e0       	ldi	r20, 0x06	; 6
     7e0:	50 e0       	ldi	r21, 0x00	; 0
     7e2:	70 e0       	ldi	r23, 0x00	; 0
     7e4:	60 e0       	ldi	r22, 0x00	; 0
     7e6:	8a e6       	ldi	r24, 0x6A	; 106
     7e8:	94 e0       	ldi	r25, 0x04	; 4
     7ea:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     7ee:	2d 2f       	mov	r18, r29
     7f0:	47 e0       	ldi	r20, 0x07	; 7
     7f2:	50 e0       	ldi	r21, 0x00	; 0
     7f4:	70 e0       	ldi	r23, 0x00	; 0
     7f6:	60 e0       	ldi	r22, 0x00	; 0
     7f8:	8a e6       	ldi	r24, 0x6A	; 106
     7fa:	94 e0       	ldi	r25, 0x04	; 4
     7fc:	0e 94 c7 0e 	call	0x1d8e	; 0x1d8e <LedControl::setDigit(int, int, unsigned char, bool)>
     800:	df 91       	pop	r29
     802:	cf 91       	pop	r28
     804:	1f 91       	pop	r17
     806:	0f 91       	pop	r16
     808:	ff 90       	pop	r15
     80a:	ef 90       	pop	r14
     80c:	08 95       	ret
     80e:	20 e0       	ldi	r18, 0x00	; 0
     810:	43 e0       	ldi	r20, 0x03	; 3
     812:	50 e0       	ldi	r21, 0x00	; 0
     814:	70 e0       	ldi	r23, 0x00	; 0
     816:	60 e0       	ldi	r22, 0x00	; 0
     818:	8a e6       	ldi	r24, 0x6A	; 106
     81a:	94 e0       	ldi	r25, 0x04	; 4
     81c:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LedControl::setRow(int, int, unsigned char)>
     820:	c6 cf       	rjmp	.-116    	; 0x7ae <display_run_time(unsigned int, unsigned int)+0x6e>
     822:	20 e0       	ldi	r18, 0x00	; 0
     824:	44 e0       	ldi	r20, 0x04	; 4
     826:	50 e0       	ldi	r21, 0x00	; 0
     828:	70 e0       	ldi	r23, 0x00	; 0
     82a:	60 e0       	ldi	r22, 0x00	; 0
     82c:	8a e6       	ldi	r24, 0x6A	; 106
     82e:	94 e0       	ldi	r25, 0x04	; 4
     830:	0e 94 aa 0e 	call	0x1d54	; 0x1d54 <LedControl::setRow(int, int, unsigned char)>
     834:	c8 cf       	rjmp	.-112    	; 0x7c6 <display_run_time(unsigned int, unsigned int)+0x86>

00000836 <log_dump()>:
_Z8log_dumpv():
     836:	0f 93       	push	r16
     838:	1f 93       	push	r17
     83a:	cf 93       	push	r28
     83c:	df 93       	push	r29
     83e:	20 91 5e 04 	lds	r18, 0x045E	; 0x80045e <systemtick_secs>
     842:	90 91 5d 04 	lds	r25, 0x045D	; 0x80045d <systemtick_mins>
     846:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <systemtick_hrs>
     84a:	1f 92       	push	r1
     84c:	2f 93       	push	r18
     84e:	1f 92       	push	r1
     850:	9f 93       	push	r25
     852:	1f 92       	push	r1
     854:	8f 93       	push	r24
     856:	08 e0       	ldi	r16, 0x08	; 8
     858:	11 e0       	ldi	r17, 0x01	; 1
     85a:	1f 93       	push	r17
     85c:	0f 93       	push	r16
     85e:	cd e0       	ldi	r28, 0x0D	; 13
     860:	d4 e0       	ldi	r29, 0x04	; 4
     862:	df 93       	push	r29
     864:	cf 93       	push	r28
     866:	0e 94 bb 1c 	call	0x3976	; 0x3976 <sprintf>
     86a:	be 01       	movw	r22, r28
     86c:	87 ea       	ldi	r24, 0xA7	; 167
     86e:	95 e0       	ldi	r25, 0x05	; 5
     870:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     874:	e0 91 4b 04 	lds	r30, 0x044B	; 0x80044b <current_run_time_secs>
     878:	f0 91 4c 04 	lds	r31, 0x044C	; 0x80044c <current_run_time_secs+0x1>
     87c:	2c e3       	ldi	r18, 0x3C	; 60
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	cf 01       	movw	r24, r30
     882:	b9 01       	movw	r22, r18
     884:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
     888:	9f 93       	push	r25
     88a:	8f 93       	push	r24
     88c:	cf 01       	movw	r24, r30
     88e:	60 e1       	ldi	r22, 0x10	; 16
     890:	7e e0       	ldi	r23, 0x0E	; 14
     892:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
     896:	46 2f       	mov	r20, r22
     898:	e7 2f       	mov	r30, r23
     89a:	b9 01       	movw	r22, r18
     89c:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
     8a0:	7f 93       	push	r23
     8a2:	6f 93       	push	r22
     8a4:	ef 93       	push	r30
     8a6:	4f 93       	push	r20
     8a8:	1f 93       	push	r17
     8aa:	0f 93       	push	r16
     8ac:	df 93       	push	r29
     8ae:	cf 93       	push	r28
     8b0:	0e 94 bb 1c 	call	0x3976	; 0x3976 <sprintf>
     8b4:	be 01       	movw	r22, r28
     8b6:	87 ea       	ldi	r24, 0xA7	; 167
     8b8:	95 e0       	ldi	r25, 0x05	; 5
     8ba:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     8be:	40 91 43 04 	lds	r20, 0x0443	; 0x800443 <Production_Delay>
     8c2:	50 91 44 04 	lds	r21, 0x0444	; 0x800444 <Production_Delay+0x1>
     8c6:	60 91 45 04 	lds	r22, 0x0445	; 0x800445 <Production_Delay+0x2>
     8ca:	70 91 46 04 	lds	r23, 0x0446	; 0x800446 <Production_Delay+0x3>
     8ce:	2a e0       	ldi	r18, 0x0A	; 10
     8d0:	30 e0       	ldi	r19, 0x00	; 0
     8d2:	87 ea       	ldi	r24, 0xA7	; 167
     8d4:	95 e0       	ldi	r25, 0x05	; 5
     8d6:	0e 94 05 19 	call	0x320a	; 0x320a <Print::print(unsigned long, int)>
     8da:	6a e9       	ldi	r22, 0x9A	; 154
     8dc:	73 e0       	ldi	r23, 0x03	; 3
     8de:	87 ea       	ldi	r24, 0xA7	; 167
     8e0:	95 e0       	ldi	r25, 0x05	; 5
     8e2:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     8e6:	40 91 3f 04 	lds	r20, 0x043F	; 0x80043f <Flush_Delay>
     8ea:	50 91 40 04 	lds	r21, 0x0440	; 0x800440 <Flush_Delay+0x1>
     8ee:	60 91 41 04 	lds	r22, 0x0441	; 0x800441 <Flush_Delay+0x2>
     8f2:	70 91 42 04 	lds	r23, 0x0442	; 0x800442 <Flush_Delay+0x3>
     8f6:	2a e0       	ldi	r18, 0x0A	; 10
     8f8:	30 e0       	ldi	r19, 0x00	; 0
     8fa:	87 ea       	ldi	r24, 0xA7	; 167
     8fc:	95 e0       	ldi	r25, 0x05	; 5
     8fe:	0e 94 05 19 	call	0x320a	; 0x320a <Print::print(unsigned long, int)>
     902:	6a e9       	ldi	r22, 0x9A	; 154
     904:	73 e0       	ldi	r23, 0x03	; 3
     906:	87 ea       	ldi	r24, 0xA7	; 167
     908:	95 e0       	ldi	r25, 0x05	; 5
     90a:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     90e:	40 91 3b 04 	lds	r20, 0x043B	; 0x80043b <PreCharge_Delay>
     912:	50 91 3c 04 	lds	r21, 0x043C	; 0x80043c <PreCharge_Delay+0x1>
     916:	60 91 3d 04 	lds	r22, 0x043D	; 0x80043d <PreCharge_Delay+0x2>
     91a:	70 91 3e 04 	lds	r23, 0x043E	; 0x80043e <PreCharge_Delay+0x3>
     91e:	2a e0       	ldi	r18, 0x0A	; 10
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	87 ea       	ldi	r24, 0xA7	; 167
     924:	95 e0       	ldi	r25, 0x05	; 5
     926:	0e 94 05 19 	call	0x320a	; 0x320a <Print::print(unsigned long, int)>
     92a:	6a e9       	ldi	r22, 0x9A	; 154
     92c:	73 e0       	ldi	r23, 0x03	; 3
     92e:	87 ea       	ldi	r24, 0xA7	; 167
     930:	95 e0       	ldi	r25, 0x05	; 5
     932:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     936:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <do_byte>
     93a:	82 fb       	bst	r24, 2
     93c:	99 27       	eor	r25, r25
     93e:	90 f9       	bld	r25, 0
     940:	1f 92       	push	r1
     942:	9f 93       	push	r25
     944:	81 fb       	bst	r24, 1
     946:	99 27       	eor	r25, r25
     948:	90 f9       	bld	r25, 0
     94a:	1f 92       	push	r1
     94c:	9f 93       	push	r25
     94e:	81 70       	andi	r24, 0x01	; 1
     950:	1f 92       	push	r1
     952:	8f 93       	push	r24
     954:	08 e1       	ldi	r16, 0x18	; 24
     956:	11 e0       	ldi	r17, 0x01	; 1
     958:	1f 93       	push	r17
     95a:	0f 93       	push	r16
     95c:	df 93       	push	r29
     95e:	cf 93       	push	r28
     960:	0e 94 bb 1c 	call	0x3976	; 0x3976 <sprintf>
     964:	be 01       	movw	r22, r28
     966:	87 ea       	ldi	r24, 0xA7	; 167
     968:	95 e0       	ldi	r25, 0x05	; 5
     96a:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     96e:	60 91 30 04 	lds	r22, 0x0430	; 0x800430 <o2_raw_adc_count>
     972:	70 91 31 04 	lds	r23, 0x0431	; 0x800431 <o2_raw_adc_count+0x1>
     976:	4a e0       	ldi	r20, 0x0A	; 10
     978:	50 e0       	ldi	r21, 0x00	; 0
     97a:	87 ea       	ldi	r24, 0xA7	; 167
     97c:	95 e0       	ldi	r25, 0x05	; 5
     97e:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <Print::print(int, int)>
     982:	6a e9       	ldi	r22, 0x9A	; 154
     984:	73 e0       	ldi	r23, 0x03	; 3
     986:	87 ea       	ldi	r24, 0xA7	; 167
     988:	95 e0       	ldi	r25, 0x05	; 5
     98a:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     98e:	40 91 24 04 	lds	r20, 0x0424	; 0x800424 <m_raw_voltage>
     992:	50 91 25 04 	lds	r21, 0x0425	; 0x800425 <m_raw_voltage+0x1>
     996:	60 91 26 04 	lds	r22, 0x0426	; 0x800426 <m_raw_voltage+0x2>
     99a:	70 91 27 04 	lds	r23, 0x0427	; 0x800427 <m_raw_voltage+0x3>
     99e:	22 e0       	ldi	r18, 0x02	; 2
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	87 ea       	ldi	r24, 0xA7	; 167
     9a4:	95 e0       	ldi	r25, 0x05	; 5
     9a6:	0e 94 27 1a 	call	0x344e	; 0x344e <Print::print(double, int)>
     9aa:	6a e9       	ldi	r22, 0x9A	; 154
     9ac:	73 e0       	ldi	r23, 0x03	; 3
     9ae:	87 ea       	ldi	r24, 0xA7	; 167
     9b0:	95 e0       	ldi	r25, 0x05	; 5
     9b2:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     9b6:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <o2_concentration>
     9ba:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <o2_concentration+0x1>
     9be:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <o2_concentration+0x2>
     9c2:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <o2_concentration+0x3>
     9c6:	22 e0       	ldi	r18, 0x02	; 2
     9c8:	30 e0       	ldi	r19, 0x00	; 0
     9ca:	87 ea       	ldi	r24, 0xA7	; 167
     9cc:	95 e0       	ldi	r25, 0x05	; 5
     9ce:	0e 94 27 1a 	call	0x344e	; 0x344e <Print::print(double, int)>
     9d2:	6a e9       	ldi	r22, 0x9A	; 154
     9d4:	73 e0       	ldi	r23, 0x03	; 3
     9d6:	87 ea       	ldi	r24, 0xA7	; 167
     9d8:	95 e0       	ldi	r25, 0x05	; 5
     9da:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     9de:	1f 92       	push	r1
     9e0:	83 e0       	ldi	r24, 0x03	; 3
     9e2:	8f 93       	push	r24
     9e4:	1f 92       	push	r1
     9e6:	82 e0       	ldi	r24, 0x02	; 2
     9e8:	8f 93       	push	r24
     9ea:	1f 92       	push	r1
     9ec:	81 e0       	ldi	r24, 0x01	; 1
     9ee:	8f 93       	push	r24
     9f0:	1f 93       	push	r17
     9f2:	0f 93       	push	r16
     9f4:	df 93       	push	r29
     9f6:	cf 93       	push	r28
     9f8:	0e 94 bb 1c 	call	0x3976	; 0x3976 <sprintf>
     9fc:	8d b7       	in	r24, 0x3d	; 61
     9fe:	9e b7       	in	r25, 0x3e	; 62
     a00:	88 96       	adiw	r24, 0x28	; 40
     a02:	0f b6       	in	r0, 0x3f	; 63
     a04:	f8 94       	cli
     a06:	9e bf       	out	0x3e, r25	; 62
     a08:	0f be       	out	0x3f, r0	; 63
     a0a:	8d bf       	out	0x3d, r24	; 61
     a0c:	be 01       	movw	r22, r28
     a0e:	87 ea       	ldi	r24, 0xA7	; 167
     a10:	95 e0       	ldi	r25, 0x05	; 5
     a12:	df 91       	pop	r29
     a14:	cf 91       	pop	r28
     a16:	1f 91       	pop	r17
     a18:	0f 91       	pop	r16
     a1a:	0c 94 41 18 	jmp	0x3082	; 0x3082 <Print::println(char const*)>

00000a1e <logs_task()>:
_Z9logs_taskv():
     a1e:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <f_sec_logs_task>
     a22:	88 23       	and	r24, r24
     a24:	a9 f0       	breq	.+42     	; 0xa50 <logs_task()+0x32>
     a26:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <f_sec_logs_task>
     a2a:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <logs_task()::log_period>
     a2e:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <logs_task()::log_period+0x1>
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	82 30       	cpi	r24, 0x02	; 2
     a36:	91 05       	cpc	r25, r1
     a38:	2c f4       	brge	.+10     	; 0xa44 <logs_task()+0x26>
     a3a:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <logs_task()::log_period+0x1>
     a3e:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <logs_task()::log_period>
     a42:	08 95       	ret
     a44:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <logs_task()::log_period+0x1>
     a48:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <logs_task()::log_period>
     a4c:	0c 94 1b 04 	jmp	0x836	; 0x836 <log_dump()>
     a50:	08 95       	ret

00000a52 <ads_init()>:
_Z8ads_initv():
     a52:	62 e2       	ldi	r22, 0x22	; 34
     a54:	71 e0       	ldi	r23, 0x01	; 1
     a56:	87 ea       	ldi	r24, 0xA7	; 167
     a58:	95 e0       	ldi	r25, 0x05	; 5
     a5a:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     a5e:	6c e8       	ldi	r22, 0x8C	; 140
     a60:	70 e0       	ldi	r23, 0x00	; 0
     a62:	87 ea       	ldi	r24, 0xA7	; 167
     a64:	95 e0       	ldi	r25, 0x05	; 5
     a66:	0e 94 2f 18 	call	0x305e	; 0x305e <Print::println(__FlashStringHelper const*)>
     a6a:	84 ef       	ldi	r24, 0xF4	; 244
     a6c:	93 e0       	ldi	r25, 0x03	; 3
     a6e:	0e 94 04 0f 	call	0x1e08	; 0x1e08 <ADS1X15::begin()>
     a72:	61 e0       	ldi	r22, 0x01	; 1
     a74:	84 ef       	ldi	r24, 0xF4	; 244
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <ADS1X15::setGain(unsigned char)>
     a7c:	67 e0       	ldi	r22, 0x07	; 7
     a7e:	84 ef       	ldi	r24, 0xF4	; 244
     a80:	93 e0       	ldi	r25, 0x03	; 3
     a82:	0e 94 65 0f 	call	0x1eca	; 0x1eca <ADS1X15::setDataRate(unsigned char)>
     a86:	60 e0       	ldi	r22, 0x00	; 0
     a88:	84 ef       	ldi	r24, 0xF4	; 244
     a8a:	93 e0       	ldi	r25, 0x03	; 3
     a8c:	0e 94 59 0f 	call	0x1eb2	; 0x1eb2 <ADS1X15::setMode(unsigned char)>
     a90:	60 e0       	ldi	r22, 0x00	; 0
     a92:	84 ef       	ldi	r24, 0xF4	; 244
     a94:	93 e0       	ldi	r25, 0x03	; 3
     a96:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <ADS1X15::readADC(unsigned char)>

00000a9a <o2_sensor_scan()>:
_Z14o2_sensor_scanv():
     a9a:	cf 92       	push	r12
     a9c:	df 92       	push	r13
     a9e:	ef 92       	push	r14
     aa0:	ff 92       	push	r15
     aa2:	60 e0       	ldi	r22, 0x00	; 0
     aa4:	84 ef       	ldi	r24, 0xF4	; 244
     aa6:	93 e0       	ldi	r25, 0x03	; 3
     aa8:	0e 94 54 10 	call	0x20a8	; 0x20a8 <ADS1X15::readADC(unsigned char)>
     aac:	84 ef       	ldi	r24, 0xF4	; 244
     aae:	93 e0       	ldi	r25, 0x03	; 3
     ab0:	0e 94 25 10 	call	0x204a	; 0x204a <ADS1X15::getValue()>
     ab4:	90 93 31 04 	sts	0x0431, r25	; 0x800431 <o2_raw_adc_count+0x1>
     ab8:	80 93 30 04 	sts	0x0430, r24	; 0x800430 <o2_raw_adc_count>
     abc:	6e eb       	ldi	r22, 0xBE	; 190
     abe:	71 e0       	ldi	r23, 0x01	; 1
     ac0:	87 ea       	ldi	r24, 0xA7	; 167
     ac2:	95 e0       	ldi	r25, 0x05	; 5
     ac4:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     ac8:	60 91 30 04 	lds	r22, 0x0430	; 0x800430 <o2_raw_adc_count>
     acc:	70 91 31 04 	lds	r23, 0x0431	; 0x800431 <o2_raw_adc_count+0x1>
     ad0:	4a e0       	ldi	r20, 0x0A	; 10
     ad2:	50 e0       	ldi	r21, 0x00	; 0
     ad4:	87 ea       	ldi	r24, 0xA7	; 167
     ad6:	95 e0       	ldi	r25, 0x05	; 5
     ad8:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <Print::print(int, int)>
     adc:	60 91 30 04 	lds	r22, 0x0430	; 0x800430 <o2_raw_adc_count>
     ae0:	70 91 31 04 	lds	r23, 0x0431	; 0x800431 <o2_raw_adc_count+0x1>
     ae4:	07 2e       	mov	r0, r23
     ae6:	00 0c       	add	r0, r0
     ae8:	88 0b       	sbc	r24, r24
     aea:	99 0b       	sbc	r25, r25
     aec:	0e 94 4e 1b 	call	0x369c	; 0x369c <__floatsisf>
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	4a e7       	ldi	r20, 0x7A	; 122
     af6:	54 e4       	ldi	r21, 0x44	; 68
     af8:	0e 94 03 1c 	call	0x3806	; 0x3806 <__mulsf3>
     afc:	2f e6       	ldi	r18, 0x6F	; 111
     afe:	32 e1       	ldi	r19, 0x12	; 18
     b00:	43 e0       	ldi	r20, 0x03	; 3
     b02:	59 e3       	ldi	r21, 0x39	; 57
     b04:	0e 94 03 1c 	call	0x3806	; 0x3806 <__mulsf3>
     b08:	60 93 24 04 	sts	0x0424, r22	; 0x800424 <m_raw_voltage>
     b0c:	70 93 25 04 	sts	0x0425, r23	; 0x800425 <m_raw_voltage+0x1>
     b10:	80 93 26 04 	sts	0x0426, r24	; 0x800426 <m_raw_voltage+0x2>
     b14:	90 93 27 04 	sts	0x0427, r25	; 0x800427 <m_raw_voltage+0x3>
     b18:	62 ed       	ldi	r22, 0xD2	; 210
     b1a:	71 e0       	ldi	r23, 0x01	; 1
     b1c:	87 ea       	ldi	r24, 0xA7	; 167
     b1e:	95 e0       	ldi	r25, 0x05	; 5
     b20:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     b24:	40 91 24 04 	lds	r20, 0x0424	; 0x800424 <m_raw_voltage>
     b28:	50 91 25 04 	lds	r21, 0x0425	; 0x800425 <m_raw_voltage+0x1>
     b2c:	60 91 26 04 	lds	r22, 0x0426	; 0x800426 <m_raw_voltage+0x2>
     b30:	70 91 27 04 	lds	r23, 0x0427	; 0x800427 <m_raw_voltage+0x3>
     b34:	24 e0       	ldi	r18, 0x04	; 4
     b36:	30 e0       	ldi	r19, 0x00	; 0
     b38:	87 ea       	ldi	r24, 0xA7	; 167
     b3a:	95 e0       	ldi	r25, 0x05	; 5
     b3c:	0e 94 27 1a 	call	0x344e	; 0x344e <Print::print(double, int)>
     b40:	60 91 24 04 	lds	r22, 0x0424	; 0x800424 <m_raw_voltage>
     b44:	70 91 25 04 	lds	r23, 0x0425	; 0x800425 <m_raw_voltage+0x1>
     b48:	80 91 26 04 	lds	r24, 0x0426	; 0x800426 <m_raw_voltage+0x2>
     b4c:	90 91 27 04 	lds	r25, 0x0427	; 0x800427 <m_raw_voltage+0x3>
     b50:	20 91 2c 04 	lds	r18, 0x042C	; 0x80042c <o2_slope>
     b54:	30 91 2d 04 	lds	r19, 0x042D	; 0x80042d <o2_slope+0x1>
     b58:	40 91 2e 04 	lds	r20, 0x042E	; 0x80042e <o2_slope+0x2>
     b5c:	50 91 2f 04 	lds	r21, 0x042F	; 0x80042f <o2_slope+0x3>
     b60:	c0 90 28 04 	lds	r12, 0x0428	; 0x800428 <o2_const_val>
     b64:	d0 90 29 04 	lds	r13, 0x0429	; 0x800429 <o2_const_val+0x1>
     b68:	e0 90 2a 04 	lds	r14, 0x042A	; 0x80042a <o2_const_val+0x2>
     b6c:	f0 90 2b 04 	lds	r15, 0x042B	; 0x80042b <o2_const_val+0x3>
     b70:	0e 94 03 1c 	call	0x3806	; 0x3806 <__mulsf3>
     b74:	a7 01       	movw	r20, r14
     b76:	96 01       	movw	r18, r12
     b78:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__addsf3>
     b7c:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <o2_concentration>
     b80:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <o2_concentration+0x1>
     b84:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <o2_concentration+0x2>
     b88:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <o2_concentration+0x3>
     b8c:	65 ee       	ldi	r22, 0xE5	; 229
     b8e:	71 e0       	ldi	r23, 0x01	; 1
     b90:	87 ea       	ldi	r24, 0xA7	; 167
     b92:	95 e0       	ldi	r25, 0x05	; 5
     b94:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     b98:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <o2_concentration>
     b9c:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <o2_concentration+0x1>
     ba0:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <o2_concentration+0x2>
     ba4:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <o2_concentration+0x3>
     ba8:	22 e0       	ldi	r18, 0x02	; 2
     baa:	30 e0       	ldi	r19, 0x00	; 0
     bac:	87 ea       	ldi	r24, 0xA7	; 167
     bae:	95 e0       	ldi	r25, 0x05	; 5
     bb0:	0e 94 27 1a 	call	0x344e	; 0x344e <Print::print(double, int)>
     bb4:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <o2_concentration>
     bb8:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <o2_concentration+0x1>
     bbc:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <o2_concentration+0x2>
     bc0:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <o2_concentration+0x3>
     bc4:	24 e0       	ldi	r18, 0x04	; 4
     bc6:	30 e0       	ldi	r19, 0x00	; 0
     bc8:	87 ea       	ldi	r24, 0xA7	; 167
     bca:	95 e0       	ldi	r25, 0x05	; 5
     bcc:	0e 94 27 1a 	call	0x344e	; 0x344e <Print::print(double, int)>
     bd0:	6a ed       	ldi	r22, 0xDA	; 218
     bd2:	73 e0       	ldi	r23, 0x03	; 3
     bd4:	87 ea       	ldi	r24, 0xA7	; 167
     bd6:	95 e0       	ldi	r25, 0x05	; 5
     bd8:	ff 90       	pop	r15
     bda:	ef 90       	pop	r14
     bdc:	df 90       	pop	r13
     bde:	cf 90       	pop	r12
     be0:	0c 94 41 18 	jmp	0x3082	; 0x3082 <Print::println(char const*)>

00000be4 <config_timer1()>:
_Z13config_timer1v():
     be4:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     be8:	e1 e8       	ldi	r30, 0x81	; 129
     bea:	f0 e0       	ldi	r31, 0x00	; 0
     bec:	10 82       	st	Z, r1
     bee:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     bf2:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     bf6:	89 ef       	ldi	r24, 0xF9	; 249
     bf8:	90 e0       	ldi	r25, 0x00	; 0
     bfa:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     bfe:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     c02:	80 81       	ld	r24, Z
     c04:	88 60       	ori	r24, 0x08	; 8
     c06:	80 83       	st	Z, r24
     c08:	80 81       	ld	r24, Z
     c0a:	83 60       	ori	r24, 0x03	; 3
     c0c:	80 83       	st	Z, r24
     c0e:	ef e6       	ldi	r30, 0x6F	; 111
     c10:	f0 e0       	ldi	r31, 0x00	; 0
     c12:	80 81       	ld	r24, Z
     c14:	82 60       	ori	r24, 0x02	; 2
     c16:	80 83       	st	Z, r24
     c18:	08 95       	ret

00000c1a <timer_init()>:
_Z10timer_initv():
     c1a:	f8 94       	cli
     c1c:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <config_timer1()>
     c20:	78 94       	sei
     c22:	6b ef       	ldi	r22, 0xFB	; 251
     c24:	71 e0       	ldi	r23, 0x01	; 1
     c26:	87 ea       	ldi	r24, 0xA7	; 167
     c28:	95 e0       	ldi	r25, 0x05	; 5
     c2a:	0c 94 41 18 	jmp	0x3082	; 0x3082 <Print::println(char const*)>

00000c2e <__vector_13>:
__vector_13():
     c2e:	1f 92       	push	r1
     c30:	0f 92       	push	r0
     c32:	0f b6       	in	r0, 0x3f	; 63
     c34:	0f 92       	push	r0
     c36:	11 24       	eor	r1, r1
     c38:	0b b6       	in	r0, 0x3b	; 59
     c3a:	0f 92       	push	r0
     c3c:	2f 93       	push	r18
     c3e:	3f 93       	push	r19
     c40:	4f 93       	push	r20
     c42:	5f 93       	push	r21
     c44:	6f 93       	push	r22
     c46:	7f 93       	push	r23
     c48:	8f 93       	push	r24
     c4a:	9f 93       	push	r25
     c4c:	af 93       	push	r26
     c4e:	bf 93       	push	r27
     c50:	cf 93       	push	r28
     c52:	ef 93       	push	r30
     c54:	ff 93       	push	r31
     c56:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <systemtick_msecs>
     c5a:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <systemtick_msecs+0x1>
     c5e:	a0 91 61 04 	lds	r26, 0x0461	; 0x800461 <systemtick_msecs+0x2>
     c62:	b0 91 62 04 	lds	r27, 0x0462	; 0x800462 <systemtick_msecs+0x3>
     c66:	01 96       	adiw	r24, 0x01	; 1
     c68:	a1 1d       	adc	r26, r1
     c6a:	b1 1d       	adc	r27, r1
     c6c:	80 93 5f 04 	sts	0x045F, r24	; 0x80045f <systemtick_msecs>
     c70:	90 93 60 04 	sts	0x0460, r25	; 0x800460 <systemtick_msecs+0x1>
     c74:	a0 93 61 04 	sts	0x0461, r26	; 0x800461 <systemtick_msecs+0x2>
     c78:	b0 93 62 04 	sts	0x0462, r27	; 0x800462 <systemtick_msecs+0x3>
     c7c:	c1 e0       	ldi	r28, 0x01	; 1
     c7e:	c0 93 5b 04 	sts	0x045B, r28	; 0x80045b <f_msec>
     c82:	60 91 5f 04 	lds	r22, 0x045F	; 0x80045f <systemtick_msecs>
     c86:	70 91 60 04 	lds	r23, 0x0460	; 0x800460 <systemtick_msecs+0x1>
     c8a:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <systemtick_msecs+0x2>
     c8e:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <systemtick_msecs+0x3>
     c92:	2a e0       	ldi	r18, 0x0A	; 10
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	40 e0       	ldi	r20, 0x00	; 0
     c98:	50 e0       	ldi	r21, 0x00	; 0
     c9a:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
     c9e:	67 2b       	or	r22, r23
     ca0:	68 2b       	or	r22, r24
     ca2:	69 2b       	or	r22, r25
     ca4:	09 f0       	breq	.+2      	; 0xca8 <__vector_13+0x7a>
     ca6:	49 c0       	rjmp	.+146    	; 0xd3a <__vector_13+0x10c>
     ca8:	c0 93 5a 04 	sts	0x045A, r28	; 0x80045a <f_10msec>
     cac:	60 91 5f 04 	lds	r22, 0x045F	; 0x80045f <systemtick_msecs>
     cb0:	70 91 60 04 	lds	r23, 0x0460	; 0x800460 <systemtick_msecs+0x1>
     cb4:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <systemtick_msecs+0x2>
     cb8:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <systemtick_msecs+0x3>
     cbc:	24 e6       	ldi	r18, 0x64	; 100
     cbe:	30 e0       	ldi	r19, 0x00	; 0
     cc0:	40 e0       	ldi	r20, 0x00	; 0
     cc2:	50 e0       	ldi	r21, 0x00	; 0
     cc4:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
     cc8:	67 2b       	or	r22, r23
     cca:	68 2b       	or	r22, r24
     ccc:	69 2b       	or	r22, r25
     cce:	a9 f5       	brne	.+106    	; 0xd3a <__vector_13+0x10c>
     cd0:	c0 93 59 04 	sts	0x0459, r28	; 0x800459 <f_100msec>
     cd4:	60 91 5f 04 	lds	r22, 0x045F	; 0x80045f <systemtick_msecs>
     cd8:	70 91 60 04 	lds	r23, 0x0460	; 0x800460 <systemtick_msecs+0x1>
     cdc:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <systemtick_msecs+0x2>
     ce0:	90 91 62 04 	lds	r25, 0x0462	; 0x800462 <systemtick_msecs+0x3>
     ce4:	28 ee       	ldi	r18, 0xE8	; 232
     ce6:	33 e0       	ldi	r19, 0x03	; 3
     ce8:	40 e0       	ldi	r20, 0x00	; 0
     cea:	50 e0       	ldi	r21, 0x00	; 0
     cec:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
     cf0:	67 2b       	or	r22, r23
     cf2:	68 2b       	or	r22, r24
     cf4:	69 2b       	or	r22, r25
     cf6:	09 f5       	brne	.+66     	; 0xd3a <__vector_13+0x10c>
     cf8:	c0 93 58 04 	sts	0x0458, r28	; 0x800458 <f_1sec>
     cfc:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <systemtick_secs>
     d00:	8f 5f       	subi	r24, 0xFF	; 255
     d02:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <systemtick_secs>
     d06:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <systemtick_secs>
     d0a:	8c 33       	cpi	r24, 0x3C	; 60
     d0c:	b0 f0       	brcs	.+44     	; 0xd3a <__vector_13+0x10c>
     d0e:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <systemtick_secs>
     d12:	c0 93 57 04 	sts	0x0457, r28	; 0x800457 <f_1min>
     d16:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <systemtick_mins>
     d1a:	8f 5f       	subi	r24, 0xFF	; 255
     d1c:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <systemtick_mins>
     d20:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <systemtick_mins>
     d24:	8c 33       	cpi	r24, 0x3C	; 60
     d26:	48 f0       	brcs	.+18     	; 0xd3a <__vector_13+0x10c>
     d28:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <systemtick_mins>
     d2c:	c0 93 56 04 	sts	0x0456, r28	; 0x800456 <f_1hr>
     d30:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <systemtick_hrs>
     d34:	8f 5f       	subi	r24, 0xFF	; 255
     d36:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <systemtick_hrs>
     d3a:	ff 91       	pop	r31
     d3c:	ef 91       	pop	r30
     d3e:	cf 91       	pop	r28
     d40:	bf 91       	pop	r27
     d42:	af 91       	pop	r26
     d44:	9f 91       	pop	r25
     d46:	8f 91       	pop	r24
     d48:	7f 91       	pop	r23
     d4a:	6f 91       	pop	r22
     d4c:	5f 91       	pop	r21
     d4e:	4f 91       	pop	r20
     d50:	3f 91       	pop	r19
     d52:	2f 91       	pop	r18
     d54:	0f 90       	pop	r0
     d56:	0b be       	out	0x3b, r0	; 59
     d58:	0f 90       	pop	r0
     d5a:	0f be       	out	0x3f, r0	; 63
     d5c:	0f 90       	pop	r0
     d5e:	1f 90       	pop	r1
     d60:	18 95       	reti

00000d62 <new_delay_msecs(unsigned int)>:
_Z15new_delay_msecsj():
     d62:	0f 93       	push	r16
     d64:	1f 93       	push	r17
     d66:	cf 93       	push	r28
     d68:	df 93       	push	r29
     d6a:	ec 01       	movw	r28, r24
     d6c:	6f e0       	ldi	r22, 0x0F	; 15
     d6e:	72 e0       	ldi	r23, 0x02	; 2
     d70:	87 ea       	ldi	r24, 0xA7	; 167
     d72:	95 e0       	ldi	r25, 0x05	; 5
     d74:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     d78:	00 91 5f 04 	lds	r16, 0x045F	; 0x80045f <systemtick_msecs>
     d7c:	10 91 60 04 	lds	r17, 0x0460	; 0x800460 <systemtick_msecs+0x1>
     d80:	20 91 61 04 	lds	r18, 0x0461	; 0x800461 <systemtick_msecs+0x2>
     d84:	30 91 62 04 	lds	r19, 0x0462	; 0x800462 <systemtick_msecs+0x3>
     d88:	ce 01       	movw	r24, r28
     d8a:	b0 e0       	ldi	r27, 0x00	; 0
     d8c:	a0 e0       	ldi	r26, 0x00	; 0
_Z12time_elapsedm():
     d8e:	40 91 5f 04 	lds	r20, 0x045F	; 0x80045f <systemtick_msecs>
     d92:	50 91 60 04 	lds	r21, 0x0460	; 0x800460 <systemtick_msecs+0x1>
     d96:	60 91 61 04 	lds	r22, 0x0461	; 0x800461 <systemtick_msecs+0x2>
     d9a:	70 91 62 04 	lds	r23, 0x0462	; 0x800462 <systemtick_msecs+0x3>
     d9e:	40 1b       	sub	r20, r16
     da0:	51 0b       	sbc	r21, r17
     da2:	62 0b       	sbc	r22, r18
     da4:	73 0b       	sbc	r23, r19
_Z15new_delay_msecsj():
     da6:	48 17       	cp	r20, r24
     da8:	59 07       	cpc	r21, r25
     daa:	6a 07       	cpc	r22, r26
     dac:	7b 07       	cpc	r23, r27
     dae:	78 f3       	brcs	.-34     	; 0xd8e <new_delay_msecs(unsigned int)+0x2c>
     db0:	df 91       	pop	r29
     db2:	cf 91       	pop	r28
     db4:	1f 91       	pop	r17
     db6:	0f 91       	pop	r16
     db8:	08 95       	ret

00000dba <platform_init()>:
_Z13platform_initv():
     dba:	0e 94 0d 06 	call	0xc1a	; 0xc1a <timer_init()>
     dbe:	20 e0       	ldi	r18, 0x00	; 0
     dc0:	44 e0       	ldi	r20, 0x04	; 4
     dc2:	64 e1       	ldi	r22, 0x14	; 20
     dc4:	82 ec       	ldi	r24, 0xC2	; 194
     dc6:	94 e0       	ldi	r25, 0x04	; 4
     dc8:	0e 94 99 0c 	call	0x1932	; 0x1932 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>
     dcc:	61 e0       	ldi	r22, 0x01	; 1
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     dd4:	61 e0       	ldi	r22, 0x01	; 1
     dd6:	82 e0       	ldi	r24, 0x02	; 2
     dd8:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     ddc:	61 e0       	ldi	r22, 0x01	; 1
     dde:	83 e0       	ldi	r24, 0x03	; 3
     de0:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     de4:	61 e0       	ldi	r22, 0x01	; 1
     de6:	84 e0       	ldi	r24, 0x04	; 4
     de8:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     dec:	61 e0       	ldi	r22, 0x01	; 1
     dee:	8c e0       	ldi	r24, 0x0C	; 12
     df0:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     df4:	61 e0       	ldi	r22, 0x01	; 1
     df6:	8c e0       	ldi	r24, 0x0C	; 12
     df8:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
     dfc:	61 e0       	ldi	r22, 0x01	; 1
     dfe:	8d e1       	ldi	r24, 0x1D	; 29
     e00:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     e04:	61 e0       	ldi	r22, 0x01	; 1
     e06:	84 e0       	ldi	r24, 0x04	; 4
     e08:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     e0c:	60 e0       	ldi	r22, 0x00	; 0
     e0e:	83 e0       	ldi	r24, 0x03	; 3
     e10:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     e14:	62 e0       	ldi	r22, 0x02	; 2
     e16:	83 e0       	ldi	r24, 0x03	; 3
     e18:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	84 e0       	ldi	r24, 0x04	; 4
     e20:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     e24:	62 e0       	ldi	r22, 0x02	; 2
     e26:	84 e0       	ldi	r24, 0x04	; 4
     e28:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     e2c:	60 e0       	ldi	r22, 0x00	; 0
     e2e:	8d e1       	ldi	r24, 0x1D	; 29
     e30:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
     e34:	60 e0       	ldi	r22, 0x00	; 0
     e36:	84 e0       	ldi	r24, 0x04	; 4
     e38:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
     e3c:	61 e0       	ldi	r22, 0x01	; 1
     e3e:	85 e0       	ldi	r24, 0x05	; 5
     e40:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     e44:	61 e0       	ldi	r22, 0x01	; 1
     e46:	87 e0       	ldi	r24, 0x07	; 7
     e48:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     e4c:	61 e0       	ldi	r22, 0x01	; 1
     e4e:	8d e0       	ldi	r24, 0x0D	; 13
     e50:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     e54:	60 e0       	ldi	r22, 0x00	; 0
     e56:	85 e0       	ldi	r24, 0x05	; 5
     e58:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
     e5c:	60 e0       	ldi	r22, 0x00	; 0
     e5e:	87 e0       	ldi	r24, 0x07	; 7
     e60:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
     e64:	60 e0       	ldi	r22, 0x00	; 0
     e66:	8d e0       	ldi	r24, 0x0D	; 13
     e68:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
     e6c:	61 e0       	ldi	r22, 0x01	; 1
     e6e:	86 e0       	ldi	r24, 0x06	; 6
     e70:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     e74:	61 e0       	ldi	r22, 0x01	; 1
     e76:	8e e0       	ldi	r24, 0x0E	; 14
     e78:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     e7c:	61 e0       	ldi	r22, 0x01	; 1
     e7e:	8f e0       	ldi	r24, 0x0F	; 15
     e80:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
     e84:	60 e0       	ldi	r22, 0x00	; 0
     e86:	86 e0       	ldi	r24, 0x06	; 6
     e88:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
     e8c:	60 e0       	ldi	r22, 0x00	; 0
     e8e:	8e e0       	ldi	r24, 0x0E	; 14
     e90:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
     e94:	60 e0       	ldi	r22, 0x00	; 0
     e96:	8f e0       	ldi	r24, 0x0F	; 15
     e98:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
     e9c:	61 e1       	ldi	r22, 0x11	; 17
     e9e:	72 e0       	ldi	r23, 0x02	; 2
     ea0:	87 ea       	ldi	r24, 0xA7	; 167
     ea2:	95 e0       	ldi	r25, 0x05	; 5
     ea4:	0c 94 41 18 	jmp	0x3082	; 0x3082 <Print::println(char const*)>

00000ea8 <do_control(DO_CONTROLS_E, bool)>:
_Z10do_control13DO_CONTROLS_Eb():
     ea8:	1f 93       	push	r17
     eaa:	cf 93       	push	r28
     eac:	df 93       	push	r29
     eae:	ec 01       	movw	r28, r24
     eb0:	16 2f       	mov	r17, r22
     eb2:	62 e2       	ldi	r22, 0x22	; 34
     eb4:	72 e0       	ldi	r23, 0x02	; 2
     eb6:	87 ea       	ldi	r24, 0xA7	; 167
     eb8:	95 e0       	ldi	r25, 0x05	; 5
     eba:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     ebe:	4a e0       	ldi	r20, 0x0A	; 10
     ec0:	50 e0       	ldi	r21, 0x00	; 0
     ec2:	be 01       	movw	r22, r28
     ec4:	87 ea       	ldi	r24, 0xA7	; 167
     ec6:	95 e0       	ldi	r25, 0x05	; 5
     ec8:	0e 94 f3 18 	call	0x31e6	; 0x31e6 <Print::println(int, int)>
     ecc:	c8 30       	cpi	r28, 0x08	; 8
     ece:	d1 05       	cpc	r29, r1
     ed0:	09 f4       	brne	.+2      	; 0xed4 <do_control(DO_CONTROLS_E, bool)+0x2c>
     ed2:	40 c0       	rjmp	.+128    	; 0xf54 <do_control(DO_CONTROLS_E, bool)+0xac>
     ed4:	70 f4       	brcc	.+28     	; 0xef2 <do_control(DO_CONTROLS_E, bool)+0x4a>
     ed6:	c2 30       	cpi	r28, 0x02	; 2
     ed8:	d1 05       	cpc	r29, r1
     eda:	b1 f1       	breq	.+108    	; 0xf48 <do_control(DO_CONTROLS_E, bool)+0xa0>
     edc:	c4 30       	cpi	r28, 0x04	; 4
     ede:	d1 05       	cpc	r29, r1
     ee0:	b1 f1       	breq	.+108    	; 0xf4e <do_control(DO_CONTROLS_E, bool)+0xa6>
     ee2:	c1 30       	cpi	r28, 0x01	; 1
     ee4:	d1 05       	cpc	r29, r1
     ee6:	79 f4       	brne	.+30     	; 0xf06 <do_control(DO_CONTROLS_E, bool)+0x5e>
     ee8:	61 2f       	mov	r22, r17
     eea:	81 e0       	ldi	r24, 0x01	; 1
     eec:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
     ef0:	23 c0       	rjmp	.+70     	; 0xf38 <do_control(DO_CONTROLS_E, bool)+0x90>
     ef2:	c0 32       	cpi	r28, 0x20	; 32
     ef4:	d1 05       	cpc	r29, r1
     ef6:	01 f1       	breq	.+64     	; 0xf38 <do_control(DO_CONTROLS_E, bool)+0x90>
     ef8:	c8 f4       	brcc	.+50     	; 0xf2c <do_control(DO_CONTROLS_E, bool)+0x84>
     efa:	61 e0       	ldi	r22, 0x01	; 1
     efc:	61 27       	eor	r22, r17
     efe:	8d e1       	ldi	r24, 0x1D	; 29
     f00:	c0 31       	cpi	r28, 0x10	; 16
     f02:	d1 05       	cpc	r29, r1
     f04:	99 f3       	breq	.-26     	; 0xeec <do_control(DO_CONTROLS_E, bool)+0x44>
     f06:	6b e2       	ldi	r22, 0x2B	; 43
     f08:	72 e0       	ldi	r23, 0x02	; 2
     f0a:	87 ea       	ldi	r24, 0xA7	; 167
     f0c:	95 e0       	ldi	r25, 0x05	; 5
     f0e:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
     f12:	4a e0       	ldi	r20, 0x0A	; 10
     f14:	50 e0       	ldi	r21, 0x00	; 0
     f16:	60 91 32 04 	lds	r22, 0x0432	; 0x800432 <do_byte>
     f1a:	87 ea       	ldi	r24, 0xA7	; 167
     f1c:	95 e0       	ldi	r25, 0x05	; 5
     f1e:	0e 94 19 19 	call	0x3232	; 0x3232 <Print::println(unsigned char, int)>
     f22:	80 e0       	ldi	r24, 0x00	; 0
     f24:	df 91       	pop	r29
     f26:	cf 91       	pop	r28
     f28:	1f 91       	pop	r17
     f2a:	08 95       	ret
     f2c:	c0 34       	cpi	r28, 0x40	; 64
     f2e:	d1 05       	cpc	r29, r1
     f30:	19 f0       	breq	.+6      	; 0xf38 <do_control(DO_CONTROLS_E, bool)+0x90>
     f32:	c0 38       	cpi	r28, 0x80	; 128
     f34:	d1 05       	cpc	r29, r1
     f36:	39 f7       	brne	.-50     	; 0xf06 <do_control(DO_CONTROLS_E, bool)+0x5e>
     f38:	80 91 32 04 	lds	r24, 0x0432	; 0x800432 <do_byte>
     f3c:	11 23       	and	r17, r17
     f3e:	69 f0       	breq	.+26     	; 0xf5a <do_control(DO_CONTROLS_E, bool)+0xb2>
     f40:	c8 2b       	or	r28, r24
     f42:	c0 93 32 04 	sts	0x0432, r28	; 0x800432 <do_byte>
     f46:	df cf       	rjmp	.-66     	; 0xf06 <do_control(DO_CONTROLS_E, bool)+0x5e>
     f48:	61 2f       	mov	r22, r17
     f4a:	82 e0       	ldi	r24, 0x02	; 2
     f4c:	cf cf       	rjmp	.-98     	; 0xeec <do_control(DO_CONTROLS_E, bool)+0x44>
     f4e:	61 2f       	mov	r22, r17
     f50:	83 e0       	ldi	r24, 0x03	; 3
     f52:	cc cf       	rjmp	.-104    	; 0xeec <do_control(DO_CONTROLS_E, bool)+0x44>
     f54:	61 2f       	mov	r22, r17
     f56:	84 e0       	ldi	r24, 0x04	; 4
     f58:	c9 cf       	rjmp	.-110    	; 0xeec <do_control(DO_CONTROLS_E, bool)+0x44>
     f5a:	c0 95       	com	r28
     f5c:	c8 23       	and	r28, r24
     f5e:	f1 cf       	rjmp	.-30     	; 0xf42 <do_control(DO_CONTROLS_E, bool)+0x9a>

00000f60 <tworks2_values_to_default_postion()>:
_Z33tworks2_values_to_default_postionv():
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	81 e0       	ldi	r24, 0x01	; 1
     f64:	90 e0       	ldi	r25, 0x00	; 0
     f66:	0e 94 54 07 	call	0xea8	; 0xea8 <do_control(DO_CONTROLS_E, bool)>
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	82 e0       	ldi	r24, 0x02	; 2
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	0c 94 54 07 	jmp	0xea8	; 0xea8 <do_control(DO_CONTROLS_E, bool)>

00000f74 <tworks2_PSA_logic()>:
_Z17tworks2_PSA_logicv():
     f74:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <cycle>
     f78:	81 30       	cpi	r24, 0x01	; 1
     f7a:	21 f1       	breq	.+72     	; 0xfc4 <tworks2_PSA_logic()+0x50>
     f7c:	80 f0       	brcs	.+32     	; 0xf9e <tworks2_PSA_logic()+0x2a>
     f7e:	82 30       	cpi	r24, 0x02	; 2
     f80:	09 f4       	brne	.+2      	; 0xf84 <tworks2_PSA_logic()+0x10>
     f82:	40 c0       	rjmp	.+128    	; 0x1004 <tworks2_PSA_logic()+0x90>
     f84:	83 30       	cpi	r24, 0x03	; 3
     f86:	f1 f0       	breq	.+60     	; 0xfc4 <tworks2_PSA_logic()+0x50>
     f88:	10 92 69 04 	sts	0x0469, r1	; 0x800469 <cycle>
     f8c:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <nb_delay>
     f90:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <nb_delay+0x1>
     f94:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <nb_delay+0x2>
     f98:	10 92 3a 04 	sts	0x043A, r1	; 0x80043a <nb_delay+0x3>
     f9c:	08 95       	ret
     f9e:	61 e0       	ldi	r22, 0x01	; 1
     fa0:	81 e0       	ldi	r24, 0x01	; 1
     fa2:	90 e0       	ldi	r25, 0x00	; 0
     fa4:	0e 94 54 07 	call	0xea8	; 0xea8 <do_control(DO_CONTROLS_E, bool)>
     fa8:	60 e0       	ldi	r22, 0x00	; 0
     faa:	82 e0       	ldi	r24, 0x02	; 2
     fac:	90 e0       	ldi	r25, 0x00	; 0
     fae:	0e 94 54 07 	call	0xea8	; 0xea8 <do_control(DO_CONTROLS_E, bool)>
     fb2:	80 91 43 04 	lds	r24, 0x0443	; 0x800443 <Production_Delay>
     fb6:	90 91 44 04 	lds	r25, 0x0444	; 0x800444 <Production_Delay+0x1>
     fba:	a0 91 45 04 	lds	r26, 0x0445	; 0x800445 <Production_Delay+0x2>
     fbe:	b0 91 46 04 	lds	r27, 0x0446	; 0x800446 <Production_Delay+0x3>
     fc2:	12 c0       	rjmp	.+36     	; 0xfe8 <tworks2_PSA_logic()+0x74>
     fc4:	61 e0       	ldi	r22, 0x01	; 1
     fc6:	81 e0       	ldi	r24, 0x01	; 1
     fc8:	90 e0       	ldi	r25, 0x00	; 0
     fca:	0e 94 54 07 	call	0xea8	; 0xea8 <do_control(DO_CONTROLS_E, bool)>
     fce:	61 e0       	ldi	r22, 0x01	; 1
     fd0:	82 e0       	ldi	r24, 0x02	; 2
     fd2:	90 e0       	ldi	r25, 0x00	; 0
     fd4:	0e 94 54 07 	call	0xea8	; 0xea8 <do_control(DO_CONTROLS_E, bool)>
     fd8:	80 91 3b 04 	lds	r24, 0x043B	; 0x80043b <PreCharge_Delay>
     fdc:	90 91 3c 04 	lds	r25, 0x043C	; 0x80043c <PreCharge_Delay+0x1>
     fe0:	a0 91 3d 04 	lds	r26, 0x043D	; 0x80043d <PreCharge_Delay+0x2>
     fe4:	b0 91 3e 04 	lds	r27, 0x043E	; 0x80043e <PreCharge_Delay+0x3>
     fe8:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <nb_delay>
     fec:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <nb_delay+0x1>
     ff0:	a0 93 39 04 	sts	0x0439, r26	; 0x800439 <nb_delay+0x2>
     ff4:	b0 93 3a 04 	sts	0x043A, r27	; 0x80043a <nb_delay+0x3>
     ff8:	80 91 69 04 	lds	r24, 0x0469	; 0x800469 <cycle>
     ffc:	8f 5f       	subi	r24, 0xFF	; 255
     ffe:	80 93 69 04 	sts	0x0469, r24	; 0x800469 <cycle>
    1002:	08 95       	ret
    1004:	60 e0       	ldi	r22, 0x00	; 0
    1006:	81 e0       	ldi	r24, 0x01	; 1
    1008:	90 e0       	ldi	r25, 0x00	; 0
    100a:	0e 94 54 07 	call	0xea8	; 0xea8 <do_control(DO_CONTROLS_E, bool)>
    100e:	61 e0       	ldi	r22, 0x01	; 1
    1010:	cc cf       	rjmp	.-104    	; 0xfaa <tworks2_PSA_logic()+0x36>

00001012 <o2_main_task()>:
_Z12o2_main_taskv():
    1012:	cf 92       	push	r12
    1014:	df 92       	push	r13
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <f_system_running>
    101e:	81 11       	cpse	r24, r1
    1020:	07 c0       	rjmp	.+14     	; 0x1030 <o2_main_task()+0x1e>
    1022:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <o2_main_task()::once_done>
    1026:	ff 90       	pop	r15
    1028:	ef 90       	pop	r14
    102a:	df 90       	pop	r13
    102c:	cf 90       	pop	r12
    102e:	08 95       	ret
    1030:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <o2_main_task()::once_done>
    1034:	81 11       	cpse	r24, r1
    1036:	08 c0       	rjmp	.+16     	; 0x1048 <o2_main_task()+0x36>
    1038:	81 e0       	ldi	r24, 0x01	; 1
    103a:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <o2_main_task()::once_done>
    103e:	61 e0       	ldi	r22, 0x01	; 1
    1040:	88 e0       	ldi	r24, 0x08	; 8
    1042:	90 e0       	ldi	r25, 0x00	; 0
    1044:	0e 94 54 07 	call	0xea8	; 0xea8 <do_control(DO_CONTROLS_E, bool)>
    1048:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <f_sec_change_o2_task>
    104c:	88 23       	and	r24, r24
    104e:	99 f1       	breq	.+102    	; 0x10b6 <o2_main_task()+0xa4>
    1050:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <f_sec_change_o2_task>
    1054:	20 91 4b 04 	lds	r18, 0x044B	; 0x80044b <current_run_time_secs>
    1058:	30 91 4c 04 	lds	r19, 0x044C	; 0x80044c <current_run_time_secs+0x1>
    105c:	2f 5f       	subi	r18, 0xFF	; 255
    105e:	3f 4f       	sbci	r19, 0xFF	; 255
    1060:	30 93 4c 04 	sts	0x044C, r19	; 0x80044c <current_run_time_secs+0x1>
    1064:	20 93 4b 04 	sts	0x044B, r18	; 0x80044b <current_run_time_secs>
    1068:	c0 90 47 04 	lds	r12, 0x0447	; 0x800447 <total_run_time_secs>
    106c:	d0 90 48 04 	lds	r13, 0x0448	; 0x800448 <total_run_time_secs+0x1>
    1070:	e0 90 49 04 	lds	r14, 0x0449	; 0x800449 <total_run_time_secs+0x2>
    1074:	f0 90 4a 04 	lds	r15, 0x044A	; 0x80044a <total_run_time_secs+0x3>
    1078:	8f ef       	ldi	r24, 0xFF	; 255
    107a:	c8 1a       	sub	r12, r24
    107c:	d8 0a       	sbc	r13, r24
    107e:	e8 0a       	sbc	r14, r24
    1080:	f8 0a       	sbc	r15, r24
    1082:	c0 92 47 04 	sts	0x0447, r12	; 0x800447 <total_run_time_secs>
    1086:	d0 92 48 04 	sts	0x0448, r13	; 0x800448 <total_run_time_secs+0x1>
    108a:	e0 92 49 04 	sts	0x0449, r14	; 0x800449 <total_run_time_secs+0x2>
    108e:	f0 92 4a 04 	sts	0x044A, r15	; 0x80044a <total_run_time_secs+0x3>
    1092:	c9 01       	movw	r24, r18
    1094:	6f e0       	ldi	r22, 0x0F	; 15
    1096:	70 e0       	ldi	r23, 0x00	; 0
    1098:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
    109c:	89 2b       	or	r24, r25
    109e:	59 f4       	brne	.+22     	; 0x10b6 <o2_main_task()+0xa4>
    10a0:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <o2_main_task()::quadrant>
    10a4:	8f 5f       	subi	r24, 0xFF	; 255
    10a6:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <o2_main_task()::quadrant>
    10aa:	83 30       	cpi	r24, 0x03	; 3
    10ac:	08 f4       	brcc	.+2      	; 0x10b0 <o2_main_task()+0x9e>
    10ae:	73 c0       	rjmp	.+230    	; 0x1196 <o2_main_task()+0x184>
    10b0:	83 30       	cpi	r24, 0x03	; 3
    10b2:	09 f4       	brne	.+2      	; 0x10b6 <o2_main_task()+0xa4>
    10b4:	8e c0       	rjmp	.+284    	; 0x11d2 <o2_main_task()+0x1c0>
_Z12time_elapsedm():
    10b6:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <systemtick_msecs>
    10ba:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <systemtick_msecs+0x1>
    10be:	a0 91 61 04 	lds	r26, 0x0461	; 0x800461 <systemtick_msecs+0x2>
    10c2:	b0 91 62 04 	lds	r27, 0x0462	; 0x800462 <systemtick_msecs+0x3>
    10c6:	40 91 65 04 	lds	r20, 0x0465	; 0x800465 <o2_main_task()::time_tag>
    10ca:	50 91 66 04 	lds	r21, 0x0466	; 0x800466 <o2_main_task()::time_tag+0x1>
    10ce:	60 91 67 04 	lds	r22, 0x0467	; 0x800467 <o2_main_task()::time_tag+0x2>
    10d2:	70 91 68 04 	lds	r23, 0x0468	; 0x800468 <o2_main_task()::time_tag+0x3>
    10d6:	84 1b       	sub	r24, r20
    10d8:	95 0b       	sbc	r25, r21
    10da:	a6 0b       	sbc	r26, r22
    10dc:	b7 0b       	sbc	r27, r23
_Z12o2_main_taskv():
    10de:	40 91 37 04 	lds	r20, 0x0437	; 0x800437 <nb_delay>
    10e2:	50 91 38 04 	lds	r21, 0x0438	; 0x800438 <nb_delay+0x1>
    10e6:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <nb_delay+0x2>
    10ea:	70 91 3a 04 	lds	r23, 0x043A	; 0x80043a <nb_delay+0x3>
    10ee:	84 17       	cp	r24, r20
    10f0:	95 07       	cpc	r25, r21
    10f2:	a6 07       	cpc	r26, r22
    10f4:	b7 07       	cpc	r27, r23
    10f6:	08 f4       	brcc	.+2      	; 0x10fa <o2_main_task()+0xe8>
    10f8:	96 cf       	rjmp	.-212    	; 0x1026 <o2_main_task()+0x14>
    10fa:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <systemtick_msecs>
    10fe:	90 91 60 04 	lds	r25, 0x0460	; 0x800460 <systemtick_msecs+0x1>
    1102:	a0 91 61 04 	lds	r26, 0x0461	; 0x800461 <systemtick_msecs+0x2>
    1106:	b0 91 62 04 	lds	r27, 0x0462	; 0x800462 <systemtick_msecs+0x3>
    110a:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <o2_main_task()::time_tag>
    110e:	90 93 66 04 	sts	0x0466, r25	; 0x800466 <o2_main_task()::time_tag+0x1>
    1112:	a0 93 67 04 	sts	0x0467, r26	; 0x800467 <o2_main_task()::time_tag+0x2>
    1116:	b0 93 68 04 	sts	0x0468, r27	; 0x800468 <o2_main_task()::time_tag+0x3>
    111a:	66 e3       	ldi	r22, 0x36	; 54
    111c:	72 e0       	ldi	r23, 0x02	; 2
    111e:	87 ea       	ldi	r24, 0xA7	; 167
    1120:	95 e0       	ldi	r25, 0x05	; 5
    1122:	0e 94 41 18 	call	0x3082	; 0x3082 <Print::println(char const*)>
    1126:	0e 94 ba 07 	call	0xf74	; 0xf74 <tworks2_PSA_logic()>
    112a:	80 91 37 04 	lds	r24, 0x0437	; 0x800437 <nb_delay>
    112e:	90 91 38 04 	lds	r25, 0x0438	; 0x800438 <nb_delay+0x1>
    1132:	a0 91 39 04 	lds	r26, 0x0439	; 0x800439 <nb_delay+0x2>
    1136:	b0 91 3a 04 	lds	r27, 0x043A	; 0x80043a <nb_delay+0x3>
    113a:	40 91 33 04 	lds	r20, 0x0433	; 0x800433 <prev_nb_delay>
    113e:	50 91 34 04 	lds	r21, 0x0434	; 0x800434 <prev_nb_delay+0x1>
    1142:	60 91 35 04 	lds	r22, 0x0435	; 0x800435 <prev_nb_delay+0x2>
    1146:	70 91 36 04 	lds	r23, 0x0436	; 0x800436 <prev_nb_delay+0x3>
    114a:	84 17       	cp	r24, r20
    114c:	95 07       	cpc	r25, r21
    114e:	a6 07       	cpc	r26, r22
    1150:	b7 07       	cpc	r27, r23
    1152:	09 f4       	brne	.+2      	; 0x1156 <o2_main_task()+0x144>
    1154:	68 cf       	rjmp	.-304    	; 0x1026 <o2_main_task()+0x14>
    1156:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <prev_nb_delay>
    115a:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <prev_nb_delay+0x1>
    115e:	a0 93 35 04 	sts	0x0435, r26	; 0x800435 <prev_nb_delay+0x2>
    1162:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <prev_nb_delay+0x3>
    1166:	6a e4       	ldi	r22, 0x4A	; 74
    1168:	72 e0       	ldi	r23, 0x02	; 2
    116a:	87 ea       	ldi	r24, 0xA7	; 167
    116c:	95 e0       	ldi	r25, 0x05	; 5
    116e:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
    1172:	40 91 37 04 	lds	r20, 0x0437	; 0x800437 <nb_delay>
    1176:	50 91 38 04 	lds	r21, 0x0438	; 0x800438 <nb_delay+0x1>
    117a:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <nb_delay+0x2>
    117e:	70 91 3a 04 	lds	r23, 0x043A	; 0x80043a <nb_delay+0x3>
    1182:	2a e0       	ldi	r18, 0x0A	; 10
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	87 ea       	ldi	r24, 0xA7	; 167
    1188:	95 e0       	ldi	r25, 0x05	; 5
    118a:	ff 90       	pop	r15
    118c:	ef 90       	pop	r14
    118e:	df 90       	pop	r13
    1190:	cf 90       	pop	r12
    1192:	0c 94 31 19 	jmp	0x3262	; 0x3262 <Print::println(unsigned long, int)>
    1196:	c9 01       	movw	r24, r18
    1198:	60 e1       	ldi	r22, 0x10	; 16
    119a:	7e e0       	ldi	r23, 0x0E	; 14
    119c:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
    11a0:	9b 01       	movw	r18, r22
    11a2:	6c e3       	ldi	r22, 0x3C	; 60
    11a4:	70 e0       	ldi	r23, 0x00	; 0
    11a6:	0e 94 75 1c 	call	0x38ea	; 0x38ea <__udivmodhi4>
    11aa:	c9 01       	movw	r24, r18
    11ac:	0e 94 a0 03 	call	0x740	; 0x740 <display_run_time(unsigned int, unsigned int)>
    11b0:	60 e0       	ldi	r22, 0x00	; 0
    11b2:	87 e0       	ldi	r24, 0x07	; 7
    11b4:	90 e0       	ldi	r25, 0x00	; 0
    11b6:	0e 94 24 02 	call	0x448	; 0x448 <neo_pixcel_data(ERROR_CODE_E, unsigned char)>
    11ba:	6d e4       	ldi	r22, 0x4D	; 77
    11bc:	71 e0       	ldi	r23, 0x01	; 1
    11be:	80 e0       	ldi	r24, 0x00	; 0
    11c0:	90 e0       	ldi	r25, 0x00	; 0
    11c2:	0e 94 73 14 	call	0x28e6	; 0x28e6 <delay>
    11c6:	61 e0       	ldi	r22, 0x01	; 1
    11c8:	81 e0       	ldi	r24, 0x01	; 1
    11ca:	90 e0       	ldi	r25, 0x00	; 0
    11cc:	0e 94 24 02 	call	0x448	; 0x448 <neo_pixcel_data(ERROR_CODE_E, unsigned char)>
    11d0:	72 cf       	rjmp	.-284    	; 0x10b6 <o2_main_task()+0xa4>
    11d2:	c7 01       	movw	r24, r14
    11d4:	b6 01       	movw	r22, r12
    11d6:	20 e1       	ldi	r18, 0x10	; 16
    11d8:	3e e0       	ldi	r19, 0x0E	; 14
    11da:	40 e0       	ldi	r20, 0x00	; 0
    11dc:	50 e0       	ldi	r21, 0x00	; 0
    11de:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
    11e2:	b9 01       	movw	r22, r18
    11e4:	33 0f       	add	r19, r19
    11e6:	88 0b       	sbc	r24, r24
    11e8:	99 0b       	sbc	r25, r25
    11ea:	0e 94 a8 02 	call	0x550	; 0x550 <display_run_hours(unsigned long)>
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	87 e0       	ldi	r24, 0x07	; 7
    11f2:	90 e0       	ldi	r25, 0x00	; 0
    11f4:	0e 94 24 02 	call	0x448	; 0x448 <neo_pixcel_data(ERROR_CODE_E, unsigned char)>
    11f8:	6d e4       	ldi	r22, 0x4D	; 77
    11fa:	71 e0       	ldi	r23, 0x01	; 1
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	90 e0       	ldi	r25, 0x00	; 0
    1200:	0e 94 73 14 	call	0x28e6	; 0x28e6 <delay>
    1204:	61 e0       	ldi	r22, 0x01	; 1
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	80 e0       	ldi	r24, 0x00	; 0
    120a:	0e 94 24 02 	call	0x448	; 0x448 <neo_pixcel_data(ERROR_CODE_E, unsigned char)>
    120e:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <o2_main_task()::quadrant>
    1212:	51 cf       	rjmp	.-350    	; 0x10b6 <o2_main_task()+0xa4>

00001214 <o2_cons_init()>:
_Z12o2_cons_initv():
    1214:	66 e5       	ldi	r22, 0x56	; 86
    1216:	72 e0       	ldi	r23, 0x02	; 2
    1218:	87 ea       	ldi	r24, 0xA7	; 167
    121a:	95 e0       	ldi	r25, 0x05	; 5
    121c:	0e 94 41 18 	call	0x3082	; 0x3082 <Print::println(char const*)>
    1220:	85 ec       	ldi	r24, 0xC5	; 197
    1222:	9f e8       	ldi	r25, 0x8F	; 143
    1224:	a1 e3       	ldi	r26, 0x31	; 49
    1226:	be e3       	ldi	r27, 0x3E	; 62
    1228:	80 93 2c 04 	sts	0x042C, r24	; 0x80042c <o2_slope>
    122c:	90 93 2d 04 	sts	0x042D, r25	; 0x80042d <o2_slope+0x1>
    1230:	a0 93 2e 04 	sts	0x042E, r26	; 0x80042e <o2_slope+0x2>
    1234:	b0 93 2f 04 	sts	0x042F, r27	; 0x80042f <o2_slope+0x3>
    1238:	87 ef       	ldi	r24, 0xF7	; 247
    123a:	95 e7       	ldi	r25, 0x75	; 117
    123c:	a0 e7       	ldi	r26, 0x70	; 112
    123e:	bf e3       	ldi	r27, 0x3F	; 63
    1240:	80 93 28 04 	sts	0x0428, r24	; 0x800428 <o2_const_val>
    1244:	90 93 29 04 	sts	0x0429, r25	; 0x800429 <o2_const_val+0x1>
    1248:	a0 93 2a 04 	sts	0x042A, r26	; 0x80042a <o2_const_val+0x2>
    124c:	b0 93 2b 04 	sts	0x042B, r27	; 0x80042b <o2_const_val+0x3>
    1250:	6a ed       	ldi	r22, 0xDA	; 218
    1252:	73 e0       	ldi	r23, 0x03	; 3
    1254:	87 ea       	ldi	r24, 0xA7	; 167
    1256:	95 e0       	ldi	r25, 0x05	; 5
    1258:	0e 94 41 18 	call	0x3082	; 0x3082 <Print::println(char const*)>
    125c:	60 ea       	ldi	r22, 0xA0	; 160
    125e:	71 e0       	ldi	r23, 0x01	; 1
    1260:	87 ea       	ldi	r24, 0xA7	; 167
    1262:	95 e0       	ldi	r25, 0x05	; 5
    1264:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
    1268:	40 91 2c 04 	lds	r20, 0x042C	; 0x80042c <o2_slope>
    126c:	50 91 2d 04 	lds	r21, 0x042D	; 0x80042d <o2_slope+0x1>
    1270:	60 91 2e 04 	lds	r22, 0x042E	; 0x80042e <o2_slope+0x2>
    1274:	70 91 2f 04 	lds	r23, 0x042F	; 0x80042f <o2_slope+0x3>
    1278:	22 e0       	ldi	r18, 0x02	; 2
    127a:	30 e0       	ldi	r19, 0x00	; 0
    127c:	87 ea       	ldi	r24, 0xA7	; 167
    127e:	95 e0       	ldi	r25, 0x05	; 5
    1280:	0e 94 27 1a 	call	0x344e	; 0x344e <Print::print(double, int)>
    1284:	6c ea       	ldi	r22, 0xAC	; 172
    1286:	71 e0       	ldi	r23, 0x01	; 1
    1288:	87 ea       	ldi	r24, 0xA7	; 167
    128a:	95 e0       	ldi	r25, 0x05	; 5
    128c:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
    1290:	40 91 28 04 	lds	r20, 0x0428	; 0x800428 <o2_const_val>
    1294:	50 91 29 04 	lds	r21, 0x0429	; 0x800429 <o2_const_val+0x1>
    1298:	60 91 2a 04 	lds	r22, 0x042A	; 0x80042a <o2_const_val+0x2>
    129c:	70 91 2b 04 	lds	r23, 0x042B	; 0x80042b <o2_const_val+0x3>
    12a0:	22 e0       	ldi	r18, 0x02	; 2
    12a2:	30 e0       	ldi	r19, 0x00	; 0
    12a4:	87 ea       	ldi	r24, 0xA7	; 167
    12a6:	95 e0       	ldi	r25, 0x05	; 5
    12a8:	0e 94 27 1a 	call	0x344e	; 0x344e <Print::print(double, int)>
    12ac:	88 e1       	ldi	r24, 0x18	; 24
    12ae:	95 e1       	ldi	r25, 0x15	; 21
    12b0:	a0 e0       	ldi	r26, 0x00	; 0
    12b2:	b0 e0       	ldi	r27, 0x00	; 0
    12b4:	80 93 43 04 	sts	0x0443, r24	; 0x800443 <Production_Delay>
    12b8:	90 93 44 04 	sts	0x0444, r25	; 0x800444 <Production_Delay+0x1>
    12bc:	a0 93 45 04 	sts	0x0445, r26	; 0x800445 <Production_Delay+0x2>
    12c0:	b0 93 46 04 	sts	0x0446, r27	; 0x800446 <Production_Delay+0x3>
    12c4:	8c eb       	ldi	r24, 0xBC	; 188
    12c6:	92 e0       	ldi	r25, 0x02	; 2
    12c8:	a0 e0       	ldi	r26, 0x00	; 0
    12ca:	b0 e0       	ldi	r27, 0x00	; 0
    12cc:	80 93 3b 04 	sts	0x043B, r24	; 0x80043b <PreCharge_Delay>
    12d0:	90 93 3c 04 	sts	0x043C, r25	; 0x80043c <PreCharge_Delay+0x1>
    12d4:	a0 93 3d 04 	sts	0x043D, r26	; 0x80043d <PreCharge_Delay+0x2>
    12d8:	b0 93 3e 04 	sts	0x043E, r27	; 0x80043e <PreCharge_Delay+0x3>
    12dc:	60 e0       	ldi	r22, 0x00	; 0
    12de:	81 e0       	ldi	r24, 0x01	; 1
    12e0:	90 e0       	ldi	r25, 0x00	; 0
    12e2:	0e 94 54 07 	call	0xea8	; 0xea8 <do_control(DO_CONTROLS_E, bool)>
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	82 e0       	ldi	r24, 0x02	; 2
    12ea:	90 e0       	ldi	r25, 0x00	; 0
    12ec:	0e 94 54 07 	call	0xea8	; 0xea8 <do_control(DO_CONTROLS_E, bool)>
    12f0:	60 e0       	ldi	r22, 0x00	; 0
    12f2:	84 e0       	ldi	r24, 0x04	; 4
    12f4:	90 e0       	ldi	r25, 0x00	; 0
    12f6:	0e 94 54 07 	call	0xea8	; 0xea8 <do_control(DO_CONTROLS_E, bool)>
    12fa:	84 ef       	ldi	r24, 0xF4	; 244
    12fc:	91 e0       	ldi	r25, 0x01	; 1
    12fe:	0e 94 b1 06 	call	0xd62	; 0xd62 <new_delay_msecs(unsigned int)>
    1302:	60 e0       	ldi	r22, 0x00	; 0
    1304:	87 e0       	ldi	r24, 0x07	; 7
    1306:	90 e0       	ldi	r25, 0x00	; 0
    1308:	0e 94 24 02 	call	0x448	; 0x448 <neo_pixcel_data(ERROR_CODE_E, unsigned char)>
    130c:	61 e0       	ldi	r22, 0x01	; 1
    130e:	90 e0       	ldi	r25, 0x00	; 0
    1310:	80 e0       	ldi	r24, 0x00	; 0
    1312:	0c 94 24 02 	jmp	0x448	; 0x448 <neo_pixcel_data(ERROR_CODE_E, unsigned char)>

00001316 <button_check()>:
_Z12button_checkv():
    1316:	cf 93       	push	r28
    1318:	df 93       	push	r29
    131a:	83 e0       	ldi	r24, 0x03	; 3
    131c:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <digitalRead>
    1320:	ec 01       	movw	r28, r24
    1322:	84 e0       	ldi	r24, 0x04	; 4
    1324:	0e 94 8b 15 	call	0x2b16	; 0x2b16 <digitalRead>
    1328:	20 97       	sbiw	r28, 0x00	; 0
    132a:	59 f5       	brne	.+86     	; 0x1382 <button_check()+0x6c>
    132c:	20 91 ec 03 	lds	r18, 0x03EC	; 0x8003ec <start_switch_dbnc_dly>
    1330:	30 91 ed 03 	lds	r19, 0x03ED	; 0x8003ed <start_switch_dbnc_dly+0x1>
    1334:	2f 5f       	subi	r18, 0xFF	; 255
    1336:	3f 4f       	sbci	r19, 0xFF	; 255
    1338:	30 93 ed 03 	sts	0x03ED, r19	; 0x8003ed <start_switch_dbnc_dly+0x1>
    133c:	20 93 ec 03 	sts	0x03EC, r18	; 0x8003ec <start_switch_dbnc_dly>
    1340:	28 33       	cpi	r18, 0x38	; 56
    1342:	31 05       	cpc	r19, r1
    1344:	3c f0       	brlt	.+14     	; 0x1354 <button_check()+0x3e>
    1346:	21 e0       	ldi	r18, 0x01	; 1
    1348:	20 93 23 04 	sts	0x0423, r18	; 0x800423 <start_switch_pressed>
    134c:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <start_switch_dbnc_dly+0x1>
    1350:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <start_switch_dbnc_dly>
    1354:	00 97       	sbiw	r24, 0x00	; 0
    1356:	39 f5       	brne	.+78     	; 0x13a6 <button_check()+0x90>
    1358:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <alarm_clear_bttn_dbnc_dly>
    135c:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <alarm_clear_bttn_dbnc_dly+0x1>
    1360:	01 96       	adiw	r24, 0x01	; 1
    1362:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <alarm_clear_bttn_dbnc_dly+0x1>
    1366:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <alarm_clear_bttn_dbnc_dly>
    136a:	c8 97       	sbiw	r24, 0x38	; 56
    136c:	3c f0       	brlt	.+14     	; 0x137c <button_check()+0x66>
    136e:	81 e0       	ldi	r24, 0x01	; 1
    1370:	80 93 22 04 	sts	0x0422, r24	; 0x800422 <alarm_clear_button_pressed>
    1374:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <alarm_clear_bttn_dbnc_dly+0x1>
    1378:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <alarm_clear_bttn_dbnc_dly>
    137c:	df 91       	pop	r29
    137e:	cf 91       	pop	r28
    1380:	08 95       	ret
    1382:	21 97       	sbiw	r28, 0x01	; 1
    1384:	39 f7       	brne	.-50     	; 0x1354 <button_check()+0x3e>
    1386:	20 91 ec 03 	lds	r18, 0x03EC	; 0x8003ec <start_switch_dbnc_dly>
    138a:	30 91 ed 03 	lds	r19, 0x03ED	; 0x8003ed <start_switch_dbnc_dly+0x1>
    138e:	2f 5f       	subi	r18, 0xFF	; 255
    1390:	3f 4f       	sbci	r19, 0xFF	; 255
    1392:	30 93 ed 03 	sts	0x03ED, r19	; 0x8003ed <start_switch_dbnc_dly+0x1>
    1396:	20 93 ec 03 	sts	0x03EC, r18	; 0x8003ec <start_switch_dbnc_dly>
    139a:	28 33       	cpi	r18, 0x38	; 56
    139c:	31 05       	cpc	r19, r1
    139e:	d4 f2       	brlt	.-76     	; 0x1354 <button_check()+0x3e>
    13a0:	10 92 23 04 	sts	0x0423, r1	; 0x800423 <start_switch_pressed>
    13a4:	d3 cf       	rjmp	.-90     	; 0x134c <button_check()+0x36>
    13a6:	01 97       	sbiw	r24, 0x01	; 1
    13a8:	49 f7       	brne	.-46     	; 0x137c <button_check()+0x66>
    13aa:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <alarm_clear_bttn_dbnc_dly>
    13ae:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <alarm_clear_bttn_dbnc_dly+0x1>
    13b2:	01 96       	adiw	r24, 0x01	; 1
    13b4:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <alarm_clear_bttn_dbnc_dly+0x1>
    13b8:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <alarm_clear_bttn_dbnc_dly>
    13bc:	c8 97       	sbiw	r24, 0x38	; 56
    13be:	f4 f2       	brlt	.-68     	; 0x137c <button_check()+0x66>
    13c0:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <alarm_clear_button_pressed>
    13c4:	d7 cf       	rjmp	.-82     	; 0x1374 <button_check()+0x5e>

000013c6 <ui_print_welcome()>:
_Z16ui_print_welcomev():
    13c6:	40 e0       	ldi	r20, 0x00	; 0
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	82 ec       	ldi	r24, 0xC2	; 194
    13cc:	94 e0       	ldi	r25, 0x04	; 4
    13ce:	0e 94 80 0c 	call	0x1900	; 0x1900 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    13d2:	69 e8       	ldi	r22, 0x89	; 137
    13d4:	72 e0       	ldi	r23, 0x02	; 2
    13d6:	82 ec       	ldi	r24, 0xC2	; 194
    13d8:	94 e0       	ldi	r25, 0x04	; 4
    13da:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
    13de:	41 e0       	ldi	r20, 0x01	; 1
    13e0:	60 e0       	ldi	r22, 0x00	; 0
    13e2:	82 ec       	ldi	r24, 0xC2	; 194
    13e4:	94 e0       	ldi	r25, 0x04	; 4
    13e6:	0e 94 80 0c 	call	0x1900	; 0x1900 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    13ea:	6c e9       	ldi	r22, 0x9C	; 156
    13ec:	72 e0       	ldi	r23, 0x02	; 2
    13ee:	82 ec       	ldi	r24, 0xC2	; 194
    13f0:	94 e0       	ldi	r25, 0x04	; 4
    13f2:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
    13f6:	42 e0       	ldi	r20, 0x02	; 2
    13f8:	60 e0       	ldi	r22, 0x00	; 0
    13fa:	82 ec       	ldi	r24, 0xC2	; 194
    13fc:	94 e0       	ldi	r25, 0x04	; 4
    13fe:	0e 94 80 0c 	call	0x1900	; 0x1900 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1402:	6b ea       	ldi	r22, 0xAB	; 171
    1404:	72 e0       	ldi	r23, 0x02	; 2
    1406:	82 ec       	ldi	r24, 0xC2	; 194
    1408:	94 e0       	ldi	r25, 0x04	; 4
    140a:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <Print::print(char const*)>

0000140e <setup>:
_ZN14HardwareSerial5beginEm():
    140e:	26 e0       	ldi	r18, 0x06	; 6
    1410:	40 e0       	ldi	r20, 0x00	; 0
    1412:	52 ec       	ldi	r21, 0xC2	; 194
    1414:	61 e0       	ldi	r22, 0x01	; 1
    1416:	70 e0       	ldi	r23, 0x00	; 0
    1418:	87 ea       	ldi	r24, 0xA7	; 167
    141a:	95 e0       	ldi	r25, 0x05	; 5
    141c:	0e 94 cd 16 	call	0x2d9a	; 0x2d9a <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
    1420:	60 ec       	ldi	r22, 0xC0	; 192
    1422:	72 e0       	ldi	r23, 0x02	; 2
    1424:	87 ea       	ldi	r24, 0xA7	; 167
    1426:	95 e0       	ldi	r25, 0x05	; 5
    1428:	0e 94 41 18 	call	0x3082	; 0x3082 <Print::println(char const*)>
    142c:	0e 94 dd 06 	call	0xdba	; 0xdba <platform_init()>
    1430:	0e 94 29 05 	call	0xa52	; 0xa52 <ads_init()>
_Z7db_initv():
    1434:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <f_system_running>
setup():
    1438:	0e 94 0a 09 	call	0x1214	; 0x1214 <o2_cons_init()>
    143c:	0e 94 05 01 	call	0x20a	; 0x20a <init_7segments()>
    1440:	0e 94 20 02 	call	0x440	; 0x440 <test_7segments()>
    1444:	60 e0       	ldi	r22, 0x00	; 0
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	cb 01       	movw	r24, r22
    144a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <display_o2(float)>
    144e:	60 91 47 04 	lds	r22, 0x0447	; 0x800447 <total_run_time_secs>
    1452:	70 91 48 04 	lds	r23, 0x0448	; 0x800448 <total_run_time_secs+0x1>
    1456:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <total_run_time_secs+0x2>
    145a:	90 91 4a 04 	lds	r25, 0x044A	; 0x80044a <total_run_time_secs+0x3>
    145e:	0e 94 a8 02 	call	0x550	; 0x550 <display_run_hours(unsigned long)>
_Z7ui_initv():
    1462:	0c 94 e3 09 	jmp	0x13c6	; 0x13c6 <ui_print_welcome()>

00001466 <beep_for(int)>:
_Z8beep_fori():
    1466:	cf 93       	push	r28
    1468:	df 93       	push	r29
    146a:	ec 01       	movw	r28, r24
    146c:	60 e0       	ldi	r22, 0x00	; 0
    146e:	80 e1       	ldi	r24, 0x10	; 16
    1470:	90 e0       	ldi	r25, 0x00	; 0
    1472:	0e 94 54 07 	call	0xea8	; 0xea8 <do_control(DO_CONTROLS_E, bool)>
    1476:	ce 01       	movw	r24, r28
    1478:	0e 94 b1 06 	call	0xd62	; 0xd62 <new_delay_msecs(unsigned int)>
    147c:	61 e0       	ldi	r22, 0x01	; 1
    147e:	80 e1       	ldi	r24, 0x10	; 16
    1480:	90 e0       	ldi	r25, 0x00	; 0
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	0c 94 54 07 	jmp	0xea8	; 0xea8 <do_control(DO_CONTROLS_E, bool)>

0000148a <ui_task_main()>:
_Z12ui_task_mainv():
    148a:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <f_sec_change_ui_task>
    148e:	88 23       	and	r24, r24
    1490:	59 f0       	breq	.+22     	; 0x14a8 <ui_task_main()+0x1e>
    1492:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <f_sec_change_ui_task>
    1496:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <__data_end>
    149a:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <__data_end+0x1>
    149e:	01 96       	adiw	r24, 0x01	; 1
    14a0:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <__data_end+0x1>
    14a4:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <__data_end>
    14a8:	0e 94 8b 09 	call	0x1316	; 0x1316 <button_check()>
    14ac:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <ui_state>
    14b0:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <ui_state+0x1>
    14b4:	85 30       	cpi	r24, 0x05	; 5
    14b6:	91 05       	cpc	r25, r1
    14b8:	09 f4       	brne	.+2      	; 0x14bc <ui_task_main()+0x32>
    14ba:	99 c0       	rjmp	.+306    	; 0x15ee <ui_task_main()+0x164>
    14bc:	5c f4       	brge	.+22     	; 0x14d4 <ui_task_main()+0x4a>
    14be:	00 97       	sbiw	r24, 0x00	; 0
    14c0:	09 f4       	brne	.+2      	; 0x14c4 <ui_task_main()+0x3a>
    14c2:	50 c0       	rjmp	.+160    	; 0x1564 <ui_task_main()+0xda>
    14c4:	04 97       	sbiw	r24, 0x04	; 4
    14c6:	09 f4       	brne	.+2      	; 0x14ca <ui_task_main()+0x40>
    14c8:	7d c0       	rjmp	.+250    	; 0x15c4 <ui_task_main()+0x13a>
    14ca:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <ui_state+0x1>
    14ce:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <ui_state>
    14d2:	4e c0       	rjmp	.+156    	; 0x1570 <ui_task_main()+0xe6>
    14d4:	86 30       	cpi	r24, 0x06	; 6
    14d6:	91 05       	cpc	r25, r1
    14d8:	09 f4       	brne	.+2      	; 0x14dc <ui_task_main()+0x52>
    14da:	b9 c0       	rjmp	.+370    	; 0x164e <ui_task_main()+0x1c4>
    14dc:	07 97       	sbiw	r24, 0x07	; 7
    14de:	a9 f7       	brne	.-22     	; 0x14ca <ui_task_main()+0x40>
    14e0:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <f_system_running>
    14e4:	68 e4       	ldi	r22, 0x48	; 72
    14e6:	73 e0       	ldi	r23, 0x03	; 3
    14e8:	87 ea       	ldi	r24, 0xA7	; 167
    14ea:	95 e0       	ldi	r25, 0x05	; 5
    14ec:	0e 94 41 18 	call	0x3082	; 0x3082 <Print::println(char const*)>
    14f0:	43 e0       	ldi	r20, 0x03	; 3
    14f2:	60 e0       	ldi	r22, 0x00	; 0
    14f4:	82 ec       	ldi	r24, 0xC2	; 194
    14f6:	94 e0       	ldi	r25, 0x04	; 4
    14f8:	0e 94 80 0c 	call	0x1900	; 0x1900 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    14fc:	6d e5       	ldi	r22, 0x5D	; 93
    14fe:	73 e0       	ldi	r23, 0x03	; 3
    1500:	82 ec       	ldi	r24, 0xC2	; 194
    1502:	94 e0       	ldi	r25, 0x04	; 4
    1504:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
    1508:	60 e0       	ldi	r22, 0x00	; 0
    150a:	88 e0       	ldi	r24, 0x08	; 8
    150c:	90 e0       	ldi	r25, 0x00	; 0
    150e:	0e 94 54 07 	call	0xea8	; 0xea8 <do_control(DO_CONTROLS_E, bool)>
    1512:	8f e6       	ldi	r24, 0x6F	; 111
    1514:	90 e0       	ldi	r25, 0x00	; 0
    1516:	0e 94 33 0a 	call	0x1466	; 0x1466 <beep_for(int)>
    151a:	0e 94 b0 07 	call	0xf60	; 0xf60 <tworks2_values_to_default_postion()>
    151e:	88 ee       	ldi	r24, 0xE8	; 232
    1520:	93 e0       	ldi	r25, 0x03	; 3
    1522:	0e 94 b1 06 	call	0xd62	; 0xd62 <new_delay_msecs(unsigned int)>
    1526:	43 e0       	ldi	r20, 0x03	; 3
    1528:	60 e0       	ldi	r22, 0x00	; 0
    152a:	82 ec       	ldi	r24, 0xC2	; 194
    152c:	94 e0       	ldi	r25, 0x04	; 4
    152e:	0e 94 80 0c 	call	0x1900	; 0x1900 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1532:	62 e7       	ldi	r22, 0x72	; 114
    1534:	73 e0       	ldi	r23, 0x03	; 3
    1536:	82 ec       	ldi	r24, 0xC2	; 194
    1538:	94 e0       	ldi	r25, 0x04	; 4
    153a:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
    153e:	88 ee       	ldi	r24, 0xE8	; 232
    1540:	93 e0       	ldi	r25, 0x03	; 3
    1542:	0e 94 b1 06 	call	0xd62	; 0xd62 <new_delay_msecs(unsigned int)>
    1546:	43 e0       	ldi	r20, 0x03	; 3
    1548:	60 e0       	ldi	r22, 0x00	; 0
    154a:	82 ec       	ldi	r24, 0xC2	; 194
    154c:	94 e0       	ldi	r25, 0x04	; 4
    154e:	0e 94 80 0c 	call	0x1900	; 0x1900 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1552:	67 e8       	ldi	r22, 0x87	; 135
    1554:	73 e0       	ldi	r23, 0x03	; 3
    1556:	82 ec       	ldi	r24, 0xC2	; 194
    1558:	94 e0       	ldi	r25, 0x04	; 4
    155a:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
    155e:	88 e0       	ldi	r24, 0x08	; 8
    1560:	90 e0       	ldi	r25, 0x00	; 0
    1562:	02 c0       	rjmp	.+4      	; 0x1568 <ui_task_main()+0xde>
    1564:	84 e0       	ldi	r24, 0x04	; 4
    1566:	90 e0       	ldi	r25, 0x00	; 0
    1568:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <ui_state+0x1>
    156c:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <ui_state>
    1570:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <ui_state>
    1574:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <ui_state+0x1>
    1578:	20 91 f0 03 	lds	r18, 0x03F0	; 0x8003f0 <prev_ui_state>
    157c:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <prev_ui_state+0x1>
    1580:	82 17       	cp	r24, r18
    1582:	93 07       	cpc	r25, r19
    1584:	09 f4       	brne	.+2      	; 0x1588 <ui_task_main()+0xfe>
    1586:	9c c0       	rjmp	.+312    	; 0x16c0 <ui_task_main()+0x236>
    1588:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <prev_ui_state+0x1>
    158c:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <prev_ui_state>
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	90 e0       	ldi	r25, 0x00	; 0
    1594:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <f_state_changed+0x1>
    1598:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <f_state_changed>
    159c:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <__data_end+0x1>
    15a0:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <__data_end>
    15a4:	6c e9       	ldi	r22, 0x9C	; 156
    15a6:	73 e0       	ldi	r23, 0x03	; 3
    15a8:	87 ea       	ldi	r24, 0xA7	; 167
    15aa:	95 e0       	ldi	r25, 0x05	; 5
    15ac:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
    15b0:	60 91 f2 03 	lds	r22, 0x03F2	; 0x8003f2 <ui_state>
    15b4:	70 91 f3 03 	lds	r23, 0x03F3	; 0x8003f3 <ui_state+0x1>
    15b8:	4a e0       	ldi	r20, 0x0A	; 10
    15ba:	50 e0       	ldi	r21, 0x00	; 0
    15bc:	87 ea       	ldi	r24, 0xA7	; 167
    15be:	95 e0       	ldi	r25, 0x05	; 5
    15c0:	0c 94 f3 18 	jmp	0x31e6	; 0x31e6 <Print::println(int, int)>
    15c4:	82 ec       	ldi	r24, 0xC2	; 194
    15c6:	94 e0       	ldi	r25, 0x04	; 4
    15c8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <LiquidCrystal::clear()>
    15cc:	0e 94 e3 09 	call	0x13c6	; 0x13c6 <ui_print_welcome()>
    15d0:	43 e0       	ldi	r20, 0x03	; 3
    15d2:	60 e0       	ldi	r22, 0x00	; 0
    15d4:	82 ec       	ldi	r24, 0xC2	; 194
    15d6:	94 e0       	ldi	r25, 0x04	; 4
    15d8:	0e 94 80 0c 	call	0x1900	; 0x1900 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    15dc:	6c ed       	ldi	r22, 0xDC	; 220
    15de:	72 e0       	ldi	r23, 0x02	; 2
    15e0:	82 ec       	ldi	r24, 0xC2	; 194
    15e2:	94 e0       	ldi	r25, 0x04	; 4
    15e4:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
    15e8:	85 e0       	ldi	r24, 0x05	; 5
    15ea:	90 e0       	ldi	r25, 0x00	; 0
    15ec:	bd cf       	rjmp	.-134    	; 0x1568 <ui_task_main()+0xde>
    15ee:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <start_switch_pressed>
    15f2:	81 30       	cpi	r24, 0x01	; 1
    15f4:	09 f0       	breq	.+2      	; 0x15f8 <ui_task_main()+0x16e>
    15f6:	bc cf       	rjmp	.-136    	; 0x1570 <ui_task_main()+0xe6>
    15f8:	80 93 55 04 	sts	0x0455, r24	; 0x800455 <f_system_running>
    15fc:	61 ef       	ldi	r22, 0xF1	; 241
    15fe:	72 e0       	ldi	r23, 0x02	; 2
    1600:	87 ea       	ldi	r24, 0xA7	; 167
    1602:	95 e0       	ldi	r25, 0x05	; 5
    1604:	0e 94 41 18 	call	0x3082	; 0x3082 <Print::println(char const*)>
    1608:	43 e0       	ldi	r20, 0x03	; 3
    160a:	60 e0       	ldi	r22, 0x00	; 0
    160c:	82 ec       	ldi	r24, 0xC2	; 194
    160e:	94 e0       	ldi	r25, 0x04	; 4
    1610:	0e 94 80 0c 	call	0x1900	; 0x1900 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1614:	69 e0       	ldi	r22, 0x09	; 9
    1616:	73 e0       	ldi	r23, 0x03	; 3
    1618:	82 ec       	ldi	r24, 0xC2	; 194
    161a:	94 e0       	ldi	r25, 0x04	; 4
    161c:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
    1620:	8b e2       	ldi	r24, 0x2B	; 43
    1622:	92 e0       	ldi	r25, 0x02	; 2
    1624:	0e 94 33 0a 	call	0x1466	; 0x1466 <beep_for(int)>
    1628:	43 e0       	ldi	r20, 0x03	; 3
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	82 ec       	ldi	r24, 0xC2	; 194
    162e:	94 e0       	ldi	r25, 0x04	; 4
    1630:	0e 94 80 0c 	call	0x1900	; 0x1900 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1634:	6e e1       	ldi	r22, 0x1E	; 30
    1636:	73 e0       	ldi	r23, 0x03	; 3
    1638:	82 ec       	ldi	r24, 0xC2	; 194
    163a:	94 e0       	ldi	r25, 0x04	; 4
    163c:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
    1640:	88 ee       	ldi	r24, 0xE8	; 232
    1642:	93 e0       	ldi	r25, 0x03	; 3
    1644:	0e 94 b1 06 	call	0xd62	; 0xd62 <new_delay_msecs(unsigned int)>
    1648:	86 e0       	ldi	r24, 0x06	; 6
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	8d cf       	rjmp	.-230    	; 0x1568 <ui_task_main()+0xde>
    164e:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <f_state_changed>
    1652:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <f_state_changed+0x1>
    1656:	89 2b       	or	r24, r25
    1658:	61 f1       	breq	.+88     	; 0x16b2 <ui_task_main()+0x228>
    165a:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <f_state_changed+0x1>
    165e:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <f_state_changed>
    1662:	8d e0       	ldi	r24, 0x0D	; 13
    1664:	94 e0       	ldi	r25, 0x04	; 4
    1666:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_clear_buf(char*)>
    166a:	82 ec       	ldi	r24, 0xC2	; 194
    166c:	94 e0       	ldi	r25, 0x04	; 4
    166e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <LiquidCrystal::clear()>
    1672:	40 e0       	ldi	r20, 0x00	; 0
    1674:	60 e0       	ldi	r22, 0x00	; 0
    1676:	82 ec       	ldi	r24, 0xC2	; 194
    1678:	94 e0       	ldi	r25, 0x04	; 4
    167a:	0e 94 80 0c 	call	0x1900	; 0x1900 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    167e:	64 e3       	ldi	r22, 0x34	; 52
    1680:	73 e0       	ldi	r23, 0x03	; 3
    1682:	8d e0       	ldi	r24, 0x0D	; 13
    1684:	94 e0       	ldi	r25, 0x04	; 4
    1686:	0e 94 b4 1c 	call	0x3968	; 0x3968 <strcpy>
    168a:	6d e0       	ldi	r22, 0x0D	; 13
    168c:	74 e0       	ldi	r23, 0x04	; 4
    168e:	87 ea       	ldi	r24, 0xA7	; 167
    1690:	95 e0       	ldi	r25, 0x05	; 5
    1692:	0e 94 41 18 	call	0x3082	; 0x3082 <Print::println(char const*)>
    1696:	6d e0       	ldi	r22, 0x0D	; 13
    1698:	74 e0       	ldi	r23, 0x04	; 4
    169a:	82 ec       	ldi	r24, 0xC2	; 194
    169c:	94 e0       	ldi	r25, 0x04	; 4
    169e:	0e 94 1c 18 	call	0x3038	; 0x3038 <Print::print(char const*)>
    16a2:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <prev_o2_concentration>
    16a6:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <prev_o2_concentration+0x1>
    16aa:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <prev_o2_concentration+0x2>
    16ae:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <prev_o2_concentration+0x3>
    16b2:	80 91 23 04 	lds	r24, 0x0423	; 0x800423 <start_switch_pressed>
    16b6:	81 11       	cpse	r24, r1
    16b8:	5b cf       	rjmp	.-330    	; 0x1570 <ui_task_main()+0xe6>
    16ba:	87 e0       	ldi	r24, 0x07	; 7
    16bc:	90 e0       	ldi	r25, 0x00	; 0
    16be:	54 cf       	rjmp	.-344    	; 0x1568 <ui_task_main()+0xde>
    16c0:	08 95       	ret

000016c2 <loop>:
loop():
    16c2:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <f_msec>
    16c6:	88 23       	and	r24, r24
    16c8:	19 f0       	breq	.+6      	; 0x16d0 <loop+0xe>
    16ca:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <f_msec>
    16ce:	08 95       	ret
    16d0:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <f_10msec>
    16d4:	88 23       	and	r24, r24
    16d6:	19 f0       	breq	.+6      	; 0x16de <loop+0x1c>
    16d8:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <f_10msec>
    16dc:	08 95       	ret
    16de:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <f_100msec>
    16e2:	88 23       	and	r24, r24
    16e4:	19 f0       	breq	.+6      	; 0x16ec <loop+0x2a>
    16e6:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <f_100msec>
    16ea:	08 95       	ret
    16ec:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <f_1sec>
    16f0:	88 23       	and	r24, r24
    16f2:	e9 f0       	breq	.+58     	; 0x172e <loop+0x6c>
    16f4:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <f_1sec>
    16f8:	81 e0       	ldi	r24, 0x01	; 1
    16fa:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <f_sec_logs_task>
    16fe:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <f_sec_change_ui_task>
    1702:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <f_sec_change_o2_task>
    1706:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <f_sec_change_sensor_task>
    170a:	0e 94 4d 05 	call	0xa9a	; 0xa9a <o2_sensor_scan()>
    170e:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <o2_concentration>
    1712:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <o2_concentration+0x1>
    1716:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <o2_concentration+0x2>
    171a:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <o2_concentration+0x3>
    171e:	0e 94 61 02 	call	0x4c2	; 0x4c2 <display_o2(float)>
    1722:	68 e4       	ldi	r22, 0x48	; 72
    1724:	72 e0       	ldi	r23, 0x02	; 2
    1726:	87 ea       	ldi	r24, 0xA7	; 167
    1728:	95 e0       	ldi	r25, 0x05	; 5
    172a:	0c 94 1c 18 	jmp	0x3038	; 0x3038 <Print::print(char const*)>
    172e:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <f_1min>
    1732:	88 23       	and	r24, r24
    1734:	19 f0       	breq	.+6      	; 0x173c <loop+0x7a>
    1736:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <f_1min>
    173a:	08 95       	ret
    173c:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <f_1hr>
    1740:	88 23       	and	r24, r24
    1742:	19 f0       	breq	.+6      	; 0x174a <loop+0x88>
    1744:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <f_1hr>
    1748:	08 95       	ret
    174a:	0e 94 09 08 	call	0x1012	; 0x1012 <o2_main_task()>
    174e:	0e 94 45 0a 	call	0x148a	; 0x148a <ui_task_main()>
    1752:	0c 94 0f 05 	jmp	0xa1e	; 0xa1e <logs_task()>

00001756 <_GLOBAL__sub_I_lcd>:
_GLOBAL__sub_I_lcd():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:468

}
    1756:	cf 92       	push	r12
    1758:	ef 92       	push	r14
    175a:	0f 93       	push	r16
    175c:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\habeeba\AppData\Local\Temp\arduino_build_500438\sketch/display.h:40


#define LCD_ROWS   ( 4)
#define LCD_COLS   (20)

LiquidCrystal   lcd(RS, EN, D4, D5, D6, D7);
    175e:	87 e1       	ldi	r24, 0x17	; 23
    1760:	c8 2e       	mov	r12, r24
    1762:	96 e1       	ldi	r25, 0x16	; 22
    1764:	e9 2e       	mov	r14, r25
    1766:	05 e1       	ldi	r16, 0x15	; 21
    1768:	24 e1       	ldi	r18, 0x14	; 20
    176a:	43 e1       	ldi	r20, 0x13	; 19
    176c:	62 e1       	ldi	r22, 0x12	; 18
    176e:	82 ec       	ldi	r24, 0xC2	; 194
    1770:	94 e0       	ldi	r25, 0x04	; 4
    1772:	0e 94 35 0d 	call	0x1a6a	; 0x1a6a <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
C:\Users\habeeba\AppData\Local\Temp\arduino_build_500438\sketch/display.h:41
LedControl      lc = LedControl(dataPin_7segment, clckPin_7segment, loadPin_7segment, 1);
    1776:	01 e0       	ldi	r16, 0x01	; 1
    1778:	10 e0       	ldi	r17, 0x00	; 0
    177a:	2d e0       	ldi	r18, 0x0D	; 13
    177c:	30 e0       	ldi	r19, 0x00	; 0
    177e:	47 e0       	ldi	r20, 0x07	; 7
    1780:	50 e0       	ldi	r21, 0x00	; 0
    1782:	65 e0       	ldi	r22, 0x05	; 5
    1784:	70 e0       	ldi	r23, 0x00	; 0
    1786:	8a e6       	ldi	r24, 0x6A	; 106
    1788:	94 e0       	ldi	r25, 0x04	; 4
    178a:	0e 94 26 0e 	call	0x1c4c	; 0x1c4c <LedControl::LedControl(int, int, int, int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:20
//float x_samples[NUM_OF_SAMPLES_O2] = {224.0,  1083.0, 4888.0};




ADS1115 ADS(O2_SENSOR_ADS_ADDR);
    178e:	4a ed       	ldi	r20, 0xDA	; 218
    1790:	54 e0       	ldi	r21, 0x04	; 4
    1792:	68 e4       	ldi	r22, 0x48	; 72
    1794:	84 ef       	ldi	r24, 0xF4	; 244
    1796:	93 e0       	ldi	r25, 0x03	; 3
_GLOBAL__sub_I_lcd():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:468
    1798:	1f 91       	pop	r17
    179a:	0f 91       	pop	r16
    179c:	ef 90       	pop	r14
    179e:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:20
    17a0:	0c 94 62 10 	jmp	0x20c4	; 0x20c4 <ADS1115::ADS1115(unsigned char, TwoWire*)>

000017a4 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:271
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    17a4:	90 e0       	ldi	r25, 0x00	; 0
    17a6:	80 e0       	ldi	r24, 0x00	; 0
    17a8:	08 95       	ret

000017aa <Print::flush()>:
_ZN5Print5flushEv():
    17aa:	08 95       	ret

000017ac <LiquidCrystal::pulseEnable()>:
_ZN13LiquidCrystal11pulseEnableEv():
    17ac:	cf 93       	push	r28
    17ae:	df 93       	push	r29
    17b0:	ec 01       	movw	r28, r24
    17b2:	60 e0       	ldi	r22, 0x00	; 0
    17b4:	8e 81       	ldd	r24, Y+6	; 0x06
    17b6:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    17ba:	81 e0       	ldi	r24, 0x01	; 1
    17bc:	90 e0       	ldi	r25, 0x00	; 0
    17be:	0e 94 ac 14 	call	0x2958	; 0x2958 <delayMicroseconds>
    17c2:	61 e0       	ldi	r22, 0x01	; 1
    17c4:	8e 81       	ldd	r24, Y+6	; 0x06
    17c6:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    17ca:	81 e0       	ldi	r24, 0x01	; 1
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 ac 14 	call	0x2958	; 0x2958 <delayMicroseconds>
    17d2:	60 e0       	ldi	r22, 0x00	; 0
    17d4:	8e 81       	ldd	r24, Y+6	; 0x06
    17d6:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    17da:	84 e6       	ldi	r24, 0x64	; 100
    17dc:	90 e0       	ldi	r25, 0x00	; 0
    17de:	df 91       	pop	r29
    17e0:	cf 91       	pop	r28
    17e2:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <delayMicroseconds>

000017e6 <LiquidCrystal::write4bits(unsigned char)>:
_ZN13LiquidCrystal10write4bitsEh():
    17e6:	cf 92       	push	r12
    17e8:	df 92       	push	r13
    17ea:	ef 92       	push	r14
    17ec:	ff 92       	push	r15
    17ee:	0f 93       	push	r16
    17f0:	1f 93       	push	r17
    17f2:	cf 93       	push	r28
    17f4:	df 93       	push	r29
    17f6:	6c 01       	movw	r12, r24
    17f8:	7c 01       	movw	r14, r24
    17fa:	87 e0       	ldi	r24, 0x07	; 7
    17fc:	e8 0e       	add	r14, r24
    17fe:	f1 1c       	adc	r15, r1
    1800:	d0 e0       	ldi	r29, 0x00	; 0
    1802:	c0 e0       	ldi	r28, 0x00	; 0
    1804:	06 2f       	mov	r16, r22
    1806:	10 e0       	ldi	r17, 0x00	; 0
    1808:	b8 01       	movw	r22, r16
    180a:	0c 2e       	mov	r0, r28
    180c:	02 c0       	rjmp	.+4      	; 0x1812 <LiquidCrystal::write4bits(unsigned char)+0x2c>
    180e:	75 95       	asr	r23
    1810:	67 95       	ror	r22
    1812:	0a 94       	dec	r0
    1814:	e2 f7       	brpl	.-8      	; 0x180e <LiquidCrystal::write4bits(unsigned char)+0x28>
    1816:	61 70       	andi	r22, 0x01	; 1
    1818:	f7 01       	movw	r30, r14
    181a:	81 91       	ld	r24, Z+
    181c:	7f 01       	movw	r14, r30
    181e:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    1822:	21 96       	adiw	r28, 0x01	; 1
    1824:	c4 30       	cpi	r28, 0x04	; 4
    1826:	d1 05       	cpc	r29, r1
    1828:	79 f7       	brne	.-34     	; 0x1808 <LiquidCrystal::write4bits(unsigned char)+0x22>
    182a:	c6 01       	movw	r24, r12
    182c:	df 91       	pop	r29
    182e:	cf 91       	pop	r28
    1830:	1f 91       	pop	r17
    1832:	0f 91       	pop	r16
    1834:	ff 90       	pop	r15
    1836:	ef 90       	pop	r14
    1838:	df 90       	pop	r13
    183a:	cf 90       	pop	r12
    183c:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <LiquidCrystal::pulseEnable()>

00001840 <LiquidCrystal::write8bits(unsigned char)>:
_ZN13LiquidCrystal10write8bitsEh():
    1840:	cf 92       	push	r12
    1842:	df 92       	push	r13
    1844:	ef 92       	push	r14
    1846:	ff 92       	push	r15
    1848:	0f 93       	push	r16
    184a:	1f 93       	push	r17
    184c:	cf 93       	push	r28
    184e:	df 93       	push	r29
    1850:	6c 01       	movw	r12, r24
    1852:	7c 01       	movw	r14, r24
    1854:	87 e0       	ldi	r24, 0x07	; 7
    1856:	e8 0e       	add	r14, r24
    1858:	f1 1c       	adc	r15, r1
    185a:	d0 e0       	ldi	r29, 0x00	; 0
    185c:	c0 e0       	ldi	r28, 0x00	; 0
    185e:	06 2f       	mov	r16, r22
    1860:	10 e0       	ldi	r17, 0x00	; 0
    1862:	b8 01       	movw	r22, r16
    1864:	0c 2e       	mov	r0, r28
    1866:	02 c0       	rjmp	.+4      	; 0x186c <LiquidCrystal::write8bits(unsigned char)+0x2c>
    1868:	75 95       	asr	r23
    186a:	67 95       	ror	r22
    186c:	0a 94       	dec	r0
    186e:	e2 f7       	brpl	.-8      	; 0x1868 <LiquidCrystal::write8bits(unsigned char)+0x28>
    1870:	61 70       	andi	r22, 0x01	; 1
    1872:	f7 01       	movw	r30, r14
    1874:	81 91       	ld	r24, Z+
    1876:	7f 01       	movw	r14, r30
    1878:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    187c:	21 96       	adiw	r28, 0x01	; 1
    187e:	c8 30       	cpi	r28, 0x08	; 8
    1880:	d1 05       	cpc	r29, r1
    1882:	79 f7       	brne	.-34     	; 0x1862 <LiquidCrystal::write8bits(unsigned char)+0x22>
    1884:	c6 01       	movw	r24, r12
    1886:	df 91       	pop	r29
    1888:	cf 91       	pop	r28
    188a:	1f 91       	pop	r17
    188c:	0f 91       	pop	r16
    188e:	ff 90       	pop	r15
    1890:	ef 90       	pop	r14
    1892:	df 90       	pop	r13
    1894:	cf 90       	pop	r12
    1896:	0c 94 d6 0b 	jmp	0x17ac	; 0x17ac <LiquidCrystal::pulseEnable()>

0000189a <LiquidCrystal::send(unsigned char, unsigned char)>:
_ZN13LiquidCrystal4sendEhh():
    189a:	1f 93       	push	r17
    189c:	cf 93       	push	r28
    189e:	df 93       	push	r29
    18a0:	ec 01       	movw	r28, r24
    18a2:	16 2f       	mov	r17, r22
    18a4:	64 2f       	mov	r22, r20
    18a6:	8c 81       	ldd	r24, Y+4	; 0x04
    18a8:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    18ac:	8d 81       	ldd	r24, Y+5	; 0x05
    18ae:	8f 3f       	cpi	r24, 0xFF	; 255
    18b0:	19 f0       	breq	.+6      	; 0x18b8 <LiquidCrystal::send(unsigned char, unsigned char)+0x1e>
    18b2:	60 e0       	ldi	r22, 0x00	; 0
    18b4:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    18b8:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ba:	61 2f       	mov	r22, r17
    18bc:	84 ff       	sbrs	r24, 4
    18be:	06 c0       	rjmp	.+12     	; 0x18cc <LiquidCrystal::send(unsigned char, unsigned char)+0x32>
    18c0:	ce 01       	movw	r24, r28
    18c2:	df 91       	pop	r29
    18c4:	cf 91       	pop	r28
    18c6:	1f 91       	pop	r17
    18c8:	0c 94 20 0c 	jmp	0x1840	; 0x1840 <LiquidCrystal::write8bits(unsigned char)>
    18cc:	70 e0       	ldi	r23, 0x00	; 0
    18ce:	84 e0       	ldi	r24, 0x04	; 4
    18d0:	75 95       	asr	r23
    18d2:	67 95       	ror	r22
    18d4:	8a 95       	dec	r24
    18d6:	e1 f7       	brne	.-8      	; 0x18d0 <LiquidCrystal::send(unsigned char, unsigned char)+0x36>
    18d8:	ce 01       	movw	r24, r28
    18da:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <LiquidCrystal::write4bits(unsigned char)>
    18de:	61 2f       	mov	r22, r17
    18e0:	ce 01       	movw	r24, r28
    18e2:	df 91       	pop	r29
    18e4:	cf 91       	pop	r28
    18e6:	1f 91       	pop	r17
    18e8:	0c 94 f3 0b 	jmp	0x17e6	; 0x17e6 <LiquidCrystal::write4bits(unsigned char)>

000018ec <LiquidCrystal::command(unsigned char)>:
_ZN13LiquidCrystal7commandEh():
    18ec:	40 e0       	ldi	r20, 0x00	; 0
    18ee:	0c 94 4d 0c 	jmp	0x189a	; 0x189a <LiquidCrystal::send(unsigned char, unsigned char)>

000018f2 <LiquidCrystal::clear()>:
_ZN13LiquidCrystal5clearEv():
    18f2:	61 e0       	ldi	r22, 0x01	; 1
    18f4:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LiquidCrystal::command(unsigned char)>
    18f8:	80 ed       	ldi	r24, 0xD0	; 208
    18fa:	97 e0       	ldi	r25, 0x07	; 7
    18fc:	0c 94 ac 14 	jmp	0x2958	; 0x2958 <delayMicroseconds>

00001900 <LiquidCrystal::setCursor(unsigned char, unsigned char)>:
_ZN13LiquidCrystal9setCursorEhh():
    1900:	44 30       	cpi	r20, 0x04	; 4
    1902:	08 f0       	brcs	.+2      	; 0x1906 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x6>
    1904:	43 e0       	ldi	r20, 0x03	; 3
    1906:	fc 01       	movw	r30, r24
    1908:	23 89       	ldd	r18, Z+19	; 0x13
    190a:	42 17       	cp	r20, r18
    190c:	10 f0       	brcs	.+4      	; 0x1912 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x12>
    190e:	4f ef       	ldi	r20, 0xFF	; 255
    1910:	42 0f       	add	r20, r18
    1912:	fc 01       	movw	r30, r24
    1914:	e4 0f       	add	r30, r20
    1916:	f1 1d       	adc	r31, r1
    1918:	24 89       	ldd	r18, Z+20	; 0x14
    191a:	62 0f       	add	r22, r18
    191c:	60 68       	ori	r22, 0x80	; 128
    191e:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <LiquidCrystal::command(unsigned char)>

00001922 <LiquidCrystal::display()>:
_ZN13LiquidCrystal7displayEv():
    1922:	fc 01       	movw	r30, r24
    1924:	60 89       	ldd	r22, Z+16	; 0x10
    1926:	26 2f       	mov	r18, r22
    1928:	24 60       	ori	r18, 0x04	; 4
    192a:	20 8b       	std	Z+16, r18	; 0x10
    192c:	6c 60       	ori	r22, 0x0C	; 12
    192e:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <LiquidCrystal::command(unsigned char)>

00001932 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystal5beginEhhh():
    1932:	0f 93       	push	r16
    1934:	1f 93       	push	r17
    1936:	cf 93       	push	r28
    1938:	df 93       	push	r29
    193a:	ec 01       	movw	r28, r24
    193c:	42 30       	cpi	r20, 0x02	; 2
    193e:	18 f0       	brcs	.+6      	; 0x1946 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x14>
    1940:	8f 85       	ldd	r24, Y+15	; 0x0f
    1942:	88 60       	ori	r24, 0x08	; 8
    1944:	8f 87       	std	Y+15, r24	; 0x0f
    1946:	4b 8b       	std	Y+19, r20	; 0x13
_ZN13LiquidCrystal13setRowOffsetsEiiii():
    1948:	1c 8a       	std	Y+20, r1	; 0x14
    194a:	80 e4       	ldi	r24, 0x40	; 64
    194c:	8d 8b       	std	Y+21, r24	; 0x15
    194e:	6e 8b       	std	Y+22, r22	; 0x16
    1950:	60 5c       	subi	r22, 0xC0	; 192
    1952:	6f 8b       	std	Y+23, r22	; 0x17
_ZN13LiquidCrystal5beginEhhh():
    1954:	22 23       	and	r18, r18
    1956:	29 f0       	breq	.+10     	; 0x1962 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    1958:	41 30       	cpi	r20, 0x01	; 1
    195a:	19 f4       	brne	.+6      	; 0x1962 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    195c:	8f 85       	ldd	r24, Y+15	; 0x0f
    195e:	84 60       	ori	r24, 0x04	; 4
    1960:	8f 87       	std	Y+15, r24	; 0x0f
    1962:	61 e0       	ldi	r22, 0x01	; 1
    1964:	8c 81       	ldd	r24, Y+4	; 0x04
    1966:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
    196a:	8d 81       	ldd	r24, Y+5	; 0x05
    196c:	8f 3f       	cpi	r24, 0xFF	; 255
    196e:	19 f0       	breq	.+6      	; 0x1976 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x44>
    1970:	61 e0       	ldi	r22, 0x01	; 1
    1972:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
    1976:	61 e0       	ldi	r22, 0x01	; 1
    1978:	8e 81       	ldd	r24, Y+6	; 0x06
    197a:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
    197e:	8e 01       	movw	r16, r28
    1980:	98 01       	movw	r18, r16
    1982:	2c 1b       	sub	r18, r28
    1984:	3d 0b       	sbc	r19, r29
    1986:	8f 85       	ldd	r24, Y+15	; 0x0f
    1988:	84 fd       	sbrc	r24, 4
    198a:	0d c0       	rjmp	.+26     	; 0x19a6 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x74>
    198c:	84 e0       	ldi	r24, 0x04	; 4
    198e:	90 e0       	ldi	r25, 0x00	; 0
    1990:	0f 5f       	subi	r16, 0xFF	; 255
    1992:	1f 4f       	sbci	r17, 0xFF	; 255
    1994:	28 17       	cp	r18, r24
    1996:	39 07       	cpc	r19, r25
    1998:	4c f4       	brge	.+18     	; 0x19ac <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x7a>
    199a:	61 e0       	ldi	r22, 0x01	; 1
    199c:	f8 01       	movw	r30, r16
    199e:	86 81       	ldd	r24, Z+6	; 0x06
    19a0:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
    19a4:	ed cf       	rjmp	.-38     	; 0x1980 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x4e>
    19a6:	88 e0       	ldi	r24, 0x08	; 8
    19a8:	90 e0       	ldi	r25, 0x00	; 0
    19aa:	f2 cf       	rjmp	.-28     	; 0x1990 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x5e>
    19ac:	80 e5       	ldi	r24, 0x50	; 80
    19ae:	93 ec       	ldi	r25, 0xC3	; 195
    19b0:	0e 94 ac 14 	call	0x2958	; 0x2958 <delayMicroseconds>
    19b4:	60 e0       	ldi	r22, 0x00	; 0
    19b6:	8c 81       	ldd	r24, Y+4	; 0x04
    19b8:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    19bc:	60 e0       	ldi	r22, 0x00	; 0
    19be:	8e 81       	ldd	r24, Y+6	; 0x06
    19c0:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    19c4:	8d 81       	ldd	r24, Y+5	; 0x05
    19c6:	8f 3f       	cpi	r24, 0xFF	; 255
    19c8:	19 f0       	breq	.+6      	; 0x19d0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x9e>
    19ca:	60 e0       	ldi	r22, 0x00	; 0
    19cc:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    19d0:	6f 85       	ldd	r22, Y+15	; 0x0f
    19d2:	64 fd       	sbrc	r22, 4
    19d4:	33 c0       	rjmp	.+102    	; 0x1a3c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x10a>
    19d6:	63 e0       	ldi	r22, 0x03	; 3
    19d8:	ce 01       	movw	r24, r28
    19da:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <LiquidCrystal::write4bits(unsigned char)>
    19de:	84 e9       	ldi	r24, 0x94	; 148
    19e0:	91 e1       	ldi	r25, 0x11	; 17
    19e2:	0e 94 ac 14 	call	0x2958	; 0x2958 <delayMicroseconds>
    19e6:	63 e0       	ldi	r22, 0x03	; 3
    19e8:	ce 01       	movw	r24, r28
    19ea:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <LiquidCrystal::write4bits(unsigned char)>
    19ee:	84 e9       	ldi	r24, 0x94	; 148
    19f0:	91 e1       	ldi	r25, 0x11	; 17
    19f2:	0e 94 ac 14 	call	0x2958	; 0x2958 <delayMicroseconds>
    19f6:	63 e0       	ldi	r22, 0x03	; 3
    19f8:	ce 01       	movw	r24, r28
    19fa:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <LiquidCrystal::write4bits(unsigned char)>
    19fe:	86 e9       	ldi	r24, 0x96	; 150
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	0e 94 ac 14 	call	0x2958	; 0x2958 <delayMicroseconds>
    1a06:	62 e0       	ldi	r22, 0x02	; 2
    1a08:	ce 01       	movw	r24, r28
    1a0a:	0e 94 f3 0b 	call	0x17e6	; 0x17e6 <LiquidCrystal::write4bits(unsigned char)>
    1a0e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a10:	60 62       	ori	r22, 0x20	; 32
    1a12:	ce 01       	movw	r24, r28
    1a14:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LiquidCrystal::command(unsigned char)>
    1a18:	84 e0       	ldi	r24, 0x04	; 4
    1a1a:	88 8b       	std	Y+16, r24	; 0x10
    1a1c:	ce 01       	movw	r24, r28
    1a1e:	0e 94 91 0c 	call	0x1922	; 0x1922 <LiquidCrystal::display()>
    1a22:	ce 01       	movw	r24, r28
    1a24:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <LiquidCrystal::clear()>
    1a28:	82 e0       	ldi	r24, 0x02	; 2
    1a2a:	89 8b       	std	Y+17, r24	; 0x11
    1a2c:	66 e0       	ldi	r22, 0x06	; 6
    1a2e:	ce 01       	movw	r24, r28
    1a30:	df 91       	pop	r29
    1a32:	cf 91       	pop	r28
    1a34:	1f 91       	pop	r17
    1a36:	0f 91       	pop	r16
    1a38:	0c 94 76 0c 	jmp	0x18ec	; 0x18ec <LiquidCrystal::command(unsigned char)>
    1a3c:	60 62       	ori	r22, 0x20	; 32
    1a3e:	ce 01       	movw	r24, r28
    1a40:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LiquidCrystal::command(unsigned char)>
    1a44:	84 e9       	ldi	r24, 0x94	; 148
    1a46:	91 e1       	ldi	r25, 0x11	; 17
    1a48:	0e 94 ac 14 	call	0x2958	; 0x2958 <delayMicroseconds>
    1a4c:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a4e:	60 62       	ori	r22, 0x20	; 32
    1a50:	ce 01       	movw	r24, r28
    1a52:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LiquidCrystal::command(unsigned char)>
    1a56:	86 e9       	ldi	r24, 0x96	; 150
    1a58:	90 e0       	ldi	r25, 0x00	; 0
    1a5a:	0e 94 ac 14 	call	0x2958	; 0x2958 <delayMicroseconds>
    1a5e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1a60:	60 62       	ori	r22, 0x20	; 32
    1a62:	ce 01       	movw	r24, r28
    1a64:	0e 94 76 0c 	call	0x18ec	; 0x18ec <LiquidCrystal::command(unsigned char)>
    1a68:	d2 cf       	rjmp	.-92     	; 0x1a0e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xdc>

00001a6a <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystalC2Ehhhhhh():
    1a6a:	cf 92       	push	r12
    1a6c:	ef 92       	push	r14
    1a6e:	0f 93       	push	r16
    1a70:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    1a72:	13 82       	std	Z+3, r1	; 0x03
    1a74:	12 82       	std	Z+2, r1	; 0x02
_ZN13LiquidCrystalC2Ehhhhhh():
    1a76:	8c ea       	ldi	r24, 0xAC	; 172
    1a78:	93 e0       	ldi	r25, 0x03	; 3
    1a7a:	91 83       	std	Z+1, r25	; 0x01
    1a7c:	80 83       	st	Z, r24
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    1a7e:	64 83       	std	Z+4, r22	; 0x04
    1a80:	8f ef       	ldi	r24, 0xFF	; 255
    1a82:	85 83       	std	Z+5, r24	; 0x05
    1a84:	46 83       	std	Z+6, r20	; 0x06
    1a86:	27 83       	std	Z+7, r18	; 0x07
    1a88:	00 87       	std	Z+8, r16	; 0x08
    1a8a:	e1 86       	std	Z+9, r14	; 0x09
    1a8c:	c2 86       	std	Z+10, r12	; 0x0a
    1a8e:	13 86       	std	Z+11, r1	; 0x0b
    1a90:	14 86       	std	Z+12, r1	; 0x0c
    1a92:	15 86       	std	Z+13, r1	; 0x0d
    1a94:	16 86       	std	Z+14, r1	; 0x0e
    1a96:	17 86       	std	Z+15, r1	; 0x0f
    1a98:	20 e0       	ldi	r18, 0x00	; 0
    1a9a:	41 e0       	ldi	r20, 0x01	; 1
    1a9c:	60 e1       	ldi	r22, 0x10	; 16
    1a9e:	cf 01       	movw	r24, r30
_ZN13LiquidCrystalC2Ehhhhhh():
    1aa0:	0f 91       	pop	r16
    1aa2:	ef 90       	pop	r14
    1aa4:	cf 90       	pop	r12
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    1aa6:	0c 94 99 0c 	jmp	0x1932	; 0x1932 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>

00001aaa <LiquidCrystal::write(unsigned char)>:
_ZN13LiquidCrystal5writeEh():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    1aaa:	41 e0       	ldi	r20, 0x01	; 1
    1aac:	0e 94 4d 0c 	call	0x189a	; 0x189a <LiquidCrystal::send(unsigned char, unsigned char)>
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	90 e0       	ldi	r25, 0x00	; 0
    1ab4:	08 95       	ret

00001ab6 <LedControl::spiTransfer(int, unsigned char, unsigned char)>:
_ZN10LedControl11spiTransferEihh():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:153
    for(int row=0;row<8;row++) {
        val=value >> (7-row);
        val=val & 0x01;
        setLed(addr,row,col,val);
    }
}
    1ab6:	8f 92       	push	r8
    1ab8:	9f 92       	push	r9
    1aba:	af 92       	push	r10
    1abc:	bf 92       	push	r11
    1abe:	cf 92       	push	r12
    1ac0:	df 92       	push	r13
    1ac2:	ef 92       	push	r14
    1ac4:	ff 92       	push	r15
    1ac6:	0f 93       	push	r16
    1ac8:	1f 93       	push	r17
    1aca:	cf 93       	push	r28
    1acc:	df 93       	push	r29
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x1a>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
    1ad4:	8c 01       	movw	r16, r24
    1ad6:	49 83       	std	Y+1, r20	; 0x01
    1ad8:	2a 83       	std	Y+2, r18	; 0x02
    1ada:	66 0f       	add	r22, r22
    1adc:	77 1f       	adc	r23, r23
    1ade:	f8 01       	movw	r30, r16
    1ae0:	ea 5a       	subi	r30, 0xAA	; 170
    1ae2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ae4:	e0 80       	ld	r14, Z
    1ae6:	f1 80       	ldd	r15, Z+1	; 0x01
    1ae8:	ee 0c       	add	r14, r14
    1aea:	ff 1c       	adc	r15, r15
    1aec:	f8 01       	movw	r30, r16
    1aee:	cf 01       	movw	r24, r30
    1af0:	80 1b       	sub	r24, r16
    1af2:	91 0b       	sbc	r25, r17
    1af4:	8e 15       	cp	r24, r14
    1af6:	9f 05       	cpc	r25, r15
    1af8:	14 f4       	brge	.+4      	; 0x1afe <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x48>
    1afa:	11 92       	st	Z+, r1
    1afc:	f8 cf       	rjmp	.-16     	; 0x1aee <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x38>
    1afe:	89 81       	ldd	r24, Y+1	; 0x01
    1b00:	f8 01       	movw	r30, r16
    1b02:	e6 0f       	add	r30, r22
    1b04:	f7 1f       	adc	r31, r23
    1b06:	81 83       	std	Z+1, r24	; 0x01
    1b08:	8a 81       	ldd	r24, Y+2	; 0x02
    1b0a:	80 83       	st	Z, r24
    1b0c:	68 01       	movw	r12, r16
    1b0e:	84 e5       	ldi	r24, 0x54	; 84
    1b10:	c8 0e       	add	r12, r24
    1b12:	d1 1c       	adc	r13, r1
    1b14:	60 e0       	ldi	r22, 0x00	; 0
    1b16:	f6 01       	movw	r30, r12
    1b18:	80 81       	ld	r24, Z
    1b1a:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    1b1e:	48 01       	movw	r8, r16
    1b20:	f2 e5       	ldi	r31, 0x52	; 82
    1b22:	8f 0e       	add	r8, r31
    1b24:	91 1c       	adc	r9, r1
    1b26:	58 01       	movw	r10, r16
    1b28:	80 e5       	ldi	r24, 0x50	; 80
    1b2a:	a8 0e       	add	r10, r24
    1b2c:	b1 1c       	adc	r11, r1
    1b2e:	1e 14       	cp	r1, r14
    1b30:	1f 04       	cpc	r1, r15
    1b32:	7c f4       	brge	.+30     	; 0x1b52 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x9c>
    1b34:	e1 e0       	ldi	r30, 0x01	; 1
    1b36:	ee 1a       	sub	r14, r30
    1b38:	f1 08       	sbc	r15, r1
    1b3a:	f8 01       	movw	r30, r16
    1b3c:	ee 0d       	add	r30, r14
    1b3e:	ff 1d       	adc	r31, r15
    1b40:	20 81       	ld	r18, Z
    1b42:	41 e0       	ldi	r20, 0x01	; 1
    1b44:	f4 01       	movw	r30, r8
    1b46:	60 81       	ld	r22, Z
    1b48:	f5 01       	movw	r30, r10
    1b4a:	80 81       	ld	r24, Z
    1b4c:	0e 94 b4 15 	call	0x2b68	; 0x2b68 <shiftOut>
    1b50:	ee cf       	rjmp	.-36     	; 0x1b2e <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x78>
    1b52:	61 e0       	ldi	r22, 0x01	; 1
    1b54:	f6 01       	movw	r30, r12
    1b56:	80 81       	ld	r24, Z
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	df 91       	pop	r29
    1b5e:	cf 91       	pop	r28
    1b60:	1f 91       	pop	r17
    1b62:	0f 91       	pop	r16
    1b64:	ff 90       	pop	r15
    1b66:	ef 90       	pop	r14
    1b68:	df 90       	pop	r13
    1b6a:	cf 90       	pop	r12
    1b6c:	bf 90       	pop	r11
    1b6e:	af 90       	pop	r10
    1b70:	9f 90       	pop	r9
    1b72:	8f 90       	pop	r8
    1b74:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <digitalWrite>

00001b78 <LedControl::shutdown(int, bool)>:
_ZN10LedControl8shutdownEib():
    1b78:	77 fd       	sbrc	r23, 7
    1b7a:	0f c0       	rjmp	.+30     	; 0x1b9a <LedControl::shutdown(int, bool)+0x22>
    1b7c:	fc 01       	movw	r30, r24
    1b7e:	ea 5a       	subi	r30, 0xAA	; 170
    1b80:	ff 4f       	sbci	r31, 0xFF	; 255
    1b82:	20 81       	ld	r18, Z
    1b84:	31 81       	ldd	r19, Z+1	; 0x01
    1b86:	62 17       	cp	r22, r18
    1b88:	73 07       	cpc	r23, r19
    1b8a:	3c f4       	brge	.+14     	; 0x1b9a <LedControl::shutdown(int, bool)+0x22>
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	41 11       	cpse	r20, r1
    1b90:	01 c0       	rjmp	.+2      	; 0x1b94 <LedControl::shutdown(int, bool)+0x1c>
    1b92:	21 e0       	ldi	r18, 0x01	; 1
    1b94:	4c e0       	ldi	r20, 0x0C	; 12
    1b96:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1b9a:	08 95       	ret

00001b9c <LedControl::setScanLimit(int, int)>:
_ZN10LedControl12setScanLimitEii():
    1b9c:	77 fd       	sbrc	r23, 7
    1b9e:	0f c0       	rjmp	.+30     	; 0x1bbe <LedControl::setScanLimit(int, int)+0x22>
    1ba0:	fc 01       	movw	r30, r24
    1ba2:	ea 5a       	subi	r30, 0xAA	; 170
    1ba4:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba6:	20 81       	ld	r18, Z
    1ba8:	31 81       	ldd	r19, Z+1	; 0x01
    1baa:	62 17       	cp	r22, r18
    1bac:	73 07       	cpc	r23, r19
    1bae:	3c f4       	brge	.+14     	; 0x1bbe <LedControl::setScanLimit(int, int)+0x22>
    1bb0:	48 30       	cpi	r20, 0x08	; 8
    1bb2:	51 05       	cpc	r21, r1
    1bb4:	20 f4       	brcc	.+8      	; 0x1bbe <LedControl::setScanLimit(int, int)+0x22>
    1bb6:	24 2f       	mov	r18, r20
    1bb8:	4b e0       	ldi	r20, 0x0B	; 11
    1bba:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1bbe:	08 95       	ret

00001bc0 <LedControl::setIntensity(int, int)>:
_ZN10LedControl12setIntensityEii():
    1bc0:	77 fd       	sbrc	r23, 7
    1bc2:	0f c0       	rjmp	.+30     	; 0x1be2 <LedControl::setIntensity(int, int)+0x22>
    1bc4:	fc 01       	movw	r30, r24
    1bc6:	ea 5a       	subi	r30, 0xAA	; 170
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	20 81       	ld	r18, Z
    1bcc:	31 81       	ldd	r19, Z+1	; 0x01
    1bce:	62 17       	cp	r22, r18
    1bd0:	73 07       	cpc	r23, r19
    1bd2:	3c f4       	brge	.+14     	; 0x1be2 <LedControl::setIntensity(int, int)+0x22>
    1bd4:	40 31       	cpi	r20, 0x10	; 16
    1bd6:	51 05       	cpc	r21, r1
    1bd8:	20 f4       	brcc	.+8      	; 0x1be2 <LedControl::setIntensity(int, int)+0x22>
    1bda:	24 2f       	mov	r18, r20
    1bdc:	4a e0       	ldi	r20, 0x0A	; 10
    1bde:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1be2:	08 95       	ret

00001be4 <LedControl::clearDisplay(int)>:
_ZN10LedControl12clearDisplayEi():
    1be4:	df 92       	push	r13
    1be6:	ef 92       	push	r14
    1be8:	ff 92       	push	r15
    1bea:	0f 93       	push	r16
    1bec:	1f 93       	push	r17
    1bee:	cf 93       	push	r28
    1bf0:	df 93       	push	r29
    1bf2:	77 fd       	sbrc	r23, 7
    1bf4:	23 c0       	rjmp	.+70     	; 0x1c3c <LedControl::clearDisplay(int)+0x58>
    1bf6:	fc 01       	movw	r30, r24
    1bf8:	ea 5a       	subi	r30, 0xAA	; 170
    1bfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfc:	20 81       	ld	r18, Z
    1bfe:	31 81       	ldd	r19, Z+1	; 0x01
    1c00:	62 17       	cp	r22, r18
    1c02:	73 07       	cpc	r23, r19
    1c04:	dc f4       	brge	.+54     	; 0x1c3c <LedControl::clearDisplay(int)+0x58>
    1c06:	eb 01       	movw	r28, r22
    1c08:	7c 01       	movw	r14, r24
    1c0a:	8b 01       	movw	r16, r22
    1c0c:	83 e0       	ldi	r24, 0x03	; 3
    1c0e:	00 0f       	add	r16, r16
    1c10:	11 1f       	adc	r17, r17
    1c12:	8a 95       	dec	r24
    1c14:	e1 f7       	brne	.-8      	; 0x1c0e <LedControl::clearDisplay(int)+0x2a>
    1c16:	00 5f       	subi	r16, 0xF0	; 240
    1c18:	1f 4f       	sbci	r17, 0xFF	; 255
    1c1a:	0e 0d       	add	r16, r14
    1c1c:	1f 1d       	adc	r17, r15
    1c1e:	dd 24       	eor	r13, r13
    1c20:	d3 94       	inc	r13
    1c22:	f8 01       	movw	r30, r16
    1c24:	11 92       	st	Z+, r1
    1c26:	8f 01       	movw	r16, r30
    1c28:	20 e0       	ldi	r18, 0x00	; 0
    1c2a:	4d 2d       	mov	r20, r13
    1c2c:	be 01       	movw	r22, r28
    1c2e:	c7 01       	movw	r24, r14
    1c30:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1c34:	d3 94       	inc	r13
    1c36:	f9 e0       	ldi	r31, 0x09	; 9
    1c38:	df 12       	cpse	r13, r31
    1c3a:	f3 cf       	rjmp	.-26     	; 0x1c22 <LedControl::clearDisplay(int)+0x3e>
    1c3c:	df 91       	pop	r29
    1c3e:	cf 91       	pop	r28
    1c40:	1f 91       	pop	r17
    1c42:	0f 91       	pop	r16
    1c44:	ff 90       	pop	r15
    1c46:	ef 90       	pop	r14
    1c48:	df 90       	pop	r13
    1c4a:	08 95       	ret

00001c4c <LedControl::LedControl(int, int, int, int)>:
_ZN10LedControlC2Eiiii():
    1c4c:	6f 92       	push	r6
    1c4e:	7f 92       	push	r7
    1c50:	8f 92       	push	r8
    1c52:	9f 92       	push	r9
    1c54:	af 92       	push	r10
    1c56:	bf 92       	push	r11
    1c58:	cf 92       	push	r12
    1c5a:	df 92       	push	r13
    1c5c:	ef 92       	push	r14
    1c5e:	ff 92       	push	r15
    1c60:	0f 93       	push	r16
    1c62:	1f 93       	push	r17
    1c64:	cf 93       	push	r28
    1c66:	df 93       	push	r29
    1c68:	ec 01       	movw	r28, r24
    1c6a:	d6 2e       	mov	r13, r22
    1c6c:	c7 2e       	mov	r12, r23
    1c6e:	7c 01       	movw	r14, r24
    1c70:	80 e5       	ldi	r24, 0x50	; 80
    1c72:	e8 0e       	add	r14, r24
    1c74:	f1 1c       	adc	r15, r1
    1c76:	f7 01       	movw	r30, r14
    1c78:	60 83       	st	Z, r22
    1c7a:	71 83       	std	Z+1, r23	; 0x01
    1c7c:	3e 01       	movw	r6, r28
    1c7e:	f2 e5       	ldi	r31, 0x52	; 82
    1c80:	6f 0e       	add	r6, r31
    1c82:	71 1c       	adc	r7, r1
    1c84:	f3 01       	movw	r30, r6
    1c86:	51 83       	std	Z+1, r21	; 0x01
    1c88:	40 83       	st	Z, r20
    1c8a:	4e 01       	movw	r8, r28
    1c8c:	f4 e5       	ldi	r31, 0x54	; 84
    1c8e:	8f 0e       	add	r8, r31
    1c90:	91 1c       	adc	r9, r1
    1c92:	f4 01       	movw	r30, r8
    1c94:	31 83       	std	Z+1, r19	; 0x01
    1c96:	20 83       	st	Z, r18
    1c98:	c8 01       	movw	r24, r16
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	08 97       	sbiw	r24, 0x08	; 8
    1c9e:	10 f0       	brcs	.+4      	; 0x1ca4 <LedControl::LedControl(int, int, int, int)+0x58>
    1ca0:	08 e0       	ldi	r16, 0x08	; 8
    1ca2:	10 e0       	ldi	r17, 0x00	; 0
    1ca4:	5e 01       	movw	r10, r28
    1ca6:	f6 e5       	ldi	r31, 0x56	; 86
    1ca8:	af 0e       	add	r10, r31
    1caa:	b1 1c       	adc	r11, r1
    1cac:	f5 01       	movw	r30, r10
    1cae:	11 83       	std	Z+1, r17	; 0x01
    1cb0:	00 83       	st	Z, r16
    1cb2:	61 e0       	ldi	r22, 0x01	; 1
    1cb4:	8d 2d       	mov	r24, r13
    1cb6:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
    1cba:	61 e0       	ldi	r22, 0x01	; 1
    1cbc:	f3 01       	movw	r30, r6
    1cbe:	80 81       	ld	r24, Z
    1cc0:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
    1cc4:	61 e0       	ldi	r22, 0x01	; 1
    1cc6:	f4 01       	movw	r30, r8
    1cc8:	80 81       	ld	r24, Z
    1cca:	0e 94 21 15 	call	0x2a42	; 0x2a42 <pinMode>
    1cce:	61 e0       	ldi	r22, 0x01	; 1
    1cd0:	f4 01       	movw	r30, r8
    1cd2:	80 81       	ld	r24, Z
    1cd4:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    1cd8:	f7 01       	movw	r30, r14
    1cda:	d0 82       	st	Z, r13
    1cdc:	c1 82       	std	Z+1, r12	; 0x01
    1cde:	fe 01       	movw	r30, r28
    1ce0:	70 96       	adiw	r30, 0x10	; 16
    1ce2:	11 92       	st	Z+, r1
    1ce4:	ee 15       	cp	r30, r14
    1ce6:	ff 05       	cpc	r31, r15
    1ce8:	e1 f7       	brne	.-8      	; 0x1ce2 <LedControl::LedControl(int, int, int, int)+0x96>
    1cea:	10 e0       	ldi	r17, 0x00	; 0
    1cec:	00 e0       	ldi	r16, 0x00	; 0
    1cee:	f5 01       	movw	r30, r10
    1cf0:	80 81       	ld	r24, Z
    1cf2:	91 81       	ldd	r25, Z+1	; 0x01
    1cf4:	08 17       	cp	r16, r24
    1cf6:	19 07       	cpc	r17, r25
    1cf8:	f4 f4       	brge	.+60     	; 0x1d36 <LedControl::LedControl(int, int, int, int)+0xea>
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	4f e0       	ldi	r20, 0x0F	; 15
    1cfe:	b8 01       	movw	r22, r16
    1d00:	ce 01       	movw	r24, r28
    1d02:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1d06:	47 e0       	ldi	r20, 0x07	; 7
    1d08:	50 e0       	ldi	r21, 0x00	; 0
    1d0a:	b8 01       	movw	r22, r16
    1d0c:	ce 01       	movw	r24, r28
    1d0e:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <LedControl::setScanLimit(int, int)>
    1d12:	20 e0       	ldi	r18, 0x00	; 0
    1d14:	49 e0       	ldi	r20, 0x09	; 9
    1d16:	b8 01       	movw	r22, r16
    1d18:	ce 01       	movw	r24, r28
    1d1a:	0e 94 5b 0d 	call	0x1ab6	; 0x1ab6 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1d1e:	b8 01       	movw	r22, r16
    1d20:	ce 01       	movw	r24, r28
    1d22:	0e 94 f2 0d 	call	0x1be4	; 0x1be4 <LedControl::clearDisplay(int)>
    1d26:	41 e0       	ldi	r20, 0x01	; 1
    1d28:	b8 01       	movw	r22, r16
    1d2a:	ce 01       	movw	r24, r28
    1d2c:	0e 94 bc 0d 	call	0x1b78	; 0x1b78 <LedControl::shutdown(int, bool)>
    1d30:	0f 5f       	subi	r16, 0xFF	; 255
    1d32:	1f 4f       	sbci	r17, 0xFF	; 255
    1d34:	dc cf       	rjmp	.-72     	; 0x1cee <LedControl::LedControl(int, int, int, int)+0xa2>
    1d36:	df 91       	pop	r29
    1d38:	cf 91       	pop	r28
    1d3a:	1f 91       	pop	r17
    1d3c:	0f 91       	pop	r16
    1d3e:	ff 90       	pop	r15
    1d40:	ef 90       	pop	r14
    1d42:	df 90       	pop	r13
    1d44:	cf 90       	pop	r12
    1d46:	bf 90       	pop	r11
    1d48:	af 90       	pop	r10
    1d4a:	9f 90       	pop	r9
    1d4c:	8f 90       	pop	r8
    1d4e:	7f 90       	pop	r7
    1d50:	6f 90       	pop	r6
    1d52:	08 95       	ret

00001d54 <LedControl::setRow(int, int, unsigned char)>:
_ZN10LedControl6setRowEiih():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:132
    spiTransfer(addr, row+1,status[offset+row]);
}

void LedControl::setRow(int addr, int row, byte value) {
    int offset;
    if(addr<0 || addr>=maxDevices)
    1d54:	77 fd       	sbrc	r23, 7
    1d56:	1a c0       	rjmp	.+52     	; 0x1d8c <LedControl::setRow(int, int, unsigned char)+0x38>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:132 (discriminator 1)
    1d58:	fc 01       	movw	r30, r24
    1d5a:	ea 5a       	subi	r30, 0xAA	; 170
    1d5c:	ff 4f       	sbci	r31, 0xFF	; 255
    1d5e:	01 90       	ld	r0, Z+
    1d60:	f0 81       	ld	r31, Z
    1d62:	e0 2d       	mov	r30, r0
    1d64:	6e 17       	cp	r22, r30
    1d66:	7f 07       	cpc	r23, r31
    1d68:	8c f4       	brge	.+34     	; 0x1d8c <LedControl::setRow(int, int, unsigned char)+0x38>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:134
        return;
    if(row<0 || row>7)
    1d6a:	48 30       	cpi	r20, 0x08	; 8
    1d6c:	51 05       	cpc	r21, r1
    1d6e:	70 f4       	brcc	.+28     	; 0x1d8c <LedControl::setRow(int, int, unsigned char)+0x38>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:137
        return;
    offset=addr*8;
    status[offset+row]=value;
    1d70:	fb 01       	movw	r30, r22
    1d72:	33 e0       	ldi	r19, 0x03	; 3
    1d74:	ee 0f       	add	r30, r30
    1d76:	ff 1f       	adc	r31, r31
    1d78:	3a 95       	dec	r19
    1d7a:	e1 f7       	brne	.-8      	; 0x1d74 <LedControl::setRow(int, int, unsigned char)+0x20>
    1d7c:	e8 0f       	add	r30, r24
    1d7e:	f9 1f       	adc	r31, r25
    1d80:	e4 0f       	add	r30, r20
    1d82:	f5 1f       	adc	r31, r21
    1d84:	20 8b       	std	Z+16, r18	; 0x10
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:138
    spiTransfer(addr, row+1,status[offset+row]);
    1d86:	4f 5f       	subi	r20, 0xFF	; 255
    1d88:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:139
}
    1d8c:	08 95       	ret

00001d8e <LedControl::setDigit(int, int, unsigned char, bool)>:
_ZN10LedControl8setDigitEiihb():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:155
        val=val & 0x01;
        setLed(addr,row,col,val);
    }
}

void LedControl::setDigit(int addr, int digit, byte value, boolean dp) {
    1d8e:	0f 93       	push	r16
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:159
    int offset;
    byte v;

    if(addr<0 || addr>=maxDevices)
    1d90:	77 fd       	sbrc	r23, 7
    1d92:	25 c0       	rjmp	.+74     	; 0x1dde <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:159 (discriminator 1)
    1d94:	fc 01       	movw	r30, r24
    1d96:	ea 5a       	subi	r30, 0xAA	; 170
    1d98:	ff 4f       	sbci	r31, 0xFF	; 255
    1d9a:	01 90       	ld	r0, Z+
    1d9c:	f0 81       	ld	r31, Z
    1d9e:	e0 2d       	mov	r30, r0
    1da0:	6e 17       	cp	r22, r30
    1da2:	7f 07       	cpc	r23, r31
    1da4:	e4 f4       	brge	.+56     	; 0x1dde <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:161
        return;
    if(digit<0 || digit>7 || value>15)
    1da6:	48 30       	cpi	r20, 0x08	; 8
    1da8:	51 05       	cpc	r21, r1
    1daa:	c8 f4       	brcc	.+50     	; 0x1dde <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:161 (discriminator 1)
    1dac:	20 31       	cpi	r18, 0x10	; 16
    1dae:	b8 f4       	brcc	.+46     	; 0x1dde <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:163
        return;
    offset=addr*8;
    1db0:	db 01       	movw	r26, r22
    1db2:	33 e0       	ldi	r19, 0x03	; 3
    1db4:	aa 0f       	add	r26, r26
    1db6:	bb 1f       	adc	r27, r27
    1db8:	3a 95       	dec	r19
    1dba:	e1 f7       	brne	.-8      	; 0x1db4 <LedControl::setDigit(int, int, unsigned char, bool)+0x26>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:164
    v=pgm_read_byte_near(charTable + value); 
    1dbc:	e2 2f       	mov	r30, r18
    1dbe:	f0 e0       	ldi	r31, 0x00	; 0
    1dc0:	ee 56       	subi	r30, 0x6E	; 110
    1dc2:	ff 4f       	sbci	r31, 0xFF	; 255
    1dc4:	24 91       	lpm	r18, Z
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:165
    if(dp)
    1dc6:	01 11       	cpse	r16, r1
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:166
        v|=B10000000;
    1dc8:	20 68       	ori	r18, 0x80	; 128
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:167
    status[offset+digit]=v;
    1dca:	a8 0f       	add	r26, r24
    1dcc:	b9 1f       	adc	r27, r25
    1dce:	a4 0f       	add	r26, r20
    1dd0:	b5 1f       	adc	r27, r21
    1dd2:	50 96       	adiw	r26, 0x10	; 16
    1dd4:	2c 93       	st	X, r18
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:168
    spiTransfer(addr, digit+1,v);
    1dd6:	4f 5f       	subi	r20, 0xFF	; 255
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:169
}
    1dd8:	0f 91       	pop	r16
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:168
    offset=addr*8;
    v=pgm_read_byte_near(charTable + value); 
    if(dp)
        v|=B10000000;
    status[offset+digit]=v;
    spiTransfer(addr, digit+1,v);
    1dda:	0c 94 5b 0d 	jmp	0x1ab6	; 0x1ab6 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:169
}
    1dde:	0f 91       	pop	r16
    1de0:	08 95       	ret

00001de2 <ADS1X15::isConnected()>:
_ZN7ADS1X1511isConnectedEv():
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:570
  _wire = wire;
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_1;
  _conversionDelay = ADS1115_CONVERSION_DELAY;
  _bitShift = 0;
  _maxPorts = 1;
}
    1de2:	cf 93       	push	r28
    1de4:	df 93       	push	r29
    1de6:	ec 01       	movw	r28, r24
    1de8:	6a 81       	ldd	r22, Y+2	; 0x02
    1dea:	88 89       	ldd	r24, Y+16	; 0x10
    1dec:	99 89       	ldd	r25, Y+17	; 0x11
    1dee:	0e 94 4a 11 	call	0x2294	; 0x2294 <TwoWire::beginTransmission(unsigned char)>
    1df2:	88 89       	ldd	r24, Y+16	; 0x10
    1df4:	99 89       	ldd	r25, Y+17	; 0x11
    1df6:	0e 94 cd 11 	call	0x239a	; 0x239a <TwoWire::endTransmission()>
    1dfa:	91 e0       	ldi	r25, 0x01	; 1
    1dfc:	81 11       	cpse	r24, r1
    1dfe:	90 e0       	ldi	r25, 0x00	; 0
    1e00:	89 2f       	mov	r24, r25
    1e02:	df 91       	pop	r29
    1e04:	cf 91       	pop	r28
    1e06:	08 95       	ret

00001e08 <ADS1X15::begin()>:
_ZN7ADS1X155beginEv():
    1e08:	cf 93       	push	r28
    1e0a:	df 93       	push	r29
    1e0c:	ec 01       	movw	r28, r24
    1e0e:	88 89       	ldd	r24, Y+16	; 0x10
    1e10:	99 89       	ldd	r25, Y+17	; 0x11
    1e12:	0e 94 38 11 	call	0x2270	; 0x2270 <TwoWire::begin()>
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	88 54       	subi	r24, 0x48	; 72
    1e1a:	84 30       	cpi	r24, 0x04	; 4
    1e1c:	28 f4       	brcc	.+10     	; 0x1e28 <ADS1X15::begin()+0x20>
    1e1e:	ce 01       	movw	r24, r28
    1e20:	df 91       	pop	r29
    1e22:	cf 91       	pop	r28
    1e24:	0c 94 f1 0e 	jmp	0x1de2	; 0x1de2 <ADS1X15::isConnected()>
    1e28:	80 e0       	ldi	r24, 0x00	; 0
    1e2a:	df 91       	pop	r29
    1e2c:	cf 91       	pop	r28
    1e2e:	08 95       	ret

00001e30 <ADS1X15::setGain(unsigned char)>:
_ZN7ADS1X157setGainEh():
    1e30:	fc 01       	movw	r30, r24
    1e32:	80 81       	ld	r24, Z
    1e34:	84 ff       	sbrs	r24, 4
    1e36:	09 c0       	rjmp	.+18     	; 0x1e4a <ADS1X15::setGain(unsigned char)+0x1a>
    1e38:	64 30       	cpi	r22, 0x04	; 4
    1e3a:	b1 f0       	breq	.+44     	; 0x1e68 <ADS1X15::setGain(unsigned char)+0x38>
    1e3c:	48 f4       	brcc	.+18     	; 0x1e50 <ADS1X15::setGain(unsigned char)+0x20>
    1e3e:	61 30       	cpi	r22, 0x01	; 1
    1e40:	81 f0       	breq	.+32     	; 0x1e62 <ADS1X15::setGain(unsigned char)+0x32>
    1e42:	80 e0       	ldi	r24, 0x00	; 0
    1e44:	94 e0       	ldi	r25, 0x04	; 4
    1e46:	62 30       	cpi	r22, 0x02	; 2
    1e48:	49 f0       	breq	.+18     	; 0x1e5c <ADS1X15::setGain(unsigned char)+0x2c>
    1e4a:	16 82       	std	Z+6, r1	; 0x06
    1e4c:	15 82       	std	Z+5, r1	; 0x05
    1e4e:	08 95       	ret
    1e50:	68 30       	cpi	r22, 0x08	; 8
    1e52:	69 f0       	breq	.+26     	; 0x1e6e <ADS1X15::setGain(unsigned char)+0x3e>
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	9a e0       	ldi	r25, 0x0A	; 10
    1e58:	60 31       	cpi	r22, 0x10	; 16
    1e5a:	b9 f7       	brne	.-18     	; 0x1e4a <ADS1X15::setGain(unsigned char)+0x1a>
    1e5c:	96 83       	std	Z+6, r25	; 0x06
    1e5e:	85 83       	std	Z+5, r24	; 0x05
    1e60:	08 95       	ret
    1e62:	80 e0       	ldi	r24, 0x00	; 0
    1e64:	92 e0       	ldi	r25, 0x02	; 2
    1e66:	fa cf       	rjmp	.-12     	; 0x1e5c <ADS1X15::setGain(unsigned char)+0x2c>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	96 e0       	ldi	r25, 0x06	; 6
    1e6c:	f7 cf       	rjmp	.-18     	; 0x1e5c <ADS1X15::setGain(unsigned char)+0x2c>
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
    1e70:	98 e0       	ldi	r25, 0x08	; 8
    1e72:	f4 cf       	rjmp	.-24     	; 0x1e5c <ADS1X15::setGain(unsigned char)+0x2c>

00001e74 <ADS1X15::reset()>:
_ZN7ADS1X155resetEv():
    1e74:	cf 93       	push	r28
    1e76:	df 93       	push	r29
    1e78:	ec 01       	movw	r28, r24
    1e7a:	60 e0       	ldi	r22, 0x00	; 0
    1e7c:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <ADS1X15::setGain(unsigned char)>
_ZN7ADS1X157setModeEh():
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	91 e0       	ldi	r25, 0x01	; 1
    1e84:	98 87       	std	Y+8, r25	; 0x08
    1e86:	8f 83       	std	Y+7, r24	; 0x07
_ZN7ADS1X1511setDataRateEh():
    1e88:	80 e8       	ldi	r24, 0x80	; 128
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	9a 87       	std	Y+10, r25	; 0x0a
    1e8e:	89 87       	std	Y+9, r24	; 0x09
_ZN7ADS1X155resetEv():
    1e90:	1b 86       	std	Y+11, r1	; 0x0b
    1e92:	81 e0       	ldi	r24, 0x01	; 1
    1e94:	8c 87       	std	Y+12, r24	; 0x0c
    1e96:	1d 86       	std	Y+13, r1	; 0x0d
    1e98:	83 e0       	ldi	r24, 0x03	; 3
    1e9a:	8e 87       	std	Y+14, r24	; 0x0e
    1e9c:	df 91       	pop	r29
    1e9e:	cf 91       	pop	r28
    1ea0:	08 95       	ret

00001ea2 <ADS1X15::ADS1X15()>:
_ZN7ADS1X15C2Ev():
    1ea2:	fc 01       	movw	r30, r24
    1ea4:	17 86       	std	Z+15, r1	; 0x0f
    1ea6:	12 8a       	std	Z+18, r1	; 0x12
    1ea8:	13 8a       	std	Z+19, r1	; 0x13
    1eaa:	14 8a       	std	Z+20, r1	; 0x14
    1eac:	15 8a       	std	Z+21, r1	; 0x15
    1eae:	0c 94 3a 0f 	jmp	0x1e74	; 0x1e74 <ADS1X15::reset()>

00001eb2 <ADS1X15::setMode(unsigned char)>:
_ZN7ADS1X157setModeEh():
    1eb2:	61 11       	cpse	r22, r1
    1eb4:	04 c0       	rjmp	.+8      	; 0x1ebe <ADS1X15::setMode(unsigned char)+0xc>
    1eb6:	fc 01       	movw	r30, r24
    1eb8:	10 86       	std	Z+8, r1	; 0x08
    1eba:	17 82       	std	Z+7, r1	; 0x07
    1ebc:	08 95       	ret
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	31 e0       	ldi	r19, 0x01	; 1
    1ec2:	fc 01       	movw	r30, r24
    1ec4:	30 87       	std	Z+8, r19	; 0x08
    1ec6:	27 83       	std	Z+7, r18	; 0x07
    1ec8:	08 95       	ret

00001eca <ADS1X15::setDataRate(unsigned char)>:
_ZN7ADS1X1511setDataRateEh():
    1eca:	fc 01       	movw	r30, r24
    1ecc:	70 e0       	ldi	r23, 0x00	; 0
    1ece:	68 30       	cpi	r22, 0x08	; 8
    1ed0:	71 05       	cpc	r23, r1
    1ed2:	60 f4       	brcc	.+24     	; 0x1eec <ADS1X15::setDataRate(unsigned char)+0x22>
    1ed4:	72 87       	std	Z+10, r23	; 0x0a
    1ed6:	61 87       	std	Z+9, r22	; 0x09
    1ed8:	81 85       	ldd	r24, Z+9	; 0x09
    1eda:	92 85       	ldd	r25, Z+10	; 0x0a
    1edc:	25 e0       	ldi	r18, 0x05	; 5
    1ede:	88 0f       	add	r24, r24
    1ee0:	99 1f       	adc	r25, r25
    1ee2:	2a 95       	dec	r18
    1ee4:	e1 f7       	brne	.-8      	; 0x1ede <ADS1X15::setDataRate(unsigned char)+0x14>
    1ee6:	92 87       	std	Z+10, r25	; 0x0a
    1ee8:	81 87       	std	Z+9, r24	; 0x09
    1eea:	08 95       	ret
    1eec:	84 e0       	ldi	r24, 0x04	; 4
    1eee:	90 e0       	ldi	r25, 0x00	; 0
    1ef0:	92 87       	std	Z+10, r25	; 0x0a
    1ef2:	81 87       	std	Z+9, r24	; 0x09
    1ef4:	f1 cf       	rjmp	.-30     	; 0x1ed8 <ADS1X15::setDataRate(unsigned char)+0xe>

00001ef6 <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>:
_ZN7ADS1X1514_writeRegisterEhhj():
    1ef6:	ff 92       	push	r15
    1ef8:	0f 93       	push	r16
    1efa:	1f 93       	push	r17
    1efc:	cf 93       	push	r28
    1efe:	df 93       	push	r29
    1f00:	ec 01       	movw	r28, r24
    1f02:	f4 2e       	mov	r15, r20
    1f04:	12 2f       	mov	r17, r18
    1f06:	03 2f       	mov	r16, r19
    1f08:	88 89       	ldd	r24, Y+16	; 0x10
    1f0a:	99 89       	ldd	r25, Y+17	; 0x11
    1f0c:	0e 94 4a 11 	call	0x2294	; 0x2294 <TwoWire::beginTransmission(unsigned char)>
    1f10:	88 89       	ldd	r24, Y+16	; 0x10
    1f12:	99 89       	ldd	r25, Y+17	; 0x11
    1f14:	dc 01       	movw	r26, r24
    1f16:	ed 91       	ld	r30, X+
    1f18:	fc 91       	ld	r31, X
    1f1a:	01 90       	ld	r0, Z+
    1f1c:	f0 81       	ld	r31, Z
    1f1e:	e0 2d       	mov	r30, r0
    1f20:	6f 2d       	mov	r22, r15
    1f22:	09 95       	icall
    1f24:	88 89       	ldd	r24, Y+16	; 0x10
    1f26:	99 89       	ldd	r25, Y+17	; 0x11
    1f28:	dc 01       	movw	r26, r24
    1f2a:	ed 91       	ld	r30, X+
    1f2c:	fc 91       	ld	r31, X
    1f2e:	01 90       	ld	r0, Z+
    1f30:	f0 81       	ld	r31, Z
    1f32:	e0 2d       	mov	r30, r0
    1f34:	60 2f       	mov	r22, r16
    1f36:	09 95       	icall
    1f38:	88 89       	ldd	r24, Y+16	; 0x10
    1f3a:	99 89       	ldd	r25, Y+17	; 0x11
    1f3c:	dc 01       	movw	r26, r24
    1f3e:	ed 91       	ld	r30, X+
    1f40:	fc 91       	ld	r31, X
    1f42:	01 90       	ld	r0, Z+
    1f44:	f0 81       	ld	r31, Z
    1f46:	e0 2d       	mov	r30, r0
    1f48:	61 2f       	mov	r22, r17
    1f4a:	09 95       	icall
    1f4c:	88 89       	ldd	r24, Y+16	; 0x10
    1f4e:	99 89       	ldd	r25, Y+17	; 0x11
    1f50:	0e 94 cd 11 	call	0x239a	; 0x239a <TwoWire::endTransmission()>
    1f54:	91 e0       	ldi	r25, 0x01	; 1
    1f56:	81 11       	cpse	r24, r1
    1f58:	90 e0       	ldi	r25, 0x00	; 0
    1f5a:	89 2f       	mov	r24, r25
    1f5c:	df 91       	pop	r29
    1f5e:	cf 91       	pop	r28
    1f60:	1f 91       	pop	r17
    1f62:	0f 91       	pop	r16
    1f64:	ff 90       	pop	r15
    1f66:	08 95       	ret

00001f68 <ADS1X15::_requestADC(unsigned int)>:
_ZN7ADS1X1511_requestADCEj():
    1f68:	fc 01       	movw	r30, r24
    1f6a:	25 81       	ldd	r18, Z+5	; 0x05
    1f6c:	36 81       	ldd	r19, Z+6	; 0x06
    1f6e:	87 81       	ldd	r24, Z+7	; 0x07
    1f70:	90 85       	ldd	r25, Z+8	; 0x08
    1f72:	28 2b       	or	r18, r24
    1f74:	39 2b       	or	r19, r25
    1f76:	30 68       	ori	r19, 0x80	; 128
    1f78:	81 85       	ldd	r24, Z+9	; 0x09
    1f7a:	92 85       	ldd	r25, Z+10	; 0x0a
    1f7c:	28 2b       	or	r18, r24
    1f7e:	39 2b       	or	r19, r25
    1f80:	26 2b       	or	r18, r22
    1f82:	37 2b       	or	r19, r23
    1f84:	83 85       	ldd	r24, Z+11	; 0x0b
    1f86:	81 11       	cpse	r24, r1
    1f88:	20 61       	ori	r18, 0x10	; 16
    1f8a:	84 85       	ldd	r24, Z+12	; 0x0c
    1f8c:	81 11       	cpse	r24, r1
    1f8e:	28 60       	ori	r18, 0x08	; 8
    1f90:	85 85       	ldd	r24, Z+13	; 0x0d
    1f92:	81 11       	cpse	r24, r1
    1f94:	24 60       	ori	r18, 0x04	; 4
    1f96:	86 85       	ldd	r24, Z+14	; 0x0e
    1f98:	28 2b       	or	r18, r24
    1f9a:	41 e0       	ldi	r20, 0x01	; 1
    1f9c:	62 81       	ldd	r22, Z+2	; 0x02
    1f9e:	cf 01       	movw	r24, r30
    1fa0:	0c 94 7b 0f 	jmp	0x1ef6	; 0x1ef6 <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>

00001fa4 <ADS1X15::_readRegister(unsigned char, unsigned char)>:
_ZN7ADS1X1513_readRegisterEhh():
    1fa4:	0f 93       	push	r16
    1fa6:	1f 93       	push	r17
    1fa8:	cf 93       	push	r28
    1faa:	df 93       	push	r29
    1fac:	8c 01       	movw	r16, r24
    1fae:	c6 2f       	mov	r28, r22
    1fb0:	d4 2f       	mov	r29, r20
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	50 96       	adiw	r26, 0x10	; 16
    1fb6:	8d 91       	ld	r24, X+
    1fb8:	9c 91       	ld	r25, X
    1fba:	0e 94 4a 11 	call	0x2294	; 0x2294 <TwoWire::beginTransmission(unsigned char)>
    1fbe:	f8 01       	movw	r30, r16
    1fc0:	80 89       	ldd	r24, Z+16	; 0x10
    1fc2:	91 89       	ldd	r25, Z+17	; 0x11
    1fc4:	dc 01       	movw	r26, r24
    1fc6:	ed 91       	ld	r30, X+
    1fc8:	fc 91       	ld	r31, X
    1fca:	01 90       	ld	r0, Z+
    1fcc:	f0 81       	ld	r31, Z
    1fce:	e0 2d       	mov	r30, r0
    1fd0:	6d 2f       	mov	r22, r29
    1fd2:	09 95       	icall
    1fd4:	f8 01       	movw	r30, r16
    1fd6:	80 89       	ldd	r24, Z+16	; 0x10
    1fd8:	91 89       	ldd	r25, Z+17	; 0x11
    1fda:	0e 94 cd 11 	call	0x239a	; 0x239a <TwoWire::endTransmission()>
    1fde:	42 e0       	ldi	r20, 0x02	; 2
    1fe0:	6c 2f       	mov	r22, r28
    1fe2:	d8 01       	movw	r26, r16
    1fe4:	50 96       	adiw	r26, 0x10	; 16
    1fe6:	8d 91       	ld	r24, X+
    1fe8:	9c 91       	ld	r25, X
    1fea:	0e 94 ca 11 	call	0x2394	; 0x2394 <TwoWire::requestFrom(unsigned char, unsigned char)>
    1fee:	82 30       	cpi	r24, 0x02	; 2
    1ff0:	f1 f4       	brne	.+60     	; 0x202e <ADS1X15::_readRegister(unsigned char, unsigned char)+0x8a>
    1ff2:	f8 01       	movw	r30, r16
    1ff4:	80 89       	ldd	r24, Z+16	; 0x10
    1ff6:	91 89       	ldd	r25, Z+17	; 0x11
    1ff8:	dc 01       	movw	r26, r24
    1ffa:	ed 91       	ld	r30, X+
    1ffc:	fc 91       	ld	r31, X
    1ffe:	02 84       	ldd	r0, Z+10	; 0x0a
    2000:	f3 85       	ldd	r31, Z+11	; 0x0b
    2002:	e0 2d       	mov	r30, r0
    2004:	09 95       	icall
    2006:	d8 2f       	mov	r29, r24
    2008:	b0 e0       	ldi	r27, 0x00	; 0
    200a:	cb 2f       	mov	r28, r27
    200c:	f8 01       	movw	r30, r16
    200e:	80 89       	ldd	r24, Z+16	; 0x10
    2010:	91 89       	ldd	r25, Z+17	; 0x11
    2012:	dc 01       	movw	r26, r24
    2014:	ed 91       	ld	r30, X+
    2016:	fc 91       	ld	r31, X
    2018:	02 84       	ldd	r0, Z+10	; 0x0a
    201a:	f3 85       	ldd	r31, Z+11	; 0x0b
    201c:	e0 2d       	mov	r30, r0
    201e:	09 95       	icall
    2020:	8c 0f       	add	r24, r28
    2022:	9d 1f       	adc	r25, r29
    2024:	df 91       	pop	r29
    2026:	cf 91       	pop	r28
    2028:	1f 91       	pop	r17
    202a:	0f 91       	pop	r16
    202c:	08 95       	ret
    202e:	90 e0       	ldi	r25, 0x00	; 0
    2030:	80 e0       	ldi	r24, 0x00	; 0
    2032:	f8 cf       	rjmp	.-16     	; 0x2024 <ADS1X15::_readRegister(unsigned char, unsigned char)+0x80>

00002034 <ADS1X15::isBusy()>:
_ZN7ADS1X156isBusyEv():
    2034:	41 e0       	ldi	r20, 0x01	; 1
    2036:	fc 01       	movw	r30, r24
    2038:	62 81       	ldd	r22, Z+2	; 0x02
    203a:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <ADS1X15::_readRegister(unsigned char, unsigned char)>
    203e:	89 2f       	mov	r24, r25
    2040:	80 95       	com	r24
    2042:	88 1f       	adc	r24, r24
    2044:	88 27       	eor	r24, r24
    2046:	88 1f       	adc	r24, r24
    2048:	08 95       	ret

0000204a <ADS1X15::getValue()>:
_ZN7ADS1X158getValueEv():
    204a:	cf 93       	push	r28
    204c:	df 93       	push	r29
    204e:	ec 01       	movw	r28, r24
    2050:	40 e0       	ldi	r20, 0x00	; 0
    2052:	6a 81       	ldd	r22, Y+2	; 0x02
    2054:	0e 94 d2 0f 	call	0x1fa4	; 0x1fa4 <ADS1X15::_readRegister(unsigned char, unsigned char)>
    2058:	2c 81       	ldd	r18, Y+4	; 0x04
    205a:	22 23       	and	r18, r18
    205c:	29 f0       	breq	.+10     	; 0x2068 <ADS1X15::getValue()+0x1e>
    205e:	02 c0       	rjmp	.+4      	; 0x2064 <ADS1X15::getValue()+0x1a>
    2060:	95 95       	asr	r25
    2062:	87 95       	ror	r24
    2064:	2a 95       	dec	r18
    2066:	e2 f7       	brpl	.-8      	; 0x2060 <ADS1X15::getValue()+0x16>
    2068:	df 91       	pop	r29
    206a:	cf 91       	pop	r28
    206c:	08 95       	ret

0000206e <ADS1X15::_readADC(unsigned int)>:
_ZN7ADS1X158_readADCEj():
    206e:	cf 93       	push	r28
    2070:	df 93       	push	r29
    2072:	ec 01       	movw	r28, r24
    2074:	0e 94 b4 0f 	call	0x1f68	; 0x1f68 <ADS1X15::_requestADC(unsigned int)>
    2078:	8f 81       	ldd	r24, Y+7	; 0x07
    207a:	98 85       	ldd	r25, Y+8	; 0x08
    207c:	81 15       	cp	r24, r1
    207e:	91 40       	sbci	r25, 0x01	; 1
    2080:	41 f4       	brne	.+16     	; 0x2092 <ADS1X15::_readADC(unsigned int)+0x24>
    2082:	ce 01       	movw	r24, r28
    2084:	0e 94 1a 10 	call	0x2034	; 0x2034 <ADS1X15::isBusy()>
    2088:	88 23       	and	r24, r24
    208a:	49 f0       	breq	.+18     	; 0x209e <ADS1X15::_readADC(unsigned int)+0x30>
    208c:	0e 94 03 14 	call	0x2806	; 0x2806 <yield>
    2090:	f8 cf       	rjmp	.-16     	; 0x2082 <ADS1X15::_readADC(unsigned int)+0x14>
    2092:	6b 81       	ldd	r22, Y+3	; 0x03
    2094:	70 e0       	ldi	r23, 0x00	; 0
    2096:	90 e0       	ldi	r25, 0x00	; 0
    2098:	80 e0       	ldi	r24, 0x00	; 0
    209a:	0e 94 73 14 	call	0x28e6	; 0x28e6 <delay>
    209e:	ce 01       	movw	r24, r28
    20a0:	df 91       	pop	r29
    20a2:	cf 91       	pop	r28
    20a4:	0c 94 25 10 	jmp	0x204a	; 0x204a <ADS1X15::getValue()>

000020a8 <ADS1X15::readADC(unsigned char)>:
_ZN7ADS1X157readADCEh():
    20a8:	fc 01       	movw	r30, r24
    20aa:	21 81       	ldd	r18, Z+1	; 0x01
    20ac:	62 17       	cp	r22, r18
    20ae:	38 f4       	brcc	.+14     	; 0x20be <ADS1X15::readADC(unsigned char)+0x16>
    20b0:	62 95       	swap	r22
    20b2:	60 7f       	andi	r22, 0xF0	; 240
    20b4:	70 e4       	ldi	r23, 0x40	; 64
    20b6:	76 0f       	add	r23, r22
    20b8:	60 e0       	ldi	r22, 0x00	; 0
    20ba:	0c 94 37 10 	jmp	0x206e	; 0x206e <ADS1X15::_readADC(unsigned int)>
    20be:	90 e0       	ldi	r25, 0x00	; 0
    20c0:	80 e0       	ldi	r24, 0x00	; 0
    20c2:	08 95       	ret

000020c4 <ADS1115::ADS1115(unsigned char, TwoWire*)>:
_ZN7ADS1115C2EhP7TwoWire():
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:577

///////////////////////////////////////////////////////////////////////////
//
// ADS1115
//
ADS1115::ADS1115(uint8_t address, TwoWire *wire)
    20c4:	ff 92       	push	r15
    20c6:	0f 93       	push	r16
    20c8:	1f 93       	push	r17
    20ca:	cf 93       	push	r28
    20cc:	df 93       	push	r29
    20ce:	ec 01       	movw	r28, r24
    20d0:	f6 2e       	mov	r15, r22
    20d2:	8a 01       	movw	r16, r20
    20d4:	0e 94 51 0f 	call	0x1ea2	; 0x1ea2 <ADS1X15::ADS1X15()>
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:579
{
  _address = address;
    20d8:	fa 82       	std	Y+2, r15	; 0x02
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:580
  _wire = wire;
    20da:	19 8b       	std	Y+17, r17	; 0x11
    20dc:	08 8b       	std	Y+16, r16	; 0x10
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:581
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_4;
    20de:	85 e3       	ldi	r24, 0x35	; 53
    20e0:	88 83       	st	Y, r24
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:582
  _conversionDelay = ADS1115_CONVERSION_DELAY;
    20e2:	88 e0       	ldi	r24, 0x08	; 8
    20e4:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:583
  _bitShift = 0;
    20e6:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:584
  _maxPorts = 4;
    20e8:	84 e0       	ldi	r24, 0x04	; 4
    20ea:	89 83       	std	Y+1, r24	; 0x01
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:585
}
    20ec:	df 91       	pop	r29
    20ee:	cf 91       	pop	r28
    20f0:	1f 91       	pop	r17
    20f2:	0f 91       	pop	r16
    20f4:	ff 90       	pop	r15
    20f6:	08 95       	ret

000020f8 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:329

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    20f8:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <TwoWire::rxBufferLength>
    20fc:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <TwoWire::rxBufferIndex>
    2100:	89 1b       	sub	r24, r25
    2102:	99 0b       	sbc	r25, r25
    2104:	08 95       	ret

00002106 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    2106:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <TwoWire::rxBufferIndex>
    210a:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <TwoWire::rxBufferLength>
    210e:	2f ef       	ldi	r18, 0xFF	; 255
    2110:	3f ef       	ldi	r19, 0xFF	; 255
    2112:	98 17       	cp	r25, r24
    2114:	48 f4       	brcc	.+18     	; 0x2128 <TwoWire::read()+0x22>
    2116:	e9 2f       	mov	r30, r25
    2118:	f0 e0       	ldi	r31, 0x00	; 0
    211a:	e0 5f       	subi	r30, 0xF0	; 240
    211c:	fa 4f       	sbci	r31, 0xFA	; 250
    211e:	20 81       	ld	r18, Z
    2120:	30 e0       	ldi	r19, 0x00	; 0
    2122:	9f 5f       	subi	r25, 0xFF	; 255
    2124:	90 93 0f 05 	sts	0x050F, r25	; 0x80050f <TwoWire::rxBufferIndex>
    2128:	c9 01       	movw	r24, r18
    212a:	08 95       	ret

0000212c <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    212c:	e0 91 0f 05 	lds	r30, 0x050F	; 0x80050f <TwoWire::rxBufferIndex>
    2130:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <TwoWire::rxBufferLength>
    2134:	e8 17       	cp	r30, r24
    2136:	30 f4       	brcc	.+12     	; 0x2144 <TwoWire::peek()+0x18>
    2138:	f0 e0       	ldi	r31, 0x00	; 0
    213a:	e0 5f       	subi	r30, 0xF0	; 240
    213c:	fa 4f       	sbci	r31, 0xFA	; 250
    213e:	80 81       	ld	r24, Z
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	08 95       	ret
    2144:	8f ef       	ldi	r24, 0xFF	; 255
    2146:	9f ef       	ldi	r25, 0xFF	; 255
    2148:	08 95       	ret

0000214a <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    214a:	08 95       	ret

0000214c <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    214c:	cf 93       	push	r28
    214e:	df 93       	push	r29
    2150:	ec 01       	movw	r28, r24
    2152:	e0 91 e6 04 	lds	r30, 0x04E6	; 0x8004e6 <TwoWire::user_onReceive>
    2156:	f0 91 e7 04 	lds	r31, 0x04E7	; 0x8004e7 <TwoWire::user_onReceive+0x1>
    215a:	30 97       	sbiw	r30, 0x00	; 0
    215c:	f1 f0       	breq	.+60     	; 0x219a <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    215e:	90 91 0f 05 	lds	r25, 0x050F	; 0x80050f <TwoWire::rxBufferIndex>
    2162:	80 91 0e 05 	lds	r24, 0x050E	; 0x80050e <TwoWire::rxBufferLength>
    2166:	98 17       	cp	r25, r24
    2168:	c0 f0       	brcs	.+48     	; 0x219a <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    216a:	90 e0       	ldi	r25, 0x00	; 0
    216c:	29 2f       	mov	r18, r25
    216e:	30 e0       	ldi	r19, 0x00	; 0
    2170:	26 17       	cp	r18, r22
    2172:	37 07       	cpc	r19, r23
    2174:	54 f4       	brge	.+20     	; 0x218a <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
    2176:	de 01       	movw	r26, r28
    2178:	a2 0f       	add	r26, r18
    217a:	b3 1f       	adc	r27, r19
    217c:	4c 91       	ld	r20, X
    217e:	20 5f       	subi	r18, 0xF0	; 240
    2180:	3a 4f       	sbci	r19, 0xFA	; 250
    2182:	d9 01       	movw	r26, r18
    2184:	4c 93       	st	X, r20
    2186:	9f 5f       	subi	r25, 0xFF	; 255
    2188:	f1 cf       	rjmp	.-30     	; 0x216c <TwoWire::onReceiveService(unsigned char*, int)+0x20>
    218a:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <TwoWire::rxBufferIndex>
    218e:	60 93 0e 05 	sts	0x050E, r22	; 0x80050e <TwoWire::rxBufferLength>
    2192:	cb 01       	movw	r24, r22
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	09 94       	ijmp
    219a:	df 91       	pop	r29
    219c:	cf 91       	pop	r28
    219e:	08 95       	ret

000021a0 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    21a0:	e0 91 e8 04 	lds	r30, 0x04E8	; 0x8004e8 <TwoWire::user_onRequest>
    21a4:	f0 91 e9 04 	lds	r31, 0x04E9	; 0x8004e9 <TwoWire::user_onRequest+0x1>
    21a8:	30 97       	sbiw	r30, 0x00	; 0
    21aa:	29 f0       	breq	.+10     	; 0x21b6 <TwoWire::onRequestService()+0x16>
    21ac:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <TwoWire::txBufferIndex>
    21b0:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <TwoWire::txBufferLength>
    21b4:	09 94       	ijmp
    21b6:	08 95       	ret

000021b8 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    21b8:	cf 93       	push	r28
    21ba:	df 93       	push	r29
    21bc:	1f 92       	push	r1
    21be:	cd b7       	in	r28, 0x3d	; 61
    21c0:	de b7       	in	r29, 0x3e	; 62
    21c2:	69 83       	std	Y+1, r22	; 0x01
    21c4:	20 91 ea 04 	lds	r18, 0x04EA	; 0x8004ea <TwoWire::transmitting>
    21c8:	22 23       	and	r18, r18
    21ca:	f9 f0       	breq	.+62     	; 0x220a <TwoWire::write(unsigned char)+0x52>
    21cc:	20 91 eb 04 	lds	r18, 0x04EB	; 0x8004eb <TwoWire::txBufferLength>
    21d0:	20 32       	cpi	r18, 0x20	; 32
    21d2:	58 f0       	brcs	.+22     	; 0x21ea <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    21d4:	21 e0       	ldi	r18, 0x01	; 1
    21d6:	30 e0       	ldi	r19, 0x00	; 0
    21d8:	fc 01       	movw	r30, r24
    21da:	33 83       	std	Z+3, r19	; 0x03
    21dc:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	0f 90       	pop	r0
    21e4:	df 91       	pop	r29
    21e6:	cf 91       	pop	r28
    21e8:	08 95       	ret
    21ea:	80 91 ec 04 	lds	r24, 0x04EC	; 0x8004ec <TwoWire::txBufferIndex>
    21ee:	e8 2f       	mov	r30, r24
    21f0:	f0 e0       	ldi	r31, 0x00	; 0
    21f2:	e3 51       	subi	r30, 0x13	; 19
    21f4:	fb 4f       	sbci	r31, 0xFB	; 251
    21f6:	99 81       	ldd	r25, Y+1	; 0x01
    21f8:	90 83       	st	Z, r25
    21fa:	8f 5f       	subi	r24, 0xFF	; 255
    21fc:	80 93 ec 04 	sts	0x04EC, r24	; 0x8004ec <TwoWire::txBufferIndex>
    2200:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <TwoWire::txBufferLength>
    2204:	81 e0       	ldi	r24, 0x01	; 1
    2206:	90 e0       	ldi	r25, 0x00	; 0
    2208:	ec cf       	rjmp	.-40     	; 0x21e2 <TwoWire::write(unsigned char)+0x2a>
    220a:	61 e0       	ldi	r22, 0x01	; 1
    220c:	ce 01       	movw	r24, r28
    220e:	01 96       	adiw	r24, 0x01	; 1
    2210:	0e 94 9e 12 	call	0x253c	; 0x253c <twi_transmit>
    2214:	f7 cf       	rjmp	.-18     	; 0x2204 <TwoWire::write(unsigned char)+0x4c>

00002216 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    2216:	cf 92       	push	r12
    2218:	df 92       	push	r13
    221a:	ef 92       	push	r14
    221c:	ff 92       	push	r15
    221e:	0f 93       	push	r16
    2220:	1f 93       	push	r17
    2222:	cf 93       	push	r28
    2224:	df 93       	push	r29
    2226:	7c 01       	movw	r14, r24
    2228:	cb 01       	movw	r24, r22
    222a:	8a 01       	movw	r16, r20
    222c:	20 91 ea 04 	lds	r18, 0x04EA	; 0x8004ea <TwoWire::transmitting>
    2230:	22 23       	and	r18, r18
    2232:	89 f0       	breq	.+34     	; 0x2256 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    2234:	eb 01       	movw	r28, r22
    2236:	6b 01       	movw	r12, r22
    2238:	c4 0e       	add	r12, r20
    223a:	d5 1e       	adc	r13, r21
    223c:	cc 15       	cp	r28, r12
    223e:	dd 05       	cpc	r29, r13
    2240:	69 f0       	breq	.+26     	; 0x225c <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    2242:	69 91       	ld	r22, Y+
    2244:	d7 01       	movw	r26, r14
    2246:	ed 91       	ld	r30, X+
    2248:	fc 91       	ld	r31, X
    224a:	01 90       	ld	r0, Z+
    224c:	f0 81       	ld	r31, Z
    224e:	e0 2d       	mov	r30, r0
    2250:	c7 01       	movw	r24, r14
    2252:	09 95       	icall
    2254:	f3 cf       	rjmp	.-26     	; 0x223c <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    2256:	64 2f       	mov	r22, r20
    2258:	0e 94 9e 12 	call	0x253c	; 0x253c <twi_transmit>
    225c:	c8 01       	movw	r24, r16
    225e:	df 91       	pop	r29
    2260:	cf 91       	pop	r28
    2262:	1f 91       	pop	r17
    2264:	0f 91       	pop	r16
    2266:	ff 90       	pop	r15
    2268:	ef 90       	pop	r14
    226a:	df 90       	pop	r13
    226c:	cf 90       	pop	r12
    226e:	08 95       	ret

00002270 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    2270:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <TwoWire::rxBufferIndex>
    2274:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <TwoWire::rxBufferLength>
    2278:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <TwoWire::txBufferIndex>
    227c:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <TwoWire::txBufferLength>
    2280:	0e 94 e1 11 	call	0x23c2	; 0x23c2 <twi_init>
    2284:	80 ed       	ldi	r24, 0xD0	; 208
    2286:	90 e1       	ldi	r25, 0x10	; 16
    2288:	0e 94 ca 12 	call	0x2594	; 0x2594 <twi_attachSlaveTxEvent>
    228c:	86 ea       	ldi	r24, 0xA6	; 166
    228e:	90 e1       	ldi	r25, 0x10	; 16
    2290:	0c 94 c5 12 	jmp	0x258a	; 0x258a <twi_attachSlaveRxEvent>

00002294 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    2294:	81 e0       	ldi	r24, 0x01	; 1
    2296:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <TwoWire::transmitting>
    229a:	60 93 0d 05 	sts	0x050D, r22	; 0x80050d <TwoWire::txAddress>
    229e:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <TwoWire::txBufferIndex>
    22a2:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <TwoWire::txBufferLength>
    22a6:	08 95       	ret

000022a8 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    22a8:	0f 93       	push	r16
    22aa:	06 2f       	mov	r16, r22
    22ac:	21 e0       	ldi	r18, 0x01	; 1
    22ae:	40 91 eb 04 	lds	r20, 0x04EB	; 0x8004eb <TwoWire::txBufferLength>
    22b2:	6d ee       	ldi	r22, 0xED	; 237
    22b4:	74 e0       	ldi	r23, 0x04	; 4
    22b6:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <TwoWire::txAddress>
    22ba:	0e 94 47 12 	call	0x248e	; 0x248e <twi_writeTo>
    22be:	10 92 ec 04 	sts	0x04EC, r1	; 0x8004ec <TwoWire::txBufferIndex>
    22c2:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <TwoWire::txBufferLength>
    22c6:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <TwoWire::transmitting>
    22ca:	0f 91       	pop	r16
    22cc:	08 95       	ret

000022ce <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    22ce:	4f 92       	push	r4
    22d0:	5f 92       	push	r5
    22d2:	6f 92       	push	r6
    22d4:	7f 92       	push	r7
    22d6:	af 92       	push	r10
    22d8:	bf 92       	push	r11
    22da:	cf 92       	push	r12
    22dc:	ef 92       	push	r14
    22de:	ff 92       	push	r15
    22e0:	0f 93       	push	r16
    22e2:	1f 93       	push	r17
    22e4:	cf 93       	push	r28
    22e6:	df 93       	push	r29
    22e8:	5c 01       	movw	r10, r24
    22ea:	f6 2e       	mov	r15, r22
    22ec:	d4 2f       	mov	r29, r20
    22ee:	28 01       	movw	r4, r16
    22f0:	39 01       	movw	r6, r18
    22f2:	ee 20       	and	r14, r14
    22f4:	19 f1       	breq	.+70     	; 0x233c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    22f6:	0e 94 4a 11 	call	0x2294	; 0x2294 <TwoWire::beginTransmission(unsigned char)>
    22fa:	ce 2d       	mov	r28, r14
    22fc:	c4 30       	cpi	r28, 0x04	; 4
    22fe:	08 f0       	brcs	.+2      	; 0x2302 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    2300:	c3 e0       	ldi	r28, 0x03	; 3
    2302:	c1 50       	subi	r28, 0x01	; 1
    2304:	b8 f0       	brcs	.+46     	; 0x2334 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    2306:	28 e0       	ldi	r18, 0x08	; 8
    2308:	c2 9f       	mul	r28, r18
    230a:	c0 01       	movw	r24, r0
    230c:	11 24       	eor	r1, r1
    230e:	a3 01       	movw	r20, r6
    2310:	92 01       	movw	r18, r4
    2312:	04 c0       	rjmp	.+8      	; 0x231c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    2314:	56 95       	lsr	r21
    2316:	47 95       	ror	r20
    2318:	37 95       	ror	r19
    231a:	27 95       	ror	r18
    231c:	8a 95       	dec	r24
    231e:	d2 f7       	brpl	.-12     	; 0x2314 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    2320:	b9 01       	movw	r22, r18
    2322:	d5 01       	movw	r26, r10
    2324:	ed 91       	ld	r30, X+
    2326:	fc 91       	ld	r31, X
    2328:	01 90       	ld	r0, Z+
    232a:	f0 81       	ld	r31, Z
    232c:	e0 2d       	mov	r30, r0
    232e:	c5 01       	movw	r24, r10
    2330:	09 95       	icall
    2332:	e7 cf       	rjmp	.-50     	; 0x2302 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    2334:	60 e0       	ldi	r22, 0x00	; 0
    2336:	c5 01       	movw	r24, r10
    2338:	0e 94 54 11 	call	0x22a8	; 0x22a8 <TwoWire::endTransmission(unsigned char)>
    233c:	4d 2f       	mov	r20, r29
    233e:	d1 32       	cpi	r29, 0x21	; 33
    2340:	08 f0       	brcs	.+2      	; 0x2344 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    2342:	40 e2       	ldi	r20, 0x20	; 32
    2344:	2c 2d       	mov	r18, r12
    2346:	60 e1       	ldi	r22, 0x10	; 16
    2348:	75 e0       	ldi	r23, 0x05	; 5
    234a:	8f 2d       	mov	r24, r15
    234c:	0e 94 ff 11 	call	0x23fe	; 0x23fe <twi_readFrom>
    2350:	10 92 0f 05 	sts	0x050F, r1	; 0x80050f <TwoWire::rxBufferIndex>
    2354:	80 93 0e 05 	sts	0x050E, r24	; 0x80050e <TwoWire::rxBufferLength>
    2358:	df 91       	pop	r29
    235a:	cf 91       	pop	r28
    235c:	1f 91       	pop	r17
    235e:	0f 91       	pop	r16
    2360:	ff 90       	pop	r15
    2362:	ef 90       	pop	r14
    2364:	cf 90       	pop	r12
    2366:	bf 90       	pop	r11
    2368:	af 90       	pop	r10
    236a:	7f 90       	pop	r7
    236c:	6f 90       	pop	r6
    236e:	5f 90       	pop	r5
    2370:	4f 90       	pop	r4
    2372:	08 95       	ret

00002374 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    2374:	cf 92       	push	r12
    2376:	ef 92       	push	r14
    2378:	0f 93       	push	r16
    237a:	1f 93       	push	r17
    237c:	c2 2e       	mov	r12, r18
    237e:	e1 2c       	mov	r14, r1
    2380:	00 e0       	ldi	r16, 0x00	; 0
    2382:	10 e0       	ldi	r17, 0x00	; 0
    2384:	98 01       	movw	r18, r16
    2386:	0e 94 67 11 	call	0x22ce	; 0x22ce <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    238a:	1f 91       	pop	r17
    238c:	0f 91       	pop	r16
    238e:	ef 90       	pop	r14
    2390:	cf 90       	pop	r12
    2392:	08 95       	ret

00002394 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
    2394:	21 e0       	ldi	r18, 0x01	; 1
    2396:	0c 94 ba 11 	jmp	0x2374	; 0x2374 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

0000239a <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    239a:	61 e0       	ldi	r22, 0x01	; 1
    239c:	0c 94 54 11 	jmp	0x22a8	; 0x22a8 <TwoWire::endTransmission(unsigned char)>

000023a0 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    23a0:	ea ed       	ldi	r30, 0xDA	; 218
    23a2:	f4 e0       	ldi	r31, 0x04	; 4
    23a4:	13 82       	std	Z+3, r1	; 0x03
    23a6:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    23a8:	88 ee       	ldi	r24, 0xE8	; 232
    23aa:	93 e0       	ldi	r25, 0x03	; 3
    23ac:	a0 e0       	ldi	r26, 0x00	; 0
    23ae:	b0 e0       	ldi	r27, 0x00	; 0
    23b0:	84 83       	std	Z+4, r24	; 0x04
    23b2:	95 83       	std	Z+5, r25	; 0x05
    23b4:	a6 83       	std	Z+6, r26	; 0x06
    23b6:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:52
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    23b8:	88 eb       	ldi	r24, 0xB8	; 184
    23ba:	93 e0       	ldi	r25, 0x03	; 3
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:333
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    23c0:	08 95       	ret

000023c2 <twi_init>:
twi_init():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    23c2:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <twi_state>
    23c6:	81 e0       	ldi	r24, 0x01	; 1
    23c8:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <twi_sendStop>
    23cc:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <twi_inRepStart>
    23d0:	61 e0       	ldi	r22, 0x01	; 1
    23d2:	81 e1       	ldi	r24, 0x11	; 17
    23d4:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    23d8:	61 e0       	ldi	r22, 0x01	; 1
    23da:	80 e1       	ldi	r24, 0x10	; 16
    23dc:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    23e0:	e9 eb       	ldi	r30, 0xB9	; 185
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	8e 7f       	andi	r24, 0xFE	; 254
    23e8:	80 83       	st	Z, r24
    23ea:	80 81       	ld	r24, Z
    23ec:	8d 7f       	andi	r24, 0xFD	; 253
    23ee:	80 83       	st	Z, r24
    23f0:	88 e4       	ldi	r24, 0x48	; 72
    23f2:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    23f6:	85 e4       	ldi	r24, 0x45	; 69
    23f8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    23fc:	08 95       	ret

000023fe <twi_readFrom>:
twi_readFrom():
    23fe:	41 32       	cpi	r20, 0x21	; 33
    2400:	08 f0       	brcs	.+2      	; 0x2404 <twi_readFrom+0x6>
    2402:	43 c0       	rjmp	.+134    	; 0x248a <twi_readFrom+0x8c>
    2404:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <twi_state>
    2408:	91 11       	cpse	r25, r1
    240a:	fc cf       	rjmp	.-8      	; 0x2404 <twi_readFrom+0x6>
    240c:	91 e0       	ldi	r25, 0x01	; 1
    240e:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <twi_state>
    2412:	20 93 9b 05 	sts	0x059B, r18	; 0x80059b <twi_sendStop>
    2416:	2f ef       	ldi	r18, 0xFF	; 255
    2418:	20 93 30 05 	sts	0x0530, r18	; 0x800530 <twi_error>
    241c:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <twi_masterBufferIndex>
    2420:	24 0f       	add	r18, r20
    2422:	20 93 74 05 	sts	0x0574, r18	; 0x800574 <twi_masterBufferLength>
    2426:	90 93 9c 05 	sts	0x059C, r25	; 0x80059c <twi_slarw>
    242a:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <twi_slarw>
    242e:	88 0f       	add	r24, r24
    2430:	89 2b       	or	r24, r25
    2432:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <twi_slarw>
    2436:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <twi_inRepStart>
    243a:	81 30       	cpi	r24, 0x01	; 1
    243c:	09 f5       	brne	.+66     	; 0x2480 <twi_readFrom+0x82>
    243e:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <twi_inRepStart>
    2442:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <twi_slarw>
    2446:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    244a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    244e:	83 fd       	sbrc	r24, 3
    2450:	f8 cf       	rjmp	.-16     	; 0x2442 <twi_readFrom+0x44>
    2452:	85 ec       	ldi	r24, 0xC5	; 197
    2454:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2458:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <twi_state>
    245c:	81 30       	cpi	r24, 0x01	; 1
    245e:	e1 f3       	breq	.-8      	; 0x2458 <twi_readFrom+0x5a>
    2460:	80 91 75 05 	lds	r24, 0x0575	; 0x800575 <twi_masterBufferIndex>
    2464:	84 17       	cp	r24, r20
    2466:	10 f4       	brcc	.+4      	; 0x246c <twi_readFrom+0x6e>
    2468:	40 91 75 05 	lds	r20, 0x0575	; 0x800575 <twi_masterBufferIndex>
    246c:	a6 e7       	ldi	r26, 0x76	; 118
    246e:	b5 e0       	ldi	r27, 0x05	; 5
    2470:	96 2f       	mov	r25, r22
    2472:	fb 01       	movw	r30, r22
    2474:	8e 2f       	mov	r24, r30
    2476:	89 1b       	sub	r24, r25
    2478:	84 17       	cp	r24, r20
    247a:	20 f0       	brcs	.+8      	; 0x2484 <twi_readFrom+0x86>
    247c:	84 2f       	mov	r24, r20
    247e:	08 95       	ret
    2480:	85 ee       	ldi	r24, 0xE5	; 229
    2482:	e8 cf       	rjmp	.-48     	; 0x2454 <twi_readFrom+0x56>
    2484:	8d 91       	ld	r24, X+
    2486:	81 93       	st	Z+, r24
    2488:	f5 cf       	rjmp	.-22     	; 0x2474 <twi_readFrom+0x76>
    248a:	40 e0       	ldi	r20, 0x00	; 0
    248c:	f7 cf       	rjmp	.-18     	; 0x247c <twi_readFrom+0x7e>

0000248e <twi_writeTo>:
twi_writeTo():
    248e:	0f 93       	push	r16
    2490:	41 32       	cpi	r20, 0x21	; 33
    2492:	08 f0       	brcs	.+2      	; 0x2496 <twi_writeTo+0x8>
    2494:	4b c0       	rjmp	.+150    	; 0x252c <twi_writeTo+0x9e>
    2496:	90 91 9d 05 	lds	r25, 0x059D	; 0x80059d <twi_state>
    249a:	91 11       	cpse	r25, r1
    249c:	fc cf       	rjmp	.-8      	; 0x2496 <twi_writeTo+0x8>
    249e:	92 e0       	ldi	r25, 0x02	; 2
    24a0:	90 93 9d 05 	sts	0x059D, r25	; 0x80059d <twi_state>
    24a4:	00 93 9b 05 	sts	0x059B, r16	; 0x80059b <twi_sendStop>
    24a8:	9f ef       	ldi	r25, 0xFF	; 255
    24aa:	90 93 30 05 	sts	0x0530, r25	; 0x800530 <twi_error>
    24ae:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <twi_masterBufferIndex>
    24b2:	40 93 74 05 	sts	0x0574, r20	; 0x800574 <twi_masterBufferLength>
    24b6:	36 2f       	mov	r19, r22
    24b8:	a6 e7       	ldi	r26, 0x76	; 118
    24ba:	b5 e0       	ldi	r27, 0x05	; 5
    24bc:	fb 01       	movw	r30, r22
    24be:	9e 2f       	mov	r25, r30
    24c0:	93 1b       	sub	r25, r19
    24c2:	94 17       	cp	r25, r20
    24c4:	70 f1       	brcs	.+92     	; 0x2522 <twi_writeTo+0x94>
    24c6:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <twi_slarw>
    24ca:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <twi_slarw>
    24ce:	88 0f       	add	r24, r24
    24d0:	89 2b       	or	r24, r25
    24d2:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <twi_slarw>
    24d6:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <twi_inRepStart>
    24da:	81 30       	cpi	r24, 0x01	; 1
    24dc:	29 f5       	brne	.+74     	; 0x2528 <twi_writeTo+0x9a>
    24de:	10 92 9a 05 	sts	0x059A, r1	; 0x80059a <twi_inRepStart>
    24e2:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <twi_slarw>
    24e6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    24ea:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    24ee:	83 fd       	sbrc	r24, 3
    24f0:	f8 cf       	rjmp	.-16     	; 0x24e2 <twi_writeTo+0x54>
    24f2:	85 ec       	ldi	r24, 0xC5	; 197
    24f4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    24f8:	22 23       	and	r18, r18
    24fa:	21 f0       	breq	.+8      	; 0x2504 <twi_writeTo+0x76>
    24fc:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <twi_state>
    2500:	82 30       	cpi	r24, 0x02	; 2
    2502:	d1 f3       	breq	.-12     	; 0x24f8 <twi_writeTo+0x6a>
    2504:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <twi_error>
    2508:	8f 3f       	cpi	r24, 0xFF	; 255
    250a:	91 f0       	breq	.+36     	; 0x2530 <twi_writeTo+0xa2>
    250c:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <twi_error>
    2510:	80 32       	cpi	r24, 0x20	; 32
    2512:	81 f0       	breq	.+32     	; 0x2534 <twi_writeTo+0xa6>
    2514:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <twi_error>
    2518:	80 33       	cpi	r24, 0x30	; 48
    251a:	71 f0       	breq	.+28     	; 0x2538 <twi_writeTo+0xaa>
    251c:	84 e0       	ldi	r24, 0x04	; 4
    251e:	0f 91       	pop	r16
    2520:	08 95       	ret
    2522:	91 91       	ld	r25, Z+
    2524:	9d 93       	st	X+, r25
    2526:	cb cf       	rjmp	.-106    	; 0x24be <twi_writeTo+0x30>
    2528:	85 ee       	ldi	r24, 0xE5	; 229
    252a:	e4 cf       	rjmp	.-56     	; 0x24f4 <twi_writeTo+0x66>
    252c:	81 e0       	ldi	r24, 0x01	; 1
    252e:	f7 cf       	rjmp	.-18     	; 0x251e <twi_writeTo+0x90>
    2530:	80 e0       	ldi	r24, 0x00	; 0
    2532:	f5 cf       	rjmp	.-22     	; 0x251e <twi_writeTo+0x90>
    2534:	82 e0       	ldi	r24, 0x02	; 2
    2536:	f3 cf       	rjmp	.-26     	; 0x251e <twi_writeTo+0x90>
    2538:	83 e0       	ldi	r24, 0x03	; 3
    253a:	f1 cf       	rjmp	.-30     	; 0x251e <twi_writeTo+0x90>

0000253c <twi_transmit>:
twi_transmit():
    253c:	20 91 52 05 	lds	r18, 0x0552	; 0x800552 <twi_txBufferLength>
    2540:	26 0f       	add	r18, r22
    2542:	33 27       	eor	r19, r19
    2544:	33 1f       	adc	r19, r19
    2546:	21 32       	cpi	r18, 0x21	; 33
    2548:	31 05       	cpc	r19, r1
    254a:	ec f4       	brge	.+58     	; 0x2586 <twi_transmit+0x4a>
    254c:	20 91 9d 05 	lds	r18, 0x059D	; 0x80059d <twi_state>
    2550:	fc 01       	movw	r30, r24
    2552:	90 e0       	ldi	r25, 0x00	; 0
    2554:	80 e0       	ldi	r24, 0x00	; 0
    2556:	24 30       	cpi	r18, 0x04	; 4
    2558:	69 f0       	breq	.+26     	; 0x2574 <twi_transmit+0x38>
    255a:	82 e0       	ldi	r24, 0x02	; 2
    255c:	08 95       	ret
    255e:	a0 91 52 05 	lds	r26, 0x0552	; 0x800552 <twi_txBufferLength>
    2562:	21 91       	ld	r18, Z+
    2564:	ac 01       	movw	r20, r24
    2566:	4c 5a       	subi	r20, 0xAC	; 172
    2568:	5a 4f       	sbci	r21, 0xFA	; 250
    256a:	a4 0f       	add	r26, r20
    256c:	b5 2f       	mov	r27, r21
    256e:	b1 1d       	adc	r27, r1
    2570:	2c 93       	st	X, r18
    2572:	01 96       	adiw	r24, 0x01	; 1
    2574:	86 17       	cp	r24, r22
    2576:	98 f3       	brcs	.-26     	; 0x255e <twi_transmit+0x22>
    2578:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <twi_txBufferLength>
    257c:	68 0f       	add	r22, r24
    257e:	60 93 52 05 	sts	0x0552, r22	; 0x800552 <twi_txBufferLength>
    2582:	80 e0       	ldi	r24, 0x00	; 0
    2584:	08 95       	ret
    2586:	81 e0       	ldi	r24, 0x01	; 1
    2588:	08 95       	ret

0000258a <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    258a:	90 93 97 05 	sts	0x0597, r25	; 0x800597 <twi_onSlaveReceive+0x1>
    258e:	80 93 96 05 	sts	0x0596, r24	; 0x800596 <twi_onSlaveReceive>
    2592:	08 95       	ret

00002594 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    2594:	90 93 99 05 	sts	0x0599, r25	; 0x800599 <twi_onSlaveTransmit+0x1>
    2598:	80 93 98 05 	sts	0x0598, r24	; 0x800598 <twi_onSlaveTransmit>
    259c:	08 95       	ret

0000259e <twi_stop>:
twi_stop():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    259e:	85 ed       	ldi	r24, 0xD5	; 213
    25a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    25a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    25a8:	84 fd       	sbrc	r24, 4
    25aa:	fc cf       	rjmp	.-8      	; 0x25a4 <twi_stop+0x6>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    25ac:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
    25b0:	08 95       	ret

000025b2 <twi_releaseBus>:
twi_releaseBus():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    25b2:	85 ec       	ldi	r24, 0xC5	; 197
    25b4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    25b8:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:397
}
    25bc:	08 95       	ret

000025be <__vector_26>:
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
    25be:	1f 92       	push	r1
    25c0:	0f 92       	push	r0
    25c2:	0f b6       	in	r0, 0x3f	; 63
    25c4:	0f 92       	push	r0
    25c6:	11 24       	eor	r1, r1
    25c8:	0b b6       	in	r0, 0x3b	; 59
    25ca:	0f 92       	push	r0
    25cc:	2f 93       	push	r18
    25ce:	3f 93       	push	r19
    25d0:	4f 93       	push	r20
    25d2:	5f 93       	push	r21
    25d4:	6f 93       	push	r22
    25d6:	7f 93       	push	r23
    25d8:	8f 93       	push	r24
    25da:	9f 93       	push	r25
    25dc:	af 93       	push	r26
    25de:	bf 93       	push	r27
    25e0:	ef 93       	push	r30
    25e2:	ff 93       	push	r31
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    25e4:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    25e8:	88 7f       	andi	r24, 0xF8	; 248
    25ea:	80 36       	cpi	r24, 0x60	; 96
    25ec:	09 f4       	brne	.+2      	; 0x25f0 <__vector_26+0x32>
    25ee:	4e c0       	rjmp	.+156    	; 0x268c <__vector_26+0xce>
    25f0:	08 f0       	brcs	.+2      	; 0x25f4 <__vector_26+0x36>
    25f2:	41 c0       	rjmp	.+130    	; 0x2676 <__vector_26+0xb8>
    25f4:	88 32       	cpi	r24, 0x28	; 40
    25f6:	09 f4       	brne	.+2      	; 0x25fa <__vector_26+0x3c>
    25f8:	aa c0       	rjmp	.+340    	; 0x274e <__vector_26+0x190>
    25fa:	28 f5       	brcc	.+74     	; 0x2646 <__vector_26+0x88>
    25fc:	80 31       	cpi	r24, 0x10	; 16
    25fe:	09 f4       	brne	.+2      	; 0x2602 <__vector_26+0x44>
    2600:	9e c0       	rjmp	.+316    	; 0x273e <__vector_26+0x180>
    2602:	c8 f4       	brcc	.+50     	; 0x2636 <__vector_26+0x78>
    2604:	88 23       	and	r24, r24
    2606:	09 f4       	brne	.+2      	; 0x260a <__vector_26+0x4c>
    2608:	fb c0       	rjmp	.+502    	; 0x2800 <__vector_26+0x242>
    260a:	88 30       	cpi	r24, 0x08	; 8
    260c:	09 f4       	brne	.+2      	; 0x2610 <__vector_26+0x52>
    260e:	97 c0       	rjmp	.+302    	; 0x273e <__vector_26+0x180>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2610:	ff 91       	pop	r31
    2612:	ef 91       	pop	r30
    2614:	bf 91       	pop	r27
    2616:	af 91       	pop	r26
    2618:	9f 91       	pop	r25
    261a:	8f 91       	pop	r24
    261c:	7f 91       	pop	r23
    261e:	6f 91       	pop	r22
    2620:	5f 91       	pop	r21
    2622:	4f 91       	pop	r20
    2624:	3f 91       	pop	r19
    2626:	2f 91       	pop	r18
    2628:	0f 90       	pop	r0
    262a:	0b be       	out	0x3b, r0	; 59
    262c:	0f 90       	pop	r0
    262e:	0f be       	out	0x3f, r0	; 63
    2630:	0f 90       	pop	r0
    2632:	1f 90       	pop	r1
    2634:	18 95       	reti
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2636:	88 31       	cpi	r24, 0x18	; 24
    2638:	09 f4       	brne	.+2      	; 0x263c <__vector_26+0x7e>
    263a:	89 c0       	rjmp	.+274    	; 0x274e <__vector_26+0x190>
    263c:	80 32       	cpi	r24, 0x20	; 32
    263e:	41 f7       	brne	.-48     	; 0x2610 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2640:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <twi_error>
    2644:	15 c0       	rjmp	.+42     	; 0x2670 <__vector_26+0xb2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2646:	80 34       	cpi	r24, 0x40	; 64
    2648:	09 f4       	brne	.+2      	; 0x264c <__vector_26+0x8e>
    264a:	9e c0       	rjmp	.+316    	; 0x2788 <__vector_26+0x1ca>
    264c:	48 f4       	brcc	.+18     	; 0x2660 <__vector_26+0xa2>
    264e:	80 33       	cpi	r24, 0x30	; 48
    2650:	b9 f3       	breq	.-18     	; 0x2640 <__vector_26+0x82>
    2652:	88 33       	cpi	r24, 0x38	; 56
    2654:	e9 f6       	brne	.-70     	; 0x2610 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2656:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <twi_error>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
    265a:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <twi_releaseBus>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:442
      break;
    265e:	d8 cf       	rjmp	.-80     	; 0x2610 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2660:	80 35       	cpi	r24, 0x50	; 80
    2662:	09 f4       	brne	.+2      	; 0x2666 <__vector_26+0xa8>
    2664:	85 c0       	rjmp	.+266    	; 0x2770 <__vector_26+0x1b2>
    2666:	88 35       	cpi	r24, 0x58	; 88
    2668:	09 f4       	brne	.+2      	; 0x266c <__vector_26+0xae>
    266a:	96 c0       	rjmp	.+300    	; 0x2798 <__vector_26+0x1da>
    266c:	88 34       	cpi	r24, 0x48	; 72
    266e:	81 f6       	brne	.-96     	; 0x2610 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    2670:	0e 94 cf 12 	call	0x259e	; 0x259e <twi_stop>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
    2674:	cd cf       	rjmp	.-102    	; 0x2610 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2676:	88 39       	cpi	r24, 0x98	; 152
    2678:	09 f4       	brne	.+2      	; 0x267c <__vector_26+0xbe>
    267a:	8c c0       	rjmp	.+280    	; 0x2794 <__vector_26+0x1d6>
    267c:	38 f5       	brcc	.+78     	; 0x26cc <__vector_26+0x10e>
    267e:	88 37       	cpi	r24, 0x78	; 120
    2680:	29 f0       	breq	.+10     	; 0x268c <__vector_26+0xce>
    2682:	50 f4       	brcc	.+20     	; 0x2698 <__vector_26+0xda>
    2684:	88 36       	cpi	r24, 0x68	; 104
    2686:	11 f0       	breq	.+4      	; 0x268c <__vector_26+0xce>
    2688:	80 37       	cpi	r24, 0x70	; 112
    268a:	11 f6       	brne	.-124    	; 0x2610 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    268c:	83 e0       	ldi	r24, 0x03	; 3
    268e:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2692:	10 92 31 05 	sts	0x0531, r1	; 0x800531 <twi_rxBufferIndex>
    2696:	57 c0       	rjmp	.+174    	; 0x2746 <__vector_26+0x188>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2698:	88 38       	cpi	r24, 0x88	; 136
    269a:	09 f4       	brne	.+2      	; 0x269e <__vector_26+0xe0>
    269c:	7b c0       	rjmp	.+246    	; 0x2794 <__vector_26+0x1d6>
    269e:	80 39       	cpi	r24, 0x90	; 144
    26a0:	19 f0       	breq	.+6      	; 0x26a8 <__vector_26+0xea>
    26a2:	80 38       	cpi	r24, 0x80	; 128
    26a4:	09 f0       	breq	.+2      	; 0x26a8 <__vector_26+0xea>
    26a6:	b4 cf       	rjmp	.-152    	; 0x2610 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    26a8:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <twi_rxBufferIndex>
    26ac:	80 32       	cpi	r24, 0x20	; 32
    26ae:	08 f0       	brcs	.+2      	; 0x26b2 <__vector_26+0xf4>
    26b0:	71 c0       	rjmp	.+226    	; 0x2794 <__vector_26+0x1d6>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    26b2:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <twi_rxBufferIndex>
    26b6:	81 e0       	ldi	r24, 0x01	; 1
    26b8:	8e 0f       	add	r24, r30
    26ba:	80 93 31 05 	sts	0x0531, r24	; 0x800531 <twi_rxBufferIndex>
    26be:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    26c2:	f0 e0       	ldi	r31, 0x00	; 0
    26c4:	ee 5c       	subi	r30, 0xCE	; 206
    26c6:	fa 4f       	sbci	r31, 0xFA	; 250
    26c8:	80 83       	st	Z, r24
    26ca:	3d c0       	rjmp	.+122    	; 0x2746 <__vector_26+0x188>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    26cc:	80 3b       	cpi	r24, 0xB0	; 176
    26ce:	39 f0       	breq	.+14     	; 0x26de <__vector_26+0x120>
    26d0:	e0 f4       	brcc	.+56     	; 0x270a <__vector_26+0x14c>
    26d2:	80 3a       	cpi	r24, 0xA0	; 160
    26d4:	09 f4       	brne	.+2      	; 0x26d8 <__vector_26+0x11a>
    26d6:	79 c0       	rjmp	.+242    	; 0x27ca <__vector_26+0x20c>
    26d8:	88 3a       	cpi	r24, 0xA8	; 168
    26da:	09 f0       	breq	.+2      	; 0x26de <__vector_26+0x120>
    26dc:	99 cf       	rjmp	.-206    	; 0x2610 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    26de:	84 e0       	ldi	r24, 0x04	; 4
    26e0:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    26e4:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <twi_txBufferIndex>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    26e8:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <twi_txBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    26ec:	e0 91 98 05 	lds	r30, 0x0598	; 0x800598 <twi_onSlaveTransmit>
    26f0:	f0 91 99 05 	lds	r31, 0x0599	; 0x800599 <twi_onSlaveTransmit+0x1>
    26f4:	09 95       	icall
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    26f6:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <twi_txBufferLength>
    26fa:	81 11       	cpse	r24, r1
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <__vector_26+0x15e>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
    2700:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <twi_txBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    2704:	10 92 54 05 	sts	0x0554, r1	; 0x800554 <twi_txBuffer>
    2708:	09 c0       	rjmp	.+18     	; 0x271c <__vector_26+0x15e>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    270a:	80 3c       	cpi	r24, 0xC0	; 192
    270c:	09 f4       	brne	.+2      	; 0x2710 <__vector_26+0x152>
    270e:	76 c0       	rjmp	.+236    	; 0x27fc <__vector_26+0x23e>
    2710:	88 3c       	cpi	r24, 0xC8	; 200
    2712:	09 f4       	brne	.+2      	; 0x2716 <__vector_26+0x158>
    2714:	73 c0       	rjmp	.+230    	; 0x27fc <__vector_26+0x23e>
    2716:	88 3b       	cpi	r24, 0xB8	; 184
    2718:	09 f0       	breq	.+2      	; 0x271c <__vector_26+0x15e>
    271a:	7a cf       	rjmp	.-268    	; 0x2610 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    271c:	e0 91 53 05 	lds	r30, 0x0553	; 0x800553 <twi_txBufferIndex>
    2720:	81 e0       	ldi	r24, 0x01	; 1
    2722:	8e 0f       	add	r24, r30
    2724:	80 93 53 05 	sts	0x0553, r24	; 0x800553 <twi_txBufferIndex>
    2728:	f0 e0       	ldi	r31, 0x00	; 0
    272a:	ec 5a       	subi	r30, 0xAC	; 172
    272c:	fa 4f       	sbci	r31, 0xFA	; 250
    272e:	80 81       	ld	r24, Z
    2730:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2734:	90 91 53 05 	lds	r25, 0x0553	; 0x800553 <twi_txBufferIndex>
    2738:	80 91 52 05 	lds	r24, 0x0552	; 0x800552 <twi_txBufferLength>
    273c:	29 c0       	rjmp	.+82     	; 0x2790 <__vector_26+0x1d2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    273e:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <twi_slarw>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2742:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2746:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2748:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    274c:	61 cf       	rjmp	.-318    	; 0x2610 <__vector_26+0x52>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    274e:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <twi_masterBufferIndex>
    2752:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <twi_masterBufferLength>
    2756:	98 17       	cp	r25, r24
    2758:	58 f5       	brcc	.+86     	; 0x27b0 <__vector_26+0x1f2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    275a:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <twi_masterBufferIndex>
    275e:	81 e0       	ldi	r24, 0x01	; 1
    2760:	8e 0f       	add	r24, r30
    2762:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <twi_masterBufferIndex>
    2766:	f0 e0       	ldi	r31, 0x00	; 0
    2768:	ea 58       	subi	r30, 0x8A	; 138
    276a:	fa 4f       	sbci	r31, 0xFA	; 250
    276c:	80 81       	ld	r24, Z
    276e:	e9 cf       	rjmp	.-46     	; 0x2742 <__vector_26+0x184>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2770:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <twi_masterBufferIndex>
    2774:	81 e0       	ldi	r24, 0x01	; 1
    2776:	8e 0f       	add	r24, r30
    2778:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <twi_masterBufferIndex>
    277c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2780:	f0 e0       	ldi	r31, 0x00	; 0
    2782:	ea 58       	subi	r30, 0x8A	; 138
    2784:	fa 4f       	sbci	r31, 0xFA	; 250
    2786:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2788:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <twi_masterBufferIndex>
    278c:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <twi_masterBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2790:	98 17       	cp	r25, r24
    2792:	c8 f2       	brcs	.-78     	; 0x2746 <__vector_26+0x188>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2794:	85 e8       	ldi	r24, 0x85	; 133
    2796:	d8 cf       	rjmp	.-80     	; 0x2748 <__vector_26+0x18a>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2798:	e0 91 75 05 	lds	r30, 0x0575	; 0x800575 <twi_masterBufferIndex>
    279c:	81 e0       	ldi	r24, 0x01	; 1
    279e:	8e 0f       	add	r24, r30
    27a0:	80 93 75 05 	sts	0x0575, r24	; 0x800575 <twi_masterBufferIndex>
    27a4:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    27a8:	f0 e0       	ldi	r31, 0x00	; 0
    27aa:	ea 58       	subi	r30, 0x8A	; 138
    27ac:	fa 4f       	sbci	r31, 0xFA	; 250
    27ae:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    27b0:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <twi_sendStop>
    27b4:	81 11       	cpse	r24, r1
    27b6:	5c cf       	rjmp	.-328    	; 0x2670 <__vector_26+0xb2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    27b8:	81 e0       	ldi	r24, 0x01	; 1
    27ba:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <twi_inRepStart>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    27be:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    27c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    27c4:	10 92 9d 05 	sts	0x059D, r1	; 0x80059d <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:552
      break;
    27c8:	23 cf       	rjmp	.-442    	; 0x2610 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    27ca:	0e 94 d9 12 	call	0x25b2	; 0x25b2 <twi_releaseBus>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    27ce:	80 91 31 05 	lds	r24, 0x0531	; 0x800531 <twi_rxBufferIndex>
    27d2:	80 32       	cpi	r24, 0x20	; 32
    27d4:	30 f4       	brcc	.+12     	; 0x27e2 <__vector_26+0x224>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    27d6:	e0 91 31 05 	lds	r30, 0x0531	; 0x800531 <twi_rxBufferIndex>
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	ee 5c       	subi	r30, 0xCE	; 206
    27de:	fa 4f       	sbci	r31, 0xFA	; 250
    27e0:	10 82       	st	Z, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    27e2:	60 91 31 05 	lds	r22, 0x0531	; 0x800531 <twi_rxBufferIndex>
    27e6:	70 e0       	ldi	r23, 0x00	; 0
    27e8:	e0 91 96 05 	lds	r30, 0x0596	; 0x800596 <twi_onSlaveReceive>
    27ec:	f0 91 97 05 	lds	r31, 0x0597	; 0x800597 <twi_onSlaveReceive+0x1>
    27f0:	82 e3       	ldi	r24, 0x32	; 50
    27f2:	95 e0       	ldi	r25, 0x05	; 5
    27f4:	09 95       	icall
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    27f6:	10 92 31 05 	sts	0x0531, r1	; 0x800531 <twi_rxBufferIndex>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:510
      break;
    27fa:	0a cf       	rjmp	.-492    	; 0x2610 <__vector_26+0x52>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    27fc:	85 ec       	ldi	r24, 0xC5	; 197
    27fe:	e0 cf       	rjmp	.-64     	; 0x27c0 <__vector_26+0x202>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2800:	10 92 30 05 	sts	0x0530, r1	; 0x800530 <twi_error>
    2804:	35 cf       	rjmp	.-406    	; 0x2670 <__vector_26+0xb2>

00002806 <yield>:
__empty():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    2806:	08 95       	ret

00002808 <__vector_18>:
__vector_18():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227
  cli();
  m = timer0_millis;
  SREG = oldSREG;

  return m;
}
    2808:	1f 92       	push	r1
    280a:	0f 92       	push	r0
    280c:	0f b6       	in	r0, 0x3f	; 63
    280e:	0f 92       	push	r0
    2810:	11 24       	eor	r1, r1
    2812:	2f 93       	push	r18
    2814:	3f 93       	push	r19
    2816:	8f 93       	push	r24
    2818:	9f 93       	push	r25
    281a:	af 93       	push	r26
    281c:	bf 93       	push	r27
    281e:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <timer0_millis>
    2822:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <timer0_millis+0x1>
    2826:	a0 91 a5 05 	lds	r26, 0x05A5	; 0x8005a5 <timer0_millis+0x2>
    282a:	b0 91 a6 05 	lds	r27, 0x05A6	; 0x8005a6 <timer0_millis+0x3>
    282e:	30 91 a2 05 	lds	r19, 0x05A2	; 0x8005a2 <timer0_fract>
    2832:	23 e0       	ldi	r18, 0x03	; 3
    2834:	23 0f       	add	r18, r19
    2836:	2d 37       	cpi	r18, 0x7D	; 125
    2838:	68 f1       	brcs	.+90     	; 0x2894 <__vector_18+0x8c>
    283a:	26 e8       	ldi	r18, 0x86	; 134
    283c:	23 0f       	add	r18, r19
    283e:	02 96       	adiw	r24, 0x02	; 2
    2840:	a1 1d       	adc	r26, r1
    2842:	b1 1d       	adc	r27, r1
    2844:	20 93 a2 05 	sts	0x05A2, r18	; 0x8005a2 <timer0_fract>
    2848:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <timer0_millis>
    284c:	90 93 a4 05 	sts	0x05A4, r25	; 0x8005a4 <timer0_millis+0x1>
    2850:	a0 93 a5 05 	sts	0x05A5, r26	; 0x8005a5 <timer0_millis+0x2>
    2854:	b0 93 a6 05 	sts	0x05A6, r27	; 0x8005a6 <timer0_millis+0x3>
    2858:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <timer0_overflow_count>
    285c:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <timer0_overflow_count+0x1>
    2860:	a0 91 a0 05 	lds	r26, 0x05A0	; 0x8005a0 <timer0_overflow_count+0x2>
    2864:	b0 91 a1 05 	lds	r27, 0x05A1	; 0x8005a1 <timer0_overflow_count+0x3>
    2868:	01 96       	adiw	r24, 0x01	; 1
    286a:	a1 1d       	adc	r26, r1
    286c:	b1 1d       	adc	r27, r1
    286e:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <timer0_overflow_count>
    2872:	90 93 9f 05 	sts	0x059F, r25	; 0x80059f <timer0_overflow_count+0x1>
    2876:	a0 93 a0 05 	sts	0x05A0, r26	; 0x8005a0 <timer0_overflow_count+0x2>
    287a:	b0 93 a1 05 	sts	0x05A1, r27	; 0x8005a1 <timer0_overflow_count+0x3>
    287e:	bf 91       	pop	r27
    2880:	af 91       	pop	r26
    2882:	9f 91       	pop	r25
    2884:	8f 91       	pop	r24
    2886:	3f 91       	pop	r19
    2888:	2f 91       	pop	r18
    288a:	0f 90       	pop	r0
    288c:	0f be       	out	0x3f, r0	; 63
    288e:	0f 90       	pop	r0
    2890:	1f 90       	pop	r1
    2892:	18 95       	reti
    2894:	01 96       	adiw	r24, 0x01	; 1
    2896:	a1 1d       	adc	r26, r1
    2898:	b1 1d       	adc	r27, r1
    289a:	d4 cf       	rjmp	.-88     	; 0x2844 <__vector_18+0x3c>

0000289c <micros>:
micros():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    289c:	3f b7       	in	r19, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    289e:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    28a0:	80 91 9e 05 	lds	r24, 0x059E	; 0x80059e <timer0_overflow_count>
    28a4:	90 91 9f 05 	lds	r25, 0x059F	; 0x80059f <timer0_overflow_count+0x1>
    28a8:	a0 91 a0 05 	lds	r26, 0x05A0	; 0x8005a0 <timer0_overflow_count+0x2>
    28ac:	b0 91 a1 05 	lds	r27, 0x05A1	; 0x8005a1 <timer0_overflow_count+0x3>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    28b0:	26 b5       	in	r18, 0x26	; 38
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    28b2:	a8 9b       	sbis	0x15, 0	; 21
    28b4:	05 c0       	rjmp	.+10     	; 0x28c0 <micros+0x24>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    28b6:	2f 3f       	cpi	r18, 0xFF	; 255
    28b8:	19 f0       	breq	.+6      	; 0x28c0 <micros+0x24>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    28ba:	01 96       	adiw	r24, 0x01	; 1
    28bc:	a1 1d       	adc	r26, r1
    28be:	b1 1d       	adc	r27, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    28c0:	3f bf       	out	0x3f, r19	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    28c2:	ba 2f       	mov	r27, r26
    28c4:	a9 2f       	mov	r26, r25
    28c6:	98 2f       	mov	r25, r24
    28c8:	88 27       	eor	r24, r24
    28ca:	bc 01       	movw	r22, r24
    28cc:	cd 01       	movw	r24, r26
    28ce:	62 0f       	add	r22, r18
    28d0:	71 1d       	adc	r23, r1
    28d2:	81 1d       	adc	r24, r1
    28d4:	91 1d       	adc	r25, r1
    28d6:	42 e0       	ldi	r20, 0x02	; 2
    28d8:	66 0f       	add	r22, r22
    28da:	77 1f       	adc	r23, r23
    28dc:	88 1f       	adc	r24, r24
    28de:	99 1f       	adc	r25, r25
    28e0:	4a 95       	dec	r20
    28e2:	d1 f7       	brne	.-12     	; 0x28d8 <micros+0x3c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    28e4:	08 95       	ret

000028e6 <delay>:
delay():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    28e6:	8f 92       	push	r8
    28e8:	9f 92       	push	r9
    28ea:	af 92       	push	r10
    28ec:	bf 92       	push	r11
    28ee:	cf 92       	push	r12
    28f0:	df 92       	push	r13
    28f2:	ef 92       	push	r14
    28f4:	ff 92       	push	r15
    28f6:	6b 01       	movw	r12, r22
    28f8:	7c 01       	movw	r14, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    28fa:	0e 94 4e 14 	call	0x289c	; 0x289c <micros>
    28fe:	4b 01       	movw	r8, r22
    2900:	5c 01       	movw	r10, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    2902:	c1 14       	cp	r12, r1
    2904:	d1 04       	cpc	r13, r1
    2906:	e1 04       	cpc	r14, r1
    2908:	f1 04       	cpc	r15, r1
    290a:	e9 f0       	breq	.+58     	; 0x2946 <delay+0x60>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    290c:	0e 94 03 14 	call	0x2806	; 0x2806 <yield>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    2910:	0e 94 4e 14 	call	0x289c	; 0x289c <micros>
    2914:	68 19       	sub	r22, r8
    2916:	79 09       	sbc	r23, r9
    2918:	8a 09       	sbc	r24, r10
    291a:	9b 09       	sbc	r25, r11
    291c:	68 3e       	cpi	r22, 0xE8	; 232
    291e:	73 40       	sbci	r23, 0x03	; 3
    2920:	81 05       	cpc	r24, r1
    2922:	91 05       	cpc	r25, r1
    2924:	70 f3       	brcs	.-36     	; 0x2902 <delay+0x1c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    2926:	21 e0       	ldi	r18, 0x01	; 1
    2928:	c2 1a       	sub	r12, r18
    292a:	d1 08       	sbc	r13, r1
    292c:	e1 08       	sbc	r14, r1
    292e:	f1 08       	sbc	r15, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    2930:	88 ee       	ldi	r24, 0xE8	; 232
    2932:	88 0e       	add	r8, r24
    2934:	83 e0       	ldi	r24, 0x03	; 3
    2936:	98 1e       	adc	r9, r24
    2938:	a1 1c       	adc	r10, r1
    293a:	b1 1c       	adc	r11, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    293c:	c1 14       	cp	r12, r1
    293e:	d1 04       	cpc	r13, r1
    2940:	e1 04       	cpc	r14, r1
    2942:	f1 04       	cpc	r15, r1
    2944:	29 f7       	brne	.-54     	; 0x2910 <delay+0x2a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    2946:	ff 90       	pop	r15
    2948:	ef 90       	pop	r14
    294a:	df 90       	pop	r13
    294c:	cf 90       	pop	r12
    294e:	bf 90       	pop	r11
    2950:	af 90       	pop	r10
    2952:	9f 90       	pop	r9
    2954:	8f 90       	pop	r8
    2956:	08 95       	ret

00002958 <delayMicroseconds>:
delayMicroseconds():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    2958:	82 30       	cpi	r24, 0x02	; 2
    295a:	91 05       	cpc	r25, r1
    295c:	38 f0       	brcs	.+14     	; 0x296c <delayMicroseconds+0x14>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    295e:	88 0f       	add	r24, r24
    2960:	99 1f       	adc	r25, r25
    2962:	88 0f       	add	r24, r24
    2964:	99 1f       	adc	r25, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    2966:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    2968:	01 97       	sbiw	r24, 0x01	; 1
    296a:	f1 f7       	brne	.-4      	; 0x2968 <delayMicroseconds+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    296c:	08 95       	ret

0000296e <init>:
init():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    296e:	78 94       	sei
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    2970:	84 b5       	in	r24, 0x24	; 36
    2972:	83 60       	ori	r24, 0x03	; 3
    2974:	84 bd       	out	0x24, r24	; 36
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    2976:	85 b5       	in	r24, 0x25	; 37
    2978:	83 60       	ori	r24, 0x03	; 3
    297a:	85 bd       	out	0x25, r24	; 37
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    297c:	ee e6       	ldi	r30, 0x6E	; 110
    297e:	f0 e0       	ldi	r31, 0x00	; 0
    2980:	80 81       	ld	r24, Z
    2982:	81 60       	ori	r24, 0x01	; 1
    2984:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    2986:	e1 e8       	ldi	r30, 0x81	; 129
    2988:	f0 e0       	ldi	r31, 0x00	; 0
    298a:	82 e0       	ldi	r24, 0x02	; 2
    298c:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    298e:	80 81       	ld	r24, Z
    2990:	81 60       	ori	r24, 0x01	; 1
    2992:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    2994:	e0 e8       	ldi	r30, 0x80	; 128
    2996:	f0 e0       	ldi	r31, 0x00	; 0
    2998:	80 81       	ld	r24, Z
    299a:	81 60       	ori	r24, 0x01	; 1
    299c:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    299e:	e1 eb       	ldi	r30, 0xB1	; 177
    29a0:	f0 e0       	ldi	r31, 0x00	; 0
    29a2:	80 81       	ld	r24, Z
    29a4:	84 60       	ori	r24, 0x04	; 4
    29a6:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    29a8:	e0 eb       	ldi	r30, 0xB0	; 176
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	80 81       	ld	r24, Z
    29ae:	81 60       	ori	r24, 0x01	; 1
    29b0:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    29b2:	e1 e9       	ldi	r30, 0x91	; 145
    29b4:	f0 e0       	ldi	r31, 0x00	; 0
    29b6:	80 81       	ld	r24, Z
    29b8:	83 60       	ori	r24, 0x03	; 3
    29ba:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    29bc:	e0 e9       	ldi	r30, 0x90	; 144
    29be:	f0 e0       	ldi	r31, 0x00	; 0
    29c0:	80 81       	ld	r24, Z
    29c2:	81 60       	ori	r24, 0x01	; 1
    29c4:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    29c6:	87 e8       	ldi	r24, 0x87	; 135
    29c8:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    29cc:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    29d0:	08 95       	ret

000029d2 <turnOffPWM>:
turnOffPWM():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    29d2:	82 50       	subi	r24, 0x02	; 2
    29d4:	8a 30       	cpi	r24, 0x0A	; 10
    29d6:	88 f5       	brcc	.+98     	; 0x2a3a <turnOffPWM+0x68>
    29d8:	e8 2f       	mov	r30, r24
    29da:	f0 e0       	ldi	r31, 0x00	; 0
    29dc:	ee 50       	subi	r30, 0x0E	; 14
    29de:	fb 4e       	sbci	r31, 0xEB	; 235
    29e0:	0c 94 ab 1c 	jmp	0x3956	; 0x3956 <__tablejump2__>
    29e4:	1a 15       	cp	r17, r10
    29e6:	1e 15       	cp	r17, r14
    29e8:	fc 14       	cp	r15, r12
    29ea:	02 15       	cp	r16, r2
    29ec:	1d 15       	cp	r17, r13
    29ee:	1d 15       	cp	r17, r13
    29f0:	06 15       	cp	r16, r6
    29f2:	0c 15       	cp	r16, r12
    29f4:	10 15       	cp	r17, r0
    29f6:	16 15       	cp	r17, r6
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    29f8:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    29fc:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    29fe:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    2a02:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2a04:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2a08:	8f 7d       	andi	r24, 0xDF	; 223
    2a0a:	f9 cf       	rjmp	.-14     	; 0x29fe <turnOffPWM+0x2c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    2a0c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2a10:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2a12:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    2a16:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2a18:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2a1c:	8f 7d       	andi	r24, 0xDF	; 223
    2a1e:	f9 cf       	rjmp	.-14     	; 0x2a12 <turnOffPWM+0x40>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    2a20:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2a24:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    2a26:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    2a2a:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    2a2c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2a30:	8f 7d       	andi	r24, 0xDF	; 223
    2a32:	f9 cf       	rjmp	.-14     	; 0x2a26 <turnOffPWM+0x54>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    2a34:	84 b5       	in	r24, 0x24	; 36
    2a36:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2a38:	84 bd       	out	0x24, r24	; 36
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    2a3a:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2a3c:	84 b5       	in	r24, 0x24	; 36
    2a3e:	8f 7d       	andi	r24, 0xDF	; 223
    2a40:	fb cf       	rjmp	.-10     	; 0x2a38 <turnOffPWM+0x66>

00002a42 <pinMode>:
pinMode():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    2a46:	90 e0       	ldi	r25, 0x00	; 0
    2a48:	fc 01       	movw	r30, r24
    2a4a:	ee 5c       	subi	r30, 0xCE	; 206
    2a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4e:	24 91       	lpm	r18, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    2a50:	8e 5a       	subi	r24, 0xAE	; 174
    2a52:	9e 4f       	sbci	r25, 0xFE	; 254
    2a54:	fc 01       	movw	r30, r24
    2a56:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    2a58:	88 23       	and	r24, r24
    2a5a:	c9 f0       	breq	.+50     	; 0x2a8e <pinMode+0x4c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    2a5c:	90 e0       	ldi	r25, 0x00	; 0
    2a5e:	88 0f       	add	r24, r24
    2a60:	99 1f       	adc	r25, r25
    2a62:	fc 01       	movw	r30, r24
    2a64:	ea 57       	subi	r30, 0x7A	; 122
    2a66:	fe 4f       	sbci	r31, 0xFE	; 254
    2a68:	a5 91       	lpm	r26, Z+
    2a6a:	b4 91       	lpm	r27, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    2a6c:	fc 01       	movw	r30, r24
    2a6e:	e4 58       	subi	r30, 0x84	; 132
    2a70:	fe 4f       	sbci	r31, 0xFE	; 254
    2a72:	c5 91       	lpm	r28, Z+
    2a74:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    2a76:	61 11       	cpse	r22, r1
    2a78:	0d c0       	rjmp	.+26     	; 0x2a94 <pinMode+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    2a7a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    2a7c:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    2a7e:	8c 91       	ld	r24, X
    2a80:	20 95       	com	r18
    2a82:	82 23       	and	r24, r18
    2a84:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    2a86:	88 81       	ld	r24, Y
    2a88:	28 23       	and	r18, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    2a8a:	28 83       	st	Y, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    2a8c:	9f bf       	out	0x3f, r25	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    2a94:	62 30       	cpi	r22, 0x02	; 2
    2a96:	51 f4       	brne	.+20     	; 0x2aac <pinMode+0x6a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    2a98:	9f b7       	in	r25, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    2a9a:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    2a9c:	3c 91       	ld	r19, X
    2a9e:	82 2f       	mov	r24, r18
    2aa0:	80 95       	com	r24
    2aa2:	83 23       	and	r24, r19
    2aa4:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    2aa6:	e8 81       	ld	r30, Y
    2aa8:	2e 2b       	or	r18, r30
    2aaa:	ef cf       	rjmp	.-34     	; 0x2a8a <pinMode+0x48>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    2aac:	8f b7       	in	r24, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    2aae:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    2ab0:	ec 91       	ld	r30, X
    2ab2:	2e 2b       	or	r18, r30
    2ab4:	2c 93       	st	X, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    2ab6:	8f bf       	out	0x3f, r24	; 63
    2ab8:	ea cf       	rjmp	.-44     	; 0x2a8e <pinMode+0x4c>

00002aba <digitalWrite>:
digitalWrite():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    2aba:	1f 93       	push	r17
    2abc:	cf 93       	push	r28
    2abe:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    2ac0:	28 2f       	mov	r18, r24
    2ac2:	30 e0       	ldi	r19, 0x00	; 0
    2ac4:	f9 01       	movw	r30, r18
    2ac6:	ee 5e       	subi	r30, 0xEE	; 238
    2ac8:	fe 4f       	sbci	r31, 0xFE	; 254
    2aca:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    2acc:	f9 01       	movw	r30, r18
    2ace:	ee 5c       	subi	r30, 0xCE	; 206
    2ad0:	fe 4f       	sbci	r31, 0xFE	; 254
    2ad2:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    2ad4:	f9 01       	movw	r30, r18
    2ad6:	ee 5a       	subi	r30, 0xAE	; 174
    2ad8:	fe 4f       	sbci	r31, 0xFE	; 254
    2ada:	c4 91       	lpm	r28, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    2adc:	cc 23       	and	r28, r28
    2ade:	a9 f0       	breq	.+42     	; 0x2b0a <digitalWrite+0x50>
    2ae0:	16 2f       	mov	r17, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2ae2:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    2ae4:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <turnOffPWM>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    2ae8:	ec 2f       	mov	r30, r28
    2aea:	f0 e0       	ldi	r31, 0x00	; 0
    2aec:	ee 0f       	add	r30, r30
    2aee:	ff 1f       	adc	r31, r31
    2af0:	e4 58       	subi	r30, 0x84	; 132
    2af2:	fe 4f       	sbci	r31, 0xFE	; 254
    2af4:	a5 91       	lpm	r26, Z+
    2af6:	b4 91       	lpm	r27, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    2af8:	8f b7       	in	r24, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    2afa:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    2afc:	ec 91       	ld	r30, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    2afe:	11 11       	cpse	r17, r1
    2b00:	08 c0       	rjmp	.+16     	; 0x2b12 <digitalWrite+0x58>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    2b02:	d0 95       	com	r29
    2b04:	de 23       	and	r29, r30
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    2b06:	dc 93       	st	X, r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    2b08:	8f bf       	out	0x3f, r24	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    2b12:	de 2b       	or	r29, r30
    2b14:	f8 cf       	rjmp	.-16     	; 0x2b06 <digitalWrite+0x4c>

00002b16 <digitalRead>:
digitalRead():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    2b16:	cf 93       	push	r28
    2b18:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    2b1a:	28 2f       	mov	r18, r24
    2b1c:	30 e0       	ldi	r19, 0x00	; 0
    2b1e:	f9 01       	movw	r30, r18
    2b20:	ee 5e       	subi	r30, 0xEE	; 238
    2b22:	fe 4f       	sbci	r31, 0xFE	; 254
    2b24:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    2b26:	f9 01       	movw	r30, r18
    2b28:	ee 5c       	subi	r30, 0xCE	; 206
    2b2a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b2c:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    2b2e:	f9 01       	movw	r30, r18
    2b30:	ee 5a       	subi	r30, 0xAE	; 174
    2b32:	fe 4f       	sbci	r31, 0xFE	; 254
    2b34:	c4 91       	lpm	r28, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    2b36:	cc 23       	and	r28, r28
    2b38:	a1 f0       	breq	.+40     	; 0x2b62 <digitalRead+0x4c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2b3a:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    2b3c:	0e 94 e9 14 	call	0x29d2	; 0x29d2 <turnOffPWM>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    2b40:	ec 2f       	mov	r30, r28
    2b42:	f0 e0       	ldi	r31, 0x00	; 0
    2b44:	ee 0f       	add	r30, r30
    2b46:	ff 1f       	adc	r31, r31
    2b48:	ee 58       	subi	r30, 0x8E	; 142
    2b4a:	fe 4f       	sbci	r31, 0xFE	; 254
    2b4c:	a5 91       	lpm	r26, Z+
    2b4e:	b4 91       	lpm	r27, Z
    2b50:	ec 91       	ld	r30, X
    2b52:	ed 23       	and	r30, r29
    2b54:	81 e0       	ldi	r24, 0x01	; 1
    2b56:	90 e0       	ldi	r25, 0x00	; 0
    2b58:	09 f4       	brne	.+2      	; 0x2b5c <digitalRead+0x46>
    2b5a:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    2b5c:	df 91       	pop	r29
    2b5e:	cf 91       	pop	r28
    2b60:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    2b62:	80 e0       	ldi	r24, 0x00	; 0
    2b64:	90 e0       	ldi	r25, 0x00	; 0
    2b66:	fa cf       	rjmp	.-12     	; 0x2b5c <digitalRead+0x46>

00002b68 <shiftOut>:
shiftOut():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:41
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    2b68:	bf 92       	push	r11
    2b6a:	cf 92       	push	r12
    2b6c:	df 92       	push	r13
    2b6e:	ef 92       	push	r14
    2b70:	ff 92       	push	r15
    2b72:	0f 93       	push	r16
    2b74:	1f 93       	push	r17
    2b76:	cf 93       	push	r28
    2b78:	df 93       	push	r29
    2b7a:	c8 2e       	mov	r12, r24
    2b7c:	d6 2e       	mov	r13, r22
    2b7e:	b4 2e       	mov	r11, r20
    2b80:	d0 e0       	ldi	r29, 0x00	; 0
    2b82:	c0 e0       	ldi	r28, 0x00	; 0
    2b84:	02 2f       	mov	r16, r18
    2b86:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:48

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    2b88:	87 e0       	ldi	r24, 0x07	; 7
    2b8a:	e8 2e       	mov	r14, r24
    2b8c:	f1 2c       	mov	r15, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:46
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    2b8e:	b8 01       	movw	r22, r16
    2b90:	8c 2f       	mov	r24, r28
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:45
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
    2b92:	bb 20       	and	r11, r11
    2b94:	19 f0       	breq	.+6      	; 0x2b9c <shiftOut+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:48
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    2b96:	c7 01       	movw	r24, r14
    2b98:	8c 1b       	sub	r24, r28
    2b9a:	9d 0b       	sbc	r25, r29
    2b9c:	02 c0       	rjmp	.+4      	; 0x2ba2 <shiftOut+0x3a>
    2b9e:	75 95       	asr	r23
    2ba0:	67 95       	ror	r22
    2ba2:	8a 95       	dec	r24
    2ba4:	e2 f7       	brpl	.-8      	; 0x2b9e <shiftOut+0x36>
    2ba6:	61 70       	andi	r22, 0x01	; 1
    2ba8:	8c 2d       	mov	r24, r12
    2baa:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:50
      
    digitalWrite(clockPin, HIGH);
    2bae:	61 e0       	ldi	r22, 0x01	; 1
    2bb0:	8d 2d       	mov	r24, r13
    2bb2:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:51
    digitalWrite(clockPin, LOW);    
    2bb6:	60 e0       	ldi	r22, 0x00	; 0
    2bb8:	8d 2d       	mov	r24, r13
    2bba:	0e 94 5d 15 	call	0x2aba	; 0x2aba <digitalWrite>
    2bbe:	21 96       	adiw	r28, 0x01	; 1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:44

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    2bc0:	c8 30       	cpi	r28, 0x08	; 8
    2bc2:	d1 05       	cpc	r29, r1
    2bc4:	21 f7       	brne	.-56     	; 0x2b8e <shiftOut+0x26>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:53
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
      
    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);    
  }
}
    2bc6:	df 91       	pop	r29
    2bc8:	cf 91       	pop	r28
    2bca:	1f 91       	pop	r17
    2bcc:	0f 91       	pop	r16
    2bce:	ff 90       	pop	r15
    2bd0:	ef 90       	pop	r14
    2bd2:	df 90       	pop	r13
    2bd4:	cf 90       	pop	r12
    2bd6:	bf 90       	pop	r11
    2bd8:	08 95       	ret

00002bda <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2bda:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2bdc:	91 8d       	ldd	r25, Z+25	; 0x19
    2bde:	22 8d       	ldd	r18, Z+26	; 0x1a
    2be0:	89 2f       	mov	r24, r25
    2be2:	90 e0       	ldi	r25, 0x00	; 0
    2be4:	80 5c       	subi	r24, 0xC0	; 192
    2be6:	9f 4f       	sbci	r25, 0xFF	; 255
    2be8:	82 1b       	sub	r24, r18
    2bea:	91 09       	sbc	r25, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    2bec:	8f 73       	andi	r24, 0x3F	; 63
    2bee:	99 27       	eor	r25, r25
    2bf0:	08 95       	ret

00002bf2 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    2bf2:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    2bf4:	91 8d       	ldd	r25, Z+25	; 0x19
    2bf6:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bf8:	98 17       	cp	r25, r24
    2bfa:	31 f0       	breq	.+12     	; 0x2c08 <HardwareSerial::peek()+0x16>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2bfc:	82 8d       	ldd	r24, Z+26	; 0x1a
    2bfe:	e8 0f       	add	r30, r24
    2c00:	f1 1d       	adc	r31, r1
    2c02:	85 8d       	ldd	r24, Z+29	; 0x1d
    2c04:	90 e0       	ldi	r25, 0x00	; 0
    2c06:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2c08:	8f ef       	ldi	r24, 0xFF	; 255
    2c0a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2c0c:	08 95       	ret

00002c0e <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    2c0e:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2c10:	91 8d       	ldd	r25, Z+25	; 0x19
    2c12:	82 8d       	ldd	r24, Z+26	; 0x1a
    2c14:	98 17       	cp	r25, r24
    2c16:	61 f0       	breq	.+24     	; 0x2c30 <HardwareSerial::read()+0x22>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2c18:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c1a:	ae 0f       	add	r26, r30
    2c1c:	bf 2f       	mov	r27, r31
    2c1e:	b1 1d       	adc	r27, r1
    2c20:	5d 96       	adiw	r26, 0x1d	; 29
    2c22:	8c 91       	ld	r24, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2c24:	92 8d       	ldd	r25, Z+26	; 0x1a
    2c26:	9f 5f       	subi	r25, 0xFF	; 255
    2c28:	9f 73       	andi	r25, 0x3F	; 63
    2c2a:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    2c2c:	90 e0       	ldi	r25, 0x00	; 0
    2c2e:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2c30:	8f ef       	ldi	r24, 0xFF	; 255
    2c32:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2c34:	08 95       	ret

00002c36 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    2c36:	fc 01       	movw	r30, r24
    2c38:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    2c3a:	44 8d       	ldd	r20, Z+28	; 0x1c
    2c3c:	25 2f       	mov	r18, r21
    2c3e:	30 e0       	ldi	r19, 0x00	; 0
    2c40:	84 2f       	mov	r24, r20
    2c42:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2c44:	82 1b       	sub	r24, r18
    2c46:	93 0b       	sbc	r25, r19
    2c48:	54 17       	cp	r21, r20
    2c4a:	10 f0       	brcs	.+4      	; 0x2c50 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    2c4c:	cf 96       	adiw	r24, 0x3f	; 63
    2c4e:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    2c50:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    2c52:	08 95       	ret

00002c54 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2c54:	85 e8       	ldi	r24, 0x85	; 133
    2c56:	97 e1       	ldi	r25, 0x17	; 23
    2c58:	89 2b       	or	r24, r25
    2c5a:	49 f0       	breq	.+18     	; 0x2c6e <serialEventRun()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    2c5c:	80 e0       	ldi	r24, 0x00	; 0
    2c5e:	90 e0       	ldi	r25, 0x00	; 0
    2c60:	89 2b       	or	r24, r25
    2c62:	29 f0       	breq	.+10     	; 0x2c6e <serialEventRun()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    2c64:	0e 94 85 17 	call	0x2f0a	; 0x2f0a <Serial0_available()>
    2c68:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    2c6a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    2c6e:	80 e0       	ldi	r24, 0x00	; 0
    2c70:	90 e0       	ldi	r25, 0x00	; 0
    2c72:	89 2b       	or	r24, r25
    2c74:	49 f0       	breq	.+18     	; 0x2c88 <serialEventRun()+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    2c76:	80 e0       	ldi	r24, 0x00	; 0
    2c78:	90 e0       	ldi	r25, 0x00	; 0
    2c7a:	89 2b       	or	r24, r25
    2c7c:	29 f0       	breq	.+10     	; 0x2c88 <serialEventRun()+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    2c7e:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2c82:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    2c84:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    2c88:	08 95       	ret

00002c8a <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2c8a:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2c8c:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2c8e:	a8 0f       	add	r26, r24
    2c90:	b9 2f       	mov	r27, r25
    2c92:	b1 1d       	adc	r27, r1
    2c94:	a3 5a       	subi	r26, 0xA3	; 163
    2c96:	bf 4f       	sbci	r27, 0xFF	; 255
    2c98:	2c 91       	ld	r18, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2c9a:	84 8d       	ldd	r24, Z+28	; 0x1c
    2c9c:	90 e0       	ldi	r25, 0x00	; 0
    2c9e:	01 96       	adiw	r24, 0x01	; 1
    2ca0:	8f 73       	andi	r24, 0x3F	; 63
    2ca2:	99 27       	eor	r25, r25
    2ca4:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    2ca6:	a6 89       	ldd	r26, Z+22	; 0x16
    2ca8:	b7 89       	ldd	r27, Z+23	; 0x17
    2caa:	2c 93       	st	X, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    2cac:	a0 89       	ldd	r26, Z+16	; 0x10
    2cae:	b1 89       	ldd	r27, Z+17	; 0x11
    2cb0:	8c 91       	ld	r24, X
    2cb2:	80 64       	ori	r24, 0x40	; 64
    2cb4:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    2cb6:	93 8d       	ldd	r25, Z+27	; 0x1b
    2cb8:	84 8d       	ldd	r24, Z+28	; 0x1c
    2cba:	98 13       	cpse	r25, r24
    2cbc:	06 c0       	rjmp	.+12     	; 0x2cca <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    2cbe:	02 88       	ldd	r0, Z+18	; 0x12
    2cc0:	f3 89       	ldd	r31, Z+19	; 0x13
    2cc2:	e0 2d       	mov	r30, r0
    2cc4:	80 81       	ld	r24, Z
    2cc6:	8f 7d       	andi	r24, 0xDF	; 223
    2cc8:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    2cca:	08 95       	ret

00002ccc <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2ccc:	cf 93       	push	r28
    2cce:	df 93       	push	r29
    2cd0:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2cd2:	88 8d       	ldd	r24, Y+24	; 0x18
    2cd4:	88 23       	and	r24, r24
    2cd6:	b9 f0       	breq	.+46     	; 0x2d06 <HardwareSerial::flush()+0x3a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2cd8:	aa 89       	ldd	r26, Y+18	; 0x12
    2cda:	bb 89       	ldd	r27, Y+19	; 0x13
    2cdc:	e8 89       	ldd	r30, Y+16	; 0x10
    2cde:	f9 89       	ldd	r31, Y+17	; 0x11
    2ce0:	8c 91       	ld	r24, X
    2ce2:	85 fd       	sbrc	r24, 5
    2ce4:	03 c0       	rjmp	.+6      	; 0x2cec <HardwareSerial::flush()+0x20>
    2ce6:	80 81       	ld	r24, Z
    2ce8:	86 fd       	sbrc	r24, 6
    2cea:	0d c0       	rjmp	.+26     	; 0x2d06 <HardwareSerial::flush()+0x3a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2cec:	0f b6       	in	r0, 0x3f	; 63
    2cee:	07 fc       	sbrc	r0, 7
    2cf0:	f7 cf       	rjmp	.-18     	; 0x2ce0 <HardwareSerial::flush()+0x14>
    2cf2:	8c 91       	ld	r24, X
    2cf4:	85 ff       	sbrs	r24, 5
    2cf6:	f2 cf       	rjmp	.-28     	; 0x2cdc <HardwareSerial::flush()+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    2cf8:	80 81       	ld	r24, Z
    2cfa:	85 ff       	sbrs	r24, 5
    2cfc:	ed cf       	rjmp	.-38     	; 0x2cd8 <HardwareSerial::flush()+0xc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    2cfe:	ce 01       	movw	r24, r28
    2d00:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <HardwareSerial::_tx_udr_empty_irq()>
    2d04:	e9 cf       	rjmp	.-46     	; 0x2cd8 <HardwareSerial::flush()+0xc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2d06:	df 91       	pop	r29
    2d08:	cf 91       	pop	r28
    2d0a:	08 95       	ret

00002d0c <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    2d0c:	ef 92       	push	r14
    2d0e:	ff 92       	push	r15
    2d10:	0f 93       	push	r16
    2d12:	1f 93       	push	r17
    2d14:	cf 93       	push	r28
    2d16:	df 93       	push	r29
    2d18:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    2d1a:	81 e0       	ldi	r24, 0x01	; 1
    2d1c:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2d1e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2d20:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d22:	98 13       	cpse	r25, r24
    2d24:	16 c0       	rjmp	.+44     	; 0x2d52 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    2d26:	e8 89       	ldd	r30, Y+16	; 0x10
    2d28:	f9 89       	ldd	r31, Y+17	; 0x11
    2d2a:	80 81       	ld	r24, Z
    2d2c:	85 ff       	sbrs	r24, 5
    2d2e:	11 c0       	rjmp	.+34     	; 0x2d52 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    2d30:	ee 89       	ldd	r30, Y+22	; 0x16
    2d32:	ff 89       	ldd	r31, Y+23	; 0x17
    2d34:	60 83       	st	Z, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    2d36:	e8 89       	ldd	r30, Y+16	; 0x10
    2d38:	f9 89       	ldd	r31, Y+17	; 0x11
    2d3a:	80 81       	ld	r24, Z
    2d3c:	80 64       	ori	r24, 0x40	; 64
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    2d3e:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    2d40:	81 e0       	ldi	r24, 0x01	; 1
    2d42:	90 e0       	ldi	r25, 0x00	; 0
    2d44:	df 91       	pop	r29
    2d46:	cf 91       	pop	r28
    2d48:	1f 91       	pop	r17
    2d4a:	0f 91       	pop	r16
    2d4c:	ff 90       	pop	r15
    2d4e:	ef 90       	pop	r14
    2d50:	08 95       	ret
    2d52:	f6 2e       	mov	r15, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2d54:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2d56:	10 e0       	ldi	r17, 0x00	; 0
    2d58:	0f 5f       	subi	r16, 0xFF	; 255
    2d5a:	1f 4f       	sbci	r17, 0xFF	; 255
    2d5c:	0f 73       	andi	r16, 0x3F	; 63
    2d5e:	11 27       	eor	r17, r17
    2d60:	e0 2e       	mov	r14, r16
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2d62:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2d64:	8e 11       	cpse	r24, r14
    2d66:	0c c0       	rjmp	.+24     	; 0x2d80 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    2d68:	0f b6       	in	r0, 0x3f	; 63
    2d6a:	07 fc       	sbrc	r0, 7
    2d6c:	fa cf       	rjmp	.-12     	; 0x2d62 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2d6e:	e8 89       	ldd	r30, Y+16	; 0x10
    2d70:	f9 89       	ldd	r31, Y+17	; 0x11
    2d72:	80 81       	ld	r24, Z
    2d74:	85 ff       	sbrs	r24, 5
    2d76:	f5 cf       	rjmp	.-22     	; 0x2d62 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    2d78:	ce 01       	movw	r24, r28
    2d7a:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <HardwareSerial::_tx_udr_empty_irq()>
    2d7e:	f1 cf       	rjmp	.-30     	; 0x2d62 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2d80:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2d82:	ec 0f       	add	r30, r28
    2d84:	fd 2f       	mov	r31, r29
    2d86:	f1 1d       	adc	r31, r1
    2d88:	e3 5a       	subi	r30, 0xA3	; 163
    2d8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2d8c:	f0 82       	st	Z, r15
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    2d8e:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    2d90:	ea 89       	ldd	r30, Y+18	; 0x12
    2d92:	fb 89       	ldd	r31, Y+19	; 0x13
    2d94:	80 81       	ld	r24, Z
    2d96:	80 62       	ori	r24, 0x20	; 32
    2d98:	d2 cf       	rjmp	.-92     	; 0x2d3e <HardwareSerial::write(unsigned char)+0x32>

00002d9a <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2d9a:	cf 92       	push	r12
    2d9c:	df 92       	push	r13
    2d9e:	ef 92       	push	r14
    2da0:	ff 92       	push	r15
    2da2:	1f 93       	push	r17
    2da4:	cf 93       	push	r28
    2da6:	df 93       	push	r29
    2da8:	ec 01       	movw	r28, r24
    2daa:	6a 01       	movw	r12, r20
    2dac:	7b 01       	movw	r14, r22
    2dae:	12 2f       	mov	r17, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2db0:	e8 89       	ldd	r30, Y+16	; 0x10
    2db2:	f9 89       	ldd	r31, Y+17	; 0x11
    2db4:	82 e0       	ldi	r24, 0x02	; 2
    2db6:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2db8:	c1 14       	cp	r12, r1
    2dba:	81 ee       	ldi	r24, 0xE1	; 225
    2dbc:	d8 06       	cpc	r13, r24
    2dbe:	e1 04       	cpc	r14, r1
    2dc0:	f1 04       	cpc	r15, r1
    2dc2:	a1 f0       	breq	.+40     	; 0x2dec <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2dc4:	60 e0       	ldi	r22, 0x00	; 0
    2dc6:	79 e0       	ldi	r23, 0x09	; 9
    2dc8:	8d e3       	ldi	r24, 0x3D	; 61
    2dca:	90 e0       	ldi	r25, 0x00	; 0
    2dcc:	a7 01       	movw	r20, r14
    2dce:	96 01       	movw	r18, r12
    2dd0:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
    2dd4:	21 50       	subi	r18, 0x01	; 1
    2dd6:	31 09       	sbc	r19, r1
    2dd8:	41 09       	sbc	r20, r1
    2dda:	51 09       	sbc	r21, r1
    2ddc:	56 95       	lsr	r21
    2dde:	47 95       	ror	r20
    2de0:	37 95       	ror	r19
    2de2:	27 95       	ror	r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2de4:	21 15       	cp	r18, r1
    2de6:	80 e1       	ldi	r24, 0x10	; 16
    2de8:	38 07       	cpc	r19, r24
    2dea:	98 f0       	brcs	.+38     	; 0x2e12 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    2dec:	e8 89       	ldd	r30, Y+16	; 0x10
    2dee:	f9 89       	ldd	r31, Y+17	; 0x11
    2df0:	10 82       	st	Z, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2df2:	60 e8       	ldi	r22, 0x80	; 128
    2df4:	74 e8       	ldi	r23, 0x84	; 132
    2df6:	8e e1       	ldi	r24, 0x1E	; 30
    2df8:	90 e0       	ldi	r25, 0x00	; 0
    2dfa:	a7 01       	movw	r20, r14
    2dfc:	96 01       	movw	r18, r12
    2dfe:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
    2e02:	21 50       	subi	r18, 0x01	; 1
    2e04:	31 09       	sbc	r19, r1
    2e06:	41 09       	sbc	r20, r1
    2e08:	51 09       	sbc	r21, r1
    2e0a:	56 95       	lsr	r21
    2e0c:	47 95       	ror	r20
    2e0e:	37 95       	ror	r19
    2e10:	27 95       	ror	r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2e12:	ec 85       	ldd	r30, Y+12	; 0x0c
    2e14:	fd 85       	ldd	r31, Y+13	; 0x0d
    2e16:	30 83       	st	Z, r19
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    2e18:	ee 85       	ldd	r30, Y+14	; 0x0e
    2e1a:	ff 85       	ldd	r31, Y+15	; 0x0f
    2e1c:	20 83       	st	Z, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    2e1e:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2e20:	ec 89       	ldd	r30, Y+20	; 0x14
    2e22:	fd 89       	ldd	r31, Y+21	; 0x15
    2e24:	10 83       	st	Z, r17
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    2e26:	ea 89       	ldd	r30, Y+18	; 0x12
    2e28:	fb 89       	ldd	r31, Y+19	; 0x13
    2e2a:	80 81       	ld	r24, Z
    2e2c:	88 69       	ori	r24, 0x98	; 152
    2e2e:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    2e30:	ea 89       	ldd	r30, Y+18	; 0x12
    2e32:	fb 89       	ldd	r31, Y+19	; 0x13
    2e34:	80 81       	ld	r24, Z
    2e36:	8f 7d       	andi	r24, 0xDF	; 223
    2e38:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    2e3a:	df 91       	pop	r29
    2e3c:	cf 91       	pop	r28
    2e3e:	1f 91       	pop	r17
    2e40:	ff 90       	pop	r15
    2e42:	ef 90       	pop	r14
    2e44:	df 90       	pop	r13
    2e46:	cf 90       	pop	r12
    2e48:	08 95       	ret

00002e4a <__vector_20>:
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2e4a:	1f 92       	push	r1
    2e4c:	0f 92       	push	r0
    2e4e:	0f b6       	in	r0, 0x3f	; 63
    2e50:	0f 92       	push	r0
    2e52:	11 24       	eor	r1, r1
    2e54:	0b b6       	in	r0, 0x3b	; 59
    2e56:	0f 92       	push	r0
    2e58:	2f 93       	push	r18
    2e5a:	8f 93       	push	r24
    2e5c:	9f 93       	push	r25
    2e5e:	ef 93       	push	r30
    2e60:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2e62:	e0 91 b7 05 	lds	r30, 0x05B7	; 0x8005b7 <Serial+0x10>
    2e66:	f0 91 b8 05 	lds	r31, 0x05B8	; 0x8005b8 <Serial+0x11>
    2e6a:	80 81       	ld	r24, Z
    2e6c:	e0 91 bd 05 	lds	r30, 0x05BD	; 0x8005bd <Serial+0x16>
    2e70:	f0 91 be 05 	lds	r31, 0x05BE	; 0x8005be <Serial+0x17>
    2e74:	82 fd       	sbrc	r24, 2
    2e76:	1d c0       	rjmp	.+58     	; 0x2eb2 <__vector_20+0x68>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2e78:	90 81       	ld	r25, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2e7a:	80 91 c0 05 	lds	r24, 0x05C0	; 0x8005c0 <Serial+0x19>
    2e7e:	8f 5f       	subi	r24, 0xFF	; 255
    2e80:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2e82:	20 91 c1 05 	lds	r18, 0x05C1	; 0x8005c1 <Serial+0x1a>
    2e86:	82 17       	cp	r24, r18
    2e88:	41 f0       	breq	.+16     	; 0x2e9a <__vector_20+0x50>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    2e8a:	e0 91 c0 05 	lds	r30, 0x05C0	; 0x8005c0 <Serial+0x19>
    2e8e:	f0 e0       	ldi	r31, 0x00	; 0
    2e90:	e9 55       	subi	r30, 0x59	; 89
    2e92:	fa 4f       	sbci	r31, 0xFA	; 250
    2e94:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    2e96:	80 93 c0 05 	sts	0x05C0, r24	; 0x8005c0 <Serial+0x19>
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    2e9a:	ff 91       	pop	r31
    2e9c:	ef 91       	pop	r30
    2e9e:	9f 91       	pop	r25
    2ea0:	8f 91       	pop	r24
    2ea2:	2f 91       	pop	r18
    2ea4:	0f 90       	pop	r0
    2ea6:	0b be       	out	0x3b, r0	; 59
    2ea8:	0f 90       	pop	r0
    2eaa:	0f be       	out	0x3f, r0	; 63
    2eac:	0f 90       	pop	r0
    2eae:	1f 90       	pop	r1
    2eb0:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2eb2:	80 81       	ld	r24, Z
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    2eb4:	f2 cf       	rjmp	.-28     	; 0x2e9a <__vector_20+0x50>

00002eb6 <__vector_21>:
__vector_21():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2eb6:	1f 92       	push	r1
    2eb8:	0f 92       	push	r0
    2eba:	0f b6       	in	r0, 0x3f	; 63
    2ebc:	0f 92       	push	r0
    2ebe:	11 24       	eor	r1, r1
    2ec0:	0b b6       	in	r0, 0x3b	; 59
    2ec2:	0f 92       	push	r0
    2ec4:	2f 93       	push	r18
    2ec6:	3f 93       	push	r19
    2ec8:	4f 93       	push	r20
    2eca:	5f 93       	push	r21
    2ecc:	6f 93       	push	r22
    2ece:	7f 93       	push	r23
    2ed0:	8f 93       	push	r24
    2ed2:	9f 93       	push	r25
    2ed4:	af 93       	push	r26
    2ed6:	bf 93       	push	r27
    2ed8:	ef 93       	push	r30
    2eda:	ff 93       	push	r31
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    2edc:	87 ea       	ldi	r24, 0xA7	; 167
    2ede:	95 e0       	ldi	r25, 0x05	; 5
    2ee0:	0e 94 45 16 	call	0x2c8a	; 0x2c8a <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    2ee4:	ff 91       	pop	r31
    2ee6:	ef 91       	pop	r30
    2ee8:	bf 91       	pop	r27
    2eea:	af 91       	pop	r26
    2eec:	9f 91       	pop	r25
    2eee:	8f 91       	pop	r24
    2ef0:	7f 91       	pop	r23
    2ef2:	6f 91       	pop	r22
    2ef4:	5f 91       	pop	r21
    2ef6:	4f 91       	pop	r20
    2ef8:	3f 91       	pop	r19
    2efa:	2f 91       	pop	r18
    2efc:	0f 90       	pop	r0
    2efe:	0b be       	out	0x3b, r0	; 59
    2f00:	0f 90       	pop	r0
    2f02:	0f be       	out	0x3f, r0	; 63
    2f04:	0f 90       	pop	r0
    2f06:	1f 90       	pop	r1
    2f08:	18 95       	reti

00002f0a <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2f0a:	87 ea       	ldi	r24, 0xA7	; 167
    2f0c:	95 e0       	ldi	r25, 0x05	; 5
    2f0e:	0e 94 ed 15 	call	0x2bda	; 0x2bda <HardwareSerial::available()>
    2f12:	21 e0       	ldi	r18, 0x01	; 1
    2f14:	89 2b       	or	r24, r25
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <Serial0_available()+0x10>
    2f18:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    2f1a:	82 2f       	mov	r24, r18
    2f1c:	08 95       	ret

00002f1e <_GLOBAL__sub_I___vector_20>:
_ZN5PrintC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    2f1e:	e7 ea       	ldi	r30, 0xA7	; 167
    2f20:	f5 e0       	ldi	r31, 0x05	; 5
    2f22:	13 82       	std	Z+3, r1	; 0x03
    2f24:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
    2f26:	88 ee       	ldi	r24, 0xE8	; 232
    2f28:	93 e0       	ldi	r25, 0x03	; 3
    2f2a:	a0 e0       	ldi	r26, 0x00	; 0
    2f2c:	b0 e0       	ldi	r27, 0x00	; 0
    2f2e:	84 83       	std	Z+4, r24	; 0x04
    2f30:	95 83       	std	Z+5, r25	; 0x05
    2f32:	a6 83       	std	Z+6, r26	; 0x06
    2f34:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2f36:	8a ec       	ldi	r24, 0xCA	; 202
    2f38:	93 e0       	ldi	r25, 0x03	; 3
    2f3a:	91 83       	std	Z+1, r25	; 0x01
    2f3c:	80 83       	st	Z, r24
    2f3e:	85 ec       	ldi	r24, 0xC5	; 197
    2f40:	90 e0       	ldi	r25, 0x00	; 0
    2f42:	95 87       	std	Z+13, r25	; 0x0d
    2f44:	84 87       	std	Z+12, r24	; 0x0c
    2f46:	84 ec       	ldi	r24, 0xC4	; 196
    2f48:	90 e0       	ldi	r25, 0x00	; 0
    2f4a:	97 87       	std	Z+15, r25	; 0x0f
    2f4c:	86 87       	std	Z+14, r24	; 0x0e
    2f4e:	80 ec       	ldi	r24, 0xC0	; 192
    2f50:	90 e0       	ldi	r25, 0x00	; 0
    2f52:	91 8b       	std	Z+17, r25	; 0x11
    2f54:	80 8b       	std	Z+16, r24	; 0x10
    2f56:	81 ec       	ldi	r24, 0xC1	; 193
    2f58:	90 e0       	ldi	r25, 0x00	; 0
    2f5a:	93 8b       	std	Z+19, r25	; 0x13
    2f5c:	82 8b       	std	Z+18, r24	; 0x12
    2f5e:	82 ec       	ldi	r24, 0xC2	; 194
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	95 8b       	std	Z+21, r25	; 0x15
    2f64:	84 8b       	std	Z+20, r24	; 0x14
    2f66:	86 ec       	ldi	r24, 0xC6	; 198
    2f68:	90 e0       	ldi	r25, 0x00	; 0
    2f6a:	97 8b       	std	Z+23, r25	; 0x17
    2f6c:	86 8b       	std	Z+22, r24	; 0x16
    2f6e:	11 8e       	std	Z+25, r1	; 0x19
    2f70:	12 8e       	std	Z+26, r1	; 0x1a
    2f72:	13 8e       	std	Z+27, r1	; 0x1b
    2f74:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    2f76:	08 95       	ret

00002f78 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:171
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2f78:	af 92       	push	r10
    2f7a:	bf 92       	push	r11
    2f7c:	cf 92       	push	r12
    2f7e:	df 92       	push	r13
    2f80:	ef 92       	push	r14
    2f82:	ff 92       	push	r15
    2f84:	0f 93       	push	r16
    2f86:	1f 93       	push	r17
    2f88:	cf 93       	push	r28
    2f8a:	df 93       	push	r29
    2f8c:	6c 01       	movw	r12, r24
    2f8e:	7b 01       	movw	r14, r22
    2f90:	8b 01       	movw	r16, r22
    2f92:	04 0f       	add	r16, r20
    2f94:	15 1f       	adc	r17, r21
    2f96:	eb 01       	movw	r28, r22
    2f98:	5e 01       	movw	r10, r28
    2f9a:	ae 18       	sub	r10, r14
    2f9c:	bf 08       	sbc	r11, r15
    2f9e:	c0 17       	cp	r28, r16
    2fa0:	d1 07       	cpc	r29, r17
    2fa2:	59 f0       	breq	.+22     	; 0x2fba <Print::write(unsigned char const*, unsigned int)+0x42>
    2fa4:	69 91       	ld	r22, Y+
    2fa6:	d6 01       	movw	r26, r12
    2fa8:	ed 91       	ld	r30, X+
    2faa:	fc 91       	ld	r31, X
    2fac:	01 90       	ld	r0, Z+
    2fae:	f0 81       	ld	r31, Z
    2fb0:	e0 2d       	mov	r30, r0
    2fb2:	c6 01       	movw	r24, r12
    2fb4:	09 95       	icall
    2fb6:	89 2b       	or	r24, r25
    2fb8:	79 f7       	brne	.-34     	; 0x2f98 <Print::write(unsigned char const*, unsigned int)+0x20>
    2fba:	c5 01       	movw	r24, r10
    2fbc:	df 91       	pop	r29
    2fbe:	cf 91       	pop	r28
    2fc0:	1f 91       	pop	r17
    2fc2:	0f 91       	pop	r16
    2fc4:	ff 90       	pop	r15
    2fc6:	ef 90       	pop	r14
    2fc8:	df 90       	pop	r13
    2fca:	cf 90       	pop	r12
    2fcc:	bf 90       	pop	r11
    2fce:	af 90       	pop	r10
    2fd0:	08 95       	ret

00002fd2 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    2fd2:	fb 01       	movw	r30, r22
    2fd4:	01 90       	ld	r0, Z+
    2fd6:	00 20       	and	r0, r0
    2fd8:	e9 f7       	brne	.-6      	; 0x2fd4 <Print::write(char const*) [clone .part.2]+0x2>
    2fda:	31 97       	sbiw	r30, 0x01	; 1
    2fdc:	af 01       	movw	r20, r30
    2fde:	46 1b       	sub	r20, r22
    2fe0:	57 0b       	sbc	r21, r23
    2fe2:	dc 01       	movw	r26, r24
    2fe4:	ed 91       	ld	r30, X+
    2fe6:	fc 91       	ld	r31, X
    2fe8:	02 80       	ldd	r0, Z+2	; 0x02
    2fea:	f3 81       	ldd	r31, Z+3	; 0x03
    2fec:	e0 2d       	mov	r30, r0
    2fee:	09 94       	ijmp

00002ff0 <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    2ff0:	ef 92       	push	r14
    2ff2:	ff 92       	push	r15
    2ff4:	0f 93       	push	r16
    2ff6:	1f 93       	push	r17
    2ff8:	cf 93       	push	r28
    2ffa:	df 93       	push	r29
    2ffc:	8c 01       	movw	r16, r24
    2ffe:	7b 01       	movw	r14, r22
    3000:	d0 e0       	ldi	r29, 0x00	; 0
    3002:	c0 e0       	ldi	r28, 0x00	; 0
    3004:	f7 01       	movw	r30, r14
    3006:	ec 0f       	add	r30, r28
    3008:	fd 1f       	adc	r31, r29
    300a:	64 91       	lpm	r22, Z
    300c:	66 23       	and	r22, r22
    300e:	61 f0       	breq	.+24     	; 0x3028 <Print::print(__FlashStringHelper const*)+0x38>
    3010:	d8 01       	movw	r26, r16
    3012:	ed 91       	ld	r30, X+
    3014:	fc 91       	ld	r31, X
    3016:	01 90       	ld	r0, Z+
    3018:	f0 81       	ld	r31, Z
    301a:	e0 2d       	mov	r30, r0
    301c:	c8 01       	movw	r24, r16
    301e:	09 95       	icall
    3020:	89 2b       	or	r24, r25
    3022:	11 f0       	breq	.+4      	; 0x3028 <Print::print(__FlashStringHelper const*)+0x38>
    3024:	21 96       	adiw	r28, 0x01	; 1
    3026:	ee cf       	rjmp	.-36     	; 0x3004 <Print::print(__FlashStringHelper const*)+0x14>
    3028:	ce 01       	movw	r24, r28
    302a:	df 91       	pop	r29
    302c:	cf 91       	pop	r28
    302e:	1f 91       	pop	r17
    3030:	0f 91       	pop	r16
    3032:	ff 90       	pop	r15
    3034:	ef 90       	pop	r14
    3036:	08 95       	ret

00003038 <Print::print(char const*)>:
_ZN5Print5writeEPKc():
    3038:	61 15       	cp	r22, r1
    303a:	71 05       	cpc	r23, r1
    303c:	11 f0       	breq	.+4      	; 0x3042 <Print::print(char const*)+0xa>
    303e:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    3042:	90 e0       	ldi	r25, 0x00	; 0
    3044:	80 e0       	ldi	r24, 0x00	; 0
    3046:	08 95       	ret

00003048 <Print::print(char)>:
_ZN5Print5printEc():
    3048:	dc 01       	movw	r26, r24
    304a:	ed 91       	ld	r30, X+
    304c:	fc 91       	ld	r31, X
    304e:	01 90       	ld	r0, Z+
    3050:	f0 81       	ld	r31, Z
    3052:	e0 2d       	mov	r30, r0
    3054:	09 94       	ijmp

00003056 <Print::println()>:
_ZN5Print5writeEPKc():
    3056:	68 ed       	ldi	r22, 0xD8	; 216
    3058:	73 e0       	ldi	r23, 0x03	; 3
    305a:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <Print::write(char const*) [clone .part.2]>

0000305e <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
    305e:	0f 93       	push	r16
    3060:	1f 93       	push	r17
    3062:	cf 93       	push	r28
    3064:	df 93       	push	r29
    3066:	ec 01       	movw	r28, r24
    3068:	0e 94 f8 17 	call	0x2ff0	; 0x2ff0 <Print::print(__FlashStringHelper const*)>
    306c:	8c 01       	movw	r16, r24
    306e:	ce 01       	movw	r24, r28
    3070:	0e 94 2b 18 	call	0x3056	; 0x3056 <Print::println()>
    3074:	80 0f       	add	r24, r16
    3076:	91 1f       	adc	r25, r17
    3078:	df 91       	pop	r29
    307a:	cf 91       	pop	r28
    307c:	1f 91       	pop	r17
    307e:	0f 91       	pop	r16
    3080:	08 95       	ret

00003082 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    3082:	0f 93       	push	r16
    3084:	1f 93       	push	r17
    3086:	cf 93       	push	r28
    3088:	df 93       	push	r29
    308a:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    308c:	d0 e0       	ldi	r29, 0x00	; 0
    308e:	c0 e0       	ldi	r28, 0x00	; 0
    3090:	61 15       	cp	r22, r1
    3092:	71 05       	cpc	r23, r1
    3094:	19 f0       	breq	.+6      	; 0x309c <Print::println(char const*)+0x1a>
    3096:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <Print::write(char const*) [clone .part.2]>
    309a:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    309c:	c8 01       	movw	r24, r16
    309e:	0e 94 2b 18 	call	0x3056	; 0x3056 <Print::println()>
    30a2:	8c 0f       	add	r24, r28
    30a4:	9d 1f       	adc	r25, r29
    30a6:	df 91       	pop	r29
    30a8:	cf 91       	pop	r28
    30aa:	1f 91       	pop	r17
    30ac:	0f 91       	pop	r16
    30ae:	08 95       	ret

000030b0 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    30b0:	8f 92       	push	r8
    30b2:	9f 92       	push	r9
    30b4:	af 92       	push	r10
    30b6:	bf 92       	push	r11
    30b8:	ef 92       	push	r14
    30ba:	ff 92       	push	r15
    30bc:	0f 93       	push	r16
    30be:	1f 93       	push	r17
    30c0:	cf 93       	push	r28
    30c2:	df 93       	push	r29
    30c4:	cd b7       	in	r28, 0x3d	; 61
    30c6:	de b7       	in	r29, 0x3e	; 62
    30c8:	a1 97       	sbiw	r28, 0x21	; 33
    30ca:	0f b6       	in	r0, 0x3f	; 63
    30cc:	f8 94       	cli
    30ce:	de bf       	out	0x3e, r29	; 62
    30d0:	0f be       	out	0x3f, r0	; 63
    30d2:	cd bf       	out	0x3d, r28	; 61
    30d4:	7c 01       	movw	r14, r24
    30d6:	fa 01       	movw	r30, r20
    30d8:	cb 01       	movw	r24, r22
    30da:	19 a2       	std	Y+33, r1	; 0x21
    30dc:	22 30       	cpi	r18, 0x02	; 2
    30de:	08 f4       	brcc	.+2      	; 0x30e2 <Print::printNumber(unsigned long, unsigned char)+0x32>
    30e0:	2a e0       	ldi	r18, 0x0A	; 10
    30e2:	8e 01       	movw	r16, r28
    30e4:	0f 5d       	subi	r16, 0xDF	; 223
    30e6:	1f 4f       	sbci	r17, 0xFF	; 255
    30e8:	82 2e       	mov	r8, r18
    30ea:	91 2c       	mov	r9, r1
    30ec:	b1 2c       	mov	r11, r1
    30ee:	a1 2c       	mov	r10, r1
    30f0:	bf 01       	movw	r22, r30
    30f2:	a5 01       	movw	r20, r10
    30f4:	94 01       	movw	r18, r8
    30f6:	0e 94 89 1c 	call	0x3912	; 0x3912 <__udivmodsi4>
    30fa:	f9 01       	movw	r30, r18
    30fc:	ca 01       	movw	r24, r20
    30fe:	6a 30       	cpi	r22, 0x0A	; 10
    3100:	0c f5       	brge	.+66     	; 0x3144 <Print::printNumber(unsigned long, unsigned char)+0x94>
    3102:	60 5d       	subi	r22, 0xD0	; 208
    3104:	d8 01       	movw	r26, r16
    3106:	6e 93       	st	-X, r22
    3108:	8d 01       	movw	r16, r26
    310a:	23 2b       	or	r18, r19
    310c:	24 2b       	or	r18, r20
    310e:	25 2b       	or	r18, r21
    3110:	79 f7       	brne	.-34     	; 0x30f0 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    3112:	90 e0       	ldi	r25, 0x00	; 0
    3114:	80 e0       	ldi	r24, 0x00	; 0
    3116:	10 97       	sbiw	r26, 0x00	; 0
    3118:	21 f0       	breq	.+8      	; 0x3122 <Print::printNumber(unsigned long, unsigned char)+0x72>
    311a:	bd 01       	movw	r22, r26
    311c:	c7 01       	movw	r24, r14
    311e:	0e 94 e9 17 	call	0x2fd2	; 0x2fd2 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    3122:	a1 96       	adiw	r28, 0x21	; 33
    3124:	0f b6       	in	r0, 0x3f	; 63
    3126:	f8 94       	cli
    3128:	de bf       	out	0x3e, r29	; 62
    312a:	0f be       	out	0x3f, r0	; 63
    312c:	cd bf       	out	0x3d, r28	; 61
    312e:	df 91       	pop	r29
    3130:	cf 91       	pop	r28
    3132:	1f 91       	pop	r17
    3134:	0f 91       	pop	r16
    3136:	ff 90       	pop	r15
    3138:	ef 90       	pop	r14
    313a:	bf 90       	pop	r11
    313c:	af 90       	pop	r10
    313e:	9f 90       	pop	r9
    3140:	8f 90       	pop	r8
    3142:	08 95       	ret
    3144:	69 5c       	subi	r22, 0xC9	; 201
    3146:	de cf       	rjmp	.-68     	; 0x3104 <Print::printNumber(unsigned long, unsigned char)+0x54>

00003148 <Print::print(long, int)>:
_ZN5Print5printEli():
    3148:	cf 92       	push	r12
    314a:	df 92       	push	r13
    314c:	ef 92       	push	r14
    314e:	ff 92       	push	r15
    3150:	0f 93       	push	r16
    3152:	1f 93       	push	r17
    3154:	cf 93       	push	r28
    3156:	df 93       	push	r29
    3158:	21 15       	cp	r18, r1
    315a:	31 05       	cpc	r19, r1
    315c:	81 f4       	brne	.+32     	; 0x317e <Print::print(long, int)+0x36>
    315e:	dc 01       	movw	r26, r24
    3160:	ed 91       	ld	r30, X+
    3162:	fc 91       	ld	r31, X
    3164:	01 90       	ld	r0, Z+
    3166:	f0 81       	ld	r31, Z
    3168:	e0 2d       	mov	r30, r0
    316a:	64 2f       	mov	r22, r20
    316c:	df 91       	pop	r29
    316e:	cf 91       	pop	r28
    3170:	1f 91       	pop	r17
    3172:	0f 91       	pop	r16
    3174:	ff 90       	pop	r15
    3176:	ef 90       	pop	r14
    3178:	df 90       	pop	r13
    317a:	cf 90       	pop	r12
    317c:	09 94       	ijmp
    317e:	2a 30       	cpi	r18, 0x0A	; 10
    3180:	31 05       	cpc	r19, r1
    3182:	01 f5       	brne	.+64     	; 0x31c4 <Print::print(long, int)+0x7c>
    3184:	2a e0       	ldi	r18, 0x0A	; 10
    3186:	77 ff       	sbrs	r23, 7
    3188:	1d c0       	rjmp	.+58     	; 0x31c4 <Print::print(long, int)+0x7c>
    318a:	6a 01       	movw	r12, r20
    318c:	7b 01       	movw	r14, r22
    318e:	ec 01       	movw	r28, r24
    3190:	6d e2       	ldi	r22, 0x2D	; 45
    3192:	0e 94 24 18 	call	0x3048	; 0x3048 <Print::print(char)>
    3196:	8c 01       	movw	r16, r24
    3198:	44 27       	eor	r20, r20
    319a:	55 27       	eor	r21, r21
    319c:	ba 01       	movw	r22, r20
    319e:	4c 19       	sub	r20, r12
    31a0:	5d 09       	sbc	r21, r13
    31a2:	6e 09       	sbc	r22, r14
    31a4:	7f 09       	sbc	r23, r15
    31a6:	2a e0       	ldi	r18, 0x0A	; 10
    31a8:	ce 01       	movw	r24, r28
    31aa:	0e 94 58 18 	call	0x30b0	; 0x30b0 <Print::printNumber(unsigned long, unsigned char)>
    31ae:	80 0f       	add	r24, r16
    31b0:	91 1f       	adc	r25, r17
    31b2:	df 91       	pop	r29
    31b4:	cf 91       	pop	r28
    31b6:	1f 91       	pop	r17
    31b8:	0f 91       	pop	r16
    31ba:	ff 90       	pop	r15
    31bc:	ef 90       	pop	r14
    31be:	df 90       	pop	r13
    31c0:	cf 90       	pop	r12
    31c2:	08 95       	ret
    31c4:	df 91       	pop	r29
    31c6:	cf 91       	pop	r28
    31c8:	1f 91       	pop	r17
    31ca:	0f 91       	pop	r16
    31cc:	ff 90       	pop	r15
    31ce:	ef 90       	pop	r14
    31d0:	df 90       	pop	r13
    31d2:	cf 90       	pop	r12
    31d4:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <Print::printNumber(unsigned long, unsigned char)>

000031d8 <Print::print(int, int)>:
_ZN5Print5printEii():
    31d8:	9a 01       	movw	r18, r20
    31da:	ab 01       	movw	r20, r22
    31dc:	77 0f       	add	r23, r23
    31de:	66 0b       	sbc	r22, r22
    31e0:	77 0b       	sbc	r23, r23
    31e2:	0c 94 a4 18 	jmp	0x3148	; 0x3148 <Print::print(long, int)>

000031e6 <Print::println(int, int)>:
_ZN5Print7printlnEii():
    31e6:	0f 93       	push	r16
    31e8:	1f 93       	push	r17
    31ea:	cf 93       	push	r28
    31ec:	df 93       	push	r29
    31ee:	ec 01       	movw	r28, r24
    31f0:	0e 94 ec 18 	call	0x31d8	; 0x31d8 <Print::print(int, int)>
    31f4:	8c 01       	movw	r16, r24
    31f6:	ce 01       	movw	r24, r28
    31f8:	0e 94 2b 18 	call	0x3056	; 0x3056 <Print::println()>
    31fc:	80 0f       	add	r24, r16
    31fe:	91 1f       	adc	r25, r17
    3200:	df 91       	pop	r29
    3202:	cf 91       	pop	r28
    3204:	1f 91       	pop	r17
    3206:	0f 91       	pop	r16
    3208:	08 95       	ret

0000320a <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    320a:	21 15       	cp	r18, r1
    320c:	31 05       	cpc	r19, r1
    320e:	41 f4       	brne	.+16     	; 0x3220 <Print::print(unsigned long, int)+0x16>
    3210:	dc 01       	movw	r26, r24
    3212:	ed 91       	ld	r30, X+
    3214:	fc 91       	ld	r31, X
    3216:	01 90       	ld	r0, Z+
    3218:	f0 81       	ld	r31, Z
    321a:	e0 2d       	mov	r30, r0
    321c:	64 2f       	mov	r22, r20
    321e:	09 94       	ijmp
    3220:	0c 94 58 18 	jmp	0x30b0	; 0x30b0 <Print::printNumber(unsigned long, unsigned char)>

00003224 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
    3224:	9a 01       	movw	r18, r20
    3226:	46 2f       	mov	r20, r22
    3228:	50 e0       	ldi	r21, 0x00	; 0
    322a:	70 e0       	ldi	r23, 0x00	; 0
    322c:	60 e0       	ldi	r22, 0x00	; 0
    322e:	0c 94 05 19 	jmp	0x320a	; 0x320a <Print::print(unsigned long, int)>

00003232 <Print::println(unsigned char, int)>:
_ZN5Print7printlnEhi():
    3232:	0f 93       	push	r16
    3234:	1f 93       	push	r17
    3236:	cf 93       	push	r28
    3238:	df 93       	push	r29
    323a:	ec 01       	movw	r28, r24
    323c:	0e 94 12 19 	call	0x3224	; 0x3224 <Print::print(unsigned char, int)>
    3240:	8c 01       	movw	r16, r24
    3242:	ce 01       	movw	r24, r28
    3244:	0e 94 2b 18 	call	0x3056	; 0x3056 <Print::println()>
    3248:	80 0f       	add	r24, r16
    324a:	91 1f       	adc	r25, r17
    324c:	df 91       	pop	r29
    324e:	cf 91       	pop	r28
    3250:	1f 91       	pop	r17
    3252:	0f 91       	pop	r16
    3254:	08 95       	ret

00003256 <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
    3256:	9a 01       	movw	r18, r20
    3258:	ab 01       	movw	r20, r22
    325a:	70 e0       	ldi	r23, 0x00	; 0
    325c:	60 e0       	ldi	r22, 0x00	; 0
    325e:	0c 94 05 19 	jmp	0x320a	; 0x320a <Print::print(unsigned long, int)>

00003262 <Print::println(unsigned long, int)>:
_ZN5Print7printlnEmi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:181
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    3262:	0f 93       	push	r16
    3264:	1f 93       	push	r17
    3266:	cf 93       	push	r28
    3268:	df 93       	push	r29
    326a:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:182
  size_t n = print(num, base);
    326c:	0e 94 05 19 	call	0x320a	; 0x320a <Print::print(unsigned long, int)>
    3270:	8c 01       	movw	r16, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:183
  n += println();
    3272:	ce 01       	movw	r24, r28
    3274:	0e 94 2b 18 	call	0x3056	; 0x3056 <Print::println()>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
  return n;
}
    3278:	80 0f       	add	r24, r16
    327a:	91 1f       	adc	r25, r17
    327c:	df 91       	pop	r29
    327e:	cf 91       	pop	r28
    3280:	1f 91       	pop	r17
    3282:	0f 91       	pop	r16
    3284:	08 95       	ret

00003286 <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3286:	2f 92       	push	r2
    3288:	3f 92       	push	r3
    328a:	4f 92       	push	r4
    328c:	5f 92       	push	r5
    328e:	6f 92       	push	r6
    3290:	7f 92       	push	r7
    3292:	8f 92       	push	r8
    3294:	9f 92       	push	r9
    3296:	af 92       	push	r10
    3298:	bf 92       	push	r11
    329a:	cf 92       	push	r12
    329c:	df 92       	push	r13
    329e:	ef 92       	push	r14
    32a0:	ff 92       	push	r15
    32a2:	1f 93       	push	r17
    32a4:	cf 93       	push	r28
    32a6:	df 93       	push	r29
    32a8:	ec 01       	movw	r28, r24
    32aa:	6a 01       	movw	r12, r20
    32ac:	7b 01       	movw	r14, r22
    32ae:	72 2e       	mov	r7, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    32b0:	ab 01       	movw	r20, r22
    32b2:	96 01       	movw	r18, r12
    32b4:	cb 01       	movw	r24, r22
    32b6:	b6 01       	movw	r22, r12
    32b8:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__unordsf2>
_ZN5Print5writeEPKc():
    32bc:	6b ed       	ldi	r22, 0xDB	; 219
    32be:	73 e0       	ldi	r23, 0x03	; 3
_ZN5Print10printFloatEdh():
    32c0:	81 11       	cpse	r24, r1
    32c2:	26 c0       	rjmp	.+76     	; 0x3310 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    32c4:	46 01       	movw	r8, r12
    32c6:	57 01       	movw	r10, r14
    32c8:	e8 94       	clt
    32ca:	b7 f8       	bld	r11, 7
    32cc:	2f ef       	ldi	r18, 0xFF	; 255
    32ce:	3f ef       	ldi	r19, 0xFF	; 255
    32d0:	4f e7       	ldi	r20, 0x7F	; 127
    32d2:	5f e7       	ldi	r21, 0x7F	; 127
    32d4:	c5 01       	movw	r24, r10
    32d6:	b4 01       	movw	r22, r8
    32d8:	0e 94 70 1c 	call	0x38e0	; 0x38e0 <__unordsf2>
    32dc:	81 11       	cpse	r24, r1
    32de:	0c c0       	rjmp	.+24     	; 0x32f8 <Print::printFloat(double, unsigned char)+0x72>
    32e0:	2f ef       	ldi	r18, 0xFF	; 255
    32e2:	3f ef       	ldi	r19, 0xFF	; 255
    32e4:	4f e7       	ldi	r20, 0x7F	; 127
    32e6:	5f e7       	ldi	r21, 0x7F	; 127
    32e8:	c5 01       	movw	r24, r10
    32ea:	b4 01       	movw	r22, r8
    32ec:	0e 94 a6 1a 	call	0x354c	; 0x354c <__cmpsf2>
_ZN5Print5writeEPKc():
    32f0:	6f ed       	ldi	r22, 0xDF	; 223
    32f2:	73 e0       	ldi	r23, 0x03	; 3
_ZN5Print10printFloatEdh():
    32f4:	18 16       	cp	r1, r24
    32f6:	64 f0       	brlt	.+24     	; 0x3310 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    32f8:	2f ef       	ldi	r18, 0xFF	; 255
    32fa:	3f ef       	ldi	r19, 0xFF	; 255
    32fc:	4f e7       	ldi	r20, 0x7F	; 127
    32fe:	5f e4       	ldi	r21, 0x4F	; 79
    3300:	c7 01       	movw	r24, r14
    3302:	b6 01       	movw	r22, r12
    3304:	0e 94 fe 1b 	call	0x37fc	; 0x37fc <__gesf2>
    3308:	18 16       	cp	r1, r24
    330a:	b4 f4       	brge	.+44     	; 0x3338 <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
    330c:	63 ee       	ldi	r22, 0xE3	; 227
    330e:	73 e0       	ldi	r23, 0x03	; 3
    3310:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3312:	df 91       	pop	r29
    3314:	cf 91       	pop	r28
    3316:	1f 91       	pop	r17
    3318:	ff 90       	pop	r15
    331a:	ef 90       	pop	r14
    331c:	df 90       	pop	r13
    331e:	cf 90       	pop	r12
    3320:	bf 90       	pop	r11
    3322:	af 90       	pop	r10
    3324:	9f 90       	pop	r9
    3326:	8f 90       	pop	r8
    3328:	7f 90       	pop	r7
    332a:	6f 90       	pop	r6
    332c:	5f 90       	pop	r5
    332e:	4f 90       	pop	r4
    3330:	3f 90       	pop	r3
    3332:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
    3334:	0c 94 e9 17 	jmp	0x2fd2	; 0x2fd2 <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    3338:	2f ef       	ldi	r18, 0xFF	; 255
    333a:	3f ef       	ldi	r19, 0xFF	; 255
    333c:	4f e7       	ldi	r20, 0x7F	; 127
    333e:	5f ec       	ldi	r21, 0xCF	; 207
    3340:	c7 01       	movw	r24, r14
    3342:	b6 01       	movw	r22, r12
    3344:	0e 94 a6 1a 	call	0x354c	; 0x354c <__cmpsf2>
    3348:	87 fd       	sbrc	r24, 7
    334a:	e0 cf       	rjmp	.-64     	; 0x330c <Print::printFloat(double, unsigned char)+0x86>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    334c:	20 e0       	ldi	r18, 0x00	; 0
    334e:	30 e0       	ldi	r19, 0x00	; 0
    3350:	a9 01       	movw	r20, r18
    3352:	c7 01       	movw	r24, r14
    3354:	b6 01       	movw	r22, r12
    3356:	0e 94 a6 1a 	call	0x354c	; 0x354c <__cmpsf2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    335a:	31 2c       	mov	r3, r1
    335c:	21 2c       	mov	r2, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    335e:	87 ff       	sbrs	r24, 7
    3360:	09 c0       	rjmp	.+18     	; 0x3374 <Print::printFloat(double, unsigned char)+0xee>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
    3362:	6d e2       	ldi	r22, 0x2D	; 45
    3364:	ce 01       	movw	r24, r28
    3366:	0e 94 24 18 	call	0x3048	; 0x3048 <Print::print(char)>
    336a:	1c 01       	movw	r2, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
    336c:	f7 fa       	bst	r15, 7
    336e:	f0 94       	com	r15
    3370:	f7 f8       	bld	r15, 7
    3372:	f0 94       	com	r15
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3374:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    3376:	60 e0       	ldi	r22, 0x00	; 0
    3378:	70 e0       	ldi	r23, 0x00	; 0
    337a:	80 e0       	ldi	r24, 0x00	; 0
    337c:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    337e:	71 16       	cp	r7, r17
    3380:	41 f0       	breq	.+16     	; 0x3392 <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    3382:	20 e0       	ldi	r18, 0x00	; 0
    3384:	30 e0       	ldi	r19, 0x00	; 0
    3386:	40 e2       	ldi	r20, 0x20	; 32
    3388:	51 e4       	ldi	r21, 0x41	; 65
    338a:	0e 94 ab 1a 	call	0x3556	; 0x3556 <__divsf3>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    338e:	1f 5f       	subi	r17, 0xFF	; 255
    3390:	f6 cf       	rjmp	.-20     	; 0x337e <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    3392:	a7 01       	movw	r20, r14
    3394:	96 01       	movw	r18, r12
    3396:	0e 94 3a 1a 	call	0x3474	; 0x3474 <__addsf3>
    339a:	2b 01       	movw	r4, r22
    339c:	3c 01       	movw	r6, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    339e:	0e 94 1d 1b 	call	0x363a	; 0x363a <__fixunssfsi>
    33a2:	4b 01       	movw	r8, r22
    33a4:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    33a6:	2a e0       	ldi	r18, 0x0A	; 10
    33a8:	bc 01       	movw	r22, r24
    33aa:	a4 01       	movw	r20, r8
    33ac:	ce 01       	movw	r24, r28
    33ae:	0e 94 58 18 	call	0x30b0	; 0x30b0 <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    33b2:	7c 01       	movw	r14, r24
    33b4:	e2 0c       	add	r14, r2
    33b6:	f3 1c       	adc	r15, r3
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    33b8:	11 23       	and	r17, r17
    33ba:	b1 f1       	breq	.+108    	; 0x3428 <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    33bc:	c5 01       	movw	r24, r10
    33be:	b4 01       	movw	r22, r8
    33c0:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__floatunsisf>
    33c4:	9b 01       	movw	r18, r22
    33c6:	ac 01       	movw	r20, r24
    33c8:	c3 01       	movw	r24, r6
    33ca:	b2 01       	movw	r22, r4
    33cc:	0e 94 39 1a 	call	0x3472	; 0x3472 <__subsf3>
    33d0:	4b 01       	movw	r8, r22
    33d2:	5c 01       	movw	r10, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    33d4:	6e e2       	ldi	r22, 0x2E	; 46
    33d6:	ce 01       	movw	r24, r28
    33d8:	0e 94 24 18 	call	0x3048	; 0x3048 <Print::print(char)>
    33dc:	e8 0e       	add	r14, r24
    33de:	f9 1e       	adc	r15, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    33e0:	11 50       	subi	r17, 0x01	; 1
    33e2:	10 f1       	brcs	.+68     	; 0x3428 <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    33e4:	20 e0       	ldi	r18, 0x00	; 0
    33e6:	30 e0       	ldi	r19, 0x00	; 0
    33e8:	40 e2       	ldi	r20, 0x20	; 32
    33ea:	51 e4       	ldi	r21, 0x41	; 65
    33ec:	c5 01       	movw	r24, r10
    33ee:	b4 01       	movw	r22, r8
    33f0:	0e 94 03 1c 	call	0x3806	; 0x3806 <__mulsf3>
    33f4:	2b 01       	movw	r4, r22
    33f6:	3c 01       	movw	r6, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    33f8:	0e 94 1d 1b 	call	0x363a	; 0x363a <__fixunssfsi>
    33fc:	4b 01       	movw	r8, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    33fe:	4a e0       	ldi	r20, 0x0A	; 10
    3400:	50 e0       	ldi	r21, 0x00	; 0
    3402:	ce 01       	movw	r24, r28
    3404:	0e 94 2b 19 	call	0x3256	; 0x3256 <Print::print(unsigned int, int)>
    3408:	e8 0e       	add	r14, r24
    340a:	f9 1e       	adc	r15, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    340c:	b4 01       	movw	r22, r8
    340e:	90 e0       	ldi	r25, 0x00	; 0
    3410:	80 e0       	ldi	r24, 0x00	; 0
    3412:	0e 94 4c 1b 	call	0x3698	; 0x3698 <__floatunsisf>
    3416:	9b 01       	movw	r18, r22
    3418:	ac 01       	movw	r20, r24
    341a:	c3 01       	movw	r24, r6
    341c:	b2 01       	movw	r22, r4
    341e:	0e 94 39 1a 	call	0x3472	; 0x3472 <__subsf3>
    3422:	4b 01       	movw	r8, r22
    3424:	5c 01       	movw	r10, r24
    3426:	dc cf       	rjmp	.-72     	; 0x33e0 <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    3428:	c7 01       	movw	r24, r14
    342a:	df 91       	pop	r29
    342c:	cf 91       	pop	r28
    342e:	1f 91       	pop	r17
    3430:	ff 90       	pop	r15
    3432:	ef 90       	pop	r14
    3434:	df 90       	pop	r13
    3436:	cf 90       	pop	r12
    3438:	bf 90       	pop	r11
    343a:	af 90       	pop	r10
    343c:	9f 90       	pop	r9
    343e:	8f 90       	pop	r8
    3440:	7f 90       	pop	r7
    3442:	6f 90       	pop	r6
    3444:	5f 90       	pop	r5
    3446:	4f 90       	pop	r4
    3448:	3f 90       	pop	r3
    344a:	2f 90       	pop	r2
    344c:	08 95       	ret

0000344e <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    344e:	0c 94 43 19 	jmp	0x3286	; 0x3286 <Print::printFloat(double, unsigned char)>

00003452 <initVariant>:
initVariant():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    3452:	08 95       	ret

00003454 <main>:
main():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    3454:	0e 94 b7 14 	call	0x296e	; 0x296e <init>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    3458:	0e 94 29 1a 	call	0x3452	; 0x3452 <initVariant>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    345c:	0e 94 07 0a 	call	0x140e	; 0x140e <setup>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    3460:	ca e2       	ldi	r28, 0x2A	; 42
    3462:	d6 e1       	ldi	r29, 0x16	; 22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    3464:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <loop>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    3468:	20 97       	sbiw	r28, 0x00	; 0
    346a:	e1 f3       	breq	.-8      	; 0x3464 <main+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    346c:	0e 94 2a 16 	call	0x2c54	; 0x2c54 <serialEventRun()>
    3470:	f9 cf       	rjmp	.-14     	; 0x3464 <main+0x10>

00003472 <__subsf3>:
__subsf3():
    3472:	50 58       	subi	r21, 0x80	; 128

00003474 <__addsf3>:
    3474:	bb 27       	eor	r27, r27
    3476:	aa 27       	eor	r26, r26
    3478:	0e 94 51 1a 	call	0x34a2	; 0x34a2 <__addsf3x>
    347c:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__fp_round>
__addsf3():
    3480:	0e 94 b6 1b 	call	0x376c	; 0x376c <__fp_pscA>
    3484:	38 f0       	brcs	.+14     	; 0x3494 <__addsf3+0x20>
    3486:	0e 94 bd 1b 	call	0x377a	; 0x377a <__fp_pscB>
    348a:	20 f0       	brcs	.+8      	; 0x3494 <__addsf3+0x20>
    348c:	39 f4       	brne	.+14     	; 0x349c <__addsf3+0x28>
    348e:	9f 3f       	cpi	r25, 0xFF	; 255
    3490:	19 f4       	brne	.+6      	; 0x3498 <__addsf3+0x24>
    3492:	26 f4       	brtc	.+8      	; 0x349c <__addsf3+0x28>
    3494:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <__fp_nan>
    3498:	0e f4       	brtc	.+2      	; 0x349c <__addsf3+0x28>
    349a:	e0 95       	com	r30
    349c:	e7 fb       	bst	r30, 7
    349e:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__fp_inf>

000034a2 <__addsf3x>:
__addsf3x():
    34a2:	e9 2f       	mov	r30, r25
    34a4:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__fp_split3>
    34a8:	58 f3       	brcs	.-42     	; 0x3480 <__addsf3+0xc>
    34aa:	ba 17       	cp	r27, r26
    34ac:	62 07       	cpc	r22, r18
    34ae:	73 07       	cpc	r23, r19
    34b0:	84 07       	cpc	r24, r20
    34b2:	95 07       	cpc	r25, r21
    34b4:	20 f0       	brcs	.+8      	; 0x34be <__addsf3x+0x1c>
    34b6:	79 f4       	brne	.+30     	; 0x34d6 <__addsf3x+0x34>
    34b8:	a6 f5       	brtc	.+104    	; 0x3522 <__addsf3x+0x80>
    34ba:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__fp_zero>
    34be:	0e f4       	brtc	.+2      	; 0x34c2 <__addsf3x+0x20>
    34c0:	e0 95       	com	r30
    34c2:	0b 2e       	mov	r0, r27
    34c4:	ba 2f       	mov	r27, r26
    34c6:	a0 2d       	mov	r26, r0
    34c8:	0b 01       	movw	r0, r22
    34ca:	b9 01       	movw	r22, r18
    34cc:	90 01       	movw	r18, r0
    34ce:	0c 01       	movw	r0, r24
    34d0:	ca 01       	movw	r24, r20
    34d2:	a0 01       	movw	r20, r0
    34d4:	11 24       	eor	r1, r1
    34d6:	ff 27       	eor	r31, r31
    34d8:	59 1b       	sub	r21, r25
    34da:	99 f0       	breq	.+38     	; 0x3502 <__addsf3x+0x60>
    34dc:	59 3f       	cpi	r21, 0xF9	; 249
    34de:	50 f4       	brcc	.+20     	; 0x34f4 <__addsf3x+0x52>
    34e0:	50 3e       	cpi	r21, 0xE0	; 224
    34e2:	68 f1       	brcs	.+90     	; 0x353e <__addsf3x+0x9c>
    34e4:	1a 16       	cp	r1, r26
    34e6:	f0 40       	sbci	r31, 0x00	; 0
    34e8:	a2 2f       	mov	r26, r18
    34ea:	23 2f       	mov	r18, r19
    34ec:	34 2f       	mov	r19, r20
    34ee:	44 27       	eor	r20, r20
    34f0:	58 5f       	subi	r21, 0xF8	; 248
    34f2:	f3 cf       	rjmp	.-26     	; 0x34da <__addsf3x+0x38>
    34f4:	46 95       	lsr	r20
    34f6:	37 95       	ror	r19
    34f8:	27 95       	ror	r18
    34fa:	a7 95       	ror	r26
    34fc:	f0 40       	sbci	r31, 0x00	; 0
    34fe:	53 95       	inc	r21
    3500:	c9 f7       	brne	.-14     	; 0x34f4 <__addsf3x+0x52>
    3502:	7e f4       	brtc	.+30     	; 0x3522 <__addsf3x+0x80>
    3504:	1f 16       	cp	r1, r31
    3506:	ba 0b       	sbc	r27, r26
    3508:	62 0b       	sbc	r22, r18
    350a:	73 0b       	sbc	r23, r19
    350c:	84 0b       	sbc	r24, r20
    350e:	ba f0       	brmi	.+46     	; 0x353e <__addsf3x+0x9c>
    3510:	91 50       	subi	r25, 0x01	; 1
    3512:	a1 f0       	breq	.+40     	; 0x353c <__addsf3x+0x9a>
    3514:	ff 0f       	add	r31, r31
    3516:	bb 1f       	adc	r27, r27
    3518:	66 1f       	adc	r22, r22
    351a:	77 1f       	adc	r23, r23
    351c:	88 1f       	adc	r24, r24
    351e:	c2 f7       	brpl	.-16     	; 0x3510 <__addsf3x+0x6e>
    3520:	0e c0       	rjmp	.+28     	; 0x353e <__addsf3x+0x9c>
    3522:	ba 0f       	add	r27, r26
    3524:	62 1f       	adc	r22, r18
    3526:	73 1f       	adc	r23, r19
    3528:	84 1f       	adc	r24, r20
    352a:	48 f4       	brcc	.+18     	; 0x353e <__addsf3x+0x9c>
    352c:	87 95       	ror	r24
    352e:	77 95       	ror	r23
    3530:	67 95       	ror	r22
    3532:	b7 95       	ror	r27
    3534:	f7 95       	ror	r31
    3536:	9e 3f       	cpi	r25, 0xFE	; 254
    3538:	08 f0       	brcs	.+2      	; 0x353c <__addsf3x+0x9a>
    353a:	b0 cf       	rjmp	.-160    	; 0x349c <__addsf3+0x28>
    353c:	93 95       	inc	r25
    353e:	88 0f       	add	r24, r24
    3540:	08 f0       	brcs	.+2      	; 0x3544 <__addsf3x+0xa2>
    3542:	99 27       	eor	r25, r25
    3544:	ee 0f       	add	r30, r30
    3546:	97 95       	ror	r25
    3548:	87 95       	ror	r24
    354a:	08 95       	ret

0000354c <__cmpsf2>:
    354c:	0e 94 89 1b 	call	0x3712	; 0x3712 <__fp_cmp>
    3550:	08 f4       	brcc	.+2      	; 0x3554 <__cmpsf2+0x8>
    3552:	81 e0       	ldi	r24, 0x01	; 1
    3554:	08 95       	ret

00003556 <__divsf3>:
    3556:	0e 94 bf 1a 	call	0x357e	; 0x357e <__divsf3x>
    355a:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__fp_round>
    355e:	0e 94 bd 1b 	call	0x377a	; 0x377a <__fp_pscB>
    3562:	58 f0       	brcs	.+22     	; 0x357a <__divsf3+0x24>
    3564:	0e 94 b6 1b 	call	0x376c	; 0x376c <__fp_pscA>
    3568:	40 f0       	brcs	.+16     	; 0x357a <__divsf3+0x24>
    356a:	29 f4       	brne	.+10     	; 0x3576 <__divsf3+0x20>
    356c:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    356e:	29 f0       	breq	.+10     	; 0x357a <__divsf3+0x24>
    3570:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__fp_inf>
    3574:	51 11       	cpse	r21, r1
    3576:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__fp_szero>
    357a:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <__fp_nan>

0000357e <__divsf3x>:
__divsf3x():
    357e:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__fp_split3>
    3582:	68 f3       	brcs	.-38     	; 0x355e <__divsf3+0x8>

00003584 <__divsf3_pse>:
    3584:	99 23       	and	r25, r25
    3586:	b1 f3       	breq	.-20     	; 0x3574 <__divsf3+0x1e>
    3588:	55 23       	and	r21, r21
    358a:	91 f3       	breq	.-28     	; 0x3570 <__divsf3+0x1a>
    358c:	95 1b       	sub	r25, r21
    358e:	55 0b       	sbc	r21, r21
    3590:	bb 27       	eor	r27, r27
    3592:	aa 27       	eor	r26, r26
    3594:	62 17       	cp	r22, r18
    3596:	73 07       	cpc	r23, r19
    3598:	84 07       	cpc	r24, r20
    359a:	38 f0       	brcs	.+14     	; 0x35aa <__divsf3_pse+0x26>
    359c:	9f 5f       	subi	r25, 0xFF	; 255
    359e:	5f 4f       	sbci	r21, 0xFF	; 255
    35a0:	22 0f       	add	r18, r18
    35a2:	33 1f       	adc	r19, r19
    35a4:	44 1f       	adc	r20, r20
    35a6:	aa 1f       	adc	r26, r26
    35a8:	a9 f3       	breq	.-22     	; 0x3594 <__divsf3_pse+0x10>
    35aa:	35 d0       	rcall	.+106    	; 0x3616 <__divsf3_pse+0x92>
    35ac:	0e 2e       	mov	r0, r30
    35ae:	3a f0       	brmi	.+14     	; 0x35be <__divsf3_pse+0x3a>
    35b0:	e0 e8       	ldi	r30, 0x80	; 128
    35b2:	32 d0       	rcall	.+100    	; 0x3618 <__divsf3_pse+0x94>
    35b4:	91 50       	subi	r25, 0x01	; 1
    35b6:	50 40       	sbci	r21, 0x00	; 0
    35b8:	e6 95       	lsr	r30
    35ba:	00 1c       	adc	r0, r0
    35bc:	ca f7       	brpl	.-14     	; 0x35b0 <__divsf3_pse+0x2c>
    35be:	2b d0       	rcall	.+86     	; 0x3616 <__divsf3_pse+0x92>
    35c0:	fe 2f       	mov	r31, r30
    35c2:	29 d0       	rcall	.+82     	; 0x3616 <__divsf3_pse+0x92>
    35c4:	66 0f       	add	r22, r22
    35c6:	77 1f       	adc	r23, r23
    35c8:	88 1f       	adc	r24, r24
    35ca:	bb 1f       	adc	r27, r27
    35cc:	26 17       	cp	r18, r22
    35ce:	37 07       	cpc	r19, r23
    35d0:	48 07       	cpc	r20, r24
    35d2:	ab 07       	cpc	r26, r27
    35d4:	b0 e8       	ldi	r27, 0x80	; 128
    35d6:	09 f0       	breq	.+2      	; 0x35da <__divsf3_pse+0x56>
    35d8:	bb 0b       	sbc	r27, r27
    35da:	80 2d       	mov	r24, r0
    35dc:	bf 01       	movw	r22, r30
    35de:	ff 27       	eor	r31, r31
    35e0:	93 58       	subi	r25, 0x83	; 131
    35e2:	5f 4f       	sbci	r21, 0xFF	; 255
    35e4:	3a f0       	brmi	.+14     	; 0x35f4 <__divsf3_pse+0x70>
    35e6:	9e 3f       	cpi	r25, 0xFE	; 254
    35e8:	51 05       	cpc	r21, r1
    35ea:	78 f0       	brcs	.+30     	; 0x360a <__divsf3_pse+0x86>
    35ec:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__fp_inf>
    35f0:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__fp_szero>
    35f4:	5f 3f       	cpi	r21, 0xFF	; 255
    35f6:	e4 f3       	brlt	.-8      	; 0x35f0 <__divsf3_pse+0x6c>
    35f8:	98 3e       	cpi	r25, 0xE8	; 232
    35fa:	d4 f3       	brlt	.-12     	; 0x35f0 <__divsf3_pse+0x6c>
    35fc:	86 95       	lsr	r24
    35fe:	77 95       	ror	r23
    3600:	67 95       	ror	r22
    3602:	b7 95       	ror	r27
    3604:	f7 95       	ror	r31
    3606:	9f 5f       	subi	r25, 0xFF	; 255
    3608:	c9 f7       	brne	.-14     	; 0x35fc <__divsf3_pse+0x78>
    360a:	88 0f       	add	r24, r24
    360c:	91 1d       	adc	r25, r1
    360e:	96 95       	lsr	r25
    3610:	87 95       	ror	r24
    3612:	97 f9       	bld	r25, 7
    3614:	08 95       	ret
    3616:	e1 e0       	ldi	r30, 0x01	; 1
    3618:	66 0f       	add	r22, r22
    361a:	77 1f       	adc	r23, r23
    361c:	88 1f       	adc	r24, r24
    361e:	bb 1f       	adc	r27, r27
    3620:	62 17       	cp	r22, r18
    3622:	73 07       	cpc	r23, r19
    3624:	84 07       	cpc	r24, r20
    3626:	ba 07       	cpc	r27, r26
    3628:	20 f0       	brcs	.+8      	; 0x3632 <__divsf3_pse+0xae>
    362a:	62 1b       	sub	r22, r18
    362c:	73 0b       	sbc	r23, r19
    362e:	84 0b       	sbc	r24, r20
    3630:	ba 0b       	sbc	r27, r26
    3632:	ee 1f       	adc	r30, r30
    3634:	88 f7       	brcc	.-30     	; 0x3618 <__divsf3_pse+0x94>
    3636:	e0 95       	com	r30
    3638:	08 95       	ret

0000363a <__fixunssfsi>:
    363a:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <__fp_splitA>
    363e:	88 f0       	brcs	.+34     	; 0x3662 <__fixunssfsi+0x28>
    3640:	9f 57       	subi	r25, 0x7F	; 127
    3642:	98 f0       	brcs	.+38     	; 0x366a <__fixunssfsi+0x30>
    3644:	b9 2f       	mov	r27, r25
    3646:	99 27       	eor	r25, r25
    3648:	b7 51       	subi	r27, 0x17	; 23
    364a:	b0 f0       	brcs	.+44     	; 0x3678 <__fixunssfsi+0x3e>
    364c:	e1 f0       	breq	.+56     	; 0x3686 <__fixunssfsi+0x4c>
    364e:	66 0f       	add	r22, r22
    3650:	77 1f       	adc	r23, r23
    3652:	88 1f       	adc	r24, r24
    3654:	99 1f       	adc	r25, r25
    3656:	1a f0       	brmi	.+6      	; 0x365e <__fixunssfsi+0x24>
    3658:	ba 95       	dec	r27
__fixunssfsi():
    365a:	c9 f7       	brne	.-14     	; 0x364e <__fixunssfsi+0x14>
    365c:	14 c0       	rjmp	.+40     	; 0x3686 <__fixunssfsi+0x4c>
    365e:	b1 30       	cpi	r27, 0x01	; 1
    3660:	91 f0       	breq	.+36     	; 0x3686 <__fixunssfsi+0x4c>
    3662:	0e 94 f7 1b 	call	0x37ee	; 0x37ee <__fp_zero>
    3666:	b1 e0       	ldi	r27, 0x01	; 1
    3668:	08 95       	ret
    366a:	0c 94 f7 1b 	jmp	0x37ee	; 0x37ee <__fp_zero>
    366e:	67 2f       	mov	r22, r23
    3670:	78 2f       	mov	r23, r24
    3672:	88 27       	eor	r24, r24
    3674:	b8 5f       	subi	r27, 0xF8	; 248
    3676:	39 f0       	breq	.+14     	; 0x3686 <__fixunssfsi+0x4c>
    3678:	b9 3f       	cpi	r27, 0xF9	; 249
    367a:	cc f3       	brlt	.-14     	; 0x366e <__fixunssfsi+0x34>
    367c:	86 95       	lsr	r24
    367e:	77 95       	ror	r23
    3680:	67 95       	ror	r22
    3682:	b3 95       	inc	r27
    3684:	d9 f7       	brne	.-10     	; 0x367c <__fixunssfsi+0x42>
    3686:	3e f4       	brtc	.+14     	; 0x3696 <__fixunssfsi+0x5c>
    3688:	90 95       	com	r25
    368a:	80 95       	com	r24
    368c:	70 95       	com	r23
    368e:	61 95       	neg	r22
    3690:	7f 4f       	sbci	r23, 0xFF	; 255
    3692:	8f 4f       	sbci	r24, 0xFF	; 255
    3694:	9f 4f       	sbci	r25, 0xFF	; 255
    3696:	08 95       	ret

00003698 <__floatunsisf>:
__floatunsisf():
    3698:	e8 94       	clt
    369a:	09 c0       	rjmp	.+18     	; 0x36ae <__floatsisf+0x12>

0000369c <__floatsisf>:
    369c:	97 fb       	bst	r25, 7
    369e:	3e f4       	brtc	.+14     	; 0x36ae <__floatsisf+0x12>
    36a0:	90 95       	com	r25
    36a2:	80 95       	com	r24
    36a4:	70 95       	com	r23
    36a6:	61 95       	neg	r22
    36a8:	7f 4f       	sbci	r23, 0xFF	; 255
    36aa:	8f 4f       	sbci	r24, 0xFF	; 255
    36ac:	9f 4f       	sbci	r25, 0xFF	; 255
    36ae:	99 23       	and	r25, r25
    36b0:	a9 f0       	breq	.+42     	; 0x36dc <__floatsisf+0x40>
    36b2:	f9 2f       	mov	r31, r25
    36b4:	96 e9       	ldi	r25, 0x96	; 150
    36b6:	bb 27       	eor	r27, r27
    36b8:	93 95       	inc	r25
    36ba:	f6 95       	lsr	r31
    36bc:	87 95       	ror	r24
    36be:	77 95       	ror	r23
    36c0:	67 95       	ror	r22
    36c2:	b7 95       	ror	r27
    36c4:	f1 11       	cpse	r31, r1
    36c6:	f8 cf       	rjmp	.-16     	; 0x36b8 <__floatsisf+0x1c>
    36c8:	fa f4       	brpl	.+62     	; 0x3708 <__floatsisf+0x6c>
    36ca:	bb 0f       	add	r27, r27
    36cc:	11 f4       	brne	.+4      	; 0x36d2 <__floatsisf+0x36>
    36ce:	60 ff       	sbrs	r22, 0
    36d0:	1b c0       	rjmp	.+54     	; 0x3708 <__floatsisf+0x6c>
    36d2:	6f 5f       	subi	r22, 0xFF	; 255
    36d4:	7f 4f       	sbci	r23, 0xFF	; 255
    36d6:	8f 4f       	sbci	r24, 0xFF	; 255
    36d8:	9f 4f       	sbci	r25, 0xFF	; 255
    36da:	16 c0       	rjmp	.+44     	; 0x3708 <__floatsisf+0x6c>
    36dc:	88 23       	and	r24, r24
    36de:	11 f0       	breq	.+4      	; 0x36e4 <__floatsisf+0x48>
    36e0:	96 e9       	ldi	r25, 0x96	; 150
    36e2:	11 c0       	rjmp	.+34     	; 0x3706 <__floatsisf+0x6a>
    36e4:	77 23       	and	r23, r23
    36e6:	21 f0       	breq	.+8      	; 0x36f0 <__floatsisf+0x54>
    36e8:	9e e8       	ldi	r25, 0x8E	; 142
    36ea:	87 2f       	mov	r24, r23
    36ec:	76 2f       	mov	r23, r22
    36ee:	05 c0       	rjmp	.+10     	; 0x36fa <__floatsisf+0x5e>
    36f0:	66 23       	and	r22, r22
    36f2:	71 f0       	breq	.+28     	; 0x3710 <__floatsisf+0x74>
    36f4:	96 e8       	ldi	r25, 0x86	; 134
    36f6:	86 2f       	mov	r24, r22
    36f8:	70 e0       	ldi	r23, 0x00	; 0
    36fa:	60 e0       	ldi	r22, 0x00	; 0
    36fc:	2a f0       	brmi	.+10     	; 0x3708 <__floatsisf+0x6c>
    36fe:	9a 95       	dec	r25
    3700:	66 0f       	add	r22, r22
    3702:	77 1f       	adc	r23, r23
    3704:	88 1f       	adc	r24, r24
    3706:	da f7       	brpl	.-10     	; 0x36fe <__floatsisf+0x62>
    3708:	88 0f       	add	r24, r24
    370a:	96 95       	lsr	r25
    370c:	87 95       	ror	r24
    370e:	97 f9       	bld	r25, 7
    3710:	08 95       	ret

00003712 <__fp_cmp>:
__fp_cmp():
    3712:	99 0f       	add	r25, r25
    3714:	00 08       	sbc	r0, r0
    3716:	55 0f       	add	r21, r21
    3718:	aa 0b       	sbc	r26, r26
    371a:	e0 e8       	ldi	r30, 0x80	; 128
    371c:	fe ef       	ldi	r31, 0xFE	; 254
    371e:	16 16       	cp	r1, r22
    3720:	17 06       	cpc	r1, r23
    3722:	e8 07       	cpc	r30, r24
    3724:	f9 07       	cpc	r31, r25
    3726:	c0 f0       	brcs	.+48     	; 0x3758 <__fp_cmp+0x46>
    3728:	12 16       	cp	r1, r18
    372a:	13 06       	cpc	r1, r19
    372c:	e4 07       	cpc	r30, r20
    372e:	f5 07       	cpc	r31, r21
    3730:	98 f0       	brcs	.+38     	; 0x3758 <__fp_cmp+0x46>
    3732:	62 1b       	sub	r22, r18
    3734:	73 0b       	sbc	r23, r19
    3736:	84 0b       	sbc	r24, r20
    3738:	95 0b       	sbc	r25, r21
    373a:	39 f4       	brne	.+14     	; 0x374a <__fp_cmp+0x38>
    373c:	0a 26       	eor	r0, r26
    373e:	61 f0       	breq	.+24     	; 0x3758 <__fp_cmp+0x46>
    3740:	23 2b       	or	r18, r19
    3742:	24 2b       	or	r18, r20
    3744:	25 2b       	or	r18, r21
    3746:	21 f4       	brne	.+8      	; 0x3750 <__fp_cmp+0x3e>
    3748:	08 95       	ret
    374a:	0a 26       	eor	r0, r26
    374c:	09 f4       	brne	.+2      	; 0x3750 <__fp_cmp+0x3e>
    374e:	a1 40       	sbci	r26, 0x01	; 1
    3750:	a6 95       	lsr	r26
    3752:	8f ef       	ldi	r24, 0xFF	; 255
    3754:	81 1d       	adc	r24, r1
    3756:	81 1d       	adc	r24, r1
    3758:	08 95       	ret

0000375a <__fp_inf>:
__fp_inf():
    375a:	97 f9       	bld	r25, 7
    375c:	9f 67       	ori	r25, 0x7F	; 127
    375e:	80 e8       	ldi	r24, 0x80	; 128
    3760:	70 e0       	ldi	r23, 0x00	; 0
    3762:	60 e0       	ldi	r22, 0x00	; 0
    3764:	08 95       	ret

00003766 <__fp_nan>:
__fp_nan():
    3766:	9f ef       	ldi	r25, 0xFF	; 255
    3768:	80 ec       	ldi	r24, 0xC0	; 192
    376a:	08 95       	ret

0000376c <__fp_pscA>:
__fp_pscA():
    376c:	00 24       	eor	r0, r0
    376e:	0a 94       	dec	r0
    3770:	16 16       	cp	r1, r22
    3772:	17 06       	cpc	r1, r23
    3774:	18 06       	cpc	r1, r24
    3776:	09 06       	cpc	r0, r25
    3778:	08 95       	ret

0000377a <__fp_pscB>:
__fp_pscB():
    377a:	00 24       	eor	r0, r0
    377c:	0a 94       	dec	r0
    377e:	12 16       	cp	r1, r18
    3780:	13 06       	cpc	r1, r19
    3782:	14 06       	cpc	r1, r20
    3784:	05 06       	cpc	r0, r21
    3786:	08 95       	ret

00003788 <__fp_round>:
__fp_round():
    3788:	09 2e       	mov	r0, r25
    378a:	03 94       	inc	r0
    378c:	00 0c       	add	r0, r0
    378e:	11 f4       	brne	.+4      	; 0x3794 <__fp_round+0xc>
    3790:	88 23       	and	r24, r24
    3792:	52 f0       	brmi	.+20     	; 0x37a8 <__fp_round+0x20>
    3794:	bb 0f       	add	r27, r27
    3796:	40 f4       	brcc	.+16     	; 0x37a8 <__fp_round+0x20>
    3798:	bf 2b       	or	r27, r31
    379a:	11 f4       	brne	.+4      	; 0x37a0 <__fp_round+0x18>
    379c:	60 ff       	sbrs	r22, 0
    379e:	04 c0       	rjmp	.+8      	; 0x37a8 <__fp_round+0x20>
    37a0:	6f 5f       	subi	r22, 0xFF	; 255
    37a2:	7f 4f       	sbci	r23, 0xFF	; 255
    37a4:	8f 4f       	sbci	r24, 0xFF	; 255
    37a6:	9f 4f       	sbci	r25, 0xFF	; 255
    37a8:	08 95       	ret

000037aa <__fp_split3>:
__fp_split3():
    37aa:	57 fd       	sbrc	r21, 7
    37ac:	90 58       	subi	r25, 0x80	; 128
    37ae:	44 0f       	add	r20, r20
    37b0:	55 1f       	adc	r21, r21
    37b2:	59 f0       	breq	.+22     	; 0x37ca <__fp_splitA+0x10>
    37b4:	5f 3f       	cpi	r21, 0xFF	; 255
    37b6:	71 f0       	breq	.+28     	; 0x37d4 <__fp_splitA+0x1a>
    37b8:	47 95       	ror	r20

000037ba <__fp_splitA>:
    37ba:	88 0f       	add	r24, r24
    37bc:	97 fb       	bst	r25, 7
    37be:	99 1f       	adc	r25, r25
    37c0:	61 f0       	breq	.+24     	; 0x37da <__fp_splitA+0x20>
    37c2:	9f 3f       	cpi	r25, 0xFF	; 255
    37c4:	79 f0       	breq	.+30     	; 0x37e4 <__fp_splitA+0x2a>
    37c6:	87 95       	ror	r24
    37c8:	08 95       	ret
    37ca:	12 16       	cp	r1, r18
    37cc:	13 06       	cpc	r1, r19
    37ce:	14 06       	cpc	r1, r20
    37d0:	55 1f       	adc	r21, r21
    37d2:	f2 cf       	rjmp	.-28     	; 0x37b8 <__fp_split3+0xe>
    37d4:	46 95       	lsr	r20
    37d6:	f1 df       	rcall	.-30     	; 0x37ba <__fp_splitA>
    37d8:	08 c0       	rjmp	.+16     	; 0x37ea <__fp_splitA+0x30>
    37da:	16 16       	cp	r1, r22
    37dc:	17 06       	cpc	r1, r23
    37de:	18 06       	cpc	r1, r24
    37e0:	99 1f       	adc	r25, r25
    37e2:	f1 cf       	rjmp	.-30     	; 0x37c6 <__fp_splitA+0xc>
    37e4:	86 95       	lsr	r24
    37e6:	71 05       	cpc	r23, r1
    37e8:	61 05       	cpc	r22, r1
    37ea:	08 94       	sec
    37ec:	08 95       	ret

000037ee <__fp_zero>:
__fp_zero():
    37ee:	e8 94       	clt

000037f0 <__fp_szero>:
    37f0:	bb 27       	eor	r27, r27
    37f2:	66 27       	eor	r22, r22
    37f4:	77 27       	eor	r23, r23
    37f6:	cb 01       	movw	r24, r22
    37f8:	97 f9       	bld	r25, 7
    37fa:	08 95       	ret

000037fc <__gesf2>:
__gesf2():
    37fc:	0e 94 89 1b 	call	0x3712	; 0x3712 <__fp_cmp>
    3800:	08 f4       	brcc	.+2      	; 0x3804 <__gesf2+0x8>
    3802:	8f ef       	ldi	r24, 0xFF	; 255
    3804:	08 95       	ret

00003806 <__mulsf3>:
__mulsf3():
    3806:	0e 94 16 1c 	call	0x382c	; 0x382c <__mulsf3x>
    380a:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__fp_round>
    380e:	0e 94 b6 1b 	call	0x376c	; 0x376c <__fp_pscA>
    3812:	38 f0       	brcs	.+14     	; 0x3822 <__mulsf3+0x1c>
    3814:	0e 94 bd 1b 	call	0x377a	; 0x377a <__fp_pscB>
    3818:	20 f0       	brcs	.+8      	; 0x3822 <__mulsf3+0x1c>
    381a:	95 23       	and	r25, r21
    381c:	11 f0       	breq	.+4      	; 0x3822 <__mulsf3+0x1c>
    381e:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__fp_inf>
    3822:	0c 94 b3 1b 	jmp	0x3766	; 0x3766 <__fp_nan>
    3826:	11 24       	eor	r1, r1
    3828:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__fp_szero>

0000382c <__mulsf3x>:
__mulsf3x():
    382c:	0e 94 d5 1b 	call	0x37aa	; 0x37aa <__fp_split3>
    3830:	70 f3       	brcs	.-36     	; 0x380e <__mulsf3+0x8>

00003832 <__mulsf3_pse>:
    3832:	95 9f       	mul	r25, r21
    3834:	c1 f3       	breq	.-16     	; 0x3826 <__mulsf3+0x20>
    3836:	95 0f       	add	r25, r21
    3838:	50 e0       	ldi	r21, 0x00	; 0
    383a:	55 1f       	adc	r21, r21
    383c:	62 9f       	mul	r22, r18
    383e:	f0 01       	movw	r30, r0
    3840:	72 9f       	mul	r23, r18
    3842:	bb 27       	eor	r27, r27
    3844:	f0 0d       	add	r31, r0
    3846:	b1 1d       	adc	r27, r1
    3848:	63 9f       	mul	r22, r19
    384a:	aa 27       	eor	r26, r26
    384c:	f0 0d       	add	r31, r0
    384e:	b1 1d       	adc	r27, r1
    3850:	aa 1f       	adc	r26, r26
    3852:	64 9f       	mul	r22, r20
    3854:	66 27       	eor	r22, r22
    3856:	b0 0d       	add	r27, r0
    3858:	a1 1d       	adc	r26, r1
    385a:	66 1f       	adc	r22, r22
    385c:	82 9f       	mul	r24, r18
    385e:	22 27       	eor	r18, r18
    3860:	b0 0d       	add	r27, r0
    3862:	a1 1d       	adc	r26, r1
    3864:	62 1f       	adc	r22, r18
    3866:	73 9f       	mul	r23, r19
    3868:	b0 0d       	add	r27, r0
    386a:	a1 1d       	adc	r26, r1
    386c:	62 1f       	adc	r22, r18
    386e:	83 9f       	mul	r24, r19
    3870:	a0 0d       	add	r26, r0
    3872:	61 1d       	adc	r22, r1
    3874:	22 1f       	adc	r18, r18
    3876:	74 9f       	mul	r23, r20
    3878:	33 27       	eor	r19, r19
    387a:	a0 0d       	add	r26, r0
    387c:	61 1d       	adc	r22, r1
    387e:	23 1f       	adc	r18, r19
    3880:	84 9f       	mul	r24, r20
    3882:	60 0d       	add	r22, r0
    3884:	21 1d       	adc	r18, r1
    3886:	82 2f       	mov	r24, r18
    3888:	76 2f       	mov	r23, r22
    388a:	6a 2f       	mov	r22, r26
    388c:	11 24       	eor	r1, r1
    388e:	9f 57       	subi	r25, 0x7F	; 127
    3890:	50 40       	sbci	r21, 0x00	; 0
    3892:	9a f0       	brmi	.+38     	; 0x38ba <__mulsf3_pse+0x88>
    3894:	f1 f0       	breq	.+60     	; 0x38d2 <__mulsf3_pse+0xa0>
    3896:	88 23       	and	r24, r24
    3898:	4a f0       	brmi	.+18     	; 0x38ac <__mulsf3_pse+0x7a>
    389a:	ee 0f       	add	r30, r30
    389c:	ff 1f       	adc	r31, r31
    389e:	bb 1f       	adc	r27, r27
    38a0:	66 1f       	adc	r22, r22
    38a2:	77 1f       	adc	r23, r23
    38a4:	88 1f       	adc	r24, r24
    38a6:	91 50       	subi	r25, 0x01	; 1
    38a8:	50 40       	sbci	r21, 0x00	; 0
    38aa:	a9 f7       	brne	.-22     	; 0x3896 <__mulsf3_pse+0x64>
    38ac:	9e 3f       	cpi	r25, 0xFE	; 254
    38ae:	51 05       	cpc	r21, r1
    38b0:	80 f0       	brcs	.+32     	; 0x38d2 <__mulsf3_pse+0xa0>
    38b2:	0c 94 ad 1b 	jmp	0x375a	; 0x375a <__fp_inf>
    38b6:	0c 94 f8 1b 	jmp	0x37f0	; 0x37f0 <__fp_szero>
    38ba:	5f 3f       	cpi	r21, 0xFF	; 255
    38bc:	e4 f3       	brlt	.-8      	; 0x38b6 <__mulsf3_pse+0x84>
    38be:	98 3e       	cpi	r25, 0xE8	; 232
    38c0:	d4 f3       	brlt	.-12     	; 0x38b6 <__mulsf3_pse+0x84>
    38c2:	86 95       	lsr	r24
    38c4:	77 95       	ror	r23
    38c6:	67 95       	ror	r22
    38c8:	b7 95       	ror	r27
    38ca:	f7 95       	ror	r31
    38cc:	e7 95       	ror	r30
    38ce:	9f 5f       	subi	r25, 0xFF	; 255
    38d0:	c1 f7       	brne	.-16     	; 0x38c2 <__mulsf3_pse+0x90>
    38d2:	fe 2b       	or	r31, r30
    38d4:	88 0f       	add	r24, r24
    38d6:	91 1d       	adc	r25, r1
    38d8:	96 95       	lsr	r25
    38da:	87 95       	ror	r24
    38dc:	97 f9       	bld	r25, 7
    38de:	08 95       	ret

000038e0 <__unordsf2>:
    38e0:	0e 94 89 1b 	call	0x3712	; 0x3712 <__fp_cmp>
    38e4:	88 0b       	sbc	r24, r24
    38e6:	99 0b       	sbc	r25, r25
    38e8:	08 95       	ret

000038ea <__udivmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    38ea:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    38ec:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    38ee:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    38f0:	07 c0       	rjmp	.+14     	; 0x3900 <__udivmodhi4_ep>

000038f2 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    38f2:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    38f4:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    38f6:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    38f8:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    38fa:	10 f0       	brcs	.+4      	; 0x3900 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    38fc:	a6 1b       	sub	r26, r22
__udivmodhi4_loop():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    38fe:	b7 0b       	sbc	r27, r23

00003900 <__udivmodhi4_ep>:
__udivmodhi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    3900:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    3902:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    3904:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    3906:	a9 f7       	brne	.-22     	; 0x38f2 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    3908:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    390a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    390c:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    390e:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    3910:	08 95       	ret

00003912 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    3912:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    3914:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    3916:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    3918:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    391a:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    391c:	0d c0       	rjmp	.+26     	; 0x3938 <__udivmodsi4_ep>

0000391e <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    391e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3920:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    3922:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    3924:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    3926:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    3928:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    392a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    392c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    392e:	20 f0       	brcs	.+8      	; 0x3938 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3930:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3932:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    3934:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    3936:	f5 0b       	sbc	r31, r21

00003938 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    3938:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    393a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    393c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    393e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3940:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3942:	69 f7       	brne	.-38     	; 0x391e <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    3944:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    3946:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    3948:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    394a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    394c:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    394e:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3950:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3952:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    3954:	08 95       	ret

00003956 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    3956:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    3958:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    395a:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    395c:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    395e:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    3960:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    3962:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    3964:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    3966:	09 94       	ijmp

00003968 <strcpy>:
strcpy():
    3968:	fb 01       	movw	r30, r22
    396a:	dc 01       	movw	r26, r24
    396c:	01 90       	ld	r0, Z+
    396e:	0d 92       	st	X+, r0
    3970:	00 20       	and	r0, r0
    3972:	e1 f7       	brne	.-8      	; 0x396c <strcpy+0x4>
    3974:	08 95       	ret

00003976 <sprintf>:
sprintf():
    3976:	0f 93       	push	r16
    3978:	1f 93       	push	r17
    397a:	cf 93       	push	r28
    397c:	df 93       	push	r29
    397e:	cd b7       	in	r28, 0x3d	; 61
    3980:	de b7       	in	r29, 0x3e	; 62
    3982:	2e 97       	sbiw	r28, 0x0e	; 14
    3984:	0f b6       	in	r0, 0x3f	; 63
    3986:	f8 94       	cli
    3988:	de bf       	out	0x3e, r29	; 62
    398a:	0f be       	out	0x3f, r0	; 63
    398c:	cd bf       	out	0x3d, r28	; 61
    398e:	0d 89       	ldd	r16, Y+21	; 0x15
    3990:	1e 89       	ldd	r17, Y+22	; 0x16
    3992:	86 e0       	ldi	r24, 0x06	; 6
    3994:	8c 83       	std	Y+4, r24	; 0x04
    3996:	1a 83       	std	Y+2, r17	; 0x02
    3998:	09 83       	std	Y+1, r16	; 0x01
    399a:	8f ef       	ldi	r24, 0xFF	; 255
    399c:	9f e7       	ldi	r25, 0x7F	; 127
    399e:	9e 83       	std	Y+6, r25	; 0x06
    39a0:	8d 83       	std	Y+5, r24	; 0x05
    39a2:	ae 01       	movw	r20, r28
    39a4:	47 5e       	subi	r20, 0xE7	; 231
    39a6:	5f 4f       	sbci	r21, 0xFF	; 255
    39a8:	6f 89       	ldd	r22, Y+23	; 0x17
    39aa:	78 8d       	ldd	r23, Y+24	; 0x18
    39ac:	ce 01       	movw	r24, r28
    39ae:	01 96       	adiw	r24, 0x01	; 1
    39b0:	0e 94 eb 1c 	call	0x39d6	; 0x39d6 <vfprintf>
    39b4:	2f 81       	ldd	r18, Y+7	; 0x07
    39b6:	38 85       	ldd	r19, Y+8	; 0x08
    39b8:	02 0f       	add	r16, r18
    39ba:	13 1f       	adc	r17, r19
    39bc:	f8 01       	movw	r30, r16
    39be:	10 82       	st	Z, r1
    39c0:	2e 96       	adiw	r28, 0x0e	; 14
    39c2:	0f b6       	in	r0, 0x3f	; 63
    39c4:	f8 94       	cli
    39c6:	de bf       	out	0x3e, r29	; 62
    39c8:	0f be       	out	0x3f, r0	; 63
    39ca:	cd bf       	out	0x3d, r28	; 61
    39cc:	df 91       	pop	r29
    39ce:	cf 91       	pop	r28
    39d0:	1f 91       	pop	r17
    39d2:	0f 91       	pop	r16
    39d4:	08 95       	ret

000039d6 <vfprintf>:
vfprintf():
    39d6:	2f 92       	push	r2
    39d8:	3f 92       	push	r3
    39da:	4f 92       	push	r4
    39dc:	5f 92       	push	r5
    39de:	6f 92       	push	r6
    39e0:	7f 92       	push	r7
    39e2:	8f 92       	push	r8
    39e4:	9f 92       	push	r9
    39e6:	af 92       	push	r10
    39e8:	bf 92       	push	r11
    39ea:	cf 92       	push	r12
    39ec:	df 92       	push	r13
    39ee:	ef 92       	push	r14
    39f0:	ff 92       	push	r15
    39f2:	0f 93       	push	r16
    39f4:	1f 93       	push	r17
    39f6:	cf 93       	push	r28
    39f8:	df 93       	push	r29
    39fa:	cd b7       	in	r28, 0x3d	; 61
    39fc:	de b7       	in	r29, 0x3e	; 62
    39fe:	2b 97       	sbiw	r28, 0x0b	; 11
    3a00:	0f b6       	in	r0, 0x3f	; 63
    3a02:	f8 94       	cli
    3a04:	de bf       	out	0x3e, r29	; 62
    3a06:	0f be       	out	0x3f, r0	; 63
    3a08:	cd bf       	out	0x3d, r28	; 61
    3a0a:	7c 01       	movw	r14, r24
    3a0c:	3b 01       	movw	r6, r22
    3a0e:	8a 01       	movw	r16, r20
    3a10:	fc 01       	movw	r30, r24
    3a12:	17 82       	std	Z+7, r1	; 0x07
    3a14:	16 82       	std	Z+6, r1	; 0x06
    3a16:	83 81       	ldd	r24, Z+3	; 0x03
    3a18:	81 ff       	sbrs	r24, 1
    3a1a:	dd c1       	rjmp	.+954    	; 0x3dd6 <vfprintf+0x400>
    3a1c:	ce 01       	movw	r24, r28
    3a1e:	01 96       	adiw	r24, 0x01	; 1
    3a20:	5c 01       	movw	r10, r24
    3a22:	f7 01       	movw	r30, r14
    3a24:	93 81       	ldd	r25, Z+3	; 0x03
    3a26:	f3 01       	movw	r30, r6
    3a28:	93 fd       	sbrc	r25, 3
    3a2a:	85 91       	lpm	r24, Z+
    3a2c:	93 ff       	sbrs	r25, 3
    3a2e:	81 91       	ld	r24, Z+
    3a30:	3f 01       	movw	r6, r30
    3a32:	88 23       	and	r24, r24
    3a34:	09 f4       	brne	.+2      	; 0x3a38 <vfprintf+0x62>
    3a36:	53 c1       	rjmp	.+678    	; 0x3cde <vfprintf+0x308>
    3a38:	85 32       	cpi	r24, 0x25	; 37
    3a3a:	39 f4       	brne	.+14     	; 0x3a4a <vfprintf+0x74>
    3a3c:	93 fd       	sbrc	r25, 3
    3a3e:	85 91       	lpm	r24, Z+
    3a40:	93 ff       	sbrs	r25, 3
    3a42:	81 91       	ld	r24, Z+
    3a44:	3f 01       	movw	r6, r30
    3a46:	85 32       	cpi	r24, 0x25	; 37
    3a48:	29 f4       	brne	.+10     	; 0x3a54 <vfprintf+0x7e>
    3a4a:	b7 01       	movw	r22, r14
    3a4c:	90 e0       	ldi	r25, 0x00	; 0
    3a4e:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <fputc>
    3a52:	e7 cf       	rjmp	.-50     	; 0x3a22 <vfprintf+0x4c>
    3a54:	91 2c       	mov	r9, r1
    3a56:	21 2c       	mov	r2, r1
    3a58:	31 2c       	mov	r3, r1
    3a5a:	ff e1       	ldi	r31, 0x1F	; 31
    3a5c:	f3 15       	cp	r31, r3
    3a5e:	38 f0       	brcs	.+14     	; 0x3a6e <vfprintf+0x98>
    3a60:	8b 32       	cpi	r24, 0x2B	; 43
    3a62:	11 f1       	breq	.+68     	; 0x3aa8 <vfprintf+0xd2>
    3a64:	90 f4       	brcc	.+36     	; 0x3a8a <vfprintf+0xb4>
    3a66:	80 32       	cpi	r24, 0x20	; 32
    3a68:	09 f1       	breq	.+66     	; 0x3aac <vfprintf+0xd6>
    3a6a:	83 32       	cpi	r24, 0x23	; 35
    3a6c:	29 f1       	breq	.+74     	; 0x3ab8 <vfprintf+0xe2>
    3a6e:	37 fc       	sbrc	r3, 7
    3a70:	3c c0       	rjmp	.+120    	; 0x3aea <vfprintf+0x114>
    3a72:	20 ed       	ldi	r18, 0xD0	; 208
    3a74:	28 0f       	add	r18, r24
    3a76:	2a 30       	cpi	r18, 0x0A	; 10
    3a78:	50 f5       	brcc	.+84     	; 0x3ace <vfprintf+0xf8>
    3a7a:	36 fe       	sbrs	r3, 6
    3a7c:	20 c0       	rjmp	.+64     	; 0x3abe <vfprintf+0xe8>
    3a7e:	8a e0       	ldi	r24, 0x0A	; 10
    3a80:	98 9e       	mul	r9, r24
    3a82:	20 0d       	add	r18, r0
    3a84:	11 24       	eor	r1, r1
    3a86:	92 2e       	mov	r9, r18
    3a88:	06 c0       	rjmp	.+12     	; 0x3a96 <vfprintf+0xc0>
    3a8a:	8d 32       	cpi	r24, 0x2D	; 45
    3a8c:	91 f0       	breq	.+36     	; 0x3ab2 <vfprintf+0xdc>
    3a8e:	80 33       	cpi	r24, 0x30	; 48
    3a90:	71 f7       	brne	.-36     	; 0x3a6e <vfprintf+0x98>
    3a92:	68 94       	set
    3a94:	30 f8       	bld	r3, 0
    3a96:	f3 01       	movw	r30, r6
    3a98:	93 fd       	sbrc	r25, 3
    3a9a:	85 91       	lpm	r24, Z+
    3a9c:	93 ff       	sbrs	r25, 3
    3a9e:	81 91       	ld	r24, Z+
    3aa0:	3f 01       	movw	r6, r30
    3aa2:	81 11       	cpse	r24, r1
    3aa4:	da cf       	rjmp	.-76     	; 0x3a5a <vfprintf+0x84>
    3aa6:	21 c0       	rjmp	.+66     	; 0x3aea <vfprintf+0x114>
    3aa8:	68 94       	set
    3aaa:	31 f8       	bld	r3, 1
    3aac:	68 94       	set
    3aae:	32 f8       	bld	r3, 2
    3ab0:	f2 cf       	rjmp	.-28     	; 0x3a96 <vfprintf+0xc0>
    3ab2:	68 94       	set
    3ab4:	33 f8       	bld	r3, 3
    3ab6:	ef cf       	rjmp	.-34     	; 0x3a96 <vfprintf+0xc0>
    3ab8:	68 94       	set
    3aba:	34 f8       	bld	r3, 4
    3abc:	ec cf       	rjmp	.-40     	; 0x3a96 <vfprintf+0xc0>
    3abe:	ea e0       	ldi	r30, 0x0A	; 10
    3ac0:	2e 9e       	mul	r2, r30
    3ac2:	20 0d       	add	r18, r0
    3ac4:	11 24       	eor	r1, r1
    3ac6:	22 2e       	mov	r2, r18
    3ac8:	68 94       	set
    3aca:	35 f8       	bld	r3, 5
    3acc:	e4 cf       	rjmp	.-56     	; 0x3a96 <vfprintf+0xc0>
    3ace:	8e 32       	cpi	r24, 0x2E	; 46
    3ad0:	29 f4       	brne	.+10     	; 0x3adc <vfprintf+0x106>
    3ad2:	36 fc       	sbrc	r3, 6
    3ad4:	04 c1       	rjmp	.+520    	; 0x3cde <vfprintf+0x308>
    3ad6:	68 94       	set
    3ad8:	36 f8       	bld	r3, 6
    3ada:	dd cf       	rjmp	.-70     	; 0x3a96 <vfprintf+0xc0>
    3adc:	8c 36       	cpi	r24, 0x6C	; 108
    3ade:	19 f4       	brne	.+6      	; 0x3ae6 <vfprintf+0x110>
    3ae0:	68 94       	set
    3ae2:	37 f8       	bld	r3, 7
    3ae4:	d8 cf       	rjmp	.-80     	; 0x3a96 <vfprintf+0xc0>
    3ae6:	88 36       	cpi	r24, 0x68	; 104
    3ae8:	b1 f2       	breq	.-84     	; 0x3a96 <vfprintf+0xc0>
    3aea:	98 2f       	mov	r25, r24
    3aec:	9f 7d       	andi	r25, 0xDF	; 223
    3aee:	95 54       	subi	r25, 0x45	; 69
    3af0:	93 30       	cpi	r25, 0x03	; 3
    3af2:	e0 f0       	brcs	.+56     	; 0x3b2c <vfprintf+0x156>
    3af4:	83 36       	cpi	r24, 0x63	; 99
    3af6:	a1 f1       	breq	.+104    	; 0x3b60 <vfprintf+0x18a>
    3af8:	83 37       	cpi	r24, 0x73	; 115
    3afa:	c1 f1       	breq	.+112    	; 0x3b6c <vfprintf+0x196>
    3afc:	83 35       	cpi	r24, 0x53	; 83
    3afe:	09 f0       	breq	.+2      	; 0x3b02 <vfprintf+0x12c>
    3b00:	63 c0       	rjmp	.+198    	; 0x3bc8 <vfprintf+0x1f2>
    3b02:	28 01       	movw	r4, r16
    3b04:	f2 e0       	ldi	r31, 0x02	; 2
    3b06:	4f 0e       	add	r4, r31
    3b08:	51 1c       	adc	r5, r1
    3b0a:	f8 01       	movw	r30, r16
    3b0c:	c0 80       	ld	r12, Z
    3b0e:	d1 80       	ldd	r13, Z+1	; 0x01
    3b10:	69 2d       	mov	r22, r9
    3b12:	70 e0       	ldi	r23, 0x00	; 0
    3b14:	36 fc       	sbrc	r3, 6
    3b16:	02 c0       	rjmp	.+4      	; 0x3b1c <vfprintf+0x146>
    3b18:	6f ef       	ldi	r22, 0xFF	; 255
    3b1a:	7f ef       	ldi	r23, 0xFF	; 255
    3b1c:	c6 01       	movw	r24, r12
    3b1e:	0e 94 ee 1e 	call	0x3ddc	; 0x3ddc <strnlen_P>
    3b22:	4c 01       	movw	r8, r24
    3b24:	68 94       	set
    3b26:	37 f8       	bld	r3, 7
    3b28:	82 01       	movw	r16, r4
    3b2a:	0a c0       	rjmp	.+20     	; 0x3b40 <vfprintf+0x16a>
    3b2c:	0c 5f       	subi	r16, 0xFC	; 252
    3b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3b30:	ff e3       	ldi	r31, 0x3F	; 63
    3b32:	f9 83       	std	Y+1, r31	; 0x01
    3b34:	88 24       	eor	r8, r8
    3b36:	83 94       	inc	r8
    3b38:	91 2c       	mov	r9, r1
    3b3a:	65 01       	movw	r12, r10
    3b3c:	e8 94       	clt
    3b3e:	37 f8       	bld	r3, 7
    3b40:	33 fe       	sbrs	r3, 3
    3b42:	2d c0       	rjmp	.+90     	; 0x3b9e <vfprintf+0x1c8>
    3b44:	52 2c       	mov	r5, r2
    3b46:	81 14       	cp	r8, r1
    3b48:	91 04       	cpc	r9, r1
    3b4a:	71 f5       	brne	.+92     	; 0x3ba8 <vfprintf+0x1d2>
    3b4c:	55 20       	and	r5, r5
    3b4e:	09 f4       	brne	.+2      	; 0x3b52 <vfprintf+0x17c>
    3b50:	68 cf       	rjmp	.-304    	; 0x3a22 <vfprintf+0x4c>
    3b52:	b7 01       	movw	r22, r14
    3b54:	80 e2       	ldi	r24, 0x20	; 32
    3b56:	90 e0       	ldi	r25, 0x00	; 0
    3b58:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <fputc>
    3b5c:	5a 94       	dec	r5
    3b5e:	f6 cf       	rjmp	.-20     	; 0x3b4c <vfprintf+0x176>
    3b60:	f8 01       	movw	r30, r16
    3b62:	80 81       	ld	r24, Z
    3b64:	89 83       	std	Y+1, r24	; 0x01
    3b66:	0e 5f       	subi	r16, 0xFE	; 254
    3b68:	1f 4f       	sbci	r17, 0xFF	; 255
    3b6a:	e4 cf       	rjmp	.-56     	; 0x3b34 <vfprintf+0x15e>
    3b6c:	28 01       	movw	r4, r16
    3b6e:	f2 e0       	ldi	r31, 0x02	; 2
    3b70:	4f 0e       	add	r4, r31
    3b72:	51 1c       	adc	r5, r1
    3b74:	f8 01       	movw	r30, r16
    3b76:	c0 80       	ld	r12, Z
    3b78:	d1 80       	ldd	r13, Z+1	; 0x01
    3b7a:	69 2d       	mov	r22, r9
    3b7c:	70 e0       	ldi	r23, 0x00	; 0
    3b7e:	36 fc       	sbrc	r3, 6
    3b80:	02 c0       	rjmp	.+4      	; 0x3b86 <vfprintf+0x1b0>
    3b82:	6f ef       	ldi	r22, 0xFF	; 255
    3b84:	7f ef       	ldi	r23, 0xFF	; 255
    3b86:	c6 01       	movw	r24, r12
    3b88:	0e 94 f9 1e 	call	0x3df2	; 0x3df2 <strnlen>
    3b8c:	4c 01       	movw	r8, r24
    3b8e:	82 01       	movw	r16, r4
    3b90:	d5 cf       	rjmp	.-86     	; 0x3b3c <vfprintf+0x166>
    3b92:	b7 01       	movw	r22, r14
    3b94:	80 e2       	ldi	r24, 0x20	; 32
    3b96:	90 e0       	ldi	r25, 0x00	; 0
    3b98:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <fputc>
    3b9c:	2a 94       	dec	r2
    3b9e:	28 14       	cp	r2, r8
    3ba0:	19 04       	cpc	r1, r9
    3ba2:	09 f0       	breq	.+2      	; 0x3ba6 <vfprintf+0x1d0>
    3ba4:	b0 f7       	brcc	.-20     	; 0x3b92 <vfprintf+0x1bc>
    3ba6:	ce cf       	rjmp	.-100    	; 0x3b44 <vfprintf+0x16e>
    3ba8:	f6 01       	movw	r30, r12
    3baa:	37 fc       	sbrc	r3, 7
    3bac:	85 91       	lpm	r24, Z+
    3bae:	37 fe       	sbrs	r3, 7
    3bb0:	81 91       	ld	r24, Z+
    3bb2:	6f 01       	movw	r12, r30
    3bb4:	b7 01       	movw	r22, r14
    3bb6:	90 e0       	ldi	r25, 0x00	; 0
    3bb8:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <fputc>
    3bbc:	51 10       	cpse	r5, r1
    3bbe:	5a 94       	dec	r5
    3bc0:	f1 e0       	ldi	r31, 0x01	; 1
    3bc2:	8f 1a       	sub	r8, r31
    3bc4:	91 08       	sbc	r9, r1
    3bc6:	bf cf       	rjmp	.-130    	; 0x3b46 <vfprintf+0x170>
    3bc8:	84 36       	cpi	r24, 0x64	; 100
    3bca:	19 f0       	breq	.+6      	; 0x3bd2 <vfprintf+0x1fc>
    3bcc:	89 36       	cpi	r24, 0x69	; 105
    3bce:	09 f0       	breq	.+2      	; 0x3bd2 <vfprintf+0x1fc>
    3bd0:	77 c0       	rjmp	.+238    	; 0x3cc0 <vfprintf+0x2ea>
    3bd2:	f8 01       	movw	r30, r16
    3bd4:	37 fe       	sbrs	r3, 7
    3bd6:	6b c0       	rjmp	.+214    	; 0x3cae <vfprintf+0x2d8>
    3bd8:	60 81       	ld	r22, Z
    3bda:	71 81       	ldd	r23, Z+1	; 0x01
    3bdc:	82 81       	ldd	r24, Z+2	; 0x02
    3bde:	93 81       	ldd	r25, Z+3	; 0x03
    3be0:	0c 5f       	subi	r16, 0xFC	; 252
    3be2:	1f 4f       	sbci	r17, 0xFF	; 255
    3be4:	f3 2d       	mov	r31, r3
    3be6:	ff 76       	andi	r31, 0x6F	; 111
    3be8:	3f 2e       	mov	r3, r31
    3bea:	97 ff       	sbrs	r25, 7
    3bec:	09 c0       	rjmp	.+18     	; 0x3c00 <vfprintf+0x22a>
    3bee:	90 95       	com	r25
    3bf0:	80 95       	com	r24
    3bf2:	70 95       	com	r23
    3bf4:	61 95       	neg	r22
    3bf6:	7f 4f       	sbci	r23, 0xFF	; 255
    3bf8:	8f 4f       	sbci	r24, 0xFF	; 255
    3bfa:	9f 4f       	sbci	r25, 0xFF	; 255
    3bfc:	68 94       	set
    3bfe:	37 f8       	bld	r3, 7
    3c00:	2a e0       	ldi	r18, 0x0A	; 10
    3c02:	30 e0       	ldi	r19, 0x00	; 0
    3c04:	a5 01       	movw	r20, r10
    3c06:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__ultoa_invert>
    3c0a:	c8 2e       	mov	r12, r24
    3c0c:	ca 18       	sub	r12, r10
    3c0e:	8c 2c       	mov	r8, r12
    3c10:	43 2c       	mov	r4, r3
    3c12:	36 fe       	sbrs	r3, 6
    3c14:	0c c0       	rjmp	.+24     	; 0x3c2e <vfprintf+0x258>
    3c16:	e8 94       	clt
    3c18:	40 f8       	bld	r4, 0
    3c1a:	c9 14       	cp	r12, r9
    3c1c:	40 f4       	brcc	.+16     	; 0x3c2e <vfprintf+0x258>
    3c1e:	34 fe       	sbrs	r3, 4
    3c20:	05 c0       	rjmp	.+10     	; 0x3c2c <vfprintf+0x256>
    3c22:	32 fc       	sbrc	r3, 2
    3c24:	03 c0       	rjmp	.+6      	; 0x3c2c <vfprintf+0x256>
    3c26:	f3 2d       	mov	r31, r3
    3c28:	fe 7e       	andi	r31, 0xEE	; 238
    3c2a:	4f 2e       	mov	r4, r31
    3c2c:	89 2c       	mov	r8, r9
    3c2e:	44 fe       	sbrs	r4, 4
    3c30:	aa c0       	rjmp	.+340    	; 0x3d86 <vfprintf+0x3b0>
    3c32:	fe 01       	movw	r30, r28
    3c34:	ec 0d       	add	r30, r12
    3c36:	f1 1d       	adc	r31, r1
    3c38:	80 81       	ld	r24, Z
    3c3a:	80 33       	cpi	r24, 0x30	; 48
    3c3c:	09 f0       	breq	.+2      	; 0x3c40 <vfprintf+0x26a>
    3c3e:	9c c0       	rjmp	.+312    	; 0x3d78 <vfprintf+0x3a2>
    3c40:	24 2d       	mov	r18, r4
    3c42:	29 7e       	andi	r18, 0xE9	; 233
    3c44:	42 2e       	mov	r4, r18
    3c46:	84 2d       	mov	r24, r4
    3c48:	88 70       	andi	r24, 0x08	; 8
    3c4a:	58 2e       	mov	r5, r24
    3c4c:	43 fc       	sbrc	r4, 3
    3c4e:	aa c0       	rjmp	.+340    	; 0x3da4 <vfprintf+0x3ce>
    3c50:	40 fe       	sbrs	r4, 0
    3c52:	a4 c0       	rjmp	.+328    	; 0x3d9c <vfprintf+0x3c6>
    3c54:	9c 2c       	mov	r9, r12
    3c56:	82 14       	cp	r8, r2
    3c58:	18 f4       	brcc	.+6      	; 0x3c60 <vfprintf+0x28a>
    3c5a:	2c 0c       	add	r2, r12
    3c5c:	92 2c       	mov	r9, r2
    3c5e:	98 18       	sub	r9, r8
    3c60:	44 fe       	sbrs	r4, 4
    3c62:	a6 c0       	rjmp	.+332    	; 0x3db0 <vfprintf+0x3da>
    3c64:	b7 01       	movw	r22, r14
    3c66:	80 e3       	ldi	r24, 0x30	; 48
    3c68:	90 e0       	ldi	r25, 0x00	; 0
    3c6a:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <fputc>
    3c6e:	42 fe       	sbrs	r4, 2
    3c70:	09 c0       	rjmp	.+18     	; 0x3c84 <vfprintf+0x2ae>
    3c72:	88 e7       	ldi	r24, 0x78	; 120
    3c74:	90 e0       	ldi	r25, 0x00	; 0
    3c76:	41 fe       	sbrs	r4, 1
    3c78:	02 c0       	rjmp	.+4      	; 0x3c7e <vfprintf+0x2a8>
    3c7a:	88 e5       	ldi	r24, 0x58	; 88
    3c7c:	90 e0       	ldi	r25, 0x00	; 0
    3c7e:	b7 01       	movw	r22, r14
    3c80:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <fputc>
    3c84:	c9 14       	cp	r12, r9
    3c86:	08 f4       	brcc	.+2      	; 0x3c8a <vfprintf+0x2b4>
    3c88:	9f c0       	rjmp	.+318    	; 0x3dc8 <vfprintf+0x3f2>
    3c8a:	ca 94       	dec	r12
    3c8c:	d1 2c       	mov	r13, r1
    3c8e:	9f ef       	ldi	r25, 0xFF	; 255
    3c90:	c9 1a       	sub	r12, r25
    3c92:	d9 0a       	sbc	r13, r25
    3c94:	ca 0c       	add	r12, r10
    3c96:	db 1c       	adc	r13, r11
    3c98:	f6 01       	movw	r30, r12
    3c9a:	82 91       	ld	r24, -Z
    3c9c:	6f 01       	movw	r12, r30
    3c9e:	b7 01       	movw	r22, r14
    3ca0:	90 e0       	ldi	r25, 0x00	; 0
    3ca2:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <fputc>
    3ca6:	ac 14       	cp	r10, r12
    3ca8:	bd 04       	cpc	r11, r13
    3caa:	b1 f7       	brne	.-20     	; 0x3c98 <vfprintf+0x2c2>
    3cac:	4f cf       	rjmp	.-354    	; 0x3b4c <vfprintf+0x176>
    3cae:	60 81       	ld	r22, Z
    3cb0:	71 81       	ldd	r23, Z+1	; 0x01
    3cb2:	07 2e       	mov	r0, r23
    3cb4:	00 0c       	add	r0, r0
    3cb6:	88 0b       	sbc	r24, r24
    3cb8:	99 0b       	sbc	r25, r25
    3cba:	0e 5f       	subi	r16, 0xFE	; 254
    3cbc:	1f 4f       	sbci	r17, 0xFF	; 255
    3cbe:	92 cf       	rjmp	.-220    	; 0x3be4 <vfprintf+0x20e>
    3cc0:	d3 2c       	mov	r13, r3
    3cc2:	e8 94       	clt
    3cc4:	d4 f8       	bld	r13, 4
    3cc6:	2a e0       	ldi	r18, 0x0A	; 10
    3cc8:	30 e0       	ldi	r19, 0x00	; 0
    3cca:	85 37       	cpi	r24, 0x75	; 117
    3ccc:	e1 f1       	breq	.+120    	; 0x3d46 <vfprintf+0x370>
    3cce:	23 2d       	mov	r18, r3
    3cd0:	29 7f       	andi	r18, 0xF9	; 249
    3cd2:	d2 2e       	mov	r13, r18
    3cd4:	8f 36       	cpi	r24, 0x6F	; 111
    3cd6:	a9 f1       	breq	.+106    	; 0x3d42 <vfprintf+0x36c>
    3cd8:	f0 f4       	brcc	.+60     	; 0x3d16 <vfprintf+0x340>
    3cda:	88 35       	cpi	r24, 0x58	; 88
    3cdc:	51 f1       	breq	.+84     	; 0x3d32 <vfprintf+0x35c>
    3cde:	f7 01       	movw	r30, r14
    3ce0:	86 81       	ldd	r24, Z+6	; 0x06
    3ce2:	97 81       	ldd	r25, Z+7	; 0x07
    3ce4:	2b 96       	adiw	r28, 0x0b	; 11
    3ce6:	0f b6       	in	r0, 0x3f	; 63
    3ce8:	f8 94       	cli
    3cea:	de bf       	out	0x3e, r29	; 62
    3cec:	0f be       	out	0x3f, r0	; 63
    3cee:	cd bf       	out	0x3d, r28	; 61
    3cf0:	df 91       	pop	r29
    3cf2:	cf 91       	pop	r28
    3cf4:	1f 91       	pop	r17
    3cf6:	0f 91       	pop	r16
    3cf8:	ff 90       	pop	r15
    3cfa:	ef 90       	pop	r14
    3cfc:	df 90       	pop	r13
    3cfe:	cf 90       	pop	r12
    3d00:	bf 90       	pop	r11
    3d02:	af 90       	pop	r10
    3d04:	9f 90       	pop	r9
    3d06:	8f 90       	pop	r8
    3d08:	7f 90       	pop	r7
    3d0a:	6f 90       	pop	r6
    3d0c:	5f 90       	pop	r5
    3d0e:	4f 90       	pop	r4
    3d10:	3f 90       	pop	r3
    3d12:	2f 90       	pop	r2
    3d14:	08 95       	ret
    3d16:	80 37       	cpi	r24, 0x70	; 112
    3d18:	49 f0       	breq	.+18     	; 0x3d2c <vfprintf+0x356>
    3d1a:	88 37       	cpi	r24, 0x78	; 120
    3d1c:	01 f7       	brne	.-64     	; 0x3cde <vfprintf+0x308>
    3d1e:	d4 fe       	sbrs	r13, 4
    3d20:	02 c0       	rjmp	.+4      	; 0x3d26 <vfprintf+0x350>
    3d22:	68 94       	set
    3d24:	d2 f8       	bld	r13, 2
    3d26:	20 e1       	ldi	r18, 0x10	; 16
    3d28:	30 e0       	ldi	r19, 0x00	; 0
    3d2a:	0d c0       	rjmp	.+26     	; 0x3d46 <vfprintf+0x370>
    3d2c:	68 94       	set
    3d2e:	d4 f8       	bld	r13, 4
    3d30:	f6 cf       	rjmp	.-20     	; 0x3d1e <vfprintf+0x348>
    3d32:	34 fe       	sbrs	r3, 4
    3d34:	03 c0       	rjmp	.+6      	; 0x3d3c <vfprintf+0x366>
    3d36:	82 2f       	mov	r24, r18
    3d38:	86 60       	ori	r24, 0x06	; 6
    3d3a:	d8 2e       	mov	r13, r24
    3d3c:	20 e1       	ldi	r18, 0x10	; 16
    3d3e:	32 e0       	ldi	r19, 0x02	; 2
    3d40:	02 c0       	rjmp	.+4      	; 0x3d46 <vfprintf+0x370>
    3d42:	28 e0       	ldi	r18, 0x08	; 8
    3d44:	30 e0       	ldi	r19, 0x00	; 0
    3d46:	f8 01       	movw	r30, r16
    3d48:	d7 fe       	sbrs	r13, 7
    3d4a:	0f c0       	rjmp	.+30     	; 0x3d6a <vfprintf+0x394>
    3d4c:	60 81       	ld	r22, Z
    3d4e:	71 81       	ldd	r23, Z+1	; 0x01
    3d50:	82 81       	ldd	r24, Z+2	; 0x02
    3d52:	93 81       	ldd	r25, Z+3	; 0x03
    3d54:	0c 5f       	subi	r16, 0xFC	; 252
    3d56:	1f 4f       	sbci	r17, 0xFF	; 255
    3d58:	a5 01       	movw	r20, r10
    3d5a:	0e 94 34 1f 	call	0x3e68	; 0x3e68 <__ultoa_invert>
    3d5e:	c8 2e       	mov	r12, r24
    3d60:	ca 18       	sub	r12, r10
    3d62:	3d 2c       	mov	r3, r13
    3d64:	e8 94       	clt
    3d66:	37 f8       	bld	r3, 7
    3d68:	52 cf       	rjmp	.-348    	; 0x3c0e <vfprintf+0x238>
    3d6a:	60 81       	ld	r22, Z
    3d6c:	71 81       	ldd	r23, Z+1	; 0x01
    3d6e:	90 e0       	ldi	r25, 0x00	; 0
    3d70:	80 e0       	ldi	r24, 0x00	; 0
    3d72:	0e 5f       	subi	r16, 0xFE	; 254
    3d74:	1f 4f       	sbci	r17, 0xFF	; 255
    3d76:	f0 cf       	rjmp	.-32     	; 0x3d58 <vfprintf+0x382>
    3d78:	42 fc       	sbrc	r4, 2
    3d7a:	02 c0       	rjmp	.+4      	; 0x3d80 <vfprintf+0x3aa>
    3d7c:	83 94       	inc	r8
    3d7e:	63 cf       	rjmp	.-314    	; 0x3c46 <vfprintf+0x270>
    3d80:	83 94       	inc	r8
    3d82:	83 94       	inc	r8
    3d84:	60 cf       	rjmp	.-320    	; 0x3c46 <vfprintf+0x270>
    3d86:	84 2d       	mov	r24, r4
    3d88:	86 78       	andi	r24, 0x86	; 134
    3d8a:	09 f4       	brne	.+2      	; 0x3d8e <vfprintf+0x3b8>
    3d8c:	5c cf       	rjmp	.-328    	; 0x3c46 <vfprintf+0x270>
    3d8e:	f6 cf       	rjmp	.-20     	; 0x3d7c <vfprintf+0x3a6>
    3d90:	b7 01       	movw	r22, r14
    3d92:	80 e2       	ldi	r24, 0x20	; 32
    3d94:	90 e0       	ldi	r25, 0x00	; 0
    3d96:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <fputc>
    3d9a:	83 94       	inc	r8
    3d9c:	82 14       	cp	r8, r2
    3d9e:	c0 f3       	brcs	.-16     	; 0x3d90 <vfprintf+0x3ba>
    3da0:	51 2c       	mov	r5, r1
    3da2:	5e cf       	rjmp	.-324    	; 0x3c60 <vfprintf+0x28a>
    3da4:	52 2c       	mov	r5, r2
    3da6:	58 18       	sub	r5, r8
    3da8:	82 14       	cp	r8, r2
    3daa:	08 f4       	brcc	.+2      	; 0x3dae <vfprintf+0x3d8>
    3dac:	59 cf       	rjmp	.-334    	; 0x3c60 <vfprintf+0x28a>
    3dae:	f8 cf       	rjmp	.-16     	; 0x3da0 <vfprintf+0x3ca>
    3db0:	84 2d       	mov	r24, r4
    3db2:	86 78       	andi	r24, 0x86	; 134
    3db4:	09 f4       	brne	.+2      	; 0x3db8 <vfprintf+0x3e2>
    3db6:	66 cf       	rjmp	.-308    	; 0x3c84 <vfprintf+0x2ae>
    3db8:	8b e2       	ldi	r24, 0x2B	; 43
    3dba:	41 fe       	sbrs	r4, 1
    3dbc:	80 e2       	ldi	r24, 0x20	; 32
    3dbe:	47 fc       	sbrc	r4, 7
    3dc0:	8d e2       	ldi	r24, 0x2D	; 45
    3dc2:	b7 01       	movw	r22, r14
    3dc4:	90 e0       	ldi	r25, 0x00	; 0
    3dc6:	5c cf       	rjmp	.-328    	; 0x3c80 <vfprintf+0x2aa>
    3dc8:	b7 01       	movw	r22, r14
    3dca:	80 e3       	ldi	r24, 0x30	; 48
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	0e 94 04 1f 	call	0x3e08	; 0x3e08 <fputc>
    3dd2:	9a 94       	dec	r9
    3dd4:	57 cf       	rjmp	.-338    	; 0x3c84 <vfprintf+0x2ae>
    3dd6:	8f ef       	ldi	r24, 0xFF	; 255
    3dd8:	9f ef       	ldi	r25, 0xFF	; 255
    3dda:	84 cf       	rjmp	.-248    	; 0x3ce4 <vfprintf+0x30e>

00003ddc <strnlen_P>:
strnlen_P():
    3ddc:	fc 01       	movw	r30, r24
    3dde:	05 90       	lpm	r0, Z+
    3de0:	61 50       	subi	r22, 0x01	; 1
    3de2:	70 40       	sbci	r23, 0x00	; 0
    3de4:	01 10       	cpse	r0, r1
    3de6:	d8 f7       	brcc	.-10     	; 0x3dde <strnlen_P+0x2>
    3de8:	80 95       	com	r24
    3dea:	90 95       	com	r25
    3dec:	8e 0f       	add	r24, r30
    3dee:	9f 1f       	adc	r25, r31
    3df0:	08 95       	ret

00003df2 <strnlen>:
strnlen():
    3df2:	fc 01       	movw	r30, r24
    3df4:	61 50       	subi	r22, 0x01	; 1
    3df6:	70 40       	sbci	r23, 0x00	; 0
    3df8:	01 90       	ld	r0, Z+
    3dfa:	01 10       	cpse	r0, r1
    3dfc:	d8 f7       	brcc	.-10     	; 0x3df4 <strnlen+0x2>
    3dfe:	80 95       	com	r24
    3e00:	90 95       	com	r25
    3e02:	8e 0f       	add	r24, r30
    3e04:	9f 1f       	adc	r25, r31
    3e06:	08 95       	ret

00003e08 <fputc>:
fputc():
    3e08:	0f 93       	push	r16
    3e0a:	1f 93       	push	r17
    3e0c:	cf 93       	push	r28
    3e0e:	df 93       	push	r29
    3e10:	18 2f       	mov	r17, r24
    3e12:	09 2f       	mov	r16, r25
    3e14:	eb 01       	movw	r28, r22
    3e16:	8b 81       	ldd	r24, Y+3	; 0x03
    3e18:	81 fd       	sbrc	r24, 1
    3e1a:	09 c0       	rjmp	.+18     	; 0x3e2e <fputc+0x26>
    3e1c:	1f ef       	ldi	r17, 0xFF	; 255
    3e1e:	0f ef       	ldi	r16, 0xFF	; 255
    3e20:	81 2f       	mov	r24, r17
    3e22:	90 2f       	mov	r25, r16
    3e24:	df 91       	pop	r29
    3e26:	cf 91       	pop	r28
    3e28:	1f 91       	pop	r17
    3e2a:	0f 91       	pop	r16
    3e2c:	08 95       	ret
    3e2e:	82 ff       	sbrs	r24, 2
    3e30:	14 c0       	rjmp	.+40     	; 0x3e5a <fputc+0x52>
    3e32:	2e 81       	ldd	r18, Y+6	; 0x06
    3e34:	3f 81       	ldd	r19, Y+7	; 0x07
    3e36:	8c 81       	ldd	r24, Y+4	; 0x04
    3e38:	9d 81       	ldd	r25, Y+5	; 0x05
    3e3a:	28 17       	cp	r18, r24
    3e3c:	39 07       	cpc	r19, r25
    3e3e:	3c f4       	brge	.+14     	; 0x3e4e <fputc+0x46>
    3e40:	e8 81       	ld	r30, Y
    3e42:	f9 81       	ldd	r31, Y+1	; 0x01
    3e44:	cf 01       	movw	r24, r30
    3e46:	01 96       	adiw	r24, 0x01	; 1
    3e48:	99 83       	std	Y+1, r25	; 0x01
    3e4a:	88 83       	st	Y, r24
    3e4c:	10 83       	st	Z, r17
    3e4e:	8e 81       	ldd	r24, Y+6	; 0x06
    3e50:	9f 81       	ldd	r25, Y+7	; 0x07
    3e52:	01 96       	adiw	r24, 0x01	; 1
    3e54:	9f 83       	std	Y+7, r25	; 0x07
    3e56:	8e 83       	std	Y+6, r24	; 0x06
    3e58:	e3 cf       	rjmp	.-58     	; 0x3e20 <fputc+0x18>
    3e5a:	e8 85       	ldd	r30, Y+8	; 0x08
    3e5c:	f9 85       	ldd	r31, Y+9	; 0x09
    3e5e:	81 2f       	mov	r24, r17
    3e60:	09 95       	icall
    3e62:	89 2b       	or	r24, r25
    3e64:	a1 f3       	breq	.-24     	; 0x3e4e <fputc+0x46>
    3e66:	da cf       	rjmp	.-76     	; 0x3e1c <fputc+0x14>

00003e68 <__ultoa_invert>:
__ultoa_invert():
    3e68:	fa 01       	movw	r30, r20
    3e6a:	aa 27       	eor	r26, r26
    3e6c:	28 30       	cpi	r18, 0x08	; 8
    3e6e:	51 f1       	breq	.+84     	; 0x3ec4 <__ultoa_invert+0x5c>
    3e70:	20 31       	cpi	r18, 0x10	; 16
    3e72:	81 f1       	breq	.+96     	; 0x3ed4 <__ultoa_invert+0x6c>
    3e74:	e8 94       	clt
    3e76:	6f 93       	push	r22
    3e78:	6e 7f       	andi	r22, 0xFE	; 254
    3e7a:	6e 5f       	subi	r22, 0xFE	; 254
    3e7c:	7f 4f       	sbci	r23, 0xFF	; 255
    3e7e:	8f 4f       	sbci	r24, 0xFF	; 255
    3e80:	9f 4f       	sbci	r25, 0xFF	; 255
    3e82:	af 4f       	sbci	r26, 0xFF	; 255
    3e84:	b1 e0       	ldi	r27, 0x01	; 1
    3e86:	3e d0       	rcall	.+124    	; 0x3f04 <__ultoa_invert+0x9c>
    3e88:	b4 e0       	ldi	r27, 0x04	; 4
    3e8a:	3c d0       	rcall	.+120    	; 0x3f04 <__ultoa_invert+0x9c>
    3e8c:	67 0f       	add	r22, r23
    3e8e:	78 1f       	adc	r23, r24
    3e90:	89 1f       	adc	r24, r25
    3e92:	9a 1f       	adc	r25, r26
    3e94:	a1 1d       	adc	r26, r1
    3e96:	68 0f       	add	r22, r24
    3e98:	79 1f       	adc	r23, r25
    3e9a:	8a 1f       	adc	r24, r26
    3e9c:	91 1d       	adc	r25, r1
    3e9e:	a1 1d       	adc	r26, r1
    3ea0:	6a 0f       	add	r22, r26
    3ea2:	71 1d       	adc	r23, r1
    3ea4:	81 1d       	adc	r24, r1
    3ea6:	91 1d       	adc	r25, r1
    3ea8:	a1 1d       	adc	r26, r1
    3eaa:	20 d0       	rcall	.+64     	; 0x3eec <__ultoa_invert+0x84>
    3eac:	09 f4       	brne	.+2      	; 0x3eb0 <__ultoa_invert+0x48>
    3eae:	68 94       	set
    3eb0:	3f 91       	pop	r19
    3eb2:	2a e0       	ldi	r18, 0x0A	; 10
    3eb4:	26 9f       	mul	r18, r22
    3eb6:	11 24       	eor	r1, r1
    3eb8:	30 19       	sub	r19, r0
    3eba:	30 5d       	subi	r19, 0xD0	; 208
    3ebc:	31 93       	st	Z+, r19
    3ebe:	de f6       	brtc	.-74     	; 0x3e76 <__ultoa_invert+0xe>
    3ec0:	cf 01       	movw	r24, r30
    3ec2:	08 95       	ret
    3ec4:	46 2f       	mov	r20, r22
    3ec6:	47 70       	andi	r20, 0x07	; 7
    3ec8:	40 5d       	subi	r20, 0xD0	; 208
    3eca:	41 93       	st	Z+, r20
    3ecc:	b3 e0       	ldi	r27, 0x03	; 3
    3ece:	0f d0       	rcall	.+30     	; 0x3eee <__ultoa_invert+0x86>
    3ed0:	c9 f7       	brne	.-14     	; 0x3ec4 <__ultoa_invert+0x5c>
    3ed2:	f6 cf       	rjmp	.-20     	; 0x3ec0 <__ultoa_invert+0x58>
    3ed4:	46 2f       	mov	r20, r22
    3ed6:	4f 70       	andi	r20, 0x0F	; 15
    3ed8:	40 5d       	subi	r20, 0xD0	; 208
    3eda:	4a 33       	cpi	r20, 0x3A	; 58
    3edc:	18 f0       	brcs	.+6      	; 0x3ee4 <__ultoa_invert+0x7c>
    3ede:	49 5d       	subi	r20, 0xD9	; 217
    3ee0:	31 fd       	sbrc	r19, 1
    3ee2:	40 52       	subi	r20, 0x20	; 32
    3ee4:	41 93       	st	Z+, r20
    3ee6:	02 d0       	rcall	.+4      	; 0x3eec <__ultoa_invert+0x84>
    3ee8:	a9 f7       	brne	.-22     	; 0x3ed4 <__ultoa_invert+0x6c>
    3eea:	ea cf       	rjmp	.-44     	; 0x3ec0 <__ultoa_invert+0x58>
    3eec:	b4 e0       	ldi	r27, 0x04	; 4
    3eee:	a6 95       	lsr	r26
    3ef0:	97 95       	ror	r25
    3ef2:	87 95       	ror	r24
    3ef4:	77 95       	ror	r23
    3ef6:	67 95       	ror	r22
    3ef8:	ba 95       	dec	r27
    3efa:	c9 f7       	brne	.-14     	; 0x3eee <__ultoa_invert+0x86>
    3efc:	00 97       	sbiw	r24, 0x00	; 0
    3efe:	61 05       	cpc	r22, r1
    3f00:	71 05       	cpc	r23, r1
    3f02:	08 95       	ret
    3f04:	9b 01       	movw	r18, r22
    3f06:	ac 01       	movw	r20, r24
    3f08:	0a 2e       	mov	r0, r26
    3f0a:	06 94       	lsr	r0
    3f0c:	57 95       	ror	r21
    3f0e:	47 95       	ror	r20
    3f10:	37 95       	ror	r19
    3f12:	27 95       	ror	r18
    3f14:	ba 95       	dec	r27
    3f16:	c9 f7       	brne	.-14     	; 0x3f0a <__ultoa_invert+0xa2>
    3f18:	62 0f       	add	r22, r18
    3f1a:	73 1f       	adc	r23, r19
    3f1c:	84 1f       	adc	r24, r20
    3f1e:	95 1f       	adc	r25, r21
    3f20:	a0 1d       	adc	r26, r0
    3f22:	08 95       	ret

00003f24 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    3f24:	f8 94       	cli

00003f26 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    3f26:	ff cf       	rjmp	.-2      	; 0x3f26 <__stop_program>
