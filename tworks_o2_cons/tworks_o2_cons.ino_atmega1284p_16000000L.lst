
C:\Users\habeeba\AppData\Local\Temp\arduino_build_499708/tworks_o2_cons.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 48 01 	jmp	0x290	; 0x290 <__ctors_end>
       4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
       8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
       c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      10:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      14:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      18:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      1c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      20:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      24:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      28:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      2c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      30:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      34:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__vector_13>
      38:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      3c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      40:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      44:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      48:	0c 94 82 18 	jmp	0x3104	; 0x3104 <__vector_18>
      4c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      50:	0c 94 a3 1b 	jmp	0x3746	; 0x3746 <__vector_20>
      54:	0c 94 d9 1b 	jmp	0x37b2	; 0x37b2 <__vector_21>
      58:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      5c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      60:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      64:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      68:	0c 94 5d 17 	jmp	0x2eba	; 0x2eba <__vector_26>
      6c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      70:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      74:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      78:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      7c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      80:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      84:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      88:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 40       	sbci	r16, 0x00	; 0
      8e:	7a 10       	cpse	r7, r10
      90:	f3 5a       	subi	r31, 0xA3	; 163
      92:	00 a0       	ldd	r0, Z+32	; 0x20
      94:	72 4e       	sbci	r23, 0xE2	; 226
      96:	18 09       	sbc	r17, r8
      98:	00 10       	cpse	r0, r0
      9a:	a5 d4       	rcall	.+2378   	; 0x9e6 <log_dump()+0x130>
      9c:	e8 00       	.word	0x00e8	; ????
      9e:	00 e8       	ldi	r16, 0x80	; 128
      a0:	76 48       	sbci	r23, 0x86	; 134
      a2:	17 00       	.word	0x0017	; ????
      a4:	00 e4       	ldi	r16, 0x40	; 64
      a6:	0b 54       	subi	r16, 0x4B	; 75
      a8:	02 00       	.word	0x0002	; ????
      aa:	00 ca       	rjmp	.-3072   	; 0xfffff4ac <__eeprom_end+0xff7ef4ac>
      ac:	9a 3b       	cpi	r25, 0xBA	; 186
      ae:	00 00       	nop
      b0:	00 e1       	ldi	r16, 0x10	; 16
      b2:	f5 05       	cpc	r31, r5
      b4:	00 00       	nop
      b6:	80 96       	adiw	r24, 0x20	; 32
      b8:	98 00       	.word	0x0098	; ????
      ba:	00 00       	nop
      bc:	40 42       	sbci	r20, 0x20	; 32
      be:	0f 00       	.word	0x000f	; ????
      c0:	00 00       	nop
      c2:	a0 86       	std	Z+8, r10	; 0x08
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	10 27       	eor	r17, r16
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	e8 03       	fmulsu	r22, r16
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	64 00       	.word	0x0064	; ????
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	0a 00       	.word	0x000a	; ????
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	01 00       	.word	0x0001	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	2c 76       	andi	r18, 0x6C	; 108
      e8:	d8 88       	ldd	r13, Y+16	; 0x10
      ea:	dc 67       	ori	r29, 0x7C	; 124
      ec:	4f 08       	sbc	r4, r15
      ee:	23 df       	rcall	.-442    	; 0xffffff36 <__eeprom_end+0xff7eff36>
      f0:	c1 df       	rcall	.-126    	; 0x74 <__SREG__+0x35>
      f2:	ae 59       	subi	r26, 0x9E	; 158
      f4:	e1 b1       	in	r30, 0x01	; 1
      f6:	b7 96       	adiw	r30, 0x27	; 39
      f8:	e5 e3       	ldi	r30, 0x35	; 53
      fa:	e4 53       	subi	r30, 0x34	; 52
      fc:	c6 3a       	cpi	r28, 0xA6	; 166
      fe:	e6 51       	subi	r30, 0x16	; 22
     100:	99 76       	andi	r25, 0x69	; 105
     102:	96 e8       	ldi	r25, 0x86	; 134
     104:	e6 c2       	rjmp	.+1484   	; 0x6d2 <display_run_hours(unsigned long)+0x102>
     106:	84 26       	eor	r8, r20
     108:	eb 89       	ldd	r30, Y+19	; 0x13
     10a:	8c 9b       	sbis	0x11, 4	; 17
     10c:	62 ed       	ldi	r22, 0xD2	; 210
     10e:	40 7c       	andi	r20, 0xC0	; 192
     110:	6f fc       	.word	0xfc6f	; ????
     112:	ef bc       	out	0x2f, r14	; 47
     114:	9c 9f       	mul	r25, r28
     116:	40 f2       	brcs	.-112    	; 0xa8 <__trampolines_end+0x1c>
     118:	ba a5       	ldd	r27, Y+42	; 0x2a
     11a:	6f a5       	ldd	r22, Y+47	; 0x2f
     11c:	f4 90       	lpm	r15, Z
     11e:	05 5a       	subi	r16, 0xA5	; 165
     120:	2a f7       	brpl	.-54     	; 0xec <__trampolines_end+0x60>
     122:	5c 93       	st	X, r21
     124:	6b 6c       	ori	r22, 0xCB	; 203
     126:	f9 67       	ori	r31, 0x79	; 121
     128:	6d c1       	rjmp	.+730    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     12a:	1b fc       	.word	0xfc1b	; ????
     12c:	e0 e4       	ldi	r30, 0x40	; 64
     12e:	0d 47       	sbci	r16, 0x7D	; 125
     130:	fe f5       	brtc	.+126    	; 0x1b0 <charTable+0x24>
     132:	20 e6       	ldi	r18, 0x60	; 96
     134:	b5 00       	.word	0x00b5	; ????
     136:	d0 ed       	ldi	r29, 0xD0	; 208
     138:	90 2e       	mov	r9, r16
     13a:	03 00       	.word	0x0003	; ????
     13c:	94 35       	cpi	r25, 0x54	; 84
     13e:	77 05       	cpc	r23, r7
     140:	00 80       	ld	r0, Z
     142:	84 1e       	adc	r8, r20
     144:	08 00       	.word	0x0008	; ????
     146:	00 20       	and	r0, r0
     148:	4e 0a       	sbc	r4, r30
     14a:	00 00       	nop
     14c:	00 c8       	rjmp	.-4096   	; 0xfffff14e <__eeprom_end+0xff7ef14e>
     14e:	0c 33       	cpi	r16, 0x3C	; 60
     150:	33 33       	cpi	r19, 0x33	; 51
     152:	33 0f       	add	r19, r19
     154:	98 6e       	ori	r25, 0xE8	; 232
     156:	12 83       	std	Z+2, r17	; 0x02
     158:	11 41       	sbci	r17, 0x11	; 17
     15a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     15c:	21 14       	cp	r2, r1
     15e:	89 3b       	cpi	r24, 0xB9	; 185
     160:	e6 55       	subi	r30, 0x56	; 86
     162:	16 cf       	rjmp	.-468    	; 0xffffff90 <__eeprom_end+0xff7eff90>
     164:	fe e6       	ldi	r31, 0x6E	; 110
     166:	db 18       	sub	r13, r11
     168:	d1 84       	ldd	r13, Z+9	; 0x09
     16a:	4b 38       	cpi	r20, 0x8B	; 139
     16c:	1b f7       	brvc	.-58     	; 0x134 <__trampolines_end+0xa8>
     16e:	7c 1d       	adc	r23, r12
     170:	90 1d       	adc	r25, r0
     172:	a4 bb       	out	0x14, r26	; 20
     174:	e4 24       	eor	r14, r4
     176:	20 32       	cpi	r18, 0x20	; 32
     178:	84 72       	andi	r24, 0x24	; 36
     17a:	5e 22       	and	r5, r30
     17c:	81 00       	.word	0x0081	; ????
     17e:	c9 f1       	breq	.+114    	; 0x1f2 <charTable+0x66>
     180:	24 ec       	ldi	r18, 0xC4	; 196
     182:	a1 e5       	ldi	r26, 0x51	; 81
     184:	3d 27       	eor	r19, r29

00000186 <ads_init()::__c>:
     186:	30 2e 33 2e 31 00                                   0.3.1.

0000018c <charTable>:
     18c:	7e 30 6d 79 33 5b 5f 70 7f 7b 77 1f 0d 3d 4f 47     ~0my3[_p.{w..=OG
	...
     1b8:	80 01 80 00 7e 30 6d 79 33 5b 5f 70 7f 7b 00 00     ....~0my3[_p.{..
     1c8:	00 00 00 00 00 77 1f 0d 3d 4f 47 00 37 00 00 00     .....w..=OG.7...
     1d8:	0e 00 00 00 67 00 00 00 00 00 00 00 00 00 00 00     ....g...........
     1e8:	00 00 00 08 00 77 1f 0d 3d 4f 47 00 37 00 00 00     .....w..=OG.7...
     1f8:	0e 00 15 1d 67 00 00 00 00 00 00 00 00 00 00 00     ....g...........
     208:	00 00 00 00                                         ....

0000020c <digital_pin_to_timer_PGM>:
     20c:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

0000022c <digital_pin_to_bit_mask_PGM>:
     22c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     23c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

0000024c <digital_pin_to_port_PGM>:
     24c:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     25c:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

0000026c <port_to_input_PGM>:
     26c:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

00000276 <port_to_output_PGM>:
     276:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

00000280 <port_to_mode_PGM>:
     280:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

0000028a <__ctors_start>:
__ctors_start():
     28a:	29 10       	cpse	r2, r9
     28c:	4e 16       	cp	r4, r30
     28e:	0d 1c       	adc	r0, r13

00000290 <__ctors_end>:
__dtors_end():
     290:	11 24       	eor	r1, r1
     292:	1f be       	out	0x3f, r1	; 63
     294:	cf ef       	ldi	r28, 0xFF	; 255
     296:	d0 e4       	ldi	r29, 0x40	; 64
     298:	de bf       	out	0x3e, r29	; 62
     29a:	cd bf       	out	0x3d, r28	; 61

0000029c <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     29c:	15 e0       	ldi	r17, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     29e:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     2a0:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     2a2:	ec e2       	ldi	r30, 0x2C	; 44
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     2a4:	fd e4       	ldi	r31, 0x4D	; 77
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     2a6:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     2a8:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     2ac:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     2ae:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     2b0:	a2 36       	cpi	r26, 0x62	; 98
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     2b2:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     2b4:	d9 f7       	brne	.-10     	; 0x2ac <__do_copy_data+0x10>

000002b6 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     2b6:	27 e0       	ldi	r18, 0x07	; 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     2b8:	a2 e6       	ldi	r26, 0x62	; 98
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     2ba:	b5 e0       	ldi	r27, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <.do_clear_bss_start>

000002be <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     2be:	1d 92       	st	X+, r1

000002c0 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     2c0:	a5 3c       	cpi	r26, 0xC5	; 197
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     2c2:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     2c4:	e1 f7       	brne	.-8      	; 0x2be <.do_clear_bss_loop>

000002c6 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     2c6:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     2c8:	c8 e4       	ldi	r28, 0x48	; 72
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     2ca:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     2ce:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     2d0:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     2d2:	0e 94 3b 21 	call	0x4276	; 0x4276 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     2d6:	c5 34       	cpi	r28, 0x45	; 69
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     2d8:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     2da:	c9 f7       	brne	.-14     	; 0x2ce <__do_global_ctors+0x8>
     2dc:	0e 94 ba 1e 	call	0x3d74	; 0x3d74 <main>
     2e0:	0c 94 94 26 	jmp	0x4d28	; 0x4d28 <_exit>

000002e4 <__bad_interrupt>:
__vector_22():
     2e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e8 <lcd_clear_buf(char*)>:
_Z13lcd_clear_bufPc():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:36
}

void ui_init (void) {

    // Print a message to the LCD.
    ui_print_welcome ();
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	49 f0       	breq	.+18     	; 0x2fe <lcd_clear_buf(char*)+0x16>
     2ec:	fc 01       	movw	r30, r24
     2ee:	9c 01       	movw	r18, r24
     2f0:	2c 5e       	subi	r18, 0xEC	; 236
     2f2:	3f 4f       	sbci	r19, 0xFF	; 255
     2f4:	40 e2       	ldi	r20, 0x20	; 32
     2f6:	41 93       	st	Z+, r20
     2f8:	2e 17       	cp	r18, r30
     2fa:	3f 07       	cpc	r19, r31
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <lcd_clear_buf(char*)+0xe>
     2fe:	fc 01       	movw	r30, r24
     300:	14 8a       	std	Z+20, r1	; 0x14
     302:	08 95       	ret

00000304 <init_7segments()>:
_Z14init_7segmentsv():
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	8b ee       	ldi	r24, 0xEB	; 235
     30c:	95 e0       	ldi	r25, 0x05	; 5
     30e:	0e 94 3a 12 	call	0x2474	; 0x2474 <LedControl::shutdown(int, bool)>
     312:	48 e0       	ldi	r20, 0x08	; 8
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	8b ee       	ldi	r24, 0xEB	; 235
     31c:	95 e0       	ldi	r25, 0x05	; 5
     31e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LedControl::setIntensity(int, int)>
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	8b ee       	ldi	r24, 0xEB	; 235
     328:	95 e0       	ldi	r25, 0x05	; 5
     32a:	0c 94 70 12 	jmp	0x24e0	; 0x24e0 <LedControl::clearDisplay(int)>

0000032e <display_banner()>:
_Z14display_bannerv():
     32e:	20 e1       	ldi	r18, 0x10	; 16
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	8b ee       	ldi	r24, 0xEB	; 235
     33a:	95 e0       	ldi	r25, 0x05	; 5
     33c:	0e 94 28 13 	call	0x2650	; 0x2650 <LedControl::setRow(int, int, unsigned char)>
     340:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     344:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     348:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     34c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     350:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <delay>
     354:	20 e1       	ldi	r18, 0x10	; 16
     356:	41 e0       	ldi	r20, 0x01	; 1
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	8b ee       	ldi	r24, 0xEB	; 235
     360:	95 e0       	ldi	r25, 0x05	; 5
     362:	0e 94 28 13 	call	0x2650	; 0x2650 <LedControl::setRow(int, int, unsigned char)>
     366:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     36a:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     36e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     372:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     376:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <delay>
     37a:	20 e1       	ldi	r18, 0x10	; 16
     37c:	42 e0       	ldi	r20, 0x02	; 2
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	8b ee       	ldi	r24, 0xEB	; 235
     386:	95 e0       	ldi	r25, 0x05	; 5
     388:	0e 94 28 13 	call	0x2650	; 0x2650 <LedControl::setRow(int, int, unsigned char)>
     38c:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     390:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     394:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     398:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     39c:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <delay>
     3a0:	20 e1       	ldi	r18, 0x10	; 16
     3a2:	43 e0       	ldi	r20, 0x03	; 3
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	8b ee       	ldi	r24, 0xEB	; 235
     3ac:	95 e0       	ldi	r25, 0x05	; 5
     3ae:	0e 94 28 13 	call	0x2650	; 0x2650 <LedControl::setRow(int, int, unsigned char)>
     3b2:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     3b6:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     3ba:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     3be:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     3c2:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <delay>
     3c6:	20 e1       	ldi	r18, 0x10	; 16
     3c8:	44 e0       	ldi	r20, 0x04	; 4
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	8b ee       	ldi	r24, 0xEB	; 235
     3d2:	95 e0       	ldi	r25, 0x05	; 5
     3d4:	0e 94 28 13 	call	0x2650	; 0x2650 <LedControl::setRow(int, int, unsigned char)>
     3d8:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     3dc:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     3e0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     3e4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     3e8:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <delay>
     3ec:	20 e1       	ldi	r18, 0x10	; 16
     3ee:	45 e0       	ldi	r20, 0x05	; 5
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	8b ee       	ldi	r24, 0xEB	; 235
     3f8:	95 e0       	ldi	r25, 0x05	; 5
     3fa:	0e 94 28 13 	call	0x2650	; 0x2650 <LedControl::setRow(int, int, unsigned char)>
     3fe:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     402:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     406:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     40a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     40e:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <delay>
     412:	20 e1       	ldi	r18, 0x10	; 16
     414:	46 e0       	ldi	r20, 0x06	; 6
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	8b ee       	ldi	r24, 0xEB	; 235
     41e:	95 e0       	ldi	r25, 0x05	; 5
     420:	0e 94 28 13 	call	0x2650	; 0x2650 <LedControl::setRow(int, int, unsigned char)>
     424:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     428:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     42c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     430:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     434:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <delay>
     438:	20 e1       	ldi	r18, 0x10	; 16
     43a:	47 e0       	ldi	r20, 0x07	; 7
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	8b ee       	ldi	r24, 0xEB	; 235
     444:	95 e0       	ldi	r25, 0x05	; 5
     446:	0e 94 28 13 	call	0x2650	; 0x2650 <LedControl::setRow(int, int, unsigned char)>
     44a:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     44e:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     452:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     456:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     45a:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <delay>

0000045e <scrollDigits()>:
_Z12scrollDigitsv():
     45e:	0f 93       	push	r16
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd e0       	ldi	r28, 0x0D	; 13
     466:	d0 e0       	ldi	r29, 0x00	; 0
     468:	00 e0       	ldi	r16, 0x00	; 0
     46a:	28 e0       	ldi	r18, 0x08	; 8
     46c:	47 e0       	ldi	r20, 0x07	; 7
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	8b ee       	ldi	r24, 0xEB	; 235
     476:	95 e0       	ldi	r25, 0x05	; 5
     478:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     47c:	28 e0       	ldi	r18, 0x08	; 8
     47e:	46 e0       	ldi	r20, 0x06	; 6
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	8b ee       	ldi	r24, 0xEB	; 235
     488:	95 e0       	ldi	r25, 0x05	; 5
     48a:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     48e:	28 e0       	ldi	r18, 0x08	; 8
     490:	45 e0       	ldi	r20, 0x05	; 5
     492:	50 e0       	ldi	r21, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	8b ee       	ldi	r24, 0xEB	; 235
     49a:	95 e0       	ldi	r25, 0x05	; 5
     49c:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     4a0:	28 e0       	ldi	r18, 0x08	; 8
     4a2:	44 e0       	ldi	r20, 0x04	; 4
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	8b ee       	ldi	r24, 0xEB	; 235
     4ac:	95 e0       	ldi	r25, 0x05	; 5
     4ae:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     4b2:	28 e0       	ldi	r18, 0x08	; 8
     4b4:	43 e0       	ldi	r20, 0x03	; 3
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	8b ee       	ldi	r24, 0xEB	; 235
     4be:	95 e0       	ldi	r25, 0x05	; 5
     4c0:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     4c4:	28 e0       	ldi	r18, 0x08	; 8
     4c6:	42 e0       	ldi	r20, 0x02	; 2
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	8b ee       	ldi	r24, 0xEB	; 235
     4d0:	95 e0       	ldi	r25, 0x05	; 5
     4d2:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     4d6:	28 e0       	ldi	r18, 0x08	; 8
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	8b ee       	ldi	r24, 0xEB	; 235
     4e2:	95 e0       	ldi	r25, 0x05	; 5
     4e4:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     4e8:	28 e0       	ldi	r18, 0x08	; 8
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	40 e0       	ldi	r20, 0x00	; 0
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	8b ee       	ldi	r24, 0xEB	; 235
     4f4:	95 e0       	ldi	r25, 0x05	; 5
     4f6:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     4fa:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     4fe:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     502:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     506:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     50a:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <delay>
     50e:	21 97       	sbiw	r28, 0x01	; 1
     510:	09 f0       	breq	.+2      	; 0x514 <scrollDigits()+0xb6>
     512:	aa cf       	rjmp	.-172    	; 0x468 <scrollDigits()+0xa>
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	8b ee       	ldi	r24, 0xEB	; 235
     51a:	95 e0       	ldi	r25, 0x05	; 5
     51c:	0e 94 70 12 	call	0x24e0	; 0x24e0 <LedControl::clearDisplay(int)>
     520:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     524:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     528:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     52c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	0f 91       	pop	r16
     536:	0c 94 f1 18 	jmp	0x31e2	; 0x31e2 <delay>

0000053a <test_7segments()>:
_Z14test_7segmentsv():
     53a:	0e 94 97 01 	call	0x32e	; 0x32e <display_banner()>
     53e:	0c 94 2f 02 	jmp	0x45e	; 0x45e <scrollDigits()>

00000542 <display_o2(float)>:
_Z10display_o2f():
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 e2       	ldi	r20, 0x20	; 32
     552:	51 e4       	ldi	r21, 0x41	; 65
     554:	0e 94 93 20 	call	0x4126	; 0x4126 <__mulsf3>
     558:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__fixunssfsi>
     55c:	eb 01       	movw	r28, r22
     55e:	cb 01       	movw	r24, r22
     560:	64 e6       	ldi	r22, 0x64	; 100
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
     568:	cb 01       	movw	r24, r22
     56a:	2a e0       	ldi	r18, 0x0A	; 10
     56c:	e2 2e       	mov	r14, r18
     56e:	f1 2c       	mov	r15, r1
     570:	b7 01       	movw	r22, r14
     572:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
     576:	00 e0       	ldi	r16, 0x00	; 0
     578:	28 2f       	mov	r18, r24
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	8b ee       	ldi	r24, 0xEB	; 235
     584:	95 e0       	ldi	r25, 0x05	; 5
     586:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     58a:	ce 01       	movw	r24, r28
     58c:	b7 01       	movw	r22, r14
     58e:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
     592:	c8 2f       	mov	r28, r24
     594:	cb 01       	movw	r24, r22
     596:	b7 01       	movw	r22, r14
     598:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
     59c:	01 e0       	ldi	r16, 0x01	; 1
     59e:	28 2f       	mov	r18, r24
     5a0:	41 e0       	ldi	r20, 0x01	; 1
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	8b ee       	ldi	r24, 0xEB	; 235
     5aa:	95 e0       	ldi	r25, 0x05	; 5
     5ac:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     5b0:	00 e0       	ldi	r16, 0x00	; 0
     5b2:	2c 2f       	mov	r18, r28
     5b4:	42 e0       	ldi	r20, 0x02	; 2
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	8b ee       	ldi	r24, 0xEB	; 235
     5be:	95 e0       	ldi	r25, 0x05	; 5
     5c0:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <display_run_hours(unsigned long)>:
_Z17display_run_hoursm():
     5d0:	4f 92       	push	r4
     5d2:	5f 92       	push	r5
     5d4:	6f 92       	push	r6
     5d6:	7f 92       	push	r7
     5d8:	8f 92       	push	r8
     5da:	9f 92       	push	r9
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	4b 01       	movw	r8, r22
     5f2:	5c 01       	movw	r10, r24
     5f4:	8a e0       	ldi	r24, 0x0A	; 10
     5f6:	c8 2e       	mov	r12, r24
     5f8:	d1 2c       	mov	r13, r1
     5fa:	e1 2c       	mov	r14, r1
     5fc:	f1 2c       	mov	r15, r1
     5fe:	c5 01       	movw	r24, r10
     600:	a7 01       	movw	r20, r14
     602:	96 01       	movw	r18, r12
     604:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
     608:	76 2e       	mov	r7, r22
     60a:	ca 01       	movw	r24, r20
     60c:	b9 01       	movw	r22, r18
     60e:	a7 01       	movw	r20, r14
     610:	96 01       	movw	r18, r12
     612:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
     616:	c6 2f       	mov	r28, r22
     618:	66 2e       	mov	r6, r22
     61a:	c5 01       	movw	r24, r10
     61c:	b4 01       	movw	r22, r8
     61e:	24 e6       	ldi	r18, 0x64	; 100
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	40 e0       	ldi	r20, 0x00	; 0
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
     62a:	ca 01       	movw	r24, r20
     62c:	b9 01       	movw	r22, r18
     62e:	a7 01       	movw	r20, r14
     630:	96 01       	movw	r18, r12
     632:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
     636:	d6 2f       	mov	r29, r22
     638:	56 2e       	mov	r5, r22
     63a:	c5 01       	movw	r24, r10
     63c:	b4 01       	movw	r22, r8
     63e:	28 ee       	ldi	r18, 0xE8	; 232
     640:	33 e0       	ldi	r19, 0x03	; 3
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
     64a:	ca 01       	movw	r24, r20
     64c:	b9 01       	movw	r22, r18
     64e:	a7 01       	movw	r20, r14
     650:	96 01       	movw	r18, r12
     652:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
     656:	16 2f       	mov	r17, r22
     658:	46 2e       	mov	r4, r22
     65a:	c5 01       	movw	r24, r10
     65c:	b4 01       	movw	r22, r8
     65e:	20 e1       	ldi	r18, 0x10	; 16
     660:	37 e2       	ldi	r19, 0x27	; 39
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
     66a:	ca 01       	movw	r24, r20
     66c:	b9 01       	movw	r22, r18
     66e:	a7 01       	movw	r20, r14
     670:	96 01       	movw	r18, r12
     672:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
     676:	f6 2e       	mov	r15, r22
     678:	00 e0       	ldi	r16, 0x00	; 0
     67a:	26 2f       	mov	r18, r22
     67c:	43 e0       	ldi	r20, 0x03	; 3
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	8b ee       	ldi	r24, 0xEB	; 235
     686:	95 e0       	ldi	r25, 0x05	; 5
     688:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     68c:	21 2f       	mov	r18, r17
     68e:	44 e0       	ldi	r20, 0x04	; 4
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	8b ee       	ldi	r24, 0xEB	; 235
     698:	95 e0       	ldi	r25, 0x05	; 5
     69a:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     69e:	2d 2f       	mov	r18, r29
     6a0:	45 e0       	ldi	r20, 0x05	; 5
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	8b ee       	ldi	r24, 0xEB	; 235
     6aa:	95 e0       	ldi	r25, 0x05	; 5
     6ac:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     6b0:	2c 2f       	mov	r18, r28
     6b2:	46 e0       	ldi	r20, 0x06	; 6
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	8b ee       	ldi	r24, 0xEB	; 235
     6bc:	95 e0       	ldi	r25, 0x05	; 5
     6be:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     6c2:	27 2d       	mov	r18, r7
     6c4:	47 e0       	ldi	r20, 0x07	; 7
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	8b ee       	ldi	r24, 0xEB	; 235
     6ce:	95 e0       	ldi	r25, 0x05	; 5
     6d0:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     6d4:	ff 20       	and	r15, r15
     6d6:	09 f4       	brne	.+2      	; 0x6da <display_run_hours(unsigned long)+0x10a>
     6d8:	4b c0       	rjmp	.+150    	; 0x770 <display_run_hours(unsigned long)+0x1a0>
     6da:	2f 2d       	mov	r18, r15
     6dc:	43 e0       	ldi	r20, 0x03	; 3
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	8b ee       	ldi	r24, 0xEB	; 235
     6e6:	95 e0       	ldi	r25, 0x05	; 5
     6e8:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     6ec:	44 20       	and	r4, r4
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <display_run_hours(unsigned long)+0x122>
     6f0:	49 c0       	rjmp	.+146    	; 0x784 <display_run_hours(unsigned long)+0x1b4>
     6f2:	00 e0       	ldi	r16, 0x00	; 0
     6f4:	21 2f       	mov	r18, r17
     6f6:	44 e0       	ldi	r20, 0x04	; 4
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	8b ee       	ldi	r24, 0xEB	; 235
     700:	95 e0       	ldi	r25, 0x05	; 5
     702:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     706:	55 20       	and	r5, r5
     708:	09 f4       	brne	.+2      	; 0x70c <display_run_hours(unsigned long)+0x13c>
     70a:	46 c0       	rjmp	.+140    	; 0x798 <display_run_hours(unsigned long)+0x1c8>
     70c:	00 e0       	ldi	r16, 0x00	; 0
     70e:	2d 2f       	mov	r18, r29
     710:	45 e0       	ldi	r20, 0x05	; 5
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	8b ee       	ldi	r24, 0xEB	; 235
     71a:	95 e0       	ldi	r25, 0x05	; 5
     71c:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     720:	66 20       	and	r6, r6
     722:	09 f4       	brne	.+2      	; 0x726 <display_run_hours(unsigned long)+0x156>
     724:	43 c0       	rjmp	.+134    	; 0x7ac <display_run_hours(unsigned long)+0x1dc>
     726:	00 e0       	ldi	r16, 0x00	; 0
     728:	2c 2f       	mov	r18, r28
     72a:	46 e0       	ldi	r20, 0x06	; 6
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	8b ee       	ldi	r24, 0xEB	; 235
     734:	95 e0       	ldi	r25, 0x05	; 5
     736:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     73a:	00 e0       	ldi	r16, 0x00	; 0
     73c:	27 2d       	mov	r18, r7
     73e:	47 e0       	ldi	r20, 0x07	; 7
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	8b ee       	ldi	r24, 0xEB	; 235
     748:	95 e0       	ldi	r25, 0x05	; 5
     74a:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	bf 90       	pop	r11
     760:	af 90       	pop	r10
     762:	9f 90       	pop	r9
     764:	8f 90       	pop	r8
     766:	7f 90       	pop	r7
     768:	6f 90       	pop	r6
     76a:	5f 90       	pop	r5
     76c:	4f 90       	pop	r4
     76e:	08 95       	ret
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	43 e0       	ldi	r20, 0x03	; 3
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	8b ee       	ldi	r24, 0xEB	; 235
     77c:	95 e0       	ldi	r25, 0x05	; 5
     77e:	0e 94 28 13 	call	0x2650	; 0x2650 <LedControl::setRow(int, int, unsigned char)>
     782:	b4 cf       	rjmp	.-152    	; 0x6ec <display_run_hours(unsigned long)+0x11c>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	44 e0       	ldi	r20, 0x04	; 4
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	8b ee       	ldi	r24, 0xEB	; 235
     790:	95 e0       	ldi	r25, 0x05	; 5
     792:	0e 94 28 13 	call	0x2650	; 0x2650 <LedControl::setRow(int, int, unsigned char)>
     796:	b7 cf       	rjmp	.-146    	; 0x706 <display_run_hours(unsigned long)+0x136>
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	45 e0       	ldi	r20, 0x05	; 5
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	8b ee       	ldi	r24, 0xEB	; 235
     7a4:	95 e0       	ldi	r25, 0x05	; 5
     7a6:	0e 94 28 13 	call	0x2650	; 0x2650 <LedControl::setRow(int, int, unsigned char)>
     7aa:	ba cf       	rjmp	.-140    	; 0x720 <display_run_hours(unsigned long)+0x150>
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	46 e0       	ldi	r20, 0x06	; 6
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	8b ee       	ldi	r24, 0xEB	; 235
     7b8:	95 e0       	ldi	r25, 0x05	; 5
     7ba:	0e 94 28 13 	call	0x2650	; 0x2650 <LedControl::setRow(int, int, unsigned char)>
     7be:	bd cf       	rjmp	.-134    	; 0x73a <display_run_hours(unsigned long)+0x16a>

000007c0 <display_run_time(unsigned int, unsigned int)>:
_Z16display_run_timejj():
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	9c 01       	movw	r18, r24
     7ce:	cb 01       	movw	r24, r22
     7d0:	6c e3       	ldi	r22, 0x3C	; 60
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
     7d8:	ec 01       	movw	r28, r24
     7da:	c9 01       	movw	r24, r18
     7dc:	67 ee       	ldi	r22, 0xE7	; 231
     7de:	73 e0       	ldi	r23, 0x03	; 3
     7e0:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
     7e4:	fc 01       	movw	r30, r24
     7e6:	2a e0       	ldi	r18, 0x0A	; 10
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	ce 01       	movw	r24, r28
     7ec:	b9 01       	movw	r22, r18
     7ee:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
     7f2:	16 2f       	mov	r17, r22
     7f4:	d8 2f       	mov	r29, r24
     7f6:	cf 01       	movw	r24, r30
     7f8:	b9 01       	movw	r22, r18
     7fa:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
     7fe:	f8 2e       	mov	r15, r24
     800:	cb 01       	movw	r24, r22
     802:	b9 01       	movw	r22, r18
     804:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
     808:	c8 2f       	mov	r28, r24
     80a:	e8 2e       	mov	r14, r24
     80c:	cf 01       	movw	r24, r30
     80e:	64 e6       	ldi	r22, 0x64	; 100
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
     816:	26 2f       	mov	r18, r22
     818:	66 23       	and	r22, r22
     81a:	c9 f1       	breq	.+114    	; 0x88e <display_run_time(unsigned int, unsigned int)+0xce>
     81c:	00 e0       	ldi	r16, 0x00	; 0
     81e:	43 e0       	ldi	r20, 0x03	; 3
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	8b ee       	ldi	r24, 0xEB	; 235
     828:	95 e0       	ldi	r25, 0x05	; 5
     82a:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     82e:	ee 20       	and	r14, r14
     830:	c1 f1       	breq	.+112    	; 0x8a2 <display_run_time(unsigned int, unsigned int)+0xe2>
     832:	00 e0       	ldi	r16, 0x00	; 0
     834:	2c 2f       	mov	r18, r28
     836:	44 e0       	ldi	r20, 0x04	; 4
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	8b ee       	ldi	r24, 0xEB	; 235
     840:	95 e0       	ldi	r25, 0x05	; 5
     842:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     846:	01 e0       	ldi	r16, 0x01	; 1
     848:	2f 2d       	mov	r18, r15
     84a:	45 e0       	ldi	r20, 0x05	; 5
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	8b ee       	ldi	r24, 0xEB	; 235
     854:	95 e0       	ldi	r25, 0x05	; 5
     856:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     85a:	00 e0       	ldi	r16, 0x00	; 0
     85c:	21 2f       	mov	r18, r17
     85e:	46 e0       	ldi	r20, 0x06	; 6
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	8b ee       	ldi	r24, 0xEB	; 235
     868:	95 e0       	ldi	r25, 0x05	; 5
     86a:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     86e:	2d 2f       	mov	r18, r29
     870:	47 e0       	ldi	r20, 0x07	; 7
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	8b ee       	ldi	r24, 0xEB	; 235
     87a:	95 e0       	ldi	r25, 0x05	; 5
     87c:	0e 94 45 13 	call	0x268a	; 0x268a <LedControl::setDigit(int, int, unsigned char, bool)>
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	08 95       	ret
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	43 e0       	ldi	r20, 0x03	; 3
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	8b ee       	ldi	r24, 0xEB	; 235
     89a:	95 e0       	ldi	r25, 0x05	; 5
     89c:	0e 94 28 13 	call	0x2650	; 0x2650 <LedControl::setRow(int, int, unsigned char)>
     8a0:	c6 cf       	rjmp	.-116    	; 0x82e <display_run_time(unsigned int, unsigned int)+0x6e>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	44 e0       	ldi	r20, 0x04	; 4
     8a6:	50 e0       	ldi	r21, 0x00	; 0
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	8b ee       	ldi	r24, 0xEB	; 235
     8ae:	95 e0       	ldi	r25, 0x05	; 5
     8b0:	0e 94 28 13 	call	0x2650	; 0x2650 <LedControl::setRow(int, int, unsigned char)>
     8b4:	c8 cf       	rjmp	.-112    	; 0x846 <display_run_time(unsigned int, unsigned int)+0x86>

000008b6 <log_dump()>:
_Z8log_dumpv():
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	20 91 df 05 	lds	r18, 0x05DF	; 0x8005df <systemtick_secs>
     8c2:	90 91 de 05 	lds	r25, 0x05DE	; 0x8005de <systemtick_mins>
     8c6:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <systemtick_hrs>
     8ca:	1f 92       	push	r1
     8cc:	2f 93       	push	r18
     8ce:	1f 92       	push	r1
     8d0:	9f 93       	push	r25
     8d2:	1f 92       	push	r1
     8d4:	8f 93       	push	r24
     8d6:	08 e2       	ldi	r16, 0x28	; 40
     8d8:	11 e0       	ldi	r17, 0x01	; 1
     8da:	1f 93       	push	r17
     8dc:	0f 93       	push	r16
     8de:	ce e8       	ldi	r28, 0x8E	; 142
     8e0:	d5 e0       	ldi	r29, 0x05	; 5
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	0e 94 69 21 	call	0x42d2	; 0x42d2 <sprintf>
     8ea:	be 01       	movw	r22, r28
     8ec:	88 e2       	ldi	r24, 0x28	; 40
     8ee:	97 e0       	ldi	r25, 0x07	; 7
     8f0:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     8f4:	e0 91 cc 05 	lds	r30, 0x05CC	; 0x8005cc <current_run_time_secs>
     8f8:	f0 91 cd 05 	lds	r31, 0x05CD	; 0x8005cd <current_run_time_secs+0x1>
     8fc:	2c e3       	ldi	r18, 0x3C	; 60
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	cf 01       	movw	r24, r30
     902:	b9 01       	movw	r22, r18
     904:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
     908:	9f 93       	push	r25
     90a:	8f 93       	push	r24
     90c:	cf 01       	movw	r24, r30
     90e:	60 e1       	ldi	r22, 0x10	; 16
     910:	7e e0       	ldi	r23, 0x0E	; 14
     912:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
     916:	46 2f       	mov	r20, r22
     918:	e7 2f       	mov	r30, r23
     91a:	b9 01       	movw	r22, r18
     91c:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
     920:	7f 93       	push	r23
     922:	6f 93       	push	r22
     924:	ef 93       	push	r30
     926:	4f 93       	push	r20
     928:	1f 93       	push	r17
     92a:	0f 93       	push	r16
     92c:	df 93       	push	r29
     92e:	cf 93       	push	r28
     930:	0e 94 69 21 	call	0x42d2	; 0x42d2 <sprintf>
     934:	be 01       	movw	r22, r28
     936:	88 e2       	ldi	r24, 0x28	; 40
     938:	97 e0       	ldi	r25, 0x07	; 7
     93a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     93e:	40 91 c2 05 	lds	r20, 0x05C2	; 0x8005c2 <Production_Delay>
     942:	50 91 c3 05 	lds	r21, 0x05C3	; 0x8005c3 <Production_Delay+0x1>
     946:	60 91 c4 05 	lds	r22, 0x05C4	; 0x8005c4 <Production_Delay+0x2>
     94a:	70 91 c5 05 	lds	r23, 0x05C5	; 0x8005c5 <Production_Delay+0x3>
     94e:	2a e0       	ldi	r18, 0x0A	; 10
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	88 e2       	ldi	r24, 0x28	; 40
     954:	97 e0       	ldi	r25, 0x07	; 7
     956:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <Print::print(unsigned long, int)>
     95a:	67 e7       	ldi	r22, 0x77	; 119
     95c:	73 e0       	ldi	r23, 0x03	; 3
     95e:	88 e2       	ldi	r24, 0x28	; 40
     960:	97 e0       	ldi	r25, 0x07	; 7
     962:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     966:	40 91 be 05 	lds	r20, 0x05BE	; 0x8005be <Flush_Delay>
     96a:	50 91 bf 05 	lds	r21, 0x05BF	; 0x8005bf <Flush_Delay+0x1>
     96e:	60 91 c0 05 	lds	r22, 0x05C0	; 0x8005c0 <Flush_Delay+0x2>
     972:	70 91 c1 05 	lds	r23, 0x05C1	; 0x8005c1 <Flush_Delay+0x3>
     976:	2a e0       	ldi	r18, 0x0A	; 10
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	88 e2       	ldi	r24, 0x28	; 40
     97c:	97 e0       	ldi	r25, 0x07	; 7
     97e:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <Print::print(unsigned long, int)>
     982:	67 e7       	ldi	r22, 0x77	; 119
     984:	73 e0       	ldi	r23, 0x03	; 3
     986:	88 e2       	ldi	r24, 0x28	; 40
     988:	97 e0       	ldi	r25, 0x07	; 7
     98a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     98e:	40 91 ba 05 	lds	r20, 0x05BA	; 0x8005ba <PreCharge_Delay>
     992:	50 91 bb 05 	lds	r21, 0x05BB	; 0x8005bb <PreCharge_Delay+0x1>
     996:	60 91 bc 05 	lds	r22, 0x05BC	; 0x8005bc <PreCharge_Delay+0x2>
     99a:	70 91 bd 05 	lds	r23, 0x05BD	; 0x8005bd <PreCharge_Delay+0x3>
     99e:	2a e0       	ldi	r18, 0x0A	; 10
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	88 e2       	ldi	r24, 0x28	; 40
     9a4:	97 e0       	ldi	r25, 0x07	; 7
     9a6:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <Print::print(unsigned long, int)>
     9aa:	67 e7       	ldi	r22, 0x77	; 119
     9ac:	73 e0       	ldi	r23, 0x03	; 3
     9ae:	88 e2       	ldi	r24, 0x28	; 40
     9b0:	97 e0       	ldi	r25, 0x07	; 7
     9b2:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     9b6:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <do_byte>
     9ba:	82 fb       	bst	r24, 2
     9bc:	99 27       	eor	r25, r25
     9be:	90 f9       	bld	r25, 0
     9c0:	1f 92       	push	r1
     9c2:	9f 93       	push	r25
     9c4:	81 fb       	bst	r24, 1
     9c6:	99 27       	eor	r25, r25
     9c8:	90 f9       	bld	r25, 0
     9ca:	1f 92       	push	r1
     9cc:	9f 93       	push	r25
     9ce:	81 70       	andi	r24, 0x01	; 1
     9d0:	1f 92       	push	r1
     9d2:	8f 93       	push	r24
     9d4:	08 e3       	ldi	r16, 0x38	; 56
     9d6:	11 e0       	ldi	r17, 0x01	; 1
     9d8:	1f 93       	push	r17
     9da:	0f 93       	push	r16
     9dc:	df 93       	push	r29
     9de:	cf 93       	push	r28
     9e0:	0e 94 69 21 	call	0x42d2	; 0x42d2 <sprintf>
     9e4:	be 01       	movw	r22, r28
     9e6:	88 e2       	ldi	r24, 0x28	; 40
     9e8:	97 e0       	ldi	r25, 0x07	; 7
     9ea:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     9ee:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <o2_raw_adc_count>
     9f2:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <o2_raw_adc_count+0x1>
     9f6:	4a e0       	ldi	r20, 0x0A	; 10
     9f8:	50 e0       	ldi	r21, 0x00	; 0
     9fa:	88 e2       	ldi	r24, 0x28	; 40
     9fc:	97 e0       	ldi	r25, 0x07	; 7
     9fe:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <Print::print(int, int)>
     a02:	67 e7       	ldi	r22, 0x77	; 119
     a04:	73 e0       	ldi	r23, 0x03	; 3
     a06:	88 e2       	ldi	r24, 0x28	; 40
     a08:	97 e0       	ldi	r25, 0x07	; 7
     a0a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     a0e:	40 91 a3 05 	lds	r20, 0x05A3	; 0x8005a3 <m_raw_voltage>
     a12:	50 91 a4 05 	lds	r21, 0x05A4	; 0x8005a4 <m_raw_voltage+0x1>
     a16:	60 91 a5 05 	lds	r22, 0x05A5	; 0x8005a5 <m_raw_voltage+0x2>
     a1a:	70 91 a6 05 	lds	r23, 0x05A6	; 0x8005a6 <m_raw_voltage+0x3>
     a1e:	22 e0       	ldi	r18, 0x02	; 2
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	88 e2       	ldi	r24, 0x28	; 40
     a24:	97 e0       	ldi	r25, 0x07	; 7
     a26:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <Print::print(double, int)>
     a2a:	67 e7       	ldi	r22, 0x77	; 119
     a2c:	73 e0       	ldi	r23, 0x03	; 3
     a2e:	88 e2       	ldi	r24, 0x28	; 40
     a30:	97 e0       	ldi	r25, 0x07	; 7
     a32:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     a36:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <o2_concentration>
     a3a:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <o2_concentration+0x1>
     a3e:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <o2_concentration+0x2>
     a42:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <o2_concentration+0x3>
     a46:	22 e0       	ldi	r18, 0x02	; 2
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	88 e2       	ldi	r24, 0x28	; 40
     a4c:	97 e0       	ldi	r25, 0x07	; 7
     a4e:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <Print::print(double, int)>
     a52:	67 e7       	ldi	r22, 0x77	; 119
     a54:	73 e0       	ldi	r23, 0x03	; 3
     a56:	88 e2       	ldi	r24, 0x28	; 40
     a58:	97 e0       	ldi	r25, 0x07	; 7
     a5a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     a5e:	1f 92       	push	r1
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	8f 93       	push	r24
     a64:	1f 92       	push	r1
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	8f 93       	push	r24
     a6a:	1f 92       	push	r1
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	8f 93       	push	r24
     a70:	1f 93       	push	r17
     a72:	0f 93       	push	r16
     a74:	df 93       	push	r29
     a76:	cf 93       	push	r28
     a78:	0e 94 69 21 	call	0x42d2	; 0x42d2 <sprintf>
     a7c:	8d b7       	in	r24, 0x3d	; 61
     a7e:	9e b7       	in	r25, 0x3e	; 62
     a80:	88 96       	adiw	r24, 0x28	; 40
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	9e bf       	out	0x3e, r25	; 62
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	8d bf       	out	0x3d, r24	; 61
     a8c:	be 01       	movw	r22, r28
     a8e:	88 e2       	ldi	r24, 0x28	; 40
     a90:	97 e0       	ldi	r25, 0x07	; 7
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	0c 94 bf 1c 	jmp	0x397e	; 0x397e <Print::println(char const*)>

00000a9e <logs_task()>:
_Z9logs_taskv():
     a9e:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <f_sec_logs_task>
     aa2:	88 23       	and	r24, r24
     aa4:	a9 f0       	breq	.+42     	; 0xad0 <logs_task()+0x32>
     aa6:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <f_sec_logs_task>
     aaa:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <logs_task()::log_period>
     aae:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <logs_task()::log_period+0x1>
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	91 05       	cpc	r25, r1
     ab8:	2c f4       	brge	.+10     	; 0xac4 <logs_task()+0x26>
     aba:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <logs_task()::log_period+0x1>
     abe:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <logs_task()::log_period>
     ac2:	08 95       	ret
     ac4:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <logs_task()::log_period+0x1>
     ac8:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <logs_task()::log_period>
     acc:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <log_dump()>
     ad0:	08 95       	ret

00000ad2 <ads_init()>:
_Z8ads_initv():
     ad2:	62 e4       	ldi	r22, 0x42	; 66
     ad4:	71 e0       	ldi	r23, 0x01	; 1
     ad6:	88 e2       	ldi	r24, 0x28	; 40
     ad8:	97 e0       	ldi	r25, 0x07	; 7
     ada:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     ade:	66 e8       	ldi	r22, 0x86	; 134
     ae0:	71 e0       	ldi	r23, 0x01	; 1
     ae2:	88 e2       	ldi	r24, 0x28	; 40
     ae4:	97 e0       	ldi	r25, 0x07	; 7
     ae6:	0e 94 ad 1c 	call	0x395a	; 0x395a <Print::println(__FlashStringHelper const*)>
     aea:	86 e7       	ldi	r24, 0x76	; 118
     aec:	95 e0       	ldi	r25, 0x05	; 5
     aee:	0e 94 82 13 	call	0x2704	; 0x2704 <ADS1X15::begin()>
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	86 e7       	ldi	r24, 0x76	; 118
     af6:	95 e0       	ldi	r25, 0x05	; 5
     af8:	0e 94 96 13 	call	0x272c	; 0x272c <ADS1X15::setGain(unsigned char)>
     afc:	67 e0       	ldi	r22, 0x07	; 7
     afe:	86 e7       	ldi	r24, 0x76	; 118
     b00:	95 e0       	ldi	r25, 0x05	; 5
     b02:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <ADS1X15::setDataRate(unsigned char)>
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	86 e7       	ldi	r24, 0x76	; 118
     b0a:	95 e0       	ldi	r25, 0x05	; 5
     b0c:	0e 94 d7 13 	call	0x27ae	; 0x27ae <ADS1X15::setMode(unsigned char)>
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	86 e7       	ldi	r24, 0x76	; 118
     b14:	95 e0       	ldi	r25, 0x05	; 5
     b16:	0c 94 d2 14 	jmp	0x29a4	; 0x29a4 <ADS1X15::readADC(unsigned char)>

00000b1a <sensor_zero_calibration()>:
_Z23sensor_zero_calibrationv():
     b1a:	4f 92       	push	r4
     b1c:	5f 92       	push	r5
     b1e:	6f 92       	push	r6
     b20:	7f 92       	push	r7
     b22:	8f 92       	push	r8
     b24:	9f 92       	push	r9
     b26:	af 92       	push	r10
     b28:	bf 92       	push	r11
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2e 97       	sbiw	r28, 0x0e	; 14
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8c e0       	ldi	r24, 0x0C	; 12
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	9e 87       	std	Y+14, r25	; 0x0e
     b50:	8d 87       	std	Y+13, r24	; 0x0d
     b52:	00 e0       	ldi	r16, 0x00	; 0
     b54:	11 e0       	ldi	r17, 0x01	; 1
     b56:	19 86       	std	Y+9, r1	; 0x09
     b58:	1a 86       	std	Y+10, r1	; 0x0a
     b5a:	1b 86       	std	Y+11, r1	; 0x0b
     b5c:	1c 86       	std	Y+12, r1	; 0x0c
     b5e:	1d 82       	std	Y+5, r1	; 0x05
     b60:	1e 82       	std	Y+6, r1	; 0x06
     b62:	1f 82       	std	Y+7, r1	; 0x07
     b64:	18 86       	std	Y+8, r1	; 0x08
     b66:	19 82       	std	Y+1, r1	; 0x01
     b68:	1a 82       	std	Y+2, r1	; 0x02
     b6a:	1b 82       	std	Y+3, r1	; 0x03
     b6c:	1c 82       	std	Y+4, r1	; 0x04
     b6e:	c1 2c       	mov	r12, r1
     b70:	d1 2c       	mov	r13, r1
     b72:	76 01       	movw	r14, r12
     b74:	ed 85       	ldd	r30, Y+13	; 0x0d
     b76:	fe 85       	ldd	r31, Y+14	; 0x0e
     b78:	41 90       	ld	r4, Z+
     b7a:	51 90       	ld	r5, Z+
     b7c:	61 90       	ld	r6, Z+
     b7e:	71 90       	ld	r7, Z+
     b80:	fe 87       	std	Y+14, r31	; 0x0e
     b82:	ed 87       	std	Y+13, r30	; 0x0d
     b84:	f8 01       	movw	r30, r16
     b86:	81 90       	ld	r8, Z+
     b88:	91 90       	ld	r9, Z+
     b8a:	a1 90       	ld	r10, Z+
     b8c:	b1 90       	ld	r11, Z+
     b8e:	8f 01       	movw	r16, r30
     b90:	a5 01       	movw	r20, r10
     b92:	94 01       	movw	r18, r8
     b94:	c7 01       	movw	r24, r14
     b96:	b6 01       	movw	r22, r12
     b98:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__addsf3>
     b9c:	6b 01       	movw	r12, r22
     b9e:	7c 01       	movw	r14, r24
     ba0:	a3 01       	movw	r20, r6
     ba2:	92 01       	movw	r18, r4
     ba4:	69 81       	ldd	r22, Y+1	; 0x01
     ba6:	7a 81       	ldd	r23, Y+2	; 0x02
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	9c 81       	ldd	r25, Y+4	; 0x04
     bac:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__addsf3>
     bb0:	69 83       	std	Y+1, r22	; 0x01
     bb2:	7a 83       	std	Y+2, r23	; 0x02
     bb4:	8b 83       	std	Y+3, r24	; 0x03
     bb6:	9c 83       	std	Y+4, r25	; 0x04
     bb8:	a5 01       	movw	r20, r10
     bba:	94 01       	movw	r18, r8
     bbc:	c5 01       	movw	r24, r10
     bbe:	b4 01       	movw	r22, r8
     bc0:	0e 94 93 20 	call	0x4126	; 0x4126 <__mulsf3>
     bc4:	9b 01       	movw	r18, r22
     bc6:	ac 01       	movw	r20, r24
     bc8:	6d 81       	ldd	r22, Y+5	; 0x05
     bca:	7e 81       	ldd	r23, Y+6	; 0x06
     bcc:	8f 81       	ldd	r24, Y+7	; 0x07
     bce:	98 85       	ldd	r25, Y+8	; 0x08
     bd0:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__addsf3>
     bd4:	6d 83       	std	Y+5, r22	; 0x05
     bd6:	7e 83       	std	Y+6, r23	; 0x06
     bd8:	8f 83       	std	Y+7, r24	; 0x07
     bda:	98 87       	std	Y+8, r25	; 0x08
     bdc:	a5 01       	movw	r20, r10
     bde:	94 01       	movw	r18, r8
     be0:	c3 01       	movw	r24, r6
     be2:	b2 01       	movw	r22, r4
     be4:	0e 94 93 20 	call	0x4126	; 0x4126 <__mulsf3>
     be8:	9b 01       	movw	r18, r22
     bea:	ac 01       	movw	r20, r24
     bec:	69 85       	ldd	r22, Y+9	; 0x09
     bee:	7a 85       	ldd	r23, Y+10	; 0x0a
     bf0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bf4:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__addsf3>
     bf8:	69 87       	std	Y+9, r22	; 0x09
     bfa:	7a 87       	std	Y+10, r23	; 0x0a
     bfc:	8b 87       	std	Y+11, r24	; 0x0b
     bfe:	9c 87       	std	Y+12, r25	; 0x0c
     c00:	68 e5       	ldi	r22, 0x58	; 88
     c02:	71 e0       	ldi	r23, 0x01	; 1
     c04:	88 e2       	ldi	r24, 0x28	; 40
     c06:	97 e0       	ldi	r25, 0x07	; 7
     c08:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     c0c:	22 e0       	ldi	r18, 0x02	; 2
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	b5 01       	movw	r22, r10
     c12:	a4 01       	movw	r20, r8
     c14:	88 e2       	ldi	r24, 0x28	; 40
     c16:	97 e0       	ldi	r25, 0x07	; 7
     c18:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <Print::print(double, int)>
     c1c:	6d e5       	ldi	r22, 0x5D	; 93
     c1e:	71 e0       	ldi	r23, 0x01	; 1
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	97 e0       	ldi	r25, 0x07	; 7
     c24:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     c28:	22 e0       	ldi	r18, 0x02	; 2
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	b3 01       	movw	r22, r6
     c2e:	a2 01       	movw	r20, r4
     c30:	88 e2       	ldi	r24, 0x28	; 40
     c32:	97 e0       	ldi	r25, 0x07	; 7
     c34:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <Print::println(double, int)>
     c38:	64 e6       	ldi	r22, 0x64	; 100
     c3a:	71 e0       	ldi	r23, 0x01	; 1
     c3c:	88 e2       	ldi	r24, 0x28	; 40
     c3e:	97 e0       	ldi	r25, 0x07	; 7
     c40:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     c44:	22 e0       	ldi	r18, 0x02	; 2
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	b7 01       	movw	r22, r14
     c4a:	a6 01       	movw	r20, r12
     c4c:	88 e2       	ldi	r24, 0x28	; 40
     c4e:	97 e0       	ldi	r25, 0x07	; 7
     c50:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <Print::print(double, int)>
     c54:	6e e6       	ldi	r22, 0x6E	; 110
     c56:	71 e0       	ldi	r23, 0x01	; 1
     c58:	88 e2       	ldi	r24, 0x28	; 40
     c5a:	97 e0       	ldi	r25, 0x07	; 7
     c5c:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     c60:	22 e0       	ldi	r18, 0x02	; 2
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	49 81       	ldd	r20, Y+1	; 0x01
     c66:	5a 81       	ldd	r21, Y+2	; 0x02
     c68:	6b 81       	ldd	r22, Y+3	; 0x03
     c6a:	7c 81       	ldd	r23, Y+4	; 0x04
     c6c:	88 e2       	ldi	r24, 0x28	; 40
     c6e:	97 e0       	ldi	r25, 0x07	; 7
     c70:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <Print::println(double, int)>
     c74:	6a e7       	ldi	r22, 0x7A	; 122
     c76:	71 e0       	ldi	r23, 0x01	; 1
     c78:	88 e2       	ldi	r24, 0x28	; 40
     c7a:	97 e0       	ldi	r25, 0x07	; 7
     c7c:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     c80:	22 e0       	ldi	r18, 0x02	; 2
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	4d 81       	ldd	r20, Y+5	; 0x05
     c86:	5e 81       	ldd	r21, Y+6	; 0x06
     c88:	6f 81       	ldd	r22, Y+7	; 0x07
     c8a:	78 85       	ldd	r23, Y+8	; 0x08
     c8c:	88 e2       	ldi	r24, 0x28	; 40
     c8e:	97 e0       	ldi	r25, 0x07	; 7
     c90:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <Print::print(double, int)>
     c94:	65 e8       	ldi	r22, 0x85	; 133
     c96:	71 e0       	ldi	r23, 0x01	; 1
     c98:	88 e2       	ldi	r24, 0x28	; 40
     c9a:	97 e0       	ldi	r25, 0x07	; 7
     c9c:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     ca0:	22 e0       	ldi	r18, 0x02	; 2
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	49 85       	ldd	r20, Y+9	; 0x09
     ca6:	5a 85       	ldd	r21, Y+10	; 0x0a
     ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
     caa:	7c 85       	ldd	r23, Y+12	; 0x0c
     cac:	88 e2       	ldi	r24, 0x28	; 40
     cae:	97 e0       	ldi	r25, 0x07	; 7
     cb0:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <Print::println(double, int)>
     cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb8:	88 51       	subi	r24, 0x18	; 24
     cba:	91 40       	sbci	r25, 0x01	; 1
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <sensor_zero_calibration()+0x1a6>
     cbe:	5a cf       	rjmp	.-332    	; 0xb74 <sensor_zero_calibration()+0x5a>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e4       	ldi	r20, 0x40	; 64
     cc6:	50 e4       	ldi	r21, 0x40	; 64
     cc8:	6d 81       	ldd	r22, Y+5	; 0x05
     cca:	7e 81       	ldd	r23, Y+6	; 0x06
     ccc:	8f 81       	ldd	r24, Y+7	; 0x07
     cce:	98 85       	ldd	r25, Y+8	; 0x08
     cd0:	0e 94 93 20 	call	0x4126	; 0x4126 <__mulsf3>
     cd4:	4b 01       	movw	r8, r22
     cd6:	5c 01       	movw	r10, r24
     cd8:	a7 01       	movw	r20, r14
     cda:	96 01       	movw	r18, r12
     cdc:	c7 01       	movw	r24, r14
     cde:	b6 01       	movw	r22, r12
     ce0:	0e 94 93 20 	call	0x4126	; 0x4126 <__mulsf3>
     ce4:	9b 01       	movw	r18, r22
     ce6:	ac 01       	movw	r20, r24
     ce8:	c5 01       	movw	r24, r10
     cea:	b4 01       	movw	r22, r8
     cec:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__subsf3>
     cf0:	4b 01       	movw	r8, r22
     cf2:	5c 01       	movw	r10, r24
     cf4:	62 e9       	ldi	r22, 0x92	; 146
     cf6:	71 e0       	ldi	r23, 0x01	; 1
     cf8:	88 e2       	ldi	r24, 0x28	; 40
     cfa:	97 e0       	ldi	r25, 0x07	; 7
     cfc:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     d00:	22 e0       	ldi	r18, 0x02	; 2
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	b5 01       	movw	r22, r10
     d06:	a4 01       	movw	r20, r8
     d08:	88 e2       	ldi	r24, 0x28	; 40
     d0a:	97 e0       	ldi	r25, 0x07	; 7
     d0c:	0e 94 a7 1e 	call	0x3d4e	; 0x3d4e <Print::println(double, int)>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	a9 01       	movw	r20, r18
     d16:	c5 01       	movw	r24, r10
     d18:	b4 01       	movw	r22, r8
     d1a:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__cmpsf2>
     d1e:	88 23       	and	r24, r24
     d20:	09 f4       	brne	.+2      	; 0xd24 <sensor_zero_calibration()+0x20a>
     d22:	87 c0       	rjmp	.+270    	; 0xe32 <sensor_zero_calibration()+0x318>
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e4       	ldi	r20, 0x40	; 64
     d2a:	50 e4       	ldi	r21, 0x40	; 64
     d2c:	69 85       	ldd	r22, Y+9	; 0x09
     d2e:	7a 85       	ldd	r23, Y+10	; 0x0a
     d30:	8b 85       	ldd	r24, Y+11	; 0x0b
     d32:	9c 85       	ldd	r25, Y+12	; 0x0c
     d34:	0e 94 93 20 	call	0x4126	; 0x4126 <__mulsf3>
     d38:	2b 01       	movw	r4, r22
     d3a:	3c 01       	movw	r6, r24
     d3c:	29 81       	ldd	r18, Y+1	; 0x01
     d3e:	3a 81       	ldd	r19, Y+2	; 0x02
     d40:	4b 81       	ldd	r20, Y+3	; 0x03
     d42:	5c 81       	ldd	r21, Y+4	; 0x04
     d44:	c7 01       	movw	r24, r14
     d46:	b6 01       	movw	r22, r12
     d48:	0e 94 93 20 	call	0x4126	; 0x4126 <__mulsf3>
     d4c:	9b 01       	movw	r18, r22
     d4e:	ac 01       	movw	r20, r24
     d50:	c3 01       	movw	r24, r6
     d52:	b2 01       	movw	r22, r4
     d54:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__subsf3>
     d58:	a5 01       	movw	r20, r10
     d5a:	94 01       	movw	r18, r8
     d5c:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <__divsf3>
     d60:	60 93 ab 05 	sts	0x05AB, r22	; 0x8005ab <o2_slope>
     d64:	70 93 ac 05 	sts	0x05AC, r23	; 0x8005ac <o2_slope+0x1>
     d68:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <o2_slope+0x2>
     d6c:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <o2_slope+0x3>
     d70:	2d 81       	ldd	r18, Y+5	; 0x05
     d72:	3e 81       	ldd	r19, Y+6	; 0x06
     d74:	4f 81       	ldd	r20, Y+7	; 0x07
     d76:	58 85       	ldd	r21, Y+8	; 0x08
     d78:	69 81       	ldd	r22, Y+1	; 0x01
     d7a:	7a 81       	ldd	r23, Y+2	; 0x02
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	9c 81       	ldd	r25, Y+4	; 0x04
     d80:	0e 94 93 20 	call	0x4126	; 0x4126 <__mulsf3>
     d84:	2b 01       	movw	r4, r22
     d86:	3c 01       	movw	r6, r24
     d88:	29 85       	ldd	r18, Y+9	; 0x09
     d8a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d8c:	4b 85       	ldd	r20, Y+11	; 0x0b
     d8e:	5c 85       	ldd	r21, Y+12	; 0x0c
     d90:	c7 01       	movw	r24, r14
     d92:	b6 01       	movw	r22, r12
     d94:	0e 94 93 20 	call	0x4126	; 0x4126 <__mulsf3>
     d98:	9b 01       	movw	r18, r22
     d9a:	ac 01       	movw	r20, r24
     d9c:	c3 01       	movw	r24, r6
     d9e:	b2 01       	movw	r22, r4
     da0:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__subsf3>
     da4:	a5 01       	movw	r20, r10
     da6:	94 01       	movw	r18, r8
     da8:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <__divsf3>
     dac:	60 93 a7 05 	sts	0x05A7, r22	; 0x8005a7 <o2_const_val>
     db0:	70 93 a8 05 	sts	0x05A8, r23	; 0x8005a8 <o2_const_val+0x1>
     db4:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <o2_const_val+0x2>
     db8:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <o2_const_val+0x3>
     dbc:	1a 82       	std	Y+2, r1	; 0x02
     dbe:	19 82       	std	Y+1, r1	; 0x01
     dc0:	64 e5       	ldi	r22, 0x54	; 84
     dc2:	75 e0       	ldi	r23, 0x05	; 5
     dc4:	88 e2       	ldi	r24, 0x28	; 40
     dc6:	97 e0       	ldi	r25, 0x07	; 7
     dc8:	0e 94 bf 1c 	call	0x397e	; 0x397e <Print::println(char const*)>
     dcc:	60 ec       	ldi	r22, 0xC0	; 192
     dce:	71 e0       	ldi	r23, 0x01	; 1
     dd0:	88 e2       	ldi	r24, 0x28	; 40
     dd2:	97 e0       	ldi	r25, 0x07	; 7
     dd4:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     dd8:	40 91 ab 05 	lds	r20, 0x05AB	; 0x8005ab <o2_slope>
     ddc:	50 91 ac 05 	lds	r21, 0x05AC	; 0x8005ac <o2_slope+0x1>
     de0:	60 91 ad 05 	lds	r22, 0x05AD	; 0x8005ad <o2_slope+0x2>
     de4:	70 91 ae 05 	lds	r23, 0x05AE	; 0x8005ae <o2_slope+0x3>
     de8:	22 e0       	ldi	r18, 0x02	; 2
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	88 e2       	ldi	r24, 0x28	; 40
     dee:	97 e0       	ldi	r25, 0x07	; 7
     df0:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <Print::print(double, int)>
     df4:	6c ec       	ldi	r22, 0xCC	; 204
     df6:	71 e0       	ldi	r23, 0x01	; 1
     df8:	88 e2       	ldi	r24, 0x28	; 40
     dfa:	97 e0       	ldi	r25, 0x07	; 7
     dfc:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	2e 96       	adiw	r28, 0x0e	; 14
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	df 90       	pop	r13
     e1e:	cf 90       	pop	r12
     e20:	bf 90       	pop	r11
     e22:	af 90       	pop	r10
     e24:	9f 90       	pop	r9
     e26:	8f 90       	pop	r8
     e28:	7f 90       	pop	r7
     e2a:	6f 90       	pop	r6
     e2c:	5f 90       	pop	r5
     e2e:	4f 90       	pop	r4
     e30:	08 95       	ret
     e32:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <o2_slope>
     e36:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <o2_slope+0x1>
     e3a:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <o2_slope+0x2>
     e3e:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <o2_slope+0x3>
     e42:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <o2_const_val>
     e46:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <o2_const_val+0x1>
     e4a:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <o2_const_val+0x2>
     e4e:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <o2_const_val+0x3>
     e52:	61 ea       	ldi	r22, 0xA1	; 161
     e54:	71 e0       	ldi	r23, 0x01	; 1
     e56:	88 e2       	ldi	r24, 0x28	; 40
     e58:	97 e0       	ldi	r25, 0x07	; 7
     e5a:	0e 94 bf 1c 	call	0x397e	; 0x397e <Print::println(char const*)>
     e5e:	88 ef       	ldi	r24, 0xF8	; 248
     e60:	9f ef       	ldi	r25, 0xFF	; 255
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	ac cf       	rjmp	.-168    	; 0xdc0 <sensor_zero_calibration()+0x2a6>

00000e68 <o2_sensor_scan()>:
_Z14o2_sensor_scanv():
     e68:	8f 92       	push	r8
     e6a:	9f 92       	push	r9
     e6c:	af 92       	push	r10
     e6e:	bf 92       	push	r11
     e70:	cf 92       	push	r12
     e72:	df 92       	push	r13
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	86 e7       	ldi	r24, 0x76	; 118
     e7c:	95 e0       	ldi	r25, 0x05	; 5
     e7e:	0e 94 d2 14 	call	0x29a4	; 0x29a4 <ADS1X15::readADC(unsigned char)>
     e82:	86 e7       	ldi	r24, 0x76	; 118
     e84:	95 e0       	ldi	r25, 0x05	; 5
     e86:	0e 94 a3 14 	call	0x2946	; 0x2946 <ADS1X15::getValue()>
     e8a:	90 93 b0 05 	sts	0x05B0, r25	; 0x8005b0 <o2_raw_adc_count+0x1>
     e8e:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <o2_raw_adc_count>
     e92:	6e ed       	ldi	r22, 0xDE	; 222
     e94:	71 e0       	ldi	r23, 0x01	; 1
     e96:	88 e2       	ldi	r24, 0x28	; 40
     e98:	97 e0       	ldi	r25, 0x07	; 7
     e9a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     e9e:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <o2_raw_adc_count>
     ea2:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <o2_raw_adc_count+0x1>
     ea6:	4a e0       	ldi	r20, 0x0A	; 10
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	88 e2       	ldi	r24, 0x28	; 40
     eac:	97 e0       	ldi	r25, 0x07	; 7
     eae:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <Print::print(int, int)>
     eb2:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <o2_raw_adc_count>
     eb6:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <o2_raw_adc_count+0x1>
     eba:	07 2e       	mov	r0, r23
     ebc:	00 0c       	add	r0, r0
     ebe:	88 0b       	sbc	r24, r24
     ec0:	99 0b       	sbc	r25, r25
     ec2:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <__floatsisf>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	4a e7       	ldi	r20, 0x7A	; 122
     ecc:	54 e4       	ldi	r21, 0x44	; 68
     ece:	0e 94 93 20 	call	0x4126	; 0x4126 <__mulsf3>
     ed2:	2f e6       	ldi	r18, 0x6F	; 111
     ed4:	32 e1       	ldi	r19, 0x12	; 18
     ed6:	43 e0       	ldi	r20, 0x03	; 3
     ed8:	59 e3       	ldi	r21, 0x39	; 57
     eda:	0e 94 93 20 	call	0x4126	; 0x4126 <__mulsf3>
     ede:	60 93 a3 05 	sts	0x05A3, r22	; 0x8005a3 <m_raw_voltage>
     ee2:	70 93 a4 05 	sts	0x05A4, r23	; 0x8005a4 <m_raw_voltage+0x1>
     ee6:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <m_raw_voltage+0x2>
     eea:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <m_raw_voltage+0x3>
     eee:	62 ef       	ldi	r22, 0xF2	; 242
     ef0:	71 e0       	ldi	r23, 0x01	; 1
     ef2:	88 e2       	ldi	r24, 0x28	; 40
     ef4:	97 e0       	ldi	r25, 0x07	; 7
     ef6:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     efa:	40 91 a3 05 	lds	r20, 0x05A3	; 0x8005a3 <m_raw_voltage>
     efe:	50 91 a4 05 	lds	r21, 0x05A4	; 0x8005a4 <m_raw_voltage+0x1>
     f02:	60 91 a5 05 	lds	r22, 0x05A5	; 0x8005a5 <m_raw_voltage+0x2>
     f06:	70 91 a6 05 	lds	r23, 0x05A6	; 0x8005a6 <m_raw_voltage+0x3>
     f0a:	24 e0       	ldi	r18, 0x04	; 4
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	88 e2       	ldi	r24, 0x28	; 40
     f10:	97 e0       	ldi	r25, 0x07	; 7
     f12:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <Print::print(double, int)>
     f16:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <o2_raw_adc_count>
     f1a:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <o2_raw_adc_count+0x1>
     f1e:	c0 90 ab 05 	lds	r12, 0x05AB	; 0x8005ab <o2_slope>
     f22:	d0 90 ac 05 	lds	r13, 0x05AC	; 0x8005ac <o2_slope+0x1>
     f26:	e0 90 ad 05 	lds	r14, 0x05AD	; 0x8005ad <o2_slope+0x2>
     f2a:	f0 90 ae 05 	lds	r15, 0x05AE	; 0x8005ae <o2_slope+0x3>
     f2e:	80 90 a7 05 	lds	r8, 0x05A7	; 0x8005a7 <o2_const_val>
     f32:	90 90 a8 05 	lds	r9, 0x05A8	; 0x8005a8 <o2_const_val+0x1>
     f36:	a0 90 a9 05 	lds	r10, 0x05A9	; 0x8005a9 <o2_const_val+0x2>
     f3a:	b0 90 aa 05 	lds	r11, 0x05AA	; 0x8005aa <o2_const_val+0x3>
     f3e:	07 2e       	mov	r0, r23
     f40:	00 0c       	add	r0, r0
     f42:	88 0b       	sbc	r24, r24
     f44:	99 0b       	sbc	r25, r25
     f46:	0e 94 de 1f 	call	0x3fbc	; 0x3fbc <__floatsisf>
     f4a:	a7 01       	movw	r20, r14
     f4c:	96 01       	movw	r18, r12
     f4e:	0e 94 93 20 	call	0x4126	; 0x4126 <__mulsf3>
     f52:	a5 01       	movw	r20, r10
     f54:	94 01       	movw	r18, r8
     f56:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__addsf3>
     f5a:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <o2_concentration>
     f5e:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <o2_concentration+0x1>
     f62:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <o2_concentration+0x2>
     f66:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <o2_concentration+0x3>
     f6a:	65 e0       	ldi	r22, 0x05	; 5
     f6c:	72 e0       	ldi	r23, 0x02	; 2
     f6e:	88 e2       	ldi	r24, 0x28	; 40
     f70:	97 e0       	ldi	r25, 0x07	; 7
     f72:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
     f76:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <o2_concentration>
     f7a:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <o2_concentration+0x1>
     f7e:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <o2_concentration+0x2>
     f82:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <o2_concentration+0x3>
     f86:	22 e0       	ldi	r18, 0x02	; 2
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	88 e2       	ldi	r24, 0x28	; 40
     f8c:	97 e0       	ldi	r25, 0x07	; 7
     f8e:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <Print::print(double, int)>
     f92:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <o2_concentration>
     f96:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <o2_concentration+0x1>
     f9a:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <o2_concentration+0x2>
     f9e:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <o2_concentration+0x3>
     fa2:	24 e0       	ldi	r18, 0x04	; 4
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	88 e2       	ldi	r24, 0x28	; 40
     fa8:	97 e0       	ldi	r25, 0x07	; 7
     faa:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <Print::print(double, int)>
     fae:	64 e5       	ldi	r22, 0x54	; 84
     fb0:	75 e0       	ldi	r23, 0x05	; 5
     fb2:	88 e2       	ldi	r24, 0x28	; 40
     fb4:	97 e0       	ldi	r25, 0x07	; 7
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	cf 90       	pop	r12
     fbe:	bf 90       	pop	r11
     fc0:	af 90       	pop	r10
     fc2:	9f 90       	pop	r9
     fc4:	8f 90       	pop	r8
     fc6:	0c 94 bf 1c 	jmp	0x397e	; 0x397e <Print::println(char const*)>

00000fca <config_timer1()>:
_Z13config_timer1v():
     fca:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     fce:	e1 e8       	ldi	r30, 0x81	; 129
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	10 82       	st	Z, r1
     fd4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     fd8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     fdc:	89 ef       	ldi	r24, 0xF9	; 249
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     fe4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     fe8:	80 81       	ld	r24, Z
     fea:	88 60       	ori	r24, 0x08	; 8
     fec:	80 83       	st	Z, r24
     fee:	80 81       	ld	r24, Z
     ff0:	83 60       	ori	r24, 0x03	; 3
     ff2:	80 83       	st	Z, r24
     ff4:	ef e6       	ldi	r30, 0x6F	; 111
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	82 60       	ori	r24, 0x02	; 2
     ffc:	80 83       	st	Z, r24
     ffe:	08 95       	ret

00001000 <timer_init()>:
_Z10timer_initv():
    1000:	f8 94       	cli
    1002:	0e 94 e5 07 	call	0xfca	; 0xfca <config_timer1()>
    1006:	78 94       	sei
    1008:	6b e1       	ldi	r22, 0x1B	; 27
    100a:	72 e0       	ldi	r23, 0x02	; 2
    100c:	88 e2       	ldi	r24, 0x28	; 40
    100e:	97 e0       	ldi	r25, 0x07	; 7
    1010:	0c 94 bf 1c 	jmp	0x397e	; 0x397e <Print::println(char const*)>

00001014 <__vector_13>:
__vector_13():
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	0b b6       	in	r0, 0x3b	; 59
    1020:	0f 92       	push	r0
    1022:	2f 93       	push	r18
    1024:	3f 93       	push	r19
    1026:	4f 93       	push	r20
    1028:	5f 93       	push	r21
    102a:	6f 93       	push	r22
    102c:	7f 93       	push	r23
    102e:	8f 93       	push	r24
    1030:	9f 93       	push	r25
    1032:	af 93       	push	r26
    1034:	bf 93       	push	r27
    1036:	cf 93       	push	r28
    1038:	ef 93       	push	r30
    103a:	ff 93       	push	r31
    103c:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <systemtick_msecs>
    1040:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    1044:	a0 91 e2 05 	lds	r26, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    1048:	b0 91 e3 05 	lds	r27, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	a1 1d       	adc	r26, r1
    1050:	b1 1d       	adc	r27, r1
    1052:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <systemtick_msecs>
    1056:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <systemtick_msecs+0x1>
    105a:	a0 93 e2 05 	sts	0x05E2, r26	; 0x8005e2 <systemtick_msecs+0x2>
    105e:	b0 93 e3 05 	sts	0x05E3, r27	; 0x8005e3 <systemtick_msecs+0x3>
    1062:	c1 e0       	ldi	r28, 0x01	; 1
    1064:	c0 93 dc 05 	sts	0x05DC, r28	; 0x8005dc <f_msec>
    1068:	60 91 e0 05 	lds	r22, 0x05E0	; 0x8005e0 <systemtick_msecs>
    106c:	70 91 e1 05 	lds	r23, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    1070:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    1074:	90 91 e3 05 	lds	r25, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    1078:	2a e0       	ldi	r18, 0x0A	; 10
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
    1084:	67 2b       	or	r22, r23
    1086:	68 2b       	or	r22, r24
    1088:	69 2b       	or	r22, r25
    108a:	09 f0       	breq	.+2      	; 0x108e <__vector_13+0x7a>
    108c:	49 c0       	rjmp	.+146    	; 0x1120 <__vector_13+0x10c>
    108e:	c0 93 db 05 	sts	0x05DB, r28	; 0x8005db <f_10msec>
    1092:	60 91 e0 05 	lds	r22, 0x05E0	; 0x8005e0 <systemtick_msecs>
    1096:	70 91 e1 05 	lds	r23, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    109a:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    109e:	90 91 e3 05 	lds	r25, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    10a2:	24 e6       	ldi	r18, 0x64	; 100
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
    10ae:	67 2b       	or	r22, r23
    10b0:	68 2b       	or	r22, r24
    10b2:	69 2b       	or	r22, r25
    10b4:	a9 f5       	brne	.+106    	; 0x1120 <__vector_13+0x10c>
    10b6:	c0 93 da 05 	sts	0x05DA, r28	; 0x8005da <f_100msec>
    10ba:	60 91 e0 05 	lds	r22, 0x05E0	; 0x8005e0 <systemtick_msecs>
    10be:	70 91 e1 05 	lds	r23, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    10c2:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    10c6:	90 91 e3 05 	lds	r25, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    10ca:	28 ee       	ldi	r18, 0xE8	; 232
    10cc:	33 e0       	ldi	r19, 0x03	; 3
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
    10d6:	67 2b       	or	r22, r23
    10d8:	68 2b       	or	r22, r24
    10da:	69 2b       	or	r22, r25
    10dc:	09 f5       	brne	.+66     	; 0x1120 <__vector_13+0x10c>
    10de:	c0 93 d9 05 	sts	0x05D9, r28	; 0x8005d9 <f_1sec>
    10e2:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <systemtick_secs>
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <systemtick_secs>
    10ec:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <systemtick_secs>
    10f0:	8c 33       	cpi	r24, 0x3C	; 60
    10f2:	b0 f0       	brcs	.+44     	; 0x1120 <__vector_13+0x10c>
    10f4:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <systemtick_secs>
    10f8:	c0 93 d8 05 	sts	0x05D8, r28	; 0x8005d8 <f_1min>
    10fc:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <systemtick_mins>
    1100:	8f 5f       	subi	r24, 0xFF	; 255
    1102:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <systemtick_mins>
    1106:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <systemtick_mins>
    110a:	8c 33       	cpi	r24, 0x3C	; 60
    110c:	48 f0       	brcs	.+18     	; 0x1120 <__vector_13+0x10c>
    110e:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <systemtick_mins>
    1112:	c0 93 d7 05 	sts	0x05D7, r28	; 0x8005d7 <f_1hr>
    1116:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <systemtick_hrs>
    111a:	8f 5f       	subi	r24, 0xFF	; 255
    111c:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <systemtick_hrs>
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	cf 91       	pop	r28
    1126:	bf 91       	pop	r27
    1128:	af 91       	pop	r26
    112a:	9f 91       	pop	r25
    112c:	8f 91       	pop	r24
    112e:	7f 91       	pop	r23
    1130:	6f 91       	pop	r22
    1132:	5f 91       	pop	r21
    1134:	4f 91       	pop	r20
    1136:	3f 91       	pop	r19
    1138:	2f 91       	pop	r18
    113a:	0f 90       	pop	r0
    113c:	0b be       	out	0x3b, r0	; 59
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <new_delay_msecs(unsigned int)>:
_Z15new_delay_msecsj():
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	ec 01       	movw	r28, r24
    1152:	6f e2       	ldi	r22, 0x2F	; 47
    1154:	72 e0       	ldi	r23, 0x02	; 2
    1156:	88 e2       	ldi	r24, 0x28	; 40
    1158:	97 e0       	ldi	r25, 0x07	; 7
    115a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
    115e:	00 91 e0 05 	lds	r16, 0x05E0	; 0x8005e0 <systemtick_msecs>
    1162:	10 91 e1 05 	lds	r17, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    1166:	20 91 e2 05 	lds	r18, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    116a:	30 91 e3 05 	lds	r19, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    116e:	ce 01       	movw	r24, r28
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	a0 e0       	ldi	r26, 0x00	; 0
_Z12time_elapsedm():
    1174:	40 91 e0 05 	lds	r20, 0x05E0	; 0x8005e0 <systemtick_msecs>
    1178:	50 91 e1 05 	lds	r21, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    117c:	60 91 e2 05 	lds	r22, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    1180:	70 91 e3 05 	lds	r23, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    1184:	40 1b       	sub	r20, r16
    1186:	51 0b       	sbc	r21, r17
    1188:	62 0b       	sbc	r22, r18
    118a:	73 0b       	sbc	r23, r19
_Z15new_delay_msecsj():
    118c:	48 17       	cp	r20, r24
    118e:	59 07       	cpc	r21, r25
    1190:	6a 07       	cpc	r22, r26
    1192:	7b 07       	cpc	r23, r27
    1194:	78 f3       	brcs	.-34     	; 0x1174 <new_delay_msecs(unsigned int)+0x2c>
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	08 95       	ret

000011a0 <platform_init()>:
_Z13platform_initv():
    11a0:	0e 94 00 08 	call	0x1000	; 0x1000 <timer_init()>
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	44 e0       	ldi	r20, 0x04	; 4
    11a8:	64 e1       	ldi	r22, 0x14	; 20
    11aa:	83 e4       	ldi	r24, 0x43	; 67
    11ac:	96 e0       	ldi	r25, 0x06	; 6
    11ae:	0e 94 17 11 	call	0x222e	; 0x222e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>
    11b2:	61 e0       	ldi	r22, 0x01	; 1
    11b4:	88 e1       	ldi	r24, 0x18	; 24
    11b6:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	89 e1       	ldi	r24, 0x19	; 25
    11be:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    11c2:	61 e0       	ldi	r22, 0x01	; 1
    11c4:	8a e1       	ldi	r24, 0x1A	; 26
    11c6:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    11ca:	61 e0       	ldi	r22, 0x01	; 1
    11cc:	8b e1       	ldi	r24, 0x1B	; 27
    11ce:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	8c e0       	ldi	r24, 0x0C	; 12
    11d6:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	8c e0       	ldi	r24, 0x0C	; 12
    11de:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    11e2:	61 e0       	ldi	r22, 0x01	; 1
    11e4:	8d e1       	ldi	r24, 0x1D	; 29
    11e6:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	8b e1       	ldi	r24, 0x1B	; 27
    11ee:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	83 e0       	ldi	r24, 0x03	; 3
    11f6:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    11fa:	62 e0       	ldi	r22, 0x02	; 2
    11fc:	83 e0       	ldi	r24, 0x03	; 3
    11fe:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	8d e1       	ldi	r24, 0x1D	; 29
    1206:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	8b e1       	ldi	r24, 0x1B	; 27
    120e:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	85 e0       	ldi	r24, 0x05	; 5
    1216:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	87 e0       	ldi	r24, 0x07	; 7
    121e:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    1222:	61 e0       	ldi	r22, 0x01	; 1
    1224:	8d e0       	ldi	r24, 0x0D	; 13
    1226:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	85 e0       	ldi	r24, 0x05	; 5
    122e:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	87 e0       	ldi	r24, 0x07	; 7
    1236:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	8d e0       	ldi	r24, 0x0D	; 13
    123e:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    1242:	61 e3       	ldi	r22, 0x31	; 49
    1244:	72 e0       	ldi	r23, 0x02	; 2
    1246:	88 e2       	ldi	r24, 0x28	; 40
    1248:	97 e0       	ldi	r25, 0x07	; 7
    124a:	0c 94 bf 1c 	jmp	0x397e	; 0x397e <Print::println(char const*)>

0000124e <do_control(DO_CONTROLS_E, bool)>:
_Z10do_control13DO_CONTROLS_Eb():
    124e:	1f 93       	push	r17
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	ec 01       	movw	r28, r24
    1256:	16 2f       	mov	r17, r22
    1258:	62 e4       	ldi	r22, 0x42	; 66
    125a:	72 e0       	ldi	r23, 0x02	; 2
    125c:	88 e2       	ldi	r24, 0x28	; 40
    125e:	97 e0       	ldi	r25, 0x07	; 7
    1260:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
    1264:	4a e0       	ldi	r20, 0x0A	; 10
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	be 01       	movw	r22, r28
    126a:	88 e2       	ldi	r24, 0x28	; 40
    126c:	97 e0       	ldi	r25, 0x07	; 7
    126e:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <Print::println(int, int)>
    1272:	c8 30       	cpi	r28, 0x08	; 8
    1274:	d1 05       	cpc	r29, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <do_control(DO_CONTROLS_E, bool)+0x2c>
    1278:	40 c0       	rjmp	.+128    	; 0x12fa <do_control(DO_CONTROLS_E, bool)+0xac>
    127a:	70 f4       	brcc	.+28     	; 0x1298 <do_control(DO_CONTROLS_E, bool)+0x4a>
    127c:	c2 30       	cpi	r28, 0x02	; 2
    127e:	d1 05       	cpc	r29, r1
    1280:	b1 f1       	breq	.+108    	; 0x12ee <do_control(DO_CONTROLS_E, bool)+0xa0>
    1282:	c4 30       	cpi	r28, 0x04	; 4
    1284:	d1 05       	cpc	r29, r1
    1286:	b1 f1       	breq	.+108    	; 0x12f4 <do_control(DO_CONTROLS_E, bool)+0xa6>
    1288:	c1 30       	cpi	r28, 0x01	; 1
    128a:	d1 05       	cpc	r29, r1
    128c:	79 f4       	brne	.+30     	; 0x12ac <do_control(DO_CONTROLS_E, bool)+0x5e>
    128e:	61 2f       	mov	r22, r17
    1290:	88 e1       	ldi	r24, 0x18	; 24
    1292:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    1296:	23 c0       	rjmp	.+70     	; 0x12de <do_control(DO_CONTROLS_E, bool)+0x90>
    1298:	c0 32       	cpi	r28, 0x20	; 32
    129a:	d1 05       	cpc	r29, r1
    129c:	01 f1       	breq	.+64     	; 0x12de <do_control(DO_CONTROLS_E, bool)+0x90>
    129e:	c8 f4       	brcc	.+50     	; 0x12d2 <do_control(DO_CONTROLS_E, bool)+0x84>
    12a0:	61 e0       	ldi	r22, 0x01	; 1
    12a2:	61 27       	eor	r22, r17
    12a4:	8d e1       	ldi	r24, 0x1D	; 29
    12a6:	c0 31       	cpi	r28, 0x10	; 16
    12a8:	d1 05       	cpc	r29, r1
    12aa:	99 f3       	breq	.-26     	; 0x1292 <do_control(DO_CONTROLS_E, bool)+0x44>
    12ac:	6b e4       	ldi	r22, 0x4B	; 75
    12ae:	72 e0       	ldi	r23, 0x02	; 2
    12b0:	88 e2       	ldi	r24, 0x28	; 40
    12b2:	97 e0       	ldi	r25, 0x07	; 7
    12b4:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
    12b8:	4a e0       	ldi	r20, 0x0A	; 10
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	60 91 b1 05 	lds	r22, 0x05B1	; 0x8005b1 <do_byte>
    12c0:	88 e2       	ldi	r24, 0x28	; 40
    12c2:	97 e0       	ldi	r25, 0x07	; 7
    12c4:	0e 94 97 1d 	call	0x3b2e	; 0x3b2e <Print::println(unsigned char, int)>
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	08 95       	ret
    12d2:	c0 34       	cpi	r28, 0x40	; 64
    12d4:	d1 05       	cpc	r29, r1
    12d6:	19 f0       	breq	.+6      	; 0x12de <do_control(DO_CONTROLS_E, bool)+0x90>
    12d8:	c0 38       	cpi	r28, 0x80	; 128
    12da:	d1 05       	cpc	r29, r1
    12dc:	39 f7       	brne	.-50     	; 0x12ac <do_control(DO_CONTROLS_E, bool)+0x5e>
    12de:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <do_byte>
    12e2:	11 23       	and	r17, r17
    12e4:	69 f0       	breq	.+26     	; 0x1300 <do_control(DO_CONTROLS_E, bool)+0xb2>
    12e6:	c8 2b       	or	r28, r24
    12e8:	c0 93 b1 05 	sts	0x05B1, r28	; 0x8005b1 <do_byte>
    12ec:	df cf       	rjmp	.-66     	; 0x12ac <do_control(DO_CONTROLS_E, bool)+0x5e>
    12ee:	61 2f       	mov	r22, r17
    12f0:	89 e1       	ldi	r24, 0x19	; 25
    12f2:	cf cf       	rjmp	.-98     	; 0x1292 <do_control(DO_CONTROLS_E, bool)+0x44>
    12f4:	61 2f       	mov	r22, r17
    12f6:	8a e1       	ldi	r24, 0x1A	; 26
    12f8:	cc cf       	rjmp	.-104    	; 0x1292 <do_control(DO_CONTROLS_E, bool)+0x44>
    12fa:	61 2f       	mov	r22, r17
    12fc:	8b e1       	ldi	r24, 0x1B	; 27
    12fe:	c9 cf       	rjmp	.-110    	; 0x1292 <do_control(DO_CONTROLS_E, bool)+0x44>
    1300:	c0 95       	com	r28
    1302:	c8 23       	and	r28, r24
    1304:	f1 cf       	rjmp	.-30     	; 0x12e8 <do_control(DO_CONTROLS_E, bool)+0x9a>

00001306 <tworks2_values_to_default_postion()>:
_Z33tworks2_values_to_default_postionv():
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0c 94 27 09 	jmp	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>

0000131a <tworks2_PSA_logic()>:
_Z17tworks2_PSA_logicv():
    131a:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <cycle>
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	21 f1       	breq	.+72     	; 0x136a <tworks2_PSA_logic()+0x50>
    1322:	80 f0       	brcs	.+32     	; 0x1344 <tworks2_PSA_logic()+0x2a>
    1324:	82 30       	cpi	r24, 0x02	; 2
    1326:	09 f4       	brne	.+2      	; 0x132a <tworks2_PSA_logic()+0x10>
    1328:	40 c0       	rjmp	.+128    	; 0x13aa <tworks2_PSA_logic()+0x90>
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	f1 f0       	breq	.+60     	; 0x136a <tworks2_PSA_logic()+0x50>
    132e:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <cycle>
    1332:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <nb_delay>
    1336:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <nb_delay+0x1>
    133a:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <nb_delay+0x2>
    133e:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <nb_delay+0x3>
    1342:	08 95       	ret
    1344:	61 e0       	ldi	r22, 0x01	; 1
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	82 e0       	ldi	r24, 0x02	; 2
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    1358:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <Production_Delay>
    135c:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <Production_Delay+0x1>
    1360:	a0 91 c4 05 	lds	r26, 0x05C4	; 0x8005c4 <Production_Delay+0x2>
    1364:	b0 91 c5 05 	lds	r27, 0x05C5	; 0x8005c5 <Production_Delay+0x3>
    1368:	12 c0       	rjmp	.+36     	; 0x138e <tworks2_PSA_logic()+0x74>
    136a:	61 e0       	ldi	r22, 0x01	; 1
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    137e:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <PreCharge_Delay>
    1382:	90 91 bb 05 	lds	r25, 0x05BB	; 0x8005bb <PreCharge_Delay+0x1>
    1386:	a0 91 bc 05 	lds	r26, 0x05BC	; 0x8005bc <PreCharge_Delay+0x2>
    138a:	b0 91 bd 05 	lds	r27, 0x05BD	; 0x8005bd <PreCharge_Delay+0x3>
    138e:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <nb_delay>
    1392:	90 93 b7 05 	sts	0x05B7, r25	; 0x8005b7 <nb_delay+0x1>
    1396:	a0 93 b8 05 	sts	0x05B8, r26	; 0x8005b8 <nb_delay+0x2>
    139a:	b0 93 b9 05 	sts	0x05B9, r27	; 0x8005b9 <nb_delay+0x3>
    139e:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <cycle>
    13a2:	8f 5f       	subi	r24, 0xFF	; 255
    13a4:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <cycle>
    13a8:	08 95       	ret
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    13b4:	61 e0       	ldi	r22, 0x01	; 1
    13b6:	cc cf       	rjmp	.-104    	; 0x1350 <tworks2_PSA_logic()+0x36>

000013b8 <o2_main_task()>:
_Z12o2_main_taskv():
    13b8:	cf 93       	push	r28
    13ba:	df 93       	push	r29
    13bc:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <f_system_running>
    13c0:	81 11       	cpse	r24, r1
    13c2:	05 c0       	rjmp	.+10     	; 0x13ce <o2_main_task()+0x16>
    13c4:	10 92 e4 05 	sts	0x05E4, r1	; 0x8005e4 <o2_main_task()::once_done>
    13c8:	df 91       	pop	r29
    13ca:	cf 91       	pop	r28
    13cc:	08 95       	ret
    13ce:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <o2_main_task()::once_done>
    13d2:	81 11       	cpse	r24, r1
    13d4:	08 c0       	rjmp	.+16     	; 0x13e6 <o2_main_task()+0x2e>
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <o2_main_task()::once_done>
    13dc:	61 e0       	ldi	r22, 0x01	; 1
    13de:	88 e0       	ldi	r24, 0x08	; 8
    13e0:	90 e0       	ldi	r25, 0x00	; 0
    13e2:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    13e6:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <f_sec_change_o2_task>
    13ea:	88 23       	and	r24, r24
    13ec:	09 f4       	brne	.+2      	; 0x13f0 <o2_main_task()+0x38>
    13ee:	47 c0       	rjmp	.+142    	; 0x147e <o2_main_task()+0xc6>
    13f0:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <f_sec_change_o2_task>
    13f4:	c0 91 cc 05 	lds	r28, 0x05CC	; 0x8005cc <current_run_time_secs>
    13f8:	d0 91 cd 05 	lds	r29, 0x05CD	; 0x8005cd <current_run_time_secs+0x1>
    13fc:	21 96       	adiw	r28, 0x01	; 1
    13fe:	d0 93 cd 05 	sts	0x05CD, r29	; 0x8005cd <current_run_time_secs+0x1>
    1402:	c0 93 cc 05 	sts	0x05CC, r28	; 0x8005cc <current_run_time_secs>
    1406:	80 91 c6 05 	lds	r24, 0x05C6	; 0x8005c6 <total_run_time_secs>
    140a:	90 91 c7 05 	lds	r25, 0x05C7	; 0x8005c7 <total_run_time_secs+0x1>
    140e:	a0 91 c8 05 	lds	r26, 0x05C8	; 0x8005c8 <total_run_time_secs+0x2>
    1412:	b0 91 c9 05 	lds	r27, 0x05C9	; 0x8005c9 <total_run_time_secs+0x3>
    1416:	01 96       	adiw	r24, 0x01	; 1
    1418:	a1 1d       	adc	r26, r1
    141a:	b1 1d       	adc	r27, r1
    141c:	80 93 c6 05 	sts	0x05C6, r24	; 0x8005c6 <total_run_time_secs>
    1420:	90 93 c7 05 	sts	0x05C7, r25	; 0x8005c7 <total_run_time_secs+0x1>
    1424:	a0 93 c8 05 	sts	0x05C8, r26	; 0x8005c8 <total_run_time_secs+0x2>
    1428:	b0 93 c9 05 	sts	0x05C9, r27	; 0x8005c9 <total_run_time_secs+0x3>
    142c:	ce 01       	movw	r24, r28
    142e:	65 e0       	ldi	r22, 0x05	; 5
    1430:	70 e0       	ldi	r23, 0x00	; 0
    1432:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
    1436:	89 2b       	or	r24, r25
    1438:	29 f4       	brne	.+10     	; 0x1444 <o2_main_task()+0x8c>
    143a:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <o2_main_task()::quadrant>
    143e:	8f 5f       	subi	r24, 0xFF	; 255
    1440:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <o2_main_task()::quadrant>
    1444:	40 e0       	ldi	r20, 0x00	; 0
    1446:	70 e0       	ldi	r23, 0x00	; 0
    1448:	60 e0       	ldi	r22, 0x00	; 0
    144a:	8b ee       	ldi	r24, 0xEB	; 235
    144c:	95 e0       	ldi	r25, 0x05	; 5
    144e:	0e 94 3a 12 	call	0x2474	; 0x2474 <LedControl::shutdown(int, bool)>
    1452:	48 e0       	ldi	r20, 0x08	; 8
    1454:	50 e0       	ldi	r21, 0x00	; 0
    1456:	70 e0       	ldi	r23, 0x00	; 0
    1458:	60 e0       	ldi	r22, 0x00	; 0
    145a:	8b ee       	ldi	r24, 0xEB	; 235
    145c:	95 e0       	ldi	r25, 0x05	; 5
    145e:	0e 94 5e 12 	call	0x24bc	; 0x24bc <LedControl::setIntensity(int, int)>
    1462:	70 e0       	ldi	r23, 0x00	; 0
    1464:	60 e0       	ldi	r22, 0x00	; 0
    1466:	8b ee       	ldi	r24, 0xEB	; 235
    1468:	95 e0       	ldi	r25, 0x05	; 5
    146a:	0e 94 70 12 	call	0x24e0	; 0x24e0 <LedControl::clearDisplay(int)>
    146e:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <o2_main_task()::quadrant>
    1472:	83 30       	cpi	r24, 0x03	; 3
    1474:	08 f4       	brcc	.+2      	; 0x1478 <o2_main_task()+0xc0>
    1476:	71 c0       	rjmp	.+226    	; 0x155a <o2_main_task()+0x1a2>
    1478:	83 30       	cpi	r24, 0x03	; 3
    147a:	09 f4       	brne	.+2      	; 0x147e <o2_main_task()+0xc6>
    147c:	7c c0       	rjmp	.+248    	; 0x1576 <o2_main_task()+0x1be>
_Z12time_elapsedm():
    147e:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <systemtick_msecs>
    1482:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    1486:	a0 91 e2 05 	lds	r26, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    148a:	b0 91 e3 05 	lds	r27, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    148e:	40 91 e6 05 	lds	r20, 0x05E6	; 0x8005e6 <o2_main_task()::time_tag>
    1492:	50 91 e7 05 	lds	r21, 0x05E7	; 0x8005e7 <o2_main_task()::time_tag+0x1>
    1496:	60 91 e8 05 	lds	r22, 0x05E8	; 0x8005e8 <o2_main_task()::time_tag+0x2>
    149a:	70 91 e9 05 	lds	r23, 0x05E9	; 0x8005e9 <o2_main_task()::time_tag+0x3>
    149e:	84 1b       	sub	r24, r20
    14a0:	95 0b       	sbc	r25, r21
    14a2:	a6 0b       	sbc	r26, r22
    14a4:	b7 0b       	sbc	r27, r23
_Z12o2_main_taskv():
    14a6:	40 91 b6 05 	lds	r20, 0x05B6	; 0x8005b6 <nb_delay>
    14aa:	50 91 b7 05 	lds	r21, 0x05B7	; 0x8005b7 <nb_delay+0x1>
    14ae:	60 91 b8 05 	lds	r22, 0x05B8	; 0x8005b8 <nb_delay+0x2>
    14b2:	70 91 b9 05 	lds	r23, 0x05B9	; 0x8005b9 <nb_delay+0x3>
    14b6:	84 17       	cp	r24, r20
    14b8:	95 07       	cpc	r25, r21
    14ba:	a6 07       	cpc	r26, r22
    14bc:	b7 07       	cpc	r27, r23
    14be:	08 f4       	brcc	.+2      	; 0x14c2 <o2_main_task()+0x10a>
    14c0:	83 cf       	rjmp	.-250    	; 0x13c8 <o2_main_task()+0x10>
    14c2:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <systemtick_msecs>
    14c6:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    14ca:	a0 91 e2 05 	lds	r26, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    14ce:	b0 91 e3 05 	lds	r27, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    14d2:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <o2_main_task()::time_tag>
    14d6:	90 93 e7 05 	sts	0x05E7, r25	; 0x8005e7 <o2_main_task()::time_tag+0x1>
    14da:	a0 93 e8 05 	sts	0x05E8, r26	; 0x8005e8 <o2_main_task()::time_tag+0x2>
    14de:	b0 93 e9 05 	sts	0x05E9, r27	; 0x8005e9 <o2_main_task()::time_tag+0x3>
    14e2:	66 e5       	ldi	r22, 0x56	; 86
    14e4:	72 e0       	ldi	r23, 0x02	; 2
    14e6:	88 e2       	ldi	r24, 0x28	; 40
    14e8:	97 e0       	ldi	r25, 0x07	; 7
    14ea:	0e 94 bf 1c 	call	0x397e	; 0x397e <Print::println(char const*)>
    14ee:	0e 94 8d 09 	call	0x131a	; 0x131a <tworks2_PSA_logic()>
    14f2:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <nb_delay>
    14f6:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <nb_delay+0x1>
    14fa:	a0 91 b8 05 	lds	r26, 0x05B8	; 0x8005b8 <nb_delay+0x2>
    14fe:	b0 91 b9 05 	lds	r27, 0x05B9	; 0x8005b9 <nb_delay+0x3>
    1502:	40 91 b2 05 	lds	r20, 0x05B2	; 0x8005b2 <prev_nb_delay>
    1506:	50 91 b3 05 	lds	r21, 0x05B3	; 0x8005b3 <prev_nb_delay+0x1>
    150a:	60 91 b4 05 	lds	r22, 0x05B4	; 0x8005b4 <prev_nb_delay+0x2>
    150e:	70 91 b5 05 	lds	r23, 0x05B5	; 0x8005b5 <prev_nb_delay+0x3>
    1512:	84 17       	cp	r24, r20
    1514:	95 07       	cpc	r25, r21
    1516:	a6 07       	cpc	r26, r22
    1518:	b7 07       	cpc	r27, r23
    151a:	09 f4       	brne	.+2      	; 0x151e <o2_main_task()+0x166>
    151c:	55 cf       	rjmp	.-342    	; 0x13c8 <o2_main_task()+0x10>
    151e:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <prev_nb_delay>
    1522:	90 93 b3 05 	sts	0x05B3, r25	; 0x8005b3 <prev_nb_delay+0x1>
    1526:	a0 93 b4 05 	sts	0x05B4, r26	; 0x8005b4 <prev_nb_delay+0x2>
    152a:	b0 93 b5 05 	sts	0x05B5, r27	; 0x8005b5 <prev_nb_delay+0x3>
    152e:	6a e6       	ldi	r22, 0x6A	; 106
    1530:	72 e0       	ldi	r23, 0x02	; 2
    1532:	88 e2       	ldi	r24, 0x28	; 40
    1534:	97 e0       	ldi	r25, 0x07	; 7
    1536:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
    153a:	40 91 b6 05 	lds	r20, 0x05B6	; 0x8005b6 <nb_delay>
    153e:	50 91 b7 05 	lds	r21, 0x05B7	; 0x8005b7 <nb_delay+0x1>
    1542:	60 91 b8 05 	lds	r22, 0x05B8	; 0x8005b8 <nb_delay+0x2>
    1546:	70 91 b9 05 	lds	r23, 0x05B9	; 0x8005b9 <nb_delay+0x3>
    154a:	2a e0       	ldi	r18, 0x0A	; 10
    154c:	30 e0       	ldi	r19, 0x00	; 0
    154e:	88 e2       	ldi	r24, 0x28	; 40
    1550:	97 e0       	ldi	r25, 0x07	; 7
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	0c 94 af 1d 	jmp	0x3b5e	; 0x3b5e <Print::println(unsigned long, int)>
    155a:	ce 01       	movw	r24, r28
    155c:	60 e1       	ldi	r22, 0x10	; 16
    155e:	7e e0       	ldi	r23, 0x0E	; 14
    1560:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
    1564:	9b 01       	movw	r18, r22
    1566:	6c e3       	ldi	r22, 0x3C	; 60
    1568:	70 e0       	ldi	r23, 0x00	; 0
    156a:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
    156e:	c9 01       	movw	r24, r18
    1570:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <display_run_time(unsigned int, unsigned int)>
    1574:	84 cf       	rjmp	.-248    	; 0x147e <o2_main_task()+0xc6>
    1576:	60 91 c6 05 	lds	r22, 0x05C6	; 0x8005c6 <total_run_time_secs>
    157a:	70 91 c7 05 	lds	r23, 0x05C7	; 0x8005c7 <total_run_time_secs+0x1>
    157e:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <total_run_time_secs+0x2>
    1582:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <total_run_time_secs+0x3>
    1586:	20 e1       	ldi	r18, 0x10	; 16
    1588:	3e e0       	ldi	r19, 0x0E	; 14
    158a:	40 e0       	ldi	r20, 0x00	; 0
    158c:	50 e0       	ldi	r21, 0x00	; 0
    158e:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
    1592:	b9 01       	movw	r22, r18
    1594:	33 0f       	add	r19, r19
    1596:	88 0b       	sbc	r24, r24
    1598:	99 0b       	sbc	r25, r25
    159a:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <display_run_hours(unsigned long)>
    159e:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <o2_main_task()::quadrant>
    15a2:	6d cf       	rjmp	.-294    	; 0x147e <o2_main_task()+0xc6>

000015a4 <o2_cons_init()>:
_Z12o2_cons_initv():
    15a4:	0e 94 8d 05 	call	0xb1a	; 0xb1a <sensor_zero_calibration()>
    15a8:	88 e1       	ldi	r24, 0x18	; 24
    15aa:	95 e1       	ldi	r25, 0x15	; 21
    15ac:	a0 e0       	ldi	r26, 0x00	; 0
    15ae:	b0 e0       	ldi	r27, 0x00	; 0
    15b0:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <Production_Delay>
    15b4:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <Production_Delay+0x1>
    15b8:	a0 93 c4 05 	sts	0x05C4, r26	; 0x8005c4 <Production_Delay+0x2>
    15bc:	b0 93 c5 05 	sts	0x05C5, r27	; 0x8005c5 <Production_Delay+0x3>
    15c0:	8c eb       	ldi	r24, 0xBC	; 188
    15c2:	92 e0       	ldi	r25, 0x02	; 2
    15c4:	a0 e0       	ldi	r26, 0x00	; 0
    15c6:	b0 e0       	ldi	r27, 0x00	; 0
    15c8:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <PreCharge_Delay>
    15cc:	90 93 bb 05 	sts	0x05BB, r25	; 0x8005bb <PreCharge_Delay+0x1>
    15d0:	a0 93 bc 05 	sts	0x05BC, r26	; 0x8005bc <PreCharge_Delay+0x2>
    15d4:	b0 93 bd 05 	sts	0x05BD, r27	; 0x8005bd <PreCharge_Delay+0x3>
    15d8:	60 e0       	ldi	r22, 0x00	; 0
    15da:	81 e0       	ldi	r24, 0x01	; 1
    15dc:	90 e0       	ldi	r25, 0x00	; 0
    15de:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    15e2:	60 e0       	ldi	r22, 0x00	; 0
    15e4:	82 e0       	ldi	r24, 0x02	; 2
    15e6:	90 e0       	ldi	r25, 0x00	; 0
    15e8:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    15ec:	60 e0       	ldi	r22, 0x00	; 0
    15ee:	84 e0       	ldi	r24, 0x04	; 4
    15f0:	90 e0       	ldi	r25, 0x00	; 0
    15f2:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    15f6:	84 ef       	ldi	r24, 0xF4	; 244
    15f8:	91 e0       	ldi	r25, 0x01	; 1
    15fa:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>

000015fe <ui_print_welcome()>:
_Z16ui_print_welcomev():
    15fe:	40 e0       	ldi	r20, 0x00	; 0
    1600:	60 e0       	ldi	r22, 0x00	; 0
    1602:	83 e4       	ldi	r24, 0x43	; 67
    1604:	96 e0       	ldi	r25, 0x06	; 6
    1606:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    160a:	66 e7       	ldi	r22, 0x76	; 118
    160c:	72 e0       	ldi	r23, 0x02	; 2
    160e:	83 e4       	ldi	r24, 0x43	; 67
    1610:	96 e0       	ldi	r25, 0x06	; 6
    1612:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
    1616:	41 e0       	ldi	r20, 0x01	; 1
    1618:	60 e0       	ldi	r22, 0x00	; 0
    161a:	83 e4       	ldi	r24, 0x43	; 67
    161c:	96 e0       	ldi	r25, 0x06	; 6
    161e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1622:	69 e8       	ldi	r22, 0x89	; 137
    1624:	72 e0       	ldi	r23, 0x02	; 2
    1626:	83 e4       	ldi	r24, 0x43	; 67
    1628:	96 e0       	ldi	r25, 0x06	; 6
    162a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
    162e:	42 e0       	ldi	r20, 0x02	; 2
    1630:	60 e0       	ldi	r22, 0x00	; 0
    1632:	83 e4       	ldi	r24, 0x43	; 67
    1634:	96 e0       	ldi	r25, 0x06	; 6
    1636:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    163a:	68 e9       	ldi	r22, 0x98	; 152
    163c:	72 e0       	ldi	r23, 0x02	; 2
    163e:	83 e4       	ldi	r24, 0x43	; 67
    1640:	96 e0       	ldi	r25, 0x06	; 6
    1642:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <Print::print(char const*)>

00001646 <setup>:
_ZN14HardwareSerial5beginEm():
    1646:	26 e0       	ldi	r18, 0x06	; 6
    1648:	40 e0       	ldi	r20, 0x00	; 0
    164a:	52 ec       	ldi	r21, 0xC2	; 194
    164c:	61 e0       	ldi	r22, 0x01	; 1
    164e:	70 e0       	ldi	r23, 0x00	; 0
    1650:	88 e2       	ldi	r24, 0x28	; 40
    1652:	97 e0       	ldi	r25, 0x07	; 7
    1654:	0e 94 4b 1b 	call	0x3696	; 0x3696 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
    1658:	6d ea       	ldi	r22, 0xAD	; 173
    165a:	72 e0       	ldi	r23, 0x02	; 2
    165c:	88 e2       	ldi	r24, 0x28	; 40
    165e:	97 e0       	ldi	r25, 0x07	; 7
    1660:	0e 94 bf 1c 	call	0x397e	; 0x397e <Print::println(char const*)>
    1664:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <platform_init()>
    1668:	0e 94 69 05 	call	0xad2	; 0xad2 <ads_init()>
_Z7db_initv():
    166c:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <f_system_running>
setup():
    1670:	0e 94 d2 0a 	call	0x15a4	; 0x15a4 <o2_cons_init()>
    1674:	0e 94 82 01 	call	0x304	; 0x304 <init_7segments()>
    1678:	0e 94 9d 02 	call	0x53a	; 0x53a <test_7segments()>
    167c:	60 e0       	ldi	r22, 0x00	; 0
    167e:	70 e0       	ldi	r23, 0x00	; 0
    1680:	cb 01       	movw	r24, r22
    1682:	0e 94 a1 02 	call	0x542	; 0x542 <display_o2(float)>
    1686:	60 91 c6 05 	lds	r22, 0x05C6	; 0x8005c6 <total_run_time_secs>
    168a:	70 91 c7 05 	lds	r23, 0x05C7	; 0x8005c7 <total_run_time_secs+0x1>
    168e:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <total_run_time_secs+0x2>
    1692:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <total_run_time_secs+0x3>
    1696:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <display_run_hours(unsigned long)>
_Z7ui_initv():
    169a:	0c 94 ff 0a 	jmp	0x15fe	; 0x15fe <ui_print_welcome()>

0000169e <beep_for(int)>:
_Z8beep_fori():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:42

}



void beep_for (int msecs) {
    169e:	cf 93       	push	r28
    16a0:	df 93       	push	r29
    16a2:	ec 01       	movw	r28, r24
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:44

    BUUZZER_CNTRL (BUZZ_ON);
    16a4:	60 e0       	ldi	r22, 0x00	; 0
    16a6:	80 e1       	ldi	r24, 0x10	; 16
    16a8:	90 e0       	ldi	r25, 0x00	; 0
    16aa:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:45
    new_delay_msecs (msecs);
    16ae:	ce 01       	movw	r24, r28
    16b0:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:46
    BUUZZER_CNTRL (BUZZ_OFF);
    16b4:	61 e0       	ldi	r22, 0x01	; 1
    16b6:	80 e1       	ldi	r24, 0x10	; 16
    16b8:	90 e0       	ldi	r25, 0x00	; 0
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:48

}
    16ba:	df 91       	pop	r29
    16bc:	cf 91       	pop	r28
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:46

void beep_for (int msecs) {

    BUUZZER_CNTRL (BUZZ_ON);
    new_delay_msecs (msecs);
    BUUZZER_CNTRL (BUZZ_OFF);
    16be:	0c 94 27 09 	jmp	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>

000016c2 <multi_beeps(int)>:
_Z11multi_beepsi():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:51

}


void multi_beeps (int count) {
    16c2:	0f 93       	push	r16
    16c4:	1f 93       	push	r17
    16c6:	cf 93       	push	r28
    16c8:	df 93       	push	r29
    16ca:	8c 01       	movw	r16, r24
    16cc:	0b 97       	sbiw	r24, 0x0b	; 11
    16ce:	14 f0       	brlt	.+4      	; 0x16d4 <multi_beeps(int)+0x12>
    16d0:	0a e0       	ldi	r16, 0x0A	; 10
    16d2:	10 e0       	ldi	r17, 0x00	; 0
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:58
    int   i;
    if (count > 10) {
        count = 10;
    }

    for (i = 0; i < count; i++)
    16d4:	d0 e0       	ldi	r29, 0x00	; 0
    16d6:	c0 e0       	ldi	r28, 0x00	; 0
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:58 (discriminator 3)
    16d8:	c0 17       	cp	r28, r16
    16da:	d1 07       	cpc	r29, r17
    16dc:	54 f4       	brge	.+20     	; 0x16f2 <multi_beeps(int)+0x30>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:60 (discriminator 2)
    {
        beep_for (50);
    16de:	82 e3       	ldi	r24, 0x32	; 50
    16e0:	90 e0       	ldi	r25, 0x00	; 0
    16e2:	0e 94 4f 0b 	call	0x169e	; 0x169e <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:61 (discriminator 2)
        new_delay_msecs (100);
    16e6:	84 e6       	ldi	r24, 0x64	; 100
    16e8:	90 e0       	ldi	r25, 0x00	; 0
    16ea:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:58 (discriminator 2)
    int   i;
    if (count > 10) {
        count = 10;
    }

    for (i = 0; i < count; i++)
    16ee:	21 96       	adiw	r28, 0x01	; 1
    16f0:	f3 cf       	rjmp	.-26     	; 0x16d8 <multi_beeps(int)+0x16>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:64
    {
        beep_for (50);
        new_delay_msecs (100);
    }

}
    16f2:	df 91       	pop	r29
    16f4:	cf 91       	pop	r28
    16f6:	1f 91       	pop	r17
    16f8:	0f 91       	pop	r16
    16fa:	08 95       	ret

000016fc <power_on_self_test()>:
_Z18power_on_self_testv():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:323



void power_on_self_test (void) {

    lcd.setCursor(0, 1);
    16fc:	41 e0       	ldi	r20, 0x01	; 1
    16fe:	60 e0       	ldi	r22, 0x00	; 0
    1700:	83 e4       	ldi	r24, 0x43	; 67
    1702:	96 e0       	ldi	r25, 0x06	; 6
    1704:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:324
    lcd.print("Relay Tests..");
    1708:	69 ec       	ldi	r22, 0xC9	; 201
    170a:	72 e0       	ldi	r23, 0x02	; 2
    170c:	83 e4       	ldi	r24, 0x43	; 67
    170e:	96 e0       	ldi	r25, 0x06	; 6
    1710:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:327

    // 1. Relay Z1TSOL
    lcd.setCursor(0, 2);
    1714:	42 e0       	ldi	r20, 0x02	; 2
    1716:	60 e0       	ldi	r22, 0x00	; 0
    1718:	83 e4       	ldi	r24, 0x43	; 67
    171a:	96 e0       	ldi	r25, 0x06	; 6
    171c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:328
    lcd.print("Z1TSOL - CLOSE  ");
    1720:	67 ed       	ldi	r22, 0xD7	; 215
    1722:	72 e0       	ldi	r23, 0x02	; 2
    1724:	83 e4       	ldi	r24, 0x43	; 67
    1726:	96 e0       	ldi	r25, 0x06	; 6
    1728:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:329
    digitalWrite(Sieve_A_Valve_Z1,      OPEN_VALVE);
    172c:	61 e0       	ldi	r22, 0x01	; 1
    172e:	88 e1       	ldi	r24, 0x18	; 24
    1730:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:330
    beep_for (HIGH_BEEP);   // msecs
    1734:	88 ec       	ldi	r24, 0xC8	; 200
    1736:	90 e0       	ldi	r25, 0x00	; 0
    1738:	0e 94 4f 0b 	call	0x169e	; 0x169e <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:331
    new_delay_msecs (5000);
    173c:	88 e8       	ldi	r24, 0x88	; 136
    173e:	93 e1       	ldi	r25, 0x13	; 19
    1740:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:333

    lcd.setCursor(0, 2);
    1744:	42 e0       	ldi	r20, 0x02	; 2
    1746:	60 e0       	ldi	r22, 0x00	; 0
    1748:	83 e4       	ldi	r24, 0x43	; 67
    174a:	96 e0       	ldi	r25, 0x06	; 6
    174c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:334
    lcd.print("Z1TSOL - OPEN   ");
    1750:	68 ee       	ldi	r22, 0xE8	; 232
    1752:	72 e0       	ldi	r23, 0x02	; 2
    1754:	83 e4       	ldi	r24, 0x43	; 67
    1756:	96 e0       	ldi	r25, 0x06	; 6
    1758:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:335
    digitalWrite(Sieve_A_Valve_Z1,      CLOSE_VALVE);
    175c:	60 e0       	ldi	r22, 0x00	; 0
    175e:	88 e1       	ldi	r24, 0x18	; 24
    1760:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:336
    beep_for (LOW_BEEP);   // msecs
    1764:	82 e3       	ldi	r24, 0x32	; 50
    1766:	90 e0       	ldi	r25, 0x00	; 0
    1768:	0e 94 4f 0b 	call	0x169e	; 0x169e <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:338

    new_delay_msecs (5000);
    176c:	88 e8       	ldi	r24, 0x88	; 136
    176e:	93 e1       	ldi	r25, 0x13	; 19
    1770:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:342


    // 2. Relay Z2TSOL
    lcd.setCursor(0, 2);
    1774:	42 e0       	ldi	r20, 0x02	; 2
    1776:	60 e0       	ldi	r22, 0x00	; 0
    1778:	83 e4       	ldi	r24, 0x43	; 67
    177a:	96 e0       	ldi	r25, 0x06	; 6
    177c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:343
    lcd.print("Z2TSOL - CLOSE  ");
    1780:	69 ef       	ldi	r22, 0xF9	; 249
    1782:	72 e0       	ldi	r23, 0x02	; 2
    1784:	83 e4       	ldi	r24, 0x43	; 67
    1786:	96 e0       	ldi	r25, 0x06	; 6
    1788:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:344
    digitalWrite(Sieve_B_Valve_Z2,      OPEN_VALVE);
    178c:	61 e0       	ldi	r22, 0x01	; 1
    178e:	89 e1       	ldi	r24, 0x19	; 25
    1790:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:345
    beep_for (HIGH_BEEP);   // msecs
    1794:	88 ec       	ldi	r24, 0xC8	; 200
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	0e 94 4f 0b 	call	0x169e	; 0x169e <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:346
    new_delay_msecs (5000);
    179c:	88 e8       	ldi	r24, 0x88	; 136
    179e:	93 e1       	ldi	r25, 0x13	; 19
    17a0:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:347
    lcd.setCursor(0, 2);
    17a4:	42 e0       	ldi	r20, 0x02	; 2
    17a6:	60 e0       	ldi	r22, 0x00	; 0
    17a8:	83 e4       	ldi	r24, 0x43	; 67
    17aa:	96 e0       	ldi	r25, 0x06	; 6
    17ac:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:348
    lcd.print("Z2TSOL - OPEN   ");
    17b0:	6a e0       	ldi	r22, 0x0A	; 10
    17b2:	73 e0       	ldi	r23, 0x03	; 3
    17b4:	83 e4       	ldi	r24, 0x43	; 67
    17b6:	96 e0       	ldi	r25, 0x06	; 6
    17b8:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:349
    digitalWrite(Sieve_B_Valve_Z2,      CLOSE_VALVE);
    17bc:	60 e0       	ldi	r22, 0x00	; 0
    17be:	89 e1       	ldi	r24, 0x19	; 25
    17c0:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:350
    beep_for (LOW_BEEP);   // msecs
    17c4:	82 e3       	ldi	r24, 0x32	; 50
    17c6:	90 e0       	ldi	r25, 0x00	; 0
    17c8:	0e 94 4f 0b 	call	0x169e	; 0x169e <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:351
    new_delay_msecs (2000);
    17cc:	80 ed       	ldi	r24, 0xD0	; 208
    17ce:	97 e0       	ldi	r25, 0x07	; 7
    17d0:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:354

    // 3. Relay BCKFSOL
    lcd.setCursor(0, 2);
    17d4:	42 e0       	ldi	r20, 0x02	; 2
    17d6:	60 e0       	ldi	r22, 0x00	; 0
    17d8:	83 e4       	ldi	r24, 0x43	; 67
    17da:	96 e0       	ldi	r25, 0x06	; 6
    17dc:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:355
    lcd.print("BCKFSOL - CLOSE ");
    17e0:	6b e1       	ldi	r22, 0x1B	; 27
    17e2:	73 e0       	ldi	r23, 0x03	; 3
    17e4:	83 e4       	ldi	r24, 0x43	; 67
    17e6:	96 e0       	ldi	r25, 0x06	; 6
    17e8:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:356
    digitalWrite(PreCharge_Valve_BCKF,  OPEN_VALVE);
    17ec:	61 e0       	ldi	r22, 0x01	; 1
    17ee:	8a e1       	ldi	r24, 0x1A	; 26
    17f0:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:357
    beep_for (HIGH_BEEP);   // msecs
    17f4:	88 ec       	ldi	r24, 0xC8	; 200
    17f6:	90 e0       	ldi	r25, 0x00	; 0
    17f8:	0e 94 4f 0b 	call	0x169e	; 0x169e <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:358
    new_delay_msecs (5000);
    17fc:	88 e8       	ldi	r24, 0x88	; 136
    17fe:	93 e1       	ldi	r25, 0x13	; 19
    1800:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:360

    lcd.setCursor(0, 2);
    1804:	42 e0       	ldi	r20, 0x02	; 2
    1806:	60 e0       	ldi	r22, 0x00	; 0
    1808:	83 e4       	ldi	r24, 0x43	; 67
    180a:	96 e0       	ldi	r25, 0x06	; 6
    180c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:361
    lcd.print("BCKFSOL - OPEN  ");
    1810:	6c e2       	ldi	r22, 0x2C	; 44
    1812:	73 e0       	ldi	r23, 0x03	; 3
    1814:	83 e4       	ldi	r24, 0x43	; 67
    1816:	96 e0       	ldi	r25, 0x06	; 6
    1818:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:362
    digitalWrite(PreCharge_Valve_BCKF,  CLOSE_VALVE);
    181c:	60 e0       	ldi	r22, 0x00	; 0
    181e:	8a e1       	ldi	r24, 0x1A	; 26
    1820:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:363
    beep_for (LOW_BEEP);   // msecs
    1824:	82 e3       	ldi	r24, 0x32	; 50
    1826:	90 e0       	ldi	r25, 0x00	; 0
    1828:	0e 94 4f 0b 	call	0x169e	; 0x169e <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:364
    new_delay_msecs (2000);
    182c:	80 ed       	ldi	r24, 0xD0	; 208
    182e:	97 e0       	ldi	r25, 0x07	; 7
    1830:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:367

    //lcd.clear();
    lcd.setCursor(0, 1);
    1834:	41 e0       	ldi	r20, 0x01	; 1
    1836:	60 e0       	ldi	r22, 0x00	; 0
    1838:	83 e4       	ldi	r24, 0x43	; 67
    183a:	96 e0       	ldi	r25, 0x06	; 6
    183c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:368
    lcd.print("Compressor Test..");
    1840:	6d e3       	ldi	r22, 0x3D	; 61
    1842:	73 e0       	ldi	r23, 0x03	; 3
    1844:	83 e4       	ldi	r24, 0x43	; 67
    1846:	96 e0       	ldi	r25, 0x06	; 6
    1848:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:372

    // 4. Compressor check
    // Open release valves.. to avoid blocking of compressor o/p during its test-run
    lcd.setCursor(0, 2);
    184c:	42 e0       	ldi	r20, 0x02	; 2
    184e:	60 e0       	ldi	r22, 0x00	; 0
    1850:	83 e4       	ldi	r24, 0x43	; 67
    1852:	96 e0       	ldi	r25, 0x06	; 6
    1854:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:374
    //        "...................."
    lcd.print("Opening releaseValvs");
    1858:	6f e4       	ldi	r22, 0x4F	; 79
    185a:	73 e0       	ldi	r23, 0x03	; 3
    185c:	83 e4       	ldi	r24, 0x43	; 67
    185e:	96 e0       	ldi	r25, 0x06	; 6
    1860:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:375
    beep_for (HIGH_BEEP);   // msecs
    1864:	88 ec       	ldi	r24, 0xC8	; 200
    1866:	90 e0       	ldi	r25, 0x00	; 0
    1868:	0e 94 4f 0b 	call	0x169e	; 0x169e <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:376
    digitalWrite(Sieve_A_Valve_Z1,      CLOSE_VALVE);
    186c:	60 e0       	ldi	r22, 0x00	; 0
    186e:	88 e1       	ldi	r24, 0x18	; 24
    1870:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:377
    digitalWrite(Sieve_B_Valve_Z2,      CLOSE_VALVE);
    1874:	60 e0       	ldi	r22, 0x00	; 0
    1876:	89 e1       	ldi	r24, 0x19	; 25
    1878:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:378
    new_delay_msecs (1000);
    187c:	88 ee       	ldi	r24, 0xE8	; 232
    187e:	93 e0       	ldi	r25, 0x03	; 3
    1880:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:380

    lcd.setCursor(0, 2);
    1884:	42 e0       	ldi	r20, 0x02	; 2
    1886:	60 e0       	ldi	r22, 0x00	; 0
    1888:	83 e4       	ldi	r24, 0x43	; 67
    188a:	96 e0       	ldi	r25, 0x06	; 6
    188c:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:381
    lcd.print("Compressor - ON     ");
    1890:	64 e6       	ldi	r22, 0x64	; 100
    1892:	73 e0       	ldi	r23, 0x03	; 3
    1894:	83 e4       	ldi	r24, 0x43	; 67
    1896:	96 e0       	ldi	r25, 0x06	; 6
    1898:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:382
    COMPRSSR_CNTRL (COMPRSSR_ON);
    189c:	61 e0       	ldi	r22, 0x01	; 1
    189e:	88 e0       	ldi	r24, 0x08	; 8
    18a0:	90 e0       	ldi	r25, 0x00	; 0
    18a2:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:383
    beep_for (HIGH_BEEP);   // msecs
    18a6:	88 ec       	ldi	r24, 0xC8	; 200
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	0e 94 4f 0b 	call	0x169e	; 0x169e <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:384
    new_delay_msecs (5000);
    18ae:	88 e8       	ldi	r24, 0x88	; 136
    18b0:	93 e1       	ldi	r25, 0x13	; 19
    18b2:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:387
    

    BUUZZER_CNTRL (BUZZ_OFF);
    18b6:	61 e0       	ldi	r22, 0x01	; 1
    18b8:	80 e1       	ldi	r24, 0x10	; 16
    18ba:	90 e0       	ldi	r25, 0x00	; 0
    18bc:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:389

    beep_for (LOW_BEEP);   // msecs
    18c0:	82 e3       	ldi	r24, 0x32	; 50
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 4f 0b 	call	0x169e	; 0x169e <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:390
    new_delay_msecs (1000);
    18c8:	88 ee       	ldi	r24, 0xE8	; 232
    18ca:	93 e0       	ldi	r25, 0x03	; 3
    18cc:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:391
    lcd.setCursor(0, 2);
    18d0:	42 e0       	ldi	r20, 0x02	; 2
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	83 e4       	ldi	r24, 0x43	; 67
    18d6:	96 e0       	ldi	r25, 0x06	; 6
    18d8:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:392
    lcd.print("Compressor - OFF    ");
    18dc:	69 e7       	ldi	r22, 0x79	; 121
    18de:	73 e0       	ldi	r23, 0x03	; 3
    18e0:	83 e4       	ldi	r24, 0x43	; 67
    18e2:	96 e0       	ldi	r25, 0x06	; 6
    18e4:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:393
    COMPRSSR_CNTRL (COMPRSSR_OFF);
    18e8:	60 e0       	ldi	r22, 0x00	; 0
    18ea:	88 e0       	ldi	r24, 0x08	; 8
    18ec:	90 e0       	ldi	r25, 0x00	; 0
    18ee:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:395

    lcd.clear();
    18f2:	83 e4       	ldi	r24, 0x43	; 67
    18f4:	96 e0       	ldi	r25, 0x06	; 6
    18f6:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LiquidCrystal::clear()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:396
    lcd.setCursor(0, 3);
    18fa:	43 e0       	ldi	r20, 0x03	; 3
    18fc:	60 e0       	ldi	r22, 0x00	; 0
    18fe:	83 e4       	ldi	r24, 0x43	; 67
    1900:	96 e0       	ldi	r25, 0x06	; 6
    1902:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:398
    //  "1.3.5.7.9.........20"
    lcd.print("Testing over...!!   ");
    1906:	6e e8       	ldi	r22, 0x8E	; 142
    1908:	73 e0       	ldi	r23, 0x03	; 3
    190a:	83 e4       	ldi	r24, 0x43	; 67
    190c:	96 e0       	ldi	r25, 0x06	; 6
    190e:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:399
    new_delay_msecs (2000);
    1912:	80 ed       	ldi	r24, 0xD0	; 208
    1914:	97 e0       	ldi	r25, 0x07	; 7
    1916:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>

0000191a <ui_task_main()>:
_Z12ui_task_mainv():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:68

}



void ui_task_main (void)    {
    191a:	8f 92       	push	r8
    191c:	9f 92       	push	r9
    191e:	af 92       	push	r10
    1920:	bf 92       	push	r11
    1922:	cf 92       	push	r12
    1924:	df 92       	push	r13
    1926:	ef 92       	push	r14
    1928:	ff 92       	push	r15
    192a:	0f 93       	push	r16
    192c:	1f 93       	push	r17
    192e:	cf 93       	push	r28
    1930:	df 93       	push	r29
    1932:	cd b7       	in	r28, 0x3d	; 61
    1934:	de b7       	in	r29, 0x3e	; 62
    1936:	2c 97       	sbiw	r28, 0x0c	; 12
    1938:	0f b6       	in	r0, 0x3f	; 63
    193a:	f8 94       	cli
    193c:	de bf       	out	0x3e, r29	; 62
    193e:	0f be       	out	0x3f, r0	; 63
    1940:	cd bf       	out	0x3d, r28	; 61
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:76
    static unsigned long  time_tag;
    static unsigned int   state_time;
    char                  str_temp[6];
    char                  str_temp2[6];

    buttonState = digitalRead(startButtonPin);
    1942:	83 e0       	ldi	r24, 0x03	; 3
    1944:	0e 94 09 1a 	call	0x3412	; 0x3412 <digitalRead>
    1948:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <buttonState+0x1>
    194c:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <buttonState>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:78

    if (f_sec_change_ui_task) {
    1950:	20 91 d4 05 	lds	r18, 0x05D4	; 0x8005d4 <f_sec_change_ui_task>
    1954:	22 23       	and	r18, r18
    1956:	61 f0       	breq	.+24     	; 0x1970 <ui_task_main()+0x56>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:79
        f_sec_change_ui_task = 0;
    1958:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <f_sec_change_ui_task>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:80
        state_time++;
    195c:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <__data_end>
    1960:	30 91 63 05 	lds	r19, 0x0563	; 0x800563 <__data_end+0x1>
    1964:	2f 5f       	subi	r18, 0xFF	; 255
    1966:	3f 4f       	sbci	r19, 0xFF	; 255
    1968:	30 93 63 05 	sts	0x0563, r19	; 0x800563 <__data_end+0x1>
    196c:	20 93 62 05 	sts	0x0562, r18	; 0x800562 <__data_end>
    1970:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <ui_task_main()::button_debounce_delay>
    1974:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <ui_task_main()::button_debounce_delay+0x1>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:83
    }

    if (buttonState == BUTTON_ACTIVE) {   // press detection
    1978:	89 2b       	or	r24, r25
    197a:	09 f0       	breq	.+2      	; 0x197e <ui_task_main()+0x64>
    197c:	38 c0       	rjmp	.+112    	; 0x19ee <ui_task_main()+0xd4>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:84
        button_debounce_delay++;
    197e:	2f 5f       	subi	r18, 0xFF	; 255
    1980:	3f 4f       	sbci	r19, 0xFF	; 255
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:85
        if (button_debounce_delay >= BUTTON_DEBOUNCE_DLY)   {
    1982:	27 33       	cpi	r18, 0x37	; 55
    1984:	31 05       	cpc	r19, r1
    1986:	44 f5       	brge	.+80     	; 0x19d8 <ui_task_main()+0xbe>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:84
        f_sec_change_ui_task = 0;
        state_time++;
    }

    if (buttonState == BUTTON_ACTIVE) {   // press detection
        button_debounce_delay++;
    1988:	30 93 69 05 	sts	0x0569, r19	; 0x800569 <ui_task_main()::button_debounce_delay+0x1>
    198c:	20 93 68 05 	sts	0x0568, r18	; 0x800568 <ui_task_main()::button_debounce_delay>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:90
        if (button_debounce_delay >= BUTTON_DEBOUNCE_DLY)   {
            button_debounce_delay = 0;
            button_pressed = true;
        }
        // temp
        DBG_PRINT  ("button_debounce_delay : ");
    1990:	63 ea       	ldi	r22, 0xA3	; 163
    1992:	73 e0       	ldi	r23, 0x03	; 3
    1994:	88 e2       	ldi	r24, 0x28	; 40
    1996:	97 e0       	ldi	r25, 0x07	; 7
    1998:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:91
        DBG_PRINTLN(button_debounce_delay);
    199c:	60 91 68 05 	lds	r22, 0x0568	; 0x800568 <ui_task_main()::button_debounce_delay>
    19a0:	70 91 69 05 	lds	r23, 0x0569	; 0x800569 <ui_task_main()::button_debounce_delay+0x1>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:103
                button_pressed = false;
                button_press_count++;
                time_tag = systemtick_msecs;
                // temp
                DBG_PRINT  ("button_press_count : ");
                DBG_PRINTLN(button_press_count);
    19a4:	4a e0       	ldi	r20, 0x0A	; 10
    19a6:	50 e0       	ldi	r21, 0x00	; 0
    19a8:	88 e2       	ldi	r24, 0x28	; 40
    19aa:	97 e0       	ldi	r25, 0x07	; 7
    19ac:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <Print::println(int, int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:110
        }

    }


    switch (ui_state)
    19b0:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <ui_state>
    19b4:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <ui_state+0x1>
    19b8:	e8 30       	cpi	r30, 0x08	; 8
    19ba:	f1 05       	cpc	r31, r1
    19bc:	08 f0       	brcs	.+2      	; 0x19c0 <ui_task_main()+0xa6>
    19be:	fa c2       	rjmp	.+1524   	; 0x1fb4 <ui_task_main()+0x69a>
    19c0:	ec 51       	subi	r30, 0x1C	; 28
    19c2:	f3 4f       	sbci	r31, 0xF3	; 243
    19c4:	0c 94 3b 21 	jmp	0x4276	; 0x4276 <__tablejump2__>
    19c8:	34 0d       	add	r19, r4
    19ca:	dd 0d       	add	r29, r13
    19cc:	04 0e       	add	r0, r20
    19ce:	23 0e       	add	r2, r19
    19d0:	42 0e       	add	r4, r18
    19d2:	57 0e       	add	r5, r23
    19d4:	8e 0e       	add	r8, r30
    19d6:	8d 0f       	add	r24, r29
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:86
    }

    if (buttonState == BUTTON_ACTIVE) {   // press detection
        button_debounce_delay++;
        if (button_debounce_delay >= BUTTON_DEBOUNCE_DLY)   {
            button_debounce_delay = 0;
    19d8:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <ui_task_main()::button_debounce_delay+0x1>
    19dc:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <ui_task_main()::button_debounce_delay>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:87
            button_pressed = true;
    19e0:	81 e0       	ldi	r24, 0x01	; 1
    19e2:	90 e0       	ldi	r25, 0x00	; 0
    19e4:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <button_pressed+0x1>
    19e8:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <button_pressed>
    19ec:	d1 cf       	rjmp	.-94     	; 0x1990 <ui_task_main()+0x76>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:94
        // temp
        DBG_PRINT  ("button_debounce_delay : ");
        DBG_PRINTLN(button_debounce_delay);
    }
    else {  // release detection
        if (button_debounce_delay)
    19ee:	21 15       	cp	r18, r1
    19f0:	31 05       	cpc	r19, r1
    19f2:	31 f0       	breq	.+12     	; 0x1a00 <ui_task_main()+0xe6>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:95
            button_debounce_delay--;
    19f4:	21 50       	subi	r18, 0x01	; 1
    19f6:	31 09       	sbc	r19, r1
    19f8:	30 93 69 05 	sts	0x0569, r19	; 0x800569 <ui_task_main()::button_debounce_delay+0x1>
    19fc:	20 93 68 05 	sts	0x0568, r18	; 0x800568 <ui_task_main()::button_debounce_delay>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:96
        if (button_debounce_delay == 0)    {
    1a00:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <ui_task_main()::button_debounce_delay>
    1a04:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <ui_task_main()::button_debounce_delay+0x1>
    1a08:	89 2b       	or	r24, r25
    1a0a:	91 f6       	brne	.-92     	; 0x19b0 <ui_task_main()+0x96>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:97
            if (button_pressed) {
    1a0c:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <button_pressed>
    1a10:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <button_pressed+0x1>
    1a14:	89 2b       	or	r24, r25
    1a16:	61 f2       	breq	.-104    	; 0x19b0 <ui_task_main()+0x96>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:98
                button_pressed = false;
    1a18:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <button_pressed+0x1>
    1a1c:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <button_pressed>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:99
                button_press_count++;
    1a20:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <button_press_count>
    1a24:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <button_press_count+0x1>
    1a28:	01 96       	adiw	r24, 0x01	; 1
    1a2a:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <button_press_count+0x1>
    1a2e:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <button_press_count>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:100
                time_tag = systemtick_msecs;
    1a32:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <systemtick_msecs>
    1a36:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    1a3a:	a0 91 e2 05 	lds	r26, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    1a3e:	b0 91 e3 05 	lds	r27, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    1a42:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <ui_task_main()::time_tag>
    1a46:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <ui_task_main()::time_tag+0x1>
    1a4a:	a0 93 66 05 	sts	0x0566, r26	; 0x800566 <ui_task_main()::time_tag+0x2>
    1a4e:	b0 93 67 05 	sts	0x0567, r27	; 0x800567 <ui_task_main()::time_tag+0x3>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:102
                // temp
                DBG_PRINT  ("button_press_count : ");
    1a52:	6c eb       	ldi	r22, 0xBC	; 188
    1a54:	73 e0       	ldi	r23, 0x03	; 3
    1a56:	88 e2       	ldi	r24, 0x28	; 40
    1a58:	97 e0       	ldi	r25, 0x07	; 7
    1a5a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:103
                DBG_PRINTLN(button_press_count);
    1a5e:	60 91 6a 05 	lds	r22, 0x056A	; 0x80056a <button_press_count>
    1a62:	70 91 6b 05 	lds	r23, 0x056B	; 0x80056b <button_press_count+0x1>
    1a66:	9e cf       	rjmp	.-196    	; 0x19a4 <ui_task_main()+0x8a>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:114

    switch (ui_state)
    {
        case UI_START:
            //if (powerUpTimer.check())   {
            if (state_time >= 10) {
    1a68:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <__data_end>
    1a6c:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <__data_end+0x1>
    1a70:	0a 97       	sbiw	r24, 0x0a	; 10
    1a72:	08 f4       	brcc	.+2      	; 0x1a76 <ui_task_main()+0x15c>
    1a74:	52 c0       	rjmp	.+164    	; 0x1b1a <ui_task_main()+0x200>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:115
                ui_state = UI_SYS_INIT;
    1a76:	84 e0       	ldi	r24, 0x04	; 4
    1a78:	90 e0       	ldi	r25, 0x00	; 0
    1a7a:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <ui_state+0x1>
    1a7e:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <ui_state>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:116
                lcd.setCursor(0, 3);
    1a82:	43 e0       	ldi	r20, 0x03	; 3
    1a84:	60 e0       	ldi	r22, 0x00	; 0
    1a86:	83 e4       	ldi	r24, 0x43	; 67
    1a88:	96 e0       	ldi	r25, 0x06	; 6
    1a8a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:117
                button_press_count = 0;
    1a8e:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <button_press_count+0x1>
    1a92:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <button_press_count>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:118
                lcd.print("Press ButtonToStart!");
    1a96:	62 ed       	ldi	r22, 0xD2	; 210
    1a98:	73 e0       	ldi	r23, 0x03	; 3
    1a9a:	83 e4       	ldi	r24, 0x43	; 67
    1a9c:	96 e0       	ldi	r25, 0x06	; 6
    1a9e:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:309
        case UI_LAST:
            ui_state = UI_START;
            break;
    }

    if (ui_state != prev_ui_state ) {
    1aa2:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <ui_state>
    1aa6:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <ui_state+0x1>
    1aaa:	20 91 72 05 	lds	r18, 0x0572	; 0x800572 <prev_ui_state>
    1aae:	30 91 73 05 	lds	r19, 0x0573	; 0x800573 <prev_ui_state+0x1>
    1ab2:	82 17       	cp	r24, r18
    1ab4:	93 07       	cpc	r25, r19
    1ab6:	f1 f0       	breq	.+60     	; 0x1af4 <ui_task_main()+0x1da>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:310
        prev_ui_state = ui_state;
    1ab8:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <prev_ui_state+0x1>
    1abc:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <prev_ui_state>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:311
        f_state_changed = 1;
    1ac0:	81 e0       	ldi	r24, 0x01	; 1
    1ac2:	90 e0       	ldi	r25, 0x00	; 0
    1ac4:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <f_state_changed+0x1>
    1ac8:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <f_state_changed>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:312
        state_time = 0;
    1acc:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <__data_end+0x1>
    1ad0:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <__data_end>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:313
        DBG_PRINT("ui_state : ");
    1ad4:	66 e1       	ldi	r22, 0x16	; 22
    1ad6:	75 e0       	ldi	r23, 0x05	; 5
    1ad8:	88 e2       	ldi	r24, 0x28	; 40
    1ada:	97 e0       	ldi	r25, 0x07	; 7
    1adc:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:314
        DBG_PRINTLN(ui_state);
    1ae0:	60 91 74 05 	lds	r22, 0x0574	; 0x800574 <ui_state>
    1ae4:	70 91 75 05 	lds	r23, 0x0575	; 0x800575 <ui_state+0x1>
    1ae8:	4a e0       	ldi	r20, 0x0A	; 10
    1aea:	50 e0       	ldi	r21, 0x00	; 0
    1aec:	88 e2       	ldi	r24, 0x28	; 40
    1aee:	97 e0       	ldi	r25, 0x07	; 7
    1af0:	0e 94 71 1d 	call	0x3ae2	; 0x3ae2 <Print::println(int, int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:316
    }
}
    1af4:	2c 96       	adiw	r28, 0x0c	; 12
    1af6:	0f b6       	in	r0, 0x3f	; 63
    1af8:	f8 94       	cli
    1afa:	de bf       	out	0x3e, r29	; 62
    1afc:	0f be       	out	0x3f, r0	; 63
    1afe:	cd bf       	out	0x3d, r28	; 61
    1b00:	df 91       	pop	r29
    1b02:	cf 91       	pop	r28
    1b04:	1f 91       	pop	r17
    1b06:	0f 91       	pop	r16
    1b08:	ff 90       	pop	r15
    1b0a:	ef 90       	pop	r14
    1b0c:	df 90       	pop	r13
    1b0e:	cf 90       	pop	r12
    1b10:	bf 90       	pop	r11
    1b12:	af 90       	pop	r10
    1b14:	9f 90       	pop	r9
    1b16:	8f 90       	pop	r8
    1b18:	08 95       	ret
_Z12time_elapsedm():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/platform.ino:196



unsigned long int time_elapsed (unsigned long int time_delay)  {

    return systemtick_msecs - time_delay;
    1b1a:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <systemtick_msecs>
    1b1e:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    1b22:	a0 91 e2 05 	lds	r26, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    1b26:	b0 91 e3 05 	lds	r27, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    1b2a:	40 91 64 05 	lds	r20, 0x0564	; 0x800564 <ui_task_main()::time_tag>
    1b2e:	50 91 65 05 	lds	r21, 0x0565	; 0x800565 <ui_task_main()::time_tag+0x1>
    1b32:	60 91 66 05 	lds	r22, 0x0566	; 0x800566 <ui_task_main()::time_tag+0x2>
    1b36:	70 91 67 05 	lds	r23, 0x0567	; 0x800567 <ui_task_main()::time_tag+0x3>
    1b3a:	84 1b       	sub	r24, r20
    1b3c:	95 0b       	sbc	r25, r21
    1b3e:	a6 0b       	sbc	r26, r22
    1b40:	b7 0b       	sbc	r27, r23
_Z12ui_task_mainv():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:120
                ui_state = UI_SYS_INIT;
                lcd.setCursor(0, 3);
                button_press_count = 0;
                lcd.print("Press ButtonToStart!");
            }
            else if (time_elapsed (time_tag) > 1500) {
    1b42:	8d 3d       	cpi	r24, 0xDD	; 221
    1b44:	95 40       	sbci	r25, 0x05	; 5
    1b46:	a1 05       	cpc	r26, r1
    1b48:	b1 05       	cpc	r27, r1
    1b4a:	68 f1       	brcs	.+90     	; 0x1ba6 <ui_task_main()+0x28c>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:121
                if (button_press_count >= CALIBRATION_MODE_ENTRY_CHECK)  {
    1b4c:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <button_press_count>
    1b50:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <button_press_count+0x1>
    1b54:	85 30       	cpi	r24, 0x05	; 5
    1b56:	91 05       	cpc	r25, r1
    1b58:	ec f0       	brlt	.+58     	; 0x1b94 <ui_task_main()+0x27a>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:122
                    button_press_count = 0;
    1b5a:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <button_press_count+0x1>
    1b5e:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <button_press_count>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:123
                    ui_state = UI_CALIB_MODE;
    1b62:	81 e0       	ldi	r24, 0x01	; 1
    1b64:	90 e0       	ldi	r25, 0x00	; 0
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:127
                }
                else if (button_press_count >= FACTORY_MODE_ENTRY_CHECK)  {
                    button_press_count = 0;
                    ui_state = UI_FACTORY_MODE;
    1b66:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <ui_state+0x1>
    1b6a:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <ui_state>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:129
                }
                if (button_press_count >= CONFIG_MODE_ENTRY_CHECK)  {
    1b6e:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <button_press_count>
    1b72:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <button_press_count+0x1>
    1b76:	18 16       	cp	r1, r24
    1b78:	19 06       	cpc	r1, r25
    1b7a:	0c f0       	brlt	.+2      	; 0x1b7e <ui_task_main()+0x264>
    1b7c:	92 cf       	rjmp	.-220    	; 0x1aa2 <ui_task_main()+0x188>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:130
                    button_press_count = 0;
    1b7e:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <button_press_count+0x1>
    1b82:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <button_press_count>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:131
                    ui_state = UI_CONFIG_MODE;
    1b86:	83 e0       	ldi	r24, 0x03	; 3
    1b88:	90 e0       	ldi	r25, 0x00	; 0
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:161

            multi_beeps (3);

            // Power On self test - on demand
            power_on_self_test ();
            ui_state = UI_SYS_INIT;
    1b8a:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <ui_state+0x1>
    1b8e:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <ui_state>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:162
            break;
    1b92:	87 cf       	rjmp	.-242    	; 0x1aa2 <ui_task_main()+0x188>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:125
            else if (time_elapsed (time_tag) > 1500) {
                if (button_press_count >= CALIBRATION_MODE_ENTRY_CHECK)  {
                    button_press_count = 0;
                    ui_state = UI_CALIB_MODE;
                }
                else if (button_press_count >= FACTORY_MODE_ENTRY_CHECK)  {
    1b94:	03 97       	sbiw	r24, 0x03	; 3
    1b96:	5c f3       	brlt	.-42     	; 0x1b6e <ui_task_main()+0x254>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:126
                    button_press_count = 0;
    1b98:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <button_press_count+0x1>
    1b9c:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <button_press_count>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:127
                    ui_state = UI_FACTORY_MODE;
    1ba0:	82 e0       	ldi	r24, 0x02	; 2
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	e0 cf       	rjmp	.-64     	; 0x1b66 <ui_task_main()+0x24c>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:135
                    button_press_count = 0;
                    ui_state = UI_CONFIG_MODE;
                }
            }
            else {
                if (f_state_changed)  {
    1ba6:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <f_state_changed>
    1baa:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <f_state_changed+0x1>
    1bae:	89 2b       	or	r24, r25
    1bb0:	09 f4       	brne	.+2      	; 0x1bb4 <ui_task_main()+0x29a>
    1bb2:	77 cf       	rjmp	.-274    	; 0x1aa2 <ui_task_main()+0x188>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:136
                    ui_print_welcome ();
    1bb4:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <ui_print_welcome()>
    1bb8:	74 cf       	rjmp	.-280    	; 0x1aa2 <ui_task_main()+0x188>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:141
                }
            }
            break;
        case UI_CALIB_MODE:
            DBG_PRINTLN("Entered Calibration Mode..");
    1bba:	67 ee       	ldi	r22, 0xE7	; 231
    1bbc:	73 e0       	ldi	r23, 0x03	; 3
    1bbe:	88 e2       	ldi	r24, 0x28	; 40
    1bc0:	97 e0       	ldi	r25, 0x07	; 7
    1bc2:	0e 94 bf 1c 	call	0x397e	; 0x397e <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:142
            lcd.clear();
    1bc6:	83 e4       	ldi	r24, 0x43	; 67
    1bc8:	96 e0       	ldi	r25, 0x06	; 6
    1bca:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LiquidCrystal::clear()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:143
            lcd.setCursor(0, 0);
    1bce:	40 e0       	ldi	r20, 0x00	; 0
    1bd0:	60 e0       	ldi	r22, 0x00	; 0
    1bd2:	83 e4       	ldi	r24, 0x43	; 67
    1bd4:	96 e0       	ldi	r25, 0x06	; 6
    1bd6:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:144
            lcd.print("Calibration Mode..");
    1bda:	6f ee       	ldi	r22, 0xEF	; 239
    1bdc:	73 e0       	ldi	r23, 0x03	; 3
    1bde:	83 e4       	ldi	r24, 0x43	; 67
    1be0:	96 e0       	ldi	r25, 0x06	; 6
    1be2:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:145
            lcd.setCursor(0, 1);
    1be6:	41 e0       	ldi	r20, 0x01	; 1
    1be8:	60 e0       	ldi	r22, 0x00	; 0
    1bea:	83 e4       	ldi	r24, 0x43	; 67
    1bec:	96 e0       	ldi	r25, 0x06	; 6
    1bee:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:146
            lcd.print("O2 sensorCalibration");
    1bf2:	62 e0       	ldi	r22, 0x02	; 2
    1bf4:	74 e0       	ldi	r23, 0x04	; 4
    1bf6:	83 e4       	ldi	r24, 0x43	; 67
    1bf8:	96 e0       	ldi	r25, 0x06	; 6
    1bfa:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:147
            multi_beeps (5);
    1bfe:	85 e0       	ldi	r24, 0x05	; 5
    1c00:	90 e0       	ldi	r25, 0x00	; 0
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:171
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Configuration Mode..");
            lcd.setCursor(0, 1);

            multi_beeps (2);
    1c02:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <multi_beeps(int)>
    1c06:	1c c0       	rjmp	.+56     	; 0x1c40 <ui_task_main()+0x326>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:152
            multi_beeps (5);
            
            ui_state = UI_SYS_INIT;
            break;
        case UI_FACTORY_MODE:
            DBG_PRINTLN("Factory Mode..");
    1c08:	67 e1       	ldi	r22, 0x17	; 23
    1c0a:	74 e0       	ldi	r23, 0x04	; 4
    1c0c:	88 e2       	ldi	r24, 0x28	; 40
    1c0e:	97 e0       	ldi	r25, 0x07	; 7
    1c10:	0e 94 bf 1c 	call	0x397e	; 0x397e <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:153
            lcd.clear();
    1c14:	83 e4       	ldi	r24, 0x43	; 67
    1c16:	96 e0       	ldi	r25, 0x06	; 6
    1c18:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LiquidCrystal::clear()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:154
            lcd.setCursor(0, 0);
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
    1c1e:	60 e0       	ldi	r22, 0x00	; 0
    1c20:	83 e4       	ldi	r24, 0x43	; 67
    1c22:	96 e0       	ldi	r25, 0x06	; 6
    1c24:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:155
            lcd.print("Factory Mode..");
    1c28:	67 e1       	ldi	r22, 0x17	; 23
    1c2a:	74 e0       	ldi	r23, 0x04	; 4
    1c2c:	83 e4       	ldi	r24, 0x43	; 67
    1c2e:	96 e0       	ldi	r25, 0x06	; 6
    1c30:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:157

            multi_beeps (3);
    1c34:	83 e0       	ldi	r24, 0x03	; 3
    1c36:	90 e0       	ldi	r25, 0x00	; 0
    1c38:	0e 94 61 0b 	call	0x16c2	; 0x16c2 <multi_beeps(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:160

            // Power On self test - on demand
            power_on_self_test ();
    1c3c:	0e 94 7e 0b 	call	0x16fc	; 0x16fc <power_on_self_test()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:161
            ui_state = UI_SYS_INIT;
    1c40:	84 e0       	ldi	r24, 0x04	; 4
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	a2 cf       	rjmp	.-188    	; 0x1b8a <ui_task_main()+0x270>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:165
            break;

        case UI_CONFIG_MODE:
            DBG_PRINTLN("Entered Configuration Mode..");
    1c46:	66 e2       	ldi	r22, 0x26	; 38
    1c48:	74 e0       	ldi	r23, 0x04	; 4
    1c4a:	88 e2       	ldi	r24, 0x28	; 40
    1c4c:	97 e0       	ldi	r25, 0x07	; 7
    1c4e:	0e 94 bf 1c 	call	0x397e	; 0x397e <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:166
            lcd.clear();
    1c52:	83 e4       	ldi	r24, 0x43	; 67
    1c54:	96 e0       	ldi	r25, 0x06	; 6
    1c56:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LiquidCrystal::clear()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:167
            lcd.setCursor(0, 0);
    1c5a:	40 e0       	ldi	r20, 0x00	; 0
    1c5c:	60 e0       	ldi	r22, 0x00	; 0
    1c5e:	83 e4       	ldi	r24, 0x43	; 67
    1c60:	96 e0       	ldi	r25, 0x06	; 6
    1c62:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:168
            lcd.print("Configuration Mode..");
    1c66:	6e e2       	ldi	r22, 0x2E	; 46
    1c68:	74 e0       	ldi	r23, 0x04	; 4
    1c6a:	83 e4       	ldi	r24, 0x43	; 67
    1c6c:	96 e0       	ldi	r25, 0x06	; 6
    1c6e:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:169
            lcd.setCursor(0, 1);
    1c72:	41 e0       	ldi	r20, 0x01	; 1
    1c74:	60 e0       	ldi	r22, 0x00	; 0
    1c76:	83 e4       	ldi	r24, 0x43	; 67
    1c78:	96 e0       	ldi	r25, 0x06	; 6
    1c7a:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:171

            multi_beeps (2);
    1c7e:	82 e0       	ldi	r24, 0x02	; 2
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	bf cf       	rjmp	.-130    	; 0x1c02 <ui_task_main()+0x2e8>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:176
            ui_state = UI_SYS_INIT;
            break;

        case UI_SYS_INIT:
            lcd.clear();
    1c84:	83 e4       	ldi	r24, 0x43	; 67
    1c86:	96 e0       	ldi	r25, 0x06	; 6
    1c88:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LiquidCrystal::clear()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:177
            ui_print_welcome ();
    1c8c:	0e 94 ff 0a 	call	0x15fe	; 0x15fe <ui_print_welcome()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:178
            lcd.setCursor(0, 3);
    1c90:	43 e0       	ldi	r20, 0x03	; 3
    1c92:	60 e0       	ldi	r22, 0x00	; 0
    1c94:	83 e4       	ldi	r24, 0x43	; 67
    1c96:	96 e0       	ldi	r25, 0x06	; 6
    1c98:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:179
            lcd.print("Press ButtonToStart!");
    1c9c:	62 ed       	ldi	r22, 0xD2	; 210
    1c9e:	73 e0       	ldi	r23, 0x03	; 3
    1ca0:	83 e4       	ldi	r24, 0x43	; 67
    1ca2:	96 e0       	ldi	r25, 0x06	; 6
    1ca4:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:180
            ui_state = UI_SYS_ON_CHECK;
    1ca8:	85 e0       	ldi	r24, 0x05	; 5
    1caa:	90 e0       	ldi	r25, 0x00	; 0
    1cac:	6e cf       	rjmp	.-292    	; 0x1b8a <ui_task_main()+0x270>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:184
            break;
        case UI_SYS_ON_CHECK:
            // System ON check
            if (button_pressed == true)  {
    1cae:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <button_pressed>
    1cb2:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <button_pressed+0x1>
    1cb6:	01 97       	sbiw	r24, 0x01	; 1
    1cb8:	09 f0       	breq	.+2      	; 0x1cbc <ui_task_main()+0x3a2>
    1cba:	f3 ce       	rjmp	.-538    	; 0x1aa2 <ui_task_main()+0x188>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:185
                button_pressed = false;
    1cbc:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <button_pressed+0x1>
    1cc0:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <button_pressed>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:186
                f_system_running = true;
    1cc4:	81 e0       	ldi	r24, 0x01	; 1
    1cc6:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <f_system_running>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:188

                DBG_PRINTLN("Start Button Pressed..!");
    1cca:	63 e4       	ldi	r22, 0x43	; 67
    1ccc:	74 e0       	ldi	r23, 0x04	; 4
    1cce:	88 e2       	ldi	r24, 0x28	; 40
    1cd0:	97 e0       	ldi	r25, 0x07	; 7
    1cd2:	0e 94 bf 1c 	call	0x397e	; 0x397e <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:189
                lcd.setCursor(0, 3);
    1cd6:	43 e0       	ldi	r20, 0x03	; 3
    1cd8:	60 e0       	ldi	r22, 0x00	; 0
    1cda:	83 e4       	ldi	r24, 0x43	; 67
    1cdc:	96 e0       	ldi	r25, 0x06	; 6
    1cde:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:190
                lcd.print("Start Button Pressed");
    1ce2:	6b e5       	ldi	r22, 0x5B	; 91
    1ce4:	74 e0       	ldi	r23, 0x04	; 4
    1ce6:	83 e4       	ldi	r24, 0x43	; 67
    1ce8:	96 e0       	ldi	r25, 0x06	; 6
    1cea:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:191
                beep_for (SYS_ON_BEEP);   // msecs
    1cee:	8b e2       	ldi	r24, 0x2B	; 43
    1cf0:	92 e0       	ldi	r25, 0x02	; 2
    1cf2:	0e 94 4f 0b 	call	0x169e	; 0x169e <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:196

                
                // new_delay_msecs (1000);

                lcd.setCursor(0, 3);
    1cf6:	43 e0       	ldi	r20, 0x03	; 3
    1cf8:	60 e0       	ldi	r22, 0x00	; 0
    1cfa:	83 e4       	ldi	r24, 0x43	; 67
    1cfc:	96 e0       	ldi	r25, 0x06	; 6
    1cfe:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:197
                lcd.print("O2 Cons. Starting... ");
    1d02:	60 e7       	ldi	r22, 0x70	; 112
    1d04:	74 e0       	ldi	r23, 0x04	; 4
    1d06:	83 e4       	ldi	r24, 0x43	; 67
    1d08:	96 e0       	ldi	r25, 0x06	; 6
    1d0a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:198
                new_delay_msecs (1000);
    1d0e:	88 ee       	ldi	r24, 0xE8	; 232
    1d10:	93 e0       	ldi	r25, 0x03	; 3
    1d12:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:300
                lcd.print("O2 Cons. Stopped..! ");
                ui_state = UI_LAST;
            }
            else {
                // back to run state..
                ui_state = UI_SYS_RUNNING;
    1d16:	86 e0       	ldi	r24, 0x06	; 6
    1d18:	90 e0       	ldi	r25, 0x00	; 0
    1d1a:	37 cf       	rjmp	.-402    	; 0x1b8a <ui_task_main()+0x270>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:209


        case UI_SYS_RUNNING:
            // system running
            // LCD Line 1
            if (f_state_changed)  {
    1d1c:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <f_state_changed>
    1d20:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <f_state_changed+0x1>
    1d24:	89 2b       	or	r24, r25
    1d26:	61 f1       	breq	.+88     	; 0x1d80 <ui_task_main()+0x466>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:210
                f_state_changed = 0;
    1d28:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <f_state_changed+0x1>
    1d2c:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <f_state_changed>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:211
                lcd_clear_buf (lcd_temp_string);
    1d30:	8e e8       	ldi	r24, 0x8E	; 142
    1d32:	95 e0       	ldi	r25, 0x05	; 5
    1d34:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd_clear_buf(char*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:214


                lcd.clear();
    1d38:	83 e4       	ldi	r24, 0x43	; 67
    1d3a:	96 e0       	ldi	r25, 0x06	; 6
    1d3c:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LiquidCrystal::clear()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:215
                lcd.setCursor(0, 0);
    1d40:	40 e0       	ldi	r20, 0x00	; 0
    1d42:	60 e0       	ldi	r22, 0x00	; 0
    1d44:	83 e4       	ldi	r24, 0x43	; 67
    1d46:	96 e0       	ldi	r25, 0x06	; 6
    1d48:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:216
                sprintf(lcd_temp_string, "O2 CONC   PRESSURE ");
    1d4c:	66 e8       	ldi	r22, 0x86	; 134
    1d4e:	74 e0       	ldi	r23, 0x04	; 4
    1d50:	8e e8       	ldi	r24, 0x8E	; 142
    1d52:	95 e0       	ldi	r25, 0x05	; 5
    1d54:	0e 94 62 21 	call	0x42c4	; 0x42c4 <strcpy>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:217
                DBG_PRINTLN(lcd_temp_string);
    1d58:	6e e8       	ldi	r22, 0x8E	; 142
    1d5a:	75 e0       	ldi	r23, 0x05	; 5
    1d5c:	88 e2       	ldi	r24, 0x28	; 40
    1d5e:	97 e0       	ldi	r25, 0x07	; 7
    1d60:	0e 94 bf 1c 	call	0x397e	; 0x397e <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:219
                //        "...................."
                lcd.print(lcd_temp_string);
    1d64:	6e e8       	ldi	r22, 0x8E	; 142
    1d66:	75 e0       	ldi	r23, 0x05	; 5
    1d68:	83 e4       	ldi	r24, 0x43	; 67
    1d6a:	96 e0       	ldi	r25, 0x06	; 6
    1d6c:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:222

                // temp : just to trigger LCD refresh for O2 values
                prev_o2_concentration = 0;
    1d70:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <prev_o2_concentration>
    1d74:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <prev_o2_concentration+0x1>
    1d78:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <prev_o2_concentration+0x2>
    1d7c:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <prev_o2_concentration+0x3>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:227
            }

            // LCD Line 2
            // O2 concentration / output pressure
            if (prev_o2_concentration != o2_concentration || prev_output_pressure != output_pressure)  {
    1d80:	80 90 24 01 	lds	r8, 0x0124	; 0x800124 <o2_concentration>
    1d84:	90 90 25 01 	lds	r9, 0x0125	; 0x800125 <o2_concentration+0x1>
    1d88:	a0 90 26 01 	lds	r10, 0x0126	; 0x800126 <o2_concentration+0x2>
    1d8c:	b0 90 27 01 	lds	r11, 0x0127	; 0x800127 <o2_concentration+0x3>
    1d90:	c0 90 20 01 	lds	r12, 0x0120	; 0x800120 <output_pressure>
    1d94:	d0 90 21 01 	lds	r13, 0x0121	; 0x800121 <output_pressure+0x1>
    1d98:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <output_pressure+0x2>
    1d9c:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <output_pressure+0x3>
    1da0:	a5 01       	movw	r20, r10
    1da2:	94 01       	movw	r18, r8
    1da4:	60 91 ce 05 	lds	r22, 0x05CE	; 0x8005ce <prev_o2_concentration>
    1da8:	70 91 cf 05 	lds	r23, 0x05CF	; 0x8005cf <prev_o2_concentration+0x1>
    1dac:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <prev_o2_concentration+0x2>
    1db0:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <prev_o2_concentration+0x3>
    1db4:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__cmpsf2>
    1db8:	81 11       	cpse	r24, r1
    1dba:	0f c0       	rjmp	.+30     	; 0x1dda <ui_task_main()+0x4c0>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:227 (discriminator 1)
    1dbc:	a7 01       	movw	r20, r14
    1dbe:	96 01       	movw	r18, r12
    1dc0:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <prev_output_pressure>
    1dc4:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <prev_output_pressure+0x1>
    1dc8:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <prev_output_pressure+0x2>
    1dcc:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <prev_output_pressure+0x3>
    1dd0:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__cmpsf2>
    1dd4:	88 23       	and	r24, r24
    1dd6:	09 f4       	brne	.+2      	; 0x1dda <ui_task_main()+0x4c0>
    1dd8:	51 c0       	rjmp	.+162    	; 0x1e7c <ui_task_main()+0x562>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:228
                prev_o2_concentration  = o2_concentration;
    1dda:	80 92 ce 05 	sts	0x05CE, r8	; 0x8005ce <prev_o2_concentration>
    1dde:	90 92 cf 05 	sts	0x05CF, r9	; 0x8005cf <prev_o2_concentration+0x1>
    1de2:	a0 92 d0 05 	sts	0x05D0, r10	; 0x8005d0 <prev_o2_concentration+0x2>
    1de6:	b0 92 d1 05 	sts	0x05D1, r11	; 0x8005d1 <prev_o2_concentration+0x3>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:229
                prev_output_pressure = output_pressure;
    1dea:	c0 92 1c 01 	sts	0x011C, r12	; 0x80011c <prev_output_pressure>
    1dee:	d0 92 1d 01 	sts	0x011D, r13	; 0x80011d <prev_output_pressure+0x1>
    1df2:	e0 92 1e 01 	sts	0x011E, r14	; 0x80011e <prev_output_pressure+0x2>
    1df6:	f0 92 1f 01 	sts	0x011F, r15	; 0x80011f <prev_output_pressure+0x3>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:233
                // sprintf(lcd_temp_string, "%f \%%   %2d psi", o2_concentration, output_pressure);
                // DBG_PRINTLN(lcd_temp_string);
                /* 4 is mininum width, 2 is precision; float value is copied onto str_temp*/
                dtostrf(o2_concentration, 4, 2, str_temp);
    1dfa:	7e 01       	movw	r14, r28
    1dfc:	37 e0       	ldi	r19, 0x07	; 7
    1dfe:	e3 0e       	add	r14, r19
    1e00:	f1 1c       	adc	r15, r1
    1e02:	87 01       	movw	r16, r14
    1e04:	22 e0       	ldi	r18, 0x02	; 2
    1e06:	44 e0       	ldi	r20, 0x04	; 4
    1e08:	c5 01       	movw	r24, r10
    1e0a:	b4 01       	movw	r22, r8
    1e0c:	0e 94 44 21 	call	0x4288	; 0x4288 <dtostrf>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:236


                dtostrf(output_pressure, 5, 2, str_temp2);
    1e10:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <output_pressure>
    1e14:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <output_pressure+0x1>
    1e18:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <output_pressure+0x2>
    1e1c:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <output_pressure+0x3>
    1e20:	9e 01       	movw	r18, r28
    1e22:	2f 5f       	subi	r18, 0xFF	; 255
    1e24:	3f 4f       	sbci	r19, 0xFF	; 255
    1e26:	59 01       	movw	r10, r18
    1e28:	89 01       	movw	r16, r18
    1e2a:	22 e0       	ldi	r18, 0x02	; 2
    1e2c:	45 e0       	ldi	r20, 0x05	; 5
    1e2e:	0e 94 44 21 	call	0x4288	; 0x4288 <dtostrf>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:238
                // sprintf(lcd_temp_string, "%f \%%   %2d psi", o2_concentration, output_pressure);
                sprintf(lcd_temp_string, "%s %%   %s psi", str_temp, str_temp2);
    1e32:	bf 92       	push	r11
    1e34:	af 92       	push	r10
    1e36:	ff 92       	push	r15
    1e38:	ef 92       	push	r14
    1e3a:	8a e9       	ldi	r24, 0x9A	; 154
    1e3c:	94 e0       	ldi	r25, 0x04	; 4
    1e3e:	9f 93       	push	r25
    1e40:	8f 93       	push	r24
    1e42:	8e e8       	ldi	r24, 0x8E	; 142
    1e44:	95 e0       	ldi	r25, 0x05	; 5
    1e46:	9f 93       	push	r25
    1e48:	8f 93       	push	r24
    1e4a:	0e 94 69 21 	call	0x42d2	; 0x42d2 <sprintf>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:240

                DBG_PRINTLN(lcd_temp_string);
    1e4e:	6e e8       	ldi	r22, 0x8E	; 142
    1e50:	75 e0       	ldi	r23, 0x05	; 5
    1e52:	88 e2       	ldi	r24, 0x28	; 40
    1e54:	97 e0       	ldi	r25, 0x07	; 7
    1e56:	0e 94 bf 1c 	call	0x397e	; 0x397e <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:241
                lcd.setCursor(0, 1);
    1e5a:	41 e0       	ldi	r20, 0x01	; 1
    1e5c:	60 e0       	ldi	r22, 0x00	; 0
    1e5e:	83 e4       	ldi	r24, 0x43	; 67
    1e60:	96 e0       	ldi	r25, 0x06	; 6
    1e62:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:242
                lcd.print(lcd_temp_string);
    1e66:	6e e8       	ldi	r22, 0x8E	; 142
    1e68:	75 e0       	ldi	r23, 0x05	; 5
    1e6a:	83 e4       	ldi	r24, 0x43	; 67
    1e6c:	96 e0       	ldi	r25, 0x06	; 6
    1e6e:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
    1e72:	0f b6       	in	r0, 0x3f	; 63
    1e74:	f8 94       	cli
    1e76:	de bf       	out	0x3e, r29	; 62
    1e78:	0f be       	out	0x3f, r0	; 63
    1e7a:	cd bf       	out	0x3d, r28	; 61
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:254
            // LCD Line 3
            // lcd.setCursor(0, 2);
            // blank for now

            // LCD Line 4
            if (prev_current_run_time_secs ^ current_run_time_secs) {
    1e7c:	20 91 cc 05 	lds	r18, 0x05CC	; 0x8005cc <current_run_time_secs>
    1e80:	30 91 cd 05 	lds	r19, 0x05CD	; 0x8005cd <current_run_time_secs+0x1>
    1e84:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <prev_current_run_time_secs>
    1e88:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <prev_current_run_time_secs+0x1>
    1e8c:	82 17       	cp	r24, r18
    1e8e:	93 07       	cpc	r25, r19
    1e90:	d1 f1       	breq	.+116    	; 0x1f06 <ui_task_main()+0x5ec>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:255
                prev_current_run_time_secs = current_run_time_secs;
    1e92:	30 93 cb 05 	sts	0x05CB, r19	; 0x8005cb <prev_current_run_time_secs+0x1>
    1e96:	20 93 ca 05 	sts	0x05CA, r18	; 0x8005ca <prev_current_run_time_secs>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:257

                int secs = ( current_run_time_secs %  60);
    1e9a:	ec e3       	ldi	r30, 0x3C	; 60
    1e9c:	f0 e0       	ldi	r31, 0x00	; 0
    1e9e:	c9 01       	movw	r24, r18
    1ea0:	bf 01       	movw	r22, r30
    1ea2:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:260
                int mins = ((current_run_time_secs % (60 * 60)) / 60);
                int hrs  = ( current_run_time_secs / (60 * 60));
                sprintf(lcd_temp_string, "RUN TIME  %02d:%02d:%02d", hrs, mins, secs);
    1ea6:	9f 93       	push	r25
    1ea8:	8f 93       	push	r24
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:258
            // LCD Line 4
            if (prev_current_run_time_secs ^ current_run_time_secs) {
                prev_current_run_time_secs = current_run_time_secs;

                int secs = ( current_run_time_secs %  60);
                int mins = ((current_run_time_secs % (60 * 60)) / 60);
    1eaa:	c9 01       	movw	r24, r18
    1eac:	60 e1       	ldi	r22, 0x10	; 16
    1eae:	7e e0       	ldi	r23, 0x0E	; 14
    1eb0:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
    1eb4:	9b 01       	movw	r18, r22
    1eb6:	bf 01       	movw	r22, r30
    1eb8:	0e 94 05 21 	call	0x420a	; 0x420a <__udivmodhi4>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:260
                int hrs  = ( current_run_time_secs / (60 * 60));
                sprintf(lcd_temp_string, "RUN TIME  %02d:%02d:%02d", hrs, mins, secs);
    1ebc:	7f 93       	push	r23
    1ebe:	6f 93       	push	r22
    1ec0:	3f 93       	push	r19
    1ec2:	2f 93       	push	r18
    1ec4:	89 ea       	ldi	r24, 0xA9	; 169
    1ec6:	94 e0       	ldi	r25, 0x04	; 4
    1ec8:	9f 93       	push	r25
    1eca:	8f 93       	push	r24
    1ecc:	8e e8       	ldi	r24, 0x8E	; 142
    1ece:	95 e0       	ldi	r25, 0x05	; 5
    1ed0:	9f 93       	push	r25
    1ed2:	8f 93       	push	r24
    1ed4:	0e 94 69 21 	call	0x42d2	; 0x42d2 <sprintf>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:261
                DBG_PRINTLN(lcd_temp_string);
    1ed8:	6e e8       	ldi	r22, 0x8E	; 142
    1eda:	75 e0       	ldi	r23, 0x05	; 5
    1edc:	88 e2       	ldi	r24, 0x28	; 40
    1ede:	97 e0       	ldi	r25, 0x07	; 7
    1ee0:	0e 94 bf 1c 	call	0x397e	; 0x397e <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:262
                lcd.setCursor(0, 3);
    1ee4:	43 e0       	ldi	r20, 0x03	; 3
    1ee6:	60 e0       	ldi	r22, 0x00	; 0
    1ee8:	83 e4       	ldi	r24, 0x43	; 67
    1eea:	96 e0       	ldi	r25, 0x06	; 6
    1eec:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:263
                lcd.print(lcd_temp_string);
    1ef0:	6e e8       	ldi	r22, 0x8E	; 142
    1ef2:	75 e0       	ldi	r23, 0x05	; 5
    1ef4:	83 e4       	ldi	r24, 0x43	; 67
    1ef6:	96 e0       	ldi	r25, 0x06	; 6
    1ef8:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
    1efc:	0f b6       	in	r0, 0x3f	; 63
    1efe:	f8 94       	cli
    1f00:	de bf       	out	0x3e, r29	; 62
    1f02:	0f be       	out	0x3f, r0	; 63
    1f04:	cd bf       	out	0x3d, r28	; 61
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:267
            }

            // System OFF check
            if (button_pressed == true)  {
    1f06:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <button_pressed>
    1f0a:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <button_pressed+0x1>
    1f0e:	01 97       	sbiw	r24, 0x01	; 1
    1f10:	09 f0       	breq	.+2      	; 0x1f14 <ui_task_main()+0x5fa>
    1f12:	c7 cd       	rjmp	.-1138   	; 0x1aa2 <ui_task_main()+0x188>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:268
                ui_state = UI_SYS_OFF_CHECK;
    1f14:	87 e0       	ldi	r24, 0x07	; 7
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	38 ce       	rjmp	.-912    	; 0x1b8a <ui_task_main()+0x270>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:277
            }
            break;

        case UI_SYS_OFF_CHECK:
            // System OFF check
            if (button_pressed == true)  {
    1f1a:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <button_pressed>
    1f1e:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <button_pressed+0x1>
    1f22:	01 97       	sbiw	r24, 0x01	; 1
    1f24:	09 f0       	breq	.+2      	; 0x1f28 <ui_task_main()+0x60e>
    1f26:	f7 ce       	rjmp	.-530    	; 0x1d16 <ui_task_main()+0x3fc>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:278
                button_pressed = false;
    1f28:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <button_pressed+0x1>
    1f2c:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <button_pressed>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:279
                f_system_running = false;
    1f30:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <f_system_running>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:280
                DBG_PRINTLN("Stop Button Pressed!");
    1f34:	62 ec       	ldi	r22, 0xC2	; 194
    1f36:	74 e0       	ldi	r23, 0x04	; 4
    1f38:	88 e2       	ldi	r24, 0x28	; 40
    1f3a:	97 e0       	ldi	r25, 0x07	; 7
    1f3c:	0e 94 bf 1c 	call	0x397e	; 0x397e <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:281
                lcd.setCursor(0, 3);
    1f40:	43 e0       	ldi	r20, 0x03	; 3
    1f42:	60 e0       	ldi	r22, 0x00	; 0
    1f44:	83 e4       	ldi	r24, 0x43	; 67
    1f46:	96 e0       	ldi	r25, 0x06	; 6
    1f48:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:282
                lcd.print("Stop Button Pressed ");
    1f4c:	67 ed       	ldi	r22, 0xD7	; 215
    1f4e:	74 e0       	ldi	r23, 0x04	; 4
    1f50:	83 e4       	ldi	r24, 0x43	; 67
    1f52:	96 e0       	ldi	r25, 0x06	; 6
    1f54:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:283
                COMPRSSR_CNTRL (COMPRSSR_OFF);
    1f58:	60 e0       	ldi	r22, 0x00	; 0
    1f5a:	88 e0       	ldi	r24, 0x08	; 8
    1f5c:	90 e0       	ldi	r25, 0x00	; 0
    1f5e:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:284
                beep_for (SYS_OFF_BEEP);   // msecs
    1f62:	8f e6       	ldi	r24, 0x6F	; 111
    1f64:	90 e0       	ldi	r25, 0x00	; 0
    1f66:	0e 94 4f 0b 	call	0x169e	; 0x169e <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:287

                // Bring values to default position
                tworks2_values_to_default_postion ();
    1f6a:	0e 94 83 09 	call	0x1306	; 0x1306 <tworks2_values_to_default_postion()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:289

                new_delay_msecs (1000);
    1f6e:	88 ee       	ldi	r24, 0xE8	; 232
    1f70:	93 e0       	ldi	r25, 0x03	; 3
    1f72:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:290
                lcd.setCursor(0, 3);
    1f76:	43 e0       	ldi	r20, 0x03	; 3
    1f78:	60 e0       	ldi	r22, 0x00	; 0
    1f7a:	83 e4       	ldi	r24, 0x43	; 67
    1f7c:	96 e0       	ldi	r25, 0x06	; 6
    1f7e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:291
                lcd.print("O2 Cons. Stopping.. ");
    1f82:	6c ee       	ldi	r22, 0xEC	; 236
    1f84:	74 e0       	ldi	r23, 0x04	; 4
    1f86:	83 e4       	ldi	r24, 0x43	; 67
    1f88:	96 e0       	ldi	r25, 0x06	; 6
    1f8a:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:292
                new_delay_msecs (1000);
    1f8e:	88 ee       	ldi	r24, 0xE8	; 232
    1f90:	93 e0       	ldi	r25, 0x03	; 3
    1f92:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:294

                lcd.setCursor(0, 3);
    1f96:	43 e0       	ldi	r20, 0x03	; 3
    1f98:	60 e0       	ldi	r22, 0x00	; 0
    1f9a:	83 e4       	ldi	r24, 0x43	; 67
    1f9c:	96 e0       	ldi	r25, 0x06	; 6
    1f9e:	0e 94 fe 10 	call	0x21fc	; 0x21fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:295
                lcd.print("O2 Cons. Stopped..! ");
    1fa2:	61 e0       	ldi	r22, 0x01	; 1
    1fa4:	75 e0       	ldi	r23, 0x05	; 5
    1fa6:	83 e4       	ldi	r24, 0x43	; 67
    1fa8:	96 e0       	ldi	r25, 0x06	; 6
    1faa:	0e 94 9a 1c 	call	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:296
                ui_state = UI_LAST;
    1fae:	88 e0       	ldi	r24, 0x08	; 8
    1fb0:	90 e0       	ldi	r25, 0x00	; 0
    1fb2:	eb cd       	rjmp	.-1066   	; 0x1b8a <ui_task_main()+0x270>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:305
                ui_state = UI_SYS_RUNNING;
            }
            break;
        default:
        case UI_LAST:
            ui_state = UI_START;
    1fb4:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <ui_state+0x1>
    1fb8:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <ui_state>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:306
            break;
    1fbc:	72 cd       	rjmp	.-1308   	; 0x1aa2 <ui_task_main()+0x188>

00001fbe <loop>:
loop():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:56


void loop (void) {

    // 1. periodic tasks are called here
    if (f_msec) {
    1fbe:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <f_msec>
    1fc2:	88 23       	and	r24, r24
    1fc4:	19 f0       	breq	.+6      	; 0x1fcc <loop+0xe>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:57
        f_msec = 0;
    1fc6:	10 92 dc 05 	sts	0x05DC, r1	; 0x8005dc <f_msec>
    1fca:	08 95       	ret
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:61
        // milli second tasks go here..

    }
    else if (f_10msec) {
    1fcc:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <f_10msec>
    1fd0:	88 23       	and	r24, r24
    1fd2:	19 f0       	breq	.+6      	; 0x1fda <loop+0x1c>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:62
        f_10msec = 0;
    1fd4:	10 92 db 05 	sts	0x05DB, r1	; 0x8005db <f_10msec>
    1fd8:	08 95       	ret
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:66
        // 10 milli second tasks go here..

    }
    else if (f_100msec) {
    1fda:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <f_100msec>
    1fde:	88 23       	and	r24, r24
    1fe0:	19 f0       	breq	.+6      	; 0x1fe8 <loop+0x2a>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:67
        f_100msec = 0;
    1fe2:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <f_100msec>
    1fe6:	08 95       	ret
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:70
        // 100 milli second tasks go here..
    }
    else if (f_1sec) {
    1fe8:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <f_1sec>
    1fec:	88 23       	and	r24, r24
    1fee:	e9 f0       	breq	.+58     	; 0x202a <loop+0x6c>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:71
        f_1sec = 0;
    1ff0:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <f_1sec>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:73
        // 1 second tasks go here..
        f_sec_logs_task = 1;
    1ff4:	81 e0       	ldi	r24, 0x01	; 1
    1ff6:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <f_sec_logs_task>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:74
        f_sec_change_ui_task = 1;
    1ffa:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <f_sec_change_ui_task>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:75
        f_sec_change_o2_task = 1;
    1ffe:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <f_sec_change_o2_task>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:76
        f_sec_change_sensor_task = 1;
    2002:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <f_sec_change_sensor_task>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:78

        o2_sensor_scan ();
    2006:	0e 94 34 07 	call	0xe68	; 0xe68 <o2_sensor_scan()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:80
        // read_pressure ();
        display_o2 (o2_concentration);       
    200a:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <o2_concentration>
    200e:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <o2_concentration+0x1>
    2012:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <o2_concentration+0x2>
    2016:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <o2_concentration+0x3>
    201a:	0e 94 a1 02 	call	0x542	; 0x542 <display_o2(float)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:81
        DBG_PRINT (".");
    201e:	68 e6       	ldi	r22, 0x68	; 104
    2020:	72 e0       	ldi	r23, 0x02	; 2
    2022:	88 e2       	ldi	r24, 0x28	; 40
    2024:	97 e0       	ldi	r25, 0x07	; 7
    2026:	0c 94 9a 1c 	jmp	0x3934	; 0x3934 <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:83
    }
    else if (f_1min) {
    202a:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <f_1min>
    202e:	88 23       	and	r24, r24
    2030:	19 f0       	breq	.+6      	; 0x2038 <loop+0x7a>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:84
        f_1min = 0;
    2032:	10 92 d8 05 	sts	0x05D8, r1	; 0x8005d8 <f_1min>
    2036:	08 95       	ret
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:88
        // 1 minute tasks go here..
        
    }
    else if (f_1hr) {
    2038:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <f_1hr>
    203c:	88 23       	and	r24, r24
    203e:	19 f0       	breq	.+6      	; 0x2046 <loop+0x88>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:89
        f_1hr = 0;
    2040:	10 92 d7 05 	sts	0x05D7, r1	; 0x8005d7 <f_1hr>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:101
        o2_main_task ();
        ui_task_main ();
        logs_task ();
    }

}
    2044:	08 95       	ret
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:96

    }

    // 2. contineous tasks are called here
    else {
        o2_main_task ();
    2046:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <o2_main_task()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:97
        ui_task_main ();
    204a:	0e 94 8d 0c 	call	0x191a	; 0x191a <ui_task_main()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:98
        logs_task ();
    204e:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <logs_task()>

00002052 <_GLOBAL__sub_I_lcd>:
_GLOBAL__sub_I_lcd():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:401
    lcd.setCursor(0, 3);
    //  "1.3.5.7.9.........20"
    lcd.print("Testing over...!!   ");
    new_delay_msecs (2000);

}
    2052:	cf 92       	push	r12
    2054:	ef 92       	push	r14
    2056:	0f 93       	push	r16
    2058:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\habeeba\AppData\Local\Temp\arduino_build_499708\sketch/display.h:40


#define LCD_ROWS   ( 4)
#define LCD_COLS   (20)

LiquidCrystal   lcd(RS, EN, D4, D5, D6, D7);
    205a:	87 e1       	ldi	r24, 0x17	; 23
    205c:	c8 2e       	mov	r12, r24
    205e:	96 e1       	ldi	r25, 0x16	; 22
    2060:	e9 2e       	mov	r14, r25
    2062:	05 e1       	ldi	r16, 0x15	; 21
    2064:	24 e1       	ldi	r18, 0x14	; 20
    2066:	43 e1       	ldi	r20, 0x13	; 19
    2068:	62 e1       	ldi	r22, 0x12	; 18
    206a:	83 e4       	ldi	r24, 0x43	; 67
    206c:	96 e0       	ldi	r25, 0x06	; 6
    206e:	0e 94 b3 11 	call	0x2366	; 0x2366 <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
C:\Users\habeeba\AppData\Local\Temp\arduino_build_499708\sketch/display.h:41
LedControl      lc = LedControl(dataPin_7segment, clckPin_7segment, loadPin_7segment, 1);
    2072:	01 e0       	ldi	r16, 0x01	; 1
    2074:	10 e0       	ldi	r17, 0x00	; 0
    2076:	2d e0       	ldi	r18, 0x0D	; 13
    2078:	30 e0       	ldi	r19, 0x00	; 0
    207a:	47 e0       	ldi	r20, 0x07	; 7
    207c:	50 e0       	ldi	r21, 0x00	; 0
    207e:	65 e0       	ldi	r22, 0x05	; 5
    2080:	70 e0       	ldi	r23, 0x00	; 0
    2082:	8b ee       	ldi	r24, 0xEB	; 235
    2084:	95 e0       	ldi	r25, 0x05	; 5
    2086:	0e 94 a4 12 	call	0x2548	; 0x2548 <LedControl::LedControl(int, int, int, int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:20
//float x_samples[NUM_OF_SAMPLES_O2] = {224.0,  1083.0, 4888.0};




ADS1115 ADS(O2_SENSOR_ADS_ADDR);
    208a:	4b e5       	ldi	r20, 0x5B	; 91
    208c:	56 e0       	ldi	r21, 0x06	; 6
    208e:	68 e4       	ldi	r22, 0x48	; 72
    2090:	86 e7       	ldi	r24, 0x76	; 118
    2092:	95 e0       	ldi	r25, 0x05	; 5
_GLOBAL__sub_I_lcd():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:401
    2094:	1f 91       	pop	r17
    2096:	0f 91       	pop	r16
    2098:	ef 90       	pop	r14
    209a:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:20
    209c:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <ADS1115::ADS1115(unsigned char, TwoWire*)>

000020a0 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:271
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    20a0:	90 e0       	ldi	r25, 0x00	; 0
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	08 95       	ret

000020a6 <Print::flush()>:
_ZN5Print5flushEv():
    20a6:	08 95       	ret

000020a8 <LiquidCrystal::pulseEnable()>:
_ZN13LiquidCrystal11pulseEnableEv():
    20a8:	cf 93       	push	r28
    20aa:	df 93       	push	r29
    20ac:	ec 01       	movw	r28, r24
    20ae:	60 e0       	ldi	r22, 0x00	; 0
    20b0:	8e 81       	ldd	r24, Y+6	; 0x06
    20b2:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    20b6:	81 e0       	ldi	r24, 0x01	; 1
    20b8:	90 e0       	ldi	r25, 0x00	; 0
    20ba:	0e 94 2a 19 	call	0x3254	; 0x3254 <delayMicroseconds>
    20be:	61 e0       	ldi	r22, 0x01	; 1
    20c0:	8e 81       	ldd	r24, Y+6	; 0x06
    20c2:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    20c6:	81 e0       	ldi	r24, 0x01	; 1
    20c8:	90 e0       	ldi	r25, 0x00	; 0
    20ca:	0e 94 2a 19 	call	0x3254	; 0x3254 <delayMicroseconds>
    20ce:	60 e0       	ldi	r22, 0x00	; 0
    20d0:	8e 81       	ldd	r24, Y+6	; 0x06
    20d2:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    20d6:	84 e6       	ldi	r24, 0x64	; 100
    20d8:	90 e0       	ldi	r25, 0x00	; 0
    20da:	df 91       	pop	r29
    20dc:	cf 91       	pop	r28
    20de:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <delayMicroseconds>

000020e2 <LiquidCrystal::write4bits(unsigned char)>:
_ZN13LiquidCrystal10write4bitsEh():
    20e2:	cf 92       	push	r12
    20e4:	df 92       	push	r13
    20e6:	ef 92       	push	r14
    20e8:	ff 92       	push	r15
    20ea:	0f 93       	push	r16
    20ec:	1f 93       	push	r17
    20ee:	cf 93       	push	r28
    20f0:	df 93       	push	r29
    20f2:	6c 01       	movw	r12, r24
    20f4:	7c 01       	movw	r14, r24
    20f6:	87 e0       	ldi	r24, 0x07	; 7
    20f8:	e8 0e       	add	r14, r24
    20fa:	f1 1c       	adc	r15, r1
    20fc:	d0 e0       	ldi	r29, 0x00	; 0
    20fe:	c0 e0       	ldi	r28, 0x00	; 0
    2100:	06 2f       	mov	r16, r22
    2102:	10 e0       	ldi	r17, 0x00	; 0
    2104:	b8 01       	movw	r22, r16
    2106:	0c 2e       	mov	r0, r28
    2108:	02 c0       	rjmp	.+4      	; 0x210e <LiquidCrystal::write4bits(unsigned char)+0x2c>
    210a:	75 95       	asr	r23
    210c:	67 95       	ror	r22
    210e:	0a 94       	dec	r0
    2110:	e2 f7       	brpl	.-8      	; 0x210a <LiquidCrystal::write4bits(unsigned char)+0x28>
    2112:	61 70       	andi	r22, 0x01	; 1
    2114:	f7 01       	movw	r30, r14
    2116:	81 91       	ld	r24, Z+
    2118:	7f 01       	movw	r14, r30
    211a:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    211e:	21 96       	adiw	r28, 0x01	; 1
    2120:	c4 30       	cpi	r28, 0x04	; 4
    2122:	d1 05       	cpc	r29, r1
    2124:	79 f7       	brne	.-34     	; 0x2104 <LiquidCrystal::write4bits(unsigned char)+0x22>
    2126:	c6 01       	movw	r24, r12
    2128:	df 91       	pop	r29
    212a:	cf 91       	pop	r28
    212c:	1f 91       	pop	r17
    212e:	0f 91       	pop	r16
    2130:	ff 90       	pop	r15
    2132:	ef 90       	pop	r14
    2134:	df 90       	pop	r13
    2136:	cf 90       	pop	r12
    2138:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <LiquidCrystal::pulseEnable()>

0000213c <LiquidCrystal::write8bits(unsigned char)>:
_ZN13LiquidCrystal10write8bitsEh():
    213c:	cf 92       	push	r12
    213e:	df 92       	push	r13
    2140:	ef 92       	push	r14
    2142:	ff 92       	push	r15
    2144:	0f 93       	push	r16
    2146:	1f 93       	push	r17
    2148:	cf 93       	push	r28
    214a:	df 93       	push	r29
    214c:	6c 01       	movw	r12, r24
    214e:	7c 01       	movw	r14, r24
    2150:	87 e0       	ldi	r24, 0x07	; 7
    2152:	e8 0e       	add	r14, r24
    2154:	f1 1c       	adc	r15, r1
    2156:	d0 e0       	ldi	r29, 0x00	; 0
    2158:	c0 e0       	ldi	r28, 0x00	; 0
    215a:	06 2f       	mov	r16, r22
    215c:	10 e0       	ldi	r17, 0x00	; 0
    215e:	b8 01       	movw	r22, r16
    2160:	0c 2e       	mov	r0, r28
    2162:	02 c0       	rjmp	.+4      	; 0x2168 <LiquidCrystal::write8bits(unsigned char)+0x2c>
    2164:	75 95       	asr	r23
    2166:	67 95       	ror	r22
    2168:	0a 94       	dec	r0
    216a:	e2 f7       	brpl	.-8      	; 0x2164 <LiquidCrystal::write8bits(unsigned char)+0x28>
    216c:	61 70       	andi	r22, 0x01	; 1
    216e:	f7 01       	movw	r30, r14
    2170:	81 91       	ld	r24, Z+
    2172:	7f 01       	movw	r14, r30
    2174:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    2178:	21 96       	adiw	r28, 0x01	; 1
    217a:	c8 30       	cpi	r28, 0x08	; 8
    217c:	d1 05       	cpc	r29, r1
    217e:	79 f7       	brne	.-34     	; 0x215e <LiquidCrystal::write8bits(unsigned char)+0x22>
    2180:	c6 01       	movw	r24, r12
    2182:	df 91       	pop	r29
    2184:	cf 91       	pop	r28
    2186:	1f 91       	pop	r17
    2188:	0f 91       	pop	r16
    218a:	ff 90       	pop	r15
    218c:	ef 90       	pop	r14
    218e:	df 90       	pop	r13
    2190:	cf 90       	pop	r12
    2192:	0c 94 54 10 	jmp	0x20a8	; 0x20a8 <LiquidCrystal::pulseEnable()>

00002196 <LiquidCrystal::send(unsigned char, unsigned char)>:
_ZN13LiquidCrystal4sendEhh():
    2196:	1f 93       	push	r17
    2198:	cf 93       	push	r28
    219a:	df 93       	push	r29
    219c:	ec 01       	movw	r28, r24
    219e:	16 2f       	mov	r17, r22
    21a0:	64 2f       	mov	r22, r20
    21a2:	8c 81       	ldd	r24, Y+4	; 0x04
    21a4:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    21a8:	8d 81       	ldd	r24, Y+5	; 0x05
    21aa:	8f 3f       	cpi	r24, 0xFF	; 255
    21ac:	19 f0       	breq	.+6      	; 0x21b4 <LiquidCrystal::send(unsigned char, unsigned char)+0x1e>
    21ae:	60 e0       	ldi	r22, 0x00	; 0
    21b0:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    21b4:	8f 85       	ldd	r24, Y+15	; 0x0f
    21b6:	61 2f       	mov	r22, r17
    21b8:	84 ff       	sbrs	r24, 4
    21ba:	06 c0       	rjmp	.+12     	; 0x21c8 <LiquidCrystal::send(unsigned char, unsigned char)+0x32>
    21bc:	ce 01       	movw	r24, r28
    21be:	df 91       	pop	r29
    21c0:	cf 91       	pop	r28
    21c2:	1f 91       	pop	r17
    21c4:	0c 94 9e 10 	jmp	0x213c	; 0x213c <LiquidCrystal::write8bits(unsigned char)>
    21c8:	70 e0       	ldi	r23, 0x00	; 0
    21ca:	84 e0       	ldi	r24, 0x04	; 4
    21cc:	75 95       	asr	r23
    21ce:	67 95       	ror	r22
    21d0:	8a 95       	dec	r24
    21d2:	e1 f7       	brne	.-8      	; 0x21cc <LiquidCrystal::send(unsigned char, unsigned char)+0x36>
    21d4:	ce 01       	movw	r24, r28
    21d6:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LiquidCrystal::write4bits(unsigned char)>
    21da:	61 2f       	mov	r22, r17
    21dc:	ce 01       	movw	r24, r28
    21de:	df 91       	pop	r29
    21e0:	cf 91       	pop	r28
    21e2:	1f 91       	pop	r17
    21e4:	0c 94 71 10 	jmp	0x20e2	; 0x20e2 <LiquidCrystal::write4bits(unsigned char)>

000021e8 <LiquidCrystal::command(unsigned char)>:
_ZN13LiquidCrystal7commandEh():
    21e8:	40 e0       	ldi	r20, 0x00	; 0
    21ea:	0c 94 cb 10 	jmp	0x2196	; 0x2196 <LiquidCrystal::send(unsigned char, unsigned char)>

000021ee <LiquidCrystal::clear()>:
_ZN13LiquidCrystal5clearEv():
    21ee:	61 e0       	ldi	r22, 0x01	; 1
    21f0:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <LiquidCrystal::command(unsigned char)>
    21f4:	80 ed       	ldi	r24, 0xD0	; 208
    21f6:	97 e0       	ldi	r25, 0x07	; 7
    21f8:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <delayMicroseconds>

000021fc <LiquidCrystal::setCursor(unsigned char, unsigned char)>:
_ZN13LiquidCrystal9setCursorEhh():
    21fc:	44 30       	cpi	r20, 0x04	; 4
    21fe:	08 f0       	brcs	.+2      	; 0x2202 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x6>
    2200:	43 e0       	ldi	r20, 0x03	; 3
    2202:	fc 01       	movw	r30, r24
    2204:	23 89       	ldd	r18, Z+19	; 0x13
    2206:	42 17       	cp	r20, r18
    2208:	10 f0       	brcs	.+4      	; 0x220e <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x12>
    220a:	4f ef       	ldi	r20, 0xFF	; 255
    220c:	42 0f       	add	r20, r18
    220e:	fc 01       	movw	r30, r24
    2210:	e4 0f       	add	r30, r20
    2212:	f1 1d       	adc	r31, r1
    2214:	24 89       	ldd	r18, Z+20	; 0x14
    2216:	62 0f       	add	r22, r18
    2218:	60 68       	ori	r22, 0x80	; 128
    221a:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <LiquidCrystal::command(unsigned char)>

0000221e <LiquidCrystal::display()>:
_ZN13LiquidCrystal7displayEv():
    221e:	fc 01       	movw	r30, r24
    2220:	60 89       	ldd	r22, Z+16	; 0x10
    2222:	26 2f       	mov	r18, r22
    2224:	24 60       	ori	r18, 0x04	; 4
    2226:	20 8b       	std	Z+16, r18	; 0x10
    2228:	6c 60       	ori	r22, 0x0C	; 12
    222a:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <LiquidCrystal::command(unsigned char)>

0000222e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystal5beginEhhh():
    222e:	0f 93       	push	r16
    2230:	1f 93       	push	r17
    2232:	cf 93       	push	r28
    2234:	df 93       	push	r29
    2236:	ec 01       	movw	r28, r24
    2238:	42 30       	cpi	r20, 0x02	; 2
    223a:	18 f0       	brcs	.+6      	; 0x2242 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x14>
    223c:	8f 85       	ldd	r24, Y+15	; 0x0f
    223e:	88 60       	ori	r24, 0x08	; 8
    2240:	8f 87       	std	Y+15, r24	; 0x0f
    2242:	4b 8b       	std	Y+19, r20	; 0x13
_ZN13LiquidCrystal13setRowOffsetsEiiii():
    2244:	1c 8a       	std	Y+20, r1	; 0x14
    2246:	80 e4       	ldi	r24, 0x40	; 64
    2248:	8d 8b       	std	Y+21, r24	; 0x15
    224a:	6e 8b       	std	Y+22, r22	; 0x16
    224c:	60 5c       	subi	r22, 0xC0	; 192
    224e:	6f 8b       	std	Y+23, r22	; 0x17
_ZN13LiquidCrystal5beginEhhh():
    2250:	22 23       	and	r18, r18
    2252:	29 f0       	breq	.+10     	; 0x225e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    2254:	41 30       	cpi	r20, 0x01	; 1
    2256:	19 f4       	brne	.+6      	; 0x225e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    2258:	8f 85       	ldd	r24, Y+15	; 0x0f
    225a:	84 60       	ori	r24, 0x04	; 4
    225c:	8f 87       	std	Y+15, r24	; 0x0f
    225e:	61 e0       	ldi	r22, 0x01	; 1
    2260:	8c 81       	ldd	r24, Y+4	; 0x04
    2262:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    2266:	8d 81       	ldd	r24, Y+5	; 0x05
    2268:	8f 3f       	cpi	r24, 0xFF	; 255
    226a:	19 f0       	breq	.+6      	; 0x2272 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x44>
    226c:	61 e0       	ldi	r22, 0x01	; 1
    226e:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    2272:	61 e0       	ldi	r22, 0x01	; 1
    2274:	8e 81       	ldd	r24, Y+6	; 0x06
    2276:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    227a:	8e 01       	movw	r16, r28
    227c:	98 01       	movw	r18, r16
    227e:	2c 1b       	sub	r18, r28
    2280:	3d 0b       	sbc	r19, r29
    2282:	8f 85       	ldd	r24, Y+15	; 0x0f
    2284:	84 fd       	sbrc	r24, 4
    2286:	0d c0       	rjmp	.+26     	; 0x22a2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x74>
    2288:	84 e0       	ldi	r24, 0x04	; 4
    228a:	90 e0       	ldi	r25, 0x00	; 0
    228c:	0f 5f       	subi	r16, 0xFF	; 255
    228e:	1f 4f       	sbci	r17, 0xFF	; 255
    2290:	28 17       	cp	r18, r24
    2292:	39 07       	cpc	r19, r25
    2294:	4c f4       	brge	.+18     	; 0x22a8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x7a>
    2296:	61 e0       	ldi	r22, 0x01	; 1
    2298:	f8 01       	movw	r30, r16
    229a:	86 81       	ldd	r24, Z+6	; 0x06
    229c:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    22a0:	ed cf       	rjmp	.-38     	; 0x227c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x4e>
    22a2:	88 e0       	ldi	r24, 0x08	; 8
    22a4:	90 e0       	ldi	r25, 0x00	; 0
    22a6:	f2 cf       	rjmp	.-28     	; 0x228c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x5e>
    22a8:	80 e5       	ldi	r24, 0x50	; 80
    22aa:	93 ec       	ldi	r25, 0xC3	; 195
    22ac:	0e 94 2a 19 	call	0x3254	; 0x3254 <delayMicroseconds>
    22b0:	60 e0       	ldi	r22, 0x00	; 0
    22b2:	8c 81       	ldd	r24, Y+4	; 0x04
    22b4:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    22b8:	60 e0       	ldi	r22, 0x00	; 0
    22ba:	8e 81       	ldd	r24, Y+6	; 0x06
    22bc:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    22c0:	8d 81       	ldd	r24, Y+5	; 0x05
    22c2:	8f 3f       	cpi	r24, 0xFF	; 255
    22c4:	19 f0       	breq	.+6      	; 0x22cc <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x9e>
    22c6:	60 e0       	ldi	r22, 0x00	; 0
    22c8:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    22cc:	6f 85       	ldd	r22, Y+15	; 0x0f
    22ce:	64 fd       	sbrc	r22, 4
    22d0:	33 c0       	rjmp	.+102    	; 0x2338 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x10a>
    22d2:	63 e0       	ldi	r22, 0x03	; 3
    22d4:	ce 01       	movw	r24, r28
    22d6:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LiquidCrystal::write4bits(unsigned char)>
    22da:	84 e9       	ldi	r24, 0x94	; 148
    22dc:	91 e1       	ldi	r25, 0x11	; 17
    22de:	0e 94 2a 19 	call	0x3254	; 0x3254 <delayMicroseconds>
    22e2:	63 e0       	ldi	r22, 0x03	; 3
    22e4:	ce 01       	movw	r24, r28
    22e6:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LiquidCrystal::write4bits(unsigned char)>
    22ea:	84 e9       	ldi	r24, 0x94	; 148
    22ec:	91 e1       	ldi	r25, 0x11	; 17
    22ee:	0e 94 2a 19 	call	0x3254	; 0x3254 <delayMicroseconds>
    22f2:	63 e0       	ldi	r22, 0x03	; 3
    22f4:	ce 01       	movw	r24, r28
    22f6:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LiquidCrystal::write4bits(unsigned char)>
    22fa:	86 e9       	ldi	r24, 0x96	; 150
    22fc:	90 e0       	ldi	r25, 0x00	; 0
    22fe:	0e 94 2a 19 	call	0x3254	; 0x3254 <delayMicroseconds>
    2302:	62 e0       	ldi	r22, 0x02	; 2
    2304:	ce 01       	movw	r24, r28
    2306:	0e 94 71 10 	call	0x20e2	; 0x20e2 <LiquidCrystal::write4bits(unsigned char)>
    230a:	6f 85       	ldd	r22, Y+15	; 0x0f
    230c:	60 62       	ori	r22, 0x20	; 32
    230e:	ce 01       	movw	r24, r28
    2310:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <LiquidCrystal::command(unsigned char)>
    2314:	84 e0       	ldi	r24, 0x04	; 4
    2316:	88 8b       	std	Y+16, r24	; 0x10
    2318:	ce 01       	movw	r24, r28
    231a:	0e 94 0f 11 	call	0x221e	; 0x221e <LiquidCrystal::display()>
    231e:	ce 01       	movw	r24, r28
    2320:	0e 94 f7 10 	call	0x21ee	; 0x21ee <LiquidCrystal::clear()>
    2324:	82 e0       	ldi	r24, 0x02	; 2
    2326:	89 8b       	std	Y+17, r24	; 0x11
    2328:	66 e0       	ldi	r22, 0x06	; 6
    232a:	ce 01       	movw	r24, r28
    232c:	df 91       	pop	r29
    232e:	cf 91       	pop	r28
    2330:	1f 91       	pop	r17
    2332:	0f 91       	pop	r16
    2334:	0c 94 f4 10 	jmp	0x21e8	; 0x21e8 <LiquidCrystal::command(unsigned char)>
    2338:	60 62       	ori	r22, 0x20	; 32
    233a:	ce 01       	movw	r24, r28
    233c:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <LiquidCrystal::command(unsigned char)>
    2340:	84 e9       	ldi	r24, 0x94	; 148
    2342:	91 e1       	ldi	r25, 0x11	; 17
    2344:	0e 94 2a 19 	call	0x3254	; 0x3254 <delayMicroseconds>
    2348:	6f 85       	ldd	r22, Y+15	; 0x0f
    234a:	60 62       	ori	r22, 0x20	; 32
    234c:	ce 01       	movw	r24, r28
    234e:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <LiquidCrystal::command(unsigned char)>
    2352:	86 e9       	ldi	r24, 0x96	; 150
    2354:	90 e0       	ldi	r25, 0x00	; 0
    2356:	0e 94 2a 19 	call	0x3254	; 0x3254 <delayMicroseconds>
    235a:	6f 85       	ldd	r22, Y+15	; 0x0f
    235c:	60 62       	ori	r22, 0x20	; 32
    235e:	ce 01       	movw	r24, r28
    2360:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <LiquidCrystal::command(unsigned char)>
    2364:	d2 cf       	rjmp	.-92     	; 0x230a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xdc>

00002366 <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystalC2Ehhhhhh():
    2366:	cf 92       	push	r12
    2368:	ef 92       	push	r14
    236a:	0f 93       	push	r16
    236c:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    236e:	13 82       	std	Z+3, r1	; 0x03
    2370:	12 82       	std	Z+2, r1	; 0x02
_ZN13LiquidCrystalC2Ehhhhhh():
    2372:	86 e2       	ldi	r24, 0x26	; 38
    2374:	95 e0       	ldi	r25, 0x05	; 5
    2376:	91 83       	std	Z+1, r25	; 0x01
    2378:	80 83       	st	Z, r24
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    237a:	64 83       	std	Z+4, r22	; 0x04
    237c:	8f ef       	ldi	r24, 0xFF	; 255
    237e:	85 83       	std	Z+5, r24	; 0x05
    2380:	46 83       	std	Z+6, r20	; 0x06
    2382:	27 83       	std	Z+7, r18	; 0x07
    2384:	00 87       	std	Z+8, r16	; 0x08
    2386:	e1 86       	std	Z+9, r14	; 0x09
    2388:	c2 86       	std	Z+10, r12	; 0x0a
    238a:	13 86       	std	Z+11, r1	; 0x0b
    238c:	14 86       	std	Z+12, r1	; 0x0c
    238e:	15 86       	std	Z+13, r1	; 0x0d
    2390:	16 86       	std	Z+14, r1	; 0x0e
    2392:	17 86       	std	Z+15, r1	; 0x0f
    2394:	20 e0       	ldi	r18, 0x00	; 0
    2396:	41 e0       	ldi	r20, 0x01	; 1
    2398:	60 e1       	ldi	r22, 0x10	; 16
    239a:	cf 01       	movw	r24, r30
_ZN13LiquidCrystalC2Ehhhhhh():
    239c:	0f 91       	pop	r16
    239e:	ef 90       	pop	r14
    23a0:	cf 90       	pop	r12
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    23a2:	0c 94 17 11 	jmp	0x222e	; 0x222e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>

000023a6 <LiquidCrystal::write(unsigned char)>:
_ZN13LiquidCrystal5writeEh():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    23a6:	41 e0       	ldi	r20, 0x01	; 1
    23a8:	0e 94 cb 10 	call	0x2196	; 0x2196 <LiquidCrystal::send(unsigned char, unsigned char)>
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
    23ac:	81 e0       	ldi	r24, 0x01	; 1
    23ae:	90 e0       	ldi	r25, 0x00	; 0
    23b0:	08 95       	ret

000023b2 <LedControl::spiTransfer(int, unsigned char, unsigned char)>:
_ZN10LedControl11spiTransferEihh():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:153
    for(int row=0;row<8;row++) {
        val=value >> (7-row);
        val=val & 0x01;
        setLed(addr,row,col,val);
    }
}
    23b2:	8f 92       	push	r8
    23b4:	9f 92       	push	r9
    23b6:	af 92       	push	r10
    23b8:	bf 92       	push	r11
    23ba:	cf 92       	push	r12
    23bc:	df 92       	push	r13
    23be:	ef 92       	push	r14
    23c0:	ff 92       	push	r15
    23c2:	0f 93       	push	r16
    23c4:	1f 93       	push	r17
    23c6:	cf 93       	push	r28
    23c8:	df 93       	push	r29
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x1a>
    23cc:	cd b7       	in	r28, 0x3d	; 61
    23ce:	de b7       	in	r29, 0x3e	; 62
    23d0:	8c 01       	movw	r16, r24
    23d2:	49 83       	std	Y+1, r20	; 0x01
    23d4:	2a 83       	std	Y+2, r18	; 0x02
    23d6:	66 0f       	add	r22, r22
    23d8:	77 1f       	adc	r23, r23
    23da:	f8 01       	movw	r30, r16
    23dc:	ea 5a       	subi	r30, 0xAA	; 170
    23de:	ff 4f       	sbci	r31, 0xFF	; 255
    23e0:	e0 80       	ld	r14, Z
    23e2:	f1 80       	ldd	r15, Z+1	; 0x01
    23e4:	ee 0c       	add	r14, r14
    23e6:	ff 1c       	adc	r15, r15
    23e8:	f8 01       	movw	r30, r16
    23ea:	cf 01       	movw	r24, r30
    23ec:	80 1b       	sub	r24, r16
    23ee:	91 0b       	sbc	r25, r17
    23f0:	8e 15       	cp	r24, r14
    23f2:	9f 05       	cpc	r25, r15
    23f4:	14 f4       	brge	.+4      	; 0x23fa <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x48>
    23f6:	11 92       	st	Z+, r1
    23f8:	f8 cf       	rjmp	.-16     	; 0x23ea <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x38>
    23fa:	89 81       	ldd	r24, Y+1	; 0x01
    23fc:	f8 01       	movw	r30, r16
    23fe:	e6 0f       	add	r30, r22
    2400:	f7 1f       	adc	r31, r23
    2402:	81 83       	std	Z+1, r24	; 0x01
    2404:	8a 81       	ldd	r24, Y+2	; 0x02
    2406:	80 83       	st	Z, r24
    2408:	68 01       	movw	r12, r16
    240a:	84 e5       	ldi	r24, 0x54	; 84
    240c:	c8 0e       	add	r12, r24
    240e:	d1 1c       	adc	r13, r1
    2410:	60 e0       	ldi	r22, 0x00	; 0
    2412:	f6 01       	movw	r30, r12
    2414:	80 81       	ld	r24, Z
    2416:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    241a:	48 01       	movw	r8, r16
    241c:	f2 e5       	ldi	r31, 0x52	; 82
    241e:	8f 0e       	add	r8, r31
    2420:	91 1c       	adc	r9, r1
    2422:	58 01       	movw	r10, r16
    2424:	80 e5       	ldi	r24, 0x50	; 80
    2426:	a8 0e       	add	r10, r24
    2428:	b1 1c       	adc	r11, r1
    242a:	1e 14       	cp	r1, r14
    242c:	1f 04       	cpc	r1, r15
    242e:	7c f4       	brge	.+30     	; 0x244e <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x9c>
    2430:	e1 e0       	ldi	r30, 0x01	; 1
    2432:	ee 1a       	sub	r14, r30
    2434:	f1 08       	sbc	r15, r1
    2436:	f8 01       	movw	r30, r16
    2438:	ee 0d       	add	r30, r14
    243a:	ff 1d       	adc	r31, r15
    243c:	20 81       	ld	r18, Z
    243e:	41 e0       	ldi	r20, 0x01	; 1
    2440:	f4 01       	movw	r30, r8
    2442:	60 81       	ld	r22, Z
    2444:	f5 01       	movw	r30, r10
    2446:	80 81       	ld	r24, Z
    2448:	0e 94 32 1a 	call	0x3464	; 0x3464 <shiftOut>
    244c:	ee cf       	rjmp	.-36     	; 0x242a <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x78>
    244e:	61 e0       	ldi	r22, 0x01	; 1
    2450:	f6 01       	movw	r30, r12
    2452:	80 81       	ld	r24, Z
    2454:	0f 90       	pop	r0
    2456:	0f 90       	pop	r0
    2458:	df 91       	pop	r29
    245a:	cf 91       	pop	r28
    245c:	1f 91       	pop	r17
    245e:	0f 91       	pop	r16
    2460:	ff 90       	pop	r15
    2462:	ef 90       	pop	r14
    2464:	df 90       	pop	r13
    2466:	cf 90       	pop	r12
    2468:	bf 90       	pop	r11
    246a:	af 90       	pop	r10
    246c:	9f 90       	pop	r9
    246e:	8f 90       	pop	r8
    2470:	0c 94 db 19 	jmp	0x33b6	; 0x33b6 <digitalWrite>

00002474 <LedControl::shutdown(int, bool)>:
_ZN10LedControl8shutdownEib():
    2474:	77 fd       	sbrc	r23, 7
    2476:	0f c0       	rjmp	.+30     	; 0x2496 <LedControl::shutdown(int, bool)+0x22>
    2478:	fc 01       	movw	r30, r24
    247a:	ea 5a       	subi	r30, 0xAA	; 170
    247c:	ff 4f       	sbci	r31, 0xFF	; 255
    247e:	20 81       	ld	r18, Z
    2480:	31 81       	ldd	r19, Z+1	; 0x01
    2482:	62 17       	cp	r22, r18
    2484:	73 07       	cpc	r23, r19
    2486:	3c f4       	brge	.+14     	; 0x2496 <LedControl::shutdown(int, bool)+0x22>
    2488:	20 e0       	ldi	r18, 0x00	; 0
    248a:	41 11       	cpse	r20, r1
    248c:	01 c0       	rjmp	.+2      	; 0x2490 <LedControl::shutdown(int, bool)+0x1c>
    248e:	21 e0       	ldi	r18, 0x01	; 1
    2490:	4c e0       	ldi	r20, 0x0C	; 12
    2492:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    2496:	08 95       	ret

00002498 <LedControl::setScanLimit(int, int)>:
_ZN10LedControl12setScanLimitEii():
    2498:	77 fd       	sbrc	r23, 7
    249a:	0f c0       	rjmp	.+30     	; 0x24ba <LedControl::setScanLimit(int, int)+0x22>
    249c:	fc 01       	movw	r30, r24
    249e:	ea 5a       	subi	r30, 0xAA	; 170
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	20 81       	ld	r18, Z
    24a4:	31 81       	ldd	r19, Z+1	; 0x01
    24a6:	62 17       	cp	r22, r18
    24a8:	73 07       	cpc	r23, r19
    24aa:	3c f4       	brge	.+14     	; 0x24ba <LedControl::setScanLimit(int, int)+0x22>
    24ac:	48 30       	cpi	r20, 0x08	; 8
    24ae:	51 05       	cpc	r21, r1
    24b0:	20 f4       	brcc	.+8      	; 0x24ba <LedControl::setScanLimit(int, int)+0x22>
    24b2:	24 2f       	mov	r18, r20
    24b4:	4b e0       	ldi	r20, 0x0B	; 11
    24b6:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    24ba:	08 95       	ret

000024bc <LedControl::setIntensity(int, int)>:
_ZN10LedControl12setIntensityEii():
    24bc:	77 fd       	sbrc	r23, 7
    24be:	0f c0       	rjmp	.+30     	; 0x24de <LedControl::setIntensity(int, int)+0x22>
    24c0:	fc 01       	movw	r30, r24
    24c2:	ea 5a       	subi	r30, 0xAA	; 170
    24c4:	ff 4f       	sbci	r31, 0xFF	; 255
    24c6:	20 81       	ld	r18, Z
    24c8:	31 81       	ldd	r19, Z+1	; 0x01
    24ca:	62 17       	cp	r22, r18
    24cc:	73 07       	cpc	r23, r19
    24ce:	3c f4       	brge	.+14     	; 0x24de <LedControl::setIntensity(int, int)+0x22>
    24d0:	40 31       	cpi	r20, 0x10	; 16
    24d2:	51 05       	cpc	r21, r1
    24d4:	20 f4       	brcc	.+8      	; 0x24de <LedControl::setIntensity(int, int)+0x22>
    24d6:	24 2f       	mov	r18, r20
    24d8:	4a e0       	ldi	r20, 0x0A	; 10
    24da:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    24de:	08 95       	ret

000024e0 <LedControl::clearDisplay(int)>:
_ZN10LedControl12clearDisplayEi():
    24e0:	df 92       	push	r13
    24e2:	ef 92       	push	r14
    24e4:	ff 92       	push	r15
    24e6:	0f 93       	push	r16
    24e8:	1f 93       	push	r17
    24ea:	cf 93       	push	r28
    24ec:	df 93       	push	r29
    24ee:	77 fd       	sbrc	r23, 7
    24f0:	23 c0       	rjmp	.+70     	; 0x2538 <LedControl::clearDisplay(int)+0x58>
    24f2:	fc 01       	movw	r30, r24
    24f4:	ea 5a       	subi	r30, 0xAA	; 170
    24f6:	ff 4f       	sbci	r31, 0xFF	; 255
    24f8:	20 81       	ld	r18, Z
    24fa:	31 81       	ldd	r19, Z+1	; 0x01
    24fc:	62 17       	cp	r22, r18
    24fe:	73 07       	cpc	r23, r19
    2500:	dc f4       	brge	.+54     	; 0x2538 <LedControl::clearDisplay(int)+0x58>
    2502:	eb 01       	movw	r28, r22
    2504:	7c 01       	movw	r14, r24
    2506:	8b 01       	movw	r16, r22
    2508:	83 e0       	ldi	r24, 0x03	; 3
    250a:	00 0f       	add	r16, r16
    250c:	11 1f       	adc	r17, r17
    250e:	8a 95       	dec	r24
    2510:	e1 f7       	brne	.-8      	; 0x250a <LedControl::clearDisplay(int)+0x2a>
    2512:	00 5f       	subi	r16, 0xF0	; 240
    2514:	1f 4f       	sbci	r17, 0xFF	; 255
    2516:	0e 0d       	add	r16, r14
    2518:	1f 1d       	adc	r17, r15
    251a:	dd 24       	eor	r13, r13
    251c:	d3 94       	inc	r13
    251e:	f8 01       	movw	r30, r16
    2520:	11 92       	st	Z+, r1
    2522:	8f 01       	movw	r16, r30
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	4d 2d       	mov	r20, r13
    2528:	be 01       	movw	r22, r28
    252a:	c7 01       	movw	r24, r14
    252c:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    2530:	d3 94       	inc	r13
    2532:	f9 e0       	ldi	r31, 0x09	; 9
    2534:	df 12       	cpse	r13, r31
    2536:	f3 cf       	rjmp	.-26     	; 0x251e <LedControl::clearDisplay(int)+0x3e>
    2538:	df 91       	pop	r29
    253a:	cf 91       	pop	r28
    253c:	1f 91       	pop	r17
    253e:	0f 91       	pop	r16
    2540:	ff 90       	pop	r15
    2542:	ef 90       	pop	r14
    2544:	df 90       	pop	r13
    2546:	08 95       	ret

00002548 <LedControl::LedControl(int, int, int, int)>:
_ZN10LedControlC2Eiiii():
    2548:	6f 92       	push	r6
    254a:	7f 92       	push	r7
    254c:	8f 92       	push	r8
    254e:	9f 92       	push	r9
    2550:	af 92       	push	r10
    2552:	bf 92       	push	r11
    2554:	cf 92       	push	r12
    2556:	df 92       	push	r13
    2558:	ef 92       	push	r14
    255a:	ff 92       	push	r15
    255c:	0f 93       	push	r16
    255e:	1f 93       	push	r17
    2560:	cf 93       	push	r28
    2562:	df 93       	push	r29
    2564:	ec 01       	movw	r28, r24
    2566:	d6 2e       	mov	r13, r22
    2568:	c7 2e       	mov	r12, r23
    256a:	7c 01       	movw	r14, r24
    256c:	80 e5       	ldi	r24, 0x50	; 80
    256e:	e8 0e       	add	r14, r24
    2570:	f1 1c       	adc	r15, r1
    2572:	f7 01       	movw	r30, r14
    2574:	60 83       	st	Z, r22
    2576:	71 83       	std	Z+1, r23	; 0x01
    2578:	3e 01       	movw	r6, r28
    257a:	f2 e5       	ldi	r31, 0x52	; 82
    257c:	6f 0e       	add	r6, r31
    257e:	71 1c       	adc	r7, r1
    2580:	f3 01       	movw	r30, r6
    2582:	51 83       	std	Z+1, r21	; 0x01
    2584:	40 83       	st	Z, r20
    2586:	4e 01       	movw	r8, r28
    2588:	f4 e5       	ldi	r31, 0x54	; 84
    258a:	8f 0e       	add	r8, r31
    258c:	91 1c       	adc	r9, r1
    258e:	f4 01       	movw	r30, r8
    2590:	31 83       	std	Z+1, r19	; 0x01
    2592:	20 83       	st	Z, r18
    2594:	c8 01       	movw	r24, r16
    2596:	01 97       	sbiw	r24, 0x01	; 1
    2598:	08 97       	sbiw	r24, 0x08	; 8
    259a:	10 f0       	brcs	.+4      	; 0x25a0 <LedControl::LedControl(int, int, int, int)+0x58>
    259c:	08 e0       	ldi	r16, 0x08	; 8
    259e:	10 e0       	ldi	r17, 0x00	; 0
    25a0:	5e 01       	movw	r10, r28
    25a2:	f6 e5       	ldi	r31, 0x56	; 86
    25a4:	af 0e       	add	r10, r31
    25a6:	b1 1c       	adc	r11, r1
    25a8:	f5 01       	movw	r30, r10
    25aa:	11 83       	std	Z+1, r17	; 0x01
    25ac:	00 83       	st	Z, r16
    25ae:	61 e0       	ldi	r22, 0x01	; 1
    25b0:	8d 2d       	mov	r24, r13
    25b2:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    25b6:	61 e0       	ldi	r22, 0x01	; 1
    25b8:	f3 01       	movw	r30, r6
    25ba:	80 81       	ld	r24, Z
    25bc:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    25c0:	61 e0       	ldi	r22, 0x01	; 1
    25c2:	f4 01       	movw	r30, r8
    25c4:	80 81       	ld	r24, Z
    25c6:	0e 94 9f 19 	call	0x333e	; 0x333e <pinMode>
    25ca:	61 e0       	ldi	r22, 0x01	; 1
    25cc:	f4 01       	movw	r30, r8
    25ce:	80 81       	ld	r24, Z
    25d0:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    25d4:	f7 01       	movw	r30, r14
    25d6:	d0 82       	st	Z, r13
    25d8:	c1 82       	std	Z+1, r12	; 0x01
    25da:	fe 01       	movw	r30, r28
    25dc:	70 96       	adiw	r30, 0x10	; 16
    25de:	11 92       	st	Z+, r1
    25e0:	ee 15       	cp	r30, r14
    25e2:	ff 05       	cpc	r31, r15
    25e4:	e1 f7       	brne	.-8      	; 0x25de <LedControl::LedControl(int, int, int, int)+0x96>
    25e6:	10 e0       	ldi	r17, 0x00	; 0
    25e8:	00 e0       	ldi	r16, 0x00	; 0
    25ea:	f5 01       	movw	r30, r10
    25ec:	80 81       	ld	r24, Z
    25ee:	91 81       	ldd	r25, Z+1	; 0x01
    25f0:	08 17       	cp	r16, r24
    25f2:	19 07       	cpc	r17, r25
    25f4:	f4 f4       	brge	.+60     	; 0x2632 <LedControl::LedControl(int, int, int, int)+0xea>
    25f6:	20 e0       	ldi	r18, 0x00	; 0
    25f8:	4f e0       	ldi	r20, 0x0F	; 15
    25fa:	b8 01       	movw	r22, r16
    25fc:	ce 01       	movw	r24, r28
    25fe:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    2602:	47 e0       	ldi	r20, 0x07	; 7
    2604:	50 e0       	ldi	r21, 0x00	; 0
    2606:	b8 01       	movw	r22, r16
    2608:	ce 01       	movw	r24, r28
    260a:	0e 94 4c 12 	call	0x2498	; 0x2498 <LedControl::setScanLimit(int, int)>
    260e:	20 e0       	ldi	r18, 0x00	; 0
    2610:	49 e0       	ldi	r20, 0x09	; 9
    2612:	b8 01       	movw	r22, r16
    2614:	ce 01       	movw	r24, r28
    2616:	0e 94 d9 11 	call	0x23b2	; 0x23b2 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    261a:	b8 01       	movw	r22, r16
    261c:	ce 01       	movw	r24, r28
    261e:	0e 94 70 12 	call	0x24e0	; 0x24e0 <LedControl::clearDisplay(int)>
    2622:	41 e0       	ldi	r20, 0x01	; 1
    2624:	b8 01       	movw	r22, r16
    2626:	ce 01       	movw	r24, r28
    2628:	0e 94 3a 12 	call	0x2474	; 0x2474 <LedControl::shutdown(int, bool)>
    262c:	0f 5f       	subi	r16, 0xFF	; 255
    262e:	1f 4f       	sbci	r17, 0xFF	; 255
    2630:	dc cf       	rjmp	.-72     	; 0x25ea <LedControl::LedControl(int, int, int, int)+0xa2>
    2632:	df 91       	pop	r29
    2634:	cf 91       	pop	r28
    2636:	1f 91       	pop	r17
    2638:	0f 91       	pop	r16
    263a:	ff 90       	pop	r15
    263c:	ef 90       	pop	r14
    263e:	df 90       	pop	r13
    2640:	cf 90       	pop	r12
    2642:	bf 90       	pop	r11
    2644:	af 90       	pop	r10
    2646:	9f 90       	pop	r9
    2648:	8f 90       	pop	r8
    264a:	7f 90       	pop	r7
    264c:	6f 90       	pop	r6
    264e:	08 95       	ret

00002650 <LedControl::setRow(int, int, unsigned char)>:
_ZN10LedControl6setRowEiih():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:132
    spiTransfer(addr, row+1,status[offset+row]);
}

void LedControl::setRow(int addr, int row, byte value) {
    int offset;
    if(addr<0 || addr>=maxDevices)
    2650:	77 fd       	sbrc	r23, 7
    2652:	1a c0       	rjmp	.+52     	; 0x2688 <LedControl::setRow(int, int, unsigned char)+0x38>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:132 (discriminator 1)
    2654:	fc 01       	movw	r30, r24
    2656:	ea 5a       	subi	r30, 0xAA	; 170
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	01 90       	ld	r0, Z+
    265c:	f0 81       	ld	r31, Z
    265e:	e0 2d       	mov	r30, r0
    2660:	6e 17       	cp	r22, r30
    2662:	7f 07       	cpc	r23, r31
    2664:	8c f4       	brge	.+34     	; 0x2688 <LedControl::setRow(int, int, unsigned char)+0x38>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:134
        return;
    if(row<0 || row>7)
    2666:	48 30       	cpi	r20, 0x08	; 8
    2668:	51 05       	cpc	r21, r1
    266a:	70 f4       	brcc	.+28     	; 0x2688 <LedControl::setRow(int, int, unsigned char)+0x38>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:137
        return;
    offset=addr*8;
    status[offset+row]=value;
    266c:	fb 01       	movw	r30, r22
    266e:	33 e0       	ldi	r19, 0x03	; 3
    2670:	ee 0f       	add	r30, r30
    2672:	ff 1f       	adc	r31, r31
    2674:	3a 95       	dec	r19
    2676:	e1 f7       	brne	.-8      	; 0x2670 <LedControl::setRow(int, int, unsigned char)+0x20>
    2678:	e8 0f       	add	r30, r24
    267a:	f9 1f       	adc	r31, r25
    267c:	e4 0f       	add	r30, r20
    267e:	f5 1f       	adc	r31, r21
    2680:	20 8b       	std	Z+16, r18	; 0x10
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:138
    spiTransfer(addr, row+1,status[offset+row]);
    2682:	4f 5f       	subi	r20, 0xFF	; 255
    2684:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:139
}
    2688:	08 95       	ret

0000268a <LedControl::setDigit(int, int, unsigned char, bool)>:
_ZN10LedControl8setDigitEiihb():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:155
        val=val & 0x01;
        setLed(addr,row,col,val);
    }
}

void LedControl::setDigit(int addr, int digit, byte value, boolean dp) {
    268a:	0f 93       	push	r16
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:159
    int offset;
    byte v;

    if(addr<0 || addr>=maxDevices)
    268c:	77 fd       	sbrc	r23, 7
    268e:	25 c0       	rjmp	.+74     	; 0x26da <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:159 (discriminator 1)
    2690:	fc 01       	movw	r30, r24
    2692:	ea 5a       	subi	r30, 0xAA	; 170
    2694:	ff 4f       	sbci	r31, 0xFF	; 255
    2696:	01 90       	ld	r0, Z+
    2698:	f0 81       	ld	r31, Z
    269a:	e0 2d       	mov	r30, r0
    269c:	6e 17       	cp	r22, r30
    269e:	7f 07       	cpc	r23, r31
    26a0:	e4 f4       	brge	.+56     	; 0x26da <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:161
        return;
    if(digit<0 || digit>7 || value>15)
    26a2:	48 30       	cpi	r20, 0x08	; 8
    26a4:	51 05       	cpc	r21, r1
    26a6:	c8 f4       	brcc	.+50     	; 0x26da <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:161 (discriminator 1)
    26a8:	20 31       	cpi	r18, 0x10	; 16
    26aa:	b8 f4       	brcc	.+46     	; 0x26da <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:163
        return;
    offset=addr*8;
    26ac:	db 01       	movw	r26, r22
    26ae:	33 e0       	ldi	r19, 0x03	; 3
    26b0:	aa 0f       	add	r26, r26
    26b2:	bb 1f       	adc	r27, r27
    26b4:	3a 95       	dec	r19
    26b6:	e1 f7       	brne	.-8      	; 0x26b0 <LedControl::setDigit(int, int, unsigned char, bool)+0x26>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:164
    v=pgm_read_byte_near(charTable + value); 
    26b8:	e2 2f       	mov	r30, r18
    26ba:	f0 e0       	ldi	r31, 0x00	; 0
    26bc:	e4 57       	subi	r30, 0x74	; 116
    26be:	fe 4f       	sbci	r31, 0xFE	; 254
    26c0:	24 91       	lpm	r18, Z
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:165
    if(dp)
    26c2:	01 11       	cpse	r16, r1
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:166
        v|=B10000000;
    26c4:	20 68       	ori	r18, 0x80	; 128
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:167
    status[offset+digit]=v;
    26c6:	a8 0f       	add	r26, r24
    26c8:	b9 1f       	adc	r27, r25
    26ca:	a4 0f       	add	r26, r20
    26cc:	b5 1f       	adc	r27, r21
    26ce:	50 96       	adiw	r26, 0x10	; 16
    26d0:	2c 93       	st	X, r18
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:168
    spiTransfer(addr, digit+1,v);
    26d2:	4f 5f       	subi	r20, 0xFF	; 255
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:169
}
    26d4:	0f 91       	pop	r16
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:168
    offset=addr*8;
    v=pgm_read_byte_near(charTable + value); 
    if(dp)
        v|=B10000000;
    status[offset+digit]=v;
    spiTransfer(addr, digit+1,v);
    26d6:	0c 94 d9 11 	jmp	0x23b2	; 0x23b2 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:169
}
    26da:	0f 91       	pop	r16
    26dc:	08 95       	ret

000026de <ADS1X15::isConnected()>:
_ZN7ADS1X1511isConnectedEv():
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:570
  _wire = wire;
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_1;
  _conversionDelay = ADS1115_CONVERSION_DELAY;
  _bitShift = 0;
  _maxPorts = 1;
}
    26de:	cf 93       	push	r28
    26e0:	df 93       	push	r29
    26e2:	ec 01       	movw	r28, r24
    26e4:	6a 81       	ldd	r22, Y+2	; 0x02
    26e6:	88 89       	ldd	r24, Y+16	; 0x10
    26e8:	99 89       	ldd	r25, Y+17	; 0x11
    26ea:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <TwoWire::beginTransmission(unsigned char)>
    26ee:	88 89       	ldd	r24, Y+16	; 0x10
    26f0:	99 89       	ldd	r25, Y+17	; 0x11
    26f2:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <TwoWire::endTransmission()>
    26f6:	91 e0       	ldi	r25, 0x01	; 1
    26f8:	81 11       	cpse	r24, r1
    26fa:	90 e0       	ldi	r25, 0x00	; 0
    26fc:	89 2f       	mov	r24, r25
    26fe:	df 91       	pop	r29
    2700:	cf 91       	pop	r28
    2702:	08 95       	ret

00002704 <ADS1X15::begin()>:
_ZN7ADS1X155beginEv():
    2704:	cf 93       	push	r28
    2706:	df 93       	push	r29
    2708:	ec 01       	movw	r28, r24
    270a:	88 89       	ldd	r24, Y+16	; 0x10
    270c:	99 89       	ldd	r25, Y+17	; 0x11
    270e:	0e 94 b6 15 	call	0x2b6c	; 0x2b6c <TwoWire::begin()>
    2712:	8a 81       	ldd	r24, Y+2	; 0x02
    2714:	88 54       	subi	r24, 0x48	; 72
    2716:	84 30       	cpi	r24, 0x04	; 4
    2718:	28 f4       	brcc	.+10     	; 0x2724 <ADS1X15::begin()+0x20>
    271a:	ce 01       	movw	r24, r28
    271c:	df 91       	pop	r29
    271e:	cf 91       	pop	r28
    2720:	0c 94 6f 13 	jmp	0x26de	; 0x26de <ADS1X15::isConnected()>
    2724:	80 e0       	ldi	r24, 0x00	; 0
    2726:	df 91       	pop	r29
    2728:	cf 91       	pop	r28
    272a:	08 95       	ret

0000272c <ADS1X15::setGain(unsigned char)>:
_ZN7ADS1X157setGainEh():
    272c:	fc 01       	movw	r30, r24
    272e:	80 81       	ld	r24, Z
    2730:	84 ff       	sbrs	r24, 4
    2732:	09 c0       	rjmp	.+18     	; 0x2746 <ADS1X15::setGain(unsigned char)+0x1a>
    2734:	64 30       	cpi	r22, 0x04	; 4
    2736:	b1 f0       	breq	.+44     	; 0x2764 <ADS1X15::setGain(unsigned char)+0x38>
    2738:	48 f4       	brcc	.+18     	; 0x274c <ADS1X15::setGain(unsigned char)+0x20>
    273a:	61 30       	cpi	r22, 0x01	; 1
    273c:	81 f0       	breq	.+32     	; 0x275e <ADS1X15::setGain(unsigned char)+0x32>
    273e:	80 e0       	ldi	r24, 0x00	; 0
    2740:	94 e0       	ldi	r25, 0x04	; 4
    2742:	62 30       	cpi	r22, 0x02	; 2
    2744:	49 f0       	breq	.+18     	; 0x2758 <ADS1X15::setGain(unsigned char)+0x2c>
    2746:	16 82       	std	Z+6, r1	; 0x06
    2748:	15 82       	std	Z+5, r1	; 0x05
    274a:	08 95       	ret
    274c:	68 30       	cpi	r22, 0x08	; 8
    274e:	69 f0       	breq	.+26     	; 0x276a <ADS1X15::setGain(unsigned char)+0x3e>
    2750:	80 e0       	ldi	r24, 0x00	; 0
    2752:	9a e0       	ldi	r25, 0x0A	; 10
    2754:	60 31       	cpi	r22, 0x10	; 16
    2756:	b9 f7       	brne	.-18     	; 0x2746 <ADS1X15::setGain(unsigned char)+0x1a>
    2758:	96 83       	std	Z+6, r25	; 0x06
    275a:	85 83       	std	Z+5, r24	; 0x05
    275c:	08 95       	ret
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	92 e0       	ldi	r25, 0x02	; 2
    2762:	fa cf       	rjmp	.-12     	; 0x2758 <ADS1X15::setGain(unsigned char)+0x2c>
    2764:	80 e0       	ldi	r24, 0x00	; 0
    2766:	96 e0       	ldi	r25, 0x06	; 6
    2768:	f7 cf       	rjmp	.-18     	; 0x2758 <ADS1X15::setGain(unsigned char)+0x2c>
    276a:	80 e0       	ldi	r24, 0x00	; 0
    276c:	98 e0       	ldi	r25, 0x08	; 8
    276e:	f4 cf       	rjmp	.-24     	; 0x2758 <ADS1X15::setGain(unsigned char)+0x2c>

00002770 <ADS1X15::reset()>:
_ZN7ADS1X155resetEv():
    2770:	cf 93       	push	r28
    2772:	df 93       	push	r29
    2774:	ec 01       	movw	r28, r24
    2776:	60 e0       	ldi	r22, 0x00	; 0
    2778:	0e 94 96 13 	call	0x272c	; 0x272c <ADS1X15::setGain(unsigned char)>
_ZN7ADS1X157setModeEh():
    277c:	80 e0       	ldi	r24, 0x00	; 0
    277e:	91 e0       	ldi	r25, 0x01	; 1
    2780:	98 87       	std	Y+8, r25	; 0x08
    2782:	8f 83       	std	Y+7, r24	; 0x07
_ZN7ADS1X1511setDataRateEh():
    2784:	80 e8       	ldi	r24, 0x80	; 128
    2786:	90 e0       	ldi	r25, 0x00	; 0
    2788:	9a 87       	std	Y+10, r25	; 0x0a
    278a:	89 87       	std	Y+9, r24	; 0x09
_ZN7ADS1X155resetEv():
    278c:	1b 86       	std	Y+11, r1	; 0x0b
    278e:	81 e0       	ldi	r24, 0x01	; 1
    2790:	8c 87       	std	Y+12, r24	; 0x0c
    2792:	1d 86       	std	Y+13, r1	; 0x0d
    2794:	83 e0       	ldi	r24, 0x03	; 3
    2796:	8e 87       	std	Y+14, r24	; 0x0e
    2798:	df 91       	pop	r29
    279a:	cf 91       	pop	r28
    279c:	08 95       	ret

0000279e <ADS1X15::ADS1X15()>:
_ZN7ADS1X15C2Ev():
    279e:	fc 01       	movw	r30, r24
    27a0:	17 86       	std	Z+15, r1	; 0x0f
    27a2:	12 8a       	std	Z+18, r1	; 0x12
    27a4:	13 8a       	std	Z+19, r1	; 0x13
    27a6:	14 8a       	std	Z+20, r1	; 0x14
    27a8:	15 8a       	std	Z+21, r1	; 0x15
    27aa:	0c 94 b8 13 	jmp	0x2770	; 0x2770 <ADS1X15::reset()>

000027ae <ADS1X15::setMode(unsigned char)>:
_ZN7ADS1X157setModeEh():
    27ae:	61 11       	cpse	r22, r1
    27b0:	04 c0       	rjmp	.+8      	; 0x27ba <ADS1X15::setMode(unsigned char)+0xc>
    27b2:	fc 01       	movw	r30, r24
    27b4:	10 86       	std	Z+8, r1	; 0x08
    27b6:	17 82       	std	Z+7, r1	; 0x07
    27b8:	08 95       	ret
    27ba:	20 e0       	ldi	r18, 0x00	; 0
    27bc:	31 e0       	ldi	r19, 0x01	; 1
    27be:	fc 01       	movw	r30, r24
    27c0:	30 87       	std	Z+8, r19	; 0x08
    27c2:	27 83       	std	Z+7, r18	; 0x07
    27c4:	08 95       	ret

000027c6 <ADS1X15::setDataRate(unsigned char)>:
_ZN7ADS1X1511setDataRateEh():
    27c6:	fc 01       	movw	r30, r24
    27c8:	70 e0       	ldi	r23, 0x00	; 0
    27ca:	68 30       	cpi	r22, 0x08	; 8
    27cc:	71 05       	cpc	r23, r1
    27ce:	60 f4       	brcc	.+24     	; 0x27e8 <ADS1X15::setDataRate(unsigned char)+0x22>
    27d0:	72 87       	std	Z+10, r23	; 0x0a
    27d2:	61 87       	std	Z+9, r22	; 0x09
    27d4:	81 85       	ldd	r24, Z+9	; 0x09
    27d6:	92 85       	ldd	r25, Z+10	; 0x0a
    27d8:	25 e0       	ldi	r18, 0x05	; 5
    27da:	88 0f       	add	r24, r24
    27dc:	99 1f       	adc	r25, r25
    27de:	2a 95       	dec	r18
    27e0:	e1 f7       	brne	.-8      	; 0x27da <ADS1X15::setDataRate(unsigned char)+0x14>
    27e2:	92 87       	std	Z+10, r25	; 0x0a
    27e4:	81 87       	std	Z+9, r24	; 0x09
    27e6:	08 95       	ret
    27e8:	84 e0       	ldi	r24, 0x04	; 4
    27ea:	90 e0       	ldi	r25, 0x00	; 0
    27ec:	92 87       	std	Z+10, r25	; 0x0a
    27ee:	81 87       	std	Z+9, r24	; 0x09
    27f0:	f1 cf       	rjmp	.-30     	; 0x27d4 <ADS1X15::setDataRate(unsigned char)+0xe>

000027f2 <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>:
_ZN7ADS1X1514_writeRegisterEhhj():
    27f2:	ff 92       	push	r15
    27f4:	0f 93       	push	r16
    27f6:	1f 93       	push	r17
    27f8:	cf 93       	push	r28
    27fa:	df 93       	push	r29
    27fc:	ec 01       	movw	r28, r24
    27fe:	f4 2e       	mov	r15, r20
    2800:	12 2f       	mov	r17, r18
    2802:	03 2f       	mov	r16, r19
    2804:	88 89       	ldd	r24, Y+16	; 0x10
    2806:	99 89       	ldd	r25, Y+17	; 0x11
    2808:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <TwoWire::beginTransmission(unsigned char)>
    280c:	88 89       	ldd	r24, Y+16	; 0x10
    280e:	99 89       	ldd	r25, Y+17	; 0x11
    2810:	dc 01       	movw	r26, r24
    2812:	ed 91       	ld	r30, X+
    2814:	fc 91       	ld	r31, X
    2816:	01 90       	ld	r0, Z+
    2818:	f0 81       	ld	r31, Z
    281a:	e0 2d       	mov	r30, r0
    281c:	6f 2d       	mov	r22, r15
    281e:	09 95       	icall
    2820:	88 89       	ldd	r24, Y+16	; 0x10
    2822:	99 89       	ldd	r25, Y+17	; 0x11
    2824:	dc 01       	movw	r26, r24
    2826:	ed 91       	ld	r30, X+
    2828:	fc 91       	ld	r31, X
    282a:	01 90       	ld	r0, Z+
    282c:	f0 81       	ld	r31, Z
    282e:	e0 2d       	mov	r30, r0
    2830:	60 2f       	mov	r22, r16
    2832:	09 95       	icall
    2834:	88 89       	ldd	r24, Y+16	; 0x10
    2836:	99 89       	ldd	r25, Y+17	; 0x11
    2838:	dc 01       	movw	r26, r24
    283a:	ed 91       	ld	r30, X+
    283c:	fc 91       	ld	r31, X
    283e:	01 90       	ld	r0, Z+
    2840:	f0 81       	ld	r31, Z
    2842:	e0 2d       	mov	r30, r0
    2844:	61 2f       	mov	r22, r17
    2846:	09 95       	icall
    2848:	88 89       	ldd	r24, Y+16	; 0x10
    284a:	99 89       	ldd	r25, Y+17	; 0x11
    284c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <TwoWire::endTransmission()>
    2850:	91 e0       	ldi	r25, 0x01	; 1
    2852:	81 11       	cpse	r24, r1
    2854:	90 e0       	ldi	r25, 0x00	; 0
    2856:	89 2f       	mov	r24, r25
    2858:	df 91       	pop	r29
    285a:	cf 91       	pop	r28
    285c:	1f 91       	pop	r17
    285e:	0f 91       	pop	r16
    2860:	ff 90       	pop	r15
    2862:	08 95       	ret

00002864 <ADS1X15::_requestADC(unsigned int)>:
_ZN7ADS1X1511_requestADCEj():
    2864:	fc 01       	movw	r30, r24
    2866:	25 81       	ldd	r18, Z+5	; 0x05
    2868:	36 81       	ldd	r19, Z+6	; 0x06
    286a:	87 81       	ldd	r24, Z+7	; 0x07
    286c:	90 85       	ldd	r25, Z+8	; 0x08
    286e:	28 2b       	or	r18, r24
    2870:	39 2b       	or	r19, r25
    2872:	30 68       	ori	r19, 0x80	; 128
    2874:	81 85       	ldd	r24, Z+9	; 0x09
    2876:	92 85       	ldd	r25, Z+10	; 0x0a
    2878:	28 2b       	or	r18, r24
    287a:	39 2b       	or	r19, r25
    287c:	26 2b       	or	r18, r22
    287e:	37 2b       	or	r19, r23
    2880:	83 85       	ldd	r24, Z+11	; 0x0b
    2882:	81 11       	cpse	r24, r1
    2884:	20 61       	ori	r18, 0x10	; 16
    2886:	84 85       	ldd	r24, Z+12	; 0x0c
    2888:	81 11       	cpse	r24, r1
    288a:	28 60       	ori	r18, 0x08	; 8
    288c:	85 85       	ldd	r24, Z+13	; 0x0d
    288e:	81 11       	cpse	r24, r1
    2890:	24 60       	ori	r18, 0x04	; 4
    2892:	86 85       	ldd	r24, Z+14	; 0x0e
    2894:	28 2b       	or	r18, r24
    2896:	41 e0       	ldi	r20, 0x01	; 1
    2898:	62 81       	ldd	r22, Z+2	; 0x02
    289a:	cf 01       	movw	r24, r30
    289c:	0c 94 f9 13 	jmp	0x27f2	; 0x27f2 <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>

000028a0 <ADS1X15::_readRegister(unsigned char, unsigned char)>:
_ZN7ADS1X1513_readRegisterEhh():
    28a0:	0f 93       	push	r16
    28a2:	1f 93       	push	r17
    28a4:	cf 93       	push	r28
    28a6:	df 93       	push	r29
    28a8:	8c 01       	movw	r16, r24
    28aa:	c6 2f       	mov	r28, r22
    28ac:	d4 2f       	mov	r29, r20
    28ae:	dc 01       	movw	r26, r24
    28b0:	50 96       	adiw	r26, 0x10	; 16
    28b2:	8d 91       	ld	r24, X+
    28b4:	9c 91       	ld	r25, X
    28b6:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <TwoWire::beginTransmission(unsigned char)>
    28ba:	f8 01       	movw	r30, r16
    28bc:	80 89       	ldd	r24, Z+16	; 0x10
    28be:	91 89       	ldd	r25, Z+17	; 0x11
    28c0:	dc 01       	movw	r26, r24
    28c2:	ed 91       	ld	r30, X+
    28c4:	fc 91       	ld	r31, X
    28c6:	01 90       	ld	r0, Z+
    28c8:	f0 81       	ld	r31, Z
    28ca:	e0 2d       	mov	r30, r0
    28cc:	6d 2f       	mov	r22, r29
    28ce:	09 95       	icall
    28d0:	f8 01       	movw	r30, r16
    28d2:	80 89       	ldd	r24, Z+16	; 0x10
    28d4:	91 89       	ldd	r25, Z+17	; 0x11
    28d6:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <TwoWire::endTransmission()>
    28da:	42 e0       	ldi	r20, 0x02	; 2
    28dc:	6c 2f       	mov	r22, r28
    28de:	d8 01       	movw	r26, r16
    28e0:	50 96       	adiw	r26, 0x10	; 16
    28e2:	8d 91       	ld	r24, X+
    28e4:	9c 91       	ld	r25, X
    28e6:	0e 94 48 16 	call	0x2c90	; 0x2c90 <TwoWire::requestFrom(unsigned char, unsigned char)>
    28ea:	82 30       	cpi	r24, 0x02	; 2
    28ec:	f1 f4       	brne	.+60     	; 0x292a <ADS1X15::_readRegister(unsigned char, unsigned char)+0x8a>
    28ee:	f8 01       	movw	r30, r16
    28f0:	80 89       	ldd	r24, Z+16	; 0x10
    28f2:	91 89       	ldd	r25, Z+17	; 0x11
    28f4:	dc 01       	movw	r26, r24
    28f6:	ed 91       	ld	r30, X+
    28f8:	fc 91       	ld	r31, X
    28fa:	02 84       	ldd	r0, Z+10	; 0x0a
    28fc:	f3 85       	ldd	r31, Z+11	; 0x0b
    28fe:	e0 2d       	mov	r30, r0
    2900:	09 95       	icall
    2902:	d8 2f       	mov	r29, r24
    2904:	b0 e0       	ldi	r27, 0x00	; 0
    2906:	cb 2f       	mov	r28, r27
    2908:	f8 01       	movw	r30, r16
    290a:	80 89       	ldd	r24, Z+16	; 0x10
    290c:	91 89       	ldd	r25, Z+17	; 0x11
    290e:	dc 01       	movw	r26, r24
    2910:	ed 91       	ld	r30, X+
    2912:	fc 91       	ld	r31, X
    2914:	02 84       	ldd	r0, Z+10	; 0x0a
    2916:	f3 85       	ldd	r31, Z+11	; 0x0b
    2918:	e0 2d       	mov	r30, r0
    291a:	09 95       	icall
    291c:	8c 0f       	add	r24, r28
    291e:	9d 1f       	adc	r25, r29
    2920:	df 91       	pop	r29
    2922:	cf 91       	pop	r28
    2924:	1f 91       	pop	r17
    2926:	0f 91       	pop	r16
    2928:	08 95       	ret
    292a:	90 e0       	ldi	r25, 0x00	; 0
    292c:	80 e0       	ldi	r24, 0x00	; 0
    292e:	f8 cf       	rjmp	.-16     	; 0x2920 <ADS1X15::_readRegister(unsigned char, unsigned char)+0x80>

00002930 <ADS1X15::isBusy()>:
_ZN7ADS1X156isBusyEv():
    2930:	41 e0       	ldi	r20, 0x01	; 1
    2932:	fc 01       	movw	r30, r24
    2934:	62 81       	ldd	r22, Z+2	; 0x02
    2936:	0e 94 50 14 	call	0x28a0	; 0x28a0 <ADS1X15::_readRegister(unsigned char, unsigned char)>
    293a:	89 2f       	mov	r24, r25
    293c:	80 95       	com	r24
    293e:	88 1f       	adc	r24, r24
    2940:	88 27       	eor	r24, r24
    2942:	88 1f       	adc	r24, r24
    2944:	08 95       	ret

00002946 <ADS1X15::getValue()>:
_ZN7ADS1X158getValueEv():
    2946:	cf 93       	push	r28
    2948:	df 93       	push	r29
    294a:	ec 01       	movw	r28, r24
    294c:	40 e0       	ldi	r20, 0x00	; 0
    294e:	6a 81       	ldd	r22, Y+2	; 0x02
    2950:	0e 94 50 14 	call	0x28a0	; 0x28a0 <ADS1X15::_readRegister(unsigned char, unsigned char)>
    2954:	2c 81       	ldd	r18, Y+4	; 0x04
    2956:	22 23       	and	r18, r18
    2958:	29 f0       	breq	.+10     	; 0x2964 <ADS1X15::getValue()+0x1e>
    295a:	02 c0       	rjmp	.+4      	; 0x2960 <ADS1X15::getValue()+0x1a>
    295c:	95 95       	asr	r25
    295e:	87 95       	ror	r24
    2960:	2a 95       	dec	r18
    2962:	e2 f7       	brpl	.-8      	; 0x295c <ADS1X15::getValue()+0x16>
    2964:	df 91       	pop	r29
    2966:	cf 91       	pop	r28
    2968:	08 95       	ret

0000296a <ADS1X15::_readADC(unsigned int)>:
_ZN7ADS1X158_readADCEj():
    296a:	cf 93       	push	r28
    296c:	df 93       	push	r29
    296e:	ec 01       	movw	r28, r24
    2970:	0e 94 32 14 	call	0x2864	; 0x2864 <ADS1X15::_requestADC(unsigned int)>
    2974:	8f 81       	ldd	r24, Y+7	; 0x07
    2976:	98 85       	ldd	r25, Y+8	; 0x08
    2978:	81 15       	cp	r24, r1
    297a:	91 40       	sbci	r25, 0x01	; 1
    297c:	41 f4       	brne	.+16     	; 0x298e <ADS1X15::_readADC(unsigned int)+0x24>
    297e:	ce 01       	movw	r24, r28
    2980:	0e 94 98 14 	call	0x2930	; 0x2930 <ADS1X15::isBusy()>
    2984:	88 23       	and	r24, r24
    2986:	49 f0       	breq	.+18     	; 0x299a <ADS1X15::_readADC(unsigned int)+0x30>
    2988:	0e 94 81 18 	call	0x3102	; 0x3102 <yield>
    298c:	f8 cf       	rjmp	.-16     	; 0x297e <ADS1X15::_readADC(unsigned int)+0x14>
    298e:	6b 81       	ldd	r22, Y+3	; 0x03
    2990:	70 e0       	ldi	r23, 0x00	; 0
    2992:	90 e0       	ldi	r25, 0x00	; 0
    2994:	80 e0       	ldi	r24, 0x00	; 0
    2996:	0e 94 f1 18 	call	0x31e2	; 0x31e2 <delay>
    299a:	ce 01       	movw	r24, r28
    299c:	df 91       	pop	r29
    299e:	cf 91       	pop	r28
    29a0:	0c 94 a3 14 	jmp	0x2946	; 0x2946 <ADS1X15::getValue()>

000029a4 <ADS1X15::readADC(unsigned char)>:
_ZN7ADS1X157readADCEh():
    29a4:	fc 01       	movw	r30, r24
    29a6:	21 81       	ldd	r18, Z+1	; 0x01
    29a8:	62 17       	cp	r22, r18
    29aa:	38 f4       	brcc	.+14     	; 0x29ba <ADS1X15::readADC(unsigned char)+0x16>
    29ac:	62 95       	swap	r22
    29ae:	60 7f       	andi	r22, 0xF0	; 240
    29b0:	70 e4       	ldi	r23, 0x40	; 64
    29b2:	76 0f       	add	r23, r22
    29b4:	60 e0       	ldi	r22, 0x00	; 0
    29b6:	0c 94 b5 14 	jmp	0x296a	; 0x296a <ADS1X15::_readADC(unsigned int)>
    29ba:	90 e0       	ldi	r25, 0x00	; 0
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	08 95       	ret

000029c0 <ADS1115::ADS1115(unsigned char, TwoWire*)>:
_ZN7ADS1115C2EhP7TwoWire():
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:577

///////////////////////////////////////////////////////////////////////////
//
// ADS1115
//
ADS1115::ADS1115(uint8_t address, TwoWire *wire)
    29c0:	ff 92       	push	r15
    29c2:	0f 93       	push	r16
    29c4:	1f 93       	push	r17
    29c6:	cf 93       	push	r28
    29c8:	df 93       	push	r29
    29ca:	ec 01       	movw	r28, r24
    29cc:	f6 2e       	mov	r15, r22
    29ce:	8a 01       	movw	r16, r20
    29d0:	0e 94 cf 13 	call	0x279e	; 0x279e <ADS1X15::ADS1X15()>
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:579
{
  _address = address;
    29d4:	fa 82       	std	Y+2, r15	; 0x02
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:580
  _wire = wire;
    29d6:	19 8b       	std	Y+17, r17	; 0x11
    29d8:	08 8b       	std	Y+16, r16	; 0x10
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:581
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_4;
    29da:	85 e3       	ldi	r24, 0x35	; 53
    29dc:	88 83       	st	Y, r24
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:582
  _conversionDelay = ADS1115_CONVERSION_DELAY;
    29de:	88 e0       	ldi	r24, 0x08	; 8
    29e0:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:583
  _bitShift = 0;
    29e2:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:584
  _maxPorts = 4;
    29e4:	84 e0       	ldi	r24, 0x04	; 4
    29e6:	89 83       	std	Y+1, r24	; 0x01
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:585
}
    29e8:	df 91       	pop	r29
    29ea:	cf 91       	pop	r28
    29ec:	1f 91       	pop	r17
    29ee:	0f 91       	pop	r16
    29f0:	ff 90       	pop	r15
    29f2:	08 95       	ret

000029f4 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:329

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    29f4:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <TwoWire::rxBufferLength>
    29f8:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <TwoWire::rxBufferIndex>
    29fc:	89 1b       	sub	r24, r25
    29fe:	99 0b       	sbc	r25, r25
    2a00:	08 95       	ret

00002a02 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    2a02:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <TwoWire::rxBufferIndex>
    2a06:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <TwoWire::rxBufferLength>
    2a0a:	2f ef       	ldi	r18, 0xFF	; 255
    2a0c:	3f ef       	ldi	r19, 0xFF	; 255
    2a0e:	98 17       	cp	r25, r24
    2a10:	48 f4       	brcc	.+18     	; 0x2a24 <TwoWire::read()+0x22>
    2a12:	e9 2f       	mov	r30, r25
    2a14:	f0 e0       	ldi	r31, 0x00	; 0
    2a16:	ef 56       	subi	r30, 0x6F	; 111
    2a18:	f9 4f       	sbci	r31, 0xF9	; 249
    2a1a:	20 81       	ld	r18, Z
    2a1c:	30 e0       	ldi	r19, 0x00	; 0
    2a1e:	9f 5f       	subi	r25, 0xFF	; 255
    2a20:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <TwoWire::rxBufferIndex>
    2a24:	c9 01       	movw	r24, r18
    2a26:	08 95       	ret

00002a28 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    2a28:	e0 91 90 06 	lds	r30, 0x0690	; 0x800690 <TwoWire::rxBufferIndex>
    2a2c:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <TwoWire::rxBufferLength>
    2a30:	e8 17       	cp	r30, r24
    2a32:	30 f4       	brcc	.+12     	; 0x2a40 <TwoWire::peek()+0x18>
    2a34:	f0 e0       	ldi	r31, 0x00	; 0
    2a36:	ef 56       	subi	r30, 0x6F	; 111
    2a38:	f9 4f       	sbci	r31, 0xF9	; 249
    2a3a:	80 81       	ld	r24, Z
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	08 95       	ret
    2a40:	8f ef       	ldi	r24, 0xFF	; 255
    2a42:	9f ef       	ldi	r25, 0xFF	; 255
    2a44:	08 95       	ret

00002a46 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    2a46:	08 95       	ret

00002a48 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    2a48:	cf 93       	push	r28
    2a4a:	df 93       	push	r29
    2a4c:	ec 01       	movw	r28, r24
    2a4e:	e0 91 67 06 	lds	r30, 0x0667	; 0x800667 <TwoWire::user_onReceive>
    2a52:	f0 91 68 06 	lds	r31, 0x0668	; 0x800668 <TwoWire::user_onReceive+0x1>
    2a56:	30 97       	sbiw	r30, 0x00	; 0
    2a58:	f1 f0       	breq	.+60     	; 0x2a96 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    2a5a:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <TwoWire::rxBufferIndex>
    2a5e:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <TwoWire::rxBufferLength>
    2a62:	98 17       	cp	r25, r24
    2a64:	c0 f0       	brcs	.+48     	; 0x2a96 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	29 2f       	mov	r18, r25
    2a6a:	30 e0       	ldi	r19, 0x00	; 0
    2a6c:	26 17       	cp	r18, r22
    2a6e:	37 07       	cpc	r19, r23
    2a70:	54 f4       	brge	.+20     	; 0x2a86 <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
    2a72:	de 01       	movw	r26, r28
    2a74:	a2 0f       	add	r26, r18
    2a76:	b3 1f       	adc	r27, r19
    2a78:	4c 91       	ld	r20, X
    2a7a:	2f 56       	subi	r18, 0x6F	; 111
    2a7c:	39 4f       	sbci	r19, 0xF9	; 249
    2a7e:	d9 01       	movw	r26, r18
    2a80:	4c 93       	st	X, r20
    2a82:	9f 5f       	subi	r25, 0xFF	; 255
    2a84:	f1 cf       	rjmp	.-30     	; 0x2a68 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
    2a86:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <TwoWire::rxBufferIndex>
    2a8a:	60 93 8f 06 	sts	0x068F, r22	; 0x80068f <TwoWire::rxBufferLength>
    2a8e:	cb 01       	movw	r24, r22
    2a90:	df 91       	pop	r29
    2a92:	cf 91       	pop	r28
    2a94:	09 94       	ijmp
    2a96:	df 91       	pop	r29
    2a98:	cf 91       	pop	r28
    2a9a:	08 95       	ret

00002a9c <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    2a9c:	e0 91 69 06 	lds	r30, 0x0669	; 0x800669 <TwoWire::user_onRequest>
    2aa0:	f0 91 6a 06 	lds	r31, 0x066A	; 0x80066a <TwoWire::user_onRequest+0x1>
    2aa4:	30 97       	sbiw	r30, 0x00	; 0
    2aa6:	29 f0       	breq	.+10     	; 0x2ab2 <TwoWire::onRequestService()+0x16>
    2aa8:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <TwoWire::txBufferIndex>
    2aac:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <TwoWire::txBufferLength>
    2ab0:	09 94       	ijmp
    2ab2:	08 95       	ret

00002ab4 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    2ab4:	cf 93       	push	r28
    2ab6:	df 93       	push	r29
    2ab8:	1f 92       	push	r1
    2aba:	cd b7       	in	r28, 0x3d	; 61
    2abc:	de b7       	in	r29, 0x3e	; 62
    2abe:	69 83       	std	Y+1, r22	; 0x01
    2ac0:	20 91 6b 06 	lds	r18, 0x066B	; 0x80066b <TwoWire::transmitting>
    2ac4:	22 23       	and	r18, r18
    2ac6:	f9 f0       	breq	.+62     	; 0x2b06 <TwoWire::write(unsigned char)+0x52>
    2ac8:	20 91 6c 06 	lds	r18, 0x066C	; 0x80066c <TwoWire::txBufferLength>
    2acc:	20 32       	cpi	r18, 0x20	; 32
    2ace:	58 f0       	brcs	.+22     	; 0x2ae6 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    2ad0:	21 e0       	ldi	r18, 0x01	; 1
    2ad2:	30 e0       	ldi	r19, 0x00	; 0
    2ad4:	fc 01       	movw	r30, r24
    2ad6:	33 83       	std	Z+3, r19	; 0x03
    2ad8:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    2ada:	90 e0       	ldi	r25, 0x00	; 0
    2adc:	80 e0       	ldi	r24, 0x00	; 0
    2ade:	0f 90       	pop	r0
    2ae0:	df 91       	pop	r29
    2ae2:	cf 91       	pop	r28
    2ae4:	08 95       	ret
    2ae6:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <TwoWire::txBufferIndex>
    2aea:	e8 2f       	mov	r30, r24
    2aec:	f0 e0       	ldi	r31, 0x00	; 0
    2aee:	e2 59       	subi	r30, 0x92	; 146
    2af0:	f9 4f       	sbci	r31, 0xF9	; 249
    2af2:	99 81       	ldd	r25, Y+1	; 0x01
    2af4:	90 83       	st	Z, r25
    2af6:	8f 5f       	subi	r24, 0xFF	; 255
    2af8:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <TwoWire::txBufferIndex>
    2afc:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <TwoWire::txBufferLength>
    2b00:	81 e0       	ldi	r24, 0x01	; 1
    2b02:	90 e0       	ldi	r25, 0x00	; 0
    2b04:	ec cf       	rjmp	.-40     	; 0x2ade <TwoWire::write(unsigned char)+0x2a>
    2b06:	61 e0       	ldi	r22, 0x01	; 1
    2b08:	ce 01       	movw	r24, r28
    2b0a:	01 96       	adiw	r24, 0x01	; 1
    2b0c:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <twi_transmit>
    2b10:	f7 cf       	rjmp	.-18     	; 0x2b00 <TwoWire::write(unsigned char)+0x4c>

00002b12 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    2b12:	cf 92       	push	r12
    2b14:	df 92       	push	r13
    2b16:	ef 92       	push	r14
    2b18:	ff 92       	push	r15
    2b1a:	0f 93       	push	r16
    2b1c:	1f 93       	push	r17
    2b1e:	cf 93       	push	r28
    2b20:	df 93       	push	r29
    2b22:	7c 01       	movw	r14, r24
    2b24:	cb 01       	movw	r24, r22
    2b26:	8a 01       	movw	r16, r20
    2b28:	20 91 6b 06 	lds	r18, 0x066B	; 0x80066b <TwoWire::transmitting>
    2b2c:	22 23       	and	r18, r18
    2b2e:	89 f0       	breq	.+34     	; 0x2b52 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    2b30:	eb 01       	movw	r28, r22
    2b32:	6b 01       	movw	r12, r22
    2b34:	c4 0e       	add	r12, r20
    2b36:	d5 1e       	adc	r13, r21
    2b38:	cc 15       	cp	r28, r12
    2b3a:	dd 05       	cpc	r29, r13
    2b3c:	69 f0       	breq	.+26     	; 0x2b58 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    2b3e:	69 91       	ld	r22, Y+
    2b40:	d7 01       	movw	r26, r14
    2b42:	ed 91       	ld	r30, X+
    2b44:	fc 91       	ld	r31, X
    2b46:	01 90       	ld	r0, Z+
    2b48:	f0 81       	ld	r31, Z
    2b4a:	e0 2d       	mov	r30, r0
    2b4c:	c7 01       	movw	r24, r14
    2b4e:	09 95       	icall
    2b50:	f3 cf       	rjmp	.-26     	; 0x2b38 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    2b52:	64 2f       	mov	r22, r20
    2b54:	0e 94 1c 17 	call	0x2e38	; 0x2e38 <twi_transmit>
    2b58:	c8 01       	movw	r24, r16
    2b5a:	df 91       	pop	r29
    2b5c:	cf 91       	pop	r28
    2b5e:	1f 91       	pop	r17
    2b60:	0f 91       	pop	r16
    2b62:	ff 90       	pop	r15
    2b64:	ef 90       	pop	r14
    2b66:	df 90       	pop	r13
    2b68:	cf 90       	pop	r12
    2b6a:	08 95       	ret

00002b6c <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    2b6c:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <TwoWire::rxBufferIndex>
    2b70:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <TwoWire::rxBufferLength>
    2b74:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <TwoWire::txBufferIndex>
    2b78:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <TwoWire::txBufferLength>
    2b7c:	0e 94 5f 16 	call	0x2cbe	; 0x2cbe <twi_init>
    2b80:	8e e4       	ldi	r24, 0x4E	; 78
    2b82:	95 e1       	ldi	r25, 0x15	; 21
    2b84:	0e 94 48 17 	call	0x2e90	; 0x2e90 <twi_attachSlaveTxEvent>
    2b88:	84 e2       	ldi	r24, 0x24	; 36
    2b8a:	95 e1       	ldi	r25, 0x15	; 21
    2b8c:	0c 94 43 17 	jmp	0x2e86	; 0x2e86 <twi_attachSlaveRxEvent>

00002b90 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    2b90:	81 e0       	ldi	r24, 0x01	; 1
    2b92:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <TwoWire::transmitting>
    2b96:	60 93 8e 06 	sts	0x068E, r22	; 0x80068e <TwoWire::txAddress>
    2b9a:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <TwoWire::txBufferIndex>
    2b9e:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <TwoWire::txBufferLength>
    2ba2:	08 95       	ret

00002ba4 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    2ba4:	0f 93       	push	r16
    2ba6:	06 2f       	mov	r16, r22
    2ba8:	21 e0       	ldi	r18, 0x01	; 1
    2baa:	40 91 6c 06 	lds	r20, 0x066C	; 0x80066c <TwoWire::txBufferLength>
    2bae:	6e e6       	ldi	r22, 0x6E	; 110
    2bb0:	76 e0       	ldi	r23, 0x06	; 6
    2bb2:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <TwoWire::txAddress>
    2bb6:	0e 94 c5 16 	call	0x2d8a	; 0x2d8a <twi_writeTo>
    2bba:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <TwoWire::txBufferIndex>
    2bbe:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <TwoWire::txBufferLength>
    2bc2:	10 92 6b 06 	sts	0x066B, r1	; 0x80066b <TwoWire::transmitting>
    2bc6:	0f 91       	pop	r16
    2bc8:	08 95       	ret

00002bca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    2bca:	4f 92       	push	r4
    2bcc:	5f 92       	push	r5
    2bce:	6f 92       	push	r6
    2bd0:	7f 92       	push	r7
    2bd2:	af 92       	push	r10
    2bd4:	bf 92       	push	r11
    2bd6:	cf 92       	push	r12
    2bd8:	ef 92       	push	r14
    2bda:	ff 92       	push	r15
    2bdc:	0f 93       	push	r16
    2bde:	1f 93       	push	r17
    2be0:	cf 93       	push	r28
    2be2:	df 93       	push	r29
    2be4:	5c 01       	movw	r10, r24
    2be6:	f6 2e       	mov	r15, r22
    2be8:	d4 2f       	mov	r29, r20
    2bea:	28 01       	movw	r4, r16
    2bec:	39 01       	movw	r6, r18
    2bee:	ee 20       	and	r14, r14
    2bf0:	19 f1       	breq	.+70     	; 0x2c38 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    2bf2:	0e 94 c8 15 	call	0x2b90	; 0x2b90 <TwoWire::beginTransmission(unsigned char)>
    2bf6:	ce 2d       	mov	r28, r14
    2bf8:	c4 30       	cpi	r28, 0x04	; 4
    2bfa:	08 f0       	brcs	.+2      	; 0x2bfe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    2bfc:	c3 e0       	ldi	r28, 0x03	; 3
    2bfe:	c1 50       	subi	r28, 0x01	; 1
    2c00:	b8 f0       	brcs	.+46     	; 0x2c30 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    2c02:	28 e0       	ldi	r18, 0x08	; 8
    2c04:	c2 9f       	mul	r28, r18
    2c06:	c0 01       	movw	r24, r0
    2c08:	11 24       	eor	r1, r1
    2c0a:	a3 01       	movw	r20, r6
    2c0c:	92 01       	movw	r18, r4
    2c0e:	04 c0       	rjmp	.+8      	; 0x2c18 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    2c10:	56 95       	lsr	r21
    2c12:	47 95       	ror	r20
    2c14:	37 95       	ror	r19
    2c16:	27 95       	ror	r18
    2c18:	8a 95       	dec	r24
    2c1a:	d2 f7       	brpl	.-12     	; 0x2c10 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    2c1c:	b9 01       	movw	r22, r18
    2c1e:	d5 01       	movw	r26, r10
    2c20:	ed 91       	ld	r30, X+
    2c22:	fc 91       	ld	r31, X
    2c24:	01 90       	ld	r0, Z+
    2c26:	f0 81       	ld	r31, Z
    2c28:	e0 2d       	mov	r30, r0
    2c2a:	c5 01       	movw	r24, r10
    2c2c:	09 95       	icall
    2c2e:	e7 cf       	rjmp	.-50     	; 0x2bfe <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    2c30:	60 e0       	ldi	r22, 0x00	; 0
    2c32:	c5 01       	movw	r24, r10
    2c34:	0e 94 d2 15 	call	0x2ba4	; 0x2ba4 <TwoWire::endTransmission(unsigned char)>
    2c38:	4d 2f       	mov	r20, r29
    2c3a:	d1 32       	cpi	r29, 0x21	; 33
    2c3c:	08 f0       	brcs	.+2      	; 0x2c40 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    2c3e:	40 e2       	ldi	r20, 0x20	; 32
    2c40:	2c 2d       	mov	r18, r12
    2c42:	61 e9       	ldi	r22, 0x91	; 145
    2c44:	76 e0       	ldi	r23, 0x06	; 6
    2c46:	8f 2d       	mov	r24, r15
    2c48:	0e 94 7d 16 	call	0x2cfa	; 0x2cfa <twi_readFrom>
    2c4c:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <TwoWire::rxBufferIndex>
    2c50:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <TwoWire::rxBufferLength>
    2c54:	df 91       	pop	r29
    2c56:	cf 91       	pop	r28
    2c58:	1f 91       	pop	r17
    2c5a:	0f 91       	pop	r16
    2c5c:	ff 90       	pop	r15
    2c5e:	ef 90       	pop	r14
    2c60:	cf 90       	pop	r12
    2c62:	bf 90       	pop	r11
    2c64:	af 90       	pop	r10
    2c66:	7f 90       	pop	r7
    2c68:	6f 90       	pop	r6
    2c6a:	5f 90       	pop	r5
    2c6c:	4f 90       	pop	r4
    2c6e:	08 95       	ret

00002c70 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    2c70:	cf 92       	push	r12
    2c72:	ef 92       	push	r14
    2c74:	0f 93       	push	r16
    2c76:	1f 93       	push	r17
    2c78:	c2 2e       	mov	r12, r18
    2c7a:	e1 2c       	mov	r14, r1
    2c7c:	00 e0       	ldi	r16, 0x00	; 0
    2c7e:	10 e0       	ldi	r17, 0x00	; 0
    2c80:	98 01       	movw	r18, r16
    2c82:	0e 94 e5 15 	call	0x2bca	; 0x2bca <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    2c86:	1f 91       	pop	r17
    2c88:	0f 91       	pop	r16
    2c8a:	ef 90       	pop	r14
    2c8c:	cf 90       	pop	r12
    2c8e:	08 95       	ret

00002c90 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
    2c90:	21 e0       	ldi	r18, 0x01	; 1
    2c92:	0c 94 38 16 	jmp	0x2c70	; 0x2c70 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00002c96 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    2c96:	61 e0       	ldi	r22, 0x01	; 1
    2c98:	0c 94 d2 15 	jmp	0x2ba4	; 0x2ba4 <TwoWire::endTransmission(unsigned char)>

00002c9c <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2c9c:	eb e5       	ldi	r30, 0x5B	; 91
    2c9e:	f6 e0       	ldi	r31, 0x06	; 6
    2ca0:	13 82       	std	Z+3, r1	; 0x03
    2ca2:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2ca4:	88 ee       	ldi	r24, 0xE8	; 232
    2ca6:	93 e0       	ldi	r25, 0x03	; 3
    2ca8:	a0 e0       	ldi	r26, 0x00	; 0
    2caa:	b0 e0       	ldi	r27, 0x00	; 0
    2cac:	84 83       	std	Z+4, r24	; 0x04
    2cae:	95 83       	std	Z+5, r25	; 0x05
    2cb0:	a6 83       	std	Z+6, r26	; 0x06
    2cb2:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:52
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2cb4:	82 e3       	ldi	r24, 0x32	; 50
    2cb6:	95 e0       	ldi	r25, 0x05	; 5
    2cb8:	91 83       	std	Z+1, r25	; 0x01
    2cba:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:333
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2cbc:	08 95       	ret

00002cbe <twi_init>:
twi_init():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2cbe:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <twi_state>
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <twi_sendStop>
    2cc8:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <twi_inRepStart>
    2ccc:	61 e0       	ldi	r22, 0x01	; 1
    2cce:	81 e1       	ldi	r24, 0x11	; 17
    2cd0:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    2cd4:	61 e0       	ldi	r22, 0x01	; 1
    2cd6:	80 e1       	ldi	r24, 0x10	; 16
    2cd8:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    2cdc:	e9 eb       	ldi	r30, 0xB9	; 185
    2cde:	f0 e0       	ldi	r31, 0x00	; 0
    2ce0:	80 81       	ld	r24, Z
    2ce2:	8e 7f       	andi	r24, 0xFE	; 254
    2ce4:	80 83       	st	Z, r24
    2ce6:	80 81       	ld	r24, Z
    2ce8:	8d 7f       	andi	r24, 0xFD	; 253
    2cea:	80 83       	st	Z, r24
    2cec:	88 e4       	ldi	r24, 0x48	; 72
    2cee:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2cf2:	85 e4       	ldi	r24, 0x45	; 69
    2cf4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2cf8:	08 95       	ret

00002cfa <twi_readFrom>:
twi_readFrom():
    2cfa:	41 32       	cpi	r20, 0x21	; 33
    2cfc:	08 f0       	brcs	.+2      	; 0x2d00 <twi_readFrom+0x6>
    2cfe:	43 c0       	rjmp	.+134    	; 0x2d86 <twi_readFrom+0x8c>
    2d00:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <twi_state>
    2d04:	91 11       	cpse	r25, r1
    2d06:	fc cf       	rjmp	.-8      	; 0x2d00 <twi_readFrom+0x6>
    2d08:	91 e0       	ldi	r25, 0x01	; 1
    2d0a:	90 93 1e 07 	sts	0x071E, r25	; 0x80071e <twi_state>
    2d0e:	20 93 1c 07 	sts	0x071C, r18	; 0x80071c <twi_sendStop>
    2d12:	2f ef       	ldi	r18, 0xFF	; 255
    2d14:	20 93 b1 06 	sts	0x06B1, r18	; 0x8006b1 <twi_error>
    2d18:	10 92 f6 06 	sts	0x06F6, r1	; 0x8006f6 <twi_masterBufferIndex>
    2d1c:	24 0f       	add	r18, r20
    2d1e:	20 93 f5 06 	sts	0x06F5, r18	; 0x8006f5 <twi_masterBufferLength>
    2d22:	90 93 1d 07 	sts	0x071D, r25	; 0x80071d <twi_slarw>
    2d26:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <twi_slarw>
    2d2a:	88 0f       	add	r24, r24
    2d2c:	89 2b       	or	r24, r25
    2d2e:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <twi_slarw>
    2d32:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <twi_inRepStart>
    2d36:	81 30       	cpi	r24, 0x01	; 1
    2d38:	09 f5       	brne	.+66     	; 0x2d7c <twi_readFrom+0x82>
    2d3a:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <twi_inRepStart>
    2d3e:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <twi_slarw>
    2d42:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d46:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d4a:	83 fd       	sbrc	r24, 3
    2d4c:	f8 cf       	rjmp	.-16     	; 0x2d3e <twi_readFrom+0x44>
    2d4e:	85 ec       	ldi	r24, 0xC5	; 197
    2d50:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d54:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <twi_state>
    2d58:	81 30       	cpi	r24, 0x01	; 1
    2d5a:	e1 f3       	breq	.-8      	; 0x2d54 <twi_readFrom+0x5a>
    2d5c:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <twi_masterBufferIndex>
    2d60:	84 17       	cp	r24, r20
    2d62:	10 f4       	brcc	.+4      	; 0x2d68 <twi_readFrom+0x6e>
    2d64:	40 91 f6 06 	lds	r20, 0x06F6	; 0x8006f6 <twi_masterBufferIndex>
    2d68:	a7 ef       	ldi	r26, 0xF7	; 247
    2d6a:	b6 e0       	ldi	r27, 0x06	; 6
    2d6c:	96 2f       	mov	r25, r22
    2d6e:	fb 01       	movw	r30, r22
    2d70:	8e 2f       	mov	r24, r30
    2d72:	89 1b       	sub	r24, r25
    2d74:	84 17       	cp	r24, r20
    2d76:	20 f0       	brcs	.+8      	; 0x2d80 <twi_readFrom+0x86>
    2d78:	84 2f       	mov	r24, r20
    2d7a:	08 95       	ret
    2d7c:	85 ee       	ldi	r24, 0xE5	; 229
    2d7e:	e8 cf       	rjmp	.-48     	; 0x2d50 <twi_readFrom+0x56>
    2d80:	8d 91       	ld	r24, X+
    2d82:	81 93       	st	Z+, r24
    2d84:	f5 cf       	rjmp	.-22     	; 0x2d70 <twi_readFrom+0x76>
    2d86:	40 e0       	ldi	r20, 0x00	; 0
    2d88:	f7 cf       	rjmp	.-18     	; 0x2d78 <twi_readFrom+0x7e>

00002d8a <twi_writeTo>:
twi_writeTo():
    2d8a:	0f 93       	push	r16
    2d8c:	41 32       	cpi	r20, 0x21	; 33
    2d8e:	08 f0       	brcs	.+2      	; 0x2d92 <twi_writeTo+0x8>
    2d90:	4b c0       	rjmp	.+150    	; 0x2e28 <twi_writeTo+0x9e>
    2d92:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <twi_state>
    2d96:	91 11       	cpse	r25, r1
    2d98:	fc cf       	rjmp	.-8      	; 0x2d92 <twi_writeTo+0x8>
    2d9a:	92 e0       	ldi	r25, 0x02	; 2
    2d9c:	90 93 1e 07 	sts	0x071E, r25	; 0x80071e <twi_state>
    2da0:	00 93 1c 07 	sts	0x071C, r16	; 0x80071c <twi_sendStop>
    2da4:	9f ef       	ldi	r25, 0xFF	; 255
    2da6:	90 93 b1 06 	sts	0x06B1, r25	; 0x8006b1 <twi_error>
    2daa:	10 92 f6 06 	sts	0x06F6, r1	; 0x8006f6 <twi_masterBufferIndex>
    2dae:	40 93 f5 06 	sts	0x06F5, r20	; 0x8006f5 <twi_masterBufferLength>
    2db2:	36 2f       	mov	r19, r22
    2db4:	a7 ef       	ldi	r26, 0xF7	; 247
    2db6:	b6 e0       	ldi	r27, 0x06	; 6
    2db8:	fb 01       	movw	r30, r22
    2dba:	9e 2f       	mov	r25, r30
    2dbc:	93 1b       	sub	r25, r19
    2dbe:	94 17       	cp	r25, r20
    2dc0:	70 f1       	brcs	.+92     	; 0x2e1e <twi_writeTo+0x94>
    2dc2:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <twi_slarw>
    2dc6:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <twi_slarw>
    2dca:	88 0f       	add	r24, r24
    2dcc:	89 2b       	or	r24, r25
    2dce:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <twi_slarw>
    2dd2:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <twi_inRepStart>
    2dd6:	81 30       	cpi	r24, 0x01	; 1
    2dd8:	29 f5       	brne	.+74     	; 0x2e24 <twi_writeTo+0x9a>
    2dda:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <twi_inRepStart>
    2dde:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <twi_slarw>
    2de2:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2de6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2dea:	83 fd       	sbrc	r24, 3
    2dec:	f8 cf       	rjmp	.-16     	; 0x2dde <twi_writeTo+0x54>
    2dee:	85 ec       	ldi	r24, 0xC5	; 197
    2df0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2df4:	22 23       	and	r18, r18
    2df6:	21 f0       	breq	.+8      	; 0x2e00 <twi_writeTo+0x76>
    2df8:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <twi_state>
    2dfc:	82 30       	cpi	r24, 0x02	; 2
    2dfe:	d1 f3       	breq	.-12     	; 0x2df4 <twi_writeTo+0x6a>
    2e00:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <twi_error>
    2e04:	8f 3f       	cpi	r24, 0xFF	; 255
    2e06:	91 f0       	breq	.+36     	; 0x2e2c <twi_writeTo+0xa2>
    2e08:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <twi_error>
    2e0c:	80 32       	cpi	r24, 0x20	; 32
    2e0e:	81 f0       	breq	.+32     	; 0x2e30 <twi_writeTo+0xa6>
    2e10:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <twi_error>
    2e14:	80 33       	cpi	r24, 0x30	; 48
    2e16:	71 f0       	breq	.+28     	; 0x2e34 <twi_writeTo+0xaa>
    2e18:	84 e0       	ldi	r24, 0x04	; 4
    2e1a:	0f 91       	pop	r16
    2e1c:	08 95       	ret
    2e1e:	91 91       	ld	r25, Z+
    2e20:	9d 93       	st	X+, r25
    2e22:	cb cf       	rjmp	.-106    	; 0x2dba <twi_writeTo+0x30>
    2e24:	85 ee       	ldi	r24, 0xE5	; 229
    2e26:	e4 cf       	rjmp	.-56     	; 0x2df0 <twi_writeTo+0x66>
    2e28:	81 e0       	ldi	r24, 0x01	; 1
    2e2a:	f7 cf       	rjmp	.-18     	; 0x2e1a <twi_writeTo+0x90>
    2e2c:	80 e0       	ldi	r24, 0x00	; 0
    2e2e:	f5 cf       	rjmp	.-22     	; 0x2e1a <twi_writeTo+0x90>
    2e30:	82 e0       	ldi	r24, 0x02	; 2
    2e32:	f3 cf       	rjmp	.-26     	; 0x2e1a <twi_writeTo+0x90>
    2e34:	83 e0       	ldi	r24, 0x03	; 3
    2e36:	f1 cf       	rjmp	.-30     	; 0x2e1a <twi_writeTo+0x90>

00002e38 <twi_transmit>:
twi_transmit():
    2e38:	20 91 d3 06 	lds	r18, 0x06D3	; 0x8006d3 <twi_txBufferLength>
    2e3c:	26 0f       	add	r18, r22
    2e3e:	33 27       	eor	r19, r19
    2e40:	33 1f       	adc	r19, r19
    2e42:	21 32       	cpi	r18, 0x21	; 33
    2e44:	31 05       	cpc	r19, r1
    2e46:	ec f4       	brge	.+58     	; 0x2e82 <twi_transmit+0x4a>
    2e48:	20 91 1e 07 	lds	r18, 0x071E	; 0x80071e <twi_state>
    2e4c:	fc 01       	movw	r30, r24
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	80 e0       	ldi	r24, 0x00	; 0
    2e52:	24 30       	cpi	r18, 0x04	; 4
    2e54:	69 f0       	breq	.+26     	; 0x2e70 <twi_transmit+0x38>
    2e56:	82 e0       	ldi	r24, 0x02	; 2
    2e58:	08 95       	ret
    2e5a:	a0 91 d3 06 	lds	r26, 0x06D3	; 0x8006d3 <twi_txBufferLength>
    2e5e:	21 91       	ld	r18, Z+
    2e60:	ac 01       	movw	r20, r24
    2e62:	4b 52       	subi	r20, 0x2B	; 43
    2e64:	59 4f       	sbci	r21, 0xF9	; 249
    2e66:	a4 0f       	add	r26, r20
    2e68:	b5 2f       	mov	r27, r21
    2e6a:	b1 1d       	adc	r27, r1
    2e6c:	2c 93       	st	X, r18
    2e6e:	01 96       	adiw	r24, 0x01	; 1
    2e70:	86 17       	cp	r24, r22
    2e72:	98 f3       	brcs	.-26     	; 0x2e5a <twi_transmit+0x22>
    2e74:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <twi_txBufferLength>
    2e78:	68 0f       	add	r22, r24
    2e7a:	60 93 d3 06 	sts	0x06D3, r22	; 0x8006d3 <twi_txBufferLength>
    2e7e:	80 e0       	ldi	r24, 0x00	; 0
    2e80:	08 95       	ret
    2e82:	81 e0       	ldi	r24, 0x01	; 1
    2e84:	08 95       	ret

00002e86 <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    2e86:	90 93 18 07 	sts	0x0718, r25	; 0x800718 <twi_onSlaveReceive+0x1>
    2e8a:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <twi_onSlaveReceive>
    2e8e:	08 95       	ret

00002e90 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    2e90:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <twi_onSlaveTransmit+0x1>
    2e94:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <twi_onSlaveTransmit>
    2e98:	08 95       	ret

00002e9a <twi_stop>:
twi_stop():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2e9a:	85 ed       	ldi	r24, 0xD5	; 213
    2e9c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2ea0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2ea4:	84 fd       	sbrc	r24, 4
    2ea6:	fc cf       	rjmp	.-8      	; 0x2ea0 <twi_stop+0x6>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2ea8:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
    2eac:	08 95       	ret

00002eae <twi_releaseBus>:
twi_releaseBus():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2eae:	85 ec       	ldi	r24, 0xC5	; 197
    2eb0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    2eb4:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:397
}
    2eb8:	08 95       	ret

00002eba <__vector_26>:
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
    2eba:	1f 92       	push	r1
    2ebc:	0f 92       	push	r0
    2ebe:	0f b6       	in	r0, 0x3f	; 63
    2ec0:	0f 92       	push	r0
    2ec2:	11 24       	eor	r1, r1
    2ec4:	0b b6       	in	r0, 0x3b	; 59
    2ec6:	0f 92       	push	r0
    2ec8:	2f 93       	push	r18
    2eca:	3f 93       	push	r19
    2ecc:	4f 93       	push	r20
    2ece:	5f 93       	push	r21
    2ed0:	6f 93       	push	r22
    2ed2:	7f 93       	push	r23
    2ed4:	8f 93       	push	r24
    2ed6:	9f 93       	push	r25
    2ed8:	af 93       	push	r26
    2eda:	bf 93       	push	r27
    2edc:	ef 93       	push	r30
    2ede:	ff 93       	push	r31
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    2ee0:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2ee4:	88 7f       	andi	r24, 0xF8	; 248
    2ee6:	80 36       	cpi	r24, 0x60	; 96
    2ee8:	09 f4       	brne	.+2      	; 0x2eec <__vector_26+0x32>
    2eea:	4e c0       	rjmp	.+156    	; 0x2f88 <__vector_26+0xce>
    2eec:	08 f0       	brcs	.+2      	; 0x2ef0 <__vector_26+0x36>
    2eee:	41 c0       	rjmp	.+130    	; 0x2f72 <__vector_26+0xb8>
    2ef0:	88 32       	cpi	r24, 0x28	; 40
    2ef2:	09 f4       	brne	.+2      	; 0x2ef6 <__vector_26+0x3c>
    2ef4:	aa c0       	rjmp	.+340    	; 0x304a <__vector_26+0x190>
    2ef6:	28 f5       	brcc	.+74     	; 0x2f42 <__vector_26+0x88>
    2ef8:	80 31       	cpi	r24, 0x10	; 16
    2efa:	09 f4       	brne	.+2      	; 0x2efe <__vector_26+0x44>
    2efc:	9e c0       	rjmp	.+316    	; 0x303a <__vector_26+0x180>
    2efe:	c8 f4       	brcc	.+50     	; 0x2f32 <__vector_26+0x78>
    2f00:	88 23       	and	r24, r24
    2f02:	09 f4       	brne	.+2      	; 0x2f06 <__vector_26+0x4c>
    2f04:	fb c0       	rjmp	.+502    	; 0x30fc <__vector_26+0x242>
    2f06:	88 30       	cpi	r24, 0x08	; 8
    2f08:	09 f4       	brne	.+2      	; 0x2f0c <__vector_26+0x52>
    2f0a:	97 c0       	rjmp	.+302    	; 0x303a <__vector_26+0x180>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2f0c:	ff 91       	pop	r31
    2f0e:	ef 91       	pop	r30
    2f10:	bf 91       	pop	r27
    2f12:	af 91       	pop	r26
    2f14:	9f 91       	pop	r25
    2f16:	8f 91       	pop	r24
    2f18:	7f 91       	pop	r23
    2f1a:	6f 91       	pop	r22
    2f1c:	5f 91       	pop	r21
    2f1e:	4f 91       	pop	r20
    2f20:	3f 91       	pop	r19
    2f22:	2f 91       	pop	r18
    2f24:	0f 90       	pop	r0
    2f26:	0b be       	out	0x3b, r0	; 59
    2f28:	0f 90       	pop	r0
    2f2a:	0f be       	out	0x3f, r0	; 63
    2f2c:	0f 90       	pop	r0
    2f2e:	1f 90       	pop	r1
    2f30:	18 95       	reti
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f32:	88 31       	cpi	r24, 0x18	; 24
    2f34:	09 f4       	brne	.+2      	; 0x2f38 <__vector_26+0x7e>
    2f36:	89 c0       	rjmp	.+274    	; 0x304a <__vector_26+0x190>
    2f38:	80 32       	cpi	r24, 0x20	; 32
    2f3a:	41 f7       	brne	.-48     	; 0x2f0c <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2f3c:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <twi_error>
    2f40:	15 c0       	rjmp	.+42     	; 0x2f6c <__vector_26+0xb2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f42:	80 34       	cpi	r24, 0x40	; 64
    2f44:	09 f4       	brne	.+2      	; 0x2f48 <__vector_26+0x8e>
    2f46:	9e c0       	rjmp	.+316    	; 0x3084 <__vector_26+0x1ca>
    2f48:	48 f4       	brcc	.+18     	; 0x2f5c <__vector_26+0xa2>
    2f4a:	80 33       	cpi	r24, 0x30	; 48
    2f4c:	b9 f3       	breq	.-18     	; 0x2f3c <__vector_26+0x82>
    2f4e:	88 33       	cpi	r24, 0x38	; 56
    2f50:	e9 f6       	brne	.-70     	; 0x2f0c <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2f52:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <twi_error>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
    2f56:	0e 94 57 17 	call	0x2eae	; 0x2eae <twi_releaseBus>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:442
      break;
    2f5a:	d8 cf       	rjmp	.-80     	; 0x2f0c <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f5c:	80 35       	cpi	r24, 0x50	; 80
    2f5e:	09 f4       	brne	.+2      	; 0x2f62 <__vector_26+0xa8>
    2f60:	85 c0       	rjmp	.+266    	; 0x306c <__vector_26+0x1b2>
    2f62:	88 35       	cpi	r24, 0x58	; 88
    2f64:	09 f4       	brne	.+2      	; 0x2f68 <__vector_26+0xae>
    2f66:	96 c0       	rjmp	.+300    	; 0x3094 <__vector_26+0x1da>
    2f68:	88 34       	cpi	r24, 0x48	; 72
    2f6a:	81 f6       	brne	.-96     	; 0x2f0c <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    2f6c:	0e 94 4d 17 	call	0x2e9a	; 0x2e9a <twi_stop>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
    2f70:	cd cf       	rjmp	.-102    	; 0x2f0c <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f72:	88 39       	cpi	r24, 0x98	; 152
    2f74:	09 f4       	brne	.+2      	; 0x2f78 <__vector_26+0xbe>
    2f76:	8c c0       	rjmp	.+280    	; 0x3090 <__vector_26+0x1d6>
    2f78:	38 f5       	brcc	.+78     	; 0x2fc8 <__vector_26+0x10e>
    2f7a:	88 37       	cpi	r24, 0x78	; 120
    2f7c:	29 f0       	breq	.+10     	; 0x2f88 <__vector_26+0xce>
    2f7e:	50 f4       	brcc	.+20     	; 0x2f94 <__vector_26+0xda>
    2f80:	88 36       	cpi	r24, 0x68	; 104
    2f82:	11 f0       	breq	.+4      	; 0x2f88 <__vector_26+0xce>
    2f84:	80 37       	cpi	r24, 0x70	; 112
    2f86:	11 f6       	brne	.-124    	; 0x2f0c <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2f88:	83 e0       	ldi	r24, 0x03	; 3
    2f8a:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2f8e:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <twi_rxBufferIndex>
    2f92:	57 c0       	rjmp	.+174    	; 0x3042 <__vector_26+0x188>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f94:	88 38       	cpi	r24, 0x88	; 136
    2f96:	09 f4       	brne	.+2      	; 0x2f9a <__vector_26+0xe0>
    2f98:	7b c0       	rjmp	.+246    	; 0x3090 <__vector_26+0x1d6>
    2f9a:	80 39       	cpi	r24, 0x90	; 144
    2f9c:	19 f0       	breq	.+6      	; 0x2fa4 <__vector_26+0xea>
    2f9e:	80 38       	cpi	r24, 0x80	; 128
    2fa0:	09 f0       	breq	.+2      	; 0x2fa4 <__vector_26+0xea>
    2fa2:	b4 cf       	rjmp	.-152    	; 0x2f0c <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2fa4:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <twi_rxBufferIndex>
    2fa8:	80 32       	cpi	r24, 0x20	; 32
    2faa:	08 f0       	brcs	.+2      	; 0x2fae <__vector_26+0xf4>
    2fac:	71 c0       	rjmp	.+226    	; 0x3090 <__vector_26+0x1d6>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2fae:	e0 91 b2 06 	lds	r30, 0x06B2	; 0x8006b2 <twi_rxBufferIndex>
    2fb2:	81 e0       	ldi	r24, 0x01	; 1
    2fb4:	8e 0f       	add	r24, r30
    2fb6:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <twi_rxBufferIndex>
    2fba:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2fbe:	f0 e0       	ldi	r31, 0x00	; 0
    2fc0:	ed 54       	subi	r30, 0x4D	; 77
    2fc2:	f9 4f       	sbci	r31, 0xF9	; 249
    2fc4:	80 83       	st	Z, r24
    2fc6:	3d c0       	rjmp	.+122    	; 0x3042 <__vector_26+0x188>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2fc8:	80 3b       	cpi	r24, 0xB0	; 176
    2fca:	39 f0       	breq	.+14     	; 0x2fda <__vector_26+0x120>
    2fcc:	e0 f4       	brcc	.+56     	; 0x3006 <__vector_26+0x14c>
    2fce:	80 3a       	cpi	r24, 0xA0	; 160
    2fd0:	09 f4       	brne	.+2      	; 0x2fd4 <__vector_26+0x11a>
    2fd2:	79 c0       	rjmp	.+242    	; 0x30c6 <__vector_26+0x20c>
    2fd4:	88 3a       	cpi	r24, 0xA8	; 168
    2fd6:	09 f0       	breq	.+2      	; 0x2fda <__vector_26+0x120>
    2fd8:	99 cf       	rjmp	.-206    	; 0x2f0c <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2fda:	84 e0       	ldi	r24, 0x04	; 4
    2fdc:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2fe0:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <twi_txBufferIndex>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2fe4:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <twi_txBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2fe8:	e0 91 19 07 	lds	r30, 0x0719	; 0x800719 <twi_onSlaveTransmit>
    2fec:	f0 91 1a 07 	lds	r31, 0x071A	; 0x80071a <twi_onSlaveTransmit+0x1>
    2ff0:	09 95       	icall
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2ff2:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <twi_txBufferLength>
    2ff6:	81 11       	cpse	r24, r1
    2ff8:	0f c0       	rjmp	.+30     	; 0x3018 <__vector_26+0x15e>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    2ffa:	81 e0       	ldi	r24, 0x01	; 1
    2ffc:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <twi_txBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    3000:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <twi_txBuffer>
    3004:	09 c0       	rjmp	.+18     	; 0x3018 <__vector_26+0x15e>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    3006:	80 3c       	cpi	r24, 0xC0	; 192
    3008:	09 f4       	brne	.+2      	; 0x300c <__vector_26+0x152>
    300a:	76 c0       	rjmp	.+236    	; 0x30f8 <__vector_26+0x23e>
    300c:	88 3c       	cpi	r24, 0xC8	; 200
    300e:	09 f4       	brne	.+2      	; 0x3012 <__vector_26+0x158>
    3010:	73 c0       	rjmp	.+230    	; 0x30f8 <__vector_26+0x23e>
    3012:	88 3b       	cpi	r24, 0xB8	; 184
    3014:	09 f0       	breq	.+2      	; 0x3018 <__vector_26+0x15e>
    3016:	7a cf       	rjmp	.-268    	; 0x2f0c <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    3018:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <twi_txBufferIndex>
    301c:	81 e0       	ldi	r24, 0x01	; 1
    301e:	8e 0f       	add	r24, r30
    3020:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <twi_txBufferIndex>
    3024:	f0 e0       	ldi	r31, 0x00	; 0
    3026:	eb 52       	subi	r30, 0x2B	; 43
    3028:	f9 4f       	sbci	r31, 0xF9	; 249
    302a:	80 81       	ld	r24, Z
    302c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3030:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <twi_txBufferIndex>
    3034:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <twi_txBufferLength>
    3038:	29 c0       	rjmp	.+82     	; 0x308c <__vector_26+0x1d2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    303a:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <twi_slarw>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    303e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3042:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3044:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    3048:	61 cf       	rjmp	.-318    	; 0x2f0c <__vector_26+0x52>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    304a:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <twi_masterBufferIndex>
    304e:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <twi_masterBufferLength>
    3052:	98 17       	cp	r25, r24
    3054:	58 f5       	brcc	.+86     	; 0x30ac <__vector_26+0x1f2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3056:	e0 91 f6 06 	lds	r30, 0x06F6	; 0x8006f6 <twi_masterBufferIndex>
    305a:	81 e0       	ldi	r24, 0x01	; 1
    305c:	8e 0f       	add	r24, r30
    305e:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <twi_masterBufferIndex>
    3062:	f0 e0       	ldi	r31, 0x00	; 0
    3064:	e9 50       	subi	r30, 0x09	; 9
    3066:	f9 4f       	sbci	r31, 0xF9	; 249
    3068:	80 81       	ld	r24, Z
    306a:	e9 cf       	rjmp	.-46     	; 0x303e <__vector_26+0x184>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    306c:	e0 91 f6 06 	lds	r30, 0x06F6	; 0x8006f6 <twi_masterBufferIndex>
    3070:	81 e0       	ldi	r24, 0x01	; 1
    3072:	8e 0f       	add	r24, r30
    3074:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <twi_masterBufferIndex>
    3078:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	e9 50       	subi	r30, 0x09	; 9
    3080:	f9 4f       	sbci	r31, 0xF9	; 249
    3082:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3084:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <twi_masterBufferIndex>
    3088:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <twi_masterBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    308c:	98 17       	cp	r25, r24
    308e:	c8 f2       	brcs	.-78     	; 0x3042 <__vector_26+0x188>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3090:	85 e8       	ldi	r24, 0x85	; 133
    3092:	d8 cf       	rjmp	.-80     	; 0x3044 <__vector_26+0x18a>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3094:	e0 91 f6 06 	lds	r30, 0x06F6	; 0x8006f6 <twi_masterBufferIndex>
    3098:	81 e0       	ldi	r24, 0x01	; 1
    309a:	8e 0f       	add	r24, r30
    309c:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <twi_masterBufferIndex>
    30a0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    30a4:	f0 e0       	ldi	r31, 0x00	; 0
    30a6:	e9 50       	subi	r30, 0x09	; 9
    30a8:	f9 4f       	sbci	r31, 0xF9	; 249
    30aa:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    30ac:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <twi_sendStop>
    30b0:	81 11       	cpse	r24, r1
    30b2:	5c cf       	rjmp	.-328    	; 0x2f6c <__vector_26+0xb2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    30b4:	81 e0       	ldi	r24, 0x01	; 1
    30b6:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <twi_inRepStart>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    30ba:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    30bc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    30c0:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:552
      break;
    30c4:	23 cf       	rjmp	.-442    	; 0x2f0c <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    30c6:	0e 94 57 17 	call	0x2eae	; 0x2eae <twi_releaseBus>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    30ca:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <twi_rxBufferIndex>
    30ce:	80 32       	cpi	r24, 0x20	; 32
    30d0:	30 f4       	brcc	.+12     	; 0x30de <__vector_26+0x224>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    30d2:	e0 91 b2 06 	lds	r30, 0x06B2	; 0x8006b2 <twi_rxBufferIndex>
    30d6:	f0 e0       	ldi	r31, 0x00	; 0
    30d8:	ed 54       	subi	r30, 0x4D	; 77
    30da:	f9 4f       	sbci	r31, 0xF9	; 249
    30dc:	10 82       	st	Z, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    30de:	60 91 b2 06 	lds	r22, 0x06B2	; 0x8006b2 <twi_rxBufferIndex>
    30e2:	70 e0       	ldi	r23, 0x00	; 0
    30e4:	e0 91 17 07 	lds	r30, 0x0717	; 0x800717 <twi_onSlaveReceive>
    30e8:	f0 91 18 07 	lds	r31, 0x0718	; 0x800718 <twi_onSlaveReceive+0x1>
    30ec:	83 eb       	ldi	r24, 0xB3	; 179
    30ee:	96 e0       	ldi	r25, 0x06	; 6
    30f0:	09 95       	icall
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    30f2:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <twi_rxBufferIndex>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:510
      break;
    30f6:	0a cf       	rjmp	.-492    	; 0x2f0c <__vector_26+0x52>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    30f8:	85 ec       	ldi	r24, 0xC5	; 197
    30fa:	e0 cf       	rjmp	.-64     	; 0x30bc <__vector_26+0x202>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    30fc:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <twi_error>
    3100:	35 cf       	rjmp	.-406    	; 0x2f6c <__vector_26+0xb2>

00003102 <yield>:
__empty():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    3102:	08 95       	ret

00003104 <__vector_18>:
__vector_18():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227
  cli();
  m = timer0_millis;
  SREG = oldSREG;

  return m;
}
    3104:	1f 92       	push	r1
    3106:	0f 92       	push	r0
    3108:	0f b6       	in	r0, 0x3f	; 63
    310a:	0f 92       	push	r0
    310c:	11 24       	eor	r1, r1
    310e:	2f 93       	push	r18
    3110:	3f 93       	push	r19
    3112:	8f 93       	push	r24
    3114:	9f 93       	push	r25
    3116:	af 93       	push	r26
    3118:	bf 93       	push	r27
    311a:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <timer0_millis>
    311e:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <timer0_millis+0x1>
    3122:	a0 91 26 07 	lds	r26, 0x0726	; 0x800726 <timer0_millis+0x2>
    3126:	b0 91 27 07 	lds	r27, 0x0727	; 0x800727 <timer0_millis+0x3>
    312a:	30 91 23 07 	lds	r19, 0x0723	; 0x800723 <timer0_fract>
    312e:	23 e0       	ldi	r18, 0x03	; 3
    3130:	23 0f       	add	r18, r19
    3132:	2d 37       	cpi	r18, 0x7D	; 125
    3134:	68 f1       	brcs	.+90     	; 0x3190 <__vector_18+0x8c>
    3136:	26 e8       	ldi	r18, 0x86	; 134
    3138:	23 0f       	add	r18, r19
    313a:	02 96       	adiw	r24, 0x02	; 2
    313c:	a1 1d       	adc	r26, r1
    313e:	b1 1d       	adc	r27, r1
    3140:	20 93 23 07 	sts	0x0723, r18	; 0x800723 <timer0_fract>
    3144:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <timer0_millis>
    3148:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <timer0_millis+0x1>
    314c:	a0 93 26 07 	sts	0x0726, r26	; 0x800726 <timer0_millis+0x2>
    3150:	b0 93 27 07 	sts	0x0727, r27	; 0x800727 <timer0_millis+0x3>
    3154:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <timer0_overflow_count>
    3158:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <timer0_overflow_count+0x1>
    315c:	a0 91 21 07 	lds	r26, 0x0721	; 0x800721 <timer0_overflow_count+0x2>
    3160:	b0 91 22 07 	lds	r27, 0x0722	; 0x800722 <timer0_overflow_count+0x3>
    3164:	01 96       	adiw	r24, 0x01	; 1
    3166:	a1 1d       	adc	r26, r1
    3168:	b1 1d       	adc	r27, r1
    316a:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <timer0_overflow_count>
    316e:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <timer0_overflow_count+0x1>
    3172:	a0 93 21 07 	sts	0x0721, r26	; 0x800721 <timer0_overflow_count+0x2>
    3176:	b0 93 22 07 	sts	0x0722, r27	; 0x800722 <timer0_overflow_count+0x3>
    317a:	bf 91       	pop	r27
    317c:	af 91       	pop	r26
    317e:	9f 91       	pop	r25
    3180:	8f 91       	pop	r24
    3182:	3f 91       	pop	r19
    3184:	2f 91       	pop	r18
    3186:	0f 90       	pop	r0
    3188:	0f be       	out	0x3f, r0	; 63
    318a:	0f 90       	pop	r0
    318c:	1f 90       	pop	r1
    318e:	18 95       	reti
    3190:	01 96       	adiw	r24, 0x01	; 1
    3192:	a1 1d       	adc	r26, r1
    3194:	b1 1d       	adc	r27, r1
    3196:	d4 cf       	rjmp	.-88     	; 0x3140 <__vector_18+0x3c>

00003198 <micros>:
micros():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    3198:	3f b7       	in	r19, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    319a:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    319c:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <timer0_overflow_count>
    31a0:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <timer0_overflow_count+0x1>
    31a4:	a0 91 21 07 	lds	r26, 0x0721	; 0x800721 <timer0_overflow_count+0x2>
    31a8:	b0 91 22 07 	lds	r27, 0x0722	; 0x800722 <timer0_overflow_count+0x3>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    31ac:	26 b5       	in	r18, 0x26	; 38
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    31ae:	a8 9b       	sbis	0x15, 0	; 21
    31b0:	05 c0       	rjmp	.+10     	; 0x31bc <micros+0x24>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    31b2:	2f 3f       	cpi	r18, 0xFF	; 255
    31b4:	19 f0       	breq	.+6      	; 0x31bc <micros+0x24>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    31b6:	01 96       	adiw	r24, 0x01	; 1
    31b8:	a1 1d       	adc	r26, r1
    31ba:	b1 1d       	adc	r27, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    31bc:	3f bf       	out	0x3f, r19	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    31be:	ba 2f       	mov	r27, r26
    31c0:	a9 2f       	mov	r26, r25
    31c2:	98 2f       	mov	r25, r24
    31c4:	88 27       	eor	r24, r24
    31c6:	bc 01       	movw	r22, r24
    31c8:	cd 01       	movw	r24, r26
    31ca:	62 0f       	add	r22, r18
    31cc:	71 1d       	adc	r23, r1
    31ce:	81 1d       	adc	r24, r1
    31d0:	91 1d       	adc	r25, r1
    31d2:	42 e0       	ldi	r20, 0x02	; 2
    31d4:	66 0f       	add	r22, r22
    31d6:	77 1f       	adc	r23, r23
    31d8:	88 1f       	adc	r24, r24
    31da:	99 1f       	adc	r25, r25
    31dc:	4a 95       	dec	r20
    31de:	d1 f7       	brne	.-12     	; 0x31d4 <micros+0x3c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    31e0:	08 95       	ret

000031e2 <delay>:
delay():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    31e2:	8f 92       	push	r8
    31e4:	9f 92       	push	r9
    31e6:	af 92       	push	r10
    31e8:	bf 92       	push	r11
    31ea:	cf 92       	push	r12
    31ec:	df 92       	push	r13
    31ee:	ef 92       	push	r14
    31f0:	ff 92       	push	r15
    31f2:	6b 01       	movw	r12, r22
    31f4:	7c 01       	movw	r14, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    31f6:	0e 94 cc 18 	call	0x3198	; 0x3198 <micros>
    31fa:	4b 01       	movw	r8, r22
    31fc:	5c 01       	movw	r10, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    31fe:	c1 14       	cp	r12, r1
    3200:	d1 04       	cpc	r13, r1
    3202:	e1 04       	cpc	r14, r1
    3204:	f1 04       	cpc	r15, r1
    3206:	e9 f0       	breq	.+58     	; 0x3242 <delay+0x60>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    3208:	0e 94 81 18 	call	0x3102	; 0x3102 <yield>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    320c:	0e 94 cc 18 	call	0x3198	; 0x3198 <micros>
    3210:	68 19       	sub	r22, r8
    3212:	79 09       	sbc	r23, r9
    3214:	8a 09       	sbc	r24, r10
    3216:	9b 09       	sbc	r25, r11
    3218:	68 3e       	cpi	r22, 0xE8	; 232
    321a:	73 40       	sbci	r23, 0x03	; 3
    321c:	81 05       	cpc	r24, r1
    321e:	91 05       	cpc	r25, r1
    3220:	70 f3       	brcs	.-36     	; 0x31fe <delay+0x1c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    3222:	21 e0       	ldi	r18, 0x01	; 1
    3224:	c2 1a       	sub	r12, r18
    3226:	d1 08       	sbc	r13, r1
    3228:	e1 08       	sbc	r14, r1
    322a:	f1 08       	sbc	r15, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    322c:	88 ee       	ldi	r24, 0xE8	; 232
    322e:	88 0e       	add	r8, r24
    3230:	83 e0       	ldi	r24, 0x03	; 3
    3232:	98 1e       	adc	r9, r24
    3234:	a1 1c       	adc	r10, r1
    3236:	b1 1c       	adc	r11, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    3238:	c1 14       	cp	r12, r1
    323a:	d1 04       	cpc	r13, r1
    323c:	e1 04       	cpc	r14, r1
    323e:	f1 04       	cpc	r15, r1
    3240:	29 f7       	brne	.-54     	; 0x320c <delay+0x2a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    3242:	ff 90       	pop	r15
    3244:	ef 90       	pop	r14
    3246:	df 90       	pop	r13
    3248:	cf 90       	pop	r12
    324a:	bf 90       	pop	r11
    324c:	af 90       	pop	r10
    324e:	9f 90       	pop	r9
    3250:	8f 90       	pop	r8
    3252:	08 95       	ret

00003254 <delayMicroseconds>:
delayMicroseconds():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    3254:	82 30       	cpi	r24, 0x02	; 2
    3256:	91 05       	cpc	r25, r1
    3258:	38 f0       	brcs	.+14     	; 0x3268 <delayMicroseconds+0x14>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    325a:	88 0f       	add	r24, r24
    325c:	99 1f       	adc	r25, r25
    325e:	88 0f       	add	r24, r24
    3260:	99 1f       	adc	r25, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    3262:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    3264:	01 97       	sbiw	r24, 0x01	; 1
    3266:	f1 f7       	brne	.-4      	; 0x3264 <delayMicroseconds+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    3268:	08 95       	ret

0000326a <init>:
init():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    326a:	78 94       	sei
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    326c:	84 b5       	in	r24, 0x24	; 36
    326e:	83 60       	ori	r24, 0x03	; 3
    3270:	84 bd       	out	0x24, r24	; 36
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    3272:	85 b5       	in	r24, 0x25	; 37
    3274:	83 60       	ori	r24, 0x03	; 3
    3276:	85 bd       	out	0x25, r24	; 37
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    3278:	ee e6       	ldi	r30, 0x6E	; 110
    327a:	f0 e0       	ldi	r31, 0x00	; 0
    327c:	80 81       	ld	r24, Z
    327e:	81 60       	ori	r24, 0x01	; 1
    3280:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    3282:	e1 e8       	ldi	r30, 0x81	; 129
    3284:	f0 e0       	ldi	r31, 0x00	; 0
    3286:	82 e0       	ldi	r24, 0x02	; 2
    3288:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    328a:	80 81       	ld	r24, Z
    328c:	81 60       	ori	r24, 0x01	; 1
    328e:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    3290:	e0 e8       	ldi	r30, 0x80	; 128
    3292:	f0 e0       	ldi	r31, 0x00	; 0
    3294:	80 81       	ld	r24, Z
    3296:	81 60       	ori	r24, 0x01	; 1
    3298:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    329a:	e1 eb       	ldi	r30, 0xB1	; 177
    329c:	f0 e0       	ldi	r31, 0x00	; 0
    329e:	80 81       	ld	r24, Z
    32a0:	84 60       	ori	r24, 0x04	; 4
    32a2:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    32a4:	e0 eb       	ldi	r30, 0xB0	; 176
    32a6:	f0 e0       	ldi	r31, 0x00	; 0
    32a8:	80 81       	ld	r24, Z
    32aa:	81 60       	ori	r24, 0x01	; 1
    32ac:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    32ae:	e1 e9       	ldi	r30, 0x91	; 145
    32b0:	f0 e0       	ldi	r31, 0x00	; 0
    32b2:	80 81       	ld	r24, Z
    32b4:	83 60       	ori	r24, 0x03	; 3
    32b6:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    32b8:	e0 e9       	ldi	r30, 0x90	; 144
    32ba:	f0 e0       	ldi	r31, 0x00	; 0
    32bc:	80 81       	ld	r24, Z
    32be:	81 60       	ori	r24, 0x01	; 1
    32c0:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    32c2:	87 e8       	ldi	r24, 0x87	; 135
    32c4:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    32c8:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    32cc:	08 95       	ret

000032ce <turnOffPWM>:
turnOffPWM():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    32ce:	82 50       	subi	r24, 0x02	; 2
    32d0:	8a 30       	cpi	r24, 0x0A	; 10
    32d2:	88 f5       	brcc	.+98     	; 0x3336 <turnOffPWM+0x68>
    32d4:	e8 2f       	mov	r30, r24
    32d6:	f0 e0       	ldi	r31, 0x00	; 0
    32d8:	e0 59       	subi	r30, 0x90	; 144
    32da:	f6 4e       	sbci	r31, 0xE6	; 230
    32dc:	0c 94 3b 21 	jmp	0x4276	; 0x4276 <__tablejump2__>
    32e0:	98 19       	sub	r25, r8
    32e2:	9c 19       	sub	r25, r12
    32e4:	7a 19       	sub	r23, r10
    32e6:	80 19       	sub	r24, r0
    32e8:	9b 19       	sub	r25, r11
    32ea:	9b 19       	sub	r25, r11
    32ec:	84 19       	sub	r24, r4
    32ee:	8a 19       	sub	r24, r10
    32f0:	8e 19       	sub	r24, r14
    32f2:	94 19       	sub	r25, r4
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    32f4:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    32f8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    32fa:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    32fe:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    3300:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    3304:	8f 7d       	andi	r24, 0xDF	; 223
    3306:	f9 cf       	rjmp	.-14     	; 0x32fa <turnOffPWM+0x2c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    3308:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    330c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    330e:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    3312:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    3314:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    3318:	8f 7d       	andi	r24, 0xDF	; 223
    331a:	f9 cf       	rjmp	.-14     	; 0x330e <turnOffPWM+0x40>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    331c:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3320:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    3322:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    3326:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    3328:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    332c:	8f 7d       	andi	r24, 0xDF	; 223
    332e:	f9 cf       	rjmp	.-14     	; 0x3322 <turnOffPWM+0x54>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    3330:	84 b5       	in	r24, 0x24	; 36
    3332:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    3334:	84 bd       	out	0x24, r24	; 36
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    3336:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    3338:	84 b5       	in	r24, 0x24	; 36
    333a:	8f 7d       	andi	r24, 0xDF	; 223
    333c:	fb cf       	rjmp	.-10     	; 0x3334 <turnOffPWM+0x66>

0000333e <pinMode>:
pinMode():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    333e:	cf 93       	push	r28
    3340:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    3342:	90 e0       	ldi	r25, 0x00	; 0
    3344:	fc 01       	movw	r30, r24
    3346:	e4 5d       	subi	r30, 0xD4	; 212
    3348:	fd 4f       	sbci	r31, 0xFD	; 253
    334a:	24 91       	lpm	r18, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    334c:	84 5b       	subi	r24, 0xB4	; 180
    334e:	9d 4f       	sbci	r25, 0xFD	; 253
    3350:	fc 01       	movw	r30, r24
    3352:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    3354:	88 23       	and	r24, r24
    3356:	c9 f0       	breq	.+50     	; 0x338a <pinMode+0x4c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    3358:	90 e0       	ldi	r25, 0x00	; 0
    335a:	88 0f       	add	r24, r24
    335c:	99 1f       	adc	r25, r25
    335e:	fc 01       	movw	r30, r24
    3360:	e0 58       	subi	r30, 0x80	; 128
    3362:	fd 4f       	sbci	r31, 0xFD	; 253
    3364:	a5 91       	lpm	r26, Z+
    3366:	b4 91       	lpm	r27, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    3368:	fc 01       	movw	r30, r24
    336a:	ea 58       	subi	r30, 0x8A	; 138
    336c:	fd 4f       	sbci	r31, 0xFD	; 253
    336e:	c5 91       	lpm	r28, Z+
    3370:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    3372:	61 11       	cpse	r22, r1
    3374:	0d c0       	rjmp	.+26     	; 0x3390 <pinMode+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    3376:	9f b7       	in	r25, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    3378:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    337a:	8c 91       	ld	r24, X
    337c:	20 95       	com	r18
    337e:	82 23       	and	r24, r18
    3380:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    3382:	88 81       	ld	r24, Y
    3384:	28 23       	and	r18, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    3386:	28 83       	st	Y, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    3388:	9f bf       	out	0x3f, r25	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    338a:	df 91       	pop	r29
    338c:	cf 91       	pop	r28
    338e:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    3390:	62 30       	cpi	r22, 0x02	; 2
    3392:	51 f4       	brne	.+20     	; 0x33a8 <pinMode+0x6a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    3394:	9f b7       	in	r25, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    3396:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    3398:	3c 91       	ld	r19, X
    339a:	82 2f       	mov	r24, r18
    339c:	80 95       	com	r24
    339e:	83 23       	and	r24, r19
    33a0:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    33a2:	e8 81       	ld	r30, Y
    33a4:	2e 2b       	or	r18, r30
    33a6:	ef cf       	rjmp	.-34     	; 0x3386 <pinMode+0x48>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    33a8:	8f b7       	in	r24, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    33aa:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    33ac:	ec 91       	ld	r30, X
    33ae:	2e 2b       	or	r18, r30
    33b0:	2c 93       	st	X, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    33b2:	8f bf       	out	0x3f, r24	; 63
    33b4:	ea cf       	rjmp	.-44     	; 0x338a <pinMode+0x4c>

000033b6 <digitalWrite>:
digitalWrite():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    33b6:	1f 93       	push	r17
    33b8:	cf 93       	push	r28
    33ba:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    33bc:	28 2f       	mov	r18, r24
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	f9 01       	movw	r30, r18
    33c2:	e4 5f       	subi	r30, 0xF4	; 244
    33c4:	fd 4f       	sbci	r31, 0xFD	; 253
    33c6:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    33c8:	f9 01       	movw	r30, r18
    33ca:	e4 5d       	subi	r30, 0xD4	; 212
    33cc:	fd 4f       	sbci	r31, 0xFD	; 253
    33ce:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    33d0:	f9 01       	movw	r30, r18
    33d2:	e4 5b       	subi	r30, 0xB4	; 180
    33d4:	fd 4f       	sbci	r31, 0xFD	; 253
    33d6:	c4 91       	lpm	r28, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    33d8:	cc 23       	and	r28, r28
    33da:	a9 f0       	breq	.+42     	; 0x3406 <digitalWrite+0x50>
    33dc:	16 2f       	mov	r17, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    33de:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    33e0:	0e 94 67 19 	call	0x32ce	; 0x32ce <turnOffPWM>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    33e4:	ec 2f       	mov	r30, r28
    33e6:	f0 e0       	ldi	r31, 0x00	; 0
    33e8:	ee 0f       	add	r30, r30
    33ea:	ff 1f       	adc	r31, r31
    33ec:	ea 58       	subi	r30, 0x8A	; 138
    33ee:	fd 4f       	sbci	r31, 0xFD	; 253
    33f0:	a5 91       	lpm	r26, Z+
    33f2:	b4 91       	lpm	r27, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    33f4:	8f b7       	in	r24, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    33f6:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    33f8:	ec 91       	ld	r30, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    33fa:	11 11       	cpse	r17, r1
    33fc:	08 c0       	rjmp	.+16     	; 0x340e <digitalWrite+0x58>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    33fe:	d0 95       	com	r29
    3400:	de 23       	and	r29, r30
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    3402:	dc 93       	st	X, r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    3404:	8f bf       	out	0x3f, r24	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    3406:	df 91       	pop	r29
    3408:	cf 91       	pop	r28
    340a:	1f 91       	pop	r17
    340c:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    340e:	de 2b       	or	r29, r30
    3410:	f8 cf       	rjmp	.-16     	; 0x3402 <digitalWrite+0x4c>

00003412 <digitalRead>:
digitalRead():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    3412:	cf 93       	push	r28
    3414:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    3416:	28 2f       	mov	r18, r24
    3418:	30 e0       	ldi	r19, 0x00	; 0
    341a:	f9 01       	movw	r30, r18
    341c:	e4 5f       	subi	r30, 0xF4	; 244
    341e:	fd 4f       	sbci	r31, 0xFD	; 253
    3420:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    3422:	f9 01       	movw	r30, r18
    3424:	e4 5d       	subi	r30, 0xD4	; 212
    3426:	fd 4f       	sbci	r31, 0xFD	; 253
    3428:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    342a:	f9 01       	movw	r30, r18
    342c:	e4 5b       	subi	r30, 0xB4	; 180
    342e:	fd 4f       	sbci	r31, 0xFD	; 253
    3430:	c4 91       	lpm	r28, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    3432:	cc 23       	and	r28, r28
    3434:	a1 f0       	breq	.+40     	; 0x345e <digitalRead+0x4c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    3436:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    3438:	0e 94 67 19 	call	0x32ce	; 0x32ce <turnOffPWM>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    343c:	ec 2f       	mov	r30, r28
    343e:	f0 e0       	ldi	r31, 0x00	; 0
    3440:	ee 0f       	add	r30, r30
    3442:	ff 1f       	adc	r31, r31
    3444:	e4 59       	subi	r30, 0x94	; 148
    3446:	fd 4f       	sbci	r31, 0xFD	; 253
    3448:	a5 91       	lpm	r26, Z+
    344a:	b4 91       	lpm	r27, Z
    344c:	ec 91       	ld	r30, X
    344e:	ed 23       	and	r30, r29
    3450:	81 e0       	ldi	r24, 0x01	; 1
    3452:	90 e0       	ldi	r25, 0x00	; 0
    3454:	09 f4       	brne	.+2      	; 0x3458 <digitalRead+0x46>
    3456:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    3458:	df 91       	pop	r29
    345a:	cf 91       	pop	r28
    345c:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    345e:	80 e0       	ldi	r24, 0x00	; 0
    3460:	90 e0       	ldi	r25, 0x00	; 0
    3462:	fa cf       	rjmp	.-12     	; 0x3458 <digitalRead+0x46>

00003464 <shiftOut>:
shiftOut():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:41
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    3464:	bf 92       	push	r11
    3466:	cf 92       	push	r12
    3468:	df 92       	push	r13
    346a:	ef 92       	push	r14
    346c:	ff 92       	push	r15
    346e:	0f 93       	push	r16
    3470:	1f 93       	push	r17
    3472:	cf 93       	push	r28
    3474:	df 93       	push	r29
    3476:	c8 2e       	mov	r12, r24
    3478:	d6 2e       	mov	r13, r22
    347a:	b4 2e       	mov	r11, r20
    347c:	d0 e0       	ldi	r29, 0x00	; 0
    347e:	c0 e0       	ldi	r28, 0x00	; 0
    3480:	02 2f       	mov	r16, r18
    3482:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:48

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    3484:	87 e0       	ldi	r24, 0x07	; 7
    3486:	e8 2e       	mov	r14, r24
    3488:	f1 2c       	mov	r15, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:46
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    348a:	b8 01       	movw	r22, r16
    348c:	8c 2f       	mov	r24, r28
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:45
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
    348e:	bb 20       	and	r11, r11
    3490:	19 f0       	breq	.+6      	; 0x3498 <shiftOut+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:48
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    3492:	c7 01       	movw	r24, r14
    3494:	8c 1b       	sub	r24, r28
    3496:	9d 0b       	sbc	r25, r29
    3498:	02 c0       	rjmp	.+4      	; 0x349e <shiftOut+0x3a>
    349a:	75 95       	asr	r23
    349c:	67 95       	ror	r22
    349e:	8a 95       	dec	r24
    34a0:	e2 f7       	brpl	.-8      	; 0x349a <shiftOut+0x36>
    34a2:	61 70       	andi	r22, 0x01	; 1
    34a4:	8c 2d       	mov	r24, r12
    34a6:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:50
      
    digitalWrite(clockPin, HIGH);
    34aa:	61 e0       	ldi	r22, 0x01	; 1
    34ac:	8d 2d       	mov	r24, r13
    34ae:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:51
    digitalWrite(clockPin, LOW);    
    34b2:	60 e0       	ldi	r22, 0x00	; 0
    34b4:	8d 2d       	mov	r24, r13
    34b6:	0e 94 db 19 	call	0x33b6	; 0x33b6 <digitalWrite>
    34ba:	21 96       	adiw	r28, 0x01	; 1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:44

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    34bc:	c8 30       	cpi	r28, 0x08	; 8
    34be:	d1 05       	cpc	r29, r1
    34c0:	21 f7       	brne	.-56     	; 0x348a <shiftOut+0x26>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:53
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
      
    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);    
  }
}
    34c2:	df 91       	pop	r29
    34c4:	cf 91       	pop	r28
    34c6:	1f 91       	pop	r17
    34c8:	0f 91       	pop	r16
    34ca:	ff 90       	pop	r15
    34cc:	ef 90       	pop	r14
    34ce:	df 90       	pop	r13
    34d0:	cf 90       	pop	r12
    34d2:	bf 90       	pop	r11
    34d4:	08 95       	ret

000034d6 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    34d6:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    34d8:	91 8d       	ldd	r25, Z+25	; 0x19
    34da:	22 8d       	ldd	r18, Z+26	; 0x1a
    34dc:	89 2f       	mov	r24, r25
    34de:	90 e0       	ldi	r25, 0x00	; 0
    34e0:	80 5c       	subi	r24, 0xC0	; 192
    34e2:	9f 4f       	sbci	r25, 0xFF	; 255
    34e4:	82 1b       	sub	r24, r18
    34e6:	91 09       	sbc	r25, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    34e8:	8f 73       	andi	r24, 0x3F	; 63
    34ea:	99 27       	eor	r25, r25
    34ec:	08 95       	ret

000034ee <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    34ee:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    34f0:	91 8d       	ldd	r25, Z+25	; 0x19
    34f2:	82 8d       	ldd	r24, Z+26	; 0x1a
    34f4:	98 17       	cp	r25, r24
    34f6:	31 f0       	breq	.+12     	; 0x3504 <HardwareSerial::peek()+0x16>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    34f8:	82 8d       	ldd	r24, Z+26	; 0x1a
    34fa:	e8 0f       	add	r30, r24
    34fc:	f1 1d       	adc	r31, r1
    34fe:	85 8d       	ldd	r24, Z+29	; 0x1d
    3500:	90 e0       	ldi	r25, 0x00	; 0
    3502:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3504:	8f ef       	ldi	r24, 0xFF	; 255
    3506:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    3508:	08 95       	ret

0000350a <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    350a:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    350c:	91 8d       	ldd	r25, Z+25	; 0x19
    350e:	82 8d       	ldd	r24, Z+26	; 0x1a
    3510:	98 17       	cp	r25, r24
    3512:	61 f0       	breq	.+24     	; 0x352c <HardwareSerial::read()+0x22>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    3514:	a2 8d       	ldd	r26, Z+26	; 0x1a
    3516:	ae 0f       	add	r26, r30
    3518:	bf 2f       	mov	r27, r31
    351a:	b1 1d       	adc	r27, r1
    351c:	5d 96       	adiw	r26, 0x1d	; 29
    351e:	8c 91       	ld	r24, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    3520:	92 8d       	ldd	r25, Z+26	; 0x1a
    3522:	9f 5f       	subi	r25, 0xFF	; 255
    3524:	9f 73       	andi	r25, 0x3F	; 63
    3526:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    3528:	90 e0       	ldi	r25, 0x00	; 0
    352a:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    352c:	8f ef       	ldi	r24, 0xFF	; 255
    352e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3530:	08 95       	ret

00003532 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    3532:	fc 01       	movw	r30, r24
    3534:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    3536:	44 8d       	ldd	r20, Z+28	; 0x1c
    3538:	25 2f       	mov	r18, r21
    353a:	30 e0       	ldi	r19, 0x00	; 0
    353c:	84 2f       	mov	r24, r20
    353e:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3540:	82 1b       	sub	r24, r18
    3542:	93 0b       	sbc	r25, r19
    3544:	54 17       	cp	r21, r20
    3546:	10 f0       	brcs	.+4      	; 0x354c <HardwareSerial::availableForWrite()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    3548:	cf 96       	adiw	r24, 0x3f	; 63
    354a:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    354c:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    354e:	08 95       	ret

00003550 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3550:	83 e0       	ldi	r24, 0x03	; 3
    3552:	9c e1       	ldi	r25, 0x1C	; 28
    3554:	89 2b       	or	r24, r25
    3556:	49 f0       	breq	.+18     	; 0x356a <serialEventRun()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    3558:	80 e0       	ldi	r24, 0x00	; 0
    355a:	90 e0       	ldi	r25, 0x00	; 0
    355c:	89 2b       	or	r24, r25
    355e:	29 f0       	breq	.+10     	; 0x356a <serialEventRun()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    3560:	0e 94 03 1c 	call	0x3806	; 0x3806 <Serial0_available()>
    3564:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    3566:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    356a:	80 e0       	ldi	r24, 0x00	; 0
    356c:	90 e0       	ldi	r25, 0x00	; 0
    356e:	89 2b       	or	r24, r25
    3570:	49 f0       	breq	.+18     	; 0x3584 <serialEventRun()+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    3572:	80 e0       	ldi	r24, 0x00	; 0
    3574:	90 e0       	ldi	r25, 0x00	; 0
    3576:	89 2b       	or	r24, r25
    3578:	29 f0       	breq	.+10     	; 0x3584 <serialEventRun()+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    357a:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    357e:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    3580:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    3584:	08 95       	ret

00003586 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    3586:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    3588:	a4 8d       	ldd	r26, Z+28	; 0x1c
    358a:	a8 0f       	add	r26, r24
    358c:	b9 2f       	mov	r27, r25
    358e:	b1 1d       	adc	r27, r1
    3590:	a3 5a       	subi	r26, 0xA3	; 163
    3592:	bf 4f       	sbci	r27, 0xFF	; 255
    3594:	2c 91       	ld	r18, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    3596:	84 8d       	ldd	r24, Z+28	; 0x1c
    3598:	90 e0       	ldi	r25, 0x00	; 0
    359a:	01 96       	adiw	r24, 0x01	; 1
    359c:	8f 73       	andi	r24, 0x3F	; 63
    359e:	99 27       	eor	r25, r25
    35a0:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    35a2:	a6 89       	ldd	r26, Z+22	; 0x16
    35a4:	b7 89       	ldd	r27, Z+23	; 0x17
    35a6:	2c 93       	st	X, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    35a8:	a0 89       	ldd	r26, Z+16	; 0x10
    35aa:	b1 89       	ldd	r27, Z+17	; 0x11
    35ac:	8c 91       	ld	r24, X
    35ae:	80 64       	ori	r24, 0x40	; 64
    35b0:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    35b2:	93 8d       	ldd	r25, Z+27	; 0x1b
    35b4:	84 8d       	ldd	r24, Z+28	; 0x1c
    35b6:	98 13       	cpse	r25, r24
    35b8:	06 c0       	rjmp	.+12     	; 0x35c6 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    35ba:	02 88       	ldd	r0, Z+18	; 0x12
    35bc:	f3 89       	ldd	r31, Z+19	; 0x13
    35be:	e0 2d       	mov	r30, r0
    35c0:	80 81       	ld	r24, Z
    35c2:	8f 7d       	andi	r24, 0xDF	; 223
    35c4:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    35c6:	08 95       	ret

000035c8 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    35c8:	cf 93       	push	r28
    35ca:	df 93       	push	r29
    35cc:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    35ce:	88 8d       	ldd	r24, Y+24	; 0x18
    35d0:	88 23       	and	r24, r24
    35d2:	b9 f0       	breq	.+46     	; 0x3602 <HardwareSerial::flush()+0x3a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    35d4:	aa 89       	ldd	r26, Y+18	; 0x12
    35d6:	bb 89       	ldd	r27, Y+19	; 0x13
    35d8:	e8 89       	ldd	r30, Y+16	; 0x10
    35da:	f9 89       	ldd	r31, Y+17	; 0x11
    35dc:	8c 91       	ld	r24, X
    35de:	85 fd       	sbrc	r24, 5
    35e0:	03 c0       	rjmp	.+6      	; 0x35e8 <HardwareSerial::flush()+0x20>
    35e2:	80 81       	ld	r24, Z
    35e4:	86 fd       	sbrc	r24, 6
    35e6:	0d c0       	rjmp	.+26     	; 0x3602 <HardwareSerial::flush()+0x3a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    35e8:	0f b6       	in	r0, 0x3f	; 63
    35ea:	07 fc       	sbrc	r0, 7
    35ec:	f7 cf       	rjmp	.-18     	; 0x35dc <HardwareSerial::flush()+0x14>
    35ee:	8c 91       	ld	r24, X
    35f0:	85 ff       	sbrs	r24, 5
    35f2:	f2 cf       	rjmp	.-28     	; 0x35d8 <HardwareSerial::flush()+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    35f4:	80 81       	ld	r24, Z
    35f6:	85 ff       	sbrs	r24, 5
    35f8:	ed cf       	rjmp	.-38     	; 0x35d4 <HardwareSerial::flush()+0xc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    35fa:	ce 01       	movw	r24, r28
    35fc:	0e 94 c3 1a 	call	0x3586	; 0x3586 <HardwareSerial::_tx_udr_empty_irq()>
    3600:	e9 cf       	rjmp	.-46     	; 0x35d4 <HardwareSerial::flush()+0xc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    3602:	df 91       	pop	r29
    3604:	cf 91       	pop	r28
    3606:	08 95       	ret

00003608 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    3608:	ef 92       	push	r14
    360a:	ff 92       	push	r15
    360c:	0f 93       	push	r16
    360e:	1f 93       	push	r17
    3610:	cf 93       	push	r28
    3612:	df 93       	push	r29
    3614:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    3616:	81 e0       	ldi	r24, 0x01	; 1
    3618:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    361a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    361c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    361e:	98 13       	cpse	r25, r24
    3620:	16 c0       	rjmp	.+44     	; 0x364e <HardwareSerial::write(unsigned char)+0x46>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    3622:	e8 89       	ldd	r30, Y+16	; 0x10
    3624:	f9 89       	ldd	r31, Y+17	; 0x11
    3626:	80 81       	ld	r24, Z
    3628:	85 ff       	sbrs	r24, 5
    362a:	11 c0       	rjmp	.+34     	; 0x364e <HardwareSerial::write(unsigned char)+0x46>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    362c:	ee 89       	ldd	r30, Y+22	; 0x16
    362e:	ff 89       	ldd	r31, Y+23	; 0x17
    3630:	60 83       	st	Z, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    3632:	e8 89       	ldd	r30, Y+16	; 0x10
    3634:	f9 89       	ldd	r31, Y+17	; 0x11
    3636:	80 81       	ld	r24, Z
    3638:	80 64       	ori	r24, 0x40	; 64
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    363a:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    363c:	81 e0       	ldi	r24, 0x01	; 1
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	df 91       	pop	r29
    3642:	cf 91       	pop	r28
    3644:	1f 91       	pop	r17
    3646:	0f 91       	pop	r16
    3648:	ff 90       	pop	r15
    364a:	ef 90       	pop	r14
    364c:	08 95       	ret
    364e:	f6 2e       	mov	r15, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3650:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3652:	10 e0       	ldi	r17, 0x00	; 0
    3654:	0f 5f       	subi	r16, 0xFF	; 255
    3656:	1f 4f       	sbci	r17, 0xFF	; 255
    3658:	0f 73       	andi	r16, 0x3F	; 63
    365a:	11 27       	eor	r17, r17
    365c:	e0 2e       	mov	r14, r16
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    365e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3660:	8e 11       	cpse	r24, r14
    3662:	0c c0       	rjmp	.+24     	; 0x367c <HardwareSerial::write(unsigned char)+0x74>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    3664:	0f b6       	in	r0, 0x3f	; 63
    3666:	07 fc       	sbrc	r0, 7
    3668:	fa cf       	rjmp	.-12     	; 0x365e <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    366a:	e8 89       	ldd	r30, Y+16	; 0x10
    366c:	f9 89       	ldd	r31, Y+17	; 0x11
    366e:	80 81       	ld	r24, Z
    3670:	85 ff       	sbrs	r24, 5
    3672:	f5 cf       	rjmp	.-22     	; 0x365e <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    3674:	ce 01       	movw	r24, r28
    3676:	0e 94 c3 1a 	call	0x3586	; 0x3586 <HardwareSerial::_tx_udr_empty_irq()>
    367a:	f1 cf       	rjmp	.-30     	; 0x365e <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    367c:	eb 8d       	ldd	r30, Y+27	; 0x1b
    367e:	ec 0f       	add	r30, r28
    3680:	fd 2f       	mov	r31, r29
    3682:	f1 1d       	adc	r31, r1
    3684:	e3 5a       	subi	r30, 0xA3	; 163
    3686:	ff 4f       	sbci	r31, 0xFF	; 255
    3688:	f0 82       	st	Z, r15
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    368a:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    368c:	ea 89       	ldd	r30, Y+18	; 0x12
    368e:	fb 89       	ldd	r31, Y+19	; 0x13
    3690:	80 81       	ld	r24, Z
    3692:	80 62       	ori	r24, 0x20	; 32
    3694:	d2 cf       	rjmp	.-92     	; 0x363a <HardwareSerial::write(unsigned char)+0x32>

00003696 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    3696:	cf 92       	push	r12
    3698:	df 92       	push	r13
    369a:	ef 92       	push	r14
    369c:	ff 92       	push	r15
    369e:	1f 93       	push	r17
    36a0:	cf 93       	push	r28
    36a2:	df 93       	push	r29
    36a4:	ec 01       	movw	r28, r24
    36a6:	6a 01       	movw	r12, r20
    36a8:	7b 01       	movw	r14, r22
    36aa:	12 2f       	mov	r17, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    36ac:	e8 89       	ldd	r30, Y+16	; 0x10
    36ae:	f9 89       	ldd	r31, Y+17	; 0x11
    36b0:	82 e0       	ldi	r24, 0x02	; 2
    36b2:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    36b4:	c1 14       	cp	r12, r1
    36b6:	81 ee       	ldi	r24, 0xE1	; 225
    36b8:	d8 06       	cpc	r13, r24
    36ba:	e1 04       	cpc	r14, r1
    36bc:	f1 04       	cpc	r15, r1
    36be:	a1 f0       	breq	.+40     	; 0x36e8 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    36c0:	60 e0       	ldi	r22, 0x00	; 0
    36c2:	79 e0       	ldi	r23, 0x09	; 9
    36c4:	8d e3       	ldi	r24, 0x3D	; 61
    36c6:	90 e0       	ldi	r25, 0x00	; 0
    36c8:	a7 01       	movw	r20, r14
    36ca:	96 01       	movw	r18, r12
    36cc:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
    36d0:	21 50       	subi	r18, 0x01	; 1
    36d2:	31 09       	sbc	r19, r1
    36d4:	41 09       	sbc	r20, r1
    36d6:	51 09       	sbc	r21, r1
    36d8:	56 95       	lsr	r21
    36da:	47 95       	ror	r20
    36dc:	37 95       	ror	r19
    36de:	27 95       	ror	r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    36e0:	21 15       	cp	r18, r1
    36e2:	80 e1       	ldi	r24, 0x10	; 16
    36e4:	38 07       	cpc	r19, r24
    36e6:	98 f0       	brcs	.+38     	; 0x370e <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    36e8:	e8 89       	ldd	r30, Y+16	; 0x10
    36ea:	f9 89       	ldd	r31, Y+17	; 0x11
    36ec:	10 82       	st	Z, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    36ee:	60 e8       	ldi	r22, 0x80	; 128
    36f0:	74 e8       	ldi	r23, 0x84	; 132
    36f2:	8e e1       	ldi	r24, 0x1E	; 30
    36f4:	90 e0       	ldi	r25, 0x00	; 0
    36f6:	a7 01       	movw	r20, r14
    36f8:	96 01       	movw	r18, r12
    36fa:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
    36fe:	21 50       	subi	r18, 0x01	; 1
    3700:	31 09       	sbc	r19, r1
    3702:	41 09       	sbc	r20, r1
    3704:	51 09       	sbc	r21, r1
    3706:	56 95       	lsr	r21
    3708:	47 95       	ror	r20
    370a:	37 95       	ror	r19
    370c:	27 95       	ror	r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    370e:	ec 85       	ldd	r30, Y+12	; 0x0c
    3710:	fd 85       	ldd	r31, Y+13	; 0x0d
    3712:	30 83       	st	Z, r19
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    3714:	ee 85       	ldd	r30, Y+14	; 0x0e
    3716:	ff 85       	ldd	r31, Y+15	; 0x0f
    3718:	20 83       	st	Z, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    371a:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    371c:	ec 89       	ldd	r30, Y+20	; 0x14
    371e:	fd 89       	ldd	r31, Y+21	; 0x15
    3720:	10 83       	st	Z, r17
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    3722:	ea 89       	ldd	r30, Y+18	; 0x12
    3724:	fb 89       	ldd	r31, Y+19	; 0x13
    3726:	80 81       	ld	r24, Z
    3728:	88 69       	ori	r24, 0x98	; 152
    372a:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    372c:	ea 89       	ldd	r30, Y+18	; 0x12
    372e:	fb 89       	ldd	r31, Y+19	; 0x13
    3730:	80 81       	ld	r24, Z
    3732:	8f 7d       	andi	r24, 0xDF	; 223
    3734:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    3736:	df 91       	pop	r29
    3738:	cf 91       	pop	r28
    373a:	1f 91       	pop	r17
    373c:	ff 90       	pop	r15
    373e:	ef 90       	pop	r14
    3740:	df 90       	pop	r13
    3742:	cf 90       	pop	r12
    3744:	08 95       	ret

00003746 <__vector_20>:
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    3746:	1f 92       	push	r1
    3748:	0f 92       	push	r0
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	0f 92       	push	r0
    374e:	11 24       	eor	r1, r1
    3750:	0b b6       	in	r0, 0x3b	; 59
    3752:	0f 92       	push	r0
    3754:	2f 93       	push	r18
    3756:	8f 93       	push	r24
    3758:	9f 93       	push	r25
    375a:	ef 93       	push	r30
    375c:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    375e:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <Serial+0x10>
    3762:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <Serial+0x11>
    3766:	80 81       	ld	r24, Z
    3768:	e0 91 3e 07 	lds	r30, 0x073E	; 0x80073e <Serial+0x16>
    376c:	f0 91 3f 07 	lds	r31, 0x073F	; 0x80073f <Serial+0x17>
    3770:	82 fd       	sbrc	r24, 2
    3772:	1d c0       	rjmp	.+58     	; 0x37ae <__vector_20+0x68>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    3774:	90 81       	ld	r25, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    3776:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <Serial+0x19>
    377a:	8f 5f       	subi	r24, 0xFF	; 255
    377c:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    377e:	20 91 42 07 	lds	r18, 0x0742	; 0x800742 <Serial+0x1a>
    3782:	82 17       	cp	r24, r18
    3784:	41 f0       	breq	.+16     	; 0x3796 <__vector_20+0x50>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    3786:	e0 91 41 07 	lds	r30, 0x0741	; 0x800741 <Serial+0x19>
    378a:	f0 e0       	ldi	r31, 0x00	; 0
    378c:	e8 5d       	subi	r30, 0xD8	; 216
    378e:	f8 4f       	sbci	r31, 0xF8	; 248
    3790:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    3792:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <Serial+0x19>
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    3796:	ff 91       	pop	r31
    3798:	ef 91       	pop	r30
    379a:	9f 91       	pop	r25
    379c:	8f 91       	pop	r24
    379e:	2f 91       	pop	r18
    37a0:	0f 90       	pop	r0
    37a2:	0b be       	out	0x3b, r0	; 59
    37a4:	0f 90       	pop	r0
    37a6:	0f be       	out	0x3f, r0	; 63
    37a8:	0f 90       	pop	r0
    37aa:	1f 90       	pop	r1
    37ac:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    37ae:	80 81       	ld	r24, Z
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    37b0:	f2 cf       	rjmp	.-28     	; 0x3796 <__vector_20+0x50>

000037b2 <__vector_21>:
__vector_21():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    37b2:	1f 92       	push	r1
    37b4:	0f 92       	push	r0
    37b6:	0f b6       	in	r0, 0x3f	; 63
    37b8:	0f 92       	push	r0
    37ba:	11 24       	eor	r1, r1
    37bc:	0b b6       	in	r0, 0x3b	; 59
    37be:	0f 92       	push	r0
    37c0:	2f 93       	push	r18
    37c2:	3f 93       	push	r19
    37c4:	4f 93       	push	r20
    37c6:	5f 93       	push	r21
    37c8:	6f 93       	push	r22
    37ca:	7f 93       	push	r23
    37cc:	8f 93       	push	r24
    37ce:	9f 93       	push	r25
    37d0:	af 93       	push	r26
    37d2:	bf 93       	push	r27
    37d4:	ef 93       	push	r30
    37d6:	ff 93       	push	r31
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    37d8:	88 e2       	ldi	r24, 0x28	; 40
    37da:	97 e0       	ldi	r25, 0x07	; 7
    37dc:	0e 94 c3 1a 	call	0x3586	; 0x3586 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    37e0:	ff 91       	pop	r31
    37e2:	ef 91       	pop	r30
    37e4:	bf 91       	pop	r27
    37e6:	af 91       	pop	r26
    37e8:	9f 91       	pop	r25
    37ea:	8f 91       	pop	r24
    37ec:	7f 91       	pop	r23
    37ee:	6f 91       	pop	r22
    37f0:	5f 91       	pop	r21
    37f2:	4f 91       	pop	r20
    37f4:	3f 91       	pop	r19
    37f6:	2f 91       	pop	r18
    37f8:	0f 90       	pop	r0
    37fa:	0b be       	out	0x3b, r0	; 59
    37fc:	0f 90       	pop	r0
    37fe:	0f be       	out	0x3f, r0	; 63
    3800:	0f 90       	pop	r0
    3802:	1f 90       	pop	r1
    3804:	18 95       	reti

00003806 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    3806:	88 e2       	ldi	r24, 0x28	; 40
    3808:	97 e0       	ldi	r25, 0x07	; 7
    380a:	0e 94 6b 1a 	call	0x34d6	; 0x34d6 <HardwareSerial::available()>
    380e:	21 e0       	ldi	r18, 0x01	; 1
    3810:	89 2b       	or	r24, r25
    3812:	09 f4       	brne	.+2      	; 0x3816 <Serial0_available()+0x10>
    3814:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    3816:	82 2f       	mov	r24, r18
    3818:	08 95       	ret

0000381a <_GLOBAL__sub_I___vector_20>:
_ZN5PrintC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    381a:	e8 e2       	ldi	r30, 0x28	; 40
    381c:	f7 e0       	ldi	r31, 0x07	; 7
    381e:	13 82       	std	Z+3, r1	; 0x03
    3820:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
    3822:	88 ee       	ldi	r24, 0xE8	; 232
    3824:	93 e0       	ldi	r25, 0x03	; 3
    3826:	a0 e0       	ldi	r26, 0x00	; 0
    3828:	b0 e0       	ldi	r27, 0x00	; 0
    382a:	84 83       	std	Z+4, r24	; 0x04
    382c:	95 83       	std	Z+5, r25	; 0x05
    382e:	a6 83       	std	Z+6, r26	; 0x06
    3830:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3832:	84 e4       	ldi	r24, 0x44	; 68
    3834:	95 e0       	ldi	r25, 0x05	; 5
    3836:	91 83       	std	Z+1, r25	; 0x01
    3838:	80 83       	st	Z, r24
    383a:	85 ec       	ldi	r24, 0xC5	; 197
    383c:	90 e0       	ldi	r25, 0x00	; 0
    383e:	95 87       	std	Z+13, r25	; 0x0d
    3840:	84 87       	std	Z+12, r24	; 0x0c
    3842:	84 ec       	ldi	r24, 0xC4	; 196
    3844:	90 e0       	ldi	r25, 0x00	; 0
    3846:	97 87       	std	Z+15, r25	; 0x0f
    3848:	86 87       	std	Z+14, r24	; 0x0e
    384a:	80 ec       	ldi	r24, 0xC0	; 192
    384c:	90 e0       	ldi	r25, 0x00	; 0
    384e:	91 8b       	std	Z+17, r25	; 0x11
    3850:	80 8b       	std	Z+16, r24	; 0x10
    3852:	81 ec       	ldi	r24, 0xC1	; 193
    3854:	90 e0       	ldi	r25, 0x00	; 0
    3856:	93 8b       	std	Z+19, r25	; 0x13
    3858:	82 8b       	std	Z+18, r24	; 0x12
    385a:	82 ec       	ldi	r24, 0xC2	; 194
    385c:	90 e0       	ldi	r25, 0x00	; 0
    385e:	95 8b       	std	Z+21, r25	; 0x15
    3860:	84 8b       	std	Z+20, r24	; 0x14
    3862:	86 ec       	ldi	r24, 0xC6	; 198
    3864:	90 e0       	ldi	r25, 0x00	; 0
    3866:	97 8b       	std	Z+23, r25	; 0x17
    3868:	86 8b       	std	Z+22, r24	; 0x16
    386a:	11 8e       	std	Z+25, r1	; 0x19
    386c:	12 8e       	std	Z+26, r1	; 0x1a
    386e:	13 8e       	std	Z+27, r1	; 0x1b
    3870:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    3872:	08 95       	ret

00003874 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:171
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    3874:	af 92       	push	r10
    3876:	bf 92       	push	r11
    3878:	cf 92       	push	r12
    387a:	df 92       	push	r13
    387c:	ef 92       	push	r14
    387e:	ff 92       	push	r15
    3880:	0f 93       	push	r16
    3882:	1f 93       	push	r17
    3884:	cf 93       	push	r28
    3886:	df 93       	push	r29
    3888:	6c 01       	movw	r12, r24
    388a:	7b 01       	movw	r14, r22
    388c:	8b 01       	movw	r16, r22
    388e:	04 0f       	add	r16, r20
    3890:	15 1f       	adc	r17, r21
    3892:	eb 01       	movw	r28, r22
    3894:	5e 01       	movw	r10, r28
    3896:	ae 18       	sub	r10, r14
    3898:	bf 08       	sbc	r11, r15
    389a:	c0 17       	cp	r28, r16
    389c:	d1 07       	cpc	r29, r17
    389e:	59 f0       	breq	.+22     	; 0x38b6 <Print::write(unsigned char const*, unsigned int)+0x42>
    38a0:	69 91       	ld	r22, Y+
    38a2:	d6 01       	movw	r26, r12
    38a4:	ed 91       	ld	r30, X+
    38a6:	fc 91       	ld	r31, X
    38a8:	01 90       	ld	r0, Z+
    38aa:	f0 81       	ld	r31, Z
    38ac:	e0 2d       	mov	r30, r0
    38ae:	c6 01       	movw	r24, r12
    38b0:	09 95       	icall
    38b2:	89 2b       	or	r24, r25
    38b4:	79 f7       	brne	.-34     	; 0x3894 <Print::write(unsigned char const*, unsigned int)+0x20>
    38b6:	c5 01       	movw	r24, r10
    38b8:	df 91       	pop	r29
    38ba:	cf 91       	pop	r28
    38bc:	1f 91       	pop	r17
    38be:	0f 91       	pop	r16
    38c0:	ff 90       	pop	r15
    38c2:	ef 90       	pop	r14
    38c4:	df 90       	pop	r13
    38c6:	cf 90       	pop	r12
    38c8:	bf 90       	pop	r11
    38ca:	af 90       	pop	r10
    38cc:	08 95       	ret

000038ce <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    38ce:	fb 01       	movw	r30, r22
    38d0:	01 90       	ld	r0, Z+
    38d2:	00 20       	and	r0, r0
    38d4:	e9 f7       	brne	.-6      	; 0x38d0 <Print::write(char const*) [clone .part.2]+0x2>
    38d6:	31 97       	sbiw	r30, 0x01	; 1
    38d8:	af 01       	movw	r20, r30
    38da:	46 1b       	sub	r20, r22
    38dc:	57 0b       	sbc	r21, r23
    38de:	dc 01       	movw	r26, r24
    38e0:	ed 91       	ld	r30, X+
    38e2:	fc 91       	ld	r31, X
    38e4:	02 80       	ldd	r0, Z+2	; 0x02
    38e6:	f3 81       	ldd	r31, Z+3	; 0x03
    38e8:	e0 2d       	mov	r30, r0
    38ea:	09 94       	ijmp

000038ec <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    38ec:	ef 92       	push	r14
    38ee:	ff 92       	push	r15
    38f0:	0f 93       	push	r16
    38f2:	1f 93       	push	r17
    38f4:	cf 93       	push	r28
    38f6:	df 93       	push	r29
    38f8:	8c 01       	movw	r16, r24
    38fa:	7b 01       	movw	r14, r22
    38fc:	d0 e0       	ldi	r29, 0x00	; 0
    38fe:	c0 e0       	ldi	r28, 0x00	; 0
    3900:	f7 01       	movw	r30, r14
    3902:	ec 0f       	add	r30, r28
    3904:	fd 1f       	adc	r31, r29
    3906:	64 91       	lpm	r22, Z
    3908:	66 23       	and	r22, r22
    390a:	61 f0       	breq	.+24     	; 0x3924 <Print::print(__FlashStringHelper const*)+0x38>
    390c:	d8 01       	movw	r26, r16
    390e:	ed 91       	ld	r30, X+
    3910:	fc 91       	ld	r31, X
    3912:	01 90       	ld	r0, Z+
    3914:	f0 81       	ld	r31, Z
    3916:	e0 2d       	mov	r30, r0
    3918:	c8 01       	movw	r24, r16
    391a:	09 95       	icall
    391c:	89 2b       	or	r24, r25
    391e:	11 f0       	breq	.+4      	; 0x3924 <Print::print(__FlashStringHelper const*)+0x38>
    3920:	21 96       	adiw	r28, 0x01	; 1
    3922:	ee cf       	rjmp	.-36     	; 0x3900 <Print::print(__FlashStringHelper const*)+0x14>
    3924:	ce 01       	movw	r24, r28
    3926:	df 91       	pop	r29
    3928:	cf 91       	pop	r28
    392a:	1f 91       	pop	r17
    392c:	0f 91       	pop	r16
    392e:	ff 90       	pop	r15
    3930:	ef 90       	pop	r14
    3932:	08 95       	ret

00003934 <Print::print(char const*)>:
_ZN5Print5writeEPKc():
    3934:	61 15       	cp	r22, r1
    3936:	71 05       	cpc	r23, r1
    3938:	11 f0       	breq	.+4      	; 0x393e <Print::print(char const*)+0xa>
    393a:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    393e:	90 e0       	ldi	r25, 0x00	; 0
    3940:	80 e0       	ldi	r24, 0x00	; 0
    3942:	08 95       	ret

00003944 <Print::print(char)>:
_ZN5Print5printEc():
    3944:	dc 01       	movw	r26, r24
    3946:	ed 91       	ld	r30, X+
    3948:	fc 91       	ld	r31, X
    394a:	01 90       	ld	r0, Z+
    394c:	f0 81       	ld	r31, Z
    394e:	e0 2d       	mov	r30, r0
    3950:	09 94       	ijmp

00003952 <Print::println()>:
_ZN5Print5writeEPKc():
    3952:	62 e5       	ldi	r22, 0x52	; 82
    3954:	75 e0       	ldi	r23, 0x05	; 5
    3956:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <Print::write(char const*) [clone .part.2]>

0000395a <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
    395a:	0f 93       	push	r16
    395c:	1f 93       	push	r17
    395e:	cf 93       	push	r28
    3960:	df 93       	push	r29
    3962:	ec 01       	movw	r28, r24
    3964:	0e 94 76 1c 	call	0x38ec	; 0x38ec <Print::print(__FlashStringHelper const*)>
    3968:	8c 01       	movw	r16, r24
    396a:	ce 01       	movw	r24, r28
    396c:	0e 94 a9 1c 	call	0x3952	; 0x3952 <Print::println()>
    3970:	80 0f       	add	r24, r16
    3972:	91 1f       	adc	r25, r17
    3974:	df 91       	pop	r29
    3976:	cf 91       	pop	r28
    3978:	1f 91       	pop	r17
    397a:	0f 91       	pop	r16
    397c:	08 95       	ret

0000397e <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    397e:	0f 93       	push	r16
    3980:	1f 93       	push	r17
    3982:	cf 93       	push	r28
    3984:	df 93       	push	r29
    3986:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    3988:	d0 e0       	ldi	r29, 0x00	; 0
    398a:	c0 e0       	ldi	r28, 0x00	; 0
    398c:	61 15       	cp	r22, r1
    398e:	71 05       	cpc	r23, r1
    3990:	19 f0       	breq	.+6      	; 0x3998 <Print::println(char const*)+0x1a>
    3992:	0e 94 67 1c 	call	0x38ce	; 0x38ce <Print::write(char const*) [clone .part.2]>
    3996:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    3998:	c8 01       	movw	r24, r16
    399a:	0e 94 a9 1c 	call	0x3952	; 0x3952 <Print::println()>
    399e:	8c 0f       	add	r24, r28
    39a0:	9d 1f       	adc	r25, r29
    39a2:	df 91       	pop	r29
    39a4:	cf 91       	pop	r28
    39a6:	1f 91       	pop	r17
    39a8:	0f 91       	pop	r16
    39aa:	08 95       	ret

000039ac <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    39ac:	8f 92       	push	r8
    39ae:	9f 92       	push	r9
    39b0:	af 92       	push	r10
    39b2:	bf 92       	push	r11
    39b4:	ef 92       	push	r14
    39b6:	ff 92       	push	r15
    39b8:	0f 93       	push	r16
    39ba:	1f 93       	push	r17
    39bc:	cf 93       	push	r28
    39be:	df 93       	push	r29
    39c0:	cd b7       	in	r28, 0x3d	; 61
    39c2:	de b7       	in	r29, 0x3e	; 62
    39c4:	a1 97       	sbiw	r28, 0x21	; 33
    39c6:	0f b6       	in	r0, 0x3f	; 63
    39c8:	f8 94       	cli
    39ca:	de bf       	out	0x3e, r29	; 62
    39cc:	0f be       	out	0x3f, r0	; 63
    39ce:	cd bf       	out	0x3d, r28	; 61
    39d0:	7c 01       	movw	r14, r24
    39d2:	fa 01       	movw	r30, r20
    39d4:	cb 01       	movw	r24, r22
    39d6:	19 a2       	std	Y+33, r1	; 0x21
    39d8:	22 30       	cpi	r18, 0x02	; 2
    39da:	08 f4       	brcc	.+2      	; 0x39de <Print::printNumber(unsigned long, unsigned char)+0x32>
    39dc:	2a e0       	ldi	r18, 0x0A	; 10
    39de:	8e 01       	movw	r16, r28
    39e0:	0f 5d       	subi	r16, 0xDF	; 223
    39e2:	1f 4f       	sbci	r17, 0xFF	; 255
    39e4:	82 2e       	mov	r8, r18
    39e6:	91 2c       	mov	r9, r1
    39e8:	b1 2c       	mov	r11, r1
    39ea:	a1 2c       	mov	r10, r1
    39ec:	bf 01       	movw	r22, r30
    39ee:	a5 01       	movw	r20, r10
    39f0:	94 01       	movw	r18, r8
    39f2:	0e 94 19 21 	call	0x4232	; 0x4232 <__udivmodsi4>
    39f6:	f9 01       	movw	r30, r18
    39f8:	ca 01       	movw	r24, r20
    39fa:	6a 30       	cpi	r22, 0x0A	; 10
    39fc:	0c f5       	brge	.+66     	; 0x3a40 <Print::printNumber(unsigned long, unsigned char)+0x94>
    39fe:	60 5d       	subi	r22, 0xD0	; 208
    3a00:	d8 01       	movw	r26, r16
    3a02:	6e 93       	st	-X, r22
    3a04:	8d 01       	movw	r16, r26
    3a06:	23 2b       	or	r18, r19
    3a08:	24 2b       	or	r18, r20
    3a0a:	25 2b       	or	r18, r21
    3a0c:	79 f7       	brne	.-34     	; 0x39ec <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    3a0e:	90 e0       	ldi	r25, 0x00	; 0
    3a10:	80 e0       	ldi	r24, 0x00	; 0
    3a12:	10 97       	sbiw	r26, 0x00	; 0
    3a14:	21 f0       	breq	.+8      	; 0x3a1e <Print::printNumber(unsigned long, unsigned char)+0x72>
    3a16:	bd 01       	movw	r22, r26
    3a18:	c7 01       	movw	r24, r14
    3a1a:	0e 94 67 1c 	call	0x38ce	; 0x38ce <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    3a1e:	a1 96       	adiw	r28, 0x21	; 33
    3a20:	0f b6       	in	r0, 0x3f	; 63
    3a22:	f8 94       	cli
    3a24:	de bf       	out	0x3e, r29	; 62
    3a26:	0f be       	out	0x3f, r0	; 63
    3a28:	cd bf       	out	0x3d, r28	; 61
    3a2a:	df 91       	pop	r29
    3a2c:	cf 91       	pop	r28
    3a2e:	1f 91       	pop	r17
    3a30:	0f 91       	pop	r16
    3a32:	ff 90       	pop	r15
    3a34:	ef 90       	pop	r14
    3a36:	bf 90       	pop	r11
    3a38:	af 90       	pop	r10
    3a3a:	9f 90       	pop	r9
    3a3c:	8f 90       	pop	r8
    3a3e:	08 95       	ret
    3a40:	69 5c       	subi	r22, 0xC9	; 201
    3a42:	de cf       	rjmp	.-68     	; 0x3a00 <Print::printNumber(unsigned long, unsigned char)+0x54>

00003a44 <Print::print(long, int)>:
_ZN5Print5printEli():
    3a44:	cf 92       	push	r12
    3a46:	df 92       	push	r13
    3a48:	ef 92       	push	r14
    3a4a:	ff 92       	push	r15
    3a4c:	0f 93       	push	r16
    3a4e:	1f 93       	push	r17
    3a50:	cf 93       	push	r28
    3a52:	df 93       	push	r29
    3a54:	21 15       	cp	r18, r1
    3a56:	31 05       	cpc	r19, r1
    3a58:	81 f4       	brne	.+32     	; 0x3a7a <Print::print(long, int)+0x36>
    3a5a:	dc 01       	movw	r26, r24
    3a5c:	ed 91       	ld	r30, X+
    3a5e:	fc 91       	ld	r31, X
    3a60:	01 90       	ld	r0, Z+
    3a62:	f0 81       	ld	r31, Z
    3a64:	e0 2d       	mov	r30, r0
    3a66:	64 2f       	mov	r22, r20
    3a68:	df 91       	pop	r29
    3a6a:	cf 91       	pop	r28
    3a6c:	1f 91       	pop	r17
    3a6e:	0f 91       	pop	r16
    3a70:	ff 90       	pop	r15
    3a72:	ef 90       	pop	r14
    3a74:	df 90       	pop	r13
    3a76:	cf 90       	pop	r12
    3a78:	09 94       	ijmp
    3a7a:	2a 30       	cpi	r18, 0x0A	; 10
    3a7c:	31 05       	cpc	r19, r1
    3a7e:	01 f5       	brne	.+64     	; 0x3ac0 <Print::print(long, int)+0x7c>
    3a80:	2a e0       	ldi	r18, 0x0A	; 10
    3a82:	77 ff       	sbrs	r23, 7
    3a84:	1d c0       	rjmp	.+58     	; 0x3ac0 <Print::print(long, int)+0x7c>
    3a86:	6a 01       	movw	r12, r20
    3a88:	7b 01       	movw	r14, r22
    3a8a:	ec 01       	movw	r28, r24
    3a8c:	6d e2       	ldi	r22, 0x2D	; 45
    3a8e:	0e 94 a2 1c 	call	0x3944	; 0x3944 <Print::print(char)>
    3a92:	8c 01       	movw	r16, r24
    3a94:	44 27       	eor	r20, r20
    3a96:	55 27       	eor	r21, r21
    3a98:	ba 01       	movw	r22, r20
    3a9a:	4c 19       	sub	r20, r12
    3a9c:	5d 09       	sbc	r21, r13
    3a9e:	6e 09       	sbc	r22, r14
    3aa0:	7f 09       	sbc	r23, r15
    3aa2:	2a e0       	ldi	r18, 0x0A	; 10
    3aa4:	ce 01       	movw	r24, r28
    3aa6:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <Print::printNumber(unsigned long, unsigned char)>
    3aaa:	80 0f       	add	r24, r16
    3aac:	91 1f       	adc	r25, r17
    3aae:	df 91       	pop	r29
    3ab0:	cf 91       	pop	r28
    3ab2:	1f 91       	pop	r17
    3ab4:	0f 91       	pop	r16
    3ab6:	ff 90       	pop	r15
    3ab8:	ef 90       	pop	r14
    3aba:	df 90       	pop	r13
    3abc:	cf 90       	pop	r12
    3abe:	08 95       	ret
    3ac0:	df 91       	pop	r29
    3ac2:	cf 91       	pop	r28
    3ac4:	1f 91       	pop	r17
    3ac6:	0f 91       	pop	r16
    3ac8:	ff 90       	pop	r15
    3aca:	ef 90       	pop	r14
    3acc:	df 90       	pop	r13
    3ace:	cf 90       	pop	r12
    3ad0:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <Print::printNumber(unsigned long, unsigned char)>

00003ad4 <Print::print(int, int)>:
_ZN5Print5printEii():
    3ad4:	9a 01       	movw	r18, r20
    3ad6:	ab 01       	movw	r20, r22
    3ad8:	77 0f       	add	r23, r23
    3ada:	66 0b       	sbc	r22, r22
    3adc:	77 0b       	sbc	r23, r23
    3ade:	0c 94 22 1d 	jmp	0x3a44	; 0x3a44 <Print::print(long, int)>

00003ae2 <Print::println(int, int)>:
_ZN5Print7printlnEii():
    3ae2:	0f 93       	push	r16
    3ae4:	1f 93       	push	r17
    3ae6:	cf 93       	push	r28
    3ae8:	df 93       	push	r29
    3aea:	ec 01       	movw	r28, r24
    3aec:	0e 94 6a 1d 	call	0x3ad4	; 0x3ad4 <Print::print(int, int)>
    3af0:	8c 01       	movw	r16, r24
    3af2:	ce 01       	movw	r24, r28
    3af4:	0e 94 a9 1c 	call	0x3952	; 0x3952 <Print::println()>
    3af8:	80 0f       	add	r24, r16
    3afa:	91 1f       	adc	r25, r17
    3afc:	df 91       	pop	r29
    3afe:	cf 91       	pop	r28
    3b00:	1f 91       	pop	r17
    3b02:	0f 91       	pop	r16
    3b04:	08 95       	ret

00003b06 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    3b06:	21 15       	cp	r18, r1
    3b08:	31 05       	cpc	r19, r1
    3b0a:	41 f4       	brne	.+16     	; 0x3b1c <Print::print(unsigned long, int)+0x16>
    3b0c:	dc 01       	movw	r26, r24
    3b0e:	ed 91       	ld	r30, X+
    3b10:	fc 91       	ld	r31, X
    3b12:	01 90       	ld	r0, Z+
    3b14:	f0 81       	ld	r31, Z
    3b16:	e0 2d       	mov	r30, r0
    3b18:	64 2f       	mov	r22, r20
    3b1a:	09 94       	ijmp
    3b1c:	0c 94 d6 1c 	jmp	0x39ac	; 0x39ac <Print::printNumber(unsigned long, unsigned char)>

00003b20 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
    3b20:	9a 01       	movw	r18, r20
    3b22:	46 2f       	mov	r20, r22
    3b24:	50 e0       	ldi	r21, 0x00	; 0
    3b26:	70 e0       	ldi	r23, 0x00	; 0
    3b28:	60 e0       	ldi	r22, 0x00	; 0
    3b2a:	0c 94 83 1d 	jmp	0x3b06	; 0x3b06 <Print::print(unsigned long, int)>

00003b2e <Print::println(unsigned char, int)>:
_ZN5Print7printlnEhi():
    3b2e:	0f 93       	push	r16
    3b30:	1f 93       	push	r17
    3b32:	cf 93       	push	r28
    3b34:	df 93       	push	r29
    3b36:	ec 01       	movw	r28, r24
    3b38:	0e 94 90 1d 	call	0x3b20	; 0x3b20 <Print::print(unsigned char, int)>
    3b3c:	8c 01       	movw	r16, r24
    3b3e:	ce 01       	movw	r24, r28
    3b40:	0e 94 a9 1c 	call	0x3952	; 0x3952 <Print::println()>
    3b44:	80 0f       	add	r24, r16
    3b46:	91 1f       	adc	r25, r17
    3b48:	df 91       	pop	r29
    3b4a:	cf 91       	pop	r28
    3b4c:	1f 91       	pop	r17
    3b4e:	0f 91       	pop	r16
    3b50:	08 95       	ret

00003b52 <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
    3b52:	9a 01       	movw	r18, r20
    3b54:	ab 01       	movw	r20, r22
    3b56:	70 e0       	ldi	r23, 0x00	; 0
    3b58:	60 e0       	ldi	r22, 0x00	; 0
    3b5a:	0c 94 83 1d 	jmp	0x3b06	; 0x3b06 <Print::print(unsigned long, int)>

00003b5e <Print::println(unsigned long, int)>:
_ZN5Print7printlnEmi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:181
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    3b5e:	0f 93       	push	r16
    3b60:	1f 93       	push	r17
    3b62:	cf 93       	push	r28
    3b64:	df 93       	push	r29
    3b66:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:182
  size_t n = print(num, base);
    3b68:	0e 94 83 1d 	call	0x3b06	; 0x3b06 <Print::print(unsigned long, int)>
    3b6c:	8c 01       	movw	r16, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:183
  n += println();
    3b6e:	ce 01       	movw	r24, r28
    3b70:	0e 94 a9 1c 	call	0x3952	; 0x3952 <Print::println()>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
  return n;
}
    3b74:	80 0f       	add	r24, r16
    3b76:	91 1f       	adc	r25, r17
    3b78:	df 91       	pop	r29
    3b7a:	cf 91       	pop	r28
    3b7c:	1f 91       	pop	r17
    3b7e:	0f 91       	pop	r16
    3b80:	08 95       	ret

00003b82 <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3b82:	2f 92       	push	r2
    3b84:	3f 92       	push	r3
    3b86:	4f 92       	push	r4
    3b88:	5f 92       	push	r5
    3b8a:	6f 92       	push	r6
    3b8c:	7f 92       	push	r7
    3b8e:	8f 92       	push	r8
    3b90:	9f 92       	push	r9
    3b92:	af 92       	push	r10
    3b94:	bf 92       	push	r11
    3b96:	cf 92       	push	r12
    3b98:	df 92       	push	r13
    3b9a:	ef 92       	push	r14
    3b9c:	ff 92       	push	r15
    3b9e:	1f 93       	push	r17
    3ba0:	cf 93       	push	r28
    3ba2:	df 93       	push	r29
    3ba4:	ec 01       	movw	r28, r24
    3ba6:	6a 01       	movw	r12, r20
    3ba8:	7b 01       	movw	r14, r22
    3baa:	72 2e       	mov	r7, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    3bac:	ab 01       	movw	r20, r22
    3bae:	96 01       	movw	r18, r12
    3bb0:	cb 01       	movw	r24, r22
    3bb2:	b6 01       	movw	r22, r12
    3bb4:	0e 94 00 21 	call	0x4200	; 0x4200 <__unordsf2>
_ZN5Print5writeEPKc():
    3bb8:	65 e5       	ldi	r22, 0x55	; 85
    3bba:	75 e0       	ldi	r23, 0x05	; 5
_ZN5Print10printFloatEdh():
    3bbc:	81 11       	cpse	r24, r1
    3bbe:	26 c0       	rjmp	.+76     	; 0x3c0c <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    3bc0:	46 01       	movw	r8, r12
    3bc2:	57 01       	movw	r10, r14
    3bc4:	e8 94       	clt
    3bc6:	b7 f8       	bld	r11, 7
    3bc8:	2f ef       	ldi	r18, 0xFF	; 255
    3bca:	3f ef       	ldi	r19, 0xFF	; 255
    3bcc:	4f e7       	ldi	r20, 0x7F	; 127
    3bce:	5f e7       	ldi	r21, 0x7F	; 127
    3bd0:	c5 01       	movw	r24, r10
    3bd2:	b4 01       	movw	r22, r8
    3bd4:	0e 94 00 21 	call	0x4200	; 0x4200 <__unordsf2>
    3bd8:	81 11       	cpse	r24, r1
    3bda:	0c c0       	rjmp	.+24     	; 0x3bf4 <Print::printFloat(double, unsigned char)+0x72>
    3bdc:	2f ef       	ldi	r18, 0xFF	; 255
    3bde:	3f ef       	ldi	r19, 0xFF	; 255
    3be0:	4f e7       	ldi	r20, 0x7F	; 127
    3be2:	5f e7       	ldi	r21, 0x7F	; 127
    3be4:	c5 01       	movw	r24, r10
    3be6:	b4 01       	movw	r22, r8
    3be8:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__cmpsf2>
_ZN5Print5writeEPKc():
    3bec:	69 e5       	ldi	r22, 0x59	; 89
    3bee:	75 e0       	ldi	r23, 0x05	; 5
_ZN5Print10printFloatEdh():
    3bf0:	18 16       	cp	r1, r24
    3bf2:	64 f0       	brlt	.+24     	; 0x3c0c <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3bf4:	2f ef       	ldi	r18, 0xFF	; 255
    3bf6:	3f ef       	ldi	r19, 0xFF	; 255
    3bf8:	4f e7       	ldi	r20, 0x7F	; 127
    3bfa:	5f e4       	ldi	r21, 0x4F	; 79
    3bfc:	c7 01       	movw	r24, r14
    3bfe:	b6 01       	movw	r22, r12
    3c00:	0e 94 8e 20 	call	0x411c	; 0x411c <__gesf2>
    3c04:	18 16       	cp	r1, r24
    3c06:	b4 f4       	brge	.+44     	; 0x3c34 <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
    3c08:	6d e5       	ldi	r22, 0x5D	; 93
    3c0a:	75 e0       	ldi	r23, 0x05	; 5
    3c0c:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3c0e:	df 91       	pop	r29
    3c10:	cf 91       	pop	r28
    3c12:	1f 91       	pop	r17
    3c14:	ff 90       	pop	r15
    3c16:	ef 90       	pop	r14
    3c18:	df 90       	pop	r13
    3c1a:	cf 90       	pop	r12
    3c1c:	bf 90       	pop	r11
    3c1e:	af 90       	pop	r10
    3c20:	9f 90       	pop	r9
    3c22:	8f 90       	pop	r8
    3c24:	7f 90       	pop	r7
    3c26:	6f 90       	pop	r6
    3c28:	5f 90       	pop	r5
    3c2a:	4f 90       	pop	r4
    3c2c:	3f 90       	pop	r3
    3c2e:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
    3c30:	0c 94 67 1c 	jmp	0x38ce	; 0x38ce <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    3c34:	2f ef       	ldi	r18, 0xFF	; 255
    3c36:	3f ef       	ldi	r19, 0xFF	; 255
    3c38:	4f e7       	ldi	r20, 0x7F	; 127
    3c3a:	5f ec       	ldi	r21, 0xCF	; 207
    3c3c:	c7 01       	movw	r24, r14
    3c3e:	b6 01       	movw	r22, r12
    3c40:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__cmpsf2>
    3c44:	87 fd       	sbrc	r24, 7
    3c46:	e0 cf       	rjmp	.-64     	; 0x3c08 <Print::printFloat(double, unsigned char)+0x86>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    3c48:	20 e0       	ldi	r18, 0x00	; 0
    3c4a:	30 e0       	ldi	r19, 0x00	; 0
    3c4c:	a9 01       	movw	r20, r18
    3c4e:	c7 01       	movw	r24, r14
    3c50:	b6 01       	movw	r22, r12
    3c52:	0e 94 36 1f 	call	0x3e6c	; 0x3e6c <__cmpsf2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    3c56:	31 2c       	mov	r3, r1
    3c58:	21 2c       	mov	r2, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    3c5a:	87 ff       	sbrs	r24, 7
    3c5c:	09 c0       	rjmp	.+18     	; 0x3c70 <Print::printFloat(double, unsigned char)+0xee>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
    3c5e:	6d e2       	ldi	r22, 0x2D	; 45
    3c60:	ce 01       	movw	r24, r28
    3c62:	0e 94 a2 1c 	call	0x3944	; 0x3944 <Print::print(char)>
    3c66:	1c 01       	movw	r2, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
    3c68:	f7 fa       	bst	r15, 7
    3c6a:	f0 94       	com	r15
    3c6c:	f7 f8       	bld	r15, 7
    3c6e:	f0 94       	com	r15
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3c70:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    3c72:	60 e0       	ldi	r22, 0x00	; 0
    3c74:	70 e0       	ldi	r23, 0x00	; 0
    3c76:	80 e0       	ldi	r24, 0x00	; 0
    3c78:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    3c7a:	71 16       	cp	r7, r17
    3c7c:	41 f0       	breq	.+16     	; 0x3c8e <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    3c7e:	20 e0       	ldi	r18, 0x00	; 0
    3c80:	30 e0       	ldi	r19, 0x00	; 0
    3c82:	40 e2       	ldi	r20, 0x20	; 32
    3c84:	51 e4       	ldi	r21, 0x41	; 65
    3c86:	0e 94 3b 1f 	call	0x3e76	; 0x3e76 <__divsf3>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3c8a:	1f 5f       	subi	r17, 0xFF	; 255
    3c8c:	f6 cf       	rjmp	.-20     	; 0x3c7a <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    3c8e:	a7 01       	movw	r20, r14
    3c90:	96 01       	movw	r18, r12
    3c92:	0e 94 ca 1e 	call	0x3d94	; 0x3d94 <__addsf3>
    3c96:	2b 01       	movw	r4, r22
    3c98:	3c 01       	movw	r6, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3c9a:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__fixunssfsi>
    3c9e:	4b 01       	movw	r8, r22
    3ca0:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    3ca2:	2a e0       	ldi	r18, 0x0A	; 10
    3ca4:	bc 01       	movw	r22, r24
    3ca6:	a4 01       	movw	r20, r8
    3ca8:	ce 01       	movw	r24, r28
    3caa:	0e 94 d6 1c 	call	0x39ac	; 0x39ac <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3cae:	7c 01       	movw	r14, r24
    3cb0:	e2 0c       	add	r14, r2
    3cb2:	f3 1c       	adc	r15, r3
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    3cb4:	11 23       	and	r17, r17
    3cb6:	b1 f1       	breq	.+108    	; 0x3d24 <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    3cb8:	c5 01       	movw	r24, r10
    3cba:	b4 01       	movw	r22, r8
    3cbc:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__floatunsisf>
    3cc0:	9b 01       	movw	r18, r22
    3cc2:	ac 01       	movw	r20, r24
    3cc4:	c3 01       	movw	r24, r6
    3cc6:	b2 01       	movw	r22, r4
    3cc8:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__subsf3>
    3ccc:	4b 01       	movw	r8, r22
    3cce:	5c 01       	movw	r10, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    3cd0:	6e e2       	ldi	r22, 0x2E	; 46
    3cd2:	ce 01       	movw	r24, r28
    3cd4:	0e 94 a2 1c 	call	0x3944	; 0x3944 <Print::print(char)>
    3cd8:	e8 0e       	add	r14, r24
    3cda:	f9 1e       	adc	r15, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    3cdc:	11 50       	subi	r17, 0x01	; 1
    3cde:	10 f1       	brcs	.+68     	; 0x3d24 <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    3ce0:	20 e0       	ldi	r18, 0x00	; 0
    3ce2:	30 e0       	ldi	r19, 0x00	; 0
    3ce4:	40 e2       	ldi	r20, 0x20	; 32
    3ce6:	51 e4       	ldi	r21, 0x41	; 65
    3ce8:	c5 01       	movw	r24, r10
    3cea:	b4 01       	movw	r22, r8
    3cec:	0e 94 93 20 	call	0x4126	; 0x4126 <__mulsf3>
    3cf0:	2b 01       	movw	r4, r22
    3cf2:	3c 01       	movw	r6, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    3cf4:	0e 94 ad 1f 	call	0x3f5a	; 0x3f5a <__fixunssfsi>
    3cf8:	4b 01       	movw	r8, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    3cfa:	4a e0       	ldi	r20, 0x0A	; 10
    3cfc:	50 e0       	ldi	r21, 0x00	; 0
    3cfe:	ce 01       	movw	r24, r28
    3d00:	0e 94 a9 1d 	call	0x3b52	; 0x3b52 <Print::print(unsigned int, int)>
    3d04:	e8 0e       	add	r14, r24
    3d06:	f9 1e       	adc	r15, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    3d08:	b4 01       	movw	r22, r8
    3d0a:	90 e0       	ldi	r25, 0x00	; 0
    3d0c:	80 e0       	ldi	r24, 0x00	; 0
    3d0e:	0e 94 dc 1f 	call	0x3fb8	; 0x3fb8 <__floatunsisf>
    3d12:	9b 01       	movw	r18, r22
    3d14:	ac 01       	movw	r20, r24
    3d16:	c3 01       	movw	r24, r6
    3d18:	b2 01       	movw	r22, r4
    3d1a:	0e 94 c9 1e 	call	0x3d92	; 0x3d92 <__subsf3>
    3d1e:	4b 01       	movw	r8, r22
    3d20:	5c 01       	movw	r10, r24
    3d22:	dc cf       	rjmp	.-72     	; 0x3cdc <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    3d24:	c7 01       	movw	r24, r14
    3d26:	df 91       	pop	r29
    3d28:	cf 91       	pop	r28
    3d2a:	1f 91       	pop	r17
    3d2c:	ff 90       	pop	r15
    3d2e:	ef 90       	pop	r14
    3d30:	df 90       	pop	r13
    3d32:	cf 90       	pop	r12
    3d34:	bf 90       	pop	r11
    3d36:	af 90       	pop	r10
    3d38:	9f 90       	pop	r9
    3d3a:	8f 90       	pop	r8
    3d3c:	7f 90       	pop	r7
    3d3e:	6f 90       	pop	r6
    3d40:	5f 90       	pop	r5
    3d42:	4f 90       	pop	r4
    3d44:	3f 90       	pop	r3
    3d46:	2f 90       	pop	r2
    3d48:	08 95       	ret

00003d4a <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3d4a:	0c 94 c1 1d 	jmp	0x3b82	; 0x3b82 <Print::printFloat(double, unsigned char)>

00003d4e <Print::println(double, int)>:
_ZN5Print7printlnEdi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:188
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    3d4e:	0f 93       	push	r16
    3d50:	1f 93       	push	r17
    3d52:	cf 93       	push	r28
    3d54:	df 93       	push	r29
    3d56:	ec 01       	movw	r28, r24
_ZN5Print5printEdi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3d58:	0e 94 c1 1d 	call	0x3b82	; 0x3b82 <Print::printFloat(double, unsigned char)>
    3d5c:	8c 01       	movw	r16, r24
_ZN5Print7printlnEdi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:190
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    3d5e:	ce 01       	movw	r24, r28
    3d60:	0e 94 a9 1c 	call	0x3952	; 0x3952 <Print::println()>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:192
  return n;
}
    3d64:	80 0f       	add	r24, r16
    3d66:	91 1f       	adc	r25, r17
    3d68:	df 91       	pop	r29
    3d6a:	cf 91       	pop	r28
    3d6c:	1f 91       	pop	r17
    3d6e:	0f 91       	pop	r16
    3d70:	08 95       	ret

00003d72 <initVariant>:
initVariant():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    3d72:	08 95       	ret

00003d74 <main>:
main():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    3d74:	0e 94 35 19 	call	0x326a	; 0x326a <init>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    3d78:	0e 94 b9 1e 	call	0x3d72	; 0x3d72 <initVariant>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    3d7c:	0e 94 23 0b 	call	0x1646	; 0x1646 <setup>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    3d80:	c8 ea       	ldi	r28, 0xA8	; 168
    3d82:	da e1       	ldi	r29, 0x1A	; 26
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    3d84:	0e 94 df 0f 	call	0x1fbe	; 0x1fbe <loop>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    3d88:	20 97       	sbiw	r28, 0x00	; 0
    3d8a:	e1 f3       	breq	.-8      	; 0x3d84 <main+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    3d8c:	0e 94 a8 1a 	call	0x3550	; 0x3550 <serialEventRun()>
    3d90:	f9 cf       	rjmp	.-14     	; 0x3d84 <main+0x10>

00003d92 <__subsf3>:
__subsf3():
    3d92:	50 58       	subi	r21, 0x80	; 128

00003d94 <__addsf3>:
    3d94:	bb 27       	eor	r27, r27
    3d96:	aa 27       	eor	r26, r26
    3d98:	0e 94 e1 1e 	call	0x3dc2	; 0x3dc2 <__addsf3x>
    3d9c:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <__fp_round>
__addsf3():
    3da0:	0e 94 46 20 	call	0x408c	; 0x408c <__fp_pscA>
    3da4:	38 f0       	brcs	.+14     	; 0x3db4 <__addsf3+0x20>
    3da6:	0e 94 4d 20 	call	0x409a	; 0x409a <__fp_pscB>
    3daa:	20 f0       	brcs	.+8      	; 0x3db4 <__addsf3+0x20>
    3dac:	39 f4       	brne	.+14     	; 0x3dbc <__addsf3+0x28>
    3dae:	9f 3f       	cpi	r25, 0xFF	; 255
    3db0:	19 f4       	brne	.+6      	; 0x3db8 <__addsf3+0x24>
    3db2:	26 f4       	brtc	.+8      	; 0x3dbc <__addsf3+0x28>
    3db4:	0c 94 43 20 	jmp	0x4086	; 0x4086 <__fp_nan>
    3db8:	0e f4       	brtc	.+2      	; 0x3dbc <__addsf3+0x28>
    3dba:	e0 95       	com	r30
    3dbc:	e7 fb       	bst	r30, 7
    3dbe:	0c 94 3d 20 	jmp	0x407a	; 0x407a <__fp_inf>

00003dc2 <__addsf3x>:
__addsf3x():
    3dc2:	e9 2f       	mov	r30, r25
    3dc4:	0e 94 65 20 	call	0x40ca	; 0x40ca <__fp_split3>
    3dc8:	58 f3       	brcs	.-42     	; 0x3da0 <__addsf3+0xc>
    3dca:	ba 17       	cp	r27, r26
    3dcc:	62 07       	cpc	r22, r18
    3dce:	73 07       	cpc	r23, r19
    3dd0:	84 07       	cpc	r24, r20
    3dd2:	95 07       	cpc	r25, r21
    3dd4:	20 f0       	brcs	.+8      	; 0x3dde <__addsf3x+0x1c>
    3dd6:	79 f4       	brne	.+30     	; 0x3df6 <__addsf3x+0x34>
    3dd8:	a6 f5       	brtc	.+104    	; 0x3e42 <__addsf3x+0x80>
    3dda:	0c 94 87 20 	jmp	0x410e	; 0x410e <__fp_zero>
    3dde:	0e f4       	brtc	.+2      	; 0x3de2 <__addsf3x+0x20>
    3de0:	e0 95       	com	r30
    3de2:	0b 2e       	mov	r0, r27
    3de4:	ba 2f       	mov	r27, r26
    3de6:	a0 2d       	mov	r26, r0
    3de8:	0b 01       	movw	r0, r22
    3dea:	b9 01       	movw	r22, r18
    3dec:	90 01       	movw	r18, r0
    3dee:	0c 01       	movw	r0, r24
    3df0:	ca 01       	movw	r24, r20
    3df2:	a0 01       	movw	r20, r0
    3df4:	11 24       	eor	r1, r1
    3df6:	ff 27       	eor	r31, r31
    3df8:	59 1b       	sub	r21, r25
    3dfa:	99 f0       	breq	.+38     	; 0x3e22 <__addsf3x+0x60>
    3dfc:	59 3f       	cpi	r21, 0xF9	; 249
    3dfe:	50 f4       	brcc	.+20     	; 0x3e14 <__addsf3x+0x52>
    3e00:	50 3e       	cpi	r21, 0xE0	; 224
    3e02:	68 f1       	brcs	.+90     	; 0x3e5e <__addsf3x+0x9c>
    3e04:	1a 16       	cp	r1, r26
    3e06:	f0 40       	sbci	r31, 0x00	; 0
    3e08:	a2 2f       	mov	r26, r18
    3e0a:	23 2f       	mov	r18, r19
    3e0c:	34 2f       	mov	r19, r20
    3e0e:	44 27       	eor	r20, r20
    3e10:	58 5f       	subi	r21, 0xF8	; 248
    3e12:	f3 cf       	rjmp	.-26     	; 0x3dfa <__addsf3x+0x38>
    3e14:	46 95       	lsr	r20
    3e16:	37 95       	ror	r19
    3e18:	27 95       	ror	r18
    3e1a:	a7 95       	ror	r26
    3e1c:	f0 40       	sbci	r31, 0x00	; 0
    3e1e:	53 95       	inc	r21
    3e20:	c9 f7       	brne	.-14     	; 0x3e14 <__addsf3x+0x52>
    3e22:	7e f4       	brtc	.+30     	; 0x3e42 <__addsf3x+0x80>
    3e24:	1f 16       	cp	r1, r31
    3e26:	ba 0b       	sbc	r27, r26
    3e28:	62 0b       	sbc	r22, r18
    3e2a:	73 0b       	sbc	r23, r19
    3e2c:	84 0b       	sbc	r24, r20
    3e2e:	ba f0       	brmi	.+46     	; 0x3e5e <__addsf3x+0x9c>
    3e30:	91 50       	subi	r25, 0x01	; 1
    3e32:	a1 f0       	breq	.+40     	; 0x3e5c <__addsf3x+0x9a>
    3e34:	ff 0f       	add	r31, r31
    3e36:	bb 1f       	adc	r27, r27
    3e38:	66 1f       	adc	r22, r22
    3e3a:	77 1f       	adc	r23, r23
    3e3c:	88 1f       	adc	r24, r24
    3e3e:	c2 f7       	brpl	.-16     	; 0x3e30 <__addsf3x+0x6e>
    3e40:	0e c0       	rjmp	.+28     	; 0x3e5e <__addsf3x+0x9c>
    3e42:	ba 0f       	add	r27, r26
    3e44:	62 1f       	adc	r22, r18
    3e46:	73 1f       	adc	r23, r19
    3e48:	84 1f       	adc	r24, r20
    3e4a:	48 f4       	brcc	.+18     	; 0x3e5e <__addsf3x+0x9c>
    3e4c:	87 95       	ror	r24
    3e4e:	77 95       	ror	r23
    3e50:	67 95       	ror	r22
    3e52:	b7 95       	ror	r27
    3e54:	f7 95       	ror	r31
    3e56:	9e 3f       	cpi	r25, 0xFE	; 254
    3e58:	08 f0       	brcs	.+2      	; 0x3e5c <__addsf3x+0x9a>
    3e5a:	b0 cf       	rjmp	.-160    	; 0x3dbc <__addsf3+0x28>
    3e5c:	93 95       	inc	r25
    3e5e:	88 0f       	add	r24, r24
    3e60:	08 f0       	brcs	.+2      	; 0x3e64 <__addsf3x+0xa2>
    3e62:	99 27       	eor	r25, r25
    3e64:	ee 0f       	add	r30, r30
    3e66:	97 95       	ror	r25
    3e68:	87 95       	ror	r24
    3e6a:	08 95       	ret

00003e6c <__cmpsf2>:
    3e6c:	0e 94 19 20 	call	0x4032	; 0x4032 <__fp_cmp>
    3e70:	08 f4       	brcc	.+2      	; 0x3e74 <__cmpsf2+0x8>
    3e72:	81 e0       	ldi	r24, 0x01	; 1
    3e74:	08 95       	ret

00003e76 <__divsf3>:
    3e76:	0e 94 4f 1f 	call	0x3e9e	; 0x3e9e <__divsf3x>
    3e7a:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <__fp_round>
    3e7e:	0e 94 4d 20 	call	0x409a	; 0x409a <__fp_pscB>
    3e82:	58 f0       	brcs	.+22     	; 0x3e9a <__divsf3+0x24>
    3e84:	0e 94 46 20 	call	0x408c	; 0x408c <__fp_pscA>
    3e88:	40 f0       	brcs	.+16     	; 0x3e9a <__divsf3+0x24>
    3e8a:	29 f4       	brne	.+10     	; 0x3e96 <__divsf3+0x20>
    3e8c:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    3e8e:	29 f0       	breq	.+10     	; 0x3e9a <__divsf3+0x24>
    3e90:	0c 94 3d 20 	jmp	0x407a	; 0x407a <__fp_inf>
    3e94:	51 11       	cpse	r21, r1
    3e96:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__fp_szero>
    3e9a:	0c 94 43 20 	jmp	0x4086	; 0x4086 <__fp_nan>

00003e9e <__divsf3x>:
__divsf3x():
    3e9e:	0e 94 65 20 	call	0x40ca	; 0x40ca <__fp_split3>
    3ea2:	68 f3       	brcs	.-38     	; 0x3e7e <__divsf3+0x8>

00003ea4 <__divsf3_pse>:
    3ea4:	99 23       	and	r25, r25
    3ea6:	b1 f3       	breq	.-20     	; 0x3e94 <__divsf3+0x1e>
    3ea8:	55 23       	and	r21, r21
    3eaa:	91 f3       	breq	.-28     	; 0x3e90 <__divsf3+0x1a>
    3eac:	95 1b       	sub	r25, r21
    3eae:	55 0b       	sbc	r21, r21
    3eb0:	bb 27       	eor	r27, r27
    3eb2:	aa 27       	eor	r26, r26
    3eb4:	62 17       	cp	r22, r18
    3eb6:	73 07       	cpc	r23, r19
    3eb8:	84 07       	cpc	r24, r20
    3eba:	38 f0       	brcs	.+14     	; 0x3eca <__divsf3_pse+0x26>
    3ebc:	9f 5f       	subi	r25, 0xFF	; 255
    3ebe:	5f 4f       	sbci	r21, 0xFF	; 255
    3ec0:	22 0f       	add	r18, r18
    3ec2:	33 1f       	adc	r19, r19
    3ec4:	44 1f       	adc	r20, r20
    3ec6:	aa 1f       	adc	r26, r26
    3ec8:	a9 f3       	breq	.-22     	; 0x3eb4 <__divsf3_pse+0x10>
    3eca:	35 d0       	rcall	.+106    	; 0x3f36 <__divsf3_pse+0x92>
    3ecc:	0e 2e       	mov	r0, r30
    3ece:	3a f0       	brmi	.+14     	; 0x3ede <__divsf3_pse+0x3a>
    3ed0:	e0 e8       	ldi	r30, 0x80	; 128
    3ed2:	32 d0       	rcall	.+100    	; 0x3f38 <__divsf3_pse+0x94>
    3ed4:	91 50       	subi	r25, 0x01	; 1
    3ed6:	50 40       	sbci	r21, 0x00	; 0
    3ed8:	e6 95       	lsr	r30
    3eda:	00 1c       	adc	r0, r0
    3edc:	ca f7       	brpl	.-14     	; 0x3ed0 <__divsf3_pse+0x2c>
    3ede:	2b d0       	rcall	.+86     	; 0x3f36 <__divsf3_pse+0x92>
    3ee0:	fe 2f       	mov	r31, r30
    3ee2:	29 d0       	rcall	.+82     	; 0x3f36 <__divsf3_pse+0x92>
    3ee4:	66 0f       	add	r22, r22
    3ee6:	77 1f       	adc	r23, r23
    3ee8:	88 1f       	adc	r24, r24
    3eea:	bb 1f       	adc	r27, r27
    3eec:	26 17       	cp	r18, r22
    3eee:	37 07       	cpc	r19, r23
    3ef0:	48 07       	cpc	r20, r24
    3ef2:	ab 07       	cpc	r26, r27
    3ef4:	b0 e8       	ldi	r27, 0x80	; 128
    3ef6:	09 f0       	breq	.+2      	; 0x3efa <__divsf3_pse+0x56>
    3ef8:	bb 0b       	sbc	r27, r27
    3efa:	80 2d       	mov	r24, r0
    3efc:	bf 01       	movw	r22, r30
    3efe:	ff 27       	eor	r31, r31
    3f00:	93 58       	subi	r25, 0x83	; 131
    3f02:	5f 4f       	sbci	r21, 0xFF	; 255
    3f04:	3a f0       	brmi	.+14     	; 0x3f14 <__divsf3_pse+0x70>
    3f06:	9e 3f       	cpi	r25, 0xFE	; 254
    3f08:	51 05       	cpc	r21, r1
    3f0a:	78 f0       	brcs	.+30     	; 0x3f2a <__divsf3_pse+0x86>
    3f0c:	0c 94 3d 20 	jmp	0x407a	; 0x407a <__fp_inf>
    3f10:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__fp_szero>
    3f14:	5f 3f       	cpi	r21, 0xFF	; 255
    3f16:	e4 f3       	brlt	.-8      	; 0x3f10 <__divsf3_pse+0x6c>
    3f18:	98 3e       	cpi	r25, 0xE8	; 232
    3f1a:	d4 f3       	brlt	.-12     	; 0x3f10 <__divsf3_pse+0x6c>
    3f1c:	86 95       	lsr	r24
    3f1e:	77 95       	ror	r23
    3f20:	67 95       	ror	r22
    3f22:	b7 95       	ror	r27
    3f24:	f7 95       	ror	r31
    3f26:	9f 5f       	subi	r25, 0xFF	; 255
    3f28:	c9 f7       	brne	.-14     	; 0x3f1c <__divsf3_pse+0x78>
    3f2a:	88 0f       	add	r24, r24
    3f2c:	91 1d       	adc	r25, r1
    3f2e:	96 95       	lsr	r25
    3f30:	87 95       	ror	r24
    3f32:	97 f9       	bld	r25, 7
    3f34:	08 95       	ret
    3f36:	e1 e0       	ldi	r30, 0x01	; 1
    3f38:	66 0f       	add	r22, r22
    3f3a:	77 1f       	adc	r23, r23
    3f3c:	88 1f       	adc	r24, r24
    3f3e:	bb 1f       	adc	r27, r27
    3f40:	62 17       	cp	r22, r18
    3f42:	73 07       	cpc	r23, r19
    3f44:	84 07       	cpc	r24, r20
    3f46:	ba 07       	cpc	r27, r26
    3f48:	20 f0       	brcs	.+8      	; 0x3f52 <__divsf3_pse+0xae>
    3f4a:	62 1b       	sub	r22, r18
    3f4c:	73 0b       	sbc	r23, r19
    3f4e:	84 0b       	sbc	r24, r20
    3f50:	ba 0b       	sbc	r27, r26
    3f52:	ee 1f       	adc	r30, r30
    3f54:	88 f7       	brcc	.-30     	; 0x3f38 <__divsf3_pse+0x94>
    3f56:	e0 95       	com	r30
    3f58:	08 95       	ret

00003f5a <__fixunssfsi>:
    3f5a:	0e 94 6d 20 	call	0x40da	; 0x40da <__fp_splitA>
    3f5e:	88 f0       	brcs	.+34     	; 0x3f82 <__fixunssfsi+0x28>
    3f60:	9f 57       	subi	r25, 0x7F	; 127
    3f62:	98 f0       	brcs	.+38     	; 0x3f8a <__fixunssfsi+0x30>
    3f64:	b9 2f       	mov	r27, r25
    3f66:	99 27       	eor	r25, r25
    3f68:	b7 51       	subi	r27, 0x17	; 23
    3f6a:	b0 f0       	brcs	.+44     	; 0x3f98 <__fixunssfsi+0x3e>
    3f6c:	e1 f0       	breq	.+56     	; 0x3fa6 <__fixunssfsi+0x4c>
    3f6e:	66 0f       	add	r22, r22
    3f70:	77 1f       	adc	r23, r23
    3f72:	88 1f       	adc	r24, r24
    3f74:	99 1f       	adc	r25, r25
    3f76:	1a f0       	brmi	.+6      	; 0x3f7e <__fixunssfsi+0x24>
    3f78:	ba 95       	dec	r27
__fixunssfsi():
    3f7a:	c9 f7       	brne	.-14     	; 0x3f6e <__fixunssfsi+0x14>
    3f7c:	14 c0       	rjmp	.+40     	; 0x3fa6 <__fixunssfsi+0x4c>
    3f7e:	b1 30       	cpi	r27, 0x01	; 1
    3f80:	91 f0       	breq	.+36     	; 0x3fa6 <__fixunssfsi+0x4c>
    3f82:	0e 94 87 20 	call	0x410e	; 0x410e <__fp_zero>
    3f86:	b1 e0       	ldi	r27, 0x01	; 1
    3f88:	08 95       	ret
    3f8a:	0c 94 87 20 	jmp	0x410e	; 0x410e <__fp_zero>
    3f8e:	67 2f       	mov	r22, r23
    3f90:	78 2f       	mov	r23, r24
    3f92:	88 27       	eor	r24, r24
    3f94:	b8 5f       	subi	r27, 0xF8	; 248
    3f96:	39 f0       	breq	.+14     	; 0x3fa6 <__fixunssfsi+0x4c>
    3f98:	b9 3f       	cpi	r27, 0xF9	; 249
    3f9a:	cc f3       	brlt	.-14     	; 0x3f8e <__fixunssfsi+0x34>
    3f9c:	86 95       	lsr	r24
    3f9e:	77 95       	ror	r23
    3fa0:	67 95       	ror	r22
    3fa2:	b3 95       	inc	r27
    3fa4:	d9 f7       	brne	.-10     	; 0x3f9c <__fixunssfsi+0x42>
    3fa6:	3e f4       	brtc	.+14     	; 0x3fb6 <__fixunssfsi+0x5c>
    3fa8:	90 95       	com	r25
    3faa:	80 95       	com	r24
    3fac:	70 95       	com	r23
    3fae:	61 95       	neg	r22
    3fb0:	7f 4f       	sbci	r23, 0xFF	; 255
    3fb2:	8f 4f       	sbci	r24, 0xFF	; 255
    3fb4:	9f 4f       	sbci	r25, 0xFF	; 255
    3fb6:	08 95       	ret

00003fb8 <__floatunsisf>:
__floatunsisf():
    3fb8:	e8 94       	clt
    3fba:	09 c0       	rjmp	.+18     	; 0x3fce <__floatsisf+0x12>

00003fbc <__floatsisf>:
    3fbc:	97 fb       	bst	r25, 7
    3fbe:	3e f4       	brtc	.+14     	; 0x3fce <__floatsisf+0x12>
    3fc0:	90 95       	com	r25
    3fc2:	80 95       	com	r24
    3fc4:	70 95       	com	r23
    3fc6:	61 95       	neg	r22
    3fc8:	7f 4f       	sbci	r23, 0xFF	; 255
    3fca:	8f 4f       	sbci	r24, 0xFF	; 255
    3fcc:	9f 4f       	sbci	r25, 0xFF	; 255
    3fce:	99 23       	and	r25, r25
    3fd0:	a9 f0       	breq	.+42     	; 0x3ffc <__floatsisf+0x40>
    3fd2:	f9 2f       	mov	r31, r25
    3fd4:	96 e9       	ldi	r25, 0x96	; 150
    3fd6:	bb 27       	eor	r27, r27
    3fd8:	93 95       	inc	r25
    3fda:	f6 95       	lsr	r31
    3fdc:	87 95       	ror	r24
    3fde:	77 95       	ror	r23
    3fe0:	67 95       	ror	r22
    3fe2:	b7 95       	ror	r27
    3fe4:	f1 11       	cpse	r31, r1
    3fe6:	f8 cf       	rjmp	.-16     	; 0x3fd8 <__floatsisf+0x1c>
    3fe8:	fa f4       	brpl	.+62     	; 0x4028 <__floatsisf+0x6c>
    3fea:	bb 0f       	add	r27, r27
    3fec:	11 f4       	brne	.+4      	; 0x3ff2 <__floatsisf+0x36>
    3fee:	60 ff       	sbrs	r22, 0
    3ff0:	1b c0       	rjmp	.+54     	; 0x4028 <__floatsisf+0x6c>
    3ff2:	6f 5f       	subi	r22, 0xFF	; 255
    3ff4:	7f 4f       	sbci	r23, 0xFF	; 255
    3ff6:	8f 4f       	sbci	r24, 0xFF	; 255
    3ff8:	9f 4f       	sbci	r25, 0xFF	; 255
    3ffa:	16 c0       	rjmp	.+44     	; 0x4028 <__floatsisf+0x6c>
    3ffc:	88 23       	and	r24, r24
    3ffe:	11 f0       	breq	.+4      	; 0x4004 <__floatsisf+0x48>
    4000:	96 e9       	ldi	r25, 0x96	; 150
    4002:	11 c0       	rjmp	.+34     	; 0x4026 <__floatsisf+0x6a>
    4004:	77 23       	and	r23, r23
    4006:	21 f0       	breq	.+8      	; 0x4010 <__floatsisf+0x54>
    4008:	9e e8       	ldi	r25, 0x8E	; 142
    400a:	87 2f       	mov	r24, r23
    400c:	76 2f       	mov	r23, r22
    400e:	05 c0       	rjmp	.+10     	; 0x401a <__floatsisf+0x5e>
    4010:	66 23       	and	r22, r22
    4012:	71 f0       	breq	.+28     	; 0x4030 <__floatsisf+0x74>
    4014:	96 e8       	ldi	r25, 0x86	; 134
    4016:	86 2f       	mov	r24, r22
    4018:	70 e0       	ldi	r23, 0x00	; 0
    401a:	60 e0       	ldi	r22, 0x00	; 0
    401c:	2a f0       	brmi	.+10     	; 0x4028 <__floatsisf+0x6c>
    401e:	9a 95       	dec	r25
    4020:	66 0f       	add	r22, r22
    4022:	77 1f       	adc	r23, r23
    4024:	88 1f       	adc	r24, r24
    4026:	da f7       	brpl	.-10     	; 0x401e <__floatsisf+0x62>
    4028:	88 0f       	add	r24, r24
    402a:	96 95       	lsr	r25
    402c:	87 95       	ror	r24
    402e:	97 f9       	bld	r25, 7
    4030:	08 95       	ret

00004032 <__fp_cmp>:
__fp_cmp():
    4032:	99 0f       	add	r25, r25
    4034:	00 08       	sbc	r0, r0
    4036:	55 0f       	add	r21, r21
    4038:	aa 0b       	sbc	r26, r26
    403a:	e0 e8       	ldi	r30, 0x80	; 128
    403c:	fe ef       	ldi	r31, 0xFE	; 254
    403e:	16 16       	cp	r1, r22
    4040:	17 06       	cpc	r1, r23
    4042:	e8 07       	cpc	r30, r24
    4044:	f9 07       	cpc	r31, r25
    4046:	c0 f0       	brcs	.+48     	; 0x4078 <__fp_cmp+0x46>
    4048:	12 16       	cp	r1, r18
    404a:	13 06       	cpc	r1, r19
    404c:	e4 07       	cpc	r30, r20
    404e:	f5 07       	cpc	r31, r21
    4050:	98 f0       	brcs	.+38     	; 0x4078 <__fp_cmp+0x46>
    4052:	62 1b       	sub	r22, r18
    4054:	73 0b       	sbc	r23, r19
    4056:	84 0b       	sbc	r24, r20
    4058:	95 0b       	sbc	r25, r21
    405a:	39 f4       	brne	.+14     	; 0x406a <__fp_cmp+0x38>
    405c:	0a 26       	eor	r0, r26
    405e:	61 f0       	breq	.+24     	; 0x4078 <__fp_cmp+0x46>
    4060:	23 2b       	or	r18, r19
    4062:	24 2b       	or	r18, r20
    4064:	25 2b       	or	r18, r21
    4066:	21 f4       	brne	.+8      	; 0x4070 <__fp_cmp+0x3e>
    4068:	08 95       	ret
    406a:	0a 26       	eor	r0, r26
    406c:	09 f4       	brne	.+2      	; 0x4070 <__fp_cmp+0x3e>
    406e:	a1 40       	sbci	r26, 0x01	; 1
    4070:	a6 95       	lsr	r26
    4072:	8f ef       	ldi	r24, 0xFF	; 255
    4074:	81 1d       	adc	r24, r1
    4076:	81 1d       	adc	r24, r1
    4078:	08 95       	ret

0000407a <__fp_inf>:
__fp_inf():
    407a:	97 f9       	bld	r25, 7
    407c:	9f 67       	ori	r25, 0x7F	; 127
    407e:	80 e8       	ldi	r24, 0x80	; 128
    4080:	70 e0       	ldi	r23, 0x00	; 0
    4082:	60 e0       	ldi	r22, 0x00	; 0
    4084:	08 95       	ret

00004086 <__fp_nan>:
__fp_nan():
    4086:	9f ef       	ldi	r25, 0xFF	; 255
    4088:	80 ec       	ldi	r24, 0xC0	; 192
    408a:	08 95       	ret

0000408c <__fp_pscA>:
__fp_pscA():
    408c:	00 24       	eor	r0, r0
    408e:	0a 94       	dec	r0
    4090:	16 16       	cp	r1, r22
    4092:	17 06       	cpc	r1, r23
    4094:	18 06       	cpc	r1, r24
    4096:	09 06       	cpc	r0, r25
    4098:	08 95       	ret

0000409a <__fp_pscB>:
__fp_pscB():
    409a:	00 24       	eor	r0, r0
    409c:	0a 94       	dec	r0
    409e:	12 16       	cp	r1, r18
    40a0:	13 06       	cpc	r1, r19
    40a2:	14 06       	cpc	r1, r20
    40a4:	05 06       	cpc	r0, r21
    40a6:	08 95       	ret

000040a8 <__fp_round>:
__fp_round():
    40a8:	09 2e       	mov	r0, r25
    40aa:	03 94       	inc	r0
    40ac:	00 0c       	add	r0, r0
    40ae:	11 f4       	brne	.+4      	; 0x40b4 <__fp_round+0xc>
    40b0:	88 23       	and	r24, r24
    40b2:	52 f0       	brmi	.+20     	; 0x40c8 <__fp_round+0x20>
    40b4:	bb 0f       	add	r27, r27
    40b6:	40 f4       	brcc	.+16     	; 0x40c8 <__fp_round+0x20>
    40b8:	bf 2b       	or	r27, r31
    40ba:	11 f4       	brne	.+4      	; 0x40c0 <__fp_round+0x18>
    40bc:	60 ff       	sbrs	r22, 0
    40be:	04 c0       	rjmp	.+8      	; 0x40c8 <__fp_round+0x20>
    40c0:	6f 5f       	subi	r22, 0xFF	; 255
    40c2:	7f 4f       	sbci	r23, 0xFF	; 255
    40c4:	8f 4f       	sbci	r24, 0xFF	; 255
    40c6:	9f 4f       	sbci	r25, 0xFF	; 255
    40c8:	08 95       	ret

000040ca <__fp_split3>:
__fp_split3():
    40ca:	57 fd       	sbrc	r21, 7
    40cc:	90 58       	subi	r25, 0x80	; 128
    40ce:	44 0f       	add	r20, r20
    40d0:	55 1f       	adc	r21, r21
    40d2:	59 f0       	breq	.+22     	; 0x40ea <__fp_splitA+0x10>
    40d4:	5f 3f       	cpi	r21, 0xFF	; 255
    40d6:	71 f0       	breq	.+28     	; 0x40f4 <__fp_splitA+0x1a>
    40d8:	47 95       	ror	r20

000040da <__fp_splitA>:
    40da:	88 0f       	add	r24, r24
    40dc:	97 fb       	bst	r25, 7
    40de:	99 1f       	adc	r25, r25
    40e0:	61 f0       	breq	.+24     	; 0x40fa <__fp_splitA+0x20>
    40e2:	9f 3f       	cpi	r25, 0xFF	; 255
    40e4:	79 f0       	breq	.+30     	; 0x4104 <__stack+0x5>
    40e6:	87 95       	ror	r24
    40e8:	08 95       	ret
    40ea:	12 16       	cp	r1, r18
    40ec:	13 06       	cpc	r1, r19
    40ee:	14 06       	cpc	r1, r20
    40f0:	55 1f       	adc	r21, r21
    40f2:	f2 cf       	rjmp	.-28     	; 0x40d8 <__fp_split3+0xe>
    40f4:	46 95       	lsr	r20
    40f6:	f1 df       	rcall	.-30     	; 0x40da <__fp_splitA>
    40f8:	08 c0       	rjmp	.+16     	; 0x410a <__stack+0xb>
    40fa:	16 16       	cp	r1, r22
    40fc:	17 06       	cpc	r1, r23
    40fe:	18 06       	cpc	r1, r24
    4100:	99 1f       	adc	r25, r25
    4102:	f1 cf       	rjmp	.-30     	; 0x40e6 <__fp_splitA+0xc>
    4104:	86 95       	lsr	r24
    4106:	71 05       	cpc	r23, r1
    4108:	61 05       	cpc	r22, r1
    410a:	08 94       	sec
    410c:	08 95       	ret

0000410e <__fp_zero>:
__fp_zero():
    410e:	e8 94       	clt

00004110 <__fp_szero>:
    4110:	bb 27       	eor	r27, r27
    4112:	66 27       	eor	r22, r22
    4114:	77 27       	eor	r23, r23
    4116:	cb 01       	movw	r24, r22
    4118:	97 f9       	bld	r25, 7
    411a:	08 95       	ret

0000411c <__gesf2>:
__gesf2():
    411c:	0e 94 19 20 	call	0x4032	; 0x4032 <__fp_cmp>
    4120:	08 f4       	brcc	.+2      	; 0x4124 <__gesf2+0x8>
    4122:	8f ef       	ldi	r24, 0xFF	; 255
    4124:	08 95       	ret

00004126 <__mulsf3>:
__mulsf3():
    4126:	0e 94 a6 20 	call	0x414c	; 0x414c <__mulsf3x>
    412a:	0c 94 54 20 	jmp	0x40a8	; 0x40a8 <__fp_round>
    412e:	0e 94 46 20 	call	0x408c	; 0x408c <__fp_pscA>
    4132:	38 f0       	brcs	.+14     	; 0x4142 <__mulsf3+0x1c>
    4134:	0e 94 4d 20 	call	0x409a	; 0x409a <__fp_pscB>
    4138:	20 f0       	brcs	.+8      	; 0x4142 <__mulsf3+0x1c>
    413a:	95 23       	and	r25, r21
    413c:	11 f0       	breq	.+4      	; 0x4142 <__mulsf3+0x1c>
    413e:	0c 94 3d 20 	jmp	0x407a	; 0x407a <__fp_inf>
    4142:	0c 94 43 20 	jmp	0x4086	; 0x4086 <__fp_nan>
    4146:	11 24       	eor	r1, r1
    4148:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__fp_szero>

0000414c <__mulsf3x>:
__mulsf3x():
    414c:	0e 94 65 20 	call	0x40ca	; 0x40ca <__fp_split3>
    4150:	70 f3       	brcs	.-36     	; 0x412e <__mulsf3+0x8>

00004152 <__mulsf3_pse>:
    4152:	95 9f       	mul	r25, r21
    4154:	c1 f3       	breq	.-16     	; 0x4146 <__mulsf3+0x20>
    4156:	95 0f       	add	r25, r21
    4158:	50 e0       	ldi	r21, 0x00	; 0
    415a:	55 1f       	adc	r21, r21
    415c:	62 9f       	mul	r22, r18
    415e:	f0 01       	movw	r30, r0
    4160:	72 9f       	mul	r23, r18
    4162:	bb 27       	eor	r27, r27
    4164:	f0 0d       	add	r31, r0
    4166:	b1 1d       	adc	r27, r1
    4168:	63 9f       	mul	r22, r19
    416a:	aa 27       	eor	r26, r26
    416c:	f0 0d       	add	r31, r0
    416e:	b1 1d       	adc	r27, r1
    4170:	aa 1f       	adc	r26, r26
    4172:	64 9f       	mul	r22, r20
    4174:	66 27       	eor	r22, r22
    4176:	b0 0d       	add	r27, r0
    4178:	a1 1d       	adc	r26, r1
    417a:	66 1f       	adc	r22, r22
    417c:	82 9f       	mul	r24, r18
    417e:	22 27       	eor	r18, r18
    4180:	b0 0d       	add	r27, r0
    4182:	a1 1d       	adc	r26, r1
    4184:	62 1f       	adc	r22, r18
    4186:	73 9f       	mul	r23, r19
    4188:	b0 0d       	add	r27, r0
    418a:	a1 1d       	adc	r26, r1
    418c:	62 1f       	adc	r22, r18
    418e:	83 9f       	mul	r24, r19
    4190:	a0 0d       	add	r26, r0
    4192:	61 1d       	adc	r22, r1
    4194:	22 1f       	adc	r18, r18
    4196:	74 9f       	mul	r23, r20
    4198:	33 27       	eor	r19, r19
    419a:	a0 0d       	add	r26, r0
    419c:	61 1d       	adc	r22, r1
    419e:	23 1f       	adc	r18, r19
    41a0:	84 9f       	mul	r24, r20
    41a2:	60 0d       	add	r22, r0
    41a4:	21 1d       	adc	r18, r1
    41a6:	82 2f       	mov	r24, r18
    41a8:	76 2f       	mov	r23, r22
    41aa:	6a 2f       	mov	r22, r26
    41ac:	11 24       	eor	r1, r1
    41ae:	9f 57       	subi	r25, 0x7F	; 127
    41b0:	50 40       	sbci	r21, 0x00	; 0
    41b2:	9a f0       	brmi	.+38     	; 0x41da <__mulsf3_pse+0x88>
    41b4:	f1 f0       	breq	.+60     	; 0x41f2 <__mulsf3_pse+0xa0>
    41b6:	88 23       	and	r24, r24
    41b8:	4a f0       	brmi	.+18     	; 0x41cc <__mulsf3_pse+0x7a>
    41ba:	ee 0f       	add	r30, r30
    41bc:	ff 1f       	adc	r31, r31
    41be:	bb 1f       	adc	r27, r27
    41c0:	66 1f       	adc	r22, r22
    41c2:	77 1f       	adc	r23, r23
    41c4:	88 1f       	adc	r24, r24
    41c6:	91 50       	subi	r25, 0x01	; 1
    41c8:	50 40       	sbci	r21, 0x00	; 0
    41ca:	a9 f7       	brne	.-22     	; 0x41b6 <__mulsf3_pse+0x64>
    41cc:	9e 3f       	cpi	r25, 0xFE	; 254
    41ce:	51 05       	cpc	r21, r1
    41d0:	80 f0       	brcs	.+32     	; 0x41f2 <__mulsf3_pse+0xa0>
    41d2:	0c 94 3d 20 	jmp	0x407a	; 0x407a <__fp_inf>
    41d6:	0c 94 88 20 	jmp	0x4110	; 0x4110 <__fp_szero>
    41da:	5f 3f       	cpi	r21, 0xFF	; 255
    41dc:	e4 f3       	brlt	.-8      	; 0x41d6 <__mulsf3_pse+0x84>
    41de:	98 3e       	cpi	r25, 0xE8	; 232
    41e0:	d4 f3       	brlt	.-12     	; 0x41d6 <__mulsf3_pse+0x84>
    41e2:	86 95       	lsr	r24
    41e4:	77 95       	ror	r23
    41e6:	67 95       	ror	r22
    41e8:	b7 95       	ror	r27
    41ea:	f7 95       	ror	r31
    41ec:	e7 95       	ror	r30
    41ee:	9f 5f       	subi	r25, 0xFF	; 255
    41f0:	c1 f7       	brne	.-16     	; 0x41e2 <__mulsf3_pse+0x90>
    41f2:	fe 2b       	or	r31, r30
    41f4:	88 0f       	add	r24, r24
    41f6:	91 1d       	adc	r25, r1
    41f8:	96 95       	lsr	r25
    41fa:	87 95       	ror	r24
    41fc:	97 f9       	bld	r25, 7
    41fe:	08 95       	ret

00004200 <__unordsf2>:
    4200:	0e 94 19 20 	call	0x4032	; 0x4032 <__fp_cmp>
    4204:	88 0b       	sbc	r24, r24
    4206:	99 0b       	sbc	r25, r25
    4208:	08 95       	ret

0000420a <__udivmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    420a:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    420c:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    420e:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    4210:	07 c0       	rjmp	.+14     	; 0x4220 <__udivmodhi4_ep>

00004212 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    4212:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    4214:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    4216:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    4218:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    421a:	10 f0       	brcs	.+4      	; 0x4220 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    421c:	a6 1b       	sub	r26, r22
__udivmodhi4_loop():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    421e:	b7 0b       	sbc	r27, r23

00004220 <__udivmodhi4_ep>:
__udivmodhi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    4220:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    4222:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    4224:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    4226:	a9 f7       	brne	.-22     	; 0x4212 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    4228:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    422a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    422c:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    422e:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    4230:	08 95       	ret

00004232 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    4232:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    4234:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    4236:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    4238:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    423a:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    423c:	0d c0       	rjmp	.+26     	; 0x4258 <__udivmodsi4_ep>

0000423e <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    423e:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    4240:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    4242:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    4244:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    4246:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    4248:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    424a:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    424c:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    424e:	20 f0       	brcs	.+8      	; 0x4258 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    4250:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    4252:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    4254:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    4256:	f5 0b       	sbc	r31, r21

00004258 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    4258:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    425a:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    425c:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    425e:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    4260:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    4262:	69 f7       	brne	.-38     	; 0x423e <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    4264:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    4266:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    4268:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    426a:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    426c:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    426e:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    4270:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    4272:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    4274:	08 95       	ret

00004276 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    4276:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    4278:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    427a:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    427c:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    427e:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    4280:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    4282:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    4284:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    4286:	09 94       	ijmp

00004288 <dtostrf>:
dtostrf():
    4288:	ef 92       	push	r14
    428a:	0f 93       	push	r16
    428c:	1f 93       	push	r17
    428e:	cf 93       	push	r28
    4290:	df 93       	push	r29
    4292:	e8 01       	movw	r28, r16
    4294:	34 e0       	ldi	r19, 0x04	; 4
    4296:	47 fd       	sbrc	r20, 7
    4298:	34 e1       	ldi	r19, 0x14	; 20
    429a:	04 2e       	mov	r0, r20
    429c:	00 0c       	add	r0, r0
    429e:	55 0b       	sbc	r21, r21
    42a0:	57 ff       	sbrs	r21, 7
    42a2:	03 c0       	rjmp	.+6      	; 0x42aa <dtostrf+0x22>
    42a4:	51 95       	neg	r21
    42a6:	41 95       	neg	r20
    42a8:	51 09       	sbc	r21, r1
    42aa:	e3 2e       	mov	r14, r19
    42ac:	02 2f       	mov	r16, r18
    42ae:	24 2f       	mov	r18, r20
    42b0:	ae 01       	movw	r20, r28
    42b2:	0e 94 9c 23 	call	0x4738	; 0x4738 <dtoa_prf>
    42b6:	ce 01       	movw	r24, r28
    42b8:	df 91       	pop	r29
    42ba:	cf 91       	pop	r28
    42bc:	1f 91       	pop	r17
    42be:	0f 91       	pop	r16
    42c0:	ef 90       	pop	r14
    42c2:	08 95       	ret

000042c4 <strcpy>:
strcpy():
    42c4:	fb 01       	movw	r30, r22
    42c6:	dc 01       	movw	r26, r24
    42c8:	01 90       	ld	r0, Z+
    42ca:	0d 92       	st	X+, r0
    42cc:	00 20       	and	r0, r0
    42ce:	e1 f7       	brne	.-8      	; 0x42c8 <strcpy+0x4>
    42d0:	08 95       	ret

000042d2 <sprintf>:
sprintf():
    42d2:	0f 93       	push	r16
    42d4:	1f 93       	push	r17
    42d6:	cf 93       	push	r28
    42d8:	df 93       	push	r29
    42da:	cd b7       	in	r28, 0x3d	; 61
    42dc:	de b7       	in	r29, 0x3e	; 62
    42de:	2e 97       	sbiw	r28, 0x0e	; 14
    42e0:	0f b6       	in	r0, 0x3f	; 63
    42e2:	f8 94       	cli
    42e4:	de bf       	out	0x3e, r29	; 62
    42e6:	0f be       	out	0x3f, r0	; 63
    42e8:	cd bf       	out	0x3d, r28	; 61
    42ea:	0d 89       	ldd	r16, Y+21	; 0x15
    42ec:	1e 89       	ldd	r17, Y+22	; 0x16
    42ee:	86 e0       	ldi	r24, 0x06	; 6
    42f0:	8c 83       	std	Y+4, r24	; 0x04
    42f2:	1a 83       	std	Y+2, r17	; 0x02
    42f4:	09 83       	std	Y+1, r16	; 0x01
    42f6:	8f ef       	ldi	r24, 0xFF	; 255
    42f8:	9f e7       	ldi	r25, 0x7F	; 127
    42fa:	9e 83       	std	Y+6, r25	; 0x06
    42fc:	8d 83       	std	Y+5, r24	; 0x05
    42fe:	ae 01       	movw	r20, r28
    4300:	47 5e       	subi	r20, 0xE7	; 231
    4302:	5f 4f       	sbci	r21, 0xFF	; 255
    4304:	6f 89       	ldd	r22, Y+23	; 0x17
    4306:	78 8d       	ldd	r23, Y+24	; 0x18
    4308:	ce 01       	movw	r24, r28
    430a:	01 96       	adiw	r24, 0x01	; 1
    430c:	0e 94 99 21 	call	0x4332	; 0x4332 <vfprintf>
    4310:	2f 81       	ldd	r18, Y+7	; 0x07
    4312:	38 85       	ldd	r19, Y+8	; 0x08
    4314:	02 0f       	add	r16, r18
    4316:	13 1f       	adc	r17, r19
    4318:	f8 01       	movw	r30, r16
    431a:	10 82       	st	Z, r1
    431c:	2e 96       	adiw	r28, 0x0e	; 14
    431e:	0f b6       	in	r0, 0x3f	; 63
    4320:	f8 94       	cli
    4322:	de bf       	out	0x3e, r29	; 62
    4324:	0f be       	out	0x3f, r0	; 63
    4326:	cd bf       	out	0x3d, r28	; 61
    4328:	df 91       	pop	r29
    432a:	cf 91       	pop	r28
    432c:	1f 91       	pop	r17
    432e:	0f 91       	pop	r16
    4330:	08 95       	ret

00004332 <vfprintf>:
vfprintf():
    4332:	2f 92       	push	r2
    4334:	3f 92       	push	r3
    4336:	4f 92       	push	r4
    4338:	5f 92       	push	r5
    433a:	6f 92       	push	r6
    433c:	7f 92       	push	r7
    433e:	8f 92       	push	r8
    4340:	9f 92       	push	r9
    4342:	af 92       	push	r10
    4344:	bf 92       	push	r11
    4346:	cf 92       	push	r12
    4348:	df 92       	push	r13
    434a:	ef 92       	push	r14
    434c:	ff 92       	push	r15
    434e:	0f 93       	push	r16
    4350:	1f 93       	push	r17
    4352:	cf 93       	push	r28
    4354:	df 93       	push	r29
    4356:	cd b7       	in	r28, 0x3d	; 61
    4358:	de b7       	in	r29, 0x3e	; 62
    435a:	2b 97       	sbiw	r28, 0x0b	; 11
    435c:	0f b6       	in	r0, 0x3f	; 63
    435e:	f8 94       	cli
    4360:	de bf       	out	0x3e, r29	; 62
    4362:	0f be       	out	0x3f, r0	; 63
    4364:	cd bf       	out	0x3d, r28	; 61
    4366:	7c 01       	movw	r14, r24
    4368:	3b 01       	movw	r6, r22
    436a:	8a 01       	movw	r16, r20
    436c:	fc 01       	movw	r30, r24
    436e:	17 82       	std	Z+7, r1	; 0x07
    4370:	16 82       	std	Z+6, r1	; 0x06
    4372:	83 81       	ldd	r24, Z+3	; 0x03
    4374:	81 ff       	sbrs	r24, 1
    4376:	dd c1       	rjmp	.+954    	; 0x4732 <vfprintf+0x400>
    4378:	ce 01       	movw	r24, r28
    437a:	01 96       	adiw	r24, 0x01	; 1
    437c:	5c 01       	movw	r10, r24
    437e:	f7 01       	movw	r30, r14
    4380:	93 81       	ldd	r25, Z+3	; 0x03
    4382:	f3 01       	movw	r30, r6
    4384:	93 fd       	sbrc	r25, 3
    4386:	85 91       	lpm	r24, Z+
    4388:	93 ff       	sbrs	r25, 3
    438a:	81 91       	ld	r24, Z+
    438c:	3f 01       	movw	r6, r30
    438e:	88 23       	and	r24, r24
    4390:	09 f4       	brne	.+2      	; 0x4394 <vfprintf+0x62>
    4392:	53 c1       	rjmp	.+678    	; 0x463a <vfprintf+0x308>
    4394:	85 32       	cpi	r24, 0x25	; 37
    4396:	39 f4       	brne	.+14     	; 0x43a6 <vfprintf+0x74>
    4398:	93 fd       	sbrc	r25, 3
    439a:	85 91       	lpm	r24, Z+
    439c:	93 ff       	sbrs	r25, 3
    439e:	81 91       	ld	r24, Z+
    43a0:	3f 01       	movw	r6, r30
    43a2:	85 32       	cpi	r24, 0x25	; 37
    43a4:	29 f4       	brne	.+10     	; 0x43b0 <vfprintf+0x7e>
    43a6:	b7 01       	movw	r22, r14
    43a8:	90 e0       	ldi	r25, 0x00	; 0
    43aa:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <fputc>
    43ae:	e7 cf       	rjmp	.-50     	; 0x437e <vfprintf+0x4c>
    43b0:	91 2c       	mov	r9, r1
    43b2:	21 2c       	mov	r2, r1
    43b4:	31 2c       	mov	r3, r1
    43b6:	ff e1       	ldi	r31, 0x1F	; 31
    43b8:	f3 15       	cp	r31, r3
    43ba:	38 f0       	brcs	.+14     	; 0x43ca <vfprintf+0x98>
    43bc:	8b 32       	cpi	r24, 0x2B	; 43
    43be:	11 f1       	breq	.+68     	; 0x4404 <vfprintf+0xd2>
    43c0:	90 f4       	brcc	.+36     	; 0x43e6 <vfprintf+0xb4>
    43c2:	80 32       	cpi	r24, 0x20	; 32
    43c4:	09 f1       	breq	.+66     	; 0x4408 <vfprintf+0xd6>
    43c6:	83 32       	cpi	r24, 0x23	; 35
    43c8:	29 f1       	breq	.+74     	; 0x4414 <vfprintf+0xe2>
    43ca:	37 fc       	sbrc	r3, 7
    43cc:	3c c0       	rjmp	.+120    	; 0x4446 <vfprintf+0x114>
    43ce:	20 ed       	ldi	r18, 0xD0	; 208
    43d0:	28 0f       	add	r18, r24
    43d2:	2a 30       	cpi	r18, 0x0A	; 10
    43d4:	50 f5       	brcc	.+84     	; 0x442a <vfprintf+0xf8>
    43d6:	36 fe       	sbrs	r3, 6
    43d8:	20 c0       	rjmp	.+64     	; 0x441a <vfprintf+0xe8>
    43da:	8a e0       	ldi	r24, 0x0A	; 10
    43dc:	98 9e       	mul	r9, r24
    43de:	20 0d       	add	r18, r0
    43e0:	11 24       	eor	r1, r1
    43e2:	92 2e       	mov	r9, r18
    43e4:	06 c0       	rjmp	.+12     	; 0x43f2 <vfprintf+0xc0>
    43e6:	8d 32       	cpi	r24, 0x2D	; 45
    43e8:	91 f0       	breq	.+36     	; 0x440e <vfprintf+0xdc>
    43ea:	80 33       	cpi	r24, 0x30	; 48
    43ec:	71 f7       	brne	.-36     	; 0x43ca <vfprintf+0x98>
    43ee:	68 94       	set
    43f0:	30 f8       	bld	r3, 0
    43f2:	f3 01       	movw	r30, r6
    43f4:	93 fd       	sbrc	r25, 3
    43f6:	85 91       	lpm	r24, Z+
    43f8:	93 ff       	sbrs	r25, 3
    43fa:	81 91       	ld	r24, Z+
    43fc:	3f 01       	movw	r6, r30
    43fe:	81 11       	cpse	r24, r1
    4400:	da cf       	rjmp	.-76     	; 0x43b6 <vfprintf+0x84>
    4402:	21 c0       	rjmp	.+66     	; 0x4446 <vfprintf+0x114>
    4404:	68 94       	set
    4406:	31 f8       	bld	r3, 1
    4408:	68 94       	set
    440a:	32 f8       	bld	r3, 2
    440c:	f2 cf       	rjmp	.-28     	; 0x43f2 <vfprintf+0xc0>
    440e:	68 94       	set
    4410:	33 f8       	bld	r3, 3
    4412:	ef cf       	rjmp	.-34     	; 0x43f2 <vfprintf+0xc0>
    4414:	68 94       	set
    4416:	34 f8       	bld	r3, 4
    4418:	ec cf       	rjmp	.-40     	; 0x43f2 <vfprintf+0xc0>
    441a:	ea e0       	ldi	r30, 0x0A	; 10
    441c:	2e 9e       	mul	r2, r30
    441e:	20 0d       	add	r18, r0
    4420:	11 24       	eor	r1, r1
    4422:	22 2e       	mov	r2, r18
    4424:	68 94       	set
    4426:	35 f8       	bld	r3, 5
    4428:	e4 cf       	rjmp	.-56     	; 0x43f2 <vfprintf+0xc0>
    442a:	8e 32       	cpi	r24, 0x2E	; 46
    442c:	29 f4       	brne	.+10     	; 0x4438 <vfprintf+0x106>
    442e:	36 fc       	sbrc	r3, 6
    4430:	04 c1       	rjmp	.+520    	; 0x463a <vfprintf+0x308>
    4432:	68 94       	set
    4434:	36 f8       	bld	r3, 6
    4436:	dd cf       	rjmp	.-70     	; 0x43f2 <vfprintf+0xc0>
    4438:	8c 36       	cpi	r24, 0x6C	; 108
    443a:	19 f4       	brne	.+6      	; 0x4442 <vfprintf+0x110>
    443c:	68 94       	set
    443e:	37 f8       	bld	r3, 7
    4440:	d8 cf       	rjmp	.-80     	; 0x43f2 <vfprintf+0xc0>
    4442:	88 36       	cpi	r24, 0x68	; 104
    4444:	b1 f2       	breq	.-84     	; 0x43f2 <vfprintf+0xc0>
    4446:	98 2f       	mov	r25, r24
    4448:	9f 7d       	andi	r25, 0xDF	; 223
    444a:	95 54       	subi	r25, 0x45	; 69
    444c:	93 30       	cpi	r25, 0x03	; 3
    444e:	e0 f0       	brcs	.+56     	; 0x4488 <vfprintf+0x156>
    4450:	83 36       	cpi	r24, 0x63	; 99
    4452:	a1 f1       	breq	.+104    	; 0x44bc <vfprintf+0x18a>
    4454:	83 37       	cpi	r24, 0x73	; 115
    4456:	c1 f1       	breq	.+112    	; 0x44c8 <vfprintf+0x196>
    4458:	83 35       	cpi	r24, 0x53	; 83
    445a:	09 f0       	breq	.+2      	; 0x445e <vfprintf+0x12c>
    445c:	63 c0       	rjmp	.+198    	; 0x4524 <vfprintf+0x1f2>
    445e:	28 01       	movw	r4, r16
    4460:	f2 e0       	ldi	r31, 0x02	; 2
    4462:	4f 0e       	add	r4, r31
    4464:	51 1c       	adc	r5, r1
    4466:	f8 01       	movw	r30, r16
    4468:	c0 80       	ld	r12, Z
    446a:	d1 80       	ldd	r13, Z+1	; 0x01
    446c:	69 2d       	mov	r22, r9
    446e:	70 e0       	ldi	r23, 0x00	; 0
    4470:	36 fc       	sbrc	r3, 6
    4472:	02 c0       	rjmp	.+4      	; 0x4478 <vfprintf+0x146>
    4474:	6f ef       	ldi	r22, 0xFF	; 255
    4476:	7f ef       	ldi	r23, 0xFF	; 255
    4478:	c6 01       	movw	r24, r12
    447a:	0e 94 f0 25 	call	0x4be0	; 0x4be0 <strnlen_P>
    447e:	4c 01       	movw	r8, r24
    4480:	68 94       	set
    4482:	37 f8       	bld	r3, 7
    4484:	82 01       	movw	r16, r4
    4486:	0a c0       	rjmp	.+20     	; 0x449c <vfprintf+0x16a>
    4488:	0c 5f       	subi	r16, 0xFC	; 252
    448a:	1f 4f       	sbci	r17, 0xFF	; 255
    448c:	ff e3       	ldi	r31, 0x3F	; 63
    448e:	f9 83       	std	Y+1, r31	; 0x01
    4490:	88 24       	eor	r8, r8
    4492:	83 94       	inc	r8
    4494:	91 2c       	mov	r9, r1
    4496:	65 01       	movw	r12, r10
    4498:	e8 94       	clt
    449a:	37 f8       	bld	r3, 7
    449c:	33 fe       	sbrs	r3, 3
    449e:	2d c0       	rjmp	.+90     	; 0x44fa <vfprintf+0x1c8>
    44a0:	52 2c       	mov	r5, r2
    44a2:	81 14       	cp	r8, r1
    44a4:	91 04       	cpc	r9, r1
    44a6:	71 f5       	brne	.+92     	; 0x4504 <vfprintf+0x1d2>
    44a8:	55 20       	and	r5, r5
    44aa:	09 f4       	brne	.+2      	; 0x44ae <vfprintf+0x17c>
    44ac:	68 cf       	rjmp	.-304    	; 0x437e <vfprintf+0x4c>
    44ae:	b7 01       	movw	r22, r14
    44b0:	80 e2       	ldi	r24, 0x20	; 32
    44b2:	90 e0       	ldi	r25, 0x00	; 0
    44b4:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <fputc>
    44b8:	5a 94       	dec	r5
    44ba:	f6 cf       	rjmp	.-20     	; 0x44a8 <vfprintf+0x176>
    44bc:	f8 01       	movw	r30, r16
    44be:	80 81       	ld	r24, Z
    44c0:	89 83       	std	Y+1, r24	; 0x01
    44c2:	0e 5f       	subi	r16, 0xFE	; 254
    44c4:	1f 4f       	sbci	r17, 0xFF	; 255
    44c6:	e4 cf       	rjmp	.-56     	; 0x4490 <vfprintf+0x15e>
    44c8:	28 01       	movw	r4, r16
    44ca:	f2 e0       	ldi	r31, 0x02	; 2
    44cc:	4f 0e       	add	r4, r31
    44ce:	51 1c       	adc	r5, r1
    44d0:	f8 01       	movw	r30, r16
    44d2:	c0 80       	ld	r12, Z
    44d4:	d1 80       	ldd	r13, Z+1	; 0x01
    44d6:	69 2d       	mov	r22, r9
    44d8:	70 e0       	ldi	r23, 0x00	; 0
    44da:	36 fc       	sbrc	r3, 6
    44dc:	02 c0       	rjmp	.+4      	; 0x44e2 <vfprintf+0x1b0>
    44de:	6f ef       	ldi	r22, 0xFF	; 255
    44e0:	7f ef       	ldi	r23, 0xFF	; 255
    44e2:	c6 01       	movw	r24, r12
    44e4:	0e 94 fb 25 	call	0x4bf6	; 0x4bf6 <strnlen>
    44e8:	4c 01       	movw	r8, r24
    44ea:	82 01       	movw	r16, r4
    44ec:	d5 cf       	rjmp	.-86     	; 0x4498 <vfprintf+0x166>
    44ee:	b7 01       	movw	r22, r14
    44f0:	80 e2       	ldi	r24, 0x20	; 32
    44f2:	90 e0       	ldi	r25, 0x00	; 0
    44f4:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <fputc>
    44f8:	2a 94       	dec	r2
    44fa:	28 14       	cp	r2, r8
    44fc:	19 04       	cpc	r1, r9
    44fe:	09 f0       	breq	.+2      	; 0x4502 <vfprintf+0x1d0>
    4500:	b0 f7       	brcc	.-20     	; 0x44ee <vfprintf+0x1bc>
    4502:	ce cf       	rjmp	.-100    	; 0x44a0 <vfprintf+0x16e>
    4504:	f6 01       	movw	r30, r12
    4506:	37 fc       	sbrc	r3, 7
    4508:	85 91       	lpm	r24, Z+
    450a:	37 fe       	sbrs	r3, 7
    450c:	81 91       	ld	r24, Z+
    450e:	6f 01       	movw	r12, r30
    4510:	b7 01       	movw	r22, r14
    4512:	90 e0       	ldi	r25, 0x00	; 0
    4514:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <fputc>
    4518:	51 10       	cpse	r5, r1
    451a:	5a 94       	dec	r5
    451c:	f1 e0       	ldi	r31, 0x01	; 1
    451e:	8f 1a       	sub	r8, r31
    4520:	91 08       	sbc	r9, r1
    4522:	bf cf       	rjmp	.-130    	; 0x44a2 <vfprintf+0x170>
    4524:	84 36       	cpi	r24, 0x64	; 100
    4526:	19 f0       	breq	.+6      	; 0x452e <vfprintf+0x1fc>
    4528:	89 36       	cpi	r24, 0x69	; 105
    452a:	09 f0       	breq	.+2      	; 0x452e <vfprintf+0x1fc>
    452c:	77 c0       	rjmp	.+238    	; 0x461c <vfprintf+0x2ea>
    452e:	f8 01       	movw	r30, r16
    4530:	37 fe       	sbrs	r3, 7
    4532:	6b c0       	rjmp	.+214    	; 0x460a <vfprintf+0x2d8>
    4534:	60 81       	ld	r22, Z
    4536:	71 81       	ldd	r23, Z+1	; 0x01
    4538:	82 81       	ldd	r24, Z+2	; 0x02
    453a:	93 81       	ldd	r25, Z+3	; 0x03
    453c:	0c 5f       	subi	r16, 0xFC	; 252
    453e:	1f 4f       	sbci	r17, 0xFF	; 255
    4540:	f3 2d       	mov	r31, r3
    4542:	ff 76       	andi	r31, 0x6F	; 111
    4544:	3f 2e       	mov	r3, r31
    4546:	97 ff       	sbrs	r25, 7
    4548:	09 c0       	rjmp	.+18     	; 0x455c <vfprintf+0x22a>
    454a:	90 95       	com	r25
    454c:	80 95       	com	r24
    454e:	70 95       	com	r23
    4550:	61 95       	neg	r22
    4552:	7f 4f       	sbci	r23, 0xFF	; 255
    4554:	8f 4f       	sbci	r24, 0xFF	; 255
    4556:	9f 4f       	sbci	r25, 0xFF	; 255
    4558:	68 94       	set
    455a:	37 f8       	bld	r3, 7
    455c:	2a e0       	ldi	r18, 0x0A	; 10
    455e:	30 e0       	ldi	r19, 0x00	; 0
    4560:	a5 01       	movw	r20, r10
    4562:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <__ultoa_invert>
    4566:	c8 2e       	mov	r12, r24
    4568:	ca 18       	sub	r12, r10
    456a:	8c 2c       	mov	r8, r12
    456c:	43 2c       	mov	r4, r3
    456e:	36 fe       	sbrs	r3, 6
    4570:	0c c0       	rjmp	.+24     	; 0x458a <vfprintf+0x258>
    4572:	e8 94       	clt
    4574:	40 f8       	bld	r4, 0
    4576:	c9 14       	cp	r12, r9
    4578:	40 f4       	brcc	.+16     	; 0x458a <vfprintf+0x258>
    457a:	34 fe       	sbrs	r3, 4
    457c:	05 c0       	rjmp	.+10     	; 0x4588 <vfprintf+0x256>
    457e:	32 fc       	sbrc	r3, 2
    4580:	03 c0       	rjmp	.+6      	; 0x4588 <vfprintf+0x256>
    4582:	f3 2d       	mov	r31, r3
    4584:	fe 7e       	andi	r31, 0xEE	; 238
    4586:	4f 2e       	mov	r4, r31
    4588:	89 2c       	mov	r8, r9
    458a:	44 fe       	sbrs	r4, 4
    458c:	aa c0       	rjmp	.+340    	; 0x46e2 <vfprintf+0x3b0>
    458e:	fe 01       	movw	r30, r28
    4590:	ec 0d       	add	r30, r12
    4592:	f1 1d       	adc	r31, r1
    4594:	80 81       	ld	r24, Z
    4596:	80 33       	cpi	r24, 0x30	; 48
    4598:	09 f0       	breq	.+2      	; 0x459c <vfprintf+0x26a>
    459a:	9c c0       	rjmp	.+312    	; 0x46d4 <vfprintf+0x3a2>
    459c:	24 2d       	mov	r18, r4
    459e:	29 7e       	andi	r18, 0xE9	; 233
    45a0:	42 2e       	mov	r4, r18
    45a2:	84 2d       	mov	r24, r4
    45a4:	88 70       	andi	r24, 0x08	; 8
    45a6:	58 2e       	mov	r5, r24
    45a8:	43 fc       	sbrc	r4, 3
    45aa:	aa c0       	rjmp	.+340    	; 0x4700 <vfprintf+0x3ce>
    45ac:	40 fe       	sbrs	r4, 0
    45ae:	a4 c0       	rjmp	.+328    	; 0x46f8 <vfprintf+0x3c6>
    45b0:	9c 2c       	mov	r9, r12
    45b2:	82 14       	cp	r8, r2
    45b4:	18 f4       	brcc	.+6      	; 0x45bc <vfprintf+0x28a>
    45b6:	2c 0c       	add	r2, r12
    45b8:	92 2c       	mov	r9, r2
    45ba:	98 18       	sub	r9, r8
    45bc:	44 fe       	sbrs	r4, 4
    45be:	a6 c0       	rjmp	.+332    	; 0x470c <vfprintf+0x3da>
    45c0:	b7 01       	movw	r22, r14
    45c2:	80 e3       	ldi	r24, 0x30	; 48
    45c4:	90 e0       	ldi	r25, 0x00	; 0
    45c6:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <fputc>
    45ca:	42 fe       	sbrs	r4, 2
    45cc:	09 c0       	rjmp	.+18     	; 0x45e0 <vfprintf+0x2ae>
    45ce:	88 e7       	ldi	r24, 0x78	; 120
    45d0:	90 e0       	ldi	r25, 0x00	; 0
    45d2:	41 fe       	sbrs	r4, 1
    45d4:	02 c0       	rjmp	.+4      	; 0x45da <vfprintf+0x2a8>
    45d6:	88 e5       	ldi	r24, 0x58	; 88
    45d8:	90 e0       	ldi	r25, 0x00	; 0
    45da:	b7 01       	movw	r22, r14
    45dc:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <fputc>
    45e0:	c9 14       	cp	r12, r9
    45e2:	08 f4       	brcc	.+2      	; 0x45e6 <vfprintf+0x2b4>
    45e4:	9f c0       	rjmp	.+318    	; 0x4724 <vfprintf+0x3f2>
    45e6:	ca 94       	dec	r12
    45e8:	d1 2c       	mov	r13, r1
    45ea:	9f ef       	ldi	r25, 0xFF	; 255
    45ec:	c9 1a       	sub	r12, r25
    45ee:	d9 0a       	sbc	r13, r25
    45f0:	ca 0c       	add	r12, r10
    45f2:	db 1c       	adc	r13, r11
    45f4:	f6 01       	movw	r30, r12
    45f6:	82 91       	ld	r24, -Z
    45f8:	6f 01       	movw	r12, r30
    45fa:	b7 01       	movw	r22, r14
    45fc:	90 e0       	ldi	r25, 0x00	; 0
    45fe:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <fputc>
    4602:	ac 14       	cp	r10, r12
    4604:	bd 04       	cpc	r11, r13
    4606:	b1 f7       	brne	.-20     	; 0x45f4 <vfprintf+0x2c2>
    4608:	4f cf       	rjmp	.-354    	; 0x44a8 <vfprintf+0x176>
    460a:	60 81       	ld	r22, Z
    460c:	71 81       	ldd	r23, Z+1	; 0x01
    460e:	07 2e       	mov	r0, r23
    4610:	00 0c       	add	r0, r0
    4612:	88 0b       	sbc	r24, r24
    4614:	99 0b       	sbc	r25, r25
    4616:	0e 5f       	subi	r16, 0xFE	; 254
    4618:	1f 4f       	sbci	r17, 0xFF	; 255
    461a:	92 cf       	rjmp	.-220    	; 0x4540 <vfprintf+0x20e>
    461c:	d3 2c       	mov	r13, r3
    461e:	e8 94       	clt
    4620:	d4 f8       	bld	r13, 4
    4622:	2a e0       	ldi	r18, 0x0A	; 10
    4624:	30 e0       	ldi	r19, 0x00	; 0
    4626:	85 37       	cpi	r24, 0x75	; 117
    4628:	e1 f1       	breq	.+120    	; 0x46a2 <vfprintf+0x370>
    462a:	23 2d       	mov	r18, r3
    462c:	29 7f       	andi	r18, 0xF9	; 249
    462e:	d2 2e       	mov	r13, r18
    4630:	8f 36       	cpi	r24, 0x6F	; 111
    4632:	a9 f1       	breq	.+106    	; 0x469e <vfprintf+0x36c>
    4634:	f0 f4       	brcc	.+60     	; 0x4672 <vfprintf+0x340>
    4636:	88 35       	cpi	r24, 0x58	; 88
    4638:	51 f1       	breq	.+84     	; 0x468e <vfprintf+0x35c>
    463a:	f7 01       	movw	r30, r14
    463c:	86 81       	ldd	r24, Z+6	; 0x06
    463e:	97 81       	ldd	r25, Z+7	; 0x07
    4640:	2b 96       	adiw	r28, 0x0b	; 11
    4642:	0f b6       	in	r0, 0x3f	; 63
    4644:	f8 94       	cli
    4646:	de bf       	out	0x3e, r29	; 62
    4648:	0f be       	out	0x3f, r0	; 63
    464a:	cd bf       	out	0x3d, r28	; 61
    464c:	df 91       	pop	r29
    464e:	cf 91       	pop	r28
    4650:	1f 91       	pop	r17
    4652:	0f 91       	pop	r16
    4654:	ff 90       	pop	r15
    4656:	ef 90       	pop	r14
    4658:	df 90       	pop	r13
    465a:	cf 90       	pop	r12
    465c:	bf 90       	pop	r11
    465e:	af 90       	pop	r10
    4660:	9f 90       	pop	r9
    4662:	8f 90       	pop	r8
    4664:	7f 90       	pop	r7
    4666:	6f 90       	pop	r6
    4668:	5f 90       	pop	r5
    466a:	4f 90       	pop	r4
    466c:	3f 90       	pop	r3
    466e:	2f 90       	pop	r2
    4670:	08 95       	ret
    4672:	80 37       	cpi	r24, 0x70	; 112
    4674:	49 f0       	breq	.+18     	; 0x4688 <vfprintf+0x356>
    4676:	88 37       	cpi	r24, 0x78	; 120
    4678:	01 f7       	brne	.-64     	; 0x463a <vfprintf+0x308>
    467a:	d4 fe       	sbrs	r13, 4
    467c:	02 c0       	rjmp	.+4      	; 0x4682 <vfprintf+0x350>
    467e:	68 94       	set
    4680:	d2 f8       	bld	r13, 2
    4682:	20 e1       	ldi	r18, 0x10	; 16
    4684:	30 e0       	ldi	r19, 0x00	; 0
    4686:	0d c0       	rjmp	.+26     	; 0x46a2 <vfprintf+0x370>
    4688:	68 94       	set
    468a:	d4 f8       	bld	r13, 4
    468c:	f6 cf       	rjmp	.-20     	; 0x467a <vfprintf+0x348>
    468e:	34 fe       	sbrs	r3, 4
    4690:	03 c0       	rjmp	.+6      	; 0x4698 <vfprintf+0x366>
    4692:	82 2f       	mov	r24, r18
    4694:	86 60       	ori	r24, 0x06	; 6
    4696:	d8 2e       	mov	r13, r24
    4698:	20 e1       	ldi	r18, 0x10	; 16
    469a:	32 e0       	ldi	r19, 0x02	; 2
    469c:	02 c0       	rjmp	.+4      	; 0x46a2 <vfprintf+0x370>
    469e:	28 e0       	ldi	r18, 0x08	; 8
    46a0:	30 e0       	ldi	r19, 0x00	; 0
    46a2:	f8 01       	movw	r30, r16
    46a4:	d7 fe       	sbrs	r13, 7
    46a6:	0f c0       	rjmp	.+30     	; 0x46c6 <vfprintf+0x394>
    46a8:	60 81       	ld	r22, Z
    46aa:	71 81       	ldd	r23, Z+1	; 0x01
    46ac:	82 81       	ldd	r24, Z+2	; 0x02
    46ae:	93 81       	ldd	r25, Z+3	; 0x03
    46b0:	0c 5f       	subi	r16, 0xFC	; 252
    46b2:	1f 4f       	sbci	r17, 0xFF	; 255
    46b4:	a5 01       	movw	r20, r10
    46b6:	0e 94 36 26 	call	0x4c6c	; 0x4c6c <__ultoa_invert>
    46ba:	c8 2e       	mov	r12, r24
    46bc:	ca 18       	sub	r12, r10
    46be:	3d 2c       	mov	r3, r13
    46c0:	e8 94       	clt
    46c2:	37 f8       	bld	r3, 7
    46c4:	52 cf       	rjmp	.-348    	; 0x456a <vfprintf+0x238>
    46c6:	60 81       	ld	r22, Z
    46c8:	71 81       	ldd	r23, Z+1	; 0x01
    46ca:	90 e0       	ldi	r25, 0x00	; 0
    46cc:	80 e0       	ldi	r24, 0x00	; 0
    46ce:	0e 5f       	subi	r16, 0xFE	; 254
    46d0:	1f 4f       	sbci	r17, 0xFF	; 255
    46d2:	f0 cf       	rjmp	.-32     	; 0x46b4 <vfprintf+0x382>
    46d4:	42 fc       	sbrc	r4, 2
    46d6:	02 c0       	rjmp	.+4      	; 0x46dc <vfprintf+0x3aa>
    46d8:	83 94       	inc	r8
    46da:	63 cf       	rjmp	.-314    	; 0x45a2 <vfprintf+0x270>
    46dc:	83 94       	inc	r8
    46de:	83 94       	inc	r8
    46e0:	60 cf       	rjmp	.-320    	; 0x45a2 <vfprintf+0x270>
    46e2:	84 2d       	mov	r24, r4
    46e4:	86 78       	andi	r24, 0x86	; 134
    46e6:	09 f4       	brne	.+2      	; 0x46ea <vfprintf+0x3b8>
    46e8:	5c cf       	rjmp	.-328    	; 0x45a2 <vfprintf+0x270>
    46ea:	f6 cf       	rjmp	.-20     	; 0x46d8 <vfprintf+0x3a6>
    46ec:	b7 01       	movw	r22, r14
    46ee:	80 e2       	ldi	r24, 0x20	; 32
    46f0:	90 e0       	ldi	r25, 0x00	; 0
    46f2:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <fputc>
    46f6:	83 94       	inc	r8
    46f8:	82 14       	cp	r8, r2
    46fa:	c0 f3       	brcs	.-16     	; 0x46ec <vfprintf+0x3ba>
    46fc:	51 2c       	mov	r5, r1
    46fe:	5e cf       	rjmp	.-324    	; 0x45bc <vfprintf+0x28a>
    4700:	52 2c       	mov	r5, r2
    4702:	58 18       	sub	r5, r8
    4704:	82 14       	cp	r8, r2
    4706:	08 f4       	brcc	.+2      	; 0x470a <vfprintf+0x3d8>
    4708:	59 cf       	rjmp	.-334    	; 0x45bc <vfprintf+0x28a>
    470a:	f8 cf       	rjmp	.-16     	; 0x46fc <vfprintf+0x3ca>
    470c:	84 2d       	mov	r24, r4
    470e:	86 78       	andi	r24, 0x86	; 134
    4710:	09 f4       	brne	.+2      	; 0x4714 <vfprintf+0x3e2>
    4712:	66 cf       	rjmp	.-308    	; 0x45e0 <vfprintf+0x2ae>
    4714:	8b e2       	ldi	r24, 0x2B	; 43
    4716:	41 fe       	sbrs	r4, 1
    4718:	80 e2       	ldi	r24, 0x20	; 32
    471a:	47 fc       	sbrc	r4, 7
    471c:	8d e2       	ldi	r24, 0x2D	; 45
    471e:	b7 01       	movw	r22, r14
    4720:	90 e0       	ldi	r25, 0x00	; 0
    4722:	5c cf       	rjmp	.-328    	; 0x45dc <vfprintf+0x2aa>
    4724:	b7 01       	movw	r22, r14
    4726:	80 e3       	ldi	r24, 0x30	; 48
    4728:	90 e0       	ldi	r25, 0x00	; 0
    472a:	0e 94 06 26 	call	0x4c0c	; 0x4c0c <fputc>
    472e:	9a 94       	dec	r9
    4730:	57 cf       	rjmp	.-338    	; 0x45e0 <vfprintf+0x2ae>
    4732:	8f ef       	ldi	r24, 0xFF	; 255
    4734:	9f ef       	ldi	r25, 0xFF	; 255
    4736:	84 cf       	rjmp	.-248    	; 0x4640 <vfprintf+0x30e>

00004738 <dtoa_prf>:
dtoa_prf():
    4738:	8f 92       	push	r8
    473a:	9f 92       	push	r9
    473c:	af 92       	push	r10
    473e:	bf 92       	push	r11
    4740:	cf 92       	push	r12
    4742:	df 92       	push	r13
    4744:	ef 92       	push	r14
    4746:	ff 92       	push	r15
    4748:	0f 93       	push	r16
    474a:	1f 93       	push	r17
    474c:	cf 93       	push	r28
    474e:	df 93       	push	r29
    4750:	cd b7       	in	r28, 0x3d	; 61
    4752:	de b7       	in	r29, 0x3e	; 62
    4754:	29 97       	sbiw	r28, 0x09	; 9
    4756:	0f b6       	in	r0, 0x3f	; 63
    4758:	f8 94       	cli
    475a:	de bf       	out	0x3e, r29	; 62
    475c:	0f be       	out	0x3f, r0	; 63
    475e:	cd bf       	out	0x3d, r28	; 61
    4760:	6a 01       	movw	r12, r20
    4762:	f2 2e       	mov	r15, r18
    4764:	b0 2e       	mov	r11, r16
    4766:	10 2f       	mov	r17, r16
    4768:	fb e3       	ldi	r31, 0x3B	; 59
    476a:	af 2e       	mov	r10, r31
    476c:	a0 16       	cp	r10, r16
    476e:	08 f4       	brcc	.+2      	; 0x4772 <dtoa_prf+0x3a>
    4770:	1b e3       	ldi	r17, 0x3B	; 59
    4772:	1f 5f       	subi	r17, 0xFF	; 255
    4774:	01 2f       	mov	r16, r17
    4776:	27 e0       	ldi	r18, 0x07	; 7
    4778:	ae 01       	movw	r20, r28
    477a:	4f 5f       	subi	r20, 0xFF	; 255
    477c:	5f 4f       	sbci	r21, 0xFF	; 255
    477e:	0e 94 18 25 	call	0x4a30	; 0x4a30 <__ftoa_engine>
    4782:	bc 01       	movw	r22, r24
    4784:	89 81       	ldd	r24, Y+1	; 0x01
    4786:	98 2f       	mov	r25, r24
    4788:	99 70       	andi	r25, 0x09	; 9
    478a:	91 30       	cpi	r25, 0x01	; 1
    478c:	09 f4       	brne	.+2      	; 0x4790 <dtoa_prf+0x58>
    478e:	4e c0       	rjmp	.+156    	; 0x482c <dtoa_prf+0xf4>
    4790:	9b e2       	ldi	r25, 0x2B	; 43
    4792:	e1 fc       	sbrc	r14, 1
    4794:	04 c0       	rjmp	.+8      	; 0x479e <dtoa_prf+0x66>
    4796:	9e 2d       	mov	r25, r14
    4798:	91 70       	andi	r25, 0x01	; 1
    479a:	e0 fc       	sbrc	r14, 0
    479c:	49 c0       	rjmp	.+146    	; 0x4830 <dtoa_prf+0xf8>
    479e:	5e 2d       	mov	r21, r14
    47a0:	50 71       	andi	r21, 0x10	; 16
    47a2:	e8 2f       	mov	r30, r24
    47a4:	e8 70       	andi	r30, 0x08	; 8
    47a6:	83 ff       	sbrs	r24, 3
    47a8:	55 c0       	rjmp	.+170    	; 0x4854 <dtoa_prf+0x11c>
    47aa:	84 e0       	ldi	r24, 0x04	; 4
    47ac:	91 11       	cpse	r25, r1
    47ae:	01 c0       	rjmp	.+2      	; 0x47b2 <dtoa_prf+0x7a>
    47b0:	83 e0       	ldi	r24, 0x03	; 3
    47b2:	ef 2d       	mov	r30, r15
    47b4:	e8 1b       	sub	r30, r24
    47b6:	8f 15       	cp	r24, r15
    47b8:	08 f0       	brcs	.+2      	; 0x47bc <dtoa_prf+0x84>
    47ba:	e0 e0       	ldi	r30, 0x00	; 0
    47bc:	d6 01       	movw	r26, r12
    47be:	8e 2f       	mov	r24, r30
    47c0:	20 e2       	ldi	r18, 0x20	; 32
    47c2:	55 23       	and	r21, r21
    47c4:	c9 f1       	breq	.+114    	; 0x4838 <dtoa_prf+0x100>
    47c6:	99 23       	and	r25, r25
    47c8:	29 f0       	breq	.+10     	; 0x47d4 <dtoa_prf+0x9c>
    47ca:	d6 01       	movw	r26, r12
    47cc:	9c 93       	st	X, r25
    47ce:	c6 01       	movw	r24, r12
    47d0:	01 96       	adiw	r24, 0x01	; 1
    47d2:	6c 01       	movw	r12, r24
    47d4:	96 01       	movw	r18, r12
    47d6:	2d 5f       	subi	r18, 0xFD	; 253
    47d8:	3f 4f       	sbci	r19, 0xFF	; 255
    47da:	e2 fe       	sbrs	r14, 2
    47dc:	33 c0       	rjmp	.+102    	; 0x4844 <dtoa_prf+0x10c>
    47de:	8e e4       	ldi	r24, 0x4E	; 78
    47e0:	d6 01       	movw	r26, r12
    47e2:	8c 93       	st	X, r24
    47e4:	91 e4       	ldi	r25, 0x41	; 65
    47e6:	11 96       	adiw	r26, 0x01	; 1
    47e8:	9c 93       	st	X, r25
    47ea:	11 97       	sbiw	r26, 0x01	; 1
    47ec:	12 96       	adiw	r26, 0x02	; 2
    47ee:	8c 93       	st	X, r24
    47f0:	d9 01       	movw	r26, r18
    47f2:	8e 2f       	mov	r24, r30
    47f4:	90 e2       	ldi	r25, 0x20	; 32
    47f6:	81 11       	cpse	r24, r1
    47f8:	2a c0       	rjmp	.+84     	; 0x484e <dtoa_prf+0x116>
    47fa:	e2 0f       	add	r30, r18
    47fc:	f3 2f       	mov	r31, r19
    47fe:	f1 1d       	adc	r31, r1
    4800:	10 82       	st	Z, r1
    4802:	8e ef       	ldi	r24, 0xFE	; 254
    4804:	9f ef       	ldi	r25, 0xFF	; 255
    4806:	29 96       	adiw	r28, 0x09	; 9
    4808:	0f b6       	in	r0, 0x3f	; 63
    480a:	f8 94       	cli
    480c:	de bf       	out	0x3e, r29	; 62
    480e:	0f be       	out	0x3f, r0	; 63
    4810:	cd bf       	out	0x3d, r28	; 61
    4812:	df 91       	pop	r29
    4814:	cf 91       	pop	r28
    4816:	1f 91       	pop	r17
    4818:	0f 91       	pop	r16
    481a:	ff 90       	pop	r15
    481c:	ef 90       	pop	r14
    481e:	df 90       	pop	r13
    4820:	cf 90       	pop	r12
    4822:	bf 90       	pop	r11
    4824:	af 90       	pop	r10
    4826:	9f 90       	pop	r9
    4828:	8f 90       	pop	r8
    482a:	08 95       	ret
    482c:	9d e2       	ldi	r25, 0x2D	; 45
    482e:	b7 cf       	rjmp	.-146    	; 0x479e <dtoa_prf+0x66>
    4830:	90 e2       	ldi	r25, 0x20	; 32
    4832:	b5 cf       	rjmp	.-150    	; 0x479e <dtoa_prf+0x66>
    4834:	2d 93       	st	X+, r18
    4836:	81 50       	subi	r24, 0x01	; 1
    4838:	81 11       	cpse	r24, r1
    483a:	fc cf       	rjmp	.-8      	; 0x4834 <dtoa_prf+0xfc>
    483c:	ce 0e       	add	r12, r30
    483e:	d1 1c       	adc	r13, r1
    4840:	e0 e0       	ldi	r30, 0x00	; 0
    4842:	c1 cf       	rjmp	.-126    	; 0x47c6 <dtoa_prf+0x8e>
    4844:	8e e6       	ldi	r24, 0x6E	; 110
    4846:	d6 01       	movw	r26, r12
    4848:	8c 93       	st	X, r24
    484a:	91 e6       	ldi	r25, 0x61	; 97
    484c:	cc cf       	rjmp	.-104    	; 0x47e6 <dtoa_prf+0xae>
    484e:	9d 93       	st	X+, r25
    4850:	81 50       	subi	r24, 0x01	; 1
    4852:	d1 cf       	rjmp	.-94     	; 0x47f6 <dtoa_prf+0xbe>
    4854:	48 2f       	mov	r20, r24
    4856:	44 70       	andi	r20, 0x04	; 4
    4858:	82 ff       	sbrs	r24, 2
    485a:	3d c0       	rjmp	.+122    	; 0x48d6 <dtoa_prf+0x19e>
    485c:	84 e0       	ldi	r24, 0x04	; 4
    485e:	91 11       	cpse	r25, r1
    4860:	01 c0       	rjmp	.+2      	; 0x4864 <dtoa_prf+0x12c>
    4862:	83 e0       	ldi	r24, 0x03	; 3
    4864:	8f 15       	cp	r24, r15
    4866:	10 f4       	brcc	.+4      	; 0x486c <dtoa_prf+0x134>
    4868:	ef 2d       	mov	r30, r15
    486a:	e8 1b       	sub	r30, r24
    486c:	d6 01       	movw	r26, r12
    486e:	8e 2f       	mov	r24, r30
    4870:	20 e2       	ldi	r18, 0x20	; 32
    4872:	55 23       	and	r21, r21
    4874:	09 f1       	breq	.+66     	; 0x48b8 <dtoa_prf+0x180>
    4876:	99 23       	and	r25, r25
    4878:	29 f0       	breq	.+10     	; 0x4884 <dtoa_prf+0x14c>
    487a:	d6 01       	movw	r26, r12
    487c:	9c 93       	st	X, r25
    487e:	c6 01       	movw	r24, r12
    4880:	01 96       	adiw	r24, 0x01	; 1
    4882:	6c 01       	movw	r12, r24
    4884:	96 01       	movw	r18, r12
    4886:	2d 5f       	subi	r18, 0xFD	; 253
    4888:	3f 4f       	sbci	r19, 0xFF	; 255
    488a:	e2 fe       	sbrs	r14, 2
    488c:	1b c0       	rjmp	.+54     	; 0x48c4 <dtoa_prf+0x18c>
    488e:	89 e4       	ldi	r24, 0x49	; 73
    4890:	d6 01       	movw	r26, r12
    4892:	8c 93       	st	X, r24
    4894:	8e e4       	ldi	r24, 0x4E	; 78
    4896:	11 96       	adiw	r26, 0x01	; 1
    4898:	8c 93       	st	X, r24
    489a:	11 97       	sbiw	r26, 0x01	; 1
    489c:	86 e4       	ldi	r24, 0x46	; 70
    489e:	12 96       	adiw	r26, 0x02	; 2
    48a0:	8c 93       	st	X, r24
    48a2:	d9 01       	movw	r26, r18
    48a4:	8e 2f       	mov	r24, r30
    48a6:	90 e2       	ldi	r25, 0x20	; 32
    48a8:	88 23       	and	r24, r24
    48aa:	09 f4       	brne	.+2      	; 0x48ae <dtoa_prf+0x176>
    48ac:	a6 cf       	rjmp	.-180    	; 0x47fa <dtoa_prf+0xc2>
    48ae:	9d 93       	st	X+, r25
    48b0:	81 50       	subi	r24, 0x01	; 1
    48b2:	fa cf       	rjmp	.-12     	; 0x48a8 <dtoa_prf+0x170>
    48b4:	2d 93       	st	X+, r18
    48b6:	81 50       	subi	r24, 0x01	; 1
    48b8:	81 11       	cpse	r24, r1
    48ba:	fc cf       	rjmp	.-8      	; 0x48b4 <dtoa_prf+0x17c>
    48bc:	ce 0e       	add	r12, r30
    48be:	d1 1c       	adc	r13, r1
    48c0:	e0 e0       	ldi	r30, 0x00	; 0
    48c2:	d9 cf       	rjmp	.-78     	; 0x4876 <dtoa_prf+0x13e>
    48c4:	89 e6       	ldi	r24, 0x69	; 105
    48c6:	d6 01       	movw	r26, r12
    48c8:	8c 93       	st	X, r24
    48ca:	8e e6       	ldi	r24, 0x6E	; 110
    48cc:	11 96       	adiw	r26, 0x01	; 1
    48ce:	8c 93       	st	X, r24
    48d0:	11 97       	sbiw	r26, 0x01	; 1
    48d2:	86 e6       	ldi	r24, 0x66	; 102
    48d4:	e4 cf       	rjmp	.-56     	; 0x489e <dtoa_prf+0x166>
    48d6:	9b 01       	movw	r18, r22
    48d8:	77 ff       	sbrs	r23, 7
    48da:	02 c0       	rjmp	.+4      	; 0x48e0 <dtoa_prf+0x1a8>
    48dc:	30 e0       	ldi	r19, 0x00	; 0
    48de:	20 e0       	ldi	r18, 0x00	; 0
    48e0:	a1 e0       	ldi	r26, 0x01	; 1
    48e2:	b0 e0       	ldi	r27, 0x00	; 0
    48e4:	91 11       	cpse	r25, r1
    48e6:	02 c0       	rjmp	.+4      	; 0x48ec <dtoa_prf+0x1b4>
    48e8:	b0 e0       	ldi	r27, 0x00	; 0
    48ea:	a0 e0       	ldi	r26, 0x00	; 0
    48ec:	f9 01       	movw	r30, r18
    48ee:	31 96       	adiw	r30, 0x01	; 1
    48f0:	ae 0f       	add	r26, r30
    48f2:	bf 1f       	adc	r27, r31
    48f4:	8b 2c       	mov	r8, r11
    48f6:	91 2c       	mov	r9, r1
    48f8:	bb 20       	and	r11, r11
    48fa:	09 f4       	brne	.+2      	; 0x48fe <dtoa_prf+0x1c6>
    48fc:	61 c0       	rjmp	.+194    	; 0x49c0 <dtoa_prf+0x288>
    48fe:	54 01       	movw	r10, r8
    4900:	ef ef       	ldi	r30, 0xFF	; 255
    4902:	ae 1a       	sub	r10, r30
    4904:	be 0a       	sbc	r11, r30
    4906:	aa 0d       	add	r26, r10
    4908:	bb 1d       	adc	r27, r11
    490a:	fa 16       	cp	r15, r26
    490c:	1b 06       	cpc	r1, r27
    490e:	19 f0       	breq	.+6      	; 0x4916 <dtoa_prf+0x1de>
    4910:	14 f0       	brlt	.+4      	; 0x4916 <dtoa_prf+0x1de>
    4912:	4f 2d       	mov	r20, r15
    4914:	4a 1b       	sub	r20, r26
    4916:	51 11       	cpse	r21, r1
    4918:	88 c0       	rjmp	.+272    	; 0x4a2a <dtoa_prf+0x2f2>
    491a:	e3 fc       	sbrc	r14, 3
    491c:	59 c0       	rjmp	.+178    	; 0x49d0 <dtoa_prf+0x298>
    491e:	76 01       	movw	r14, r12
    4920:	a4 2f       	mov	r26, r20
    4922:	b0 e2       	ldi	r27, 0x20	; 32
    4924:	a1 11       	cpse	r26, r1
    4926:	4f c0       	rjmp	.+158    	; 0x49c6 <dtoa_prf+0x28e>
    4928:	c4 0e       	add	r12, r20
    492a:	d1 1c       	adc	r13, r1
    492c:	99 23       	and	r25, r25
    492e:	09 f4       	brne	.+2      	; 0x4932 <dtoa_prf+0x1fa>
    4930:	5b c0       	rjmp	.+182    	; 0x49e8 <dtoa_prf+0x2b0>
    4932:	40 e0       	ldi	r20, 0x00	; 0
    4934:	d6 01       	movw	r26, r12
    4936:	11 96       	adiw	r26, 0x01	; 1
    4938:	f6 01       	movw	r30, r12
    493a:	90 83       	st	Z, r25
    493c:	6d 01       	movw	r12, r26
    493e:	55 23       	and	r21, r21
    4940:	09 f4       	brne	.+2      	; 0x4944 <dtoa_prf+0x20c>
    4942:	48 c0       	rjmp	.+144    	; 0x49d4 <dtoa_prf+0x29c>
    4944:	01 2f       	mov	r16, r17
    4946:	06 0f       	add	r16, r22
    4948:	9a 81       	ldd	r25, Y+2	; 0x02
    494a:	58 2f       	mov	r21, r24
    494c:	50 71       	andi	r21, 0x10	; 16
    494e:	84 ff       	sbrs	r24, 4
    4950:	03 c0       	rjmp	.+6      	; 0x4958 <dtoa_prf+0x220>
    4952:	91 33       	cpi	r25, 0x31	; 49
    4954:	09 f4       	brne	.+2      	; 0x4958 <dtoa_prf+0x220>
    4956:	01 50       	subi	r16, 0x01	; 1
    4958:	10 16       	cp	r1, r16
    495a:	0c f0       	brlt	.+2      	; 0x495e <dtoa_prf+0x226>
    495c:	47 c0       	rjmp	.+142    	; 0x49ec <dtoa_prf+0x2b4>
    495e:	09 30       	cpi	r16, 0x09	; 9
    4960:	08 f0       	brcs	.+2      	; 0x4964 <dtoa_prf+0x22c>
    4962:	08 e0       	ldi	r16, 0x08	; 8
    4964:	ee e2       	ldi	r30, 0x2E	; 46
    4966:	fe 2e       	mov	r15, r30
    4968:	5b 01       	movw	r10, r22
    496a:	a0 1a       	sub	r10, r16
    496c:	b1 08       	sbc	r11, r1
    496e:	85 01       	movw	r16, r10
    4970:	91 94       	neg	r9
    4972:	81 94       	neg	r8
    4974:	91 08       	sbc	r9, r1
    4976:	2f 3f       	cpi	r18, 0xFF	; 255
    4978:	32 07       	cpc	r19, r18
    497a:	29 f4       	brne	.+10     	; 0x4986 <dtoa_prf+0x24e>
    497c:	d6 01       	movw	r26, r12
    497e:	fc 92       	st	X, r15
    4980:	f6 01       	movw	r30, r12
    4982:	31 96       	adiw	r30, 0x01	; 1
    4984:	6f 01       	movw	r12, r30
    4986:	62 17       	cp	r22, r18
    4988:	73 07       	cpc	r23, r19
    498a:	94 f1       	brlt	.+100    	; 0x49f0 <dtoa_prf+0x2b8>
    498c:	02 17       	cp	r16, r18
    498e:	13 07       	cpc	r17, r19
    4990:	7c f5       	brge	.+94     	; 0x49f0 <dtoa_prf+0x2b8>
    4992:	db 01       	movw	r26, r22
    4994:	a2 1b       	sub	r26, r18
    4996:	b3 0b       	sbc	r27, r19
    4998:	aa 24       	eor	r10, r10
    499a:	a3 94       	inc	r10
    499c:	b1 2c       	mov	r11, r1
    499e:	ac 0e       	add	r10, r28
    49a0:	bd 1e       	adc	r11, r29
    49a2:	aa 0d       	add	r26, r10
    49a4:	bb 1d       	adc	r27, r11
    49a6:	11 96       	adiw	r26, 0x01	; 1
    49a8:	8c 91       	ld	r24, X
    49aa:	21 50       	subi	r18, 0x01	; 1
    49ac:	31 09       	sbc	r19, r1
    49ae:	d6 01       	movw	r26, r12
    49b0:	11 96       	adiw	r26, 0x01	; 1
    49b2:	28 15       	cp	r18, r8
    49b4:	39 05       	cpc	r19, r9
    49b6:	f4 f0       	brlt	.+60     	; 0x49f4 <dtoa_prf+0x2bc>
    49b8:	f6 01       	movw	r30, r12
    49ba:	80 83       	st	Z, r24
    49bc:	6d 01       	movw	r12, r26
    49be:	db cf       	rjmp	.-74     	; 0x4976 <dtoa_prf+0x23e>
    49c0:	b1 2c       	mov	r11, r1
    49c2:	a1 2c       	mov	r10, r1
    49c4:	a0 cf       	rjmp	.-192    	; 0x4906 <dtoa_prf+0x1ce>
    49c6:	f7 01       	movw	r30, r14
    49c8:	b1 93       	st	Z+, r27
    49ca:	7f 01       	movw	r14, r30
    49cc:	a1 50       	subi	r26, 0x01	; 1
    49ce:	aa cf       	rjmp	.-172    	; 0x4924 <dtoa_prf+0x1ec>
    49d0:	91 11       	cpse	r25, r1
    49d2:	b0 cf       	rjmp	.-160    	; 0x4934 <dtoa_prf+0x1fc>
    49d4:	d6 01       	movw	r26, r12
    49d6:	94 2f       	mov	r25, r20
    49d8:	50 e3       	ldi	r21, 0x30	; 48
    49da:	02 c0       	rjmp	.+4      	; 0x49e0 <dtoa_prf+0x2a8>
    49dc:	5d 93       	st	X+, r21
    49de:	91 50       	subi	r25, 0x01	; 1
    49e0:	91 11       	cpse	r25, r1
    49e2:	fc cf       	rjmp	.-8      	; 0x49dc <dtoa_prf+0x2a4>
    49e4:	c4 0e       	add	r12, r20
    49e6:	d1 1c       	adc	r13, r1
    49e8:	40 e0       	ldi	r20, 0x00	; 0
    49ea:	ac cf       	rjmp	.-168    	; 0x4944 <dtoa_prf+0x20c>
    49ec:	01 e0       	ldi	r16, 0x01	; 1
    49ee:	ba cf       	rjmp	.-140    	; 0x4964 <dtoa_prf+0x22c>
    49f0:	80 e3       	ldi	r24, 0x30	; 48
    49f2:	db cf       	rjmp	.-74     	; 0x49aa <dtoa_prf+0x272>
    49f4:	62 17       	cp	r22, r18
    49f6:	73 07       	cpc	r23, r19
    49f8:	31 f4       	brne	.+12     	; 0x4a06 <dtoa_prf+0x2ce>
    49fa:	96 33       	cpi	r25, 0x36	; 54
    49fc:	88 f4       	brcc	.+34     	; 0x4a20 <dtoa_prf+0x2e8>
    49fe:	95 33       	cpi	r25, 0x35	; 53
    4a00:	11 f4       	brne	.+4      	; 0x4a06 <dtoa_prf+0x2ce>
    4a02:	55 23       	and	r21, r21
    4a04:	69 f0       	breq	.+26     	; 0x4a20 <dtoa_prf+0x2e8>
    4a06:	f6 01       	movw	r30, r12
    4a08:	80 83       	st	Z, r24
    4a0a:	fd 01       	movw	r30, r26
    4a0c:	84 2f       	mov	r24, r20
    4a0e:	90 e2       	ldi	r25, 0x20	; 32
    4a10:	81 11       	cpse	r24, r1
    4a12:	08 c0       	rjmp	.+16     	; 0x4a24 <dtoa_prf+0x2ec>
    4a14:	a4 0f       	add	r26, r20
    4a16:	b1 1d       	adc	r27, r1
    4a18:	1c 92       	st	X, r1
    4a1a:	90 e0       	ldi	r25, 0x00	; 0
    4a1c:	80 e0       	ldi	r24, 0x00	; 0
    4a1e:	f3 ce       	rjmp	.-538    	; 0x4806 <dtoa_prf+0xce>
    4a20:	81 e3       	ldi	r24, 0x31	; 49
    4a22:	f1 cf       	rjmp	.-30     	; 0x4a06 <dtoa_prf+0x2ce>
    4a24:	91 93       	st	Z+, r25
    4a26:	81 50       	subi	r24, 0x01	; 1
    4a28:	f3 cf       	rjmp	.-26     	; 0x4a10 <dtoa_prf+0x2d8>
    4a2a:	91 11       	cpse	r25, r1
    4a2c:	83 cf       	rjmp	.-250    	; 0x4934 <dtoa_prf+0x1fc>
    4a2e:	8a cf       	rjmp	.-236    	; 0x4944 <dtoa_prf+0x20c>

00004a30 <__ftoa_engine>:
__ftoa_engine():
    4a30:	28 30       	cpi	r18, 0x08	; 8
    4a32:	08 f0       	brcs	.+2      	; 0x4a36 <__ftoa_engine+0x6>
    4a34:	27 e0       	ldi	r18, 0x07	; 7
    4a36:	33 27       	eor	r19, r19
    4a38:	da 01       	movw	r26, r20
    4a3a:	99 0f       	add	r25, r25
    4a3c:	31 1d       	adc	r19, r1
    4a3e:	87 fd       	sbrc	r24, 7
    4a40:	91 60       	ori	r25, 0x01	; 1
    4a42:	00 96       	adiw	r24, 0x00	; 0
    4a44:	61 05       	cpc	r22, r1
    4a46:	71 05       	cpc	r23, r1
    4a48:	39 f4       	brne	.+14     	; 0x4a58 <__ftoa_engine+0x28>
    4a4a:	32 60       	ori	r19, 0x02	; 2
    4a4c:	2e 5f       	subi	r18, 0xFE	; 254
    4a4e:	3d 93       	st	X+, r19
    4a50:	30 e3       	ldi	r19, 0x30	; 48
    4a52:	2a 95       	dec	r18
    4a54:	e1 f7       	brne	.-8      	; 0x4a4e <__ftoa_engine+0x1e>
    4a56:	08 95       	ret
    4a58:	9f 3f       	cpi	r25, 0xFF	; 255
    4a5a:	30 f0       	brcs	.+12     	; 0x4a68 <__ftoa_engine+0x38>
    4a5c:	80 38       	cpi	r24, 0x80	; 128
    4a5e:	71 05       	cpc	r23, r1
    4a60:	61 05       	cpc	r22, r1
    4a62:	09 f0       	breq	.+2      	; 0x4a66 <__ftoa_engine+0x36>
    4a64:	3c 5f       	subi	r19, 0xFC	; 252
    4a66:	3c 5f       	subi	r19, 0xFC	; 252
    4a68:	3d 93       	st	X+, r19
    4a6a:	91 30       	cpi	r25, 0x01	; 1
    4a6c:	08 f0       	brcs	.+2      	; 0x4a70 <__ftoa_engine+0x40>
    4a6e:	80 68       	ori	r24, 0x80	; 128
    4a70:	91 1d       	adc	r25, r1
    4a72:	df 93       	push	r29
    4a74:	cf 93       	push	r28
    4a76:	1f 93       	push	r17
    4a78:	0f 93       	push	r16
    4a7a:	ff 92       	push	r15
    4a7c:	ef 92       	push	r14
    4a7e:	19 2f       	mov	r17, r25
    4a80:	98 7f       	andi	r25, 0xF8	; 248
    4a82:	96 95       	lsr	r25
    4a84:	e9 2f       	mov	r30, r25
    4a86:	96 95       	lsr	r25
    4a88:	96 95       	lsr	r25
    4a8a:	e9 0f       	add	r30, r25
    4a8c:	ff 27       	eor	r31, r31
    4a8e:	ea 51       	subi	r30, 0x1A	; 26
    4a90:	ff 4f       	sbci	r31, 0xFF	; 255
    4a92:	99 27       	eor	r25, r25
    4a94:	33 27       	eor	r19, r19
    4a96:	ee 24       	eor	r14, r14
    4a98:	ff 24       	eor	r15, r15
    4a9a:	a7 01       	movw	r20, r14
    4a9c:	e7 01       	movw	r28, r14
    4a9e:	05 90       	lpm	r0, Z+
    4aa0:	08 94       	sec
    4aa2:	07 94       	ror	r0
    4aa4:	28 f4       	brcc	.+10     	; 0x4ab0 <__ftoa_engine+0x80>
    4aa6:	36 0f       	add	r19, r22
    4aa8:	e7 1e       	adc	r14, r23
    4aaa:	f8 1e       	adc	r15, r24
    4aac:	49 1f       	adc	r20, r25
    4aae:	51 1d       	adc	r21, r1
    4ab0:	66 0f       	add	r22, r22
    4ab2:	77 1f       	adc	r23, r23
    4ab4:	88 1f       	adc	r24, r24
    4ab6:	99 1f       	adc	r25, r25
    4ab8:	06 94       	lsr	r0
    4aba:	a1 f7       	brne	.-24     	; 0x4aa4 <__ftoa_engine+0x74>
    4abc:	05 90       	lpm	r0, Z+
    4abe:	07 94       	ror	r0
    4ac0:	28 f4       	brcc	.+10     	; 0x4acc <__ftoa_engine+0x9c>
    4ac2:	e7 0e       	add	r14, r23
    4ac4:	f8 1e       	adc	r15, r24
    4ac6:	49 1f       	adc	r20, r25
    4ac8:	56 1f       	adc	r21, r22
    4aca:	c1 1d       	adc	r28, r1
    4acc:	77 0f       	add	r23, r23
    4ace:	88 1f       	adc	r24, r24
    4ad0:	99 1f       	adc	r25, r25
    4ad2:	66 1f       	adc	r22, r22
    4ad4:	06 94       	lsr	r0
    4ad6:	a1 f7       	brne	.-24     	; 0x4ac0 <__ftoa_engine+0x90>
    4ad8:	05 90       	lpm	r0, Z+
    4ada:	07 94       	ror	r0
    4adc:	28 f4       	brcc	.+10     	; 0x4ae8 <__ftoa_engine+0xb8>
    4ade:	f8 0e       	add	r15, r24
    4ae0:	49 1f       	adc	r20, r25
    4ae2:	56 1f       	adc	r21, r22
    4ae4:	c7 1f       	adc	r28, r23
    4ae6:	d1 1d       	adc	r29, r1
    4ae8:	88 0f       	add	r24, r24
    4aea:	99 1f       	adc	r25, r25
    4aec:	66 1f       	adc	r22, r22
    4aee:	77 1f       	adc	r23, r23
    4af0:	06 94       	lsr	r0
    4af2:	a1 f7       	brne	.-24     	; 0x4adc <__ftoa_engine+0xac>
    4af4:	05 90       	lpm	r0, Z+
    4af6:	07 94       	ror	r0
    4af8:	20 f4       	brcc	.+8      	; 0x4b02 <__ftoa_engine+0xd2>
    4afa:	49 0f       	add	r20, r25
    4afc:	56 1f       	adc	r21, r22
    4afe:	c7 1f       	adc	r28, r23
    4b00:	d8 1f       	adc	r29, r24
    4b02:	99 0f       	add	r25, r25
    4b04:	66 1f       	adc	r22, r22
    4b06:	77 1f       	adc	r23, r23
    4b08:	88 1f       	adc	r24, r24
    4b0a:	06 94       	lsr	r0
    4b0c:	a9 f7       	brne	.-22     	; 0x4af8 <__ftoa_engine+0xc8>
    4b0e:	84 91       	lpm	r24, Z
    4b10:	10 95       	com	r17
    4b12:	17 70       	andi	r17, 0x07	; 7
    4b14:	41 f0       	breq	.+16     	; 0x4b26 <__ftoa_engine+0xf6>
    4b16:	d6 95       	lsr	r29
    4b18:	c7 95       	ror	r28
    4b1a:	57 95       	ror	r21
    4b1c:	47 95       	ror	r20
    4b1e:	f7 94       	ror	r15
    4b20:	e7 94       	ror	r14
    4b22:	1a 95       	dec	r17
    4b24:	c1 f7       	brne	.-16     	; 0x4b16 <__ftoa_engine+0xe6>
    4b26:	ec e8       	ldi	r30, 0x8C	; 140
    4b28:	f0 e0       	ldi	r31, 0x00	; 0
    4b2a:	68 94       	set
    4b2c:	15 90       	lpm	r1, Z+
    4b2e:	15 91       	lpm	r17, Z+
    4b30:	35 91       	lpm	r19, Z+
    4b32:	65 91       	lpm	r22, Z+
    4b34:	95 91       	lpm	r25, Z+
    4b36:	05 90       	lpm	r0, Z+
    4b38:	7f e2       	ldi	r23, 0x2F	; 47
    4b3a:	73 95       	inc	r23
    4b3c:	e1 18       	sub	r14, r1
    4b3e:	f1 0a       	sbc	r15, r17
    4b40:	43 0b       	sbc	r20, r19
    4b42:	56 0b       	sbc	r21, r22
    4b44:	c9 0b       	sbc	r28, r25
    4b46:	d0 09       	sbc	r29, r0
    4b48:	c0 f7       	brcc	.-16     	; 0x4b3a <__ftoa_engine+0x10a>
    4b4a:	e1 0c       	add	r14, r1
    4b4c:	f1 1e       	adc	r15, r17
    4b4e:	43 1f       	adc	r20, r19
    4b50:	56 1f       	adc	r21, r22
    4b52:	c9 1f       	adc	r28, r25
    4b54:	d0 1d       	adc	r29, r0
    4b56:	7e f4       	brtc	.+30     	; 0x4b76 <__ftoa_engine+0x146>
    4b58:	70 33       	cpi	r23, 0x30	; 48
    4b5a:	11 f4       	brne	.+4      	; 0x4b60 <__ftoa_engine+0x130>
    4b5c:	8a 95       	dec	r24
    4b5e:	e6 cf       	rjmp	.-52     	; 0x4b2c <__ftoa_engine+0xfc>
    4b60:	e8 94       	clt
    4b62:	01 50       	subi	r16, 0x01	; 1
    4b64:	30 f0       	brcs	.+12     	; 0x4b72 <__ftoa_engine+0x142>
    4b66:	08 0f       	add	r16, r24
    4b68:	0a f4       	brpl	.+2      	; 0x4b6c <__ftoa_engine+0x13c>
    4b6a:	00 27       	eor	r16, r16
    4b6c:	02 17       	cp	r16, r18
    4b6e:	08 f4       	brcc	.+2      	; 0x4b72 <__ftoa_engine+0x142>
    4b70:	20 2f       	mov	r18, r16
    4b72:	23 95       	inc	r18
    4b74:	02 2f       	mov	r16, r18
    4b76:	7a 33       	cpi	r23, 0x3A	; 58
    4b78:	28 f0       	brcs	.+10     	; 0x4b84 <__ftoa_engine+0x154>
    4b7a:	79 e3       	ldi	r23, 0x39	; 57
    4b7c:	7d 93       	st	X+, r23
    4b7e:	2a 95       	dec	r18
    4b80:	e9 f7       	brne	.-6      	; 0x4b7c <__ftoa_engine+0x14c>
    4b82:	10 c0       	rjmp	.+32     	; 0x4ba4 <__ftoa_engine+0x174>
    4b84:	7d 93       	st	X+, r23
    4b86:	2a 95       	dec	r18
    4b88:	89 f6       	brne	.-94     	; 0x4b2c <__ftoa_engine+0xfc>
    4b8a:	06 94       	lsr	r0
    4b8c:	97 95       	ror	r25
    4b8e:	67 95       	ror	r22
    4b90:	37 95       	ror	r19
    4b92:	17 95       	ror	r17
    4b94:	17 94       	ror	r1
    4b96:	e1 18       	sub	r14, r1
    4b98:	f1 0a       	sbc	r15, r17
    4b9a:	43 0b       	sbc	r20, r19
    4b9c:	56 0b       	sbc	r21, r22
    4b9e:	c9 0b       	sbc	r28, r25
    4ba0:	d0 09       	sbc	r29, r0
    4ba2:	98 f0       	brcs	.+38     	; 0x4bca <__ftoa_engine+0x19a>
    4ba4:	23 95       	inc	r18
    4ba6:	7e 91       	ld	r23, -X
    4ba8:	73 95       	inc	r23
    4baa:	7a 33       	cpi	r23, 0x3A	; 58
    4bac:	08 f0       	brcs	.+2      	; 0x4bb0 <__ftoa_engine+0x180>
    4bae:	70 e3       	ldi	r23, 0x30	; 48
    4bb0:	7c 93       	st	X, r23
    4bb2:	20 13       	cpse	r18, r16
    4bb4:	b8 f7       	brcc	.-18     	; 0x4ba4 <__ftoa_engine+0x174>
    4bb6:	7e 91       	ld	r23, -X
    4bb8:	70 61       	ori	r23, 0x10	; 16
    4bba:	7d 93       	st	X+, r23
    4bbc:	30 f0       	brcs	.+12     	; 0x4bca <__ftoa_engine+0x19a>
    4bbe:	83 95       	inc	r24
    4bc0:	71 e3       	ldi	r23, 0x31	; 49
    4bc2:	7d 93       	st	X+, r23
    4bc4:	70 e3       	ldi	r23, 0x30	; 48
    4bc6:	2a 95       	dec	r18
    4bc8:	e1 f7       	brne	.-8      	; 0x4bc2 <__ftoa_engine+0x192>
    4bca:	11 24       	eor	r1, r1
    4bcc:	ef 90       	pop	r14
    4bce:	ff 90       	pop	r15
    4bd0:	0f 91       	pop	r16
    4bd2:	1f 91       	pop	r17
    4bd4:	cf 91       	pop	r28
    4bd6:	df 91       	pop	r29
    4bd8:	99 27       	eor	r25, r25
    4bda:	87 fd       	sbrc	r24, 7
    4bdc:	90 95       	com	r25
    4bde:	08 95       	ret

00004be0 <strnlen_P>:
strnlen_P():
    4be0:	fc 01       	movw	r30, r24
    4be2:	05 90       	lpm	r0, Z+
    4be4:	61 50       	subi	r22, 0x01	; 1
    4be6:	70 40       	sbci	r23, 0x00	; 0
    4be8:	01 10       	cpse	r0, r1
    4bea:	d8 f7       	brcc	.-10     	; 0x4be2 <strnlen_P+0x2>
    4bec:	80 95       	com	r24
    4bee:	90 95       	com	r25
    4bf0:	8e 0f       	add	r24, r30
    4bf2:	9f 1f       	adc	r25, r31
    4bf4:	08 95       	ret

00004bf6 <strnlen>:
strnlen():
    4bf6:	fc 01       	movw	r30, r24
    4bf8:	61 50       	subi	r22, 0x01	; 1
    4bfa:	70 40       	sbci	r23, 0x00	; 0
    4bfc:	01 90       	ld	r0, Z+
    4bfe:	01 10       	cpse	r0, r1
    4c00:	d8 f7       	brcc	.-10     	; 0x4bf8 <strnlen+0x2>
    4c02:	80 95       	com	r24
    4c04:	90 95       	com	r25
    4c06:	8e 0f       	add	r24, r30
    4c08:	9f 1f       	adc	r25, r31
    4c0a:	08 95       	ret

00004c0c <fputc>:
fputc():
    4c0c:	0f 93       	push	r16
    4c0e:	1f 93       	push	r17
    4c10:	cf 93       	push	r28
    4c12:	df 93       	push	r29
    4c14:	18 2f       	mov	r17, r24
    4c16:	09 2f       	mov	r16, r25
    4c18:	eb 01       	movw	r28, r22
    4c1a:	8b 81       	ldd	r24, Y+3	; 0x03
    4c1c:	81 fd       	sbrc	r24, 1
    4c1e:	09 c0       	rjmp	.+18     	; 0x4c32 <fputc+0x26>
    4c20:	1f ef       	ldi	r17, 0xFF	; 255
    4c22:	0f ef       	ldi	r16, 0xFF	; 255
    4c24:	81 2f       	mov	r24, r17
    4c26:	90 2f       	mov	r25, r16
    4c28:	df 91       	pop	r29
    4c2a:	cf 91       	pop	r28
    4c2c:	1f 91       	pop	r17
    4c2e:	0f 91       	pop	r16
    4c30:	08 95       	ret
    4c32:	82 ff       	sbrs	r24, 2
    4c34:	14 c0       	rjmp	.+40     	; 0x4c5e <fputc+0x52>
    4c36:	2e 81       	ldd	r18, Y+6	; 0x06
    4c38:	3f 81       	ldd	r19, Y+7	; 0x07
    4c3a:	8c 81       	ldd	r24, Y+4	; 0x04
    4c3c:	9d 81       	ldd	r25, Y+5	; 0x05
    4c3e:	28 17       	cp	r18, r24
    4c40:	39 07       	cpc	r19, r25
    4c42:	3c f4       	brge	.+14     	; 0x4c52 <fputc+0x46>
    4c44:	e8 81       	ld	r30, Y
    4c46:	f9 81       	ldd	r31, Y+1	; 0x01
    4c48:	cf 01       	movw	r24, r30
    4c4a:	01 96       	adiw	r24, 0x01	; 1
    4c4c:	99 83       	std	Y+1, r25	; 0x01
    4c4e:	88 83       	st	Y, r24
    4c50:	10 83       	st	Z, r17
    4c52:	8e 81       	ldd	r24, Y+6	; 0x06
    4c54:	9f 81       	ldd	r25, Y+7	; 0x07
    4c56:	01 96       	adiw	r24, 0x01	; 1
    4c58:	9f 83       	std	Y+7, r25	; 0x07
    4c5a:	8e 83       	std	Y+6, r24	; 0x06
    4c5c:	e3 cf       	rjmp	.-58     	; 0x4c24 <fputc+0x18>
    4c5e:	e8 85       	ldd	r30, Y+8	; 0x08
    4c60:	f9 85       	ldd	r31, Y+9	; 0x09
    4c62:	81 2f       	mov	r24, r17
    4c64:	09 95       	icall
    4c66:	89 2b       	or	r24, r25
    4c68:	a1 f3       	breq	.-24     	; 0x4c52 <fputc+0x46>
    4c6a:	da cf       	rjmp	.-76     	; 0x4c20 <fputc+0x14>

00004c6c <__ultoa_invert>:
__ultoa_invert():
    4c6c:	fa 01       	movw	r30, r20
    4c6e:	aa 27       	eor	r26, r26
    4c70:	28 30       	cpi	r18, 0x08	; 8
    4c72:	51 f1       	breq	.+84     	; 0x4cc8 <__ultoa_invert+0x5c>
    4c74:	20 31       	cpi	r18, 0x10	; 16
    4c76:	81 f1       	breq	.+96     	; 0x4cd8 <__ultoa_invert+0x6c>
    4c78:	e8 94       	clt
    4c7a:	6f 93       	push	r22
    4c7c:	6e 7f       	andi	r22, 0xFE	; 254
    4c7e:	6e 5f       	subi	r22, 0xFE	; 254
    4c80:	7f 4f       	sbci	r23, 0xFF	; 255
    4c82:	8f 4f       	sbci	r24, 0xFF	; 255
    4c84:	9f 4f       	sbci	r25, 0xFF	; 255
    4c86:	af 4f       	sbci	r26, 0xFF	; 255
    4c88:	b1 e0       	ldi	r27, 0x01	; 1
    4c8a:	3e d0       	rcall	.+124    	; 0x4d08 <__ultoa_invert+0x9c>
    4c8c:	b4 e0       	ldi	r27, 0x04	; 4
    4c8e:	3c d0       	rcall	.+120    	; 0x4d08 <__ultoa_invert+0x9c>
    4c90:	67 0f       	add	r22, r23
    4c92:	78 1f       	adc	r23, r24
    4c94:	89 1f       	adc	r24, r25
    4c96:	9a 1f       	adc	r25, r26
    4c98:	a1 1d       	adc	r26, r1
    4c9a:	68 0f       	add	r22, r24
    4c9c:	79 1f       	adc	r23, r25
    4c9e:	8a 1f       	adc	r24, r26
    4ca0:	91 1d       	adc	r25, r1
    4ca2:	a1 1d       	adc	r26, r1
    4ca4:	6a 0f       	add	r22, r26
    4ca6:	71 1d       	adc	r23, r1
    4ca8:	81 1d       	adc	r24, r1
    4caa:	91 1d       	adc	r25, r1
    4cac:	a1 1d       	adc	r26, r1
    4cae:	20 d0       	rcall	.+64     	; 0x4cf0 <__ultoa_invert+0x84>
    4cb0:	09 f4       	brne	.+2      	; 0x4cb4 <__ultoa_invert+0x48>
    4cb2:	68 94       	set
    4cb4:	3f 91       	pop	r19
    4cb6:	2a e0       	ldi	r18, 0x0A	; 10
    4cb8:	26 9f       	mul	r18, r22
    4cba:	11 24       	eor	r1, r1
    4cbc:	30 19       	sub	r19, r0
    4cbe:	30 5d       	subi	r19, 0xD0	; 208
    4cc0:	31 93       	st	Z+, r19
    4cc2:	de f6       	brtc	.-74     	; 0x4c7a <__ultoa_invert+0xe>
    4cc4:	cf 01       	movw	r24, r30
    4cc6:	08 95       	ret
    4cc8:	46 2f       	mov	r20, r22
    4cca:	47 70       	andi	r20, 0x07	; 7
    4ccc:	40 5d       	subi	r20, 0xD0	; 208
    4cce:	41 93       	st	Z+, r20
    4cd0:	b3 e0       	ldi	r27, 0x03	; 3
    4cd2:	0f d0       	rcall	.+30     	; 0x4cf2 <__ultoa_invert+0x86>
    4cd4:	c9 f7       	brne	.-14     	; 0x4cc8 <__ultoa_invert+0x5c>
    4cd6:	f6 cf       	rjmp	.-20     	; 0x4cc4 <__ultoa_invert+0x58>
    4cd8:	46 2f       	mov	r20, r22
    4cda:	4f 70       	andi	r20, 0x0F	; 15
    4cdc:	40 5d       	subi	r20, 0xD0	; 208
    4cde:	4a 33       	cpi	r20, 0x3A	; 58
    4ce0:	18 f0       	brcs	.+6      	; 0x4ce8 <__ultoa_invert+0x7c>
    4ce2:	49 5d       	subi	r20, 0xD9	; 217
    4ce4:	31 fd       	sbrc	r19, 1
    4ce6:	40 52       	subi	r20, 0x20	; 32
    4ce8:	41 93       	st	Z+, r20
    4cea:	02 d0       	rcall	.+4      	; 0x4cf0 <__ultoa_invert+0x84>
    4cec:	a9 f7       	brne	.-22     	; 0x4cd8 <__ultoa_invert+0x6c>
    4cee:	ea cf       	rjmp	.-44     	; 0x4cc4 <__ultoa_invert+0x58>
    4cf0:	b4 e0       	ldi	r27, 0x04	; 4
    4cf2:	a6 95       	lsr	r26
    4cf4:	97 95       	ror	r25
    4cf6:	87 95       	ror	r24
    4cf8:	77 95       	ror	r23
    4cfa:	67 95       	ror	r22
    4cfc:	ba 95       	dec	r27
    4cfe:	c9 f7       	brne	.-14     	; 0x4cf2 <__ultoa_invert+0x86>
    4d00:	00 97       	sbiw	r24, 0x00	; 0
    4d02:	61 05       	cpc	r22, r1
    4d04:	71 05       	cpc	r23, r1
    4d06:	08 95       	ret
    4d08:	9b 01       	movw	r18, r22
    4d0a:	ac 01       	movw	r20, r24
    4d0c:	0a 2e       	mov	r0, r26
    4d0e:	06 94       	lsr	r0
    4d10:	57 95       	ror	r21
    4d12:	47 95       	ror	r20
    4d14:	37 95       	ror	r19
    4d16:	27 95       	ror	r18
    4d18:	ba 95       	dec	r27
    4d1a:	c9 f7       	brne	.-14     	; 0x4d0e <__ultoa_invert+0xa2>
    4d1c:	62 0f       	add	r22, r18
    4d1e:	73 1f       	adc	r23, r19
    4d20:	84 1f       	adc	r24, r20
    4d22:	95 1f       	adc	r25, r21
    4d24:	a0 1d       	adc	r26, r0
    4d26:	08 95       	ret

00004d28 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    4d28:	f8 94       	cli

00004d2a <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    4d2a:	ff cf       	rjmp	.-2      	; 0x4d2a <__stop_program>
