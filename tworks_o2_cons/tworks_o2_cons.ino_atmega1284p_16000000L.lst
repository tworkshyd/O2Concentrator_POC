
C:\Users\habeeba\AppData\Local\Temp\arduino_build_733543/tworks_o2_cons.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__ctors_end>
       4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
       8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
       c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      14:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      1c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      20:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      24:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      28:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      2c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      30:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      34:	0c 94 e4 03 	jmp	0x7c8	; 0x7c8 <__vector_13>
      38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      3c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      44:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      48:	0c 94 78 11 	jmp	0x22f0	; 0x22f0 <__vector_18>
      4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      50:	0c 94 99 14 	jmp	0x2932	; 0x2932 <__vector_20>
      54:	0c 94 cf 14 	jmp	0x299e	; 0x299e <__vector_21>
      58:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      5c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      60:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      68:	0c 94 53 10 	jmp	0x20a6	; 0x20a6 <__vector_26>
      6c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      70:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      74:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      78:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      7c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      80:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      84:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      88:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	30 2e       	mov	r3, r16
      8e:	33 2e       	mov	r3, r19
      90:	31 00       	.word	0x0031	; ????

00000092 <digital_pin_to_timer_PGM>:
      92:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

000000b2 <digital_pin_to_bit_mask_PGM>:
      b2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
      c2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000000d2 <digital_pin_to_port_PGM>:
      d2:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
      e2:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

000000f2 <port_to_input_PGM>:
      f2:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

000000fc <port_to_output_PGM>:
      fc:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

00000106 <port_to_mode_PGM>:
     106:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

00000110 <__ctors_start>:
__ctors_start():
     110:	78 09       	sbc	r23, r8
     112:	44 0f       	add	r20, r20
     114:	03 15       	cp	r16, r3

00000116 <__ctors_end>:
__dtors_end():
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d0 e4       	ldi	r29, 0x40	; 64
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     122:	13 e0       	ldi	r17, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     124:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     126:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     128:	e0 e1       	ldi	r30, 0x10	; 16
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     12a:	fa e3       	ldi	r31, 0x3A	; 58
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     12c:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     12e:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     132:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     134:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     136:	a0 3f       	cpi	r26, 0xF0	; 240
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     138:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     13c:	26 e0       	ldi	r18, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     13e:	a0 ef       	ldi	r26, 0xF0	; 240
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     140:	b3 e0       	ldi	r27, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     146:	ad 34       	cpi	r26, 0x4D	; 77
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     148:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>

0000014c <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     14c:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     14e:	cb e8       	ldi	r28, 0x8B	; 139
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     150:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     152:	04 c0       	rjmp	.+8      	; 0x15c <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     154:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     156:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     158:	0e 94 1f 1a 	call	0x343e	; 0x343e <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     15c:	c8 38       	cpi	r28, 0x88	; 136
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     15e:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     160:	c9 f7       	brne	.-14     	; 0x154 <__do_global_ctors+0x8>
     162:	0e 94 9e 17 	call	0x2f3c	; 0x2f3c <main>
     166:	0c 94 06 1d 	jmp	0x3a0c	; 0x3a0c <_exit>

0000016a <__bad_interrupt>:
__vector_22():
     16a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016e <lcd_clear_buf(char*)>:
_Z13lcd_clear_bufPc():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:466

    lcd.clear();
    lcd.setCursor(0, 3);
    //  "1.3.5.7.9.........20"
    lcd.print("Testing over...!!   ");
    new_delay_msecs (2000);
     16e:	00 97       	sbiw	r24, 0x00	; 0
     170:	49 f0       	breq	.+18     	; 0x184 <lcd_clear_buf(char*)+0x16>
     172:	fc 01       	movw	r30, r24
     174:	9c 01       	movw	r18, r24
     176:	2c 5e       	subi	r18, 0xEC	; 236
     178:	3f 4f       	sbci	r19, 0xFF	; 255
     17a:	40 e2       	ldi	r20, 0x20	; 32
     17c:	41 93       	st	Z+, r20
     17e:	2e 17       	cp	r18, r30
     180:	3f 07       	cpc	r19, r31
     182:	e1 f7       	brne	.-8      	; 0x17c <lcd_clear_buf(char*)+0xe>
     184:	fc 01       	movw	r30, r24
     186:	14 8a       	std	Z+20, r1	; 0x14
     188:	08 95       	ret

0000018a <set7segmentDigit(int, int, unsigned char)>:
_Z16set7segmentDigitiih():
     18a:	0f 93       	push	r16
     18c:	1f 93       	push	r17
     18e:	cf 93       	push	r28
     190:	8b 01       	movw	r16, r22
     192:	c0 e0       	ldi	r28, 0x00	; 0
     194:	41 30       	cpi	r20, 0x01	; 1
     196:	09 f4       	brne	.+2      	; 0x19a <set7segmentDigit(int, int, unsigned char)+0x10>
     198:	c0 e8       	ldi	r28, 0x80	; 128
     19a:	28 2f       	mov	r18, r24
     19c:	41 e0       	ldi	r20, 0x01	; 1
     19e:	67 e0       	ldi	r22, 0x07	; 7
     1a0:	85 e0       	ldi	r24, 0x05	; 5
     1a2:	0e 94 28 13 	call	0x2650	; 0x2650 <shiftOut>
     1a6:	f8 01       	movw	r30, r16
     1a8:	e0 50       	subi	r30, 0x00	; 0
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	20 81       	ld	r18, Z
     1ae:	2c 2b       	or	r18, r28
     1b0:	41 e0       	ldi	r20, 0x01	; 1
     1b2:	67 e0       	ldi	r22, 0x07	; 7
     1b4:	85 e0       	ldi	r24, 0x05	; 5
     1b6:	0e 94 28 13 	call	0x2650	; 0x2650 <shiftOut>
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	8d e0       	ldi	r24, 0x0D	; 13
     1be:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
     1c2:	61 e0       	ldi	r22, 0x01	; 1
     1c4:	8d e0       	ldi	r24, 0x0D	; 13
     1c6:	cf 91       	pop	r28
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <digitalWrite>

000001d0 <set7segmentRegister(int, int)>:
_Z19set7segmentRegisterii():
     1d0:	cf 93       	push	r28
     1d2:	c6 2f       	mov	r28, r22
     1d4:	28 2f       	mov	r18, r24
     1d6:	41 e0       	ldi	r20, 0x01	; 1
     1d8:	67 e0       	ldi	r22, 0x07	; 7
     1da:	85 e0       	ldi	r24, 0x05	; 5
     1dc:	0e 94 28 13 	call	0x2650	; 0x2650 <shiftOut>
     1e0:	2c 2f       	mov	r18, r28
     1e2:	41 e0       	ldi	r20, 0x01	; 1
     1e4:	67 e0       	ldi	r22, 0x07	; 7
     1e6:	85 e0       	ldi	r24, 0x05	; 5
     1e8:	0e 94 28 13 	call	0x2650	; 0x2650 <shiftOut>
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	8d e0       	ldi	r24, 0x0D	; 13
     1f0:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	8d e0       	ldi	r24, 0x0D	; 13
     1f8:	cf 91       	pop	r28
     1fa:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <digitalWrite>

000001fe <init_7segments()>:
_Z14init_7segmentsv():
     1fe:	67 e0       	ldi	r22, 0x07	; 7
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	8a e0       	ldi	r24, 0x0A	; 10
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set7segmentRegister(int, int)>
     20a:	61 e0       	ldi	r22, 0x01	; 1
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	8c e0       	ldi	r24, 0x0C	; 12
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <set7segmentRegister(int, int)>

00000216 <display_o2(float)>:
_Z10display_o2f():
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	40 e2       	ldi	r20, 0x20	; 32
     224:	51 e4       	ldi	r21, 0x41	; 65
     226:	0e 94 77 19 	call	0x32ee	; 0x32ee <__mulsf3>
     22a:	0e 94 91 18 	call	0x3122	; 0x3122 <__fixunssfsi>
     22e:	eb 01       	movw	r28, r22
     230:	cb 01       	movw	r24, r22
     232:	64 e6       	ldi	r22, 0x64	; 100
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
     23a:	cb 01       	movw	r24, r22
     23c:	0a e0       	ldi	r16, 0x0A	; 10
     23e:	10 e0       	ldi	r17, 0x00	; 0
     240:	b8 01       	movw	r22, r16
     242:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	bc 01       	movw	r22, r24
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     252:	ce 01       	movw	r24, r28
     254:	b8 01       	movw	r22, r16
     256:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
     25a:	ec 01       	movw	r28, r24
     25c:	cb 01       	movw	r24, r22
     25e:	b8 01       	movw	r22, r16
     260:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
     264:	41 e0       	ldi	r20, 0x01	; 1
     266:	bc 01       	movw	r22, r24
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     270:	40 e0       	ldi	r20, 0x00	; 0
     272:	be 01       	movw	r22, r28
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	0c 94 c5 00 	jmp	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>

00000284 <display_total_run_hours(unsigned long)>:
_Z23display_total_run_hoursm():
     284:	8f 92       	push	r8
     286:	9f 92       	push	r9
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	4b 01       	movw	r8, r22
     296:	5c 01       	movw	r10, r24
     298:	20 e1       	ldi	r18, 0x10	; 16
     29a:	37 e2       	ldi	r19, 0x27	; 39
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
     2a4:	8a e0       	ldi	r24, 0x0A	; 10
     2a6:	c8 2e       	mov	r12, r24
     2a8:	d1 2c       	mov	r13, r1
     2aa:	e1 2c       	mov	r14, r1
     2ac:	f1 2c       	mov	r15, r1
     2ae:	ca 01       	movw	r24, r20
     2b0:	b9 01       	movw	r22, r18
     2b2:	a7 01       	movw	r20, r14
     2b4:	96 01       	movw	r18, r12
     2b6:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
     2ba:	40 e0       	ldi	r20, 0x00	; 0
     2bc:	84 e0       	ldi	r24, 0x04	; 4
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     2c4:	c5 01       	movw	r24, r10
     2c6:	b4 01       	movw	r22, r8
     2c8:	28 ee       	ldi	r18, 0xE8	; 232
     2ca:	33 e0       	ldi	r19, 0x03	; 3
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
     2d4:	ca 01       	movw	r24, r20
     2d6:	b9 01       	movw	r22, r18
     2d8:	a7 01       	movw	r20, r14
     2da:	96 01       	movw	r18, r12
     2dc:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
     2e0:	40 e0       	ldi	r20, 0x00	; 0
     2e2:	85 e0       	ldi	r24, 0x05	; 5
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     2ea:	c5 01       	movw	r24, r10
     2ec:	b4 01       	movw	r22, r8
     2ee:	24 e6       	ldi	r18, 0x64	; 100
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
     2fa:	ca 01       	movw	r24, r20
     2fc:	b9 01       	movw	r22, r18
     2fe:	a7 01       	movw	r20, r14
     300:	96 01       	movw	r18, r12
     302:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	86 e0       	ldi	r24, 0x06	; 6
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     310:	c5 01       	movw	r24, r10
     312:	b4 01       	movw	r22, r8
     314:	a7 01       	movw	r20, r14
     316:	96 01       	movw	r18, r12
     318:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
     31c:	4b 01       	movw	r8, r22
     31e:	ca 01       	movw	r24, r20
     320:	b9 01       	movw	r22, r18
     322:	a7 01       	movw	r20, r14
     324:	96 01       	movw	r18, r12
     326:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	87 e0       	ldi	r24, 0x07	; 7
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     334:	40 e0       	ldi	r20, 0x00	; 0
     336:	b4 01       	movw	r22, r8
     338:	88 e0       	ldi	r24, 0x08	; 8
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	ff 90       	pop	r15
     33e:	ef 90       	pop	r14
     340:	df 90       	pop	r13
     342:	cf 90       	pop	r12
     344:	bf 90       	pop	r11
     346:	af 90       	pop	r10
     348:	9f 90       	pop	r9
     34a:	8f 90       	pop	r8
     34c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>

00000350 <display_current_run_hours(unsigned int, unsigned int)>:
_Z25display_current_run_hoursjj():
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	9c 01       	movw	r18, r24
     35e:	cb 01       	movw	r24, r22
     360:	6c e3       	ldi	r22, 0x3C	; 60
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
     368:	8c 01       	movw	r16, r24
     36a:	c9 01       	movw	r24, r18
     36c:	63 e6       	ldi	r22, 0x63	; 99
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
     374:	ca e0       	ldi	r28, 0x0A	; 10
     376:	d0 e0       	ldi	r29, 0x00	; 0
     378:	be 01       	movw	r22, r28
     37a:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
     37e:	7c 01       	movw	r14, r24
     380:	40 e0       	ldi	r20, 0x00	; 0
     382:	84 e0       	ldi	r24, 0x04	; 4
     384:	90 e0       	ldi	r25, 0x00	; 0
     386:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     38a:	40 e0       	ldi	r20, 0x00	; 0
     38c:	b7 01       	movw	r22, r14
     38e:	85 e0       	ldi	r24, 0x05	; 5
     390:	90 e0       	ldi	r25, 0x00	; 0
     392:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     396:	41 e0       	ldi	r20, 0x01	; 1
     398:	6b e0       	ldi	r22, 0x0B	; 11
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	86 e0       	ldi	r24, 0x06	; 6
     39e:	90 e0       	ldi	r25, 0x00	; 0
     3a0:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     3a4:	c8 01       	movw	r24, r16
     3a6:	be 01       	movw	r22, r28
     3a8:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
     3ac:	ec 01       	movw	r28, r24
     3ae:	40 e0       	ldi	r20, 0x00	; 0
     3b0:	87 e0       	ldi	r24, 0x07	; 7
     3b2:	90 e0       	ldi	r25, 0x00	; 0
     3b4:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     3b8:	40 e0       	ldi	r20, 0x00	; 0
     3ba:	be 01       	movw	r22, r28
     3bc:	88 e0       	ldi	r24, 0x08	; 8
     3be:	90 e0       	ldi	r25, 0x00	; 0
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	0f 91       	pop	r16
     3c8:	ff 90       	pop	r15
     3ca:	ef 90       	pop	r14
     3cc:	0c 94 c5 00 	jmp	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>

000003d0 <log_dump()>:
_Z8log_dumpv():
     3d0:	0f 93       	push	r16
     3d2:	1f 93       	push	r17
     3d4:	cf 93       	push	r28
     3d6:	df 93       	push	r29
     3d8:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <systemtick_secs>
     3dc:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <systemtick_mins>
     3e0:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <systemtick_hrs>
     3e4:	1f 92       	push	r1
     3e6:	2f 93       	push	r18
     3e8:	1f 92       	push	r1
     3ea:	9f 93       	push	r25
     3ec:	1f 92       	push	r1
     3ee:	8f 93       	push	r24
     3f0:	00 e1       	ldi	r16, 0x10	; 16
     3f2:	11 e0       	ldi	r17, 0x01	; 1
     3f4:	1f 93       	push	r17
     3f6:	0f 93       	push	r16
     3f8:	c4 e1       	ldi	r28, 0x14	; 20
     3fa:	d4 e0       	ldi	r29, 0x04	; 4
     3fc:	df 93       	push	r29
     3fe:	cf 93       	push	r28
     400:	0e 94 2f 1a 	call	0x345e	; 0x345e <sprintf>
     404:	be 01       	movw	r22, r28
     406:	80 eb       	ldi	r24, 0xB0	; 176
     408:	95 e0       	ldi	r25, 0x05	; 5
     40a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     40e:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <current_run_time_secs>
     412:	f0 91 53 04 	lds	r31, 0x0453	; 0x800453 <current_run_time_secs+0x1>
     416:	2c e3       	ldi	r18, 0x3C	; 60
     418:	30 e0       	ldi	r19, 0x00	; 0
     41a:	cf 01       	movw	r24, r30
     41c:	b9 01       	movw	r22, r18
     41e:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
     422:	9f 93       	push	r25
     424:	8f 93       	push	r24
     426:	cf 01       	movw	r24, r30
     428:	60 e1       	ldi	r22, 0x10	; 16
     42a:	7e e0       	ldi	r23, 0x0E	; 14
     42c:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
     430:	46 2f       	mov	r20, r22
     432:	e7 2f       	mov	r30, r23
     434:	b9 01       	movw	r22, r18
     436:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
     43a:	7f 93       	push	r23
     43c:	6f 93       	push	r22
     43e:	ef 93       	push	r30
     440:	4f 93       	push	r20
     442:	1f 93       	push	r17
     444:	0f 93       	push	r16
     446:	df 93       	push	r29
     448:	cf 93       	push	r28
     44a:	0e 94 2f 1a 	call	0x345e	; 0x345e <sprintf>
     44e:	be 01       	movw	r22, r28
     450:	80 eb       	ldi	r24, 0xB0	; 176
     452:	95 e0       	ldi	r25, 0x05	; 5
     454:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     458:	40 91 4a 04 	lds	r20, 0x044A	; 0x80044a <Production_Delay>
     45c:	50 91 4b 04 	lds	r21, 0x044B	; 0x80044b <Production_Delay+0x1>
     460:	60 91 4c 04 	lds	r22, 0x044C	; 0x80044c <Production_Delay+0x2>
     464:	70 91 4d 04 	lds	r23, 0x044D	; 0x80044d <Production_Delay+0x3>
     468:	2a e0       	ldi	r18, 0x0A	; 10
     46a:	30 e0       	ldi	r19, 0x00	; 0
     46c:	80 eb       	ldi	r24, 0xB0	; 176
     46e:	95 e0       	ldi	r25, 0x05	; 5
     470:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <Print::print(unsigned long, int)>
     474:	62 ea       	ldi	r22, 0xA2	; 162
     476:	73 e0       	ldi	r23, 0x03	; 3
     478:	80 eb       	ldi	r24, 0xB0	; 176
     47a:	95 e0       	ldi	r25, 0x05	; 5
     47c:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     480:	40 91 46 04 	lds	r20, 0x0446	; 0x800446 <Flush_Delay>
     484:	50 91 47 04 	lds	r21, 0x0447	; 0x800447 <Flush_Delay+0x1>
     488:	60 91 48 04 	lds	r22, 0x0448	; 0x800448 <Flush_Delay+0x2>
     48c:	70 91 49 04 	lds	r23, 0x0449	; 0x800449 <Flush_Delay+0x3>
     490:	2a e0       	ldi	r18, 0x0A	; 10
     492:	30 e0       	ldi	r19, 0x00	; 0
     494:	80 eb       	ldi	r24, 0xB0	; 176
     496:	95 e0       	ldi	r25, 0x05	; 5
     498:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <Print::print(unsigned long, int)>
     49c:	62 ea       	ldi	r22, 0xA2	; 162
     49e:	73 e0       	ldi	r23, 0x03	; 3
     4a0:	80 eb       	ldi	r24, 0xB0	; 176
     4a2:	95 e0       	ldi	r25, 0x05	; 5
     4a4:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     4a8:	40 91 42 04 	lds	r20, 0x0442	; 0x800442 <PreCharge_Delay>
     4ac:	50 91 43 04 	lds	r21, 0x0443	; 0x800443 <PreCharge_Delay+0x1>
     4b0:	60 91 44 04 	lds	r22, 0x0444	; 0x800444 <PreCharge_Delay+0x2>
     4b4:	70 91 45 04 	lds	r23, 0x0445	; 0x800445 <PreCharge_Delay+0x3>
     4b8:	2a e0       	ldi	r18, 0x0A	; 10
     4ba:	30 e0       	ldi	r19, 0x00	; 0
     4bc:	80 eb       	ldi	r24, 0xB0	; 176
     4be:	95 e0       	ldi	r25, 0x05	; 5
     4c0:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <Print::print(unsigned long, int)>
     4c4:	62 ea       	ldi	r22, 0xA2	; 162
     4c6:	73 e0       	ldi	r23, 0x03	; 3
     4c8:	80 eb       	ldi	r24, 0xB0	; 176
     4ca:	95 e0       	ldi	r25, 0x05	; 5
     4cc:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     4d0:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <do_byte>
     4d4:	82 fb       	bst	r24, 2
     4d6:	99 27       	eor	r25, r25
     4d8:	90 f9       	bld	r25, 0
     4da:	1f 92       	push	r1
     4dc:	9f 93       	push	r25
     4de:	81 fb       	bst	r24, 1
     4e0:	99 27       	eor	r25, r25
     4e2:	90 f9       	bld	r25, 0
     4e4:	1f 92       	push	r1
     4e6:	9f 93       	push	r25
     4e8:	81 70       	andi	r24, 0x01	; 1
     4ea:	1f 92       	push	r1
     4ec:	8f 93       	push	r24
     4ee:	00 e2       	ldi	r16, 0x20	; 32
     4f0:	11 e0       	ldi	r17, 0x01	; 1
     4f2:	1f 93       	push	r17
     4f4:	0f 93       	push	r16
     4f6:	df 93       	push	r29
     4f8:	cf 93       	push	r28
     4fa:	0e 94 2f 1a 	call	0x345e	; 0x345e <sprintf>
     4fe:	be 01       	movw	r22, r28
     500:	80 eb       	ldi	r24, 0xB0	; 176
     502:	95 e0       	ldi	r25, 0x05	; 5
     504:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     508:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <o2_raw_adc_count>
     50c:	70 91 38 04 	lds	r23, 0x0438	; 0x800438 <o2_raw_adc_count+0x1>
     510:	4a e0       	ldi	r20, 0x0A	; 10
     512:	50 e0       	ldi	r21, 0x00	; 0
     514:	80 eb       	ldi	r24, 0xB0	; 176
     516:	95 e0       	ldi	r25, 0x05	; 5
     518:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <Print::print(int, int)>
     51c:	62 ea       	ldi	r22, 0xA2	; 162
     51e:	73 e0       	ldi	r23, 0x03	; 3
     520:	80 eb       	ldi	r24, 0xB0	; 176
     522:	95 e0       	ldi	r25, 0x05	; 5
     524:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     528:	40 91 2b 04 	lds	r20, 0x042B	; 0x80042b <m_raw_voltage>
     52c:	50 91 2c 04 	lds	r21, 0x042C	; 0x80042c <m_raw_voltage+0x1>
     530:	60 91 2d 04 	lds	r22, 0x042D	; 0x80042d <m_raw_voltage+0x2>
     534:	70 91 2e 04 	lds	r23, 0x042E	; 0x80042e <m_raw_voltage+0x3>
     538:	22 e0       	ldi	r18, 0x02	; 2
     53a:	30 e0       	ldi	r19, 0x00	; 0
     53c:	80 eb       	ldi	r24, 0xB0	; 176
     53e:	95 e0       	ldi	r25, 0x05	; 5
     540:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <Print::print(double, int)>
     544:	62 ea       	ldi	r22, 0xA2	; 162
     546:	73 e0       	ldi	r23, 0x03	; 3
     548:	80 eb       	ldi	r24, 0xB0	; 176
     54a:	95 e0       	ldi	r25, 0x05	; 5
     54c:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     550:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <o2_concentration>
     554:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <o2_concentration+0x1>
     558:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <o2_concentration+0x2>
     55c:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <o2_concentration+0x3>
     560:	22 e0       	ldi	r18, 0x02	; 2
     562:	30 e0       	ldi	r19, 0x00	; 0
     564:	80 eb       	ldi	r24, 0xB0	; 176
     566:	95 e0       	ldi	r25, 0x05	; 5
     568:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <Print::print(double, int)>
     56c:	62 ea       	ldi	r22, 0xA2	; 162
     56e:	73 e0       	ldi	r23, 0x03	; 3
     570:	80 eb       	ldi	r24, 0xB0	; 176
     572:	95 e0       	ldi	r25, 0x05	; 5
     574:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     578:	1f 92       	push	r1
     57a:	83 e0       	ldi	r24, 0x03	; 3
     57c:	8f 93       	push	r24
     57e:	1f 92       	push	r1
     580:	82 e0       	ldi	r24, 0x02	; 2
     582:	8f 93       	push	r24
     584:	1f 92       	push	r1
     586:	81 e0       	ldi	r24, 0x01	; 1
     588:	8f 93       	push	r24
     58a:	1f 93       	push	r17
     58c:	0f 93       	push	r16
     58e:	df 93       	push	r29
     590:	cf 93       	push	r28
     592:	0e 94 2f 1a 	call	0x345e	; 0x345e <sprintf>
     596:	8d b7       	in	r24, 0x3d	; 61
     598:	9e b7       	in	r25, 0x3e	; 62
     59a:	88 96       	adiw	r24, 0x28	; 40
     59c:	0f b6       	in	r0, 0x3f	; 63
     59e:	f8 94       	cli
     5a0:	9e bf       	out	0x3e, r25	; 62
     5a2:	0f be       	out	0x3f, r0	; 63
     5a4:	8d bf       	out	0x3d, r24	; 61
     5a6:	be 01       	movw	r22, r28
     5a8:	80 eb       	ldi	r24, 0xB0	; 176
     5aa:	95 e0       	ldi	r25, 0x05	; 5
     5ac:	df 91       	pop	r29
     5ae:	cf 91       	pop	r28
     5b0:	1f 91       	pop	r17
     5b2:	0f 91       	pop	r16
     5b4:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <Print::println(char const*)>

000005b8 <logs_task()>:
_Z9logs_taskv():
     5b8:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <f_sec_logs_task>
     5bc:	88 23       	and	r24, r24
     5be:	a9 f0       	breq	.+42     	; 0x5ea <logs_task()+0x32>
     5c0:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <f_sec_logs_task>
     5c4:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <logs_task()::log_period>
     5c8:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <logs_task()::log_period+0x1>
     5cc:	01 96       	adiw	r24, 0x01	; 1
     5ce:	82 30       	cpi	r24, 0x02	; 2
     5d0:	91 05       	cpc	r25, r1
     5d2:	2c f4       	brge	.+10     	; 0x5de <logs_task()+0x26>
     5d4:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <logs_task()::log_period+0x1>
     5d8:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <logs_task()::log_period>
     5dc:	08 95       	ret
     5de:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <logs_task()::log_period+0x1>
     5e2:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <logs_task()::log_period>
     5e6:	0c 94 e8 01 	jmp	0x3d0	; 0x3d0 <log_dump()>
     5ea:	08 95       	ret

000005ec <ads_init()>:
_Z8ads_initv():
     5ec:	6a e2       	ldi	r22, 0x2A	; 42
     5ee:	71 e0       	ldi	r23, 0x01	; 1
     5f0:	80 eb       	ldi	r24, 0xB0	; 176
     5f2:	95 e0       	ldi	r25, 0x05	; 5
     5f4:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     5f8:	6c e8       	ldi	r22, 0x8C	; 140
     5fa:	70 e0       	ldi	r23, 0x00	; 0
     5fc:	80 eb       	ldi	r24, 0xB0	; 176
     5fe:	95 e0       	ldi	r25, 0x05	; 5
     600:	0e 94 a3 15 	call	0x2b46	; 0x2b46 <Print::println(__FlashStringHelper const*)>
     604:	8c ef       	ldi	r24, 0xFC	; 252
     606:	93 e0       	ldi	r25, 0x03	; 3
     608:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <ADS1X15::begin()>
     60c:	61 e0       	ldi	r22, 0x01	; 1
     60e:	8c ef       	ldi	r24, 0xFC	; 252
     610:	93 e0       	ldi	r25, 0x03	; 3
     612:	0e 94 8c 0c 	call	0x1918	; 0x1918 <ADS1X15::setGain(unsigned char)>
     616:	67 e0       	ldi	r22, 0x07	; 7
     618:	8c ef       	ldi	r24, 0xFC	; 252
     61a:	93 e0       	ldi	r25, 0x03	; 3
     61c:	0e 94 d9 0c 	call	0x19b2	; 0x19b2 <ADS1X15::setDataRate(unsigned char)>
     620:	60 e0       	ldi	r22, 0x00	; 0
     622:	8c ef       	ldi	r24, 0xFC	; 252
     624:	93 e0       	ldi	r25, 0x03	; 3
     626:	0e 94 cd 0c 	call	0x199a	; 0x199a <ADS1X15::setMode(unsigned char)>
     62a:	60 e0       	ldi	r22, 0x00	; 0
     62c:	8c ef       	ldi	r24, 0xFC	; 252
     62e:	93 e0       	ldi	r25, 0x03	; 3
     630:	0c 94 c8 0d 	jmp	0x1b90	; 0x1b90 <ADS1X15::readADC(unsigned char)>

00000634 <o2_sensor_scan()>:
_Z14o2_sensor_scanv():
     634:	cf 92       	push	r12
     636:	df 92       	push	r13
     638:	ef 92       	push	r14
     63a:	ff 92       	push	r15
     63c:	60 e0       	ldi	r22, 0x00	; 0
     63e:	8c ef       	ldi	r24, 0xFC	; 252
     640:	93 e0       	ldi	r25, 0x03	; 3
     642:	0e 94 c8 0d 	call	0x1b90	; 0x1b90 <ADS1X15::readADC(unsigned char)>
     646:	8c ef       	ldi	r24, 0xFC	; 252
     648:	93 e0       	ldi	r25, 0x03	; 3
     64a:	0e 94 99 0d 	call	0x1b32	; 0x1b32 <ADS1X15::getValue()>
     64e:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <o2_raw_adc_count+0x1>
     652:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <o2_raw_adc_count>
     656:	66 ec       	ldi	r22, 0xC6	; 198
     658:	71 e0       	ldi	r23, 0x01	; 1
     65a:	80 eb       	ldi	r24, 0xB0	; 176
     65c:	95 e0       	ldi	r25, 0x05	; 5
     65e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     662:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <o2_raw_adc_count>
     666:	70 91 38 04 	lds	r23, 0x0438	; 0x800438 <o2_raw_adc_count+0x1>
     66a:	4a e0       	ldi	r20, 0x0A	; 10
     66c:	50 e0       	ldi	r21, 0x00	; 0
     66e:	80 eb       	ldi	r24, 0xB0	; 176
     670:	95 e0       	ldi	r25, 0x05	; 5
     672:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <Print::print(int, int)>
     676:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <o2_raw_adc_count>
     67a:	70 91 38 04 	lds	r23, 0x0438	; 0x800438 <o2_raw_adc_count+0x1>
     67e:	07 2e       	mov	r0, r23
     680:	00 0c       	add	r0, r0
     682:	88 0b       	sbc	r24, r24
     684:	99 0b       	sbc	r25, r25
     686:	0e 94 c2 18 	call	0x3184	; 0x3184 <__floatsisf>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	30 e0       	ldi	r19, 0x00	; 0
     68e:	4a e7       	ldi	r20, 0x7A	; 122
     690:	54 e4       	ldi	r21, 0x44	; 68
     692:	0e 94 77 19 	call	0x32ee	; 0x32ee <__mulsf3>
     696:	2f e6       	ldi	r18, 0x6F	; 111
     698:	32 e1       	ldi	r19, 0x12	; 18
     69a:	43 e0       	ldi	r20, 0x03	; 3
     69c:	59 e3       	ldi	r21, 0x39	; 57
     69e:	0e 94 77 19 	call	0x32ee	; 0x32ee <__mulsf3>
     6a2:	60 93 2b 04 	sts	0x042B, r22	; 0x80042b <m_raw_voltage>
     6a6:	70 93 2c 04 	sts	0x042C, r23	; 0x80042c <m_raw_voltage+0x1>
     6aa:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <m_raw_voltage+0x2>
     6ae:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <m_raw_voltage+0x3>
     6b2:	6a ed       	ldi	r22, 0xDA	; 218
     6b4:	71 e0       	ldi	r23, 0x01	; 1
     6b6:	80 eb       	ldi	r24, 0xB0	; 176
     6b8:	95 e0       	ldi	r25, 0x05	; 5
     6ba:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     6be:	40 91 2b 04 	lds	r20, 0x042B	; 0x80042b <m_raw_voltage>
     6c2:	50 91 2c 04 	lds	r21, 0x042C	; 0x80042c <m_raw_voltage+0x1>
     6c6:	60 91 2d 04 	lds	r22, 0x042D	; 0x80042d <m_raw_voltage+0x2>
     6ca:	70 91 2e 04 	lds	r23, 0x042E	; 0x80042e <m_raw_voltage+0x3>
     6ce:	24 e0       	ldi	r18, 0x04	; 4
     6d0:	30 e0       	ldi	r19, 0x00	; 0
     6d2:	80 eb       	ldi	r24, 0xB0	; 176
     6d4:	95 e0       	ldi	r25, 0x05	; 5
     6d6:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <Print::print(double, int)>
     6da:	60 91 2b 04 	lds	r22, 0x042B	; 0x80042b <m_raw_voltage>
     6de:	70 91 2c 04 	lds	r23, 0x042C	; 0x80042c <m_raw_voltage+0x1>
     6e2:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <m_raw_voltage+0x2>
     6e6:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <m_raw_voltage+0x3>
     6ea:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <o2_slope>
     6ee:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <o2_slope+0x1>
     6f2:	40 91 35 04 	lds	r20, 0x0435	; 0x800435 <o2_slope+0x2>
     6f6:	50 91 36 04 	lds	r21, 0x0436	; 0x800436 <o2_slope+0x3>
     6fa:	c0 90 2f 04 	lds	r12, 0x042F	; 0x80042f <o2_const_val>
     6fe:	d0 90 30 04 	lds	r13, 0x0430	; 0x800430 <o2_const_val+0x1>
     702:	e0 90 31 04 	lds	r14, 0x0431	; 0x800431 <o2_const_val+0x2>
     706:	f0 90 32 04 	lds	r15, 0x0432	; 0x800432 <o2_const_val+0x3>
     70a:	0e 94 77 19 	call	0x32ee	; 0x32ee <__mulsf3>
     70e:	a7 01       	movw	r20, r14
     710:	96 01       	movw	r18, r12
     712:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__addsf3>
     716:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <o2_concentration>
     71a:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <o2_concentration+0x1>
     71e:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <o2_concentration+0x2>
     722:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <o2_concentration+0x3>
     726:	6d ee       	ldi	r22, 0xED	; 237
     728:	71 e0       	ldi	r23, 0x01	; 1
     72a:	80 eb       	ldi	r24, 0xB0	; 176
     72c:	95 e0       	ldi	r25, 0x05	; 5
     72e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     732:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <o2_concentration>
     736:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <o2_concentration+0x1>
     73a:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <o2_concentration+0x2>
     73e:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <o2_concentration+0x3>
     742:	22 e0       	ldi	r18, 0x02	; 2
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	80 eb       	ldi	r24, 0xB0	; 176
     748:	95 e0       	ldi	r25, 0x05	; 5
     74a:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <Print::print(double, int)>
     74e:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <o2_concentration>
     752:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <o2_concentration+0x1>
     756:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <o2_concentration+0x2>
     75a:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <o2_concentration+0x3>
     75e:	24 e0       	ldi	r18, 0x04	; 4
     760:	30 e0       	ldi	r19, 0x00	; 0
     762:	80 eb       	ldi	r24, 0xB0	; 176
     764:	95 e0       	ldi	r25, 0x05	; 5
     766:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <Print::print(double, int)>
     76a:	62 ee       	ldi	r22, 0xE2	; 226
     76c:	73 e0       	ldi	r23, 0x03	; 3
     76e:	80 eb       	ldi	r24, 0xB0	; 176
     770:	95 e0       	ldi	r25, 0x05	; 5
     772:	ff 90       	pop	r15
     774:	ef 90       	pop	r14
     776:	df 90       	pop	r13
     778:	cf 90       	pop	r12
     77a:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <Print::println(char const*)>

0000077e <config_timer1()>:
_Z13config_timer1v():
     77e:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     782:	e1 e8       	ldi	r30, 0x81	; 129
     784:	f0 e0       	ldi	r31, 0x00	; 0
     786:	10 82       	st	Z, r1
     788:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     78c:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     790:	89 ef       	ldi	r24, 0xF9	; 249
     792:	90 e0       	ldi	r25, 0x00	; 0
     794:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     798:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     79c:	80 81       	ld	r24, Z
     79e:	88 60       	ori	r24, 0x08	; 8
     7a0:	80 83       	st	Z, r24
     7a2:	80 81       	ld	r24, Z
     7a4:	83 60       	ori	r24, 0x03	; 3
     7a6:	80 83       	st	Z, r24
     7a8:	ef e6       	ldi	r30, 0x6F	; 111
     7aa:	f0 e0       	ldi	r31, 0x00	; 0
     7ac:	80 81       	ld	r24, Z
     7ae:	82 60       	ori	r24, 0x02	; 2
     7b0:	80 83       	st	Z, r24
     7b2:	08 95       	ret

000007b4 <timer_init()>:
_Z10timer_initv():
     7b4:	f8 94       	cli
     7b6:	0e 94 bf 03 	call	0x77e	; 0x77e <config_timer1()>
     7ba:	78 94       	sei
     7bc:	63 e0       	ldi	r22, 0x03	; 3
     7be:	72 e0       	ldi	r23, 0x02	; 2
     7c0:	80 eb       	ldi	r24, 0xB0	; 176
     7c2:	95 e0       	ldi	r25, 0x05	; 5
     7c4:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <Print::println(char const*)>

000007c8 <__vector_13>:
__vector_13():
     7c8:	1f 92       	push	r1
     7ca:	0f 92       	push	r0
     7cc:	0f b6       	in	r0, 0x3f	; 63
     7ce:	0f 92       	push	r0
     7d0:	11 24       	eor	r1, r1
     7d2:	0b b6       	in	r0, 0x3b	; 59
     7d4:	0f 92       	push	r0
     7d6:	2f 93       	push	r18
     7d8:	3f 93       	push	r19
     7da:	4f 93       	push	r20
     7dc:	5f 93       	push	r21
     7de:	6f 93       	push	r22
     7e0:	7f 93       	push	r23
     7e2:	8f 93       	push	r24
     7e4:	9f 93       	push	r25
     7e6:	af 93       	push	r26
     7e8:	bf 93       	push	r27
     7ea:	cf 93       	push	r28
     7ec:	ef 93       	push	r30
     7ee:	ff 93       	push	r31
     7f0:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <systemtick_msecs>
     7f4:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     7f8:	a0 91 68 04 	lds	r26, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     7fc:	b0 91 69 04 	lds	r27, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     800:	01 96       	adiw	r24, 0x01	; 1
     802:	a1 1d       	adc	r26, r1
     804:	b1 1d       	adc	r27, r1
     806:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <systemtick_msecs>
     80a:	90 93 67 04 	sts	0x0467, r25	; 0x800467 <systemtick_msecs+0x1>
     80e:	a0 93 68 04 	sts	0x0468, r26	; 0x800468 <systemtick_msecs+0x2>
     812:	b0 93 69 04 	sts	0x0469, r27	; 0x800469 <systemtick_msecs+0x3>
     816:	c1 e0       	ldi	r28, 0x01	; 1
     818:	c0 93 62 04 	sts	0x0462, r28	; 0x800462 <f_msec>
     81c:	60 91 66 04 	lds	r22, 0x0466	; 0x800466 <systemtick_msecs>
     820:	70 91 67 04 	lds	r23, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     824:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     828:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     82c:	2a e0       	ldi	r18, 0x0A	; 10
     82e:	30 e0       	ldi	r19, 0x00	; 0
     830:	40 e0       	ldi	r20, 0x00	; 0
     832:	50 e0       	ldi	r21, 0x00	; 0
     834:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
     838:	67 2b       	or	r22, r23
     83a:	68 2b       	or	r22, r24
     83c:	69 2b       	or	r22, r25
     83e:	09 f0       	breq	.+2      	; 0x842 <__vector_13+0x7a>
     840:	49 c0       	rjmp	.+146    	; 0x8d4 <__vector_13+0x10c>
     842:	c0 93 61 04 	sts	0x0461, r28	; 0x800461 <f_10msec>
     846:	60 91 66 04 	lds	r22, 0x0466	; 0x800466 <systemtick_msecs>
     84a:	70 91 67 04 	lds	r23, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     84e:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     852:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     856:	24 e6       	ldi	r18, 0x64	; 100
     858:	30 e0       	ldi	r19, 0x00	; 0
     85a:	40 e0       	ldi	r20, 0x00	; 0
     85c:	50 e0       	ldi	r21, 0x00	; 0
     85e:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
     862:	67 2b       	or	r22, r23
     864:	68 2b       	or	r22, r24
     866:	69 2b       	or	r22, r25
     868:	a9 f5       	brne	.+106    	; 0x8d4 <__vector_13+0x10c>
     86a:	c0 93 60 04 	sts	0x0460, r28	; 0x800460 <f_100msec>
     86e:	60 91 66 04 	lds	r22, 0x0466	; 0x800466 <systemtick_msecs>
     872:	70 91 67 04 	lds	r23, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     876:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     87a:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     87e:	28 ee       	ldi	r18, 0xE8	; 232
     880:	33 e0       	ldi	r19, 0x03	; 3
     882:	40 e0       	ldi	r20, 0x00	; 0
     884:	50 e0       	ldi	r21, 0x00	; 0
     886:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
     88a:	67 2b       	or	r22, r23
     88c:	68 2b       	or	r22, r24
     88e:	69 2b       	or	r22, r25
     890:	09 f5       	brne	.+66     	; 0x8d4 <__vector_13+0x10c>
     892:	c0 93 5f 04 	sts	0x045F, r28	; 0x80045f <f_1sec>
     896:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <systemtick_secs>
     89a:	8f 5f       	subi	r24, 0xFF	; 255
     89c:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <systemtick_secs>
     8a0:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <systemtick_secs>
     8a4:	8c 33       	cpi	r24, 0x3C	; 60
     8a6:	b0 f0       	brcs	.+44     	; 0x8d4 <__vector_13+0x10c>
     8a8:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <systemtick_secs>
     8ac:	c0 93 5e 04 	sts	0x045E, r28	; 0x80045e <f_1min>
     8b0:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <systemtick_mins>
     8b4:	8f 5f       	subi	r24, 0xFF	; 255
     8b6:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <systemtick_mins>
     8ba:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <systemtick_mins>
     8be:	8c 33       	cpi	r24, 0x3C	; 60
     8c0:	48 f0       	brcs	.+18     	; 0x8d4 <__vector_13+0x10c>
     8c2:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <systemtick_mins>
     8c6:	c0 93 5d 04 	sts	0x045D, r28	; 0x80045d <f_1hr>
     8ca:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <systemtick_hrs>
     8ce:	8f 5f       	subi	r24, 0xFF	; 255
     8d0:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <systemtick_hrs>
     8d4:	ff 91       	pop	r31
     8d6:	ef 91       	pop	r30
     8d8:	cf 91       	pop	r28
     8da:	bf 91       	pop	r27
     8dc:	af 91       	pop	r26
     8de:	9f 91       	pop	r25
     8e0:	8f 91       	pop	r24
     8e2:	7f 91       	pop	r23
     8e4:	6f 91       	pop	r22
     8e6:	5f 91       	pop	r21
     8e8:	4f 91       	pop	r20
     8ea:	3f 91       	pop	r19
     8ec:	2f 91       	pop	r18
     8ee:	0f 90       	pop	r0
     8f0:	0b be       	out	0x3b, r0	; 59
     8f2:	0f 90       	pop	r0
     8f4:	0f be       	out	0x3f, r0	; 63
     8f6:	0f 90       	pop	r0
     8f8:	1f 90       	pop	r1
     8fa:	18 95       	reti

000008fc <new_delay_msecs(unsigned int)>:
_Z15new_delay_msecsj():
     8fc:	0f 93       	push	r16
     8fe:	1f 93       	push	r17
     900:	cf 93       	push	r28
     902:	df 93       	push	r29
     904:	ec 01       	movw	r28, r24
     906:	67 e1       	ldi	r22, 0x17	; 23
     908:	72 e0       	ldi	r23, 0x02	; 2
     90a:	80 eb       	ldi	r24, 0xB0	; 176
     90c:	95 e0       	ldi	r25, 0x05	; 5
     90e:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     912:	00 91 66 04 	lds	r16, 0x0466	; 0x800466 <systemtick_msecs>
     916:	10 91 67 04 	lds	r17, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     91a:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     91e:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     922:	ce 01       	movw	r24, r28
     924:	b0 e0       	ldi	r27, 0x00	; 0
     926:	a0 e0       	ldi	r26, 0x00	; 0
_Z12time_elapsedm():
     928:	40 91 66 04 	lds	r20, 0x0466	; 0x800466 <systemtick_msecs>
     92c:	50 91 67 04 	lds	r21, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     930:	60 91 68 04 	lds	r22, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     934:	70 91 69 04 	lds	r23, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     938:	40 1b       	sub	r20, r16
     93a:	51 0b       	sbc	r21, r17
     93c:	62 0b       	sbc	r22, r18
     93e:	73 0b       	sbc	r23, r19
_Z15new_delay_msecsj():
     940:	48 17       	cp	r20, r24
     942:	59 07       	cpc	r21, r25
     944:	6a 07       	cpc	r22, r26
     946:	7b 07       	cpc	r23, r27
     948:	78 f3       	brcs	.-34     	; 0x928 <new_delay_msecs(unsigned int)+0x2c>
     94a:	df 91       	pop	r29
     94c:	cf 91       	pop	r28
     94e:	1f 91       	pop	r17
     950:	0f 91       	pop	r16
     952:	08 95       	ret

00000954 <platform_init()>:
_Z13platform_initv():
     954:	0e 94 da 03 	call	0x7b4	; 0x7b4 <timer_init()>
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	44 e0       	ldi	r20, 0x04	; 4
     95c:	64 e1       	ldi	r22, 0x14	; 20
     95e:	8b ec       	ldi	r24, 0xCB	; 203
     960:	94 e0       	ldi	r25, 0x04	; 4
     962:	0e 94 66 0a 	call	0x14cc	; 0x14cc <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>
     966:	61 e0       	ldi	r22, 0x01	; 1
     968:	88 e1       	ldi	r24, 0x18	; 24
     96a:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
     96e:	61 e0       	ldi	r22, 0x01	; 1
     970:	89 e1       	ldi	r24, 0x19	; 25
     972:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
     976:	61 e0       	ldi	r22, 0x01	; 1
     978:	8a e1       	ldi	r24, 0x1A	; 26
     97a:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
     97e:	61 e0       	ldi	r22, 0x01	; 1
     980:	8b e1       	ldi	r24, 0x1B	; 27
     982:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
     986:	61 e0       	ldi	r22, 0x01	; 1
     988:	8c e0       	ldi	r24, 0x0C	; 12
     98a:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
     98e:	61 e0       	ldi	r22, 0x01	; 1
     990:	8c e0       	ldi	r24, 0x0C	; 12
     992:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
     996:	61 e0       	ldi	r22, 0x01	; 1
     998:	8d e1       	ldi	r24, 0x1D	; 29
     99a:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
     99e:	61 e0       	ldi	r22, 0x01	; 1
     9a0:	8b e1       	ldi	r24, 0x1B	; 27
     9a2:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
     9a6:	60 e0       	ldi	r22, 0x00	; 0
     9a8:	83 e0       	ldi	r24, 0x03	; 3
     9aa:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
     9ae:	62 e0       	ldi	r22, 0x02	; 2
     9b0:	83 e0       	ldi	r24, 0x03	; 3
     9b2:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
     9b6:	60 e0       	ldi	r22, 0x00	; 0
     9b8:	84 e0       	ldi	r24, 0x04	; 4
     9ba:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
     9be:	62 e0       	ldi	r22, 0x02	; 2
     9c0:	84 e0       	ldi	r24, 0x04	; 4
     9c2:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
     9c6:	60 e0       	ldi	r22, 0x00	; 0
     9c8:	8d e1       	ldi	r24, 0x1D	; 29
     9ca:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
     9ce:	60 e0       	ldi	r22, 0x00	; 0
     9d0:	8b e1       	ldi	r24, 0x1B	; 27
     9d2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
     9d6:	61 e0       	ldi	r22, 0x01	; 1
     9d8:	85 e0       	ldi	r24, 0x05	; 5
     9da:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
     9de:	61 e0       	ldi	r22, 0x01	; 1
     9e0:	87 e0       	ldi	r24, 0x07	; 7
     9e2:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
     9e6:	61 e0       	ldi	r22, 0x01	; 1
     9e8:	8d e0       	ldi	r24, 0x0D	; 13
     9ea:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
     9ee:	60 e0       	ldi	r22, 0x00	; 0
     9f0:	85 e0       	ldi	r24, 0x05	; 5
     9f2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
     9f6:	60 e0       	ldi	r22, 0x00	; 0
     9f8:	87 e0       	ldi	r24, 0x07	; 7
     9fa:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	8d e0       	ldi	r24, 0x0D	; 13
     a02:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
     a06:	69 e1       	ldi	r22, 0x19	; 25
     a08:	72 e0       	ldi	r23, 0x02	; 2
     a0a:	80 eb       	ldi	r24, 0xB0	; 176
     a0c:	95 e0       	ldi	r25, 0x05	; 5
     a0e:	0c 94 b5 15 	jmp	0x2b6a	; 0x2b6a <Print::println(char const*)>

00000a12 <do_control(DO_CONTROLS_E, bool)>:
_Z10do_control13DO_CONTROLS_Eb():
     a12:	1f 93       	push	r17
     a14:	cf 93       	push	r28
     a16:	df 93       	push	r29
     a18:	ec 01       	movw	r28, r24
     a1a:	16 2f       	mov	r17, r22
     a1c:	6a e2       	ldi	r22, 0x2A	; 42
     a1e:	72 e0       	ldi	r23, 0x02	; 2
     a20:	80 eb       	ldi	r24, 0xB0	; 176
     a22:	95 e0       	ldi	r25, 0x05	; 5
     a24:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     a28:	4a e0       	ldi	r20, 0x0A	; 10
     a2a:	50 e0       	ldi	r21, 0x00	; 0
     a2c:	be 01       	movw	r22, r28
     a2e:	80 eb       	ldi	r24, 0xB0	; 176
     a30:	95 e0       	ldi	r25, 0x05	; 5
     a32:	0e 94 67 16 	call	0x2cce	; 0x2cce <Print::println(int, int)>
     a36:	c8 30       	cpi	r28, 0x08	; 8
     a38:	d1 05       	cpc	r29, r1
     a3a:	09 f4       	brne	.+2      	; 0xa3e <do_control(DO_CONTROLS_E, bool)+0x2c>
     a3c:	40 c0       	rjmp	.+128    	; 0xabe <do_control(DO_CONTROLS_E, bool)+0xac>
     a3e:	70 f4       	brcc	.+28     	; 0xa5c <do_control(DO_CONTROLS_E, bool)+0x4a>
     a40:	c2 30       	cpi	r28, 0x02	; 2
     a42:	d1 05       	cpc	r29, r1
     a44:	b1 f1       	breq	.+108    	; 0xab2 <do_control(DO_CONTROLS_E, bool)+0xa0>
     a46:	c4 30       	cpi	r28, 0x04	; 4
     a48:	d1 05       	cpc	r29, r1
     a4a:	b1 f1       	breq	.+108    	; 0xab8 <do_control(DO_CONTROLS_E, bool)+0xa6>
     a4c:	c1 30       	cpi	r28, 0x01	; 1
     a4e:	d1 05       	cpc	r29, r1
     a50:	79 f4       	brne	.+30     	; 0xa70 <do_control(DO_CONTROLS_E, bool)+0x5e>
     a52:	61 2f       	mov	r22, r17
     a54:	88 e1       	ldi	r24, 0x18	; 24
     a56:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
     a5a:	23 c0       	rjmp	.+70     	; 0xaa2 <do_control(DO_CONTROLS_E, bool)+0x90>
     a5c:	c0 32       	cpi	r28, 0x20	; 32
     a5e:	d1 05       	cpc	r29, r1
     a60:	01 f1       	breq	.+64     	; 0xaa2 <do_control(DO_CONTROLS_E, bool)+0x90>
     a62:	c8 f4       	brcc	.+50     	; 0xa96 <do_control(DO_CONTROLS_E, bool)+0x84>
     a64:	61 e0       	ldi	r22, 0x01	; 1
     a66:	61 27       	eor	r22, r17
     a68:	8d e1       	ldi	r24, 0x1D	; 29
     a6a:	c0 31       	cpi	r28, 0x10	; 16
     a6c:	d1 05       	cpc	r29, r1
     a6e:	99 f3       	breq	.-26     	; 0xa56 <do_control(DO_CONTROLS_E, bool)+0x44>
     a70:	63 e3       	ldi	r22, 0x33	; 51
     a72:	72 e0       	ldi	r23, 0x02	; 2
     a74:	80 eb       	ldi	r24, 0xB0	; 176
     a76:	95 e0       	ldi	r25, 0x05	; 5
     a78:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     a7c:	4a e0       	ldi	r20, 0x0A	; 10
     a7e:	50 e0       	ldi	r21, 0x00	; 0
     a80:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <do_byte>
     a84:	80 eb       	ldi	r24, 0xB0	; 176
     a86:	95 e0       	ldi	r25, 0x05	; 5
     a88:	0e 94 8d 16 	call	0x2d1a	; 0x2d1a <Print::println(unsigned char, int)>
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	df 91       	pop	r29
     a90:	cf 91       	pop	r28
     a92:	1f 91       	pop	r17
     a94:	08 95       	ret
     a96:	c0 34       	cpi	r28, 0x40	; 64
     a98:	d1 05       	cpc	r29, r1
     a9a:	19 f0       	breq	.+6      	; 0xaa2 <do_control(DO_CONTROLS_E, bool)+0x90>
     a9c:	c0 38       	cpi	r28, 0x80	; 128
     a9e:	d1 05       	cpc	r29, r1
     aa0:	39 f7       	brne	.-50     	; 0xa70 <do_control(DO_CONTROLS_E, bool)+0x5e>
     aa2:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <do_byte>
     aa6:	11 23       	and	r17, r17
     aa8:	69 f0       	breq	.+26     	; 0xac4 <do_control(DO_CONTROLS_E, bool)+0xb2>
     aaa:	c8 2b       	or	r28, r24
     aac:	c0 93 39 04 	sts	0x0439, r28	; 0x800439 <do_byte>
     ab0:	df cf       	rjmp	.-66     	; 0xa70 <do_control(DO_CONTROLS_E, bool)+0x5e>
     ab2:	61 2f       	mov	r22, r17
     ab4:	89 e1       	ldi	r24, 0x19	; 25
     ab6:	cf cf       	rjmp	.-98     	; 0xa56 <do_control(DO_CONTROLS_E, bool)+0x44>
     ab8:	61 2f       	mov	r22, r17
     aba:	8a e1       	ldi	r24, 0x1A	; 26
     abc:	cc cf       	rjmp	.-104    	; 0xa56 <do_control(DO_CONTROLS_E, bool)+0x44>
     abe:	61 2f       	mov	r22, r17
     ac0:	8b e1       	ldi	r24, 0x1B	; 27
     ac2:	c9 cf       	rjmp	.-110    	; 0xa56 <do_control(DO_CONTROLS_E, bool)+0x44>
     ac4:	c0 95       	com	r28
     ac6:	c8 23       	and	r28, r24
     ac8:	f1 cf       	rjmp	.-30     	; 0xaac <do_control(DO_CONTROLS_E, bool)+0x9a>

00000aca <tworks2_values_to_default_postion()>:
_Z33tworks2_values_to_default_postionv():
     aca:	60 e0       	ldi	r22, 0x00	; 0
     acc:	81 e0       	ldi	r24, 0x01	; 1
     ace:	90 e0       	ldi	r25, 0x00	; 0
     ad0:	0e 94 09 05 	call	0xa12	; 0xa12 <do_control(DO_CONTROLS_E, bool)>
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	82 e0       	ldi	r24, 0x02	; 2
     ad8:	90 e0       	ldi	r25, 0x00	; 0
     ada:	0c 94 09 05 	jmp	0xa12	; 0xa12 <do_control(DO_CONTROLS_E, bool)>

00000ade <tworks2_PSA_logic()>:
_Z17tworks2_PSA_logicv():
     ade:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <cycle>
     ae2:	81 30       	cpi	r24, 0x01	; 1
     ae4:	21 f1       	breq	.+72     	; 0xb2e <tworks2_PSA_logic()+0x50>
     ae6:	80 f0       	brcs	.+32     	; 0xb08 <tworks2_PSA_logic()+0x2a>
     ae8:	82 30       	cpi	r24, 0x02	; 2
     aea:	09 f4       	brne	.+2      	; 0xaee <tworks2_PSA_logic()+0x10>
     aec:	40 c0       	rjmp	.+128    	; 0xb6e <tworks2_PSA_logic()+0x90>
     aee:	83 30       	cpi	r24, 0x03	; 3
     af0:	f1 f0       	breq	.+60     	; 0xb2e <tworks2_PSA_logic()+0x50>
     af2:	10 92 72 04 	sts	0x0472, r1	; 0x800472 <cycle>
     af6:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <nb_delay>
     afa:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <nb_delay+0x1>
     afe:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <nb_delay+0x2>
     b02:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <nb_delay+0x3>
     b06:	08 95       	ret
     b08:	61 e0       	ldi	r22, 0x01	; 1
     b0a:	81 e0       	ldi	r24, 0x01	; 1
     b0c:	90 e0       	ldi	r25, 0x00	; 0
     b0e:	0e 94 09 05 	call	0xa12	; 0xa12 <do_control(DO_CONTROLS_E, bool)>
     b12:	60 e0       	ldi	r22, 0x00	; 0
     b14:	82 e0       	ldi	r24, 0x02	; 2
     b16:	90 e0       	ldi	r25, 0x00	; 0
     b18:	0e 94 09 05 	call	0xa12	; 0xa12 <do_control(DO_CONTROLS_E, bool)>
     b1c:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <Production_Delay>
     b20:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <Production_Delay+0x1>
     b24:	a0 91 4c 04 	lds	r26, 0x044C	; 0x80044c <Production_Delay+0x2>
     b28:	b0 91 4d 04 	lds	r27, 0x044D	; 0x80044d <Production_Delay+0x3>
     b2c:	12 c0       	rjmp	.+36     	; 0xb52 <tworks2_PSA_logic()+0x74>
     b2e:	61 e0       	ldi	r22, 0x01	; 1
     b30:	81 e0       	ldi	r24, 0x01	; 1
     b32:	90 e0       	ldi	r25, 0x00	; 0
     b34:	0e 94 09 05 	call	0xa12	; 0xa12 <do_control(DO_CONTROLS_E, bool)>
     b38:	61 e0       	ldi	r22, 0x01	; 1
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	90 e0       	ldi	r25, 0x00	; 0
     b3e:	0e 94 09 05 	call	0xa12	; 0xa12 <do_control(DO_CONTROLS_E, bool)>
     b42:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <PreCharge_Delay>
     b46:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <PreCharge_Delay+0x1>
     b4a:	a0 91 44 04 	lds	r26, 0x0444	; 0x800444 <PreCharge_Delay+0x2>
     b4e:	b0 91 45 04 	lds	r27, 0x0445	; 0x800445 <PreCharge_Delay+0x3>
     b52:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <nb_delay>
     b56:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <nb_delay+0x1>
     b5a:	a0 93 40 04 	sts	0x0440, r26	; 0x800440 <nb_delay+0x2>
     b5e:	b0 93 41 04 	sts	0x0441, r27	; 0x800441 <nb_delay+0x3>
     b62:	80 91 72 04 	lds	r24, 0x0472	; 0x800472 <cycle>
     b66:	8f 5f       	subi	r24, 0xFF	; 255
     b68:	80 93 72 04 	sts	0x0472, r24	; 0x800472 <cycle>
     b6c:	08 95       	ret
     b6e:	60 e0       	ldi	r22, 0x00	; 0
     b70:	81 e0       	ldi	r24, 0x01	; 1
     b72:	90 e0       	ldi	r25, 0x00	; 0
     b74:	0e 94 09 05 	call	0xa12	; 0xa12 <do_control(DO_CONTROLS_E, bool)>
     b78:	61 e0       	ldi	r22, 0x01	; 1
     b7a:	cc cf       	rjmp	.-104    	; 0xb14 <tworks2_PSA_logic()+0x36>

00000b7c <o2_main_task()>:
_Z12o2_main_taskv():
     b7c:	cf 92       	push	r12
     b7e:	df 92       	push	r13
     b80:	ef 92       	push	r14
     b82:	ff 92       	push	r15
     b84:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <f_system_running>
     b88:	81 11       	cpse	r24, r1
     b8a:	07 c0       	rjmp	.+14     	; 0xb9a <o2_main_task()+0x1e>
     b8c:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <o2_main_task()::once_done>
     b90:	ff 90       	pop	r15
     b92:	ef 90       	pop	r14
     b94:	df 90       	pop	r13
     b96:	cf 90       	pop	r12
     b98:	08 95       	ret
     b9a:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <o2_main_task()::once_done>
     b9e:	81 11       	cpse	r24, r1
     ba0:	08 c0       	rjmp	.+16     	; 0xbb2 <o2_main_task()+0x36>
     ba2:	81 e0       	ldi	r24, 0x01	; 1
     ba4:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <o2_main_task()::once_done>
     ba8:	61 e0       	ldi	r22, 0x01	; 1
     baa:	88 e0       	ldi	r24, 0x08	; 8
     bac:	90 e0       	ldi	r25, 0x00	; 0
     bae:	0e 94 09 05 	call	0xa12	; 0xa12 <do_control(DO_CONTROLS_E, bool)>
     bb2:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <f_sec_change_o2_task>
     bb6:	88 23       	and	r24, r24
     bb8:	99 f1       	breq	.+102    	; 0xc20 <o2_main_task()+0xa4>
     bba:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <f_sec_change_o2_task>
     bbe:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <current_run_time_secs>
     bc2:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <current_run_time_secs+0x1>
     bc6:	2f 5f       	subi	r18, 0xFF	; 255
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	30 93 53 04 	sts	0x0453, r19	; 0x800453 <current_run_time_secs+0x1>
     bce:	20 93 52 04 	sts	0x0452, r18	; 0x800452 <current_run_time_secs>
     bd2:	c0 90 4e 04 	lds	r12, 0x044E	; 0x80044e <total_run_time_secs>
     bd6:	d0 90 4f 04 	lds	r13, 0x044F	; 0x80044f <total_run_time_secs+0x1>
     bda:	e0 90 50 04 	lds	r14, 0x0450	; 0x800450 <total_run_time_secs+0x2>
     bde:	f0 90 51 04 	lds	r15, 0x0451	; 0x800451 <total_run_time_secs+0x3>
     be2:	8f ef       	ldi	r24, 0xFF	; 255
     be4:	c8 1a       	sub	r12, r24
     be6:	d8 0a       	sbc	r13, r24
     be8:	e8 0a       	sbc	r14, r24
     bea:	f8 0a       	sbc	r15, r24
     bec:	c0 92 4e 04 	sts	0x044E, r12	; 0x80044e <total_run_time_secs>
     bf0:	d0 92 4f 04 	sts	0x044F, r13	; 0x80044f <total_run_time_secs+0x1>
     bf4:	e0 92 50 04 	sts	0x0450, r14	; 0x800450 <total_run_time_secs+0x2>
     bf8:	f0 92 51 04 	sts	0x0451, r15	; 0x800451 <total_run_time_secs+0x3>
     bfc:	c9 01       	movw	r24, r18
     bfe:	6f e0       	ldi	r22, 0x0F	; 15
     c00:	70 e0       	ldi	r23, 0x00	; 0
     c02:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
     c06:	89 2b       	or	r24, r25
     c08:	59 f4       	brne	.+22     	; 0xc20 <o2_main_task()+0xa4>
     c0a:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <o2_main_task()::quadrant>
     c0e:	8f 5f       	subi	r24, 0xFF	; 255
     c10:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <o2_main_task()::quadrant>
     c14:	83 30       	cpi	r24, 0x03	; 3
     c16:	08 f4       	brcc	.+2      	; 0xc1a <o2_main_task()+0x9e>
     c18:	73 c0       	rjmp	.+230    	; 0xd00 <o2_main_task()+0x184>
     c1a:	83 30       	cpi	r24, 0x03	; 3
     c1c:	09 f4       	brne	.+2      	; 0xc20 <o2_main_task()+0xa4>
     c1e:	83 c0       	rjmp	.+262    	; 0xd26 <o2_main_task()+0x1aa>
_Z12time_elapsedm():
     c20:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <systemtick_msecs>
     c24:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     c28:	a0 91 68 04 	lds	r26, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     c2c:	b0 91 69 04 	lds	r27, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     c30:	40 91 6c 04 	lds	r20, 0x046C	; 0x80046c <o2_main_task()::time_tag>
     c34:	50 91 6d 04 	lds	r21, 0x046D	; 0x80046d <o2_main_task()::time_tag+0x1>
     c38:	60 91 6e 04 	lds	r22, 0x046E	; 0x80046e <o2_main_task()::time_tag+0x2>
     c3c:	70 91 6f 04 	lds	r23, 0x046F	; 0x80046f <o2_main_task()::time_tag+0x3>
     c40:	84 1b       	sub	r24, r20
     c42:	95 0b       	sbc	r25, r21
     c44:	a6 0b       	sbc	r26, r22
     c46:	b7 0b       	sbc	r27, r23
_Z12o2_main_taskv():
     c48:	40 91 3e 04 	lds	r20, 0x043E	; 0x80043e <nb_delay>
     c4c:	50 91 3f 04 	lds	r21, 0x043F	; 0x80043f <nb_delay+0x1>
     c50:	60 91 40 04 	lds	r22, 0x0440	; 0x800440 <nb_delay+0x2>
     c54:	70 91 41 04 	lds	r23, 0x0441	; 0x800441 <nb_delay+0x3>
     c58:	84 17       	cp	r24, r20
     c5a:	95 07       	cpc	r25, r21
     c5c:	a6 07       	cpc	r26, r22
     c5e:	b7 07       	cpc	r27, r23
     c60:	08 f4       	brcc	.+2      	; 0xc64 <o2_main_task()+0xe8>
     c62:	96 cf       	rjmp	.-212    	; 0xb90 <o2_main_task()+0x14>
     c64:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <systemtick_msecs>
     c68:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     c6c:	a0 91 68 04 	lds	r26, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     c70:	b0 91 69 04 	lds	r27, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     c74:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <o2_main_task()::time_tag>
     c78:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <o2_main_task()::time_tag+0x1>
     c7c:	a0 93 6e 04 	sts	0x046E, r26	; 0x80046e <o2_main_task()::time_tag+0x2>
     c80:	b0 93 6f 04 	sts	0x046F, r27	; 0x80046f <o2_main_task()::time_tag+0x3>
     c84:	6e e3       	ldi	r22, 0x3E	; 62
     c86:	72 e0       	ldi	r23, 0x02	; 2
     c88:	80 eb       	ldi	r24, 0xB0	; 176
     c8a:	95 e0       	ldi	r25, 0x05	; 5
     c8c:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <Print::println(char const*)>
     c90:	0e 94 6f 05 	call	0xade	; 0xade <tworks2_PSA_logic()>
     c94:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <nb_delay>
     c98:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <nb_delay+0x1>
     c9c:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <nb_delay+0x2>
     ca0:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <nb_delay+0x3>
     ca4:	40 91 3a 04 	lds	r20, 0x043A	; 0x80043a <prev_nb_delay>
     ca8:	50 91 3b 04 	lds	r21, 0x043B	; 0x80043b <prev_nb_delay+0x1>
     cac:	60 91 3c 04 	lds	r22, 0x043C	; 0x80043c <prev_nb_delay+0x2>
     cb0:	70 91 3d 04 	lds	r23, 0x043D	; 0x80043d <prev_nb_delay+0x3>
     cb4:	84 17       	cp	r24, r20
     cb6:	95 07       	cpc	r25, r21
     cb8:	a6 07       	cpc	r26, r22
     cba:	b7 07       	cpc	r27, r23
     cbc:	09 f4       	brne	.+2      	; 0xcc0 <o2_main_task()+0x144>
     cbe:	68 cf       	rjmp	.-304    	; 0xb90 <o2_main_task()+0x14>
     cc0:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <prev_nb_delay>
     cc4:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <prev_nb_delay+0x1>
     cc8:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <prev_nb_delay+0x2>
     ccc:	b0 93 3d 04 	sts	0x043D, r27	; 0x80043d <prev_nb_delay+0x3>
     cd0:	62 e5       	ldi	r22, 0x52	; 82
     cd2:	72 e0       	ldi	r23, 0x02	; 2
     cd4:	80 eb       	ldi	r24, 0xB0	; 176
     cd6:	95 e0       	ldi	r25, 0x05	; 5
     cd8:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     cdc:	40 91 3e 04 	lds	r20, 0x043E	; 0x80043e <nb_delay>
     ce0:	50 91 3f 04 	lds	r21, 0x043F	; 0x80043f <nb_delay+0x1>
     ce4:	60 91 40 04 	lds	r22, 0x0440	; 0x800440 <nb_delay+0x2>
     ce8:	70 91 41 04 	lds	r23, 0x0441	; 0x800441 <nb_delay+0x3>
     cec:	2a e0       	ldi	r18, 0x0A	; 10
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	80 eb       	ldi	r24, 0xB0	; 176
     cf2:	95 e0       	ldi	r25, 0x05	; 5
     cf4:	ff 90       	pop	r15
     cf6:	ef 90       	pop	r14
     cf8:	df 90       	pop	r13
     cfa:	cf 90       	pop	r12
     cfc:	0c 94 a5 16 	jmp	0x2d4a	; 0x2d4a <Print::println(unsigned long, int)>
     d00:	c9 01       	movw	r24, r18
     d02:	60 e1       	ldi	r22, 0x10	; 16
     d04:	7e e0       	ldi	r23, 0x0E	; 14
     d06:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
     d0a:	9b 01       	movw	r18, r22
     d0c:	6c e3       	ldi	r22, 0x3C	; 60
     d0e:	70 e0       	ldi	r23, 0x00	; 0
     d10:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
     d14:	c9 01       	movw	r24, r18
     d16:	0e 94 a8 01 	call	0x350	; 0x350 <display_current_run_hours(unsigned int, unsigned int)>
     d1a:	81 e0       	ldi	r24, 0x01	; 1
     d1c:	80 93 71 04 	sts	0x0471, r24	; 0x800471 <f_crn>
     d20:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <f_trn>
     d24:	7d cf       	rjmp	.-262    	; 0xc20 <o2_main_task()+0xa4>
     d26:	c7 01       	movw	r24, r14
     d28:	b6 01       	movw	r22, r12
     d2a:	20 e1       	ldi	r18, 0x10	; 16
     d2c:	3e e0       	ldi	r19, 0x0E	; 14
     d2e:	40 e0       	ldi	r20, 0x00	; 0
     d30:	50 e0       	ldi	r21, 0x00	; 0
     d32:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
     d36:	b9 01       	movw	r22, r18
     d38:	33 0f       	add	r19, r19
     d3a:	88 0b       	sbc	r24, r24
     d3c:	99 0b       	sbc	r25, r25
     d3e:	0e 94 42 01 	call	0x284	; 0x284 <display_total_run_hours(unsigned long)>
     d42:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <o2_main_task()::quadrant>
     d46:	10 92 71 04 	sts	0x0471, r1	; 0x800471 <f_crn>
     d4a:	81 e0       	ldi	r24, 0x01	; 1
     d4c:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <f_trn>
     d50:	67 cf       	rjmp	.-306    	; 0xc20 <o2_main_task()+0xa4>

00000d52 <o2_cons_init()>:
_Z12o2_cons_initv():
     d52:	6e e5       	ldi	r22, 0x5E	; 94
     d54:	72 e0       	ldi	r23, 0x02	; 2
     d56:	80 eb       	ldi	r24, 0xB0	; 176
     d58:	95 e0       	ldi	r25, 0x05	; 5
     d5a:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <Print::println(char const*)>
     d5e:	85 ec       	ldi	r24, 0xC5	; 197
     d60:	9f e8       	ldi	r25, 0x8F	; 143
     d62:	a1 e3       	ldi	r26, 0x31	; 49
     d64:	be e3       	ldi	r27, 0x3E	; 62
     d66:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <o2_slope>
     d6a:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <o2_slope+0x1>
     d6e:	a0 93 35 04 	sts	0x0435, r26	; 0x800435 <o2_slope+0x2>
     d72:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <o2_slope+0x3>
     d76:	87 ef       	ldi	r24, 0xF7	; 247
     d78:	95 e7       	ldi	r25, 0x75	; 117
     d7a:	a0 e7       	ldi	r26, 0x70	; 112
     d7c:	bf e3       	ldi	r27, 0x3F	; 63
     d7e:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <o2_const_val>
     d82:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <o2_const_val+0x1>
     d86:	a0 93 31 04 	sts	0x0431, r26	; 0x800431 <o2_const_val+0x2>
     d8a:	b0 93 32 04 	sts	0x0432, r27	; 0x800432 <o2_const_val+0x3>
     d8e:	62 ee       	ldi	r22, 0xE2	; 226
     d90:	73 e0       	ldi	r23, 0x03	; 3
     d92:	80 eb       	ldi	r24, 0xB0	; 176
     d94:	95 e0       	ldi	r25, 0x05	; 5
     d96:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <Print::println(char const*)>
     d9a:	68 ea       	ldi	r22, 0xA8	; 168
     d9c:	71 e0       	ldi	r23, 0x01	; 1
     d9e:	80 eb       	ldi	r24, 0xB0	; 176
     da0:	95 e0       	ldi	r25, 0x05	; 5
     da2:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     da6:	40 91 33 04 	lds	r20, 0x0433	; 0x800433 <o2_slope>
     daa:	50 91 34 04 	lds	r21, 0x0434	; 0x800434 <o2_slope+0x1>
     dae:	60 91 35 04 	lds	r22, 0x0435	; 0x800435 <o2_slope+0x2>
     db2:	70 91 36 04 	lds	r23, 0x0436	; 0x800436 <o2_slope+0x3>
     db6:	22 e0       	ldi	r18, 0x02	; 2
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	80 eb       	ldi	r24, 0xB0	; 176
     dbc:	95 e0       	ldi	r25, 0x05	; 5
     dbe:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <Print::print(double, int)>
     dc2:	64 eb       	ldi	r22, 0xB4	; 180
     dc4:	71 e0       	ldi	r23, 0x01	; 1
     dc6:	80 eb       	ldi	r24, 0xB0	; 176
     dc8:	95 e0       	ldi	r25, 0x05	; 5
     dca:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     dce:	40 91 2f 04 	lds	r20, 0x042F	; 0x80042f <o2_const_val>
     dd2:	50 91 30 04 	lds	r21, 0x0430	; 0x800430 <o2_const_val+0x1>
     dd6:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <o2_const_val+0x2>
     dda:	70 91 32 04 	lds	r23, 0x0432	; 0x800432 <o2_const_val+0x3>
     dde:	22 e0       	ldi	r18, 0x02	; 2
     de0:	30 e0       	ldi	r19, 0x00	; 0
     de2:	80 eb       	ldi	r24, 0xB0	; 176
     de4:	95 e0       	ldi	r25, 0x05	; 5
     de6:	0e 94 9b 17 	call	0x2f36	; 0x2f36 <Print::print(double, int)>
     dea:	88 e1       	ldi	r24, 0x18	; 24
     dec:	95 e1       	ldi	r25, 0x15	; 21
     dee:	a0 e0       	ldi	r26, 0x00	; 0
     df0:	b0 e0       	ldi	r27, 0x00	; 0
     df2:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <Production_Delay>
     df6:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <Production_Delay+0x1>
     dfa:	a0 93 4c 04 	sts	0x044C, r26	; 0x80044c <Production_Delay+0x2>
     dfe:	b0 93 4d 04 	sts	0x044D, r27	; 0x80044d <Production_Delay+0x3>
     e02:	8c eb       	ldi	r24, 0xBC	; 188
     e04:	92 e0       	ldi	r25, 0x02	; 2
     e06:	a0 e0       	ldi	r26, 0x00	; 0
     e08:	b0 e0       	ldi	r27, 0x00	; 0
     e0a:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <PreCharge_Delay>
     e0e:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <PreCharge_Delay+0x1>
     e12:	a0 93 44 04 	sts	0x0444, r26	; 0x800444 <PreCharge_Delay+0x2>
     e16:	b0 93 45 04 	sts	0x0445, r27	; 0x800445 <PreCharge_Delay+0x3>
     e1a:	60 e0       	ldi	r22, 0x00	; 0
     e1c:	81 e0       	ldi	r24, 0x01	; 1
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 94 09 05 	call	0xa12	; 0xa12 <do_control(DO_CONTROLS_E, bool)>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	82 e0       	ldi	r24, 0x02	; 2
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	0e 94 09 05 	call	0xa12	; 0xa12 <do_control(DO_CONTROLS_E, bool)>
     e2e:	60 e0       	ldi	r22, 0x00	; 0
     e30:	84 e0       	ldi	r24, 0x04	; 4
     e32:	90 e0       	ldi	r25, 0x00	; 0
     e34:	0e 94 09 05 	call	0xa12	; 0xa12 <do_control(DO_CONTROLS_E, bool)>
     e38:	84 ef       	ldi	r24, 0xF4	; 244
     e3a:	91 e0       	ldi	r25, 0x01	; 1
     e3c:	0c 94 7e 04 	jmp	0x8fc	; 0x8fc <new_delay_msecs(unsigned int)>

00000e40 <button_check()>:
_Z12button_checkv():
     e40:	cf 93       	push	r28
     e42:	df 93       	push	r29
     e44:	83 e0       	ldi	r24, 0x03	; 3
     e46:	0e 94 ff 12 	call	0x25fe	; 0x25fe <digitalRead>
     e4a:	ec 01       	movw	r28, r24
     e4c:	84 e0       	ldi	r24, 0x04	; 4
     e4e:	0e 94 ff 12 	call	0x25fe	; 0x25fe <digitalRead>
     e52:	20 97       	sbiw	r28, 0x00	; 0
     e54:	59 f5       	brne	.+86     	; 0xeac <button_check()+0x6c>
     e56:	20 91 f4 03 	lds	r18, 0x03F4	; 0x8003f4 <start_switch_dbnc_dly>
     e5a:	30 91 f5 03 	lds	r19, 0x03F5	; 0x8003f5 <start_switch_dbnc_dly+0x1>
     e5e:	2f 5f       	subi	r18, 0xFF	; 255
     e60:	3f 4f       	sbci	r19, 0xFF	; 255
     e62:	30 93 f5 03 	sts	0x03F5, r19	; 0x8003f5 <start_switch_dbnc_dly+0x1>
     e66:	20 93 f4 03 	sts	0x03F4, r18	; 0x8003f4 <start_switch_dbnc_dly>
     e6a:	28 33       	cpi	r18, 0x38	; 56
     e6c:	31 05       	cpc	r19, r1
     e6e:	3c f0       	brlt	.+14     	; 0xe7e <button_check()+0x3e>
     e70:	21 e0       	ldi	r18, 0x01	; 1
     e72:	20 93 2a 04 	sts	0x042A, r18	; 0x80042a <start_switch_pressed>
     e76:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <start_switch_dbnc_dly+0x1>
     e7a:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <start_switch_dbnc_dly>
     e7e:	00 97       	sbiw	r24, 0x00	; 0
     e80:	39 f5       	brne	.+78     	; 0xed0 <button_check()+0x90>
     e82:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <alarm_clear_bttn_dbnc_dly>
     e86:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <alarm_clear_bttn_dbnc_dly+0x1>
     e8a:	01 96       	adiw	r24, 0x01	; 1
     e8c:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <alarm_clear_bttn_dbnc_dly+0x1>
     e90:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <alarm_clear_bttn_dbnc_dly>
     e94:	c8 97       	sbiw	r24, 0x38	; 56
     e96:	3c f0       	brlt	.+14     	; 0xea6 <button_check()+0x66>
     e98:	81 e0       	ldi	r24, 0x01	; 1
     e9a:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <alarm_clear_button_pressed>
     e9e:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <alarm_clear_bttn_dbnc_dly+0x1>
     ea2:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <alarm_clear_bttn_dbnc_dly>
     ea6:	df 91       	pop	r29
     ea8:	cf 91       	pop	r28
     eaa:	08 95       	ret
     eac:	21 97       	sbiw	r28, 0x01	; 1
     eae:	39 f7       	brne	.-50     	; 0xe7e <button_check()+0x3e>
     eb0:	20 91 f4 03 	lds	r18, 0x03F4	; 0x8003f4 <start_switch_dbnc_dly>
     eb4:	30 91 f5 03 	lds	r19, 0x03F5	; 0x8003f5 <start_switch_dbnc_dly+0x1>
     eb8:	2f 5f       	subi	r18, 0xFF	; 255
     eba:	3f 4f       	sbci	r19, 0xFF	; 255
     ebc:	30 93 f5 03 	sts	0x03F5, r19	; 0x8003f5 <start_switch_dbnc_dly+0x1>
     ec0:	20 93 f4 03 	sts	0x03F4, r18	; 0x8003f4 <start_switch_dbnc_dly>
     ec4:	28 33       	cpi	r18, 0x38	; 56
     ec6:	31 05       	cpc	r19, r1
     ec8:	d4 f2       	brlt	.-76     	; 0xe7e <button_check()+0x3e>
     eca:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <start_switch_pressed>
     ece:	d3 cf       	rjmp	.-90     	; 0xe76 <button_check()+0x36>
     ed0:	01 97       	sbiw	r24, 0x01	; 1
     ed2:	49 f7       	brne	.-46     	; 0xea6 <button_check()+0x66>
     ed4:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <alarm_clear_bttn_dbnc_dly>
     ed8:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <alarm_clear_bttn_dbnc_dly+0x1>
     edc:	01 96       	adiw	r24, 0x01	; 1
     ede:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <alarm_clear_bttn_dbnc_dly+0x1>
     ee2:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <alarm_clear_bttn_dbnc_dly>
     ee6:	c8 97       	sbiw	r24, 0x38	; 56
     ee8:	f4 f2       	brlt	.-68     	; 0xea6 <button_check()+0x66>
     eea:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <alarm_clear_button_pressed>
     eee:	d7 cf       	rjmp	.-82     	; 0xe9e <button_check()+0x5e>

00000ef0 <ui_print_welcome()>:
_Z16ui_print_welcomev():
     ef0:	40 e0       	ldi	r20, 0x00	; 0
     ef2:	60 e0       	ldi	r22, 0x00	; 0
     ef4:	8b ec       	ldi	r24, 0xCB	; 203
     ef6:	94 e0       	ldi	r25, 0x04	; 4
     ef8:	0e 94 4d 0a 	call	0x149a	; 0x149a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     efc:	61 e9       	ldi	r22, 0x91	; 145
     efe:	72 e0       	ldi	r23, 0x02	; 2
     f00:	8b ec       	ldi	r24, 0xCB	; 203
     f02:	94 e0       	ldi	r25, 0x04	; 4
     f04:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     f08:	41 e0       	ldi	r20, 0x01	; 1
     f0a:	60 e0       	ldi	r22, 0x00	; 0
     f0c:	8b ec       	ldi	r24, 0xCB	; 203
     f0e:	94 e0       	ldi	r25, 0x04	; 4
     f10:	0e 94 4d 0a 	call	0x149a	; 0x149a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     f14:	64 ea       	ldi	r22, 0xA4	; 164
     f16:	72 e0       	ldi	r23, 0x02	; 2
     f18:	8b ec       	ldi	r24, 0xCB	; 203
     f1a:	94 e0       	ldi	r25, 0x04	; 4
     f1c:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
     f20:	42 e0       	ldi	r20, 0x02	; 2
     f22:	60 e0       	ldi	r22, 0x00	; 0
     f24:	8b ec       	ldi	r24, 0xCB	; 203
     f26:	94 e0       	ldi	r25, 0x04	; 4
     f28:	0e 94 4d 0a 	call	0x149a	; 0x149a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     f2c:	63 eb       	ldi	r22, 0xB3	; 179
     f2e:	72 e0       	ldi	r23, 0x02	; 2
     f30:	8b ec       	ldi	r24, 0xCB	; 203
     f32:	94 e0       	ldi	r25, 0x04	; 4
     f34:	0c 94 90 15 	jmp	0x2b20	; 0x2b20 <Print::print(char const*)>

00000f38 <setup>:
_ZN14HardwareSerial5beginEm():
     f38:	26 e0       	ldi	r18, 0x06	; 6
     f3a:	40 e0       	ldi	r20, 0x00	; 0
     f3c:	52 ec       	ldi	r21, 0xC2	; 194
     f3e:	61 e0       	ldi	r22, 0x01	; 1
     f40:	70 e0       	ldi	r23, 0x00	; 0
     f42:	80 eb       	ldi	r24, 0xB0	; 176
     f44:	95 e0       	ldi	r25, 0x05	; 5
     f46:	0e 94 41 14 	call	0x2882	; 0x2882 <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
     f4a:	68 ec       	ldi	r22, 0xC8	; 200
     f4c:	72 e0       	ldi	r23, 0x02	; 2
     f4e:	80 eb       	ldi	r24, 0xB0	; 176
     f50:	95 e0       	ldi	r25, 0x05	; 5
     f52:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <Print::println(char const*)>
     f56:	0e 94 aa 04 	call	0x954	; 0x954 <platform_init()>
     f5a:	0e 94 f6 02 	call	0x5ec	; 0x5ec <ads_init()>
_Z7db_initv():
     f5e:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <f_system_running>
setup():
     f62:	0e 94 a9 06 	call	0xd52	; 0xd52 <o2_cons_init()>
     f66:	0e 94 ff 00 	call	0x1fe	; 0x1fe <init_7segments()>
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	70 e0       	ldi	r23, 0x00	; 0
     f6e:	cb 01       	movw	r24, r22
     f70:	0e 94 0b 01 	call	0x216	; 0x216 <display_o2(float)>
     f74:	60 91 4e 04 	lds	r22, 0x044E	; 0x80044e <total_run_time_secs>
     f78:	70 91 4f 04 	lds	r23, 0x044F	; 0x80044f <total_run_time_secs+0x1>
     f7c:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <total_run_time_secs+0x2>
     f80:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <total_run_time_secs+0x3>
     f84:	0e 94 42 01 	call	0x284	; 0x284 <display_total_run_hours(unsigned long)>
_Z7ui_initv():
     f88:	0c 94 78 07 	jmp	0xef0	; 0xef0 <ui_print_welcome()>

00000f8c <beep_for(int)>:
_Z8beep_fori():
     f8c:	cf 93       	push	r28
     f8e:	df 93       	push	r29
     f90:	ec 01       	movw	r28, r24
     f92:	60 e0       	ldi	r22, 0x00	; 0
     f94:	80 e1       	ldi	r24, 0x10	; 16
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	0e 94 09 05 	call	0xa12	; 0xa12 <do_control(DO_CONTROLS_E, bool)>
     f9c:	ce 01       	movw	r24, r28
     f9e:	0e 94 7e 04 	call	0x8fc	; 0x8fc <new_delay_msecs(unsigned int)>
     fa2:	61 e0       	ldi	r22, 0x01	; 1
     fa4:	80 e1       	ldi	r24, 0x10	; 16
     fa6:	90 e0       	ldi	r25, 0x00	; 0
     fa8:	df 91       	pop	r29
     faa:	cf 91       	pop	r28
     fac:	0c 94 09 05 	jmp	0xa12	; 0xa12 <do_control(DO_CONTROLS_E, bool)>

00000fb0 <ui_task_main()>:
_Z12ui_task_mainv():
     fb0:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <f_sec_change_ui_task>
     fb4:	88 23       	and	r24, r24
     fb6:	59 f0       	breq	.+22     	; 0xfce <ui_task_main()+0x1e>
     fb8:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <f_sec_change_ui_task>
     fbc:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <__data_end>
     fc0:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <__data_end+0x1>
     fc4:	01 96       	adiw	r24, 0x01	; 1
     fc6:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <__data_end+0x1>
     fca:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <__data_end>
     fce:	0e 94 20 07 	call	0xe40	; 0xe40 <button_check()>
     fd2:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <ui_state>
     fd6:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <ui_state+0x1>
     fda:	85 30       	cpi	r24, 0x05	; 5
     fdc:	91 05       	cpc	r25, r1
     fde:	09 f4       	brne	.+2      	; 0xfe2 <ui_task_main()+0x32>
     fe0:	99 c0       	rjmp	.+306    	; 0x1114 <ui_task_main()+0x164>
     fe2:	5c f4       	brge	.+22     	; 0xffa <ui_task_main()+0x4a>
     fe4:	00 97       	sbiw	r24, 0x00	; 0
     fe6:	09 f4       	brne	.+2      	; 0xfea <ui_task_main()+0x3a>
     fe8:	50 c0       	rjmp	.+160    	; 0x108a <ui_task_main()+0xda>
     fea:	04 97       	sbiw	r24, 0x04	; 4
     fec:	09 f4       	brne	.+2      	; 0xff0 <ui_task_main()+0x40>
     fee:	7d c0       	rjmp	.+250    	; 0x10ea <ui_task_main()+0x13a>
     ff0:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <ui_state+0x1>
     ff4:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <ui_state>
     ff8:	4e c0       	rjmp	.+156    	; 0x1096 <ui_task_main()+0xe6>
     ffa:	86 30       	cpi	r24, 0x06	; 6
     ffc:	91 05       	cpc	r25, r1
     ffe:	09 f4       	brne	.+2      	; 0x1002 <ui_task_main()+0x52>
    1000:	b9 c0       	rjmp	.+370    	; 0x1174 <ui_task_main()+0x1c4>
    1002:	07 97       	sbiw	r24, 0x07	; 7
    1004:	a9 f7       	brne	.-22     	; 0xff0 <ui_task_main()+0x40>
    1006:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <f_system_running>
    100a:	60 e5       	ldi	r22, 0x50	; 80
    100c:	73 e0       	ldi	r23, 0x03	; 3
    100e:	80 eb       	ldi	r24, 0xB0	; 176
    1010:	95 e0       	ldi	r25, 0x05	; 5
    1012:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <Print::println(char const*)>
    1016:	43 e0       	ldi	r20, 0x03	; 3
    1018:	60 e0       	ldi	r22, 0x00	; 0
    101a:	8b ec       	ldi	r24, 0xCB	; 203
    101c:	94 e0       	ldi	r25, 0x04	; 4
    101e:	0e 94 4d 0a 	call	0x149a	; 0x149a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1022:	65 e6       	ldi	r22, 0x65	; 101
    1024:	73 e0       	ldi	r23, 0x03	; 3
    1026:	8b ec       	ldi	r24, 0xCB	; 203
    1028:	94 e0       	ldi	r25, 0x04	; 4
    102a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	88 e0       	ldi	r24, 0x08	; 8
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	0e 94 09 05 	call	0xa12	; 0xa12 <do_control(DO_CONTROLS_E, bool)>
    1038:	8f e6       	ldi	r24, 0x6F	; 111
    103a:	90 e0       	ldi	r25, 0x00	; 0
    103c:	0e 94 c6 07 	call	0xf8c	; 0xf8c <beep_for(int)>
    1040:	0e 94 65 05 	call	0xaca	; 0xaca <tworks2_values_to_default_postion()>
    1044:	88 ee       	ldi	r24, 0xE8	; 232
    1046:	93 e0       	ldi	r25, 0x03	; 3
    1048:	0e 94 7e 04 	call	0x8fc	; 0x8fc <new_delay_msecs(unsigned int)>
    104c:	43 e0       	ldi	r20, 0x03	; 3
    104e:	60 e0       	ldi	r22, 0x00	; 0
    1050:	8b ec       	ldi	r24, 0xCB	; 203
    1052:	94 e0       	ldi	r25, 0x04	; 4
    1054:	0e 94 4d 0a 	call	0x149a	; 0x149a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1058:	6a e7       	ldi	r22, 0x7A	; 122
    105a:	73 e0       	ldi	r23, 0x03	; 3
    105c:	8b ec       	ldi	r24, 0xCB	; 203
    105e:	94 e0       	ldi	r25, 0x04	; 4
    1060:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
    1064:	88 ee       	ldi	r24, 0xE8	; 232
    1066:	93 e0       	ldi	r25, 0x03	; 3
    1068:	0e 94 7e 04 	call	0x8fc	; 0x8fc <new_delay_msecs(unsigned int)>
    106c:	43 e0       	ldi	r20, 0x03	; 3
    106e:	60 e0       	ldi	r22, 0x00	; 0
    1070:	8b ec       	ldi	r24, 0xCB	; 203
    1072:	94 e0       	ldi	r25, 0x04	; 4
    1074:	0e 94 4d 0a 	call	0x149a	; 0x149a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1078:	6f e8       	ldi	r22, 0x8F	; 143
    107a:	73 e0       	ldi	r23, 0x03	; 3
    107c:	8b ec       	ldi	r24, 0xCB	; 203
    107e:	94 e0       	ldi	r25, 0x04	; 4
    1080:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
    1084:	88 e0       	ldi	r24, 0x08	; 8
    1086:	90 e0       	ldi	r25, 0x00	; 0
    1088:	02 c0       	rjmp	.+4      	; 0x108e <ui_task_main()+0xde>
    108a:	84 e0       	ldi	r24, 0x04	; 4
    108c:	90 e0       	ldi	r25, 0x00	; 0
    108e:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <ui_state+0x1>
    1092:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <ui_state>
    1096:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <ui_state>
    109a:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <ui_state+0x1>
    109e:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <prev_ui_state>
    10a2:	30 91 f9 03 	lds	r19, 0x03F9	; 0x8003f9 <prev_ui_state+0x1>
    10a6:	82 17       	cp	r24, r18
    10a8:	93 07       	cpc	r25, r19
    10aa:	09 f4       	brne	.+2      	; 0x10ae <ui_task_main()+0xfe>
    10ac:	9c c0       	rjmp	.+312    	; 0x11e6 <ui_task_main()+0x236>
    10ae:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <prev_ui_state+0x1>
    10b2:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <prev_ui_state>
    10b6:	81 e0       	ldi	r24, 0x01	; 1
    10b8:	90 e0       	ldi	r25, 0x00	; 0
    10ba:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <f_state_changed+0x1>
    10be:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <f_state_changed>
    10c2:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <__data_end+0x1>
    10c6:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <__data_end>
    10ca:	64 ea       	ldi	r22, 0xA4	; 164
    10cc:	73 e0       	ldi	r23, 0x03	; 3
    10ce:	80 eb       	ldi	r24, 0xB0	; 176
    10d0:	95 e0       	ldi	r25, 0x05	; 5
    10d2:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
    10d6:	60 91 fa 03 	lds	r22, 0x03FA	; 0x8003fa <ui_state>
    10da:	70 91 fb 03 	lds	r23, 0x03FB	; 0x8003fb <ui_state+0x1>
    10de:	4a e0       	ldi	r20, 0x0A	; 10
    10e0:	50 e0       	ldi	r21, 0x00	; 0
    10e2:	80 eb       	ldi	r24, 0xB0	; 176
    10e4:	95 e0       	ldi	r25, 0x05	; 5
    10e6:	0c 94 67 16 	jmp	0x2cce	; 0x2cce <Print::println(int, int)>
    10ea:	8b ec       	ldi	r24, 0xCB	; 203
    10ec:	94 e0       	ldi	r25, 0x04	; 4
    10ee:	0e 94 46 0a 	call	0x148c	; 0x148c <LiquidCrystal::clear()>
    10f2:	0e 94 78 07 	call	0xef0	; 0xef0 <ui_print_welcome()>
    10f6:	43 e0       	ldi	r20, 0x03	; 3
    10f8:	60 e0       	ldi	r22, 0x00	; 0
    10fa:	8b ec       	ldi	r24, 0xCB	; 203
    10fc:	94 e0       	ldi	r25, 0x04	; 4
    10fe:	0e 94 4d 0a 	call	0x149a	; 0x149a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1102:	64 ee       	ldi	r22, 0xE4	; 228
    1104:	72 e0       	ldi	r23, 0x02	; 2
    1106:	8b ec       	ldi	r24, 0xCB	; 203
    1108:	94 e0       	ldi	r25, 0x04	; 4
    110a:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
    110e:	85 e0       	ldi	r24, 0x05	; 5
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	bd cf       	rjmp	.-134    	; 0x108e <ui_task_main()+0xde>
    1114:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <start_switch_pressed>
    1118:	81 30       	cpi	r24, 0x01	; 1
    111a:	09 f0       	breq	.+2      	; 0x111e <ui_task_main()+0x16e>
    111c:	bc cf       	rjmp	.-136    	; 0x1096 <ui_task_main()+0xe6>
    111e:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <f_system_running>
    1122:	69 ef       	ldi	r22, 0xF9	; 249
    1124:	72 e0       	ldi	r23, 0x02	; 2
    1126:	80 eb       	ldi	r24, 0xB0	; 176
    1128:	95 e0       	ldi	r25, 0x05	; 5
    112a:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <Print::println(char const*)>
    112e:	43 e0       	ldi	r20, 0x03	; 3
    1130:	60 e0       	ldi	r22, 0x00	; 0
    1132:	8b ec       	ldi	r24, 0xCB	; 203
    1134:	94 e0       	ldi	r25, 0x04	; 4
    1136:	0e 94 4d 0a 	call	0x149a	; 0x149a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    113a:	61 e1       	ldi	r22, 0x11	; 17
    113c:	73 e0       	ldi	r23, 0x03	; 3
    113e:	8b ec       	ldi	r24, 0xCB	; 203
    1140:	94 e0       	ldi	r25, 0x04	; 4
    1142:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
    1146:	8b e2       	ldi	r24, 0x2B	; 43
    1148:	92 e0       	ldi	r25, 0x02	; 2
    114a:	0e 94 c6 07 	call	0xf8c	; 0xf8c <beep_for(int)>
    114e:	43 e0       	ldi	r20, 0x03	; 3
    1150:	60 e0       	ldi	r22, 0x00	; 0
    1152:	8b ec       	ldi	r24, 0xCB	; 203
    1154:	94 e0       	ldi	r25, 0x04	; 4
    1156:	0e 94 4d 0a 	call	0x149a	; 0x149a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    115a:	66 e2       	ldi	r22, 0x26	; 38
    115c:	73 e0       	ldi	r23, 0x03	; 3
    115e:	8b ec       	ldi	r24, 0xCB	; 203
    1160:	94 e0       	ldi	r25, 0x04	; 4
    1162:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
    1166:	88 ee       	ldi	r24, 0xE8	; 232
    1168:	93 e0       	ldi	r25, 0x03	; 3
    116a:	0e 94 7e 04 	call	0x8fc	; 0x8fc <new_delay_msecs(unsigned int)>
    116e:	86 e0       	ldi	r24, 0x06	; 6
    1170:	90 e0       	ldi	r25, 0x00	; 0
    1172:	8d cf       	rjmp	.-230    	; 0x108e <ui_task_main()+0xde>
    1174:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <f_state_changed>
    1178:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <f_state_changed+0x1>
    117c:	89 2b       	or	r24, r25
    117e:	61 f1       	breq	.+88     	; 0x11d8 <ui_task_main()+0x228>
    1180:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <f_state_changed+0x1>
    1184:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <f_state_changed>
    1188:	84 e1       	ldi	r24, 0x14	; 20
    118a:	94 e0       	ldi	r25, 0x04	; 4
    118c:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear_buf(char*)>
    1190:	8b ec       	ldi	r24, 0xCB	; 203
    1192:	94 e0       	ldi	r25, 0x04	; 4
    1194:	0e 94 46 0a 	call	0x148c	; 0x148c <LiquidCrystal::clear()>
    1198:	40 e0       	ldi	r20, 0x00	; 0
    119a:	60 e0       	ldi	r22, 0x00	; 0
    119c:	8b ec       	ldi	r24, 0xCB	; 203
    119e:	94 e0       	ldi	r25, 0x04	; 4
    11a0:	0e 94 4d 0a 	call	0x149a	; 0x149a <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    11a4:	6c e3       	ldi	r22, 0x3C	; 60
    11a6:	73 e0       	ldi	r23, 0x03	; 3
    11a8:	84 e1       	ldi	r24, 0x14	; 20
    11aa:	94 e0       	ldi	r25, 0x04	; 4
    11ac:	0e 94 28 1a 	call	0x3450	; 0x3450 <strcpy>
    11b0:	64 e1       	ldi	r22, 0x14	; 20
    11b2:	74 e0       	ldi	r23, 0x04	; 4
    11b4:	80 eb       	ldi	r24, 0xB0	; 176
    11b6:	95 e0       	ldi	r25, 0x05	; 5
    11b8:	0e 94 b5 15 	call	0x2b6a	; 0x2b6a <Print::println(char const*)>
    11bc:	64 e1       	ldi	r22, 0x14	; 20
    11be:	74 e0       	ldi	r23, 0x04	; 4
    11c0:	8b ec       	ldi	r24, 0xCB	; 203
    11c2:	94 e0       	ldi	r25, 0x04	; 4
    11c4:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
    11c8:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <prev_o2_concentration>
    11cc:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <prev_o2_concentration+0x1>
    11d0:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <prev_o2_concentration+0x2>
    11d4:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <prev_o2_concentration+0x3>
    11d8:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <start_switch_pressed>
    11dc:	81 11       	cpse	r24, r1
    11de:	5b cf       	rjmp	.-330    	; 0x1096 <ui_task_main()+0xe6>
    11e0:	87 e0       	ldi	r24, 0x07	; 7
    11e2:	90 e0       	ldi	r25, 0x00	; 0
    11e4:	54 cf       	rjmp	.-344    	; 0x108e <ui_task_main()+0xde>
    11e6:	08 95       	ret

000011e8 <loop>:
loop():
    11e8:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <f_msec>
    11ec:	88 23       	and	r24, r24
    11ee:	21 f0       	breq	.+8      	; 0x11f8 <loop+0x10>
    11f0:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <f_msec>
    11f4:	0c 94 ff 00 	jmp	0x1fe	; 0x1fe <init_7segments()>
    11f8:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <f_10msec>
    11fc:	88 23       	and	r24, r24
    11fe:	19 f0       	breq	.+6      	; 0x1206 <loop+0x1e>
    1200:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <f_10msec>
    1204:	f7 cf       	rjmp	.-18     	; 0x11f4 <loop+0xc>
    1206:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <f_100msec>
    120a:	88 23       	and	r24, r24
    120c:	19 f0       	breq	.+6      	; 0x1214 <loop+0x2c>
    120e:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <f_100msec>
    1212:	f0 cf       	rjmp	.-32     	; 0x11f4 <loop+0xc>
    1214:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <f_1sec>
    1218:	88 23       	and	r24, r24
    121a:	f1 f0       	breq	.+60     	; 0x1258 <loop+0x70>
    121c:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <f_1sec>
    1220:	81 e0       	ldi	r24, 0x01	; 1
    1222:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <f_sec_logs_task>
    1226:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <f_sec_change_ui_task>
    122a:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <f_sec_change_o2_task>
    122e:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <f_sec_change_sensor_task>
    1232:	0e 94 1a 03 	call	0x634	; 0x634 <o2_sensor_scan()>
    1236:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <o2_concentration>
    123a:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <o2_concentration+0x1>
    123e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <o2_concentration+0x2>
    1242:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <o2_concentration+0x3>
    1246:	0e 94 0b 01 	call	0x216	; 0x216 <display_o2(float)>
    124a:	60 e5       	ldi	r22, 0x50	; 80
    124c:	72 e0       	ldi	r23, 0x02	; 2
    124e:	80 eb       	ldi	r24, 0xB0	; 176
    1250:	95 e0       	ldi	r25, 0x05	; 5
    1252:	0e 94 90 15 	call	0x2b20	; 0x2b20 <Print::print(char const*)>
    1256:	ce cf       	rjmp	.-100    	; 0x11f4 <loop+0xc>
    1258:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <f_1min>
    125c:	88 23       	and	r24, r24
    125e:	19 f0       	breq	.+6      	; 0x1266 <loop+0x7e>
    1260:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <f_1min>
    1264:	c7 cf       	rjmp	.-114    	; 0x11f4 <loop+0xc>
    1266:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <f_1hr>
    126a:	88 23       	and	r24, r24
    126c:	19 f0       	breq	.+6      	; 0x1274 <loop+0x8c>
    126e:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <f_1hr>
    1272:	c0 cf       	rjmp	.-128    	; 0x11f4 <loop+0xc>
    1274:	0e 94 be 05 	call	0xb7c	; 0xb7c <o2_main_task()>
    1278:	0e 94 d8 07 	call	0xfb0	; 0xfb0 <ui_task_main()>
    127c:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <logs_task()>
    1280:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <o2_concentration>
    1284:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <o2_concentration+0x1>
    1288:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <o2_concentration+0x2>
    128c:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <o2_concentration+0x3>
    1290:	0e 94 0b 01 	call	0x216	; 0x216 <display_o2(float)>
    1294:	80 91 71 04 	lds	r24, 0x0471	; 0x800471 <f_crn>
    1298:	81 30       	cpi	r24, 0x01	; 1
    129a:	81 f4       	brne	.+32     	; 0x12bc <loop+0xd4>
    129c:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <current_run_time_secs>
    12a0:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <current_run_time_secs+0x1>
    12a4:	60 e1       	ldi	r22, 0x10	; 16
    12a6:	7e e0       	ldi	r23, 0x0E	; 14
    12a8:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
    12ac:	9b 01       	movw	r18, r22
    12ae:	6c e3       	ldi	r22, 0x3C	; 60
    12b0:	70 e0       	ldi	r23, 0x00	; 0
    12b2:	0e 94 e9 19 	call	0x33d2	; 0x33d2 <__udivmodhi4>
    12b6:	c9 01       	movw	r24, r18
    12b8:	0e 94 a8 01 	call	0x350	; 0x350 <display_current_run_hours(unsigned int, unsigned int)>
    12bc:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <f_trn>
    12c0:	81 30       	cpi	r24, 0x01	; 1
    12c2:	09 f0       	breq	.+2      	; 0x12c6 <loop+0xde>
    12c4:	97 cf       	rjmp	.-210    	; 0x11f4 <loop+0xc>
    12c6:	60 91 4e 04 	lds	r22, 0x044E	; 0x80044e <total_run_time_secs>
    12ca:	70 91 4f 04 	lds	r23, 0x044F	; 0x80044f <total_run_time_secs+0x1>
    12ce:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <total_run_time_secs+0x2>
    12d2:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <total_run_time_secs+0x3>
    12d6:	20 e1       	ldi	r18, 0x10	; 16
    12d8:	3e e0       	ldi	r19, 0x0E	; 14
    12da:	40 e0       	ldi	r20, 0x00	; 0
    12dc:	50 e0       	ldi	r21, 0x00	; 0
    12de:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
    12e2:	b9 01       	movw	r22, r18
    12e4:	33 0f       	add	r19, r19
    12e6:	88 0b       	sbc	r24, r24
    12e8:	99 0b       	sbc	r25, r25
    12ea:	0e 94 42 01 	call	0x284	; 0x284 <display_total_run_hours(unsigned long)>
    12ee:	82 cf       	rjmp	.-252    	; 0x11f4 <loop+0xc>

000012f0 <_GLOBAL__sub_I_lcd>:
_GLOBAL__sub_I_lcd():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:468

}
    12f0:	cf 92       	push	r12
    12f2:	ef 92       	push	r14
    12f4:	0f 93       	push	r16
    12f6:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\habeeba\AppData\Local\Temp\arduino_build_733543\sketch/display.h:40


#define LCD_ROWS   ( 4)
#define LCD_COLS   (20)

LiquidCrystal   lcd(RS, EN, D4, D5, D6, D7);
    12f8:	87 e1       	ldi	r24, 0x17	; 23
    12fa:	c8 2e       	mov	r12, r24
    12fc:	96 e1       	ldi	r25, 0x16	; 22
    12fe:	e9 2e       	mov	r14, r25
    1300:	05 e1       	ldi	r16, 0x15	; 21
    1302:	24 e1       	ldi	r18, 0x14	; 20
    1304:	43 e1       	ldi	r20, 0x13	; 19
    1306:	62 e1       	ldi	r22, 0x12	; 18
    1308:	8b ec       	ldi	r24, 0xCB	; 203
    130a:	94 e0       	ldi	r25, 0x04	; 4
    130c:	0e 94 02 0b 	call	0x1604	; 0x1604 <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
C:\Users\habeeba\AppData\Local\Temp\arduino_build_733543\sketch/display.h:41
LedControl      lc = LedControl(dataPin_7segment, clckPin_7segment, loadPin_7segment, 1);
    1310:	01 e0       	ldi	r16, 0x01	; 1
    1312:	10 e0       	ldi	r17, 0x00	; 0
    1314:	2d e0       	ldi	r18, 0x0D	; 13
    1316:	30 e0       	ldi	r19, 0x00	; 0
    1318:	47 e0       	ldi	r20, 0x07	; 7
    131a:	50 e0       	ldi	r21, 0x00	; 0
    131c:	65 e0       	ldi	r22, 0x05	; 5
    131e:	70 e0       	ldi	r23, 0x00	; 0
    1320:	83 e7       	ldi	r24, 0x73	; 115
    1322:	94 e0       	ldi	r25, 0x04	; 4
    1324:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <LedControl::LedControl(int, int, int, int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:20
//float x_samples[NUM_OF_SAMPLES_O2] = {224.0,  1083.0, 4888.0};




ADS1115 ADS(O2_SENSOR_ADS_ADDR);
    1328:	43 ee       	ldi	r20, 0xE3	; 227
    132a:	54 e0       	ldi	r21, 0x04	; 4
    132c:	68 e4       	ldi	r22, 0x48	; 72
    132e:	8c ef       	ldi	r24, 0xFC	; 252
    1330:	93 e0       	ldi	r25, 0x03	; 3
_GLOBAL__sub_I_lcd():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:468
    1332:	1f 91       	pop	r17
    1334:	0f 91       	pop	r16
    1336:	ef 90       	pop	r14
    1338:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:20
    133a:	0c 94 d6 0d 	jmp	0x1bac	; 0x1bac <ADS1115::ADS1115(unsigned char, TwoWire*)>

0000133e <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:271
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    133e:	90 e0       	ldi	r25, 0x00	; 0
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	08 95       	ret

00001344 <Print::flush()>:
_ZN5Print5flushEv():
    1344:	08 95       	ret

00001346 <LiquidCrystal::pulseEnable()>:
_ZN13LiquidCrystal11pulseEnableEv():
    1346:	cf 93       	push	r28
    1348:	df 93       	push	r29
    134a:	ec 01       	movw	r28, r24
    134c:	60 e0       	ldi	r22, 0x00	; 0
    134e:	8e 81       	ldd	r24, Y+6	; 0x06
    1350:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
    1354:	81 e0       	ldi	r24, 0x01	; 1
    1356:	90 e0       	ldi	r25, 0x00	; 0
    1358:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    135c:	61 e0       	ldi	r22, 0x01	; 1
    135e:	8e 81       	ldd	r24, Y+6	; 0x06
    1360:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
    1364:	81 e0       	ldi	r24, 0x01	; 1
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    136c:	60 e0       	ldi	r22, 0x00	; 0
    136e:	8e 81       	ldd	r24, Y+6	; 0x06
    1370:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
    1374:	84 e6       	ldi	r24, 0x64	; 100
    1376:	90 e0       	ldi	r25, 0x00	; 0
    1378:	df 91       	pop	r29
    137a:	cf 91       	pop	r28
    137c:	0c 94 20 12 	jmp	0x2440	; 0x2440 <delayMicroseconds>

00001380 <LiquidCrystal::write4bits(unsigned char)>:
_ZN13LiquidCrystal10write4bitsEh():
    1380:	cf 92       	push	r12
    1382:	df 92       	push	r13
    1384:	ef 92       	push	r14
    1386:	ff 92       	push	r15
    1388:	0f 93       	push	r16
    138a:	1f 93       	push	r17
    138c:	cf 93       	push	r28
    138e:	df 93       	push	r29
    1390:	6c 01       	movw	r12, r24
    1392:	7c 01       	movw	r14, r24
    1394:	87 e0       	ldi	r24, 0x07	; 7
    1396:	e8 0e       	add	r14, r24
    1398:	f1 1c       	adc	r15, r1
    139a:	d0 e0       	ldi	r29, 0x00	; 0
    139c:	c0 e0       	ldi	r28, 0x00	; 0
    139e:	06 2f       	mov	r16, r22
    13a0:	10 e0       	ldi	r17, 0x00	; 0
    13a2:	b8 01       	movw	r22, r16
    13a4:	0c 2e       	mov	r0, r28
    13a6:	02 c0       	rjmp	.+4      	; 0x13ac <LiquidCrystal::write4bits(unsigned char)+0x2c>
    13a8:	75 95       	asr	r23
    13aa:	67 95       	ror	r22
    13ac:	0a 94       	dec	r0
    13ae:	e2 f7       	brpl	.-8      	; 0x13a8 <LiquidCrystal::write4bits(unsigned char)+0x28>
    13b0:	61 70       	andi	r22, 0x01	; 1
    13b2:	f7 01       	movw	r30, r14
    13b4:	81 91       	ld	r24, Z+
    13b6:	7f 01       	movw	r14, r30
    13b8:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
    13bc:	21 96       	adiw	r28, 0x01	; 1
    13be:	c4 30       	cpi	r28, 0x04	; 4
    13c0:	d1 05       	cpc	r29, r1
    13c2:	79 f7       	brne	.-34     	; 0x13a2 <LiquidCrystal::write4bits(unsigned char)+0x22>
    13c4:	c6 01       	movw	r24, r12
    13c6:	df 91       	pop	r29
    13c8:	cf 91       	pop	r28
    13ca:	1f 91       	pop	r17
    13cc:	0f 91       	pop	r16
    13ce:	ff 90       	pop	r15
    13d0:	ef 90       	pop	r14
    13d2:	df 90       	pop	r13
    13d4:	cf 90       	pop	r12
    13d6:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <LiquidCrystal::pulseEnable()>

000013da <LiquidCrystal::write8bits(unsigned char)>:
_ZN13LiquidCrystal10write8bitsEh():
    13da:	cf 92       	push	r12
    13dc:	df 92       	push	r13
    13de:	ef 92       	push	r14
    13e0:	ff 92       	push	r15
    13e2:	0f 93       	push	r16
    13e4:	1f 93       	push	r17
    13e6:	cf 93       	push	r28
    13e8:	df 93       	push	r29
    13ea:	6c 01       	movw	r12, r24
    13ec:	7c 01       	movw	r14, r24
    13ee:	87 e0       	ldi	r24, 0x07	; 7
    13f0:	e8 0e       	add	r14, r24
    13f2:	f1 1c       	adc	r15, r1
    13f4:	d0 e0       	ldi	r29, 0x00	; 0
    13f6:	c0 e0       	ldi	r28, 0x00	; 0
    13f8:	06 2f       	mov	r16, r22
    13fa:	10 e0       	ldi	r17, 0x00	; 0
    13fc:	b8 01       	movw	r22, r16
    13fe:	0c 2e       	mov	r0, r28
    1400:	02 c0       	rjmp	.+4      	; 0x1406 <LiquidCrystal::write8bits(unsigned char)+0x2c>
    1402:	75 95       	asr	r23
    1404:	67 95       	ror	r22
    1406:	0a 94       	dec	r0
    1408:	e2 f7       	brpl	.-8      	; 0x1402 <LiquidCrystal::write8bits(unsigned char)+0x28>
    140a:	61 70       	andi	r22, 0x01	; 1
    140c:	f7 01       	movw	r30, r14
    140e:	81 91       	ld	r24, Z+
    1410:	7f 01       	movw	r14, r30
    1412:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
    1416:	21 96       	adiw	r28, 0x01	; 1
    1418:	c8 30       	cpi	r28, 0x08	; 8
    141a:	d1 05       	cpc	r29, r1
    141c:	79 f7       	brne	.-34     	; 0x13fc <LiquidCrystal::write8bits(unsigned char)+0x22>
    141e:	c6 01       	movw	r24, r12
    1420:	df 91       	pop	r29
    1422:	cf 91       	pop	r28
    1424:	1f 91       	pop	r17
    1426:	0f 91       	pop	r16
    1428:	ff 90       	pop	r15
    142a:	ef 90       	pop	r14
    142c:	df 90       	pop	r13
    142e:	cf 90       	pop	r12
    1430:	0c 94 a3 09 	jmp	0x1346	; 0x1346 <LiquidCrystal::pulseEnable()>

00001434 <LiquidCrystal::send(unsigned char, unsigned char)>:
_ZN13LiquidCrystal4sendEhh():
    1434:	1f 93       	push	r17
    1436:	cf 93       	push	r28
    1438:	df 93       	push	r29
    143a:	ec 01       	movw	r28, r24
    143c:	16 2f       	mov	r17, r22
    143e:	64 2f       	mov	r22, r20
    1440:	8c 81       	ldd	r24, Y+4	; 0x04
    1442:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
    1446:	8d 81       	ldd	r24, Y+5	; 0x05
    1448:	8f 3f       	cpi	r24, 0xFF	; 255
    144a:	19 f0       	breq	.+6      	; 0x1452 <LiquidCrystal::send(unsigned char, unsigned char)+0x1e>
    144c:	60 e0       	ldi	r22, 0x00	; 0
    144e:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
    1452:	8f 85       	ldd	r24, Y+15	; 0x0f
    1454:	61 2f       	mov	r22, r17
    1456:	84 ff       	sbrs	r24, 4
    1458:	06 c0       	rjmp	.+12     	; 0x1466 <LiquidCrystal::send(unsigned char, unsigned char)+0x32>
    145a:	ce 01       	movw	r24, r28
    145c:	df 91       	pop	r29
    145e:	cf 91       	pop	r28
    1460:	1f 91       	pop	r17
    1462:	0c 94 ed 09 	jmp	0x13da	; 0x13da <LiquidCrystal::write8bits(unsigned char)>
    1466:	70 e0       	ldi	r23, 0x00	; 0
    1468:	84 e0       	ldi	r24, 0x04	; 4
    146a:	75 95       	asr	r23
    146c:	67 95       	ror	r22
    146e:	8a 95       	dec	r24
    1470:	e1 f7       	brne	.-8      	; 0x146a <LiquidCrystal::send(unsigned char, unsigned char)+0x36>
    1472:	ce 01       	movw	r24, r28
    1474:	0e 94 c0 09 	call	0x1380	; 0x1380 <LiquidCrystal::write4bits(unsigned char)>
    1478:	61 2f       	mov	r22, r17
    147a:	ce 01       	movw	r24, r28
    147c:	df 91       	pop	r29
    147e:	cf 91       	pop	r28
    1480:	1f 91       	pop	r17
    1482:	0c 94 c0 09 	jmp	0x1380	; 0x1380 <LiquidCrystal::write4bits(unsigned char)>

00001486 <LiquidCrystal::command(unsigned char)>:
_ZN13LiquidCrystal7commandEh():
    1486:	40 e0       	ldi	r20, 0x00	; 0
    1488:	0c 94 1a 0a 	jmp	0x1434	; 0x1434 <LiquidCrystal::send(unsigned char, unsigned char)>

0000148c <LiquidCrystal::clear()>:
_ZN13LiquidCrystal5clearEv():
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	0e 94 43 0a 	call	0x1486	; 0x1486 <LiquidCrystal::command(unsigned char)>
    1492:	80 ed       	ldi	r24, 0xD0	; 208
    1494:	97 e0       	ldi	r25, 0x07	; 7
    1496:	0c 94 20 12 	jmp	0x2440	; 0x2440 <delayMicroseconds>

0000149a <LiquidCrystal::setCursor(unsigned char, unsigned char)>:
_ZN13LiquidCrystal9setCursorEhh():
    149a:	44 30       	cpi	r20, 0x04	; 4
    149c:	08 f0       	brcs	.+2      	; 0x14a0 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x6>
    149e:	43 e0       	ldi	r20, 0x03	; 3
    14a0:	fc 01       	movw	r30, r24
    14a2:	23 89       	ldd	r18, Z+19	; 0x13
    14a4:	42 17       	cp	r20, r18
    14a6:	10 f0       	brcs	.+4      	; 0x14ac <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x12>
    14a8:	4f ef       	ldi	r20, 0xFF	; 255
    14aa:	42 0f       	add	r20, r18
    14ac:	fc 01       	movw	r30, r24
    14ae:	e4 0f       	add	r30, r20
    14b0:	f1 1d       	adc	r31, r1
    14b2:	24 89       	ldd	r18, Z+20	; 0x14
    14b4:	62 0f       	add	r22, r18
    14b6:	60 68       	ori	r22, 0x80	; 128
    14b8:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <LiquidCrystal::command(unsigned char)>

000014bc <LiquidCrystal::display()>:
_ZN13LiquidCrystal7displayEv():
    14bc:	fc 01       	movw	r30, r24
    14be:	60 89       	ldd	r22, Z+16	; 0x10
    14c0:	26 2f       	mov	r18, r22
    14c2:	24 60       	ori	r18, 0x04	; 4
    14c4:	20 8b       	std	Z+16, r18	; 0x10
    14c6:	6c 60       	ori	r22, 0x0C	; 12
    14c8:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <LiquidCrystal::command(unsigned char)>

000014cc <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystal5beginEhhh():
    14cc:	0f 93       	push	r16
    14ce:	1f 93       	push	r17
    14d0:	cf 93       	push	r28
    14d2:	df 93       	push	r29
    14d4:	ec 01       	movw	r28, r24
    14d6:	42 30       	cpi	r20, 0x02	; 2
    14d8:	18 f0       	brcs	.+6      	; 0x14e0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x14>
    14da:	8f 85       	ldd	r24, Y+15	; 0x0f
    14dc:	88 60       	ori	r24, 0x08	; 8
    14de:	8f 87       	std	Y+15, r24	; 0x0f
    14e0:	4b 8b       	std	Y+19, r20	; 0x13
_ZN13LiquidCrystal13setRowOffsetsEiiii():
    14e2:	1c 8a       	std	Y+20, r1	; 0x14
    14e4:	80 e4       	ldi	r24, 0x40	; 64
    14e6:	8d 8b       	std	Y+21, r24	; 0x15
    14e8:	6e 8b       	std	Y+22, r22	; 0x16
    14ea:	60 5c       	subi	r22, 0xC0	; 192
    14ec:	6f 8b       	std	Y+23, r22	; 0x17
_ZN13LiquidCrystal5beginEhhh():
    14ee:	22 23       	and	r18, r18
    14f0:	29 f0       	breq	.+10     	; 0x14fc <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    14f2:	41 30       	cpi	r20, 0x01	; 1
    14f4:	19 f4       	brne	.+6      	; 0x14fc <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    14f6:	8f 85       	ldd	r24, Y+15	; 0x0f
    14f8:	84 60       	ori	r24, 0x04	; 4
    14fa:	8f 87       	std	Y+15, r24	; 0x0f
    14fc:	61 e0       	ldi	r22, 0x01	; 1
    14fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1500:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
    1504:	8d 81       	ldd	r24, Y+5	; 0x05
    1506:	8f 3f       	cpi	r24, 0xFF	; 255
    1508:	19 f0       	breq	.+6      	; 0x1510 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x44>
    150a:	61 e0       	ldi	r22, 0x01	; 1
    150c:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
    1510:	61 e0       	ldi	r22, 0x01	; 1
    1512:	8e 81       	ldd	r24, Y+6	; 0x06
    1514:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
    1518:	8e 01       	movw	r16, r28
    151a:	98 01       	movw	r18, r16
    151c:	2c 1b       	sub	r18, r28
    151e:	3d 0b       	sbc	r19, r29
    1520:	8f 85       	ldd	r24, Y+15	; 0x0f
    1522:	84 fd       	sbrc	r24, 4
    1524:	0d c0       	rjmp	.+26     	; 0x1540 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x74>
    1526:	84 e0       	ldi	r24, 0x04	; 4
    1528:	90 e0       	ldi	r25, 0x00	; 0
    152a:	0f 5f       	subi	r16, 0xFF	; 255
    152c:	1f 4f       	sbci	r17, 0xFF	; 255
    152e:	28 17       	cp	r18, r24
    1530:	39 07       	cpc	r19, r25
    1532:	4c f4       	brge	.+18     	; 0x1546 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x7a>
    1534:	61 e0       	ldi	r22, 0x01	; 1
    1536:	f8 01       	movw	r30, r16
    1538:	86 81       	ldd	r24, Z+6	; 0x06
    153a:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
    153e:	ed cf       	rjmp	.-38     	; 0x151a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x4e>
    1540:	88 e0       	ldi	r24, 0x08	; 8
    1542:	90 e0       	ldi	r25, 0x00	; 0
    1544:	f2 cf       	rjmp	.-28     	; 0x152a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x5e>
    1546:	80 e5       	ldi	r24, 0x50	; 80
    1548:	93 ec       	ldi	r25, 0xC3	; 195
    154a:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    154e:	60 e0       	ldi	r22, 0x00	; 0
    1550:	8c 81       	ldd	r24, Y+4	; 0x04
    1552:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
    1556:	60 e0       	ldi	r22, 0x00	; 0
    1558:	8e 81       	ldd	r24, Y+6	; 0x06
    155a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
    155e:	8d 81       	ldd	r24, Y+5	; 0x05
    1560:	8f 3f       	cpi	r24, 0xFF	; 255
    1562:	19 f0       	breq	.+6      	; 0x156a <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x9e>
    1564:	60 e0       	ldi	r22, 0x00	; 0
    1566:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
    156a:	6f 85       	ldd	r22, Y+15	; 0x0f
    156c:	64 fd       	sbrc	r22, 4
    156e:	33 c0       	rjmp	.+102    	; 0x15d6 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x10a>
    1570:	63 e0       	ldi	r22, 0x03	; 3
    1572:	ce 01       	movw	r24, r28
    1574:	0e 94 c0 09 	call	0x1380	; 0x1380 <LiquidCrystal::write4bits(unsigned char)>
    1578:	84 e9       	ldi	r24, 0x94	; 148
    157a:	91 e1       	ldi	r25, 0x11	; 17
    157c:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    1580:	63 e0       	ldi	r22, 0x03	; 3
    1582:	ce 01       	movw	r24, r28
    1584:	0e 94 c0 09 	call	0x1380	; 0x1380 <LiquidCrystal::write4bits(unsigned char)>
    1588:	84 e9       	ldi	r24, 0x94	; 148
    158a:	91 e1       	ldi	r25, 0x11	; 17
    158c:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    1590:	63 e0       	ldi	r22, 0x03	; 3
    1592:	ce 01       	movw	r24, r28
    1594:	0e 94 c0 09 	call	0x1380	; 0x1380 <LiquidCrystal::write4bits(unsigned char)>
    1598:	86 e9       	ldi	r24, 0x96	; 150
    159a:	90 e0       	ldi	r25, 0x00	; 0
    159c:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    15a0:	62 e0       	ldi	r22, 0x02	; 2
    15a2:	ce 01       	movw	r24, r28
    15a4:	0e 94 c0 09 	call	0x1380	; 0x1380 <LiquidCrystal::write4bits(unsigned char)>
    15a8:	6f 85       	ldd	r22, Y+15	; 0x0f
    15aa:	60 62       	ori	r22, 0x20	; 32
    15ac:	ce 01       	movw	r24, r28
    15ae:	0e 94 43 0a 	call	0x1486	; 0x1486 <LiquidCrystal::command(unsigned char)>
    15b2:	84 e0       	ldi	r24, 0x04	; 4
    15b4:	88 8b       	std	Y+16, r24	; 0x10
    15b6:	ce 01       	movw	r24, r28
    15b8:	0e 94 5e 0a 	call	0x14bc	; 0x14bc <LiquidCrystal::display()>
    15bc:	ce 01       	movw	r24, r28
    15be:	0e 94 46 0a 	call	0x148c	; 0x148c <LiquidCrystal::clear()>
    15c2:	82 e0       	ldi	r24, 0x02	; 2
    15c4:	89 8b       	std	Y+17, r24	; 0x11
    15c6:	66 e0       	ldi	r22, 0x06	; 6
    15c8:	ce 01       	movw	r24, r28
    15ca:	df 91       	pop	r29
    15cc:	cf 91       	pop	r28
    15ce:	1f 91       	pop	r17
    15d0:	0f 91       	pop	r16
    15d2:	0c 94 43 0a 	jmp	0x1486	; 0x1486 <LiquidCrystal::command(unsigned char)>
    15d6:	60 62       	ori	r22, 0x20	; 32
    15d8:	ce 01       	movw	r24, r28
    15da:	0e 94 43 0a 	call	0x1486	; 0x1486 <LiquidCrystal::command(unsigned char)>
    15de:	84 e9       	ldi	r24, 0x94	; 148
    15e0:	91 e1       	ldi	r25, 0x11	; 17
    15e2:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    15e6:	6f 85       	ldd	r22, Y+15	; 0x0f
    15e8:	60 62       	ori	r22, 0x20	; 32
    15ea:	ce 01       	movw	r24, r28
    15ec:	0e 94 43 0a 	call	0x1486	; 0x1486 <LiquidCrystal::command(unsigned char)>
    15f0:	86 e9       	ldi	r24, 0x96	; 150
    15f2:	90 e0       	ldi	r25, 0x00	; 0
    15f4:	0e 94 20 12 	call	0x2440	; 0x2440 <delayMicroseconds>
    15f8:	6f 85       	ldd	r22, Y+15	; 0x0f
    15fa:	60 62       	ori	r22, 0x20	; 32
    15fc:	ce 01       	movw	r24, r28
    15fe:	0e 94 43 0a 	call	0x1486	; 0x1486 <LiquidCrystal::command(unsigned char)>
    1602:	d2 cf       	rjmp	.-92     	; 0x15a8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xdc>

00001604 <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystalC2Ehhhhhh():
    1604:	cf 92       	push	r12
    1606:	ef 92       	push	r14
    1608:	0f 93       	push	r16
    160a:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    160c:	13 82       	std	Z+3, r1	; 0x03
    160e:	12 82       	std	Z+2, r1	; 0x02
_ZN13LiquidCrystalC2Ehhhhhh():
    1610:	84 eb       	ldi	r24, 0xB4	; 180
    1612:	93 e0       	ldi	r25, 0x03	; 3
    1614:	91 83       	std	Z+1, r25	; 0x01
    1616:	80 83       	st	Z, r24
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    1618:	64 83       	std	Z+4, r22	; 0x04
    161a:	8f ef       	ldi	r24, 0xFF	; 255
    161c:	85 83       	std	Z+5, r24	; 0x05
    161e:	46 83       	std	Z+6, r20	; 0x06
    1620:	27 83       	std	Z+7, r18	; 0x07
    1622:	00 87       	std	Z+8, r16	; 0x08
    1624:	e1 86       	std	Z+9, r14	; 0x09
    1626:	c2 86       	std	Z+10, r12	; 0x0a
    1628:	13 86       	std	Z+11, r1	; 0x0b
    162a:	14 86       	std	Z+12, r1	; 0x0c
    162c:	15 86       	std	Z+13, r1	; 0x0d
    162e:	16 86       	std	Z+14, r1	; 0x0e
    1630:	17 86       	std	Z+15, r1	; 0x0f
    1632:	20 e0       	ldi	r18, 0x00	; 0
    1634:	41 e0       	ldi	r20, 0x01	; 1
    1636:	60 e1       	ldi	r22, 0x10	; 16
    1638:	cf 01       	movw	r24, r30
_ZN13LiquidCrystalC2Ehhhhhh():
    163a:	0f 91       	pop	r16
    163c:	ef 90       	pop	r14
    163e:	cf 90       	pop	r12
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    1640:	0c 94 66 0a 	jmp	0x14cc	; 0x14cc <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>

00001644 <LiquidCrystal::write(unsigned char)>:
_ZN13LiquidCrystal5writeEh():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    1644:	41 e0       	ldi	r20, 0x01	; 1
    1646:	0e 94 1a 0a 	call	0x1434	; 0x1434 <LiquidCrystal::send(unsigned char, unsigned char)>
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
    164a:	81 e0       	ldi	r24, 0x01	; 1
    164c:	90 e0       	ldi	r25, 0x00	; 0
    164e:	08 95       	ret

00001650 <LedControl::spiTransfer(int, unsigned char, unsigned char)>:
_ZN10LedControl11spiTransferEihh():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:97
void LedControl::setIntensity(int addr, int intensity) {
    if(addr<0 || addr>=maxDevices)
        return;
    if(intensity>=0 && intensity<16)	
        spiTransfer(addr, OP_INTENSITY,intensity);
}
    1650:	8f 92       	push	r8
    1652:	9f 92       	push	r9
    1654:	af 92       	push	r10
    1656:	bf 92       	push	r11
    1658:	cf 92       	push	r12
    165a:	df 92       	push	r13
    165c:	ef 92       	push	r14
    165e:	ff 92       	push	r15
    1660:	0f 93       	push	r16
    1662:	1f 93       	push	r17
    1664:	cf 93       	push	r28
    1666:	df 93       	push	r29
    1668:	00 d0       	rcall	.+0      	; 0x166a <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x1a>
    166a:	cd b7       	in	r28, 0x3d	; 61
    166c:	de b7       	in	r29, 0x3e	; 62
    166e:	8c 01       	movw	r16, r24
    1670:	49 83       	std	Y+1, r20	; 0x01
    1672:	2a 83       	std	Y+2, r18	; 0x02
    1674:	66 0f       	add	r22, r22
    1676:	77 1f       	adc	r23, r23
    1678:	f8 01       	movw	r30, r16
    167a:	ea 5a       	subi	r30, 0xAA	; 170
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	e0 80       	ld	r14, Z
    1680:	f1 80       	ldd	r15, Z+1	; 0x01
    1682:	ee 0c       	add	r14, r14
    1684:	ff 1c       	adc	r15, r15
    1686:	f8 01       	movw	r30, r16
    1688:	cf 01       	movw	r24, r30
    168a:	80 1b       	sub	r24, r16
    168c:	91 0b       	sbc	r25, r17
    168e:	8e 15       	cp	r24, r14
    1690:	9f 05       	cpc	r25, r15
    1692:	14 f4       	brge	.+4      	; 0x1698 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x48>
    1694:	11 92       	st	Z+, r1
    1696:	f8 cf       	rjmp	.-16     	; 0x1688 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x38>
    1698:	89 81       	ldd	r24, Y+1	; 0x01
    169a:	f8 01       	movw	r30, r16
    169c:	e6 0f       	add	r30, r22
    169e:	f7 1f       	adc	r31, r23
    16a0:	81 83       	std	Z+1, r24	; 0x01
    16a2:	8a 81       	ldd	r24, Y+2	; 0x02
    16a4:	80 83       	st	Z, r24
    16a6:	68 01       	movw	r12, r16
    16a8:	84 e5       	ldi	r24, 0x54	; 84
    16aa:	c8 0e       	add	r12, r24
    16ac:	d1 1c       	adc	r13, r1
    16ae:	60 e0       	ldi	r22, 0x00	; 0
    16b0:	f6 01       	movw	r30, r12
    16b2:	80 81       	ld	r24, Z
    16b4:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
    16b8:	48 01       	movw	r8, r16
    16ba:	f2 e5       	ldi	r31, 0x52	; 82
    16bc:	8f 0e       	add	r8, r31
    16be:	91 1c       	adc	r9, r1
    16c0:	58 01       	movw	r10, r16
    16c2:	80 e5       	ldi	r24, 0x50	; 80
    16c4:	a8 0e       	add	r10, r24
    16c6:	b1 1c       	adc	r11, r1
    16c8:	1e 14       	cp	r1, r14
    16ca:	1f 04       	cpc	r1, r15
    16cc:	7c f4       	brge	.+30     	; 0x16ec <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x9c>
    16ce:	e1 e0       	ldi	r30, 0x01	; 1
    16d0:	ee 1a       	sub	r14, r30
    16d2:	f1 08       	sbc	r15, r1
    16d4:	f8 01       	movw	r30, r16
    16d6:	ee 0d       	add	r30, r14
    16d8:	ff 1d       	adc	r31, r15
    16da:	20 81       	ld	r18, Z
    16dc:	41 e0       	ldi	r20, 0x01	; 1
    16de:	f4 01       	movw	r30, r8
    16e0:	60 81       	ld	r22, Z
    16e2:	f5 01       	movw	r30, r10
    16e4:	80 81       	ld	r24, Z
    16e6:	0e 94 28 13 	call	0x2650	; 0x2650 <shiftOut>
    16ea:	ee cf       	rjmp	.-36     	; 0x16c8 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x78>
    16ec:	61 e0       	ldi	r22, 0x01	; 1
    16ee:	f6 01       	movw	r30, r12
    16f0:	80 81       	ld	r24, Z
    16f2:	0f 90       	pop	r0
    16f4:	0f 90       	pop	r0
    16f6:	df 91       	pop	r29
    16f8:	cf 91       	pop	r28
    16fa:	1f 91       	pop	r17
    16fc:	0f 91       	pop	r16
    16fe:	ff 90       	pop	r15
    1700:	ef 90       	pop	r14
    1702:	df 90       	pop	r13
    1704:	cf 90       	pop	r12
    1706:	bf 90       	pop	r11
    1708:	af 90       	pop	r10
    170a:	9f 90       	pop	r9
    170c:	8f 90       	pop	r8
    170e:	0c 94 d1 12 	jmp	0x25a2	; 0x25a2 <digitalWrite>

00001712 <LedControl::shutdown(int, bool)>:
_ZN10LedControl8shutdownEib():
    1712:	77 fd       	sbrc	r23, 7
    1714:	0f c0       	rjmp	.+30     	; 0x1734 <LedControl::shutdown(int, bool)+0x22>
    1716:	fc 01       	movw	r30, r24
    1718:	ea 5a       	subi	r30, 0xAA	; 170
    171a:	ff 4f       	sbci	r31, 0xFF	; 255
    171c:	20 81       	ld	r18, Z
    171e:	31 81       	ldd	r19, Z+1	; 0x01
    1720:	62 17       	cp	r22, r18
    1722:	73 07       	cpc	r23, r19
    1724:	3c f4       	brge	.+14     	; 0x1734 <LedControl::shutdown(int, bool)+0x22>
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	41 11       	cpse	r20, r1
    172a:	01 c0       	rjmp	.+2      	; 0x172e <LedControl::shutdown(int, bool)+0x1c>
    172c:	21 e0       	ldi	r18, 0x01	; 1
    172e:	4c e0       	ldi	r20, 0x0C	; 12
    1730:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1734:	08 95       	ret

00001736 <LedControl::setScanLimit(int, int)>:
_ZN10LedControl12setScanLimitEii():
    1736:	77 fd       	sbrc	r23, 7
    1738:	0f c0       	rjmp	.+30     	; 0x1758 <LedControl::setScanLimit(int, int)+0x22>
    173a:	fc 01       	movw	r30, r24
    173c:	ea 5a       	subi	r30, 0xAA	; 170
    173e:	ff 4f       	sbci	r31, 0xFF	; 255
    1740:	20 81       	ld	r18, Z
    1742:	31 81       	ldd	r19, Z+1	; 0x01
    1744:	62 17       	cp	r22, r18
    1746:	73 07       	cpc	r23, r19
    1748:	3c f4       	brge	.+14     	; 0x1758 <LedControl::setScanLimit(int, int)+0x22>
    174a:	48 30       	cpi	r20, 0x08	; 8
    174c:	51 05       	cpc	r21, r1
    174e:	20 f4       	brcc	.+8      	; 0x1758 <LedControl::setScanLimit(int, int)+0x22>
    1750:	24 2f       	mov	r18, r20
    1752:	4b e0       	ldi	r20, 0x0B	; 11
    1754:	0c 94 28 0b 	jmp	0x1650	; 0x1650 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1758:	08 95       	ret

0000175a <LedControl::clearDisplay(int)>:
_ZN10LedControl12clearDisplayEi():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:99

void LedControl::clearDisplay(int addr) {
    175a:	df 92       	push	r13
    175c:	ef 92       	push	r14
    175e:	ff 92       	push	r15
    1760:	0f 93       	push	r16
    1762:	1f 93       	push	r17
    1764:	cf 93       	push	r28
    1766:	df 93       	push	r29
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:102
    int offset;

    if(addr<0 || addr>=maxDevices)
    1768:	77 fd       	sbrc	r23, 7
    176a:	23 c0       	rjmp	.+70     	; 0x17b2 <LedControl::clearDisplay(int)+0x58>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:102 (discriminator 1)
    176c:	fc 01       	movw	r30, r24
    176e:	ea 5a       	subi	r30, 0xAA	; 170
    1770:	ff 4f       	sbci	r31, 0xFF	; 255
    1772:	20 81       	ld	r18, Z
    1774:	31 81       	ldd	r19, Z+1	; 0x01
    1776:	62 17       	cp	r22, r18
    1778:	73 07       	cpc	r23, r19
    177a:	dc f4       	brge	.+54     	; 0x17b2 <LedControl::clearDisplay(int)+0x58>
    177c:	eb 01       	movw	r28, r22
    177e:	7c 01       	movw	r14, r24
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:104
        return;
    offset=addr*8;
    1780:	8b 01       	movw	r16, r22
    1782:	83 e0       	ldi	r24, 0x03	; 3
    1784:	00 0f       	add	r16, r16
    1786:	11 1f       	adc	r17, r17
    1788:	8a 95       	dec	r24
    178a:	e1 f7       	brne	.-8      	; 0x1784 <LedControl::clearDisplay(int)+0x2a>
    178c:	00 5f       	subi	r16, 0xF0	; 240
    178e:	1f 4f       	sbci	r17, 0xFF	; 255
    1790:	0e 0d       	add	r16, r14
    1792:	1f 1d       	adc	r17, r15
    1794:	dd 24       	eor	r13, r13
    1796:	d3 94       	inc	r13
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:106
    for(int i=0;i<8;i++) {
        status[offset+i]=0;
    1798:	f8 01       	movw	r30, r16
    179a:	11 92       	st	Z+, r1
    179c:	8f 01       	movw	r16, r30
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:107
        spiTransfer(addr, i+1,status[offset+i]);
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	4d 2d       	mov	r20, r13
    17a2:	be 01       	movw	r22, r28
    17a4:	c7 01       	movw	r24, r14
    17a6:	0e 94 28 0b 	call	0x1650	; 0x1650 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    17aa:	d3 94       	inc	r13
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:105
    int offset;

    if(addr<0 || addr>=maxDevices)
        return;
    offset=addr*8;
    for(int i=0;i<8;i++) {
    17ac:	f9 e0       	ldi	r31, 0x09	; 9
    17ae:	df 12       	cpse	r13, r31
    17b0:	f3 cf       	rjmp	.-26     	; 0x1798 <LedControl::clearDisplay(int)+0x3e>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:109
        status[offset+i]=0;
        spiTransfer(addr, i+1,status[offset+i]);
    }
}
    17b2:	df 91       	pop	r29
    17b4:	cf 91       	pop	r28
    17b6:	1f 91       	pop	r17
    17b8:	0f 91       	pop	r16
    17ba:	ff 90       	pop	r15
    17bc:	ef 90       	pop	r14
    17be:	df 90       	pop	r13
    17c0:	08 95       	ret

000017c2 <LedControl::LedControl(int, int, int, int)>:
_ZN10LedControlC2Eiiii():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:46
#define OP_INTENSITY   10
#define OP_SCANLIMIT   11
#define OP_SHUTDOWN    12
#define OP_DISPLAYTEST 15

LedControl::LedControl(int dataPin, int clkPin, int csPin, int numDevices) {
    17c2:	6f 92       	push	r6
    17c4:	7f 92       	push	r7
    17c6:	8f 92       	push	r8
    17c8:	9f 92       	push	r9
    17ca:	af 92       	push	r10
    17cc:	bf 92       	push	r11
    17ce:	cf 92       	push	r12
    17d0:	df 92       	push	r13
    17d2:	ef 92       	push	r14
    17d4:	ff 92       	push	r15
    17d6:	0f 93       	push	r16
    17d8:	1f 93       	push	r17
    17da:	cf 93       	push	r28
    17dc:	df 93       	push	r29
    17de:	ec 01       	movw	r28, r24
    17e0:	d6 2e       	mov	r13, r22
    17e2:	c7 2e       	mov	r12, r23
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:47
    SPI_MOSI=dataPin;
    17e4:	7c 01       	movw	r14, r24
    17e6:	80 e5       	ldi	r24, 0x50	; 80
    17e8:	e8 0e       	add	r14, r24
    17ea:	f1 1c       	adc	r15, r1
    17ec:	f7 01       	movw	r30, r14
    17ee:	60 83       	st	Z, r22
    17f0:	71 83       	std	Z+1, r23	; 0x01
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:48
    SPI_CLK=clkPin;
    17f2:	3e 01       	movw	r6, r28
    17f4:	f2 e5       	ldi	r31, 0x52	; 82
    17f6:	6f 0e       	add	r6, r31
    17f8:	71 1c       	adc	r7, r1
    17fa:	f3 01       	movw	r30, r6
    17fc:	51 83       	std	Z+1, r21	; 0x01
    17fe:	40 83       	st	Z, r20
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:49
    SPI_CS=csPin;
    1800:	4e 01       	movw	r8, r28
    1802:	f4 e5       	ldi	r31, 0x54	; 84
    1804:	8f 0e       	add	r8, r31
    1806:	91 1c       	adc	r9, r1
    1808:	f4 01       	movw	r30, r8
    180a:	31 83       	std	Z+1, r19	; 0x01
    180c:	20 83       	st	Z, r18
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:50
    if(numDevices<=0 || numDevices>8 )
    180e:	c8 01       	movw	r24, r16
    1810:	01 97       	sbiw	r24, 0x01	; 1
    1812:	08 97       	sbiw	r24, 0x08	; 8
    1814:	10 f0       	brcs	.+4      	; 0x181a <LedControl::LedControl(int, int, int, int)+0x58>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:51
        numDevices=8;
    1816:	08 e0       	ldi	r16, 0x08	; 8
    1818:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:52
    maxDevices=numDevices;
    181a:	5e 01       	movw	r10, r28
    181c:	f6 e5       	ldi	r31, 0x56	; 86
    181e:	af 0e       	add	r10, r31
    1820:	b1 1c       	adc	r11, r1
    1822:	f5 01       	movw	r30, r10
    1824:	11 83       	std	Z+1, r17	; 0x01
    1826:	00 83       	st	Z, r16
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:53
    pinMode(SPI_MOSI,OUTPUT);
    1828:	61 e0       	ldi	r22, 0x01	; 1
    182a:	8d 2d       	mov	r24, r13
    182c:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:54
    pinMode(SPI_CLK,OUTPUT);
    1830:	61 e0       	ldi	r22, 0x01	; 1
    1832:	f3 01       	movw	r30, r6
    1834:	80 81       	ld	r24, Z
    1836:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:55
    pinMode(SPI_CS,OUTPUT);
    183a:	61 e0       	ldi	r22, 0x01	; 1
    183c:	f4 01       	movw	r30, r8
    183e:	80 81       	ld	r24, Z
    1840:	0e 94 95 12 	call	0x252a	; 0x252a <pinMode>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:56
    digitalWrite(SPI_CS,HIGH);
    1844:	61 e0       	ldi	r22, 0x01	; 1
    1846:	f4 01       	movw	r30, r8
    1848:	80 81       	ld	r24, Z
    184a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:57
    SPI_MOSI=dataPin;
    184e:	f7 01       	movw	r30, r14
    1850:	d0 82       	st	Z, r13
    1852:	c1 82       	std	Z+1, r12	; 0x01
    1854:	fe 01       	movw	r30, r28
    1856:	70 96       	adiw	r30, 0x10	; 16
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:59 (discriminator 2)
    for(int i=0;i<64;i++) 
        status[i]=0x00;
    1858:	11 92       	st	Z+, r1
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:58 (discriminator 2)
    pinMode(SPI_MOSI,OUTPUT);
    pinMode(SPI_CLK,OUTPUT);
    pinMode(SPI_CS,OUTPUT);
    digitalWrite(SPI_CS,HIGH);
    SPI_MOSI=dataPin;
    for(int i=0;i<64;i++) 
    185a:	ee 15       	cp	r30, r14
    185c:	ff 05       	cpc	r31, r15
    185e:	e1 f7       	brne	.-8      	; 0x1858 <LedControl::LedControl(int, int, int, int)+0x96>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:60
        status[i]=0x00;
    for(int i=0;i<maxDevices;i++) {
    1860:	10 e0       	ldi	r17, 0x00	; 0
    1862:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:60 (discriminator 3)
    1864:	f5 01       	movw	r30, r10
    1866:	80 81       	ld	r24, Z
    1868:	91 81       	ldd	r25, Z+1	; 0x01
    186a:	08 17       	cp	r16, r24
    186c:	19 07       	cpc	r17, r25
    186e:	f4 f4       	brge	.+60     	; 0x18ac <LedControl::LedControl(int, int, int, int)+0xea>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:61 (discriminator 2)
        spiTransfer(i,OP_DISPLAYTEST,0);
    1870:	20 e0       	ldi	r18, 0x00	; 0
    1872:	4f e0       	ldi	r20, 0x0F	; 15
    1874:	b8 01       	movw	r22, r16
    1876:	ce 01       	movw	r24, r28
    1878:	0e 94 28 0b 	call	0x1650	; 0x1650 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:63 (discriminator 2)
        //scanlimit is set to max on startup
        setScanLimit(i,7);
    187c:	47 e0       	ldi	r20, 0x07	; 7
    187e:	50 e0       	ldi	r21, 0x00	; 0
    1880:	b8 01       	movw	r22, r16
    1882:	ce 01       	movw	r24, r28
    1884:	0e 94 9b 0b 	call	0x1736	; 0x1736 <LedControl::setScanLimit(int, int)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:65 (discriminator 2)
        //decode is done in source
        spiTransfer(i,OP_DECODEMODE,0);
    1888:	20 e0       	ldi	r18, 0x00	; 0
    188a:	49 e0       	ldi	r20, 0x09	; 9
    188c:	b8 01       	movw	r22, r16
    188e:	ce 01       	movw	r24, r28
    1890:	0e 94 28 0b 	call	0x1650	; 0x1650 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:66 (discriminator 2)
        clearDisplay(i);
    1894:	b8 01       	movw	r22, r16
    1896:	ce 01       	movw	r24, r28
    1898:	0e 94 ad 0b 	call	0x175a	; 0x175a <LedControl::clearDisplay(int)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:68 (discriminator 2)
        //we go into shutdown-mode on startup
        shutdown(i,true);
    189c:	41 e0       	ldi	r20, 0x01	; 1
    189e:	b8 01       	movw	r22, r16
    18a0:	ce 01       	movw	r24, r28
    18a2:	0e 94 89 0b 	call	0x1712	; 0x1712 <LedControl::shutdown(int, bool)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:60 (discriminator 2)
    pinMode(SPI_CS,OUTPUT);
    digitalWrite(SPI_CS,HIGH);
    SPI_MOSI=dataPin;
    for(int i=0;i<64;i++) 
        status[i]=0x00;
    for(int i=0;i<maxDevices;i++) {
    18a6:	0f 5f       	subi	r16, 0xFF	; 255
    18a8:	1f 4f       	sbci	r17, 0xFF	; 255
    18aa:	dc cf       	rjmp	.-72     	; 0x1864 <LedControl::LedControl(int, int, int, int)+0xa2>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:70
        spiTransfer(i,OP_DECODEMODE,0);
        clearDisplay(i);
        //we go into shutdown-mode on startup
        shutdown(i,true);
    }
}
    18ac:	df 91       	pop	r29
    18ae:	cf 91       	pop	r28
    18b0:	1f 91       	pop	r17
    18b2:	0f 91       	pop	r16
    18b4:	ff 90       	pop	r15
    18b6:	ef 90       	pop	r14
    18b8:	df 90       	pop	r13
    18ba:	cf 90       	pop	r12
    18bc:	bf 90       	pop	r11
    18be:	af 90       	pop	r10
    18c0:	9f 90       	pop	r9
    18c2:	8f 90       	pop	r8
    18c4:	7f 90       	pop	r7
    18c6:	6f 90       	pop	r6
    18c8:	08 95       	ret

000018ca <ADS1X15::isConnected()>:
_ZN7ADS1X1511isConnectedEv():
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:570
  _wire = wire;
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_1;
  _conversionDelay = ADS1115_CONVERSION_DELAY;
  _bitShift = 0;
  _maxPorts = 1;
}
    18ca:	cf 93       	push	r28
    18cc:	df 93       	push	r29
    18ce:	ec 01       	movw	r28, r24
    18d0:	6a 81       	ldd	r22, Y+2	; 0x02
    18d2:	88 89       	ldd	r24, Y+16	; 0x10
    18d4:	99 89       	ldd	r25, Y+17	; 0x11
    18d6:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <TwoWire::beginTransmission(unsigned char)>
    18da:	88 89       	ldd	r24, Y+16	; 0x10
    18dc:	99 89       	ldd	r25, Y+17	; 0x11
    18de:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TwoWire::endTransmission()>
    18e2:	91 e0       	ldi	r25, 0x01	; 1
    18e4:	81 11       	cpse	r24, r1
    18e6:	90 e0       	ldi	r25, 0x00	; 0
    18e8:	89 2f       	mov	r24, r25
    18ea:	df 91       	pop	r29
    18ec:	cf 91       	pop	r28
    18ee:	08 95       	ret

000018f0 <ADS1X15::begin()>:
_ZN7ADS1X155beginEv():
    18f0:	cf 93       	push	r28
    18f2:	df 93       	push	r29
    18f4:	ec 01       	movw	r28, r24
    18f6:	88 89       	ldd	r24, Y+16	; 0x10
    18f8:	99 89       	ldd	r25, Y+17	; 0x11
    18fa:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <TwoWire::begin()>
    18fe:	8a 81       	ldd	r24, Y+2	; 0x02
    1900:	88 54       	subi	r24, 0x48	; 72
    1902:	84 30       	cpi	r24, 0x04	; 4
    1904:	28 f4       	brcc	.+10     	; 0x1910 <ADS1X15::begin()+0x20>
    1906:	ce 01       	movw	r24, r28
    1908:	df 91       	pop	r29
    190a:	cf 91       	pop	r28
    190c:	0c 94 65 0c 	jmp	0x18ca	; 0x18ca <ADS1X15::isConnected()>
    1910:	80 e0       	ldi	r24, 0x00	; 0
    1912:	df 91       	pop	r29
    1914:	cf 91       	pop	r28
    1916:	08 95       	ret

00001918 <ADS1X15::setGain(unsigned char)>:
_ZN7ADS1X157setGainEh():
    1918:	fc 01       	movw	r30, r24
    191a:	80 81       	ld	r24, Z
    191c:	84 ff       	sbrs	r24, 4
    191e:	09 c0       	rjmp	.+18     	; 0x1932 <ADS1X15::setGain(unsigned char)+0x1a>
    1920:	64 30       	cpi	r22, 0x04	; 4
    1922:	b1 f0       	breq	.+44     	; 0x1950 <ADS1X15::setGain(unsigned char)+0x38>
    1924:	48 f4       	brcc	.+18     	; 0x1938 <ADS1X15::setGain(unsigned char)+0x20>
    1926:	61 30       	cpi	r22, 0x01	; 1
    1928:	81 f0       	breq	.+32     	; 0x194a <ADS1X15::setGain(unsigned char)+0x32>
    192a:	80 e0       	ldi	r24, 0x00	; 0
    192c:	94 e0       	ldi	r25, 0x04	; 4
    192e:	62 30       	cpi	r22, 0x02	; 2
    1930:	49 f0       	breq	.+18     	; 0x1944 <ADS1X15::setGain(unsigned char)+0x2c>
    1932:	16 82       	std	Z+6, r1	; 0x06
    1934:	15 82       	std	Z+5, r1	; 0x05
    1936:	08 95       	ret
    1938:	68 30       	cpi	r22, 0x08	; 8
    193a:	69 f0       	breq	.+26     	; 0x1956 <ADS1X15::setGain(unsigned char)+0x3e>
    193c:	80 e0       	ldi	r24, 0x00	; 0
    193e:	9a e0       	ldi	r25, 0x0A	; 10
    1940:	60 31       	cpi	r22, 0x10	; 16
    1942:	b9 f7       	brne	.-18     	; 0x1932 <ADS1X15::setGain(unsigned char)+0x1a>
    1944:	96 83       	std	Z+6, r25	; 0x06
    1946:	85 83       	std	Z+5, r24	; 0x05
    1948:	08 95       	ret
    194a:	80 e0       	ldi	r24, 0x00	; 0
    194c:	92 e0       	ldi	r25, 0x02	; 2
    194e:	fa cf       	rjmp	.-12     	; 0x1944 <ADS1X15::setGain(unsigned char)+0x2c>
    1950:	80 e0       	ldi	r24, 0x00	; 0
    1952:	96 e0       	ldi	r25, 0x06	; 6
    1954:	f7 cf       	rjmp	.-18     	; 0x1944 <ADS1X15::setGain(unsigned char)+0x2c>
    1956:	80 e0       	ldi	r24, 0x00	; 0
    1958:	98 e0       	ldi	r25, 0x08	; 8
    195a:	f4 cf       	rjmp	.-24     	; 0x1944 <ADS1X15::setGain(unsigned char)+0x2c>

0000195c <ADS1X15::reset()>:
_ZN7ADS1X155resetEv():
    195c:	cf 93       	push	r28
    195e:	df 93       	push	r29
    1960:	ec 01       	movw	r28, r24
    1962:	60 e0       	ldi	r22, 0x00	; 0
    1964:	0e 94 8c 0c 	call	0x1918	; 0x1918 <ADS1X15::setGain(unsigned char)>
_ZN7ADS1X157setModeEh():
    1968:	80 e0       	ldi	r24, 0x00	; 0
    196a:	91 e0       	ldi	r25, 0x01	; 1
    196c:	98 87       	std	Y+8, r25	; 0x08
    196e:	8f 83       	std	Y+7, r24	; 0x07
_ZN7ADS1X1511setDataRateEh():
    1970:	80 e8       	ldi	r24, 0x80	; 128
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	9a 87       	std	Y+10, r25	; 0x0a
    1976:	89 87       	std	Y+9, r24	; 0x09
_ZN7ADS1X155resetEv():
    1978:	1b 86       	std	Y+11, r1	; 0x0b
    197a:	81 e0       	ldi	r24, 0x01	; 1
    197c:	8c 87       	std	Y+12, r24	; 0x0c
    197e:	1d 86       	std	Y+13, r1	; 0x0d
    1980:	83 e0       	ldi	r24, 0x03	; 3
    1982:	8e 87       	std	Y+14, r24	; 0x0e
    1984:	df 91       	pop	r29
    1986:	cf 91       	pop	r28
    1988:	08 95       	ret

0000198a <ADS1X15::ADS1X15()>:
_ZN7ADS1X15C2Ev():
    198a:	fc 01       	movw	r30, r24
    198c:	17 86       	std	Z+15, r1	; 0x0f
    198e:	12 8a       	std	Z+18, r1	; 0x12
    1990:	13 8a       	std	Z+19, r1	; 0x13
    1992:	14 8a       	std	Z+20, r1	; 0x14
    1994:	15 8a       	std	Z+21, r1	; 0x15
    1996:	0c 94 ae 0c 	jmp	0x195c	; 0x195c <ADS1X15::reset()>

0000199a <ADS1X15::setMode(unsigned char)>:
_ZN7ADS1X157setModeEh():
    199a:	61 11       	cpse	r22, r1
    199c:	04 c0       	rjmp	.+8      	; 0x19a6 <ADS1X15::setMode(unsigned char)+0xc>
    199e:	fc 01       	movw	r30, r24
    19a0:	10 86       	std	Z+8, r1	; 0x08
    19a2:	17 82       	std	Z+7, r1	; 0x07
    19a4:	08 95       	ret
    19a6:	20 e0       	ldi	r18, 0x00	; 0
    19a8:	31 e0       	ldi	r19, 0x01	; 1
    19aa:	fc 01       	movw	r30, r24
    19ac:	30 87       	std	Z+8, r19	; 0x08
    19ae:	27 83       	std	Z+7, r18	; 0x07
    19b0:	08 95       	ret

000019b2 <ADS1X15::setDataRate(unsigned char)>:
_ZN7ADS1X1511setDataRateEh():
    19b2:	fc 01       	movw	r30, r24
    19b4:	70 e0       	ldi	r23, 0x00	; 0
    19b6:	68 30       	cpi	r22, 0x08	; 8
    19b8:	71 05       	cpc	r23, r1
    19ba:	60 f4       	brcc	.+24     	; 0x19d4 <ADS1X15::setDataRate(unsigned char)+0x22>
    19bc:	72 87       	std	Z+10, r23	; 0x0a
    19be:	61 87       	std	Z+9, r22	; 0x09
    19c0:	81 85       	ldd	r24, Z+9	; 0x09
    19c2:	92 85       	ldd	r25, Z+10	; 0x0a
    19c4:	25 e0       	ldi	r18, 0x05	; 5
    19c6:	88 0f       	add	r24, r24
    19c8:	99 1f       	adc	r25, r25
    19ca:	2a 95       	dec	r18
    19cc:	e1 f7       	brne	.-8      	; 0x19c6 <ADS1X15::setDataRate(unsigned char)+0x14>
    19ce:	92 87       	std	Z+10, r25	; 0x0a
    19d0:	81 87       	std	Z+9, r24	; 0x09
    19d2:	08 95       	ret
    19d4:	84 e0       	ldi	r24, 0x04	; 4
    19d6:	90 e0       	ldi	r25, 0x00	; 0
    19d8:	92 87       	std	Z+10, r25	; 0x0a
    19da:	81 87       	std	Z+9, r24	; 0x09
    19dc:	f1 cf       	rjmp	.-30     	; 0x19c0 <ADS1X15::setDataRate(unsigned char)+0xe>

000019de <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>:
_ZN7ADS1X1514_writeRegisterEhhj():
    19de:	ff 92       	push	r15
    19e0:	0f 93       	push	r16
    19e2:	1f 93       	push	r17
    19e4:	cf 93       	push	r28
    19e6:	df 93       	push	r29
    19e8:	ec 01       	movw	r28, r24
    19ea:	f4 2e       	mov	r15, r20
    19ec:	12 2f       	mov	r17, r18
    19ee:	03 2f       	mov	r16, r19
    19f0:	88 89       	ldd	r24, Y+16	; 0x10
    19f2:	99 89       	ldd	r25, Y+17	; 0x11
    19f4:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <TwoWire::beginTransmission(unsigned char)>
    19f8:	88 89       	ldd	r24, Y+16	; 0x10
    19fa:	99 89       	ldd	r25, Y+17	; 0x11
    19fc:	dc 01       	movw	r26, r24
    19fe:	ed 91       	ld	r30, X+
    1a00:	fc 91       	ld	r31, X
    1a02:	01 90       	ld	r0, Z+
    1a04:	f0 81       	ld	r31, Z
    1a06:	e0 2d       	mov	r30, r0
    1a08:	6f 2d       	mov	r22, r15
    1a0a:	09 95       	icall
    1a0c:	88 89       	ldd	r24, Y+16	; 0x10
    1a0e:	99 89       	ldd	r25, Y+17	; 0x11
    1a10:	dc 01       	movw	r26, r24
    1a12:	ed 91       	ld	r30, X+
    1a14:	fc 91       	ld	r31, X
    1a16:	01 90       	ld	r0, Z+
    1a18:	f0 81       	ld	r31, Z
    1a1a:	e0 2d       	mov	r30, r0
    1a1c:	60 2f       	mov	r22, r16
    1a1e:	09 95       	icall
    1a20:	88 89       	ldd	r24, Y+16	; 0x10
    1a22:	99 89       	ldd	r25, Y+17	; 0x11
    1a24:	dc 01       	movw	r26, r24
    1a26:	ed 91       	ld	r30, X+
    1a28:	fc 91       	ld	r31, X
    1a2a:	01 90       	ld	r0, Z+
    1a2c:	f0 81       	ld	r31, Z
    1a2e:	e0 2d       	mov	r30, r0
    1a30:	61 2f       	mov	r22, r17
    1a32:	09 95       	icall
    1a34:	88 89       	ldd	r24, Y+16	; 0x10
    1a36:	99 89       	ldd	r25, Y+17	; 0x11
    1a38:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TwoWire::endTransmission()>
    1a3c:	91 e0       	ldi	r25, 0x01	; 1
    1a3e:	81 11       	cpse	r24, r1
    1a40:	90 e0       	ldi	r25, 0x00	; 0
    1a42:	89 2f       	mov	r24, r25
    1a44:	df 91       	pop	r29
    1a46:	cf 91       	pop	r28
    1a48:	1f 91       	pop	r17
    1a4a:	0f 91       	pop	r16
    1a4c:	ff 90       	pop	r15
    1a4e:	08 95       	ret

00001a50 <ADS1X15::_requestADC(unsigned int)>:
_ZN7ADS1X1511_requestADCEj():
    1a50:	fc 01       	movw	r30, r24
    1a52:	25 81       	ldd	r18, Z+5	; 0x05
    1a54:	36 81       	ldd	r19, Z+6	; 0x06
    1a56:	87 81       	ldd	r24, Z+7	; 0x07
    1a58:	90 85       	ldd	r25, Z+8	; 0x08
    1a5a:	28 2b       	or	r18, r24
    1a5c:	39 2b       	or	r19, r25
    1a5e:	30 68       	ori	r19, 0x80	; 128
    1a60:	81 85       	ldd	r24, Z+9	; 0x09
    1a62:	92 85       	ldd	r25, Z+10	; 0x0a
    1a64:	28 2b       	or	r18, r24
    1a66:	39 2b       	or	r19, r25
    1a68:	26 2b       	or	r18, r22
    1a6a:	37 2b       	or	r19, r23
    1a6c:	83 85       	ldd	r24, Z+11	; 0x0b
    1a6e:	81 11       	cpse	r24, r1
    1a70:	20 61       	ori	r18, 0x10	; 16
    1a72:	84 85       	ldd	r24, Z+12	; 0x0c
    1a74:	81 11       	cpse	r24, r1
    1a76:	28 60       	ori	r18, 0x08	; 8
    1a78:	85 85       	ldd	r24, Z+13	; 0x0d
    1a7a:	81 11       	cpse	r24, r1
    1a7c:	24 60       	ori	r18, 0x04	; 4
    1a7e:	86 85       	ldd	r24, Z+14	; 0x0e
    1a80:	28 2b       	or	r18, r24
    1a82:	41 e0       	ldi	r20, 0x01	; 1
    1a84:	62 81       	ldd	r22, Z+2	; 0x02
    1a86:	cf 01       	movw	r24, r30
    1a88:	0c 94 ef 0c 	jmp	0x19de	; 0x19de <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>

00001a8c <ADS1X15::_readRegister(unsigned char, unsigned char)>:
_ZN7ADS1X1513_readRegisterEhh():
    1a8c:	0f 93       	push	r16
    1a8e:	1f 93       	push	r17
    1a90:	cf 93       	push	r28
    1a92:	df 93       	push	r29
    1a94:	8c 01       	movw	r16, r24
    1a96:	c6 2f       	mov	r28, r22
    1a98:	d4 2f       	mov	r29, r20
    1a9a:	dc 01       	movw	r26, r24
    1a9c:	50 96       	adiw	r26, 0x10	; 16
    1a9e:	8d 91       	ld	r24, X+
    1aa0:	9c 91       	ld	r25, X
    1aa2:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <TwoWire::beginTransmission(unsigned char)>
    1aa6:	f8 01       	movw	r30, r16
    1aa8:	80 89       	ldd	r24, Z+16	; 0x10
    1aaa:	91 89       	ldd	r25, Z+17	; 0x11
    1aac:	dc 01       	movw	r26, r24
    1aae:	ed 91       	ld	r30, X+
    1ab0:	fc 91       	ld	r31, X
    1ab2:	01 90       	ld	r0, Z+
    1ab4:	f0 81       	ld	r31, Z
    1ab6:	e0 2d       	mov	r30, r0
    1ab8:	6d 2f       	mov	r22, r29
    1aba:	09 95       	icall
    1abc:	f8 01       	movw	r30, r16
    1abe:	80 89       	ldd	r24, Z+16	; 0x10
    1ac0:	91 89       	ldd	r25, Z+17	; 0x11
    1ac2:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <TwoWire::endTransmission()>
    1ac6:	42 e0       	ldi	r20, 0x02	; 2
    1ac8:	6c 2f       	mov	r22, r28
    1aca:	d8 01       	movw	r26, r16
    1acc:	50 96       	adiw	r26, 0x10	; 16
    1ace:	8d 91       	ld	r24, X+
    1ad0:	9c 91       	ld	r25, X
    1ad2:	0e 94 3e 0f 	call	0x1e7c	; 0x1e7c <TwoWire::requestFrom(unsigned char, unsigned char)>
    1ad6:	82 30       	cpi	r24, 0x02	; 2
    1ad8:	f1 f4       	brne	.+60     	; 0x1b16 <ADS1X15::_readRegister(unsigned char, unsigned char)+0x8a>
    1ada:	f8 01       	movw	r30, r16
    1adc:	80 89       	ldd	r24, Z+16	; 0x10
    1ade:	91 89       	ldd	r25, Z+17	; 0x11
    1ae0:	dc 01       	movw	r26, r24
    1ae2:	ed 91       	ld	r30, X+
    1ae4:	fc 91       	ld	r31, X
    1ae6:	02 84       	ldd	r0, Z+10	; 0x0a
    1ae8:	f3 85       	ldd	r31, Z+11	; 0x0b
    1aea:	e0 2d       	mov	r30, r0
    1aec:	09 95       	icall
    1aee:	d8 2f       	mov	r29, r24
    1af0:	b0 e0       	ldi	r27, 0x00	; 0
    1af2:	cb 2f       	mov	r28, r27
    1af4:	f8 01       	movw	r30, r16
    1af6:	80 89       	ldd	r24, Z+16	; 0x10
    1af8:	91 89       	ldd	r25, Z+17	; 0x11
    1afa:	dc 01       	movw	r26, r24
    1afc:	ed 91       	ld	r30, X+
    1afe:	fc 91       	ld	r31, X
    1b00:	02 84       	ldd	r0, Z+10	; 0x0a
    1b02:	f3 85       	ldd	r31, Z+11	; 0x0b
    1b04:	e0 2d       	mov	r30, r0
    1b06:	09 95       	icall
    1b08:	8c 0f       	add	r24, r28
    1b0a:	9d 1f       	adc	r25, r29
    1b0c:	df 91       	pop	r29
    1b0e:	cf 91       	pop	r28
    1b10:	1f 91       	pop	r17
    1b12:	0f 91       	pop	r16
    1b14:	08 95       	ret
    1b16:	90 e0       	ldi	r25, 0x00	; 0
    1b18:	80 e0       	ldi	r24, 0x00	; 0
    1b1a:	f8 cf       	rjmp	.-16     	; 0x1b0c <ADS1X15::_readRegister(unsigned char, unsigned char)+0x80>

00001b1c <ADS1X15::isBusy()>:
_ZN7ADS1X156isBusyEv():
    1b1c:	41 e0       	ldi	r20, 0x01	; 1
    1b1e:	fc 01       	movw	r30, r24
    1b20:	62 81       	ldd	r22, Z+2	; 0x02
    1b22:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ADS1X15::_readRegister(unsigned char, unsigned char)>
    1b26:	89 2f       	mov	r24, r25
    1b28:	80 95       	com	r24
    1b2a:	88 1f       	adc	r24, r24
    1b2c:	88 27       	eor	r24, r24
    1b2e:	88 1f       	adc	r24, r24
    1b30:	08 95       	ret

00001b32 <ADS1X15::getValue()>:
_ZN7ADS1X158getValueEv():
    1b32:	cf 93       	push	r28
    1b34:	df 93       	push	r29
    1b36:	ec 01       	movw	r28, r24
    1b38:	40 e0       	ldi	r20, 0x00	; 0
    1b3a:	6a 81       	ldd	r22, Y+2	; 0x02
    1b3c:	0e 94 46 0d 	call	0x1a8c	; 0x1a8c <ADS1X15::_readRegister(unsigned char, unsigned char)>
    1b40:	2c 81       	ldd	r18, Y+4	; 0x04
    1b42:	22 23       	and	r18, r18
    1b44:	29 f0       	breq	.+10     	; 0x1b50 <ADS1X15::getValue()+0x1e>
    1b46:	02 c0       	rjmp	.+4      	; 0x1b4c <ADS1X15::getValue()+0x1a>
    1b48:	95 95       	asr	r25
    1b4a:	87 95       	ror	r24
    1b4c:	2a 95       	dec	r18
    1b4e:	e2 f7       	brpl	.-8      	; 0x1b48 <ADS1X15::getValue()+0x16>
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	08 95       	ret

00001b56 <ADS1X15::_readADC(unsigned int)>:
_ZN7ADS1X158_readADCEj():
    1b56:	cf 93       	push	r28
    1b58:	df 93       	push	r29
    1b5a:	ec 01       	movw	r28, r24
    1b5c:	0e 94 28 0d 	call	0x1a50	; 0x1a50 <ADS1X15::_requestADC(unsigned int)>
    1b60:	8f 81       	ldd	r24, Y+7	; 0x07
    1b62:	98 85       	ldd	r25, Y+8	; 0x08
    1b64:	81 15       	cp	r24, r1
    1b66:	91 40       	sbci	r25, 0x01	; 1
    1b68:	41 f4       	brne	.+16     	; 0x1b7a <ADS1X15::_readADC(unsigned int)+0x24>
    1b6a:	ce 01       	movw	r24, r28
    1b6c:	0e 94 8e 0d 	call	0x1b1c	; 0x1b1c <ADS1X15::isBusy()>
    1b70:	88 23       	and	r24, r24
    1b72:	49 f0       	breq	.+18     	; 0x1b86 <ADS1X15::_readADC(unsigned int)+0x30>
    1b74:	0e 94 77 11 	call	0x22ee	; 0x22ee <yield>
    1b78:	f8 cf       	rjmp	.-16     	; 0x1b6a <ADS1X15::_readADC(unsigned int)+0x14>
    1b7a:	6b 81       	ldd	r22, Y+3	; 0x03
    1b7c:	70 e0       	ldi	r23, 0x00	; 0
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	80 e0       	ldi	r24, 0x00	; 0
    1b82:	0e 94 e7 11 	call	0x23ce	; 0x23ce <delay>
    1b86:	ce 01       	movw	r24, r28
    1b88:	df 91       	pop	r29
    1b8a:	cf 91       	pop	r28
    1b8c:	0c 94 99 0d 	jmp	0x1b32	; 0x1b32 <ADS1X15::getValue()>

00001b90 <ADS1X15::readADC(unsigned char)>:
_ZN7ADS1X157readADCEh():
    1b90:	fc 01       	movw	r30, r24
    1b92:	21 81       	ldd	r18, Z+1	; 0x01
    1b94:	62 17       	cp	r22, r18
    1b96:	38 f4       	brcc	.+14     	; 0x1ba6 <ADS1X15::readADC(unsigned char)+0x16>
    1b98:	62 95       	swap	r22
    1b9a:	60 7f       	andi	r22, 0xF0	; 240
    1b9c:	70 e4       	ldi	r23, 0x40	; 64
    1b9e:	76 0f       	add	r23, r22
    1ba0:	60 e0       	ldi	r22, 0x00	; 0
    1ba2:	0c 94 ab 0d 	jmp	0x1b56	; 0x1b56 <ADS1X15::_readADC(unsigned int)>
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	80 e0       	ldi	r24, 0x00	; 0
    1baa:	08 95       	ret

00001bac <ADS1115::ADS1115(unsigned char, TwoWire*)>:
_ZN7ADS1115C2EhP7TwoWire():
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:577

///////////////////////////////////////////////////////////////////////////
//
// ADS1115
//
ADS1115::ADS1115(uint8_t address, TwoWire *wire)
    1bac:	ff 92       	push	r15
    1bae:	0f 93       	push	r16
    1bb0:	1f 93       	push	r17
    1bb2:	cf 93       	push	r28
    1bb4:	df 93       	push	r29
    1bb6:	ec 01       	movw	r28, r24
    1bb8:	f6 2e       	mov	r15, r22
    1bba:	8a 01       	movw	r16, r20
    1bbc:	0e 94 c5 0c 	call	0x198a	; 0x198a <ADS1X15::ADS1X15()>
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:579
{
  _address = address;
    1bc0:	fa 82       	std	Y+2, r15	; 0x02
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:580
  _wire = wire;
    1bc2:	19 8b       	std	Y+17, r17	; 0x11
    1bc4:	08 8b       	std	Y+16, r16	; 0x10
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:581
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_4;
    1bc6:	85 e3       	ldi	r24, 0x35	; 53
    1bc8:	88 83       	st	Y, r24
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:582
  _conversionDelay = ADS1115_CONVERSION_DELAY;
    1bca:	88 e0       	ldi	r24, 0x08	; 8
    1bcc:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:583
  _bitShift = 0;
    1bce:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:584
  _maxPorts = 4;
    1bd0:	84 e0       	ldi	r24, 0x04	; 4
    1bd2:	89 83       	std	Y+1, r24	; 0x01
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:585
}
    1bd4:	df 91       	pop	r29
    1bd6:	cf 91       	pop	r28
    1bd8:	1f 91       	pop	r17
    1bda:	0f 91       	pop	r16
    1bdc:	ff 90       	pop	r15
    1bde:	08 95       	ret

00001be0 <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:329

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    1be0:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <TwoWire::rxBufferLength>
    1be4:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <TwoWire::rxBufferIndex>
    1be8:	89 1b       	sub	r24, r25
    1bea:	99 0b       	sbc	r25, r25
    1bec:	08 95       	ret

00001bee <TwoWire::read()>:
_ZN7TwoWire4readEv():
    1bee:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <TwoWire::rxBufferIndex>
    1bf2:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <TwoWire::rxBufferLength>
    1bf6:	2f ef       	ldi	r18, 0xFF	; 255
    1bf8:	3f ef       	ldi	r19, 0xFF	; 255
    1bfa:	98 17       	cp	r25, r24
    1bfc:	48 f4       	brcc	.+18     	; 0x1c10 <TwoWire::read()+0x22>
    1bfe:	e9 2f       	mov	r30, r25
    1c00:	f0 e0       	ldi	r31, 0x00	; 0
    1c02:	e7 5e       	subi	r30, 0xE7	; 231
    1c04:	fa 4f       	sbci	r31, 0xFA	; 250
    1c06:	20 81       	ld	r18, Z
    1c08:	30 e0       	ldi	r19, 0x00	; 0
    1c0a:	9f 5f       	subi	r25, 0xFF	; 255
    1c0c:	90 93 18 05 	sts	0x0518, r25	; 0x800518 <TwoWire::rxBufferIndex>
    1c10:	c9 01       	movw	r24, r18
    1c12:	08 95       	ret

00001c14 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    1c14:	e0 91 18 05 	lds	r30, 0x0518	; 0x800518 <TwoWire::rxBufferIndex>
    1c18:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <TwoWire::rxBufferLength>
    1c1c:	e8 17       	cp	r30, r24
    1c1e:	30 f4       	brcc	.+12     	; 0x1c2c <TwoWire::peek()+0x18>
    1c20:	f0 e0       	ldi	r31, 0x00	; 0
    1c22:	e7 5e       	subi	r30, 0xE7	; 231
    1c24:	fa 4f       	sbci	r31, 0xFA	; 250
    1c26:	80 81       	ld	r24, Z
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	08 95       	ret
    1c2c:	8f ef       	ldi	r24, 0xFF	; 255
    1c2e:	9f ef       	ldi	r25, 0xFF	; 255
    1c30:	08 95       	ret

00001c32 <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    1c32:	08 95       	ret

00001c34 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    1c34:	cf 93       	push	r28
    1c36:	df 93       	push	r29
    1c38:	ec 01       	movw	r28, r24
    1c3a:	e0 91 ef 04 	lds	r30, 0x04EF	; 0x8004ef <TwoWire::user_onReceive>
    1c3e:	f0 91 f0 04 	lds	r31, 0x04F0	; 0x8004f0 <TwoWire::user_onReceive+0x1>
    1c42:	30 97       	sbiw	r30, 0x00	; 0
    1c44:	f1 f0       	breq	.+60     	; 0x1c82 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    1c46:	90 91 18 05 	lds	r25, 0x0518	; 0x800518 <TwoWire::rxBufferIndex>
    1c4a:	80 91 17 05 	lds	r24, 0x0517	; 0x800517 <TwoWire::rxBufferLength>
    1c4e:	98 17       	cp	r25, r24
    1c50:	c0 f0       	brcs	.+48     	; 0x1c82 <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    1c52:	90 e0       	ldi	r25, 0x00	; 0
    1c54:	29 2f       	mov	r18, r25
    1c56:	30 e0       	ldi	r19, 0x00	; 0
    1c58:	26 17       	cp	r18, r22
    1c5a:	37 07       	cpc	r19, r23
    1c5c:	54 f4       	brge	.+20     	; 0x1c72 <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
    1c5e:	de 01       	movw	r26, r28
    1c60:	a2 0f       	add	r26, r18
    1c62:	b3 1f       	adc	r27, r19
    1c64:	4c 91       	ld	r20, X
    1c66:	27 5e       	subi	r18, 0xE7	; 231
    1c68:	3a 4f       	sbci	r19, 0xFA	; 250
    1c6a:	d9 01       	movw	r26, r18
    1c6c:	4c 93       	st	X, r20
    1c6e:	9f 5f       	subi	r25, 0xFF	; 255
    1c70:	f1 cf       	rjmp	.-30     	; 0x1c54 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
    1c72:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <TwoWire::rxBufferIndex>
    1c76:	60 93 17 05 	sts	0x0517, r22	; 0x800517 <TwoWire::rxBufferLength>
    1c7a:	cb 01       	movw	r24, r22
    1c7c:	df 91       	pop	r29
    1c7e:	cf 91       	pop	r28
    1c80:	09 94       	ijmp
    1c82:	df 91       	pop	r29
    1c84:	cf 91       	pop	r28
    1c86:	08 95       	ret

00001c88 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    1c88:	e0 91 f1 04 	lds	r30, 0x04F1	; 0x8004f1 <TwoWire::user_onRequest>
    1c8c:	f0 91 f2 04 	lds	r31, 0x04F2	; 0x8004f2 <TwoWire::user_onRequest+0x1>
    1c90:	30 97       	sbiw	r30, 0x00	; 0
    1c92:	29 f0       	breq	.+10     	; 0x1c9e <TwoWire::onRequestService()+0x16>
    1c94:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <TwoWire::txBufferIndex>
    1c98:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <TwoWire::txBufferLength>
    1c9c:	09 94       	ijmp
    1c9e:	08 95       	ret

00001ca0 <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    1ca0:	cf 93       	push	r28
    1ca2:	df 93       	push	r29
    1ca4:	1f 92       	push	r1
    1ca6:	cd b7       	in	r28, 0x3d	; 61
    1ca8:	de b7       	in	r29, 0x3e	; 62
    1caa:	69 83       	std	Y+1, r22	; 0x01
    1cac:	20 91 f3 04 	lds	r18, 0x04F3	; 0x8004f3 <TwoWire::transmitting>
    1cb0:	22 23       	and	r18, r18
    1cb2:	f9 f0       	breq	.+62     	; 0x1cf2 <TwoWire::write(unsigned char)+0x52>
    1cb4:	20 91 f4 04 	lds	r18, 0x04F4	; 0x8004f4 <TwoWire::txBufferLength>
    1cb8:	20 32       	cpi	r18, 0x20	; 32
    1cba:	58 f0       	brcs	.+22     	; 0x1cd2 <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    1cbc:	21 e0       	ldi	r18, 0x01	; 1
    1cbe:	30 e0       	ldi	r19, 0x00	; 0
    1cc0:	fc 01       	movw	r30, r24
    1cc2:	33 83       	std	Z+3, r19	; 0x03
    1cc4:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    1cc6:	90 e0       	ldi	r25, 0x00	; 0
    1cc8:	80 e0       	ldi	r24, 0x00	; 0
    1cca:	0f 90       	pop	r0
    1ccc:	df 91       	pop	r29
    1cce:	cf 91       	pop	r28
    1cd0:	08 95       	ret
    1cd2:	80 91 f5 04 	lds	r24, 0x04F5	; 0x8004f5 <TwoWire::txBufferIndex>
    1cd6:	e8 2f       	mov	r30, r24
    1cd8:	f0 e0       	ldi	r31, 0x00	; 0
    1cda:	ea 50       	subi	r30, 0x0A	; 10
    1cdc:	fb 4f       	sbci	r31, 0xFB	; 251
    1cde:	99 81       	ldd	r25, Y+1	; 0x01
    1ce0:	90 83       	st	Z, r25
    1ce2:	8f 5f       	subi	r24, 0xFF	; 255
    1ce4:	80 93 f5 04 	sts	0x04F5, r24	; 0x8004f5 <TwoWire::txBufferIndex>
    1ce8:	80 93 f4 04 	sts	0x04F4, r24	; 0x8004f4 <TwoWire::txBufferLength>
    1cec:	81 e0       	ldi	r24, 0x01	; 1
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	ec cf       	rjmp	.-40     	; 0x1cca <TwoWire::write(unsigned char)+0x2a>
    1cf2:	61 e0       	ldi	r22, 0x01	; 1
    1cf4:	ce 01       	movw	r24, r28
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	0e 94 12 10 	call	0x2024	; 0x2024 <twi_transmit>
    1cfc:	f7 cf       	rjmp	.-18     	; 0x1cec <TwoWire::write(unsigned char)+0x4c>

00001cfe <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    1cfe:	cf 92       	push	r12
    1d00:	df 92       	push	r13
    1d02:	ef 92       	push	r14
    1d04:	ff 92       	push	r15
    1d06:	0f 93       	push	r16
    1d08:	1f 93       	push	r17
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	7c 01       	movw	r14, r24
    1d10:	cb 01       	movw	r24, r22
    1d12:	8a 01       	movw	r16, r20
    1d14:	20 91 f3 04 	lds	r18, 0x04F3	; 0x8004f3 <TwoWire::transmitting>
    1d18:	22 23       	and	r18, r18
    1d1a:	89 f0       	breq	.+34     	; 0x1d3e <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    1d1c:	eb 01       	movw	r28, r22
    1d1e:	6b 01       	movw	r12, r22
    1d20:	c4 0e       	add	r12, r20
    1d22:	d5 1e       	adc	r13, r21
    1d24:	cc 15       	cp	r28, r12
    1d26:	dd 05       	cpc	r29, r13
    1d28:	69 f0       	breq	.+26     	; 0x1d44 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    1d2a:	69 91       	ld	r22, Y+
    1d2c:	d7 01       	movw	r26, r14
    1d2e:	ed 91       	ld	r30, X+
    1d30:	fc 91       	ld	r31, X
    1d32:	01 90       	ld	r0, Z+
    1d34:	f0 81       	ld	r31, Z
    1d36:	e0 2d       	mov	r30, r0
    1d38:	c7 01       	movw	r24, r14
    1d3a:	09 95       	icall
    1d3c:	f3 cf       	rjmp	.-26     	; 0x1d24 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    1d3e:	64 2f       	mov	r22, r20
    1d40:	0e 94 12 10 	call	0x2024	; 0x2024 <twi_transmit>
    1d44:	c8 01       	movw	r24, r16
    1d46:	df 91       	pop	r29
    1d48:	cf 91       	pop	r28
    1d4a:	1f 91       	pop	r17
    1d4c:	0f 91       	pop	r16
    1d4e:	ff 90       	pop	r15
    1d50:	ef 90       	pop	r14
    1d52:	df 90       	pop	r13
    1d54:	cf 90       	pop	r12
    1d56:	08 95       	ret

00001d58 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    1d58:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <TwoWire::rxBufferIndex>
    1d5c:	10 92 17 05 	sts	0x0517, r1	; 0x800517 <TwoWire::rxBufferLength>
    1d60:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <TwoWire::txBufferIndex>
    1d64:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <TwoWire::txBufferLength>
    1d68:	0e 94 55 0f 	call	0x1eaa	; 0x1eaa <twi_init>
    1d6c:	84 e4       	ldi	r24, 0x44	; 68
    1d6e:	9e e0       	ldi	r25, 0x0E	; 14
    1d70:	0e 94 3e 10 	call	0x207c	; 0x207c <twi_attachSlaveTxEvent>
    1d74:	8a e1       	ldi	r24, 0x1A	; 26
    1d76:	9e e0       	ldi	r25, 0x0E	; 14
    1d78:	0c 94 39 10 	jmp	0x2072	; 0x2072 <twi_attachSlaveRxEvent>

00001d7c <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    1d7c:	81 e0       	ldi	r24, 0x01	; 1
    1d7e:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <TwoWire::transmitting>
    1d82:	60 93 16 05 	sts	0x0516, r22	; 0x800516 <TwoWire::txAddress>
    1d86:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <TwoWire::txBufferIndex>
    1d8a:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <TwoWire::txBufferLength>
    1d8e:	08 95       	ret

00001d90 <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    1d90:	0f 93       	push	r16
    1d92:	06 2f       	mov	r16, r22
    1d94:	21 e0       	ldi	r18, 0x01	; 1
    1d96:	40 91 f4 04 	lds	r20, 0x04F4	; 0x8004f4 <TwoWire::txBufferLength>
    1d9a:	66 ef       	ldi	r22, 0xF6	; 246
    1d9c:	74 e0       	ldi	r23, 0x04	; 4
    1d9e:	80 91 16 05 	lds	r24, 0x0516	; 0x800516 <TwoWire::txAddress>
    1da2:	0e 94 bb 0f 	call	0x1f76	; 0x1f76 <twi_writeTo>
    1da6:	10 92 f5 04 	sts	0x04F5, r1	; 0x8004f5 <TwoWire::txBufferIndex>
    1daa:	10 92 f4 04 	sts	0x04F4, r1	; 0x8004f4 <TwoWire::txBufferLength>
    1dae:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <TwoWire::transmitting>
    1db2:	0f 91       	pop	r16
    1db4:	08 95       	ret

00001db6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    1db6:	4f 92       	push	r4
    1db8:	5f 92       	push	r5
    1dba:	6f 92       	push	r6
    1dbc:	7f 92       	push	r7
    1dbe:	af 92       	push	r10
    1dc0:	bf 92       	push	r11
    1dc2:	cf 92       	push	r12
    1dc4:	ef 92       	push	r14
    1dc6:	ff 92       	push	r15
    1dc8:	0f 93       	push	r16
    1dca:	1f 93       	push	r17
    1dcc:	cf 93       	push	r28
    1dce:	df 93       	push	r29
    1dd0:	5c 01       	movw	r10, r24
    1dd2:	f6 2e       	mov	r15, r22
    1dd4:	d4 2f       	mov	r29, r20
    1dd6:	28 01       	movw	r4, r16
    1dd8:	39 01       	movw	r6, r18
    1dda:	ee 20       	and	r14, r14
    1ddc:	19 f1       	breq	.+70     	; 0x1e24 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    1dde:	0e 94 be 0e 	call	0x1d7c	; 0x1d7c <TwoWire::beginTransmission(unsigned char)>
    1de2:	ce 2d       	mov	r28, r14
    1de4:	c4 30       	cpi	r28, 0x04	; 4
    1de6:	08 f0       	brcs	.+2      	; 0x1dea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    1de8:	c3 e0       	ldi	r28, 0x03	; 3
    1dea:	c1 50       	subi	r28, 0x01	; 1
    1dec:	b8 f0       	brcs	.+46     	; 0x1e1c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    1dee:	28 e0       	ldi	r18, 0x08	; 8
    1df0:	c2 9f       	mul	r28, r18
    1df2:	c0 01       	movw	r24, r0
    1df4:	11 24       	eor	r1, r1
    1df6:	a3 01       	movw	r20, r6
    1df8:	92 01       	movw	r18, r4
    1dfa:	04 c0       	rjmp	.+8      	; 0x1e04 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    1dfc:	56 95       	lsr	r21
    1dfe:	47 95       	ror	r20
    1e00:	37 95       	ror	r19
    1e02:	27 95       	ror	r18
    1e04:	8a 95       	dec	r24
    1e06:	d2 f7       	brpl	.-12     	; 0x1dfc <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    1e08:	b9 01       	movw	r22, r18
    1e0a:	d5 01       	movw	r26, r10
    1e0c:	ed 91       	ld	r30, X+
    1e0e:	fc 91       	ld	r31, X
    1e10:	01 90       	ld	r0, Z+
    1e12:	f0 81       	ld	r31, Z
    1e14:	e0 2d       	mov	r30, r0
    1e16:	c5 01       	movw	r24, r10
    1e18:	09 95       	icall
    1e1a:	e7 cf       	rjmp	.-50     	; 0x1dea <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    1e1c:	60 e0       	ldi	r22, 0x00	; 0
    1e1e:	c5 01       	movw	r24, r10
    1e20:	0e 94 c8 0e 	call	0x1d90	; 0x1d90 <TwoWire::endTransmission(unsigned char)>
    1e24:	4d 2f       	mov	r20, r29
    1e26:	d1 32       	cpi	r29, 0x21	; 33
    1e28:	08 f0       	brcs	.+2      	; 0x1e2c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    1e2a:	40 e2       	ldi	r20, 0x20	; 32
    1e2c:	2c 2d       	mov	r18, r12
    1e2e:	69 e1       	ldi	r22, 0x19	; 25
    1e30:	75 e0       	ldi	r23, 0x05	; 5
    1e32:	8f 2d       	mov	r24, r15
    1e34:	0e 94 73 0f 	call	0x1ee6	; 0x1ee6 <twi_readFrom>
    1e38:	10 92 18 05 	sts	0x0518, r1	; 0x800518 <TwoWire::rxBufferIndex>
    1e3c:	80 93 17 05 	sts	0x0517, r24	; 0x800517 <TwoWire::rxBufferLength>
    1e40:	df 91       	pop	r29
    1e42:	cf 91       	pop	r28
    1e44:	1f 91       	pop	r17
    1e46:	0f 91       	pop	r16
    1e48:	ff 90       	pop	r15
    1e4a:	ef 90       	pop	r14
    1e4c:	cf 90       	pop	r12
    1e4e:	bf 90       	pop	r11
    1e50:	af 90       	pop	r10
    1e52:	7f 90       	pop	r7
    1e54:	6f 90       	pop	r6
    1e56:	5f 90       	pop	r5
    1e58:	4f 90       	pop	r4
    1e5a:	08 95       	ret

00001e5c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    1e5c:	cf 92       	push	r12
    1e5e:	ef 92       	push	r14
    1e60:	0f 93       	push	r16
    1e62:	1f 93       	push	r17
    1e64:	c2 2e       	mov	r12, r18
    1e66:	e1 2c       	mov	r14, r1
    1e68:	00 e0       	ldi	r16, 0x00	; 0
    1e6a:	10 e0       	ldi	r17, 0x00	; 0
    1e6c:	98 01       	movw	r18, r16
    1e6e:	0e 94 db 0e 	call	0x1db6	; 0x1db6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    1e72:	1f 91       	pop	r17
    1e74:	0f 91       	pop	r16
    1e76:	ef 90       	pop	r14
    1e78:	cf 90       	pop	r12
    1e7a:	08 95       	ret

00001e7c <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
    1e7c:	21 e0       	ldi	r18, 0x01	; 1
    1e7e:	0c 94 2e 0f 	jmp	0x1e5c	; 0x1e5c <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00001e82 <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    1e82:	61 e0       	ldi	r22, 0x01	; 1
    1e84:	0c 94 c8 0e 	jmp	0x1d90	; 0x1d90 <TwoWire::endTransmission(unsigned char)>

00001e88 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1e88:	e3 ee       	ldi	r30, 0xE3	; 227
    1e8a:	f4 e0       	ldi	r31, 0x04	; 4
    1e8c:	13 82       	std	Z+3, r1	; 0x03
    1e8e:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1e90:	88 ee       	ldi	r24, 0xE8	; 232
    1e92:	93 e0       	ldi	r25, 0x03	; 3
    1e94:	a0 e0       	ldi	r26, 0x00	; 0
    1e96:	b0 e0       	ldi	r27, 0x00	; 0
    1e98:	84 83       	std	Z+4, r24	; 0x04
    1e9a:	95 83       	std	Z+5, r25	; 0x05
    1e9c:	a6 83       	std	Z+6, r26	; 0x06
    1e9e:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:52
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1ea0:	80 ec       	ldi	r24, 0xC0	; 192
    1ea2:	93 e0       	ldi	r25, 0x03	; 3
    1ea4:	91 83       	std	Z+1, r25	; 0x01
    1ea6:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:333
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1ea8:	08 95       	ret

00001eaa <twi_init>:
twi_init():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1eaa:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <twi_state>
    1eae:	81 e0       	ldi	r24, 0x01	; 1
    1eb0:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <twi_sendStop>
    1eb4:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <twi_inRepStart>
    1eb8:	61 e0       	ldi	r22, 0x01	; 1
    1eba:	81 e1       	ldi	r24, 0x11	; 17
    1ebc:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
    1ec0:	61 e0       	ldi	r22, 0x01	; 1
    1ec2:	80 e1       	ldi	r24, 0x10	; 16
    1ec4:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
    1ec8:	e9 eb       	ldi	r30, 0xB9	; 185
    1eca:	f0 e0       	ldi	r31, 0x00	; 0
    1ecc:	80 81       	ld	r24, Z
    1ece:	8e 7f       	andi	r24, 0xFE	; 254
    1ed0:	80 83       	st	Z, r24
    1ed2:	80 81       	ld	r24, Z
    1ed4:	8d 7f       	andi	r24, 0xFD	; 253
    1ed6:	80 83       	st	Z, r24
    1ed8:	88 e4       	ldi	r24, 0x48	; 72
    1eda:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1ede:	85 e4       	ldi	r24, 0x45	; 69
    1ee0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1ee4:	08 95       	ret

00001ee6 <twi_readFrom>:
twi_readFrom():
    1ee6:	41 32       	cpi	r20, 0x21	; 33
    1ee8:	08 f0       	brcs	.+2      	; 0x1eec <twi_readFrom+0x6>
    1eea:	43 c0       	rjmp	.+134    	; 0x1f72 <twi_readFrom+0x8c>
    1eec:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <twi_state>
    1ef0:	91 11       	cpse	r25, r1
    1ef2:	fc cf       	rjmp	.-8      	; 0x1eec <twi_readFrom+0x6>
    1ef4:	91 e0       	ldi	r25, 0x01	; 1
    1ef6:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <twi_state>
    1efa:	20 93 a4 05 	sts	0x05A4, r18	; 0x8005a4 <twi_sendStop>
    1efe:	2f ef       	ldi	r18, 0xFF	; 255
    1f00:	20 93 39 05 	sts	0x0539, r18	; 0x800539 <twi_error>
    1f04:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <twi_masterBufferIndex>
    1f08:	24 0f       	add	r18, r20
    1f0a:	20 93 7d 05 	sts	0x057D, r18	; 0x80057d <twi_masterBufferLength>
    1f0e:	90 93 a5 05 	sts	0x05A5, r25	; 0x8005a5 <twi_slarw>
    1f12:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <twi_slarw>
    1f16:	88 0f       	add	r24, r24
    1f18:	89 2b       	or	r24, r25
    1f1a:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <twi_slarw>
    1f1e:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <twi_inRepStart>
    1f22:	81 30       	cpi	r24, 0x01	; 1
    1f24:	09 f5       	brne	.+66     	; 0x1f68 <twi_readFrom+0x82>
    1f26:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <twi_inRepStart>
    1f2a:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <twi_slarw>
    1f2e:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1f32:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f36:	83 fd       	sbrc	r24, 3
    1f38:	f8 cf       	rjmp	.-16     	; 0x1f2a <twi_readFrom+0x44>
    1f3a:	85 ec       	ldi	r24, 0xC5	; 197
    1f3c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f40:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <twi_state>
    1f44:	81 30       	cpi	r24, 0x01	; 1
    1f46:	e1 f3       	breq	.-8      	; 0x1f40 <twi_readFrom+0x5a>
    1f48:	80 91 7e 05 	lds	r24, 0x057E	; 0x80057e <twi_masterBufferIndex>
    1f4c:	84 17       	cp	r24, r20
    1f4e:	10 f4       	brcc	.+4      	; 0x1f54 <twi_readFrom+0x6e>
    1f50:	40 91 7e 05 	lds	r20, 0x057E	; 0x80057e <twi_masterBufferIndex>
    1f54:	af e7       	ldi	r26, 0x7F	; 127
    1f56:	b5 e0       	ldi	r27, 0x05	; 5
    1f58:	96 2f       	mov	r25, r22
    1f5a:	fb 01       	movw	r30, r22
    1f5c:	8e 2f       	mov	r24, r30
    1f5e:	89 1b       	sub	r24, r25
    1f60:	84 17       	cp	r24, r20
    1f62:	20 f0       	brcs	.+8      	; 0x1f6c <twi_readFrom+0x86>
    1f64:	84 2f       	mov	r24, r20
    1f66:	08 95       	ret
    1f68:	85 ee       	ldi	r24, 0xE5	; 229
    1f6a:	e8 cf       	rjmp	.-48     	; 0x1f3c <twi_readFrom+0x56>
    1f6c:	8d 91       	ld	r24, X+
    1f6e:	81 93       	st	Z+, r24
    1f70:	f5 cf       	rjmp	.-22     	; 0x1f5c <twi_readFrom+0x76>
    1f72:	40 e0       	ldi	r20, 0x00	; 0
    1f74:	f7 cf       	rjmp	.-18     	; 0x1f64 <twi_readFrom+0x7e>

00001f76 <twi_writeTo>:
twi_writeTo():
    1f76:	0f 93       	push	r16
    1f78:	41 32       	cpi	r20, 0x21	; 33
    1f7a:	08 f0       	brcs	.+2      	; 0x1f7e <twi_writeTo+0x8>
    1f7c:	4b c0       	rjmp	.+150    	; 0x2014 <twi_writeTo+0x9e>
    1f7e:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <twi_state>
    1f82:	91 11       	cpse	r25, r1
    1f84:	fc cf       	rjmp	.-8      	; 0x1f7e <twi_writeTo+0x8>
    1f86:	92 e0       	ldi	r25, 0x02	; 2
    1f88:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <twi_state>
    1f8c:	00 93 a4 05 	sts	0x05A4, r16	; 0x8005a4 <twi_sendStop>
    1f90:	9f ef       	ldi	r25, 0xFF	; 255
    1f92:	90 93 39 05 	sts	0x0539, r25	; 0x800539 <twi_error>
    1f96:	10 92 7e 05 	sts	0x057E, r1	; 0x80057e <twi_masterBufferIndex>
    1f9a:	40 93 7d 05 	sts	0x057D, r20	; 0x80057d <twi_masterBufferLength>
    1f9e:	36 2f       	mov	r19, r22
    1fa0:	af e7       	ldi	r26, 0x7F	; 127
    1fa2:	b5 e0       	ldi	r27, 0x05	; 5
    1fa4:	fb 01       	movw	r30, r22
    1fa6:	9e 2f       	mov	r25, r30
    1fa8:	93 1b       	sub	r25, r19
    1faa:	94 17       	cp	r25, r20
    1fac:	70 f1       	brcs	.+92     	; 0x200a <twi_writeTo+0x94>
    1fae:	10 92 a5 05 	sts	0x05A5, r1	; 0x8005a5 <twi_slarw>
    1fb2:	90 91 a5 05 	lds	r25, 0x05A5	; 0x8005a5 <twi_slarw>
    1fb6:	88 0f       	add	r24, r24
    1fb8:	89 2b       	or	r24, r25
    1fba:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <twi_slarw>
    1fbe:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <twi_inRepStart>
    1fc2:	81 30       	cpi	r24, 0x01	; 1
    1fc4:	29 f5       	brne	.+74     	; 0x2010 <twi_writeTo+0x9a>
    1fc6:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <twi_inRepStart>
    1fca:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <twi_slarw>
    1fce:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1fd2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1fd6:	83 fd       	sbrc	r24, 3
    1fd8:	f8 cf       	rjmp	.-16     	; 0x1fca <twi_writeTo+0x54>
    1fda:	85 ec       	ldi	r24, 0xC5	; 197
    1fdc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1fe0:	22 23       	and	r18, r18
    1fe2:	21 f0       	breq	.+8      	; 0x1fec <twi_writeTo+0x76>
    1fe4:	80 91 a6 05 	lds	r24, 0x05A6	; 0x8005a6 <twi_state>
    1fe8:	82 30       	cpi	r24, 0x02	; 2
    1fea:	d1 f3       	breq	.-12     	; 0x1fe0 <twi_writeTo+0x6a>
    1fec:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <twi_error>
    1ff0:	8f 3f       	cpi	r24, 0xFF	; 255
    1ff2:	91 f0       	breq	.+36     	; 0x2018 <twi_writeTo+0xa2>
    1ff4:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <twi_error>
    1ff8:	80 32       	cpi	r24, 0x20	; 32
    1ffa:	81 f0       	breq	.+32     	; 0x201c <twi_writeTo+0xa6>
    1ffc:	80 91 39 05 	lds	r24, 0x0539	; 0x800539 <twi_error>
    2000:	80 33       	cpi	r24, 0x30	; 48
    2002:	71 f0       	breq	.+28     	; 0x2020 <twi_writeTo+0xaa>
    2004:	84 e0       	ldi	r24, 0x04	; 4
    2006:	0f 91       	pop	r16
    2008:	08 95       	ret
    200a:	91 91       	ld	r25, Z+
    200c:	9d 93       	st	X+, r25
    200e:	cb cf       	rjmp	.-106    	; 0x1fa6 <twi_writeTo+0x30>
    2010:	85 ee       	ldi	r24, 0xE5	; 229
    2012:	e4 cf       	rjmp	.-56     	; 0x1fdc <twi_writeTo+0x66>
    2014:	81 e0       	ldi	r24, 0x01	; 1
    2016:	f7 cf       	rjmp	.-18     	; 0x2006 <twi_writeTo+0x90>
    2018:	80 e0       	ldi	r24, 0x00	; 0
    201a:	f5 cf       	rjmp	.-22     	; 0x2006 <twi_writeTo+0x90>
    201c:	82 e0       	ldi	r24, 0x02	; 2
    201e:	f3 cf       	rjmp	.-26     	; 0x2006 <twi_writeTo+0x90>
    2020:	83 e0       	ldi	r24, 0x03	; 3
    2022:	f1 cf       	rjmp	.-30     	; 0x2006 <twi_writeTo+0x90>

00002024 <twi_transmit>:
twi_transmit():
    2024:	20 91 5b 05 	lds	r18, 0x055B	; 0x80055b <twi_txBufferLength>
    2028:	26 0f       	add	r18, r22
    202a:	33 27       	eor	r19, r19
    202c:	33 1f       	adc	r19, r19
    202e:	21 32       	cpi	r18, 0x21	; 33
    2030:	31 05       	cpc	r19, r1
    2032:	ec f4       	brge	.+58     	; 0x206e <twi_transmit+0x4a>
    2034:	20 91 a6 05 	lds	r18, 0x05A6	; 0x8005a6 <twi_state>
    2038:	fc 01       	movw	r30, r24
    203a:	90 e0       	ldi	r25, 0x00	; 0
    203c:	80 e0       	ldi	r24, 0x00	; 0
    203e:	24 30       	cpi	r18, 0x04	; 4
    2040:	69 f0       	breq	.+26     	; 0x205c <twi_transmit+0x38>
    2042:	82 e0       	ldi	r24, 0x02	; 2
    2044:	08 95       	ret
    2046:	a0 91 5b 05 	lds	r26, 0x055B	; 0x80055b <twi_txBufferLength>
    204a:	21 91       	ld	r18, Z+
    204c:	ac 01       	movw	r20, r24
    204e:	43 5a       	subi	r20, 0xA3	; 163
    2050:	5a 4f       	sbci	r21, 0xFA	; 250
    2052:	a4 0f       	add	r26, r20
    2054:	b5 2f       	mov	r27, r21
    2056:	b1 1d       	adc	r27, r1
    2058:	2c 93       	st	X, r18
    205a:	01 96       	adiw	r24, 0x01	; 1
    205c:	86 17       	cp	r24, r22
    205e:	98 f3       	brcs	.-26     	; 0x2046 <twi_transmit+0x22>
    2060:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <twi_txBufferLength>
    2064:	68 0f       	add	r22, r24
    2066:	60 93 5b 05 	sts	0x055B, r22	; 0x80055b <twi_txBufferLength>
    206a:	80 e0       	ldi	r24, 0x00	; 0
    206c:	08 95       	ret
    206e:	81 e0       	ldi	r24, 0x01	; 1
    2070:	08 95       	ret

00002072 <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    2072:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <twi_onSlaveReceive+0x1>
    2076:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <twi_onSlaveReceive>
    207a:	08 95       	ret

0000207c <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    207c:	90 93 a2 05 	sts	0x05A2, r25	; 0x8005a2 <twi_onSlaveTransmit+0x1>
    2080:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <twi_onSlaveTransmit>
    2084:	08 95       	ret

00002086 <twi_stop>:
twi_stop():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2086:	85 ed       	ldi	r24, 0xD5	; 213
    2088:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    208c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2090:	84 fd       	sbrc	r24, 4
    2092:	fc cf       	rjmp	.-8      	; 0x208c <twi_stop+0x6>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2094:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
    2098:	08 95       	ret

0000209a <twi_releaseBus>:
twi_releaseBus():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    209a:	85 ec       	ldi	r24, 0xC5	; 197
    209c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    20a0:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:397
}
    20a4:	08 95       	ret

000020a6 <__vector_26>:
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
    20a6:	1f 92       	push	r1
    20a8:	0f 92       	push	r0
    20aa:	0f b6       	in	r0, 0x3f	; 63
    20ac:	0f 92       	push	r0
    20ae:	11 24       	eor	r1, r1
    20b0:	0b b6       	in	r0, 0x3b	; 59
    20b2:	0f 92       	push	r0
    20b4:	2f 93       	push	r18
    20b6:	3f 93       	push	r19
    20b8:	4f 93       	push	r20
    20ba:	5f 93       	push	r21
    20bc:	6f 93       	push	r22
    20be:	7f 93       	push	r23
    20c0:	8f 93       	push	r24
    20c2:	9f 93       	push	r25
    20c4:	af 93       	push	r26
    20c6:	bf 93       	push	r27
    20c8:	ef 93       	push	r30
    20ca:	ff 93       	push	r31
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    20cc:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    20d0:	88 7f       	andi	r24, 0xF8	; 248
    20d2:	80 36       	cpi	r24, 0x60	; 96
    20d4:	09 f4       	brne	.+2      	; 0x20d8 <__vector_26+0x32>
    20d6:	4e c0       	rjmp	.+156    	; 0x2174 <__vector_26+0xce>
    20d8:	08 f0       	brcs	.+2      	; 0x20dc <__vector_26+0x36>
    20da:	41 c0       	rjmp	.+130    	; 0x215e <__vector_26+0xb8>
    20dc:	88 32       	cpi	r24, 0x28	; 40
    20de:	09 f4       	brne	.+2      	; 0x20e2 <__vector_26+0x3c>
    20e0:	aa c0       	rjmp	.+340    	; 0x2236 <__vector_26+0x190>
    20e2:	28 f5       	brcc	.+74     	; 0x212e <__vector_26+0x88>
    20e4:	80 31       	cpi	r24, 0x10	; 16
    20e6:	09 f4       	brne	.+2      	; 0x20ea <__vector_26+0x44>
    20e8:	9e c0       	rjmp	.+316    	; 0x2226 <__vector_26+0x180>
    20ea:	c8 f4       	brcc	.+50     	; 0x211e <__vector_26+0x78>
    20ec:	88 23       	and	r24, r24
    20ee:	09 f4       	brne	.+2      	; 0x20f2 <__vector_26+0x4c>
    20f0:	fb c0       	rjmp	.+502    	; 0x22e8 <__vector_26+0x242>
    20f2:	88 30       	cpi	r24, 0x08	; 8
    20f4:	09 f4       	brne	.+2      	; 0x20f8 <__vector_26+0x52>
    20f6:	97 c0       	rjmp	.+302    	; 0x2226 <__vector_26+0x180>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    20f8:	ff 91       	pop	r31
    20fa:	ef 91       	pop	r30
    20fc:	bf 91       	pop	r27
    20fe:	af 91       	pop	r26
    2100:	9f 91       	pop	r25
    2102:	8f 91       	pop	r24
    2104:	7f 91       	pop	r23
    2106:	6f 91       	pop	r22
    2108:	5f 91       	pop	r21
    210a:	4f 91       	pop	r20
    210c:	3f 91       	pop	r19
    210e:	2f 91       	pop	r18
    2110:	0f 90       	pop	r0
    2112:	0b be       	out	0x3b, r0	; 59
    2114:	0f 90       	pop	r0
    2116:	0f be       	out	0x3f, r0	; 63
    2118:	0f 90       	pop	r0
    211a:	1f 90       	pop	r1
    211c:	18 95       	reti
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    211e:	88 31       	cpi	r24, 0x18	; 24
    2120:	09 f4       	brne	.+2      	; 0x2124 <__vector_26+0x7e>
    2122:	89 c0       	rjmp	.+274    	; 0x2236 <__vector_26+0x190>
    2124:	80 32       	cpi	r24, 0x20	; 32
    2126:	41 f7       	brne	.-48     	; 0x20f8 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2128:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <twi_error>
    212c:	15 c0       	rjmp	.+42     	; 0x2158 <__vector_26+0xb2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    212e:	80 34       	cpi	r24, 0x40	; 64
    2130:	09 f4       	brne	.+2      	; 0x2134 <__vector_26+0x8e>
    2132:	9e c0       	rjmp	.+316    	; 0x2270 <__vector_26+0x1ca>
    2134:	48 f4       	brcc	.+18     	; 0x2148 <__vector_26+0xa2>
    2136:	80 33       	cpi	r24, 0x30	; 48
    2138:	b9 f3       	breq	.-18     	; 0x2128 <__vector_26+0x82>
    213a:	88 33       	cpi	r24, 0x38	; 56
    213c:	e9 f6       	brne	.-70     	; 0x20f8 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    213e:	80 93 39 05 	sts	0x0539, r24	; 0x800539 <twi_error>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
    2142:	0e 94 4d 10 	call	0x209a	; 0x209a <twi_releaseBus>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:442
      break;
    2146:	d8 cf       	rjmp	.-80     	; 0x20f8 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2148:	80 35       	cpi	r24, 0x50	; 80
    214a:	09 f4       	brne	.+2      	; 0x214e <__vector_26+0xa8>
    214c:	85 c0       	rjmp	.+266    	; 0x2258 <__vector_26+0x1b2>
    214e:	88 35       	cpi	r24, 0x58	; 88
    2150:	09 f4       	brne	.+2      	; 0x2154 <__vector_26+0xae>
    2152:	96 c0       	rjmp	.+300    	; 0x2280 <__vector_26+0x1da>
    2154:	88 34       	cpi	r24, 0x48	; 72
    2156:	81 f6       	brne	.-96     	; 0x20f8 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    2158:	0e 94 43 10 	call	0x2086	; 0x2086 <twi_stop>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
    215c:	cd cf       	rjmp	.-102    	; 0x20f8 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    215e:	88 39       	cpi	r24, 0x98	; 152
    2160:	09 f4       	brne	.+2      	; 0x2164 <__vector_26+0xbe>
    2162:	8c c0       	rjmp	.+280    	; 0x227c <__vector_26+0x1d6>
    2164:	38 f5       	brcc	.+78     	; 0x21b4 <__vector_26+0x10e>
    2166:	88 37       	cpi	r24, 0x78	; 120
    2168:	29 f0       	breq	.+10     	; 0x2174 <__vector_26+0xce>
    216a:	50 f4       	brcc	.+20     	; 0x2180 <__vector_26+0xda>
    216c:	88 36       	cpi	r24, 0x68	; 104
    216e:	11 f0       	breq	.+4      	; 0x2174 <__vector_26+0xce>
    2170:	80 37       	cpi	r24, 0x70	; 112
    2172:	11 f6       	brne	.-124    	; 0x20f8 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2174:	83 e0       	ldi	r24, 0x03	; 3
    2176:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    217a:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <twi_rxBufferIndex>
    217e:	57 c0       	rjmp	.+174    	; 0x222e <__vector_26+0x188>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2180:	88 38       	cpi	r24, 0x88	; 136
    2182:	09 f4       	brne	.+2      	; 0x2186 <__vector_26+0xe0>
    2184:	7b c0       	rjmp	.+246    	; 0x227c <__vector_26+0x1d6>
    2186:	80 39       	cpi	r24, 0x90	; 144
    2188:	19 f0       	breq	.+6      	; 0x2190 <__vector_26+0xea>
    218a:	80 38       	cpi	r24, 0x80	; 128
    218c:	09 f0       	breq	.+2      	; 0x2190 <__vector_26+0xea>
    218e:	b4 cf       	rjmp	.-152    	; 0x20f8 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2190:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <twi_rxBufferIndex>
    2194:	80 32       	cpi	r24, 0x20	; 32
    2196:	08 f0       	brcs	.+2      	; 0x219a <__vector_26+0xf4>
    2198:	71 c0       	rjmp	.+226    	; 0x227c <__vector_26+0x1d6>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    219a:	e0 91 3a 05 	lds	r30, 0x053A	; 0x80053a <twi_rxBufferIndex>
    219e:	81 e0       	ldi	r24, 0x01	; 1
    21a0:	8e 0f       	add	r24, r30
    21a2:	80 93 3a 05 	sts	0x053A, r24	; 0x80053a <twi_rxBufferIndex>
    21a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    21aa:	f0 e0       	ldi	r31, 0x00	; 0
    21ac:	e5 5c       	subi	r30, 0xC5	; 197
    21ae:	fa 4f       	sbci	r31, 0xFA	; 250
    21b0:	80 83       	st	Z, r24
    21b2:	3d c0       	rjmp	.+122    	; 0x222e <__vector_26+0x188>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    21b4:	80 3b       	cpi	r24, 0xB0	; 176
    21b6:	39 f0       	breq	.+14     	; 0x21c6 <__vector_26+0x120>
    21b8:	e0 f4       	brcc	.+56     	; 0x21f2 <__vector_26+0x14c>
    21ba:	80 3a       	cpi	r24, 0xA0	; 160
    21bc:	09 f4       	brne	.+2      	; 0x21c0 <__vector_26+0x11a>
    21be:	79 c0       	rjmp	.+242    	; 0x22b2 <__vector_26+0x20c>
    21c0:	88 3a       	cpi	r24, 0xA8	; 168
    21c2:	09 f0       	breq	.+2      	; 0x21c6 <__vector_26+0x120>
    21c4:	99 cf       	rjmp	.-206    	; 0x20f8 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    21c6:	84 e0       	ldi	r24, 0x04	; 4
    21c8:	80 93 a6 05 	sts	0x05A6, r24	; 0x8005a6 <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    21cc:	10 92 5c 05 	sts	0x055C, r1	; 0x80055c <twi_txBufferIndex>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    21d0:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <twi_txBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    21d4:	e0 91 a1 05 	lds	r30, 0x05A1	; 0x8005a1 <twi_onSlaveTransmit>
    21d8:	f0 91 a2 05 	lds	r31, 0x05A2	; 0x8005a2 <twi_onSlaveTransmit+0x1>
    21dc:	09 95       	icall
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    21de:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <twi_txBufferLength>
    21e2:	81 11       	cpse	r24, r1
    21e4:	0f c0       	rjmp	.+30     	; 0x2204 <__vector_26+0x15e>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    21e6:	81 e0       	ldi	r24, 0x01	; 1
    21e8:	80 93 5b 05 	sts	0x055B, r24	; 0x80055b <twi_txBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    21ec:	10 92 5d 05 	sts	0x055D, r1	; 0x80055d <twi_txBuffer>
    21f0:	09 c0       	rjmp	.+18     	; 0x2204 <__vector_26+0x15e>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    21f2:	80 3c       	cpi	r24, 0xC0	; 192
    21f4:	09 f4       	brne	.+2      	; 0x21f8 <__vector_26+0x152>
    21f6:	76 c0       	rjmp	.+236    	; 0x22e4 <__vector_26+0x23e>
    21f8:	88 3c       	cpi	r24, 0xC8	; 200
    21fa:	09 f4       	brne	.+2      	; 0x21fe <__vector_26+0x158>
    21fc:	73 c0       	rjmp	.+230    	; 0x22e4 <__vector_26+0x23e>
    21fe:	88 3b       	cpi	r24, 0xB8	; 184
    2200:	09 f0       	breq	.+2      	; 0x2204 <__vector_26+0x15e>
    2202:	7a cf       	rjmp	.-268    	; 0x20f8 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2204:	e0 91 5c 05 	lds	r30, 0x055C	; 0x80055c <twi_txBufferIndex>
    2208:	81 e0       	ldi	r24, 0x01	; 1
    220a:	8e 0f       	add	r24, r30
    220c:	80 93 5c 05 	sts	0x055C, r24	; 0x80055c <twi_txBufferIndex>
    2210:	f0 e0       	ldi	r31, 0x00	; 0
    2212:	e3 5a       	subi	r30, 0xA3	; 163
    2214:	fa 4f       	sbci	r31, 0xFA	; 250
    2216:	80 81       	ld	r24, Z
    2218:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    221c:	90 91 5c 05 	lds	r25, 0x055C	; 0x80055c <twi_txBufferIndex>
    2220:	80 91 5b 05 	lds	r24, 0x055B	; 0x80055b <twi_txBufferLength>
    2224:	29 c0       	rjmp	.+82     	; 0x2278 <__vector_26+0x1d2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2226:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <twi_slarw>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    222a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    222e:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2230:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2234:	61 cf       	rjmp	.-318    	; 0x20f8 <__vector_26+0x52>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2236:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <twi_masterBufferIndex>
    223a:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <twi_masterBufferLength>
    223e:	98 17       	cp	r25, r24
    2240:	58 f5       	brcc	.+86     	; 0x2298 <__vector_26+0x1f2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2242:	e0 91 7e 05 	lds	r30, 0x057E	; 0x80057e <twi_masterBufferIndex>
    2246:	81 e0       	ldi	r24, 0x01	; 1
    2248:	8e 0f       	add	r24, r30
    224a:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <twi_masterBufferIndex>
    224e:	f0 e0       	ldi	r31, 0x00	; 0
    2250:	e1 58       	subi	r30, 0x81	; 129
    2252:	fa 4f       	sbci	r31, 0xFA	; 250
    2254:	80 81       	ld	r24, Z
    2256:	e9 cf       	rjmp	.-46     	; 0x222a <__vector_26+0x184>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2258:	e0 91 7e 05 	lds	r30, 0x057E	; 0x80057e <twi_masterBufferIndex>
    225c:	81 e0       	ldi	r24, 0x01	; 1
    225e:	8e 0f       	add	r24, r30
    2260:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <twi_masterBufferIndex>
    2264:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2268:	f0 e0       	ldi	r31, 0x00	; 0
    226a:	e1 58       	subi	r30, 0x81	; 129
    226c:	fa 4f       	sbci	r31, 0xFA	; 250
    226e:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2270:	90 91 7e 05 	lds	r25, 0x057E	; 0x80057e <twi_masterBufferIndex>
    2274:	80 91 7d 05 	lds	r24, 0x057D	; 0x80057d <twi_masterBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2278:	98 17       	cp	r25, r24
    227a:	c8 f2       	brcs	.-78     	; 0x222e <__vector_26+0x188>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    227c:	85 e8       	ldi	r24, 0x85	; 133
    227e:	d8 cf       	rjmp	.-80     	; 0x2230 <__vector_26+0x18a>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2280:	e0 91 7e 05 	lds	r30, 0x057E	; 0x80057e <twi_masterBufferIndex>
    2284:	81 e0       	ldi	r24, 0x01	; 1
    2286:	8e 0f       	add	r24, r30
    2288:	80 93 7e 05 	sts	0x057E, r24	; 0x80057e <twi_masterBufferIndex>
    228c:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2290:	f0 e0       	ldi	r31, 0x00	; 0
    2292:	e1 58       	subi	r30, 0x81	; 129
    2294:	fa 4f       	sbci	r31, 0xFA	; 250
    2296:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    2298:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <twi_sendStop>
    229c:	81 11       	cpse	r24, r1
    229e:	5c cf       	rjmp	.-328    	; 0x2158 <__vector_26+0xb2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    22a0:	81 e0       	ldi	r24, 0x01	; 1
    22a2:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <twi_inRepStart>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    22a6:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22a8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    22ac:	10 92 a6 05 	sts	0x05A6, r1	; 0x8005a6 <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:552
      break;
    22b0:	23 cf       	rjmp	.-442    	; 0x20f8 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    22b2:	0e 94 4d 10 	call	0x209a	; 0x209a <twi_releaseBus>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    22b6:	80 91 3a 05 	lds	r24, 0x053A	; 0x80053a <twi_rxBufferIndex>
    22ba:	80 32       	cpi	r24, 0x20	; 32
    22bc:	30 f4       	brcc	.+12     	; 0x22ca <__vector_26+0x224>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    22be:	e0 91 3a 05 	lds	r30, 0x053A	; 0x80053a <twi_rxBufferIndex>
    22c2:	f0 e0       	ldi	r31, 0x00	; 0
    22c4:	e5 5c       	subi	r30, 0xC5	; 197
    22c6:	fa 4f       	sbci	r31, 0xFA	; 250
    22c8:	10 82       	st	Z, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    22ca:	60 91 3a 05 	lds	r22, 0x053A	; 0x80053a <twi_rxBufferIndex>
    22ce:	70 e0       	ldi	r23, 0x00	; 0
    22d0:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <twi_onSlaveReceive>
    22d4:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <twi_onSlaveReceive+0x1>
    22d8:	8b e3       	ldi	r24, 0x3B	; 59
    22da:	95 e0       	ldi	r25, 0x05	; 5
    22dc:	09 95       	icall
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    22de:	10 92 3a 05 	sts	0x053A, r1	; 0x80053a <twi_rxBufferIndex>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:510
      break;
    22e2:	0a cf       	rjmp	.-492    	; 0x20f8 <__vector_26+0x52>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    22e4:	85 ec       	ldi	r24, 0xC5	; 197
    22e6:	e0 cf       	rjmp	.-64     	; 0x22a8 <__vector_26+0x202>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    22e8:	10 92 39 05 	sts	0x0539, r1	; 0x800539 <twi_error>
    22ec:	35 cf       	rjmp	.-406    	; 0x2158 <__vector_26+0xb2>

000022ee <yield>:
__empty():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    22ee:	08 95       	ret

000022f0 <__vector_18>:
__vector_18():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227
  cli();
  m = timer0_millis;
  SREG = oldSREG;

  return m;
}
    22f0:	1f 92       	push	r1
    22f2:	0f 92       	push	r0
    22f4:	0f b6       	in	r0, 0x3f	; 63
    22f6:	0f 92       	push	r0
    22f8:	11 24       	eor	r1, r1
    22fa:	2f 93       	push	r18
    22fc:	3f 93       	push	r19
    22fe:	8f 93       	push	r24
    2300:	9f 93       	push	r25
    2302:	af 93       	push	r26
    2304:	bf 93       	push	r27
    2306:	80 91 ac 05 	lds	r24, 0x05AC	; 0x8005ac <timer0_millis>
    230a:	90 91 ad 05 	lds	r25, 0x05AD	; 0x8005ad <timer0_millis+0x1>
    230e:	a0 91 ae 05 	lds	r26, 0x05AE	; 0x8005ae <timer0_millis+0x2>
    2312:	b0 91 af 05 	lds	r27, 0x05AF	; 0x8005af <timer0_millis+0x3>
    2316:	30 91 ab 05 	lds	r19, 0x05AB	; 0x8005ab <timer0_fract>
    231a:	23 e0       	ldi	r18, 0x03	; 3
    231c:	23 0f       	add	r18, r19
    231e:	2d 37       	cpi	r18, 0x7D	; 125
    2320:	68 f1       	brcs	.+90     	; 0x237c <__vector_18+0x8c>
    2322:	26 e8       	ldi	r18, 0x86	; 134
    2324:	23 0f       	add	r18, r19
    2326:	02 96       	adiw	r24, 0x02	; 2
    2328:	a1 1d       	adc	r26, r1
    232a:	b1 1d       	adc	r27, r1
    232c:	20 93 ab 05 	sts	0x05AB, r18	; 0x8005ab <timer0_fract>
    2330:	80 93 ac 05 	sts	0x05AC, r24	; 0x8005ac <timer0_millis>
    2334:	90 93 ad 05 	sts	0x05AD, r25	; 0x8005ad <timer0_millis+0x1>
    2338:	a0 93 ae 05 	sts	0x05AE, r26	; 0x8005ae <timer0_millis+0x2>
    233c:	b0 93 af 05 	sts	0x05AF, r27	; 0x8005af <timer0_millis+0x3>
    2340:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <timer0_overflow_count>
    2344:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <timer0_overflow_count+0x1>
    2348:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <timer0_overflow_count+0x2>
    234c:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <timer0_overflow_count+0x3>
    2350:	01 96       	adiw	r24, 0x01	; 1
    2352:	a1 1d       	adc	r26, r1
    2354:	b1 1d       	adc	r27, r1
    2356:	80 93 a7 05 	sts	0x05A7, r24	; 0x8005a7 <timer0_overflow_count>
    235a:	90 93 a8 05 	sts	0x05A8, r25	; 0x8005a8 <timer0_overflow_count+0x1>
    235e:	a0 93 a9 05 	sts	0x05A9, r26	; 0x8005a9 <timer0_overflow_count+0x2>
    2362:	b0 93 aa 05 	sts	0x05AA, r27	; 0x8005aa <timer0_overflow_count+0x3>
    2366:	bf 91       	pop	r27
    2368:	af 91       	pop	r26
    236a:	9f 91       	pop	r25
    236c:	8f 91       	pop	r24
    236e:	3f 91       	pop	r19
    2370:	2f 91       	pop	r18
    2372:	0f 90       	pop	r0
    2374:	0f be       	out	0x3f, r0	; 63
    2376:	0f 90       	pop	r0
    2378:	1f 90       	pop	r1
    237a:	18 95       	reti
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	a1 1d       	adc	r26, r1
    2380:	b1 1d       	adc	r27, r1
    2382:	d4 cf       	rjmp	.-88     	; 0x232c <__vector_18+0x3c>

00002384 <micros>:
micros():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    2384:	3f b7       	in	r19, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    2386:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    2388:	80 91 a7 05 	lds	r24, 0x05A7	; 0x8005a7 <timer0_overflow_count>
    238c:	90 91 a8 05 	lds	r25, 0x05A8	; 0x8005a8 <timer0_overflow_count+0x1>
    2390:	a0 91 a9 05 	lds	r26, 0x05A9	; 0x8005a9 <timer0_overflow_count+0x2>
    2394:	b0 91 aa 05 	lds	r27, 0x05AA	; 0x8005aa <timer0_overflow_count+0x3>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    2398:	26 b5       	in	r18, 0x26	; 38
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    239a:	a8 9b       	sbis	0x15, 0	; 21
    239c:	05 c0       	rjmp	.+10     	; 0x23a8 <micros+0x24>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    239e:	2f 3f       	cpi	r18, 0xFF	; 255
    23a0:	19 f0       	breq	.+6      	; 0x23a8 <micros+0x24>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    23a2:	01 96       	adiw	r24, 0x01	; 1
    23a4:	a1 1d       	adc	r26, r1
    23a6:	b1 1d       	adc	r27, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    23a8:	3f bf       	out	0x3f, r19	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    23aa:	ba 2f       	mov	r27, r26
    23ac:	a9 2f       	mov	r26, r25
    23ae:	98 2f       	mov	r25, r24
    23b0:	88 27       	eor	r24, r24
    23b2:	bc 01       	movw	r22, r24
    23b4:	cd 01       	movw	r24, r26
    23b6:	62 0f       	add	r22, r18
    23b8:	71 1d       	adc	r23, r1
    23ba:	81 1d       	adc	r24, r1
    23bc:	91 1d       	adc	r25, r1
    23be:	42 e0       	ldi	r20, 0x02	; 2
    23c0:	66 0f       	add	r22, r22
    23c2:	77 1f       	adc	r23, r23
    23c4:	88 1f       	adc	r24, r24
    23c6:	99 1f       	adc	r25, r25
    23c8:	4a 95       	dec	r20
    23ca:	d1 f7       	brne	.-12     	; 0x23c0 <micros+0x3c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    23cc:	08 95       	ret

000023ce <delay>:
delay():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    23ce:	8f 92       	push	r8
    23d0:	9f 92       	push	r9
    23d2:	af 92       	push	r10
    23d4:	bf 92       	push	r11
    23d6:	cf 92       	push	r12
    23d8:	df 92       	push	r13
    23da:	ef 92       	push	r14
    23dc:	ff 92       	push	r15
    23de:	6b 01       	movw	r12, r22
    23e0:	7c 01       	movw	r14, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    23e2:	0e 94 c2 11 	call	0x2384	; 0x2384 <micros>
    23e6:	4b 01       	movw	r8, r22
    23e8:	5c 01       	movw	r10, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    23ea:	c1 14       	cp	r12, r1
    23ec:	d1 04       	cpc	r13, r1
    23ee:	e1 04       	cpc	r14, r1
    23f0:	f1 04       	cpc	r15, r1
    23f2:	e9 f0       	breq	.+58     	; 0x242e <delay+0x60>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    23f4:	0e 94 77 11 	call	0x22ee	; 0x22ee <yield>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    23f8:	0e 94 c2 11 	call	0x2384	; 0x2384 <micros>
    23fc:	68 19       	sub	r22, r8
    23fe:	79 09       	sbc	r23, r9
    2400:	8a 09       	sbc	r24, r10
    2402:	9b 09       	sbc	r25, r11
    2404:	68 3e       	cpi	r22, 0xE8	; 232
    2406:	73 40       	sbci	r23, 0x03	; 3
    2408:	81 05       	cpc	r24, r1
    240a:	91 05       	cpc	r25, r1
    240c:	70 f3       	brcs	.-36     	; 0x23ea <delay+0x1c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    240e:	21 e0       	ldi	r18, 0x01	; 1
    2410:	c2 1a       	sub	r12, r18
    2412:	d1 08       	sbc	r13, r1
    2414:	e1 08       	sbc	r14, r1
    2416:	f1 08       	sbc	r15, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    2418:	88 ee       	ldi	r24, 0xE8	; 232
    241a:	88 0e       	add	r8, r24
    241c:	83 e0       	ldi	r24, 0x03	; 3
    241e:	98 1e       	adc	r9, r24
    2420:	a1 1c       	adc	r10, r1
    2422:	b1 1c       	adc	r11, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    2424:	c1 14       	cp	r12, r1
    2426:	d1 04       	cpc	r13, r1
    2428:	e1 04       	cpc	r14, r1
    242a:	f1 04       	cpc	r15, r1
    242c:	29 f7       	brne	.-54     	; 0x23f8 <delay+0x2a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    242e:	ff 90       	pop	r15
    2430:	ef 90       	pop	r14
    2432:	df 90       	pop	r13
    2434:	cf 90       	pop	r12
    2436:	bf 90       	pop	r11
    2438:	af 90       	pop	r10
    243a:	9f 90       	pop	r9
    243c:	8f 90       	pop	r8
    243e:	08 95       	ret

00002440 <delayMicroseconds>:
delayMicroseconds():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    2440:	82 30       	cpi	r24, 0x02	; 2
    2442:	91 05       	cpc	r25, r1
    2444:	38 f0       	brcs	.+14     	; 0x2454 <delayMicroseconds+0x14>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    2446:	88 0f       	add	r24, r24
    2448:	99 1f       	adc	r25, r25
    244a:	88 0f       	add	r24, r24
    244c:	99 1f       	adc	r25, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    244e:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    2450:	01 97       	sbiw	r24, 0x01	; 1
    2452:	f1 f7       	brne	.-4      	; 0x2450 <delayMicroseconds+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    2454:	08 95       	ret

00002456 <init>:
init():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    2456:	78 94       	sei
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    2458:	84 b5       	in	r24, 0x24	; 36
    245a:	83 60       	ori	r24, 0x03	; 3
    245c:	84 bd       	out	0x24, r24	; 36
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    245e:	85 b5       	in	r24, 0x25	; 37
    2460:	83 60       	ori	r24, 0x03	; 3
    2462:	85 bd       	out	0x25, r24	; 37
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    2464:	ee e6       	ldi	r30, 0x6E	; 110
    2466:	f0 e0       	ldi	r31, 0x00	; 0
    2468:	80 81       	ld	r24, Z
    246a:	81 60       	ori	r24, 0x01	; 1
    246c:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    246e:	e1 e8       	ldi	r30, 0x81	; 129
    2470:	f0 e0       	ldi	r31, 0x00	; 0
    2472:	82 e0       	ldi	r24, 0x02	; 2
    2474:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2476:	80 81       	ld	r24, Z
    2478:	81 60       	ori	r24, 0x01	; 1
    247a:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    247c:	e0 e8       	ldi	r30, 0x80	; 128
    247e:	f0 e0       	ldi	r31, 0x00	; 0
    2480:	80 81       	ld	r24, Z
    2482:	81 60       	ori	r24, 0x01	; 1
    2484:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    2486:	e1 eb       	ldi	r30, 0xB1	; 177
    2488:	f0 e0       	ldi	r31, 0x00	; 0
    248a:	80 81       	ld	r24, Z
    248c:	84 60       	ori	r24, 0x04	; 4
    248e:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    2490:	e0 eb       	ldi	r30, 0xB0	; 176
    2492:	f0 e0       	ldi	r31, 0x00	; 0
    2494:	80 81       	ld	r24, Z
    2496:	81 60       	ori	r24, 0x01	; 1
    2498:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    249a:	e1 e9       	ldi	r30, 0x91	; 145
    249c:	f0 e0       	ldi	r31, 0x00	; 0
    249e:	80 81       	ld	r24, Z
    24a0:	83 60       	ori	r24, 0x03	; 3
    24a2:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    24a4:	e0 e9       	ldi	r30, 0x90	; 144
    24a6:	f0 e0       	ldi	r31, 0x00	; 0
    24a8:	80 81       	ld	r24, Z
    24aa:	81 60       	ori	r24, 0x01	; 1
    24ac:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    24ae:	87 e8       	ldi	r24, 0x87	; 135
    24b0:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    24b4:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    24b8:	08 95       	ret

000024ba <turnOffPWM>:
turnOffPWM():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    24ba:	82 50       	subi	r24, 0x02	; 2
    24bc:	8a 30       	cpi	r24, 0x0A	; 10
    24be:	88 f5       	brcc	.+98     	; 0x2522 <turnOffPWM+0x68>
    24c0:	e8 2f       	mov	r30, r24
    24c2:	f0 e0       	ldi	r31, 0x00	; 0
    24c4:	ea 59       	subi	r30, 0x9A	; 154
    24c6:	fd 4e       	sbci	r31, 0xED	; 237
    24c8:	0c 94 1f 1a 	jmp	0x343e	; 0x343e <__tablejump2__>
    24cc:	8e 12       	cpse	r8, r30
    24ce:	92 12       	cpse	r9, r18
    24d0:	70 12       	cpse	r7, r16
    24d2:	76 12       	cpse	r7, r22
    24d4:	91 12       	cpse	r9, r17
    24d6:	91 12       	cpse	r9, r17
    24d8:	7a 12       	cpse	r7, r26
    24da:	80 12       	cpse	r8, r16
    24dc:	84 12       	cpse	r8, r20
    24de:	8a 12       	cpse	r8, r26
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    24e0:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    24e4:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    24e6:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    24ea:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    24ec:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    24f0:	8f 7d       	andi	r24, 0xDF	; 223
    24f2:	f9 cf       	rjmp	.-14     	; 0x24e6 <turnOffPWM+0x2c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    24f4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    24f8:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    24fa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    24fe:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2500:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2504:	8f 7d       	andi	r24, 0xDF	; 223
    2506:	f9 cf       	rjmp	.-14     	; 0x24fa <turnOffPWM+0x40>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    2508:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    250c:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    250e:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    2512:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    2514:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2518:	8f 7d       	andi	r24, 0xDF	; 223
    251a:	f9 cf       	rjmp	.-14     	; 0x250e <turnOffPWM+0x54>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    251c:	84 b5       	in	r24, 0x24	; 36
    251e:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2520:	84 bd       	out	0x24, r24	; 36
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    2522:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    2524:	84 b5       	in	r24, 0x24	; 36
    2526:	8f 7d       	andi	r24, 0xDF	; 223
    2528:	fb cf       	rjmp	.-10     	; 0x2520 <turnOffPWM+0x66>

0000252a <pinMode>:
pinMode():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    252a:	cf 93       	push	r28
    252c:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    252e:	90 e0       	ldi	r25, 0x00	; 0
    2530:	fc 01       	movw	r30, r24
    2532:	ee 54       	subi	r30, 0x4E	; 78
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	24 91       	lpm	r18, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    2538:	8e 52       	subi	r24, 0x2E	; 46
    253a:	9f 4f       	sbci	r25, 0xFF	; 255
    253c:	fc 01       	movw	r30, r24
    253e:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    2540:	88 23       	and	r24, r24
    2542:	c9 f0       	breq	.+50     	; 0x2576 <pinMode+0x4c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    2544:	90 e0       	ldi	r25, 0x00	; 0
    2546:	88 0f       	add	r24, r24
    2548:	99 1f       	adc	r25, r25
    254a:	fc 01       	movw	r30, r24
    254c:	ea 5f       	subi	r30, 0xFA	; 250
    254e:	fe 4f       	sbci	r31, 0xFE	; 254
    2550:	a5 91       	lpm	r26, Z+
    2552:	b4 91       	lpm	r27, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    2554:	fc 01       	movw	r30, r24
    2556:	e4 50       	subi	r30, 0x04	; 4
    2558:	ff 4f       	sbci	r31, 0xFF	; 255
    255a:	c5 91       	lpm	r28, Z+
    255c:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    255e:	61 11       	cpse	r22, r1
    2560:	0d c0       	rjmp	.+26     	; 0x257c <pinMode+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    2562:	9f b7       	in	r25, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    2564:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    2566:	8c 91       	ld	r24, X
    2568:	20 95       	com	r18
    256a:	82 23       	and	r24, r18
    256c:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    256e:	88 81       	ld	r24, Y
    2570:	28 23       	and	r18, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    2572:	28 83       	st	Y, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    2574:	9f bf       	out	0x3f, r25	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    2576:	df 91       	pop	r29
    2578:	cf 91       	pop	r28
    257a:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    257c:	62 30       	cpi	r22, 0x02	; 2
    257e:	51 f4       	brne	.+20     	; 0x2594 <pinMode+0x6a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    2580:	9f b7       	in	r25, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    2582:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    2584:	3c 91       	ld	r19, X
    2586:	82 2f       	mov	r24, r18
    2588:	80 95       	com	r24
    258a:	83 23       	and	r24, r19
    258c:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    258e:	e8 81       	ld	r30, Y
    2590:	2e 2b       	or	r18, r30
    2592:	ef cf       	rjmp	.-34     	; 0x2572 <pinMode+0x48>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    2594:	8f b7       	in	r24, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    2596:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    2598:	ec 91       	ld	r30, X
    259a:	2e 2b       	or	r18, r30
    259c:	2c 93       	st	X, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    259e:	8f bf       	out	0x3f, r24	; 63
    25a0:	ea cf       	rjmp	.-44     	; 0x2576 <pinMode+0x4c>

000025a2 <digitalWrite>:
digitalWrite():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    25a2:	1f 93       	push	r17
    25a4:	cf 93       	push	r28
    25a6:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    25a8:	28 2f       	mov	r18, r24
    25aa:	30 e0       	ldi	r19, 0x00	; 0
    25ac:	f9 01       	movw	r30, r18
    25ae:	ee 56       	subi	r30, 0x6E	; 110
    25b0:	ff 4f       	sbci	r31, 0xFF	; 255
    25b2:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    25b4:	f9 01       	movw	r30, r18
    25b6:	ee 54       	subi	r30, 0x4E	; 78
    25b8:	ff 4f       	sbci	r31, 0xFF	; 255
    25ba:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    25bc:	f9 01       	movw	r30, r18
    25be:	ee 52       	subi	r30, 0x2E	; 46
    25c0:	ff 4f       	sbci	r31, 0xFF	; 255
    25c2:	c4 91       	lpm	r28, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    25c4:	cc 23       	and	r28, r28
    25c6:	a9 f0       	breq	.+42     	; 0x25f2 <digitalWrite+0x50>
    25c8:	16 2f       	mov	r17, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    25ca:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    25cc:	0e 94 5d 12 	call	0x24ba	; 0x24ba <turnOffPWM>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    25d0:	ec 2f       	mov	r30, r28
    25d2:	f0 e0       	ldi	r31, 0x00	; 0
    25d4:	ee 0f       	add	r30, r30
    25d6:	ff 1f       	adc	r31, r31
    25d8:	e4 50       	subi	r30, 0x04	; 4
    25da:	ff 4f       	sbci	r31, 0xFF	; 255
    25dc:	a5 91       	lpm	r26, Z+
    25de:	b4 91       	lpm	r27, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    25e0:	8f b7       	in	r24, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    25e2:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    25e4:	ec 91       	ld	r30, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    25e6:	11 11       	cpse	r17, r1
    25e8:	08 c0       	rjmp	.+16     	; 0x25fa <digitalWrite+0x58>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    25ea:	d0 95       	com	r29
    25ec:	de 23       	and	r29, r30
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    25ee:	dc 93       	st	X, r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    25f0:	8f bf       	out	0x3f, r24	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    25f2:	df 91       	pop	r29
    25f4:	cf 91       	pop	r28
    25f6:	1f 91       	pop	r17
    25f8:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    25fa:	de 2b       	or	r29, r30
    25fc:	f8 cf       	rjmp	.-16     	; 0x25ee <digitalWrite+0x4c>

000025fe <digitalRead>:
digitalRead():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    25fe:	cf 93       	push	r28
    2600:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    2602:	28 2f       	mov	r18, r24
    2604:	30 e0       	ldi	r19, 0x00	; 0
    2606:	f9 01       	movw	r30, r18
    2608:	ee 56       	subi	r30, 0x6E	; 110
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    260e:	f9 01       	movw	r30, r18
    2610:	ee 54       	subi	r30, 0x4E	; 78
    2612:	ff 4f       	sbci	r31, 0xFF	; 255
    2614:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    2616:	f9 01       	movw	r30, r18
    2618:	ee 52       	subi	r30, 0x2E	; 46
    261a:	ff 4f       	sbci	r31, 0xFF	; 255
    261c:	c4 91       	lpm	r28, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    261e:	cc 23       	and	r28, r28
    2620:	a1 f0       	breq	.+40     	; 0x264a <digitalRead+0x4c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2622:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    2624:	0e 94 5d 12 	call	0x24ba	; 0x24ba <turnOffPWM>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    2628:	ec 2f       	mov	r30, r28
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	ee 0f       	add	r30, r30
    262e:	ff 1f       	adc	r31, r31
    2630:	ee 50       	subi	r30, 0x0E	; 14
    2632:	ff 4f       	sbci	r31, 0xFF	; 255
    2634:	a5 91       	lpm	r26, Z+
    2636:	b4 91       	lpm	r27, Z
    2638:	ec 91       	ld	r30, X
    263a:	ed 23       	and	r30, r29
    263c:	81 e0       	ldi	r24, 0x01	; 1
    263e:	90 e0       	ldi	r25, 0x00	; 0
    2640:	09 f4       	brne	.+2      	; 0x2644 <digitalRead+0x46>
    2642:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    2644:	df 91       	pop	r29
    2646:	cf 91       	pop	r28
    2648:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    264a:	80 e0       	ldi	r24, 0x00	; 0
    264c:	90 e0       	ldi	r25, 0x00	; 0
    264e:	fa cf       	rjmp	.-12     	; 0x2644 <digitalRead+0x46>

00002650 <shiftOut>:
shiftOut():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:41
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    2650:	bf 92       	push	r11
    2652:	cf 92       	push	r12
    2654:	df 92       	push	r13
    2656:	ef 92       	push	r14
    2658:	ff 92       	push	r15
    265a:	0f 93       	push	r16
    265c:	1f 93       	push	r17
    265e:	cf 93       	push	r28
    2660:	df 93       	push	r29
    2662:	c8 2e       	mov	r12, r24
    2664:	d6 2e       	mov	r13, r22
    2666:	b4 2e       	mov	r11, r20
    2668:	d0 e0       	ldi	r29, 0x00	; 0
    266a:	c0 e0       	ldi	r28, 0x00	; 0
    266c:	02 2f       	mov	r16, r18
    266e:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:48

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    2670:	87 e0       	ldi	r24, 0x07	; 7
    2672:	e8 2e       	mov	r14, r24
    2674:	f1 2c       	mov	r15, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:46
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    2676:	b8 01       	movw	r22, r16
    2678:	8c 2f       	mov	r24, r28
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:45
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
    267a:	bb 20       	and	r11, r11
    267c:	19 f0       	breq	.+6      	; 0x2684 <shiftOut+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:48
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    267e:	c7 01       	movw	r24, r14
    2680:	8c 1b       	sub	r24, r28
    2682:	9d 0b       	sbc	r25, r29
    2684:	02 c0       	rjmp	.+4      	; 0x268a <shiftOut+0x3a>
    2686:	75 95       	asr	r23
    2688:	67 95       	ror	r22
    268a:	8a 95       	dec	r24
    268c:	e2 f7       	brpl	.-8      	; 0x2686 <shiftOut+0x36>
    268e:	61 70       	andi	r22, 0x01	; 1
    2690:	8c 2d       	mov	r24, r12
    2692:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:50
      
    digitalWrite(clockPin, HIGH);
    2696:	61 e0       	ldi	r22, 0x01	; 1
    2698:	8d 2d       	mov	r24, r13
    269a:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:51
    digitalWrite(clockPin, LOW);    
    269e:	60 e0       	ldi	r22, 0x00	; 0
    26a0:	8d 2d       	mov	r24, r13
    26a2:	0e 94 d1 12 	call	0x25a2	; 0x25a2 <digitalWrite>
    26a6:	21 96       	adiw	r28, 0x01	; 1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:44

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    26a8:	c8 30       	cpi	r28, 0x08	; 8
    26aa:	d1 05       	cpc	r29, r1
    26ac:	21 f7       	brne	.-56     	; 0x2676 <shiftOut+0x26>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:53
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
      
    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);    
  }
}
    26ae:	df 91       	pop	r29
    26b0:	cf 91       	pop	r28
    26b2:	1f 91       	pop	r17
    26b4:	0f 91       	pop	r16
    26b6:	ff 90       	pop	r15
    26b8:	ef 90       	pop	r14
    26ba:	df 90       	pop	r13
    26bc:	cf 90       	pop	r12
    26be:	bf 90       	pop	r11
    26c0:	08 95       	ret

000026c2 <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    26c2:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    26c4:	91 8d       	ldd	r25, Z+25	; 0x19
    26c6:	22 8d       	ldd	r18, Z+26	; 0x1a
    26c8:	89 2f       	mov	r24, r25
    26ca:	90 e0       	ldi	r25, 0x00	; 0
    26cc:	80 5c       	subi	r24, 0xC0	; 192
    26ce:	9f 4f       	sbci	r25, 0xFF	; 255
    26d0:	82 1b       	sub	r24, r18
    26d2:	91 09       	sbc	r25, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    26d4:	8f 73       	andi	r24, 0x3F	; 63
    26d6:	99 27       	eor	r25, r25
    26d8:	08 95       	ret

000026da <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    26da:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    26dc:	91 8d       	ldd	r25, Z+25	; 0x19
    26de:	82 8d       	ldd	r24, Z+26	; 0x1a
    26e0:	98 17       	cp	r25, r24
    26e2:	31 f0       	breq	.+12     	; 0x26f0 <HardwareSerial::peek()+0x16>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    26e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    26e6:	e8 0f       	add	r30, r24
    26e8:	f1 1d       	adc	r31, r1
    26ea:	85 8d       	ldd	r24, Z+29	; 0x1d
    26ec:	90 e0       	ldi	r25, 0x00	; 0
    26ee:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    26f0:	8f ef       	ldi	r24, 0xFF	; 255
    26f2:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    26f4:	08 95       	ret

000026f6 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    26f6:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    26f8:	91 8d       	ldd	r25, Z+25	; 0x19
    26fa:	82 8d       	ldd	r24, Z+26	; 0x1a
    26fc:	98 17       	cp	r25, r24
    26fe:	61 f0       	breq	.+24     	; 0x2718 <HardwareSerial::read()+0x22>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2700:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2702:	ae 0f       	add	r26, r30
    2704:	bf 2f       	mov	r27, r31
    2706:	b1 1d       	adc	r27, r1
    2708:	5d 96       	adiw	r26, 0x1d	; 29
    270a:	8c 91       	ld	r24, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    270c:	92 8d       	ldd	r25, Z+26	; 0x1a
    270e:	9f 5f       	subi	r25, 0xFF	; 255
    2710:	9f 73       	andi	r25, 0x3F	; 63
    2712:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    2714:	90 e0       	ldi	r25, 0x00	; 0
    2716:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2718:	8f ef       	ldi	r24, 0xFF	; 255
    271a:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    271c:	08 95       	ret

0000271e <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    271e:	fc 01       	movw	r30, r24
    2720:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    2722:	44 8d       	ldd	r20, Z+28	; 0x1c
    2724:	25 2f       	mov	r18, r21
    2726:	30 e0       	ldi	r19, 0x00	; 0
    2728:	84 2f       	mov	r24, r20
    272a:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    272c:	82 1b       	sub	r24, r18
    272e:	93 0b       	sbc	r25, r19
    2730:	54 17       	cp	r21, r20
    2732:	10 f0       	brcs	.+4      	; 0x2738 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    2734:	cf 96       	adiw	r24, 0x3f	; 63
    2736:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    2738:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    273a:	08 95       	ret

0000273c <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    273c:	89 ef       	ldi	r24, 0xF9	; 249
    273e:	94 e1       	ldi	r25, 0x14	; 20
    2740:	89 2b       	or	r24, r25
    2742:	49 f0       	breq	.+18     	; 0x2756 <serialEventRun()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    2744:	80 e0       	ldi	r24, 0x00	; 0
    2746:	90 e0       	ldi	r25, 0x00	; 0
    2748:	89 2b       	or	r24, r25
    274a:	29 f0       	breq	.+10     	; 0x2756 <serialEventRun()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    274c:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <Serial0_available()>
    2750:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    2752:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    2756:	80 e0       	ldi	r24, 0x00	; 0
    2758:	90 e0       	ldi	r25, 0x00	; 0
    275a:	89 2b       	or	r24, r25
    275c:	49 f0       	breq	.+18     	; 0x2770 <serialEventRun()+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    275e:	80 e0       	ldi	r24, 0x00	; 0
    2760:	90 e0       	ldi	r25, 0x00	; 0
    2762:	89 2b       	or	r24, r25
    2764:	29 f0       	breq	.+10     	; 0x2770 <serialEventRun()+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    2766:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    276a:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    276c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    2770:	08 95       	ret

00002772 <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2772:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2774:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2776:	a8 0f       	add	r26, r24
    2778:	b9 2f       	mov	r27, r25
    277a:	b1 1d       	adc	r27, r1
    277c:	a3 5a       	subi	r26, 0xA3	; 163
    277e:	bf 4f       	sbci	r27, 0xFF	; 255
    2780:	2c 91       	ld	r18, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2782:	84 8d       	ldd	r24, Z+28	; 0x1c
    2784:	90 e0       	ldi	r25, 0x00	; 0
    2786:	01 96       	adiw	r24, 0x01	; 1
    2788:	8f 73       	andi	r24, 0x3F	; 63
    278a:	99 27       	eor	r25, r25
    278c:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    278e:	a6 89       	ldd	r26, Z+22	; 0x16
    2790:	b7 89       	ldd	r27, Z+23	; 0x17
    2792:	2c 93       	st	X, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    2794:	a0 89       	ldd	r26, Z+16	; 0x10
    2796:	b1 89       	ldd	r27, Z+17	; 0x11
    2798:	8c 91       	ld	r24, X
    279a:	80 64       	ori	r24, 0x40	; 64
    279c:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    279e:	93 8d       	ldd	r25, Z+27	; 0x1b
    27a0:	84 8d       	ldd	r24, Z+28	; 0x1c
    27a2:	98 13       	cpse	r25, r24
    27a4:	06 c0       	rjmp	.+12     	; 0x27b2 <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    27a6:	02 88       	ldd	r0, Z+18	; 0x12
    27a8:	f3 89       	ldd	r31, Z+19	; 0x13
    27aa:	e0 2d       	mov	r30, r0
    27ac:	80 81       	ld	r24, Z
    27ae:	8f 7d       	andi	r24, 0xDF	; 223
    27b0:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    27b2:	08 95       	ret

000027b4 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    27b4:	cf 93       	push	r28
    27b6:	df 93       	push	r29
    27b8:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    27ba:	88 8d       	ldd	r24, Y+24	; 0x18
    27bc:	88 23       	and	r24, r24
    27be:	b9 f0       	breq	.+46     	; 0x27ee <HardwareSerial::flush()+0x3a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    27c0:	aa 89       	ldd	r26, Y+18	; 0x12
    27c2:	bb 89       	ldd	r27, Y+19	; 0x13
    27c4:	e8 89       	ldd	r30, Y+16	; 0x10
    27c6:	f9 89       	ldd	r31, Y+17	; 0x11
    27c8:	8c 91       	ld	r24, X
    27ca:	85 fd       	sbrc	r24, 5
    27cc:	03 c0       	rjmp	.+6      	; 0x27d4 <HardwareSerial::flush()+0x20>
    27ce:	80 81       	ld	r24, Z
    27d0:	86 fd       	sbrc	r24, 6
    27d2:	0d c0       	rjmp	.+26     	; 0x27ee <HardwareSerial::flush()+0x3a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    27d4:	0f b6       	in	r0, 0x3f	; 63
    27d6:	07 fc       	sbrc	r0, 7
    27d8:	f7 cf       	rjmp	.-18     	; 0x27c8 <HardwareSerial::flush()+0x14>
    27da:	8c 91       	ld	r24, X
    27dc:	85 ff       	sbrs	r24, 5
    27de:	f2 cf       	rjmp	.-28     	; 0x27c4 <HardwareSerial::flush()+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    27e0:	80 81       	ld	r24, Z
    27e2:	85 ff       	sbrs	r24, 5
    27e4:	ed cf       	rjmp	.-38     	; 0x27c0 <HardwareSerial::flush()+0xc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    27e6:	ce 01       	movw	r24, r28
    27e8:	0e 94 b9 13 	call	0x2772	; 0x2772 <HardwareSerial::_tx_udr_empty_irq()>
    27ec:	e9 cf       	rjmp	.-46     	; 0x27c0 <HardwareSerial::flush()+0xc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    27ee:	df 91       	pop	r29
    27f0:	cf 91       	pop	r28
    27f2:	08 95       	ret

000027f4 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    27f4:	ef 92       	push	r14
    27f6:	ff 92       	push	r15
    27f8:	0f 93       	push	r16
    27fa:	1f 93       	push	r17
    27fc:	cf 93       	push	r28
    27fe:	df 93       	push	r29
    2800:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    2802:	81 e0       	ldi	r24, 0x01	; 1
    2804:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2806:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2808:	8c 8d       	ldd	r24, Y+28	; 0x1c
    280a:	98 13       	cpse	r25, r24
    280c:	16 c0       	rjmp	.+44     	; 0x283a <HardwareSerial::write(unsigned char)+0x46>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    280e:	e8 89       	ldd	r30, Y+16	; 0x10
    2810:	f9 89       	ldd	r31, Y+17	; 0x11
    2812:	80 81       	ld	r24, Z
    2814:	85 ff       	sbrs	r24, 5
    2816:	11 c0       	rjmp	.+34     	; 0x283a <HardwareSerial::write(unsigned char)+0x46>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    2818:	ee 89       	ldd	r30, Y+22	; 0x16
    281a:	ff 89       	ldd	r31, Y+23	; 0x17
    281c:	60 83       	st	Z, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    281e:	e8 89       	ldd	r30, Y+16	; 0x10
    2820:	f9 89       	ldd	r31, Y+17	; 0x11
    2822:	80 81       	ld	r24, Z
    2824:	80 64       	ori	r24, 0x40	; 64
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    2826:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    2828:	81 e0       	ldi	r24, 0x01	; 1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	df 91       	pop	r29
    282e:	cf 91       	pop	r28
    2830:	1f 91       	pop	r17
    2832:	0f 91       	pop	r16
    2834:	ff 90       	pop	r15
    2836:	ef 90       	pop	r14
    2838:	08 95       	ret
    283a:	f6 2e       	mov	r15, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    283c:	0b 8d       	ldd	r16, Y+27	; 0x1b
    283e:	10 e0       	ldi	r17, 0x00	; 0
    2840:	0f 5f       	subi	r16, 0xFF	; 255
    2842:	1f 4f       	sbci	r17, 0xFF	; 255
    2844:	0f 73       	andi	r16, 0x3F	; 63
    2846:	11 27       	eor	r17, r17
    2848:	e0 2e       	mov	r14, r16
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    284a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    284c:	8e 11       	cpse	r24, r14
    284e:	0c c0       	rjmp	.+24     	; 0x2868 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    2850:	0f b6       	in	r0, 0x3f	; 63
    2852:	07 fc       	sbrc	r0, 7
    2854:	fa cf       	rjmp	.-12     	; 0x284a <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2856:	e8 89       	ldd	r30, Y+16	; 0x10
    2858:	f9 89       	ldd	r31, Y+17	; 0x11
    285a:	80 81       	ld	r24, Z
    285c:	85 ff       	sbrs	r24, 5
    285e:	f5 cf       	rjmp	.-22     	; 0x284a <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    2860:	ce 01       	movw	r24, r28
    2862:	0e 94 b9 13 	call	0x2772	; 0x2772 <HardwareSerial::_tx_udr_empty_irq()>
    2866:	f1 cf       	rjmp	.-30     	; 0x284a <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2868:	eb 8d       	ldd	r30, Y+27	; 0x1b
    286a:	ec 0f       	add	r30, r28
    286c:	fd 2f       	mov	r31, r29
    286e:	f1 1d       	adc	r31, r1
    2870:	e3 5a       	subi	r30, 0xA3	; 163
    2872:	ff 4f       	sbci	r31, 0xFF	; 255
    2874:	f0 82       	st	Z, r15
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    2876:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    2878:	ea 89       	ldd	r30, Y+18	; 0x12
    287a:	fb 89       	ldd	r31, Y+19	; 0x13
    287c:	80 81       	ld	r24, Z
    287e:	80 62       	ori	r24, 0x20	; 32
    2880:	d2 cf       	rjmp	.-92     	; 0x2826 <HardwareSerial::write(unsigned char)+0x32>

00002882 <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2882:	cf 92       	push	r12
    2884:	df 92       	push	r13
    2886:	ef 92       	push	r14
    2888:	ff 92       	push	r15
    288a:	1f 93       	push	r17
    288c:	cf 93       	push	r28
    288e:	df 93       	push	r29
    2890:	ec 01       	movw	r28, r24
    2892:	6a 01       	movw	r12, r20
    2894:	7b 01       	movw	r14, r22
    2896:	12 2f       	mov	r17, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2898:	e8 89       	ldd	r30, Y+16	; 0x10
    289a:	f9 89       	ldd	r31, Y+17	; 0x11
    289c:	82 e0       	ldi	r24, 0x02	; 2
    289e:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    28a0:	c1 14       	cp	r12, r1
    28a2:	81 ee       	ldi	r24, 0xE1	; 225
    28a4:	d8 06       	cpc	r13, r24
    28a6:	e1 04       	cpc	r14, r1
    28a8:	f1 04       	cpc	r15, r1
    28aa:	a1 f0       	breq	.+40     	; 0x28d4 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    28ac:	60 e0       	ldi	r22, 0x00	; 0
    28ae:	79 e0       	ldi	r23, 0x09	; 9
    28b0:	8d e3       	ldi	r24, 0x3D	; 61
    28b2:	90 e0       	ldi	r25, 0x00	; 0
    28b4:	a7 01       	movw	r20, r14
    28b6:	96 01       	movw	r18, r12
    28b8:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
    28bc:	21 50       	subi	r18, 0x01	; 1
    28be:	31 09       	sbc	r19, r1
    28c0:	41 09       	sbc	r20, r1
    28c2:	51 09       	sbc	r21, r1
    28c4:	56 95       	lsr	r21
    28c6:	47 95       	ror	r20
    28c8:	37 95       	ror	r19
    28ca:	27 95       	ror	r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    28cc:	21 15       	cp	r18, r1
    28ce:	80 e1       	ldi	r24, 0x10	; 16
    28d0:	38 07       	cpc	r19, r24
    28d2:	98 f0       	brcs	.+38     	; 0x28fa <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    28d4:	e8 89       	ldd	r30, Y+16	; 0x10
    28d6:	f9 89       	ldd	r31, Y+17	; 0x11
    28d8:	10 82       	st	Z, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    28da:	60 e8       	ldi	r22, 0x80	; 128
    28dc:	74 e8       	ldi	r23, 0x84	; 132
    28de:	8e e1       	ldi	r24, 0x1E	; 30
    28e0:	90 e0       	ldi	r25, 0x00	; 0
    28e2:	a7 01       	movw	r20, r14
    28e4:	96 01       	movw	r18, r12
    28e6:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
    28ea:	21 50       	subi	r18, 0x01	; 1
    28ec:	31 09       	sbc	r19, r1
    28ee:	41 09       	sbc	r20, r1
    28f0:	51 09       	sbc	r21, r1
    28f2:	56 95       	lsr	r21
    28f4:	47 95       	ror	r20
    28f6:	37 95       	ror	r19
    28f8:	27 95       	ror	r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    28fa:	ec 85       	ldd	r30, Y+12	; 0x0c
    28fc:	fd 85       	ldd	r31, Y+13	; 0x0d
    28fe:	30 83       	st	Z, r19
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    2900:	ee 85       	ldd	r30, Y+14	; 0x0e
    2902:	ff 85       	ldd	r31, Y+15	; 0x0f
    2904:	20 83       	st	Z, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    2906:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2908:	ec 89       	ldd	r30, Y+20	; 0x14
    290a:	fd 89       	ldd	r31, Y+21	; 0x15
    290c:	10 83       	st	Z, r17
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    290e:	ea 89       	ldd	r30, Y+18	; 0x12
    2910:	fb 89       	ldd	r31, Y+19	; 0x13
    2912:	80 81       	ld	r24, Z
    2914:	88 69       	ori	r24, 0x98	; 152
    2916:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    2918:	ea 89       	ldd	r30, Y+18	; 0x12
    291a:	fb 89       	ldd	r31, Y+19	; 0x13
    291c:	80 81       	ld	r24, Z
    291e:	8f 7d       	andi	r24, 0xDF	; 223
    2920:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    2922:	df 91       	pop	r29
    2924:	cf 91       	pop	r28
    2926:	1f 91       	pop	r17
    2928:	ff 90       	pop	r15
    292a:	ef 90       	pop	r14
    292c:	df 90       	pop	r13
    292e:	cf 90       	pop	r12
    2930:	08 95       	ret

00002932 <__vector_20>:
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2932:	1f 92       	push	r1
    2934:	0f 92       	push	r0
    2936:	0f b6       	in	r0, 0x3f	; 63
    2938:	0f 92       	push	r0
    293a:	11 24       	eor	r1, r1
    293c:	0b b6       	in	r0, 0x3b	; 59
    293e:	0f 92       	push	r0
    2940:	2f 93       	push	r18
    2942:	8f 93       	push	r24
    2944:	9f 93       	push	r25
    2946:	ef 93       	push	r30
    2948:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    294a:	e0 91 c0 05 	lds	r30, 0x05C0	; 0x8005c0 <Serial+0x10>
    294e:	f0 91 c1 05 	lds	r31, 0x05C1	; 0x8005c1 <Serial+0x11>
    2952:	80 81       	ld	r24, Z
    2954:	e0 91 c6 05 	lds	r30, 0x05C6	; 0x8005c6 <Serial+0x16>
    2958:	f0 91 c7 05 	lds	r31, 0x05C7	; 0x8005c7 <Serial+0x17>
    295c:	82 fd       	sbrc	r24, 2
    295e:	1d c0       	rjmp	.+58     	; 0x299a <__vector_20+0x68>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2960:	90 81       	ld	r25, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2962:	80 91 c9 05 	lds	r24, 0x05C9	; 0x8005c9 <Serial+0x19>
    2966:	8f 5f       	subi	r24, 0xFF	; 255
    2968:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    296a:	20 91 ca 05 	lds	r18, 0x05CA	; 0x8005ca <Serial+0x1a>
    296e:	82 17       	cp	r24, r18
    2970:	41 f0       	breq	.+16     	; 0x2982 <__vector_20+0x50>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    2972:	e0 91 c9 05 	lds	r30, 0x05C9	; 0x8005c9 <Serial+0x19>
    2976:	f0 e0       	ldi	r31, 0x00	; 0
    2978:	e0 55       	subi	r30, 0x50	; 80
    297a:	fa 4f       	sbci	r31, 0xFA	; 250
    297c:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    297e:	80 93 c9 05 	sts	0x05C9, r24	; 0x8005c9 <Serial+0x19>
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    2982:	ff 91       	pop	r31
    2984:	ef 91       	pop	r30
    2986:	9f 91       	pop	r25
    2988:	8f 91       	pop	r24
    298a:	2f 91       	pop	r18
    298c:	0f 90       	pop	r0
    298e:	0b be       	out	0x3b, r0	; 59
    2990:	0f 90       	pop	r0
    2992:	0f be       	out	0x3f, r0	; 63
    2994:	0f 90       	pop	r0
    2996:	1f 90       	pop	r1
    2998:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    299a:	80 81       	ld	r24, Z
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    299c:	f2 cf       	rjmp	.-28     	; 0x2982 <__vector_20+0x50>

0000299e <__vector_21>:
__vector_21():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    299e:	1f 92       	push	r1
    29a0:	0f 92       	push	r0
    29a2:	0f b6       	in	r0, 0x3f	; 63
    29a4:	0f 92       	push	r0
    29a6:	11 24       	eor	r1, r1
    29a8:	0b b6       	in	r0, 0x3b	; 59
    29aa:	0f 92       	push	r0
    29ac:	2f 93       	push	r18
    29ae:	3f 93       	push	r19
    29b0:	4f 93       	push	r20
    29b2:	5f 93       	push	r21
    29b4:	6f 93       	push	r22
    29b6:	7f 93       	push	r23
    29b8:	8f 93       	push	r24
    29ba:	9f 93       	push	r25
    29bc:	af 93       	push	r26
    29be:	bf 93       	push	r27
    29c0:	ef 93       	push	r30
    29c2:	ff 93       	push	r31
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    29c4:	80 eb       	ldi	r24, 0xB0	; 176
    29c6:	95 e0       	ldi	r25, 0x05	; 5
    29c8:	0e 94 b9 13 	call	0x2772	; 0x2772 <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    29cc:	ff 91       	pop	r31
    29ce:	ef 91       	pop	r30
    29d0:	bf 91       	pop	r27
    29d2:	af 91       	pop	r26
    29d4:	9f 91       	pop	r25
    29d6:	8f 91       	pop	r24
    29d8:	7f 91       	pop	r23
    29da:	6f 91       	pop	r22
    29dc:	5f 91       	pop	r21
    29de:	4f 91       	pop	r20
    29e0:	3f 91       	pop	r19
    29e2:	2f 91       	pop	r18
    29e4:	0f 90       	pop	r0
    29e6:	0b be       	out	0x3b, r0	; 59
    29e8:	0f 90       	pop	r0
    29ea:	0f be       	out	0x3f, r0	; 63
    29ec:	0f 90       	pop	r0
    29ee:	1f 90       	pop	r1
    29f0:	18 95       	reti

000029f2 <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    29f2:	80 eb       	ldi	r24, 0xB0	; 176
    29f4:	95 e0       	ldi	r25, 0x05	; 5
    29f6:	0e 94 61 13 	call	0x26c2	; 0x26c2 <HardwareSerial::available()>
    29fa:	21 e0       	ldi	r18, 0x01	; 1
    29fc:	89 2b       	or	r24, r25
    29fe:	09 f4       	brne	.+2      	; 0x2a02 <Serial0_available()+0x10>
    2a00:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    2a02:	82 2f       	mov	r24, r18
    2a04:	08 95       	ret

00002a06 <_GLOBAL__sub_I___vector_20>:
_ZN5PrintC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    2a06:	e0 eb       	ldi	r30, 0xB0	; 176
    2a08:	f5 e0       	ldi	r31, 0x05	; 5
    2a0a:	13 82       	std	Z+3, r1	; 0x03
    2a0c:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
    2a0e:	88 ee       	ldi	r24, 0xE8	; 232
    2a10:	93 e0       	ldi	r25, 0x03	; 3
    2a12:	a0 e0       	ldi	r26, 0x00	; 0
    2a14:	b0 e0       	ldi	r27, 0x00	; 0
    2a16:	84 83       	std	Z+4, r24	; 0x04
    2a18:	95 83       	std	Z+5, r25	; 0x05
    2a1a:	a6 83       	std	Z+6, r26	; 0x06
    2a1c:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2a1e:	82 ed       	ldi	r24, 0xD2	; 210
    2a20:	93 e0       	ldi	r25, 0x03	; 3
    2a22:	91 83       	std	Z+1, r25	; 0x01
    2a24:	80 83       	st	Z, r24
    2a26:	85 ec       	ldi	r24, 0xC5	; 197
    2a28:	90 e0       	ldi	r25, 0x00	; 0
    2a2a:	95 87       	std	Z+13, r25	; 0x0d
    2a2c:	84 87       	std	Z+12, r24	; 0x0c
    2a2e:	84 ec       	ldi	r24, 0xC4	; 196
    2a30:	90 e0       	ldi	r25, 0x00	; 0
    2a32:	97 87       	std	Z+15, r25	; 0x0f
    2a34:	86 87       	std	Z+14, r24	; 0x0e
    2a36:	80 ec       	ldi	r24, 0xC0	; 192
    2a38:	90 e0       	ldi	r25, 0x00	; 0
    2a3a:	91 8b       	std	Z+17, r25	; 0x11
    2a3c:	80 8b       	std	Z+16, r24	; 0x10
    2a3e:	81 ec       	ldi	r24, 0xC1	; 193
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	93 8b       	std	Z+19, r25	; 0x13
    2a44:	82 8b       	std	Z+18, r24	; 0x12
    2a46:	82 ec       	ldi	r24, 0xC2	; 194
    2a48:	90 e0       	ldi	r25, 0x00	; 0
    2a4a:	95 8b       	std	Z+21, r25	; 0x15
    2a4c:	84 8b       	std	Z+20, r24	; 0x14
    2a4e:	86 ec       	ldi	r24, 0xC6	; 198
    2a50:	90 e0       	ldi	r25, 0x00	; 0
    2a52:	97 8b       	std	Z+23, r25	; 0x17
    2a54:	86 8b       	std	Z+22, r24	; 0x16
    2a56:	11 8e       	std	Z+25, r1	; 0x19
    2a58:	12 8e       	std	Z+26, r1	; 0x1a
    2a5a:	13 8e       	std	Z+27, r1	; 0x1b
    2a5c:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    2a5e:	08 95       	ret

00002a60 <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:171
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2a60:	af 92       	push	r10
    2a62:	bf 92       	push	r11
    2a64:	cf 92       	push	r12
    2a66:	df 92       	push	r13
    2a68:	ef 92       	push	r14
    2a6a:	ff 92       	push	r15
    2a6c:	0f 93       	push	r16
    2a6e:	1f 93       	push	r17
    2a70:	cf 93       	push	r28
    2a72:	df 93       	push	r29
    2a74:	6c 01       	movw	r12, r24
    2a76:	7b 01       	movw	r14, r22
    2a78:	8b 01       	movw	r16, r22
    2a7a:	04 0f       	add	r16, r20
    2a7c:	15 1f       	adc	r17, r21
    2a7e:	eb 01       	movw	r28, r22
    2a80:	5e 01       	movw	r10, r28
    2a82:	ae 18       	sub	r10, r14
    2a84:	bf 08       	sbc	r11, r15
    2a86:	c0 17       	cp	r28, r16
    2a88:	d1 07       	cpc	r29, r17
    2a8a:	59 f0       	breq	.+22     	; 0x2aa2 <Print::write(unsigned char const*, unsigned int)+0x42>
    2a8c:	69 91       	ld	r22, Y+
    2a8e:	d6 01       	movw	r26, r12
    2a90:	ed 91       	ld	r30, X+
    2a92:	fc 91       	ld	r31, X
    2a94:	01 90       	ld	r0, Z+
    2a96:	f0 81       	ld	r31, Z
    2a98:	e0 2d       	mov	r30, r0
    2a9a:	c6 01       	movw	r24, r12
    2a9c:	09 95       	icall
    2a9e:	89 2b       	or	r24, r25
    2aa0:	79 f7       	brne	.-34     	; 0x2a80 <Print::write(unsigned char const*, unsigned int)+0x20>
    2aa2:	c5 01       	movw	r24, r10
    2aa4:	df 91       	pop	r29
    2aa6:	cf 91       	pop	r28
    2aa8:	1f 91       	pop	r17
    2aaa:	0f 91       	pop	r16
    2aac:	ff 90       	pop	r15
    2aae:	ef 90       	pop	r14
    2ab0:	df 90       	pop	r13
    2ab2:	cf 90       	pop	r12
    2ab4:	bf 90       	pop	r11
    2ab6:	af 90       	pop	r10
    2ab8:	08 95       	ret

00002aba <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    2aba:	fb 01       	movw	r30, r22
    2abc:	01 90       	ld	r0, Z+
    2abe:	00 20       	and	r0, r0
    2ac0:	e9 f7       	brne	.-6      	; 0x2abc <Print::write(char const*) [clone .part.2]+0x2>
    2ac2:	31 97       	sbiw	r30, 0x01	; 1
    2ac4:	af 01       	movw	r20, r30
    2ac6:	46 1b       	sub	r20, r22
    2ac8:	57 0b       	sbc	r21, r23
    2aca:	dc 01       	movw	r26, r24
    2acc:	ed 91       	ld	r30, X+
    2ace:	fc 91       	ld	r31, X
    2ad0:	02 80       	ldd	r0, Z+2	; 0x02
    2ad2:	f3 81       	ldd	r31, Z+3	; 0x03
    2ad4:	e0 2d       	mov	r30, r0
    2ad6:	09 94       	ijmp

00002ad8 <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    2ad8:	ef 92       	push	r14
    2ada:	ff 92       	push	r15
    2adc:	0f 93       	push	r16
    2ade:	1f 93       	push	r17
    2ae0:	cf 93       	push	r28
    2ae2:	df 93       	push	r29
    2ae4:	8c 01       	movw	r16, r24
    2ae6:	7b 01       	movw	r14, r22
    2ae8:	d0 e0       	ldi	r29, 0x00	; 0
    2aea:	c0 e0       	ldi	r28, 0x00	; 0
    2aec:	f7 01       	movw	r30, r14
    2aee:	ec 0f       	add	r30, r28
    2af0:	fd 1f       	adc	r31, r29
    2af2:	64 91       	lpm	r22, Z
    2af4:	66 23       	and	r22, r22
    2af6:	61 f0       	breq	.+24     	; 0x2b10 <Print::print(__FlashStringHelper const*)+0x38>
    2af8:	d8 01       	movw	r26, r16
    2afa:	ed 91       	ld	r30, X+
    2afc:	fc 91       	ld	r31, X
    2afe:	01 90       	ld	r0, Z+
    2b00:	f0 81       	ld	r31, Z
    2b02:	e0 2d       	mov	r30, r0
    2b04:	c8 01       	movw	r24, r16
    2b06:	09 95       	icall
    2b08:	89 2b       	or	r24, r25
    2b0a:	11 f0       	breq	.+4      	; 0x2b10 <Print::print(__FlashStringHelper const*)+0x38>
    2b0c:	21 96       	adiw	r28, 0x01	; 1
    2b0e:	ee cf       	rjmp	.-36     	; 0x2aec <Print::print(__FlashStringHelper const*)+0x14>
    2b10:	ce 01       	movw	r24, r28
    2b12:	df 91       	pop	r29
    2b14:	cf 91       	pop	r28
    2b16:	1f 91       	pop	r17
    2b18:	0f 91       	pop	r16
    2b1a:	ff 90       	pop	r15
    2b1c:	ef 90       	pop	r14
    2b1e:	08 95       	ret

00002b20 <Print::print(char const*)>:
_ZN5Print5writeEPKc():
    2b20:	61 15       	cp	r22, r1
    2b22:	71 05       	cpc	r23, r1
    2b24:	11 f0       	breq	.+4      	; 0x2b2a <Print::print(char const*)+0xa>
    2b26:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    2b2a:	90 e0       	ldi	r25, 0x00	; 0
    2b2c:	80 e0       	ldi	r24, 0x00	; 0
    2b2e:	08 95       	ret

00002b30 <Print::print(char)>:
_ZN5Print5printEc():
    2b30:	dc 01       	movw	r26, r24
    2b32:	ed 91       	ld	r30, X+
    2b34:	fc 91       	ld	r31, X
    2b36:	01 90       	ld	r0, Z+
    2b38:	f0 81       	ld	r31, Z
    2b3a:	e0 2d       	mov	r30, r0
    2b3c:	09 94       	ijmp

00002b3e <Print::println()>:
_ZN5Print5writeEPKc():
    2b3e:	60 ee       	ldi	r22, 0xE0	; 224
    2b40:	73 e0       	ldi	r23, 0x03	; 3
    2b42:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <Print::write(char const*) [clone .part.2]>

00002b46 <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
    2b46:	0f 93       	push	r16
    2b48:	1f 93       	push	r17
    2b4a:	cf 93       	push	r28
    2b4c:	df 93       	push	r29
    2b4e:	ec 01       	movw	r28, r24
    2b50:	0e 94 6c 15 	call	0x2ad8	; 0x2ad8 <Print::print(__FlashStringHelper const*)>
    2b54:	8c 01       	movw	r16, r24
    2b56:	ce 01       	movw	r24, r28
    2b58:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <Print::println()>
    2b5c:	80 0f       	add	r24, r16
    2b5e:	91 1f       	adc	r25, r17
    2b60:	df 91       	pop	r29
    2b62:	cf 91       	pop	r28
    2b64:	1f 91       	pop	r17
    2b66:	0f 91       	pop	r16
    2b68:	08 95       	ret

00002b6a <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    2b6a:	0f 93       	push	r16
    2b6c:	1f 93       	push	r17
    2b6e:	cf 93       	push	r28
    2b70:	df 93       	push	r29
    2b72:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    2b74:	d0 e0       	ldi	r29, 0x00	; 0
    2b76:	c0 e0       	ldi	r28, 0x00	; 0
    2b78:	61 15       	cp	r22, r1
    2b7a:	71 05       	cpc	r23, r1
    2b7c:	19 f0       	breq	.+6      	; 0x2b84 <Print::println(char const*)+0x1a>
    2b7e:	0e 94 5d 15 	call	0x2aba	; 0x2aba <Print::write(char const*) [clone .part.2]>
    2b82:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    2b84:	c8 01       	movw	r24, r16
    2b86:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <Print::println()>
    2b8a:	8c 0f       	add	r24, r28
    2b8c:	9d 1f       	adc	r25, r29
    2b8e:	df 91       	pop	r29
    2b90:	cf 91       	pop	r28
    2b92:	1f 91       	pop	r17
    2b94:	0f 91       	pop	r16
    2b96:	08 95       	ret

00002b98 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    2b98:	8f 92       	push	r8
    2b9a:	9f 92       	push	r9
    2b9c:	af 92       	push	r10
    2b9e:	bf 92       	push	r11
    2ba0:	ef 92       	push	r14
    2ba2:	ff 92       	push	r15
    2ba4:	0f 93       	push	r16
    2ba6:	1f 93       	push	r17
    2ba8:	cf 93       	push	r28
    2baa:	df 93       	push	r29
    2bac:	cd b7       	in	r28, 0x3d	; 61
    2bae:	de b7       	in	r29, 0x3e	; 62
    2bb0:	a1 97       	sbiw	r28, 0x21	; 33
    2bb2:	0f b6       	in	r0, 0x3f	; 63
    2bb4:	f8 94       	cli
    2bb6:	de bf       	out	0x3e, r29	; 62
    2bb8:	0f be       	out	0x3f, r0	; 63
    2bba:	cd bf       	out	0x3d, r28	; 61
    2bbc:	7c 01       	movw	r14, r24
    2bbe:	fa 01       	movw	r30, r20
    2bc0:	cb 01       	movw	r24, r22
    2bc2:	19 a2       	std	Y+33, r1	; 0x21
    2bc4:	22 30       	cpi	r18, 0x02	; 2
    2bc6:	08 f4       	brcc	.+2      	; 0x2bca <Print::printNumber(unsigned long, unsigned char)+0x32>
    2bc8:	2a e0       	ldi	r18, 0x0A	; 10
    2bca:	8e 01       	movw	r16, r28
    2bcc:	0f 5d       	subi	r16, 0xDF	; 223
    2bce:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd0:	82 2e       	mov	r8, r18
    2bd2:	91 2c       	mov	r9, r1
    2bd4:	b1 2c       	mov	r11, r1
    2bd6:	a1 2c       	mov	r10, r1
    2bd8:	bf 01       	movw	r22, r30
    2bda:	a5 01       	movw	r20, r10
    2bdc:	94 01       	movw	r18, r8
    2bde:	0e 94 fd 19 	call	0x33fa	; 0x33fa <__udivmodsi4>
    2be2:	f9 01       	movw	r30, r18
    2be4:	ca 01       	movw	r24, r20
    2be6:	6a 30       	cpi	r22, 0x0A	; 10
    2be8:	0c f5       	brge	.+66     	; 0x2c2c <Print::printNumber(unsigned long, unsigned char)+0x94>
    2bea:	60 5d       	subi	r22, 0xD0	; 208
    2bec:	d8 01       	movw	r26, r16
    2bee:	6e 93       	st	-X, r22
    2bf0:	8d 01       	movw	r16, r26
    2bf2:	23 2b       	or	r18, r19
    2bf4:	24 2b       	or	r18, r20
    2bf6:	25 2b       	or	r18, r21
    2bf8:	79 f7       	brne	.-34     	; 0x2bd8 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    2bfa:	90 e0       	ldi	r25, 0x00	; 0
    2bfc:	80 e0       	ldi	r24, 0x00	; 0
    2bfe:	10 97       	sbiw	r26, 0x00	; 0
    2c00:	21 f0       	breq	.+8      	; 0x2c0a <Print::printNumber(unsigned long, unsigned char)+0x72>
    2c02:	bd 01       	movw	r22, r26
    2c04:	c7 01       	movw	r24, r14
    2c06:	0e 94 5d 15 	call	0x2aba	; 0x2aba <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    2c0a:	a1 96       	adiw	r28, 0x21	; 33
    2c0c:	0f b6       	in	r0, 0x3f	; 63
    2c0e:	f8 94       	cli
    2c10:	de bf       	out	0x3e, r29	; 62
    2c12:	0f be       	out	0x3f, r0	; 63
    2c14:	cd bf       	out	0x3d, r28	; 61
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	1f 91       	pop	r17
    2c1c:	0f 91       	pop	r16
    2c1e:	ff 90       	pop	r15
    2c20:	ef 90       	pop	r14
    2c22:	bf 90       	pop	r11
    2c24:	af 90       	pop	r10
    2c26:	9f 90       	pop	r9
    2c28:	8f 90       	pop	r8
    2c2a:	08 95       	ret
    2c2c:	69 5c       	subi	r22, 0xC9	; 201
    2c2e:	de cf       	rjmp	.-68     	; 0x2bec <Print::printNumber(unsigned long, unsigned char)+0x54>

00002c30 <Print::print(long, int)>:
_ZN5Print5printEli():
    2c30:	cf 92       	push	r12
    2c32:	df 92       	push	r13
    2c34:	ef 92       	push	r14
    2c36:	ff 92       	push	r15
    2c38:	0f 93       	push	r16
    2c3a:	1f 93       	push	r17
    2c3c:	cf 93       	push	r28
    2c3e:	df 93       	push	r29
    2c40:	21 15       	cp	r18, r1
    2c42:	31 05       	cpc	r19, r1
    2c44:	81 f4       	brne	.+32     	; 0x2c66 <Print::print(long, int)+0x36>
    2c46:	dc 01       	movw	r26, r24
    2c48:	ed 91       	ld	r30, X+
    2c4a:	fc 91       	ld	r31, X
    2c4c:	01 90       	ld	r0, Z+
    2c4e:	f0 81       	ld	r31, Z
    2c50:	e0 2d       	mov	r30, r0
    2c52:	64 2f       	mov	r22, r20
    2c54:	df 91       	pop	r29
    2c56:	cf 91       	pop	r28
    2c58:	1f 91       	pop	r17
    2c5a:	0f 91       	pop	r16
    2c5c:	ff 90       	pop	r15
    2c5e:	ef 90       	pop	r14
    2c60:	df 90       	pop	r13
    2c62:	cf 90       	pop	r12
    2c64:	09 94       	ijmp
    2c66:	2a 30       	cpi	r18, 0x0A	; 10
    2c68:	31 05       	cpc	r19, r1
    2c6a:	01 f5       	brne	.+64     	; 0x2cac <Print::print(long, int)+0x7c>
    2c6c:	2a e0       	ldi	r18, 0x0A	; 10
    2c6e:	77 ff       	sbrs	r23, 7
    2c70:	1d c0       	rjmp	.+58     	; 0x2cac <Print::print(long, int)+0x7c>
    2c72:	6a 01       	movw	r12, r20
    2c74:	7b 01       	movw	r14, r22
    2c76:	ec 01       	movw	r28, r24
    2c78:	6d e2       	ldi	r22, 0x2D	; 45
    2c7a:	0e 94 98 15 	call	0x2b30	; 0x2b30 <Print::print(char)>
    2c7e:	8c 01       	movw	r16, r24
    2c80:	44 27       	eor	r20, r20
    2c82:	55 27       	eor	r21, r21
    2c84:	ba 01       	movw	r22, r20
    2c86:	4c 19       	sub	r20, r12
    2c88:	5d 09       	sbc	r21, r13
    2c8a:	6e 09       	sbc	r22, r14
    2c8c:	7f 09       	sbc	r23, r15
    2c8e:	2a e0       	ldi	r18, 0x0A	; 10
    2c90:	ce 01       	movw	r24, r28
    2c92:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <Print::printNumber(unsigned long, unsigned char)>
    2c96:	80 0f       	add	r24, r16
    2c98:	91 1f       	adc	r25, r17
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	1f 91       	pop	r17
    2ca0:	0f 91       	pop	r16
    2ca2:	ff 90       	pop	r15
    2ca4:	ef 90       	pop	r14
    2ca6:	df 90       	pop	r13
    2ca8:	cf 90       	pop	r12
    2caa:	08 95       	ret
    2cac:	df 91       	pop	r29
    2cae:	cf 91       	pop	r28
    2cb0:	1f 91       	pop	r17
    2cb2:	0f 91       	pop	r16
    2cb4:	ff 90       	pop	r15
    2cb6:	ef 90       	pop	r14
    2cb8:	df 90       	pop	r13
    2cba:	cf 90       	pop	r12
    2cbc:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <Print::printNumber(unsigned long, unsigned char)>

00002cc0 <Print::print(int, int)>:
_ZN5Print5printEii():
    2cc0:	9a 01       	movw	r18, r20
    2cc2:	ab 01       	movw	r20, r22
    2cc4:	77 0f       	add	r23, r23
    2cc6:	66 0b       	sbc	r22, r22
    2cc8:	77 0b       	sbc	r23, r23
    2cca:	0c 94 18 16 	jmp	0x2c30	; 0x2c30 <Print::print(long, int)>

00002cce <Print::println(int, int)>:
_ZN5Print7printlnEii():
    2cce:	0f 93       	push	r16
    2cd0:	1f 93       	push	r17
    2cd2:	cf 93       	push	r28
    2cd4:	df 93       	push	r29
    2cd6:	ec 01       	movw	r28, r24
    2cd8:	0e 94 60 16 	call	0x2cc0	; 0x2cc0 <Print::print(int, int)>
    2cdc:	8c 01       	movw	r16, r24
    2cde:	ce 01       	movw	r24, r28
    2ce0:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <Print::println()>
    2ce4:	80 0f       	add	r24, r16
    2ce6:	91 1f       	adc	r25, r17
    2ce8:	df 91       	pop	r29
    2cea:	cf 91       	pop	r28
    2cec:	1f 91       	pop	r17
    2cee:	0f 91       	pop	r16
    2cf0:	08 95       	ret

00002cf2 <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    2cf2:	21 15       	cp	r18, r1
    2cf4:	31 05       	cpc	r19, r1
    2cf6:	41 f4       	brne	.+16     	; 0x2d08 <Print::print(unsigned long, int)+0x16>
    2cf8:	dc 01       	movw	r26, r24
    2cfa:	ed 91       	ld	r30, X+
    2cfc:	fc 91       	ld	r31, X
    2cfe:	01 90       	ld	r0, Z+
    2d00:	f0 81       	ld	r31, Z
    2d02:	e0 2d       	mov	r30, r0
    2d04:	64 2f       	mov	r22, r20
    2d06:	09 94       	ijmp
    2d08:	0c 94 cc 15 	jmp	0x2b98	; 0x2b98 <Print::printNumber(unsigned long, unsigned char)>

00002d0c <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
    2d0c:	9a 01       	movw	r18, r20
    2d0e:	46 2f       	mov	r20, r22
    2d10:	50 e0       	ldi	r21, 0x00	; 0
    2d12:	70 e0       	ldi	r23, 0x00	; 0
    2d14:	60 e0       	ldi	r22, 0x00	; 0
    2d16:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <Print::print(unsigned long, int)>

00002d1a <Print::println(unsigned char, int)>:
_ZN5Print7printlnEhi():
    2d1a:	0f 93       	push	r16
    2d1c:	1f 93       	push	r17
    2d1e:	cf 93       	push	r28
    2d20:	df 93       	push	r29
    2d22:	ec 01       	movw	r28, r24
    2d24:	0e 94 86 16 	call	0x2d0c	; 0x2d0c <Print::print(unsigned char, int)>
    2d28:	8c 01       	movw	r16, r24
    2d2a:	ce 01       	movw	r24, r28
    2d2c:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <Print::println()>
    2d30:	80 0f       	add	r24, r16
    2d32:	91 1f       	adc	r25, r17
    2d34:	df 91       	pop	r29
    2d36:	cf 91       	pop	r28
    2d38:	1f 91       	pop	r17
    2d3a:	0f 91       	pop	r16
    2d3c:	08 95       	ret

00002d3e <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
    2d3e:	9a 01       	movw	r18, r20
    2d40:	ab 01       	movw	r20, r22
    2d42:	70 e0       	ldi	r23, 0x00	; 0
    2d44:	60 e0       	ldi	r22, 0x00	; 0
    2d46:	0c 94 79 16 	jmp	0x2cf2	; 0x2cf2 <Print::print(unsigned long, int)>

00002d4a <Print::println(unsigned long, int)>:
_ZN5Print7printlnEmi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:181
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    2d4a:	0f 93       	push	r16
    2d4c:	1f 93       	push	r17
    2d4e:	cf 93       	push	r28
    2d50:	df 93       	push	r29
    2d52:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:182
  size_t n = print(num, base);
    2d54:	0e 94 79 16 	call	0x2cf2	; 0x2cf2 <Print::print(unsigned long, int)>
    2d58:	8c 01       	movw	r16, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:183
  n += println();
    2d5a:	ce 01       	movw	r24, r28
    2d5c:	0e 94 9f 15 	call	0x2b3e	; 0x2b3e <Print::println()>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
  return n;
}
    2d60:	80 0f       	add	r24, r16
    2d62:	91 1f       	adc	r25, r17
    2d64:	df 91       	pop	r29
    2d66:	cf 91       	pop	r28
    2d68:	1f 91       	pop	r17
    2d6a:	0f 91       	pop	r16
    2d6c:	08 95       	ret

00002d6e <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2d6e:	2f 92       	push	r2
    2d70:	3f 92       	push	r3
    2d72:	4f 92       	push	r4
    2d74:	5f 92       	push	r5
    2d76:	6f 92       	push	r6
    2d78:	7f 92       	push	r7
    2d7a:	8f 92       	push	r8
    2d7c:	9f 92       	push	r9
    2d7e:	af 92       	push	r10
    2d80:	bf 92       	push	r11
    2d82:	cf 92       	push	r12
    2d84:	df 92       	push	r13
    2d86:	ef 92       	push	r14
    2d88:	ff 92       	push	r15
    2d8a:	1f 93       	push	r17
    2d8c:	cf 93       	push	r28
    2d8e:	df 93       	push	r29
    2d90:	ec 01       	movw	r28, r24
    2d92:	6a 01       	movw	r12, r20
    2d94:	7b 01       	movw	r14, r22
    2d96:	72 2e       	mov	r7, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2d98:	ab 01       	movw	r20, r22
    2d9a:	96 01       	movw	r18, r12
    2d9c:	cb 01       	movw	r24, r22
    2d9e:	b6 01       	movw	r22, r12
    2da0:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <__unordsf2>
_ZN5Print5writeEPKc():
    2da4:	63 ee       	ldi	r22, 0xE3	; 227
    2da6:	73 e0       	ldi	r23, 0x03	; 3
_ZN5Print10printFloatEdh():
    2da8:	81 11       	cpse	r24, r1
    2daa:	26 c0       	rjmp	.+76     	; 0x2df8 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    2dac:	46 01       	movw	r8, r12
    2dae:	57 01       	movw	r10, r14
    2db0:	e8 94       	clt
    2db2:	b7 f8       	bld	r11, 7
    2db4:	2f ef       	ldi	r18, 0xFF	; 255
    2db6:	3f ef       	ldi	r19, 0xFF	; 255
    2db8:	4f e7       	ldi	r20, 0x7F	; 127
    2dba:	5f e7       	ldi	r21, 0x7F	; 127
    2dbc:	c5 01       	movw	r24, r10
    2dbe:	b4 01       	movw	r22, r8
    2dc0:	0e 94 e4 19 	call	0x33c8	; 0x33c8 <__unordsf2>
    2dc4:	81 11       	cpse	r24, r1
    2dc6:	0c c0       	rjmp	.+24     	; 0x2de0 <Print::printFloat(double, unsigned char)+0x72>
    2dc8:	2f ef       	ldi	r18, 0xFF	; 255
    2dca:	3f ef       	ldi	r19, 0xFF	; 255
    2dcc:	4f e7       	ldi	r20, 0x7F	; 127
    2dce:	5f e7       	ldi	r21, 0x7F	; 127
    2dd0:	c5 01       	movw	r24, r10
    2dd2:	b4 01       	movw	r22, r8
    2dd4:	0e 94 1a 18 	call	0x3034	; 0x3034 <__cmpsf2>
_ZN5Print5writeEPKc():
    2dd8:	67 ee       	ldi	r22, 0xE7	; 231
    2dda:	73 e0       	ldi	r23, 0x03	; 3
_ZN5Print10printFloatEdh():
    2ddc:	18 16       	cp	r1, r24
    2dde:	64 f0       	brlt	.+24     	; 0x2df8 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2de0:	2f ef       	ldi	r18, 0xFF	; 255
    2de2:	3f ef       	ldi	r19, 0xFF	; 255
    2de4:	4f e7       	ldi	r20, 0x7F	; 127
    2de6:	5f e4       	ldi	r21, 0x4F	; 79
    2de8:	c7 01       	movw	r24, r14
    2dea:	b6 01       	movw	r22, r12
    2dec:	0e 94 72 19 	call	0x32e4	; 0x32e4 <__gesf2>
    2df0:	18 16       	cp	r1, r24
    2df2:	b4 f4       	brge	.+44     	; 0x2e20 <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
    2df4:	6b ee       	ldi	r22, 0xEB	; 235
    2df6:	73 e0       	ldi	r23, 0x03	; 3
    2df8:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2dfa:	df 91       	pop	r29
    2dfc:	cf 91       	pop	r28
    2dfe:	1f 91       	pop	r17
    2e00:	ff 90       	pop	r15
    2e02:	ef 90       	pop	r14
    2e04:	df 90       	pop	r13
    2e06:	cf 90       	pop	r12
    2e08:	bf 90       	pop	r11
    2e0a:	af 90       	pop	r10
    2e0c:	9f 90       	pop	r9
    2e0e:	8f 90       	pop	r8
    2e10:	7f 90       	pop	r7
    2e12:	6f 90       	pop	r6
    2e14:	5f 90       	pop	r5
    2e16:	4f 90       	pop	r4
    2e18:	3f 90       	pop	r3
    2e1a:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
    2e1c:	0c 94 5d 15 	jmp	0x2aba	; 0x2aba <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2e20:	2f ef       	ldi	r18, 0xFF	; 255
    2e22:	3f ef       	ldi	r19, 0xFF	; 255
    2e24:	4f e7       	ldi	r20, 0x7F	; 127
    2e26:	5f ec       	ldi	r21, 0xCF	; 207
    2e28:	c7 01       	movw	r24, r14
    2e2a:	b6 01       	movw	r22, r12
    2e2c:	0e 94 1a 18 	call	0x3034	; 0x3034 <__cmpsf2>
    2e30:	87 fd       	sbrc	r24, 7
    2e32:	e0 cf       	rjmp	.-64     	; 0x2df4 <Print::printFloat(double, unsigned char)+0x86>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    2e34:	20 e0       	ldi	r18, 0x00	; 0
    2e36:	30 e0       	ldi	r19, 0x00	; 0
    2e38:	a9 01       	movw	r20, r18
    2e3a:	c7 01       	movw	r24, r14
    2e3c:	b6 01       	movw	r22, r12
    2e3e:	0e 94 1a 18 	call	0x3034	; 0x3034 <__cmpsf2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2e42:	31 2c       	mov	r3, r1
    2e44:	21 2c       	mov	r2, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    2e46:	87 ff       	sbrs	r24, 7
    2e48:	09 c0       	rjmp	.+18     	; 0x2e5c <Print::printFloat(double, unsigned char)+0xee>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
    2e4a:	6d e2       	ldi	r22, 0x2D	; 45
    2e4c:	ce 01       	movw	r24, r28
    2e4e:	0e 94 98 15 	call	0x2b30	; 0x2b30 <Print::print(char)>
    2e52:	1c 01       	movw	r2, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
    2e54:	f7 fa       	bst	r15, 7
    2e56:	f0 94       	com	r15
    2e58:	f7 f8       	bld	r15, 7
    2e5a:	f0 94       	com	r15
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2e5c:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2e5e:	60 e0       	ldi	r22, 0x00	; 0
    2e60:	70 e0       	ldi	r23, 0x00	; 0
    2e62:	80 e0       	ldi	r24, 0x00	; 0
    2e64:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    2e66:	71 16       	cp	r7, r17
    2e68:	41 f0       	breq	.+16     	; 0x2e7a <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    2e6a:	20 e0       	ldi	r18, 0x00	; 0
    2e6c:	30 e0       	ldi	r19, 0x00	; 0
    2e6e:	40 e2       	ldi	r20, 0x20	; 32
    2e70:	51 e4       	ldi	r21, 0x41	; 65
    2e72:	0e 94 1f 18 	call	0x303e	; 0x303e <__divsf3>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2e76:	1f 5f       	subi	r17, 0xFF	; 255
    2e78:	f6 cf       	rjmp	.-20     	; 0x2e66 <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    2e7a:	a7 01       	movw	r20, r14
    2e7c:	96 01       	movw	r18, r12
    2e7e:	0e 94 ae 17 	call	0x2f5c	; 0x2f5c <__addsf3>
    2e82:	2b 01       	movw	r4, r22
    2e84:	3c 01       	movw	r6, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2e86:	0e 94 91 18 	call	0x3122	; 0x3122 <__fixunssfsi>
    2e8a:	4b 01       	movw	r8, r22
    2e8c:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2e8e:	2a e0       	ldi	r18, 0x0A	; 10
    2e90:	bc 01       	movw	r22, r24
    2e92:	a4 01       	movw	r20, r8
    2e94:	ce 01       	movw	r24, r28
    2e96:	0e 94 cc 15 	call	0x2b98	; 0x2b98 <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2e9a:	7c 01       	movw	r14, r24
    2e9c:	e2 0c       	add	r14, r2
    2e9e:	f3 1c       	adc	r15, r3
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2ea0:	11 23       	and	r17, r17
    2ea2:	b1 f1       	breq	.+108    	; 0x2f10 <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2ea4:	c5 01       	movw	r24, r10
    2ea6:	b4 01       	movw	r22, r8
    2ea8:	0e 94 c0 18 	call	0x3180	; 0x3180 <__floatunsisf>
    2eac:	9b 01       	movw	r18, r22
    2eae:	ac 01       	movw	r20, r24
    2eb0:	c3 01       	movw	r24, r6
    2eb2:	b2 01       	movw	r22, r4
    2eb4:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__subsf3>
    2eb8:	4b 01       	movw	r8, r22
    2eba:	5c 01       	movw	r10, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2ebc:	6e e2       	ldi	r22, 0x2E	; 46
    2ebe:	ce 01       	movw	r24, r28
    2ec0:	0e 94 98 15 	call	0x2b30	; 0x2b30 <Print::print(char)>
    2ec4:	e8 0e       	add	r14, r24
    2ec6:	f9 1e       	adc	r15, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2ec8:	11 50       	subi	r17, 0x01	; 1
    2eca:	10 f1       	brcs	.+68     	; 0x2f10 <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    2ecc:	20 e0       	ldi	r18, 0x00	; 0
    2ece:	30 e0       	ldi	r19, 0x00	; 0
    2ed0:	40 e2       	ldi	r20, 0x20	; 32
    2ed2:	51 e4       	ldi	r21, 0x41	; 65
    2ed4:	c5 01       	movw	r24, r10
    2ed6:	b4 01       	movw	r22, r8
    2ed8:	0e 94 77 19 	call	0x32ee	; 0x32ee <__mulsf3>
    2edc:	2b 01       	movw	r4, r22
    2ede:	3c 01       	movw	r6, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    2ee0:	0e 94 91 18 	call	0x3122	; 0x3122 <__fixunssfsi>
    2ee4:	4b 01       	movw	r8, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    2ee6:	4a e0       	ldi	r20, 0x0A	; 10
    2ee8:	50 e0       	ldi	r21, 0x00	; 0
    2eea:	ce 01       	movw	r24, r28
    2eec:	0e 94 9f 16 	call	0x2d3e	; 0x2d3e <Print::print(unsigned int, int)>
    2ef0:	e8 0e       	add	r14, r24
    2ef2:	f9 1e       	adc	r15, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    2ef4:	b4 01       	movw	r22, r8
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	80 e0       	ldi	r24, 0x00	; 0
    2efa:	0e 94 c0 18 	call	0x3180	; 0x3180 <__floatunsisf>
    2efe:	9b 01       	movw	r18, r22
    2f00:	ac 01       	movw	r20, r24
    2f02:	c3 01       	movw	r24, r6
    2f04:	b2 01       	movw	r22, r4
    2f06:	0e 94 ad 17 	call	0x2f5a	; 0x2f5a <__subsf3>
    2f0a:	4b 01       	movw	r8, r22
    2f0c:	5c 01       	movw	r10, r24
    2f0e:	dc cf       	rjmp	.-72     	; 0x2ec8 <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    2f10:	c7 01       	movw	r24, r14
    2f12:	df 91       	pop	r29
    2f14:	cf 91       	pop	r28
    2f16:	1f 91       	pop	r17
    2f18:	ff 90       	pop	r15
    2f1a:	ef 90       	pop	r14
    2f1c:	df 90       	pop	r13
    2f1e:	cf 90       	pop	r12
    2f20:	bf 90       	pop	r11
    2f22:	af 90       	pop	r10
    2f24:	9f 90       	pop	r9
    2f26:	8f 90       	pop	r8
    2f28:	7f 90       	pop	r7
    2f2a:	6f 90       	pop	r6
    2f2c:	5f 90       	pop	r5
    2f2e:	4f 90       	pop	r4
    2f30:	3f 90       	pop	r3
    2f32:	2f 90       	pop	r2
    2f34:	08 95       	ret

00002f36 <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2f36:	0c 94 b7 16 	jmp	0x2d6e	; 0x2d6e <Print::printFloat(double, unsigned char)>

00002f3a <initVariant>:
initVariant():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2f3a:	08 95       	ret

00002f3c <main>:
main():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    2f3c:	0e 94 2b 12 	call	0x2456	; 0x2456 <init>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    2f40:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <initVariant>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    2f44:	0e 94 9c 07 	call	0xf38	; 0xf38 <setup>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    2f48:	ce e9       	ldi	r28, 0x9E	; 158
    2f4a:	d3 e1       	ldi	r29, 0x13	; 19
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    2f4c:	0e 94 f4 08 	call	0x11e8	; 0x11e8 <loop>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    2f50:	20 97       	sbiw	r28, 0x00	; 0
    2f52:	e1 f3       	breq	.-8      	; 0x2f4c <main+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    2f54:	0e 94 9e 13 	call	0x273c	; 0x273c <serialEventRun()>
    2f58:	f9 cf       	rjmp	.-14     	; 0x2f4c <main+0x10>

00002f5a <__subsf3>:
__subsf3():
    2f5a:	50 58       	subi	r21, 0x80	; 128

00002f5c <__addsf3>:
    2f5c:	bb 27       	eor	r27, r27
    2f5e:	aa 27       	eor	r26, r26
    2f60:	0e 94 c5 17 	call	0x2f8a	; 0x2f8a <__addsf3x>
    2f64:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__fp_round>
__addsf3():
    2f68:	0e 94 2a 19 	call	0x3254	; 0x3254 <__fp_pscA>
    2f6c:	38 f0       	brcs	.+14     	; 0x2f7c <__addsf3+0x20>
    2f6e:	0e 94 31 19 	call	0x3262	; 0x3262 <__fp_pscB>
    2f72:	20 f0       	brcs	.+8      	; 0x2f7c <__addsf3+0x20>
    2f74:	39 f4       	brne	.+14     	; 0x2f84 <__addsf3+0x28>
    2f76:	9f 3f       	cpi	r25, 0xFF	; 255
    2f78:	19 f4       	brne	.+6      	; 0x2f80 <__addsf3+0x24>
    2f7a:	26 f4       	brtc	.+8      	; 0x2f84 <__addsf3+0x28>
    2f7c:	0c 94 27 19 	jmp	0x324e	; 0x324e <__fp_nan>
    2f80:	0e f4       	brtc	.+2      	; 0x2f84 <__addsf3+0x28>
    2f82:	e0 95       	com	r30
    2f84:	e7 fb       	bst	r30, 7
    2f86:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__fp_inf>

00002f8a <__addsf3x>:
__addsf3x():
    2f8a:	e9 2f       	mov	r30, r25
    2f8c:	0e 94 49 19 	call	0x3292	; 0x3292 <__fp_split3>
    2f90:	58 f3       	brcs	.-42     	; 0x2f68 <__addsf3+0xc>
    2f92:	ba 17       	cp	r27, r26
    2f94:	62 07       	cpc	r22, r18
    2f96:	73 07       	cpc	r23, r19
    2f98:	84 07       	cpc	r24, r20
    2f9a:	95 07       	cpc	r25, r21
    2f9c:	20 f0       	brcs	.+8      	; 0x2fa6 <__addsf3x+0x1c>
    2f9e:	79 f4       	brne	.+30     	; 0x2fbe <__addsf3x+0x34>
    2fa0:	a6 f5       	brtc	.+104    	; 0x300a <__addsf3x+0x80>
    2fa2:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__fp_zero>
    2fa6:	0e f4       	brtc	.+2      	; 0x2faa <__addsf3x+0x20>
    2fa8:	e0 95       	com	r30
    2faa:	0b 2e       	mov	r0, r27
    2fac:	ba 2f       	mov	r27, r26
    2fae:	a0 2d       	mov	r26, r0
    2fb0:	0b 01       	movw	r0, r22
    2fb2:	b9 01       	movw	r22, r18
    2fb4:	90 01       	movw	r18, r0
    2fb6:	0c 01       	movw	r0, r24
    2fb8:	ca 01       	movw	r24, r20
    2fba:	a0 01       	movw	r20, r0
    2fbc:	11 24       	eor	r1, r1
    2fbe:	ff 27       	eor	r31, r31
    2fc0:	59 1b       	sub	r21, r25
    2fc2:	99 f0       	breq	.+38     	; 0x2fea <__addsf3x+0x60>
    2fc4:	59 3f       	cpi	r21, 0xF9	; 249
    2fc6:	50 f4       	brcc	.+20     	; 0x2fdc <__addsf3x+0x52>
    2fc8:	50 3e       	cpi	r21, 0xE0	; 224
    2fca:	68 f1       	brcs	.+90     	; 0x3026 <__addsf3x+0x9c>
    2fcc:	1a 16       	cp	r1, r26
    2fce:	f0 40       	sbci	r31, 0x00	; 0
    2fd0:	a2 2f       	mov	r26, r18
    2fd2:	23 2f       	mov	r18, r19
    2fd4:	34 2f       	mov	r19, r20
    2fd6:	44 27       	eor	r20, r20
    2fd8:	58 5f       	subi	r21, 0xF8	; 248
    2fda:	f3 cf       	rjmp	.-26     	; 0x2fc2 <__addsf3x+0x38>
    2fdc:	46 95       	lsr	r20
    2fde:	37 95       	ror	r19
    2fe0:	27 95       	ror	r18
    2fe2:	a7 95       	ror	r26
    2fe4:	f0 40       	sbci	r31, 0x00	; 0
    2fe6:	53 95       	inc	r21
    2fe8:	c9 f7       	brne	.-14     	; 0x2fdc <__addsf3x+0x52>
    2fea:	7e f4       	brtc	.+30     	; 0x300a <__addsf3x+0x80>
    2fec:	1f 16       	cp	r1, r31
    2fee:	ba 0b       	sbc	r27, r26
    2ff0:	62 0b       	sbc	r22, r18
    2ff2:	73 0b       	sbc	r23, r19
    2ff4:	84 0b       	sbc	r24, r20
    2ff6:	ba f0       	brmi	.+46     	; 0x3026 <__addsf3x+0x9c>
    2ff8:	91 50       	subi	r25, 0x01	; 1
    2ffa:	a1 f0       	breq	.+40     	; 0x3024 <__addsf3x+0x9a>
    2ffc:	ff 0f       	add	r31, r31
    2ffe:	bb 1f       	adc	r27, r27
    3000:	66 1f       	adc	r22, r22
    3002:	77 1f       	adc	r23, r23
    3004:	88 1f       	adc	r24, r24
    3006:	c2 f7       	brpl	.-16     	; 0x2ff8 <__addsf3x+0x6e>
    3008:	0e c0       	rjmp	.+28     	; 0x3026 <__addsf3x+0x9c>
    300a:	ba 0f       	add	r27, r26
    300c:	62 1f       	adc	r22, r18
    300e:	73 1f       	adc	r23, r19
    3010:	84 1f       	adc	r24, r20
    3012:	48 f4       	brcc	.+18     	; 0x3026 <__addsf3x+0x9c>
    3014:	87 95       	ror	r24
    3016:	77 95       	ror	r23
    3018:	67 95       	ror	r22
    301a:	b7 95       	ror	r27
    301c:	f7 95       	ror	r31
    301e:	9e 3f       	cpi	r25, 0xFE	; 254
    3020:	08 f0       	brcs	.+2      	; 0x3024 <__addsf3x+0x9a>
    3022:	b0 cf       	rjmp	.-160    	; 0x2f84 <__addsf3+0x28>
    3024:	93 95       	inc	r25
    3026:	88 0f       	add	r24, r24
    3028:	08 f0       	brcs	.+2      	; 0x302c <__addsf3x+0xa2>
    302a:	99 27       	eor	r25, r25
    302c:	ee 0f       	add	r30, r30
    302e:	97 95       	ror	r25
    3030:	87 95       	ror	r24
    3032:	08 95       	ret

00003034 <__cmpsf2>:
    3034:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__fp_cmp>
    3038:	08 f4       	brcc	.+2      	; 0x303c <__cmpsf2+0x8>
    303a:	81 e0       	ldi	r24, 0x01	; 1
    303c:	08 95       	ret

0000303e <__divsf3>:
    303e:	0e 94 33 18 	call	0x3066	; 0x3066 <__divsf3x>
    3042:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__fp_round>
    3046:	0e 94 31 19 	call	0x3262	; 0x3262 <__fp_pscB>
    304a:	58 f0       	brcs	.+22     	; 0x3062 <__divsf3+0x24>
    304c:	0e 94 2a 19 	call	0x3254	; 0x3254 <__fp_pscA>
    3050:	40 f0       	brcs	.+16     	; 0x3062 <__divsf3+0x24>
    3052:	29 f4       	brne	.+10     	; 0x305e <__divsf3+0x20>
    3054:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    3056:	29 f0       	breq	.+10     	; 0x3062 <__divsf3+0x24>
    3058:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__fp_inf>
    305c:	51 11       	cpse	r21, r1
    305e:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <__fp_szero>
    3062:	0c 94 27 19 	jmp	0x324e	; 0x324e <__fp_nan>

00003066 <__divsf3x>:
__divsf3x():
    3066:	0e 94 49 19 	call	0x3292	; 0x3292 <__fp_split3>
    306a:	68 f3       	brcs	.-38     	; 0x3046 <__divsf3+0x8>

0000306c <__divsf3_pse>:
    306c:	99 23       	and	r25, r25
    306e:	b1 f3       	breq	.-20     	; 0x305c <__divsf3+0x1e>
    3070:	55 23       	and	r21, r21
    3072:	91 f3       	breq	.-28     	; 0x3058 <__divsf3+0x1a>
    3074:	95 1b       	sub	r25, r21
    3076:	55 0b       	sbc	r21, r21
    3078:	bb 27       	eor	r27, r27
    307a:	aa 27       	eor	r26, r26
    307c:	62 17       	cp	r22, r18
    307e:	73 07       	cpc	r23, r19
    3080:	84 07       	cpc	r24, r20
    3082:	38 f0       	brcs	.+14     	; 0x3092 <__divsf3_pse+0x26>
    3084:	9f 5f       	subi	r25, 0xFF	; 255
    3086:	5f 4f       	sbci	r21, 0xFF	; 255
    3088:	22 0f       	add	r18, r18
    308a:	33 1f       	adc	r19, r19
    308c:	44 1f       	adc	r20, r20
    308e:	aa 1f       	adc	r26, r26
    3090:	a9 f3       	breq	.-22     	; 0x307c <__divsf3_pse+0x10>
    3092:	35 d0       	rcall	.+106    	; 0x30fe <__divsf3_pse+0x92>
    3094:	0e 2e       	mov	r0, r30
    3096:	3a f0       	brmi	.+14     	; 0x30a6 <__divsf3_pse+0x3a>
    3098:	e0 e8       	ldi	r30, 0x80	; 128
    309a:	32 d0       	rcall	.+100    	; 0x3100 <__divsf3_pse+0x94>
    309c:	91 50       	subi	r25, 0x01	; 1
    309e:	50 40       	sbci	r21, 0x00	; 0
    30a0:	e6 95       	lsr	r30
    30a2:	00 1c       	adc	r0, r0
    30a4:	ca f7       	brpl	.-14     	; 0x3098 <__divsf3_pse+0x2c>
    30a6:	2b d0       	rcall	.+86     	; 0x30fe <__divsf3_pse+0x92>
    30a8:	fe 2f       	mov	r31, r30
    30aa:	29 d0       	rcall	.+82     	; 0x30fe <__divsf3_pse+0x92>
    30ac:	66 0f       	add	r22, r22
    30ae:	77 1f       	adc	r23, r23
    30b0:	88 1f       	adc	r24, r24
    30b2:	bb 1f       	adc	r27, r27
    30b4:	26 17       	cp	r18, r22
    30b6:	37 07       	cpc	r19, r23
    30b8:	48 07       	cpc	r20, r24
    30ba:	ab 07       	cpc	r26, r27
    30bc:	b0 e8       	ldi	r27, 0x80	; 128
    30be:	09 f0       	breq	.+2      	; 0x30c2 <__divsf3_pse+0x56>
    30c0:	bb 0b       	sbc	r27, r27
    30c2:	80 2d       	mov	r24, r0
    30c4:	bf 01       	movw	r22, r30
    30c6:	ff 27       	eor	r31, r31
    30c8:	93 58       	subi	r25, 0x83	; 131
    30ca:	5f 4f       	sbci	r21, 0xFF	; 255
    30cc:	3a f0       	brmi	.+14     	; 0x30dc <__divsf3_pse+0x70>
    30ce:	9e 3f       	cpi	r25, 0xFE	; 254
    30d0:	51 05       	cpc	r21, r1
    30d2:	78 f0       	brcs	.+30     	; 0x30f2 <__divsf3_pse+0x86>
    30d4:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__fp_inf>
    30d8:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <__fp_szero>
    30dc:	5f 3f       	cpi	r21, 0xFF	; 255
    30de:	e4 f3       	brlt	.-8      	; 0x30d8 <__divsf3_pse+0x6c>
    30e0:	98 3e       	cpi	r25, 0xE8	; 232
    30e2:	d4 f3       	brlt	.-12     	; 0x30d8 <__divsf3_pse+0x6c>
    30e4:	86 95       	lsr	r24
    30e6:	77 95       	ror	r23
    30e8:	67 95       	ror	r22
    30ea:	b7 95       	ror	r27
    30ec:	f7 95       	ror	r31
    30ee:	9f 5f       	subi	r25, 0xFF	; 255
    30f0:	c9 f7       	brne	.-14     	; 0x30e4 <__divsf3_pse+0x78>
    30f2:	88 0f       	add	r24, r24
    30f4:	91 1d       	adc	r25, r1
    30f6:	96 95       	lsr	r25
    30f8:	87 95       	ror	r24
    30fa:	97 f9       	bld	r25, 7
    30fc:	08 95       	ret
    30fe:	e1 e0       	ldi	r30, 0x01	; 1
    3100:	66 0f       	add	r22, r22
    3102:	77 1f       	adc	r23, r23
    3104:	88 1f       	adc	r24, r24
    3106:	bb 1f       	adc	r27, r27
    3108:	62 17       	cp	r22, r18
    310a:	73 07       	cpc	r23, r19
    310c:	84 07       	cpc	r24, r20
    310e:	ba 07       	cpc	r27, r26
    3110:	20 f0       	brcs	.+8      	; 0x311a <__divsf3_pse+0xae>
    3112:	62 1b       	sub	r22, r18
    3114:	73 0b       	sbc	r23, r19
    3116:	84 0b       	sbc	r24, r20
    3118:	ba 0b       	sbc	r27, r26
    311a:	ee 1f       	adc	r30, r30
    311c:	88 f7       	brcc	.-30     	; 0x3100 <__divsf3_pse+0x94>
    311e:	e0 95       	com	r30
    3120:	08 95       	ret

00003122 <__fixunssfsi>:
    3122:	0e 94 51 19 	call	0x32a2	; 0x32a2 <__fp_splitA>
    3126:	88 f0       	brcs	.+34     	; 0x314a <__fixunssfsi+0x28>
    3128:	9f 57       	subi	r25, 0x7F	; 127
    312a:	98 f0       	brcs	.+38     	; 0x3152 <__fixunssfsi+0x30>
    312c:	b9 2f       	mov	r27, r25
    312e:	99 27       	eor	r25, r25
    3130:	b7 51       	subi	r27, 0x17	; 23
    3132:	b0 f0       	brcs	.+44     	; 0x3160 <__fixunssfsi+0x3e>
    3134:	e1 f0       	breq	.+56     	; 0x316e <__fixunssfsi+0x4c>
    3136:	66 0f       	add	r22, r22
    3138:	77 1f       	adc	r23, r23
    313a:	88 1f       	adc	r24, r24
    313c:	99 1f       	adc	r25, r25
    313e:	1a f0       	brmi	.+6      	; 0x3146 <__fixunssfsi+0x24>
    3140:	ba 95       	dec	r27
__fixunssfsi():
    3142:	c9 f7       	brne	.-14     	; 0x3136 <__fixunssfsi+0x14>
    3144:	14 c0       	rjmp	.+40     	; 0x316e <__fixunssfsi+0x4c>
    3146:	b1 30       	cpi	r27, 0x01	; 1
    3148:	91 f0       	breq	.+36     	; 0x316e <__fixunssfsi+0x4c>
    314a:	0e 94 6b 19 	call	0x32d6	; 0x32d6 <__fp_zero>
    314e:	b1 e0       	ldi	r27, 0x01	; 1
    3150:	08 95       	ret
    3152:	0c 94 6b 19 	jmp	0x32d6	; 0x32d6 <__fp_zero>
    3156:	67 2f       	mov	r22, r23
    3158:	78 2f       	mov	r23, r24
    315a:	88 27       	eor	r24, r24
    315c:	b8 5f       	subi	r27, 0xF8	; 248
    315e:	39 f0       	breq	.+14     	; 0x316e <__fixunssfsi+0x4c>
    3160:	b9 3f       	cpi	r27, 0xF9	; 249
    3162:	cc f3       	brlt	.-14     	; 0x3156 <__fixunssfsi+0x34>
    3164:	86 95       	lsr	r24
    3166:	77 95       	ror	r23
    3168:	67 95       	ror	r22
    316a:	b3 95       	inc	r27
    316c:	d9 f7       	brne	.-10     	; 0x3164 <__fixunssfsi+0x42>
    316e:	3e f4       	brtc	.+14     	; 0x317e <__fixunssfsi+0x5c>
    3170:	90 95       	com	r25
    3172:	80 95       	com	r24
    3174:	70 95       	com	r23
    3176:	61 95       	neg	r22
    3178:	7f 4f       	sbci	r23, 0xFF	; 255
    317a:	8f 4f       	sbci	r24, 0xFF	; 255
    317c:	9f 4f       	sbci	r25, 0xFF	; 255
    317e:	08 95       	ret

00003180 <__floatunsisf>:
__floatunsisf():
    3180:	e8 94       	clt
    3182:	09 c0       	rjmp	.+18     	; 0x3196 <__floatsisf+0x12>

00003184 <__floatsisf>:
    3184:	97 fb       	bst	r25, 7
    3186:	3e f4       	brtc	.+14     	; 0x3196 <__floatsisf+0x12>
    3188:	90 95       	com	r25
    318a:	80 95       	com	r24
    318c:	70 95       	com	r23
    318e:	61 95       	neg	r22
    3190:	7f 4f       	sbci	r23, 0xFF	; 255
    3192:	8f 4f       	sbci	r24, 0xFF	; 255
    3194:	9f 4f       	sbci	r25, 0xFF	; 255
    3196:	99 23       	and	r25, r25
    3198:	a9 f0       	breq	.+42     	; 0x31c4 <__floatsisf+0x40>
    319a:	f9 2f       	mov	r31, r25
    319c:	96 e9       	ldi	r25, 0x96	; 150
    319e:	bb 27       	eor	r27, r27
    31a0:	93 95       	inc	r25
    31a2:	f6 95       	lsr	r31
    31a4:	87 95       	ror	r24
    31a6:	77 95       	ror	r23
    31a8:	67 95       	ror	r22
    31aa:	b7 95       	ror	r27
    31ac:	f1 11       	cpse	r31, r1
    31ae:	f8 cf       	rjmp	.-16     	; 0x31a0 <__floatsisf+0x1c>
    31b0:	fa f4       	brpl	.+62     	; 0x31f0 <__floatsisf+0x6c>
    31b2:	bb 0f       	add	r27, r27
    31b4:	11 f4       	brne	.+4      	; 0x31ba <__floatsisf+0x36>
    31b6:	60 ff       	sbrs	r22, 0
    31b8:	1b c0       	rjmp	.+54     	; 0x31f0 <__floatsisf+0x6c>
    31ba:	6f 5f       	subi	r22, 0xFF	; 255
    31bc:	7f 4f       	sbci	r23, 0xFF	; 255
    31be:	8f 4f       	sbci	r24, 0xFF	; 255
    31c0:	9f 4f       	sbci	r25, 0xFF	; 255
    31c2:	16 c0       	rjmp	.+44     	; 0x31f0 <__floatsisf+0x6c>
    31c4:	88 23       	and	r24, r24
    31c6:	11 f0       	breq	.+4      	; 0x31cc <__floatsisf+0x48>
    31c8:	96 e9       	ldi	r25, 0x96	; 150
    31ca:	11 c0       	rjmp	.+34     	; 0x31ee <__floatsisf+0x6a>
    31cc:	77 23       	and	r23, r23
    31ce:	21 f0       	breq	.+8      	; 0x31d8 <__floatsisf+0x54>
    31d0:	9e e8       	ldi	r25, 0x8E	; 142
    31d2:	87 2f       	mov	r24, r23
    31d4:	76 2f       	mov	r23, r22
    31d6:	05 c0       	rjmp	.+10     	; 0x31e2 <__floatsisf+0x5e>
    31d8:	66 23       	and	r22, r22
    31da:	71 f0       	breq	.+28     	; 0x31f8 <__floatsisf+0x74>
    31dc:	96 e8       	ldi	r25, 0x86	; 134
    31de:	86 2f       	mov	r24, r22
    31e0:	70 e0       	ldi	r23, 0x00	; 0
    31e2:	60 e0       	ldi	r22, 0x00	; 0
    31e4:	2a f0       	brmi	.+10     	; 0x31f0 <__floatsisf+0x6c>
    31e6:	9a 95       	dec	r25
    31e8:	66 0f       	add	r22, r22
    31ea:	77 1f       	adc	r23, r23
    31ec:	88 1f       	adc	r24, r24
    31ee:	da f7       	brpl	.-10     	; 0x31e6 <__floatsisf+0x62>
    31f0:	88 0f       	add	r24, r24
    31f2:	96 95       	lsr	r25
    31f4:	87 95       	ror	r24
    31f6:	97 f9       	bld	r25, 7
    31f8:	08 95       	ret

000031fa <__fp_cmp>:
__fp_cmp():
    31fa:	99 0f       	add	r25, r25
    31fc:	00 08       	sbc	r0, r0
    31fe:	55 0f       	add	r21, r21
    3200:	aa 0b       	sbc	r26, r26
    3202:	e0 e8       	ldi	r30, 0x80	; 128
    3204:	fe ef       	ldi	r31, 0xFE	; 254
    3206:	16 16       	cp	r1, r22
    3208:	17 06       	cpc	r1, r23
    320a:	e8 07       	cpc	r30, r24
    320c:	f9 07       	cpc	r31, r25
    320e:	c0 f0       	brcs	.+48     	; 0x3240 <__fp_cmp+0x46>
    3210:	12 16       	cp	r1, r18
    3212:	13 06       	cpc	r1, r19
    3214:	e4 07       	cpc	r30, r20
    3216:	f5 07       	cpc	r31, r21
    3218:	98 f0       	brcs	.+38     	; 0x3240 <__fp_cmp+0x46>
    321a:	62 1b       	sub	r22, r18
    321c:	73 0b       	sbc	r23, r19
    321e:	84 0b       	sbc	r24, r20
    3220:	95 0b       	sbc	r25, r21
    3222:	39 f4       	brne	.+14     	; 0x3232 <__fp_cmp+0x38>
    3224:	0a 26       	eor	r0, r26
    3226:	61 f0       	breq	.+24     	; 0x3240 <__fp_cmp+0x46>
    3228:	23 2b       	or	r18, r19
    322a:	24 2b       	or	r18, r20
    322c:	25 2b       	or	r18, r21
    322e:	21 f4       	brne	.+8      	; 0x3238 <__fp_cmp+0x3e>
    3230:	08 95       	ret
    3232:	0a 26       	eor	r0, r26
    3234:	09 f4       	brne	.+2      	; 0x3238 <__fp_cmp+0x3e>
    3236:	a1 40       	sbci	r26, 0x01	; 1
    3238:	a6 95       	lsr	r26
    323a:	8f ef       	ldi	r24, 0xFF	; 255
    323c:	81 1d       	adc	r24, r1
    323e:	81 1d       	adc	r24, r1
    3240:	08 95       	ret

00003242 <__fp_inf>:
__fp_inf():
    3242:	97 f9       	bld	r25, 7
    3244:	9f 67       	ori	r25, 0x7F	; 127
    3246:	80 e8       	ldi	r24, 0x80	; 128
    3248:	70 e0       	ldi	r23, 0x00	; 0
    324a:	60 e0       	ldi	r22, 0x00	; 0
    324c:	08 95       	ret

0000324e <__fp_nan>:
__fp_nan():
    324e:	9f ef       	ldi	r25, 0xFF	; 255
    3250:	80 ec       	ldi	r24, 0xC0	; 192
    3252:	08 95       	ret

00003254 <__fp_pscA>:
__fp_pscA():
    3254:	00 24       	eor	r0, r0
    3256:	0a 94       	dec	r0
    3258:	16 16       	cp	r1, r22
    325a:	17 06       	cpc	r1, r23
    325c:	18 06       	cpc	r1, r24
    325e:	09 06       	cpc	r0, r25
    3260:	08 95       	ret

00003262 <__fp_pscB>:
__fp_pscB():
    3262:	00 24       	eor	r0, r0
    3264:	0a 94       	dec	r0
    3266:	12 16       	cp	r1, r18
    3268:	13 06       	cpc	r1, r19
    326a:	14 06       	cpc	r1, r20
    326c:	05 06       	cpc	r0, r21
    326e:	08 95       	ret

00003270 <__fp_round>:
__fp_round():
    3270:	09 2e       	mov	r0, r25
    3272:	03 94       	inc	r0
    3274:	00 0c       	add	r0, r0
    3276:	11 f4       	brne	.+4      	; 0x327c <__fp_round+0xc>
    3278:	88 23       	and	r24, r24
    327a:	52 f0       	brmi	.+20     	; 0x3290 <__fp_round+0x20>
    327c:	bb 0f       	add	r27, r27
    327e:	40 f4       	brcc	.+16     	; 0x3290 <__fp_round+0x20>
    3280:	bf 2b       	or	r27, r31
    3282:	11 f4       	brne	.+4      	; 0x3288 <__fp_round+0x18>
    3284:	60 ff       	sbrs	r22, 0
    3286:	04 c0       	rjmp	.+8      	; 0x3290 <__fp_round+0x20>
    3288:	6f 5f       	subi	r22, 0xFF	; 255
    328a:	7f 4f       	sbci	r23, 0xFF	; 255
    328c:	8f 4f       	sbci	r24, 0xFF	; 255
    328e:	9f 4f       	sbci	r25, 0xFF	; 255
    3290:	08 95       	ret

00003292 <__fp_split3>:
__fp_split3():
    3292:	57 fd       	sbrc	r21, 7
    3294:	90 58       	subi	r25, 0x80	; 128
    3296:	44 0f       	add	r20, r20
    3298:	55 1f       	adc	r21, r21
    329a:	59 f0       	breq	.+22     	; 0x32b2 <__fp_splitA+0x10>
    329c:	5f 3f       	cpi	r21, 0xFF	; 255
    329e:	71 f0       	breq	.+28     	; 0x32bc <__fp_splitA+0x1a>
    32a0:	47 95       	ror	r20

000032a2 <__fp_splitA>:
    32a2:	88 0f       	add	r24, r24
    32a4:	97 fb       	bst	r25, 7
    32a6:	99 1f       	adc	r25, r25
    32a8:	61 f0       	breq	.+24     	; 0x32c2 <__fp_splitA+0x20>
    32aa:	9f 3f       	cpi	r25, 0xFF	; 255
    32ac:	79 f0       	breq	.+30     	; 0x32cc <__fp_splitA+0x2a>
    32ae:	87 95       	ror	r24
    32b0:	08 95       	ret
    32b2:	12 16       	cp	r1, r18
    32b4:	13 06       	cpc	r1, r19
    32b6:	14 06       	cpc	r1, r20
    32b8:	55 1f       	adc	r21, r21
    32ba:	f2 cf       	rjmp	.-28     	; 0x32a0 <__fp_split3+0xe>
    32bc:	46 95       	lsr	r20
    32be:	f1 df       	rcall	.-30     	; 0x32a2 <__fp_splitA>
    32c0:	08 c0       	rjmp	.+16     	; 0x32d2 <__fp_splitA+0x30>
    32c2:	16 16       	cp	r1, r22
    32c4:	17 06       	cpc	r1, r23
    32c6:	18 06       	cpc	r1, r24
    32c8:	99 1f       	adc	r25, r25
    32ca:	f1 cf       	rjmp	.-30     	; 0x32ae <__fp_splitA+0xc>
    32cc:	86 95       	lsr	r24
    32ce:	71 05       	cpc	r23, r1
    32d0:	61 05       	cpc	r22, r1
    32d2:	08 94       	sec
    32d4:	08 95       	ret

000032d6 <__fp_zero>:
__fp_zero():
    32d6:	e8 94       	clt

000032d8 <__fp_szero>:
    32d8:	bb 27       	eor	r27, r27
    32da:	66 27       	eor	r22, r22
    32dc:	77 27       	eor	r23, r23
    32de:	cb 01       	movw	r24, r22
    32e0:	97 f9       	bld	r25, 7
    32e2:	08 95       	ret

000032e4 <__gesf2>:
__gesf2():
    32e4:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__fp_cmp>
    32e8:	08 f4       	brcc	.+2      	; 0x32ec <__gesf2+0x8>
    32ea:	8f ef       	ldi	r24, 0xFF	; 255
    32ec:	08 95       	ret

000032ee <__mulsf3>:
__mulsf3():
    32ee:	0e 94 8a 19 	call	0x3314	; 0x3314 <__mulsf3x>
    32f2:	0c 94 38 19 	jmp	0x3270	; 0x3270 <__fp_round>
    32f6:	0e 94 2a 19 	call	0x3254	; 0x3254 <__fp_pscA>
    32fa:	38 f0       	brcs	.+14     	; 0x330a <__mulsf3+0x1c>
    32fc:	0e 94 31 19 	call	0x3262	; 0x3262 <__fp_pscB>
    3300:	20 f0       	brcs	.+8      	; 0x330a <__mulsf3+0x1c>
    3302:	95 23       	and	r25, r21
    3304:	11 f0       	breq	.+4      	; 0x330a <__mulsf3+0x1c>
    3306:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__fp_inf>
    330a:	0c 94 27 19 	jmp	0x324e	; 0x324e <__fp_nan>
    330e:	11 24       	eor	r1, r1
    3310:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <__fp_szero>

00003314 <__mulsf3x>:
__mulsf3x():
    3314:	0e 94 49 19 	call	0x3292	; 0x3292 <__fp_split3>
    3318:	70 f3       	brcs	.-36     	; 0x32f6 <__mulsf3+0x8>

0000331a <__mulsf3_pse>:
    331a:	95 9f       	mul	r25, r21
    331c:	c1 f3       	breq	.-16     	; 0x330e <__mulsf3+0x20>
    331e:	95 0f       	add	r25, r21
    3320:	50 e0       	ldi	r21, 0x00	; 0
    3322:	55 1f       	adc	r21, r21
    3324:	62 9f       	mul	r22, r18
    3326:	f0 01       	movw	r30, r0
    3328:	72 9f       	mul	r23, r18
    332a:	bb 27       	eor	r27, r27
    332c:	f0 0d       	add	r31, r0
    332e:	b1 1d       	adc	r27, r1
    3330:	63 9f       	mul	r22, r19
    3332:	aa 27       	eor	r26, r26
    3334:	f0 0d       	add	r31, r0
    3336:	b1 1d       	adc	r27, r1
    3338:	aa 1f       	adc	r26, r26
    333a:	64 9f       	mul	r22, r20
    333c:	66 27       	eor	r22, r22
    333e:	b0 0d       	add	r27, r0
    3340:	a1 1d       	adc	r26, r1
    3342:	66 1f       	adc	r22, r22
    3344:	82 9f       	mul	r24, r18
    3346:	22 27       	eor	r18, r18
    3348:	b0 0d       	add	r27, r0
    334a:	a1 1d       	adc	r26, r1
    334c:	62 1f       	adc	r22, r18
    334e:	73 9f       	mul	r23, r19
    3350:	b0 0d       	add	r27, r0
    3352:	a1 1d       	adc	r26, r1
    3354:	62 1f       	adc	r22, r18
    3356:	83 9f       	mul	r24, r19
    3358:	a0 0d       	add	r26, r0
    335a:	61 1d       	adc	r22, r1
    335c:	22 1f       	adc	r18, r18
    335e:	74 9f       	mul	r23, r20
    3360:	33 27       	eor	r19, r19
    3362:	a0 0d       	add	r26, r0
    3364:	61 1d       	adc	r22, r1
    3366:	23 1f       	adc	r18, r19
    3368:	84 9f       	mul	r24, r20
    336a:	60 0d       	add	r22, r0
    336c:	21 1d       	adc	r18, r1
    336e:	82 2f       	mov	r24, r18
    3370:	76 2f       	mov	r23, r22
    3372:	6a 2f       	mov	r22, r26
    3374:	11 24       	eor	r1, r1
    3376:	9f 57       	subi	r25, 0x7F	; 127
    3378:	50 40       	sbci	r21, 0x00	; 0
    337a:	9a f0       	brmi	.+38     	; 0x33a2 <__mulsf3_pse+0x88>
    337c:	f1 f0       	breq	.+60     	; 0x33ba <__mulsf3_pse+0xa0>
    337e:	88 23       	and	r24, r24
    3380:	4a f0       	brmi	.+18     	; 0x3394 <__mulsf3_pse+0x7a>
    3382:	ee 0f       	add	r30, r30
    3384:	ff 1f       	adc	r31, r31
    3386:	bb 1f       	adc	r27, r27
    3388:	66 1f       	adc	r22, r22
    338a:	77 1f       	adc	r23, r23
    338c:	88 1f       	adc	r24, r24
    338e:	91 50       	subi	r25, 0x01	; 1
    3390:	50 40       	sbci	r21, 0x00	; 0
    3392:	a9 f7       	brne	.-22     	; 0x337e <__mulsf3_pse+0x64>
    3394:	9e 3f       	cpi	r25, 0xFE	; 254
    3396:	51 05       	cpc	r21, r1
    3398:	80 f0       	brcs	.+32     	; 0x33ba <__mulsf3_pse+0xa0>
    339a:	0c 94 21 19 	jmp	0x3242	; 0x3242 <__fp_inf>
    339e:	0c 94 6c 19 	jmp	0x32d8	; 0x32d8 <__fp_szero>
    33a2:	5f 3f       	cpi	r21, 0xFF	; 255
    33a4:	e4 f3       	brlt	.-8      	; 0x339e <__mulsf3_pse+0x84>
    33a6:	98 3e       	cpi	r25, 0xE8	; 232
    33a8:	d4 f3       	brlt	.-12     	; 0x339e <__mulsf3_pse+0x84>
    33aa:	86 95       	lsr	r24
    33ac:	77 95       	ror	r23
    33ae:	67 95       	ror	r22
    33b0:	b7 95       	ror	r27
    33b2:	f7 95       	ror	r31
    33b4:	e7 95       	ror	r30
    33b6:	9f 5f       	subi	r25, 0xFF	; 255
    33b8:	c1 f7       	brne	.-16     	; 0x33aa <__mulsf3_pse+0x90>
    33ba:	fe 2b       	or	r31, r30
    33bc:	88 0f       	add	r24, r24
    33be:	91 1d       	adc	r25, r1
    33c0:	96 95       	lsr	r25
    33c2:	87 95       	ror	r24
    33c4:	97 f9       	bld	r25, 7
    33c6:	08 95       	ret

000033c8 <__unordsf2>:
    33c8:	0e 94 fd 18 	call	0x31fa	; 0x31fa <__fp_cmp>
    33cc:	88 0b       	sbc	r24, r24
    33ce:	99 0b       	sbc	r25, r25
    33d0:	08 95       	ret

000033d2 <__udivmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    33d2:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    33d4:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    33d6:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    33d8:	07 c0       	rjmp	.+14     	; 0x33e8 <__udivmodhi4_ep>

000033da <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    33da:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    33dc:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    33de:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    33e0:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    33e2:	10 f0       	brcs	.+4      	; 0x33e8 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    33e4:	a6 1b       	sub	r26, r22
__udivmodhi4_loop():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    33e6:	b7 0b       	sbc	r27, r23

000033e8 <__udivmodhi4_ep>:
__udivmodhi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    33e8:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    33ea:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    33ec:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    33ee:	a9 f7       	brne	.-22     	; 0x33da <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    33f0:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    33f2:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    33f4:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    33f6:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    33f8:	08 95       	ret

000033fa <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    33fa:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    33fc:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    33fe:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    3400:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    3402:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    3404:	0d c0       	rjmp	.+26     	; 0x3420 <__udivmodsi4_ep>

00003406 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    3406:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3408:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    340a:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    340c:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    340e:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    3410:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    3412:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    3414:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    3416:	20 f0       	brcs	.+8      	; 0x3420 <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3418:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    341a:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    341c:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    341e:	f5 0b       	sbc	r31, r21

00003420 <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    3420:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    3422:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    3424:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    3426:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3428:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    342a:	69 f7       	brne	.-38     	; 0x3406 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    342c:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    342e:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    3430:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    3432:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    3434:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    3436:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3438:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    343a:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    343c:	08 95       	ret

0000343e <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    343e:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    3440:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    3442:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    3444:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    3446:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    3448:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    344a:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    344c:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    344e:	09 94       	ijmp

00003450 <strcpy>:
strcpy():
    3450:	fb 01       	movw	r30, r22
    3452:	dc 01       	movw	r26, r24
    3454:	01 90       	ld	r0, Z+
    3456:	0d 92       	st	X+, r0
    3458:	00 20       	and	r0, r0
    345a:	e1 f7       	brne	.-8      	; 0x3454 <strcpy+0x4>
    345c:	08 95       	ret

0000345e <sprintf>:
sprintf():
    345e:	0f 93       	push	r16
    3460:	1f 93       	push	r17
    3462:	cf 93       	push	r28
    3464:	df 93       	push	r29
    3466:	cd b7       	in	r28, 0x3d	; 61
    3468:	de b7       	in	r29, 0x3e	; 62
    346a:	2e 97       	sbiw	r28, 0x0e	; 14
    346c:	0f b6       	in	r0, 0x3f	; 63
    346e:	f8 94       	cli
    3470:	de bf       	out	0x3e, r29	; 62
    3472:	0f be       	out	0x3f, r0	; 63
    3474:	cd bf       	out	0x3d, r28	; 61
    3476:	0d 89       	ldd	r16, Y+21	; 0x15
    3478:	1e 89       	ldd	r17, Y+22	; 0x16
    347a:	86 e0       	ldi	r24, 0x06	; 6
    347c:	8c 83       	std	Y+4, r24	; 0x04
    347e:	1a 83       	std	Y+2, r17	; 0x02
    3480:	09 83       	std	Y+1, r16	; 0x01
    3482:	8f ef       	ldi	r24, 0xFF	; 255
    3484:	9f e7       	ldi	r25, 0x7F	; 127
    3486:	9e 83       	std	Y+6, r25	; 0x06
    3488:	8d 83       	std	Y+5, r24	; 0x05
    348a:	ae 01       	movw	r20, r28
    348c:	47 5e       	subi	r20, 0xE7	; 231
    348e:	5f 4f       	sbci	r21, 0xFF	; 255
    3490:	6f 89       	ldd	r22, Y+23	; 0x17
    3492:	78 8d       	ldd	r23, Y+24	; 0x18
    3494:	ce 01       	movw	r24, r28
    3496:	01 96       	adiw	r24, 0x01	; 1
    3498:	0e 94 5f 1a 	call	0x34be	; 0x34be <vfprintf>
    349c:	2f 81       	ldd	r18, Y+7	; 0x07
    349e:	38 85       	ldd	r19, Y+8	; 0x08
    34a0:	02 0f       	add	r16, r18
    34a2:	13 1f       	adc	r17, r19
    34a4:	f8 01       	movw	r30, r16
    34a6:	10 82       	st	Z, r1
    34a8:	2e 96       	adiw	r28, 0x0e	; 14
    34aa:	0f b6       	in	r0, 0x3f	; 63
    34ac:	f8 94       	cli
    34ae:	de bf       	out	0x3e, r29	; 62
    34b0:	0f be       	out	0x3f, r0	; 63
    34b2:	cd bf       	out	0x3d, r28	; 61
    34b4:	df 91       	pop	r29
    34b6:	cf 91       	pop	r28
    34b8:	1f 91       	pop	r17
    34ba:	0f 91       	pop	r16
    34bc:	08 95       	ret

000034be <vfprintf>:
vfprintf():
    34be:	2f 92       	push	r2
    34c0:	3f 92       	push	r3
    34c2:	4f 92       	push	r4
    34c4:	5f 92       	push	r5
    34c6:	6f 92       	push	r6
    34c8:	7f 92       	push	r7
    34ca:	8f 92       	push	r8
    34cc:	9f 92       	push	r9
    34ce:	af 92       	push	r10
    34d0:	bf 92       	push	r11
    34d2:	cf 92       	push	r12
    34d4:	df 92       	push	r13
    34d6:	ef 92       	push	r14
    34d8:	ff 92       	push	r15
    34da:	0f 93       	push	r16
    34dc:	1f 93       	push	r17
    34de:	cf 93       	push	r28
    34e0:	df 93       	push	r29
    34e2:	cd b7       	in	r28, 0x3d	; 61
    34e4:	de b7       	in	r29, 0x3e	; 62
    34e6:	2b 97       	sbiw	r28, 0x0b	; 11
    34e8:	0f b6       	in	r0, 0x3f	; 63
    34ea:	f8 94       	cli
    34ec:	de bf       	out	0x3e, r29	; 62
    34ee:	0f be       	out	0x3f, r0	; 63
    34f0:	cd bf       	out	0x3d, r28	; 61
    34f2:	7c 01       	movw	r14, r24
    34f4:	3b 01       	movw	r6, r22
    34f6:	8a 01       	movw	r16, r20
    34f8:	fc 01       	movw	r30, r24
    34fa:	17 82       	std	Z+7, r1	; 0x07
    34fc:	16 82       	std	Z+6, r1	; 0x06
    34fe:	83 81       	ldd	r24, Z+3	; 0x03
    3500:	81 ff       	sbrs	r24, 1
    3502:	dd c1       	rjmp	.+954    	; 0x38be <vfprintf+0x400>
    3504:	ce 01       	movw	r24, r28
    3506:	01 96       	adiw	r24, 0x01	; 1
    3508:	5c 01       	movw	r10, r24
    350a:	f7 01       	movw	r30, r14
    350c:	93 81       	ldd	r25, Z+3	; 0x03
    350e:	f3 01       	movw	r30, r6
    3510:	93 fd       	sbrc	r25, 3
    3512:	85 91       	lpm	r24, Z+
    3514:	93 ff       	sbrs	r25, 3
    3516:	81 91       	ld	r24, Z+
    3518:	3f 01       	movw	r6, r30
    351a:	88 23       	and	r24, r24
    351c:	09 f4       	brne	.+2      	; 0x3520 <vfprintf+0x62>
    351e:	53 c1       	rjmp	.+678    	; 0x37c6 <vfprintf+0x308>
    3520:	85 32       	cpi	r24, 0x25	; 37
    3522:	39 f4       	brne	.+14     	; 0x3532 <vfprintf+0x74>
    3524:	93 fd       	sbrc	r25, 3
    3526:	85 91       	lpm	r24, Z+
    3528:	93 ff       	sbrs	r25, 3
    352a:	81 91       	ld	r24, Z+
    352c:	3f 01       	movw	r6, r30
    352e:	85 32       	cpi	r24, 0x25	; 37
    3530:	29 f4       	brne	.+10     	; 0x353c <vfprintf+0x7e>
    3532:	b7 01       	movw	r22, r14
    3534:	90 e0       	ldi	r25, 0x00	; 0
    3536:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <fputc>
    353a:	e7 cf       	rjmp	.-50     	; 0x350a <vfprintf+0x4c>
    353c:	91 2c       	mov	r9, r1
    353e:	21 2c       	mov	r2, r1
    3540:	31 2c       	mov	r3, r1
    3542:	ff e1       	ldi	r31, 0x1F	; 31
    3544:	f3 15       	cp	r31, r3
    3546:	38 f0       	brcs	.+14     	; 0x3556 <vfprintf+0x98>
    3548:	8b 32       	cpi	r24, 0x2B	; 43
    354a:	11 f1       	breq	.+68     	; 0x3590 <vfprintf+0xd2>
    354c:	90 f4       	brcc	.+36     	; 0x3572 <vfprintf+0xb4>
    354e:	80 32       	cpi	r24, 0x20	; 32
    3550:	09 f1       	breq	.+66     	; 0x3594 <vfprintf+0xd6>
    3552:	83 32       	cpi	r24, 0x23	; 35
    3554:	29 f1       	breq	.+74     	; 0x35a0 <vfprintf+0xe2>
    3556:	37 fc       	sbrc	r3, 7
    3558:	3c c0       	rjmp	.+120    	; 0x35d2 <vfprintf+0x114>
    355a:	20 ed       	ldi	r18, 0xD0	; 208
    355c:	28 0f       	add	r18, r24
    355e:	2a 30       	cpi	r18, 0x0A	; 10
    3560:	50 f5       	brcc	.+84     	; 0x35b6 <vfprintf+0xf8>
    3562:	36 fe       	sbrs	r3, 6
    3564:	20 c0       	rjmp	.+64     	; 0x35a6 <vfprintf+0xe8>
    3566:	8a e0       	ldi	r24, 0x0A	; 10
    3568:	98 9e       	mul	r9, r24
    356a:	20 0d       	add	r18, r0
    356c:	11 24       	eor	r1, r1
    356e:	92 2e       	mov	r9, r18
    3570:	06 c0       	rjmp	.+12     	; 0x357e <vfprintf+0xc0>
    3572:	8d 32       	cpi	r24, 0x2D	; 45
    3574:	91 f0       	breq	.+36     	; 0x359a <vfprintf+0xdc>
    3576:	80 33       	cpi	r24, 0x30	; 48
    3578:	71 f7       	brne	.-36     	; 0x3556 <vfprintf+0x98>
    357a:	68 94       	set
    357c:	30 f8       	bld	r3, 0
    357e:	f3 01       	movw	r30, r6
    3580:	93 fd       	sbrc	r25, 3
    3582:	85 91       	lpm	r24, Z+
    3584:	93 ff       	sbrs	r25, 3
    3586:	81 91       	ld	r24, Z+
    3588:	3f 01       	movw	r6, r30
    358a:	81 11       	cpse	r24, r1
    358c:	da cf       	rjmp	.-76     	; 0x3542 <vfprintf+0x84>
    358e:	21 c0       	rjmp	.+66     	; 0x35d2 <vfprintf+0x114>
    3590:	68 94       	set
    3592:	31 f8       	bld	r3, 1
    3594:	68 94       	set
    3596:	32 f8       	bld	r3, 2
    3598:	f2 cf       	rjmp	.-28     	; 0x357e <vfprintf+0xc0>
    359a:	68 94       	set
    359c:	33 f8       	bld	r3, 3
    359e:	ef cf       	rjmp	.-34     	; 0x357e <vfprintf+0xc0>
    35a0:	68 94       	set
    35a2:	34 f8       	bld	r3, 4
    35a4:	ec cf       	rjmp	.-40     	; 0x357e <vfprintf+0xc0>
    35a6:	ea e0       	ldi	r30, 0x0A	; 10
    35a8:	2e 9e       	mul	r2, r30
    35aa:	20 0d       	add	r18, r0
    35ac:	11 24       	eor	r1, r1
    35ae:	22 2e       	mov	r2, r18
    35b0:	68 94       	set
    35b2:	35 f8       	bld	r3, 5
    35b4:	e4 cf       	rjmp	.-56     	; 0x357e <vfprintf+0xc0>
    35b6:	8e 32       	cpi	r24, 0x2E	; 46
    35b8:	29 f4       	brne	.+10     	; 0x35c4 <vfprintf+0x106>
    35ba:	36 fc       	sbrc	r3, 6
    35bc:	04 c1       	rjmp	.+520    	; 0x37c6 <vfprintf+0x308>
    35be:	68 94       	set
    35c0:	36 f8       	bld	r3, 6
    35c2:	dd cf       	rjmp	.-70     	; 0x357e <vfprintf+0xc0>
    35c4:	8c 36       	cpi	r24, 0x6C	; 108
    35c6:	19 f4       	brne	.+6      	; 0x35ce <vfprintf+0x110>
    35c8:	68 94       	set
    35ca:	37 f8       	bld	r3, 7
    35cc:	d8 cf       	rjmp	.-80     	; 0x357e <vfprintf+0xc0>
    35ce:	88 36       	cpi	r24, 0x68	; 104
    35d0:	b1 f2       	breq	.-84     	; 0x357e <vfprintf+0xc0>
    35d2:	98 2f       	mov	r25, r24
    35d4:	9f 7d       	andi	r25, 0xDF	; 223
    35d6:	95 54       	subi	r25, 0x45	; 69
    35d8:	93 30       	cpi	r25, 0x03	; 3
    35da:	e0 f0       	brcs	.+56     	; 0x3614 <vfprintf+0x156>
    35dc:	83 36       	cpi	r24, 0x63	; 99
    35de:	a1 f1       	breq	.+104    	; 0x3648 <vfprintf+0x18a>
    35e0:	83 37       	cpi	r24, 0x73	; 115
    35e2:	c1 f1       	breq	.+112    	; 0x3654 <vfprintf+0x196>
    35e4:	83 35       	cpi	r24, 0x53	; 83
    35e6:	09 f0       	breq	.+2      	; 0x35ea <vfprintf+0x12c>
    35e8:	63 c0       	rjmp	.+198    	; 0x36b0 <vfprintf+0x1f2>
    35ea:	28 01       	movw	r4, r16
    35ec:	f2 e0       	ldi	r31, 0x02	; 2
    35ee:	4f 0e       	add	r4, r31
    35f0:	51 1c       	adc	r5, r1
    35f2:	f8 01       	movw	r30, r16
    35f4:	c0 80       	ld	r12, Z
    35f6:	d1 80       	ldd	r13, Z+1	; 0x01
    35f8:	69 2d       	mov	r22, r9
    35fa:	70 e0       	ldi	r23, 0x00	; 0
    35fc:	36 fc       	sbrc	r3, 6
    35fe:	02 c0       	rjmp	.+4      	; 0x3604 <vfprintf+0x146>
    3600:	6f ef       	ldi	r22, 0xFF	; 255
    3602:	7f ef       	ldi	r23, 0xFF	; 255
    3604:	c6 01       	movw	r24, r12
    3606:	0e 94 62 1c 	call	0x38c4	; 0x38c4 <strnlen_P>
    360a:	4c 01       	movw	r8, r24
    360c:	68 94       	set
    360e:	37 f8       	bld	r3, 7
    3610:	82 01       	movw	r16, r4
    3612:	0a c0       	rjmp	.+20     	; 0x3628 <vfprintf+0x16a>
    3614:	0c 5f       	subi	r16, 0xFC	; 252
    3616:	1f 4f       	sbci	r17, 0xFF	; 255
    3618:	ff e3       	ldi	r31, 0x3F	; 63
    361a:	f9 83       	std	Y+1, r31	; 0x01
    361c:	88 24       	eor	r8, r8
    361e:	83 94       	inc	r8
    3620:	91 2c       	mov	r9, r1
    3622:	65 01       	movw	r12, r10
    3624:	e8 94       	clt
    3626:	37 f8       	bld	r3, 7
    3628:	33 fe       	sbrs	r3, 3
    362a:	2d c0       	rjmp	.+90     	; 0x3686 <vfprintf+0x1c8>
    362c:	52 2c       	mov	r5, r2
    362e:	81 14       	cp	r8, r1
    3630:	91 04       	cpc	r9, r1
    3632:	71 f5       	brne	.+92     	; 0x3690 <vfprintf+0x1d2>
    3634:	55 20       	and	r5, r5
    3636:	09 f4       	brne	.+2      	; 0x363a <vfprintf+0x17c>
    3638:	68 cf       	rjmp	.-304    	; 0x350a <vfprintf+0x4c>
    363a:	b7 01       	movw	r22, r14
    363c:	80 e2       	ldi	r24, 0x20	; 32
    363e:	90 e0       	ldi	r25, 0x00	; 0
    3640:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <fputc>
    3644:	5a 94       	dec	r5
    3646:	f6 cf       	rjmp	.-20     	; 0x3634 <vfprintf+0x176>
    3648:	f8 01       	movw	r30, r16
    364a:	80 81       	ld	r24, Z
    364c:	89 83       	std	Y+1, r24	; 0x01
    364e:	0e 5f       	subi	r16, 0xFE	; 254
    3650:	1f 4f       	sbci	r17, 0xFF	; 255
    3652:	e4 cf       	rjmp	.-56     	; 0x361c <vfprintf+0x15e>
    3654:	28 01       	movw	r4, r16
    3656:	f2 e0       	ldi	r31, 0x02	; 2
    3658:	4f 0e       	add	r4, r31
    365a:	51 1c       	adc	r5, r1
    365c:	f8 01       	movw	r30, r16
    365e:	c0 80       	ld	r12, Z
    3660:	d1 80       	ldd	r13, Z+1	; 0x01
    3662:	69 2d       	mov	r22, r9
    3664:	70 e0       	ldi	r23, 0x00	; 0
    3666:	36 fc       	sbrc	r3, 6
    3668:	02 c0       	rjmp	.+4      	; 0x366e <vfprintf+0x1b0>
    366a:	6f ef       	ldi	r22, 0xFF	; 255
    366c:	7f ef       	ldi	r23, 0xFF	; 255
    366e:	c6 01       	movw	r24, r12
    3670:	0e 94 6d 1c 	call	0x38da	; 0x38da <strnlen>
    3674:	4c 01       	movw	r8, r24
    3676:	82 01       	movw	r16, r4
    3678:	d5 cf       	rjmp	.-86     	; 0x3624 <vfprintf+0x166>
    367a:	b7 01       	movw	r22, r14
    367c:	80 e2       	ldi	r24, 0x20	; 32
    367e:	90 e0       	ldi	r25, 0x00	; 0
    3680:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <fputc>
    3684:	2a 94       	dec	r2
    3686:	28 14       	cp	r2, r8
    3688:	19 04       	cpc	r1, r9
    368a:	09 f0       	breq	.+2      	; 0x368e <vfprintf+0x1d0>
    368c:	b0 f7       	brcc	.-20     	; 0x367a <vfprintf+0x1bc>
    368e:	ce cf       	rjmp	.-100    	; 0x362c <vfprintf+0x16e>
    3690:	f6 01       	movw	r30, r12
    3692:	37 fc       	sbrc	r3, 7
    3694:	85 91       	lpm	r24, Z+
    3696:	37 fe       	sbrs	r3, 7
    3698:	81 91       	ld	r24, Z+
    369a:	6f 01       	movw	r12, r30
    369c:	b7 01       	movw	r22, r14
    369e:	90 e0       	ldi	r25, 0x00	; 0
    36a0:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <fputc>
    36a4:	51 10       	cpse	r5, r1
    36a6:	5a 94       	dec	r5
    36a8:	f1 e0       	ldi	r31, 0x01	; 1
    36aa:	8f 1a       	sub	r8, r31
    36ac:	91 08       	sbc	r9, r1
    36ae:	bf cf       	rjmp	.-130    	; 0x362e <vfprintf+0x170>
    36b0:	84 36       	cpi	r24, 0x64	; 100
    36b2:	19 f0       	breq	.+6      	; 0x36ba <vfprintf+0x1fc>
    36b4:	89 36       	cpi	r24, 0x69	; 105
    36b6:	09 f0       	breq	.+2      	; 0x36ba <vfprintf+0x1fc>
    36b8:	77 c0       	rjmp	.+238    	; 0x37a8 <vfprintf+0x2ea>
    36ba:	f8 01       	movw	r30, r16
    36bc:	37 fe       	sbrs	r3, 7
    36be:	6b c0       	rjmp	.+214    	; 0x3796 <vfprintf+0x2d8>
    36c0:	60 81       	ld	r22, Z
    36c2:	71 81       	ldd	r23, Z+1	; 0x01
    36c4:	82 81       	ldd	r24, Z+2	; 0x02
    36c6:	93 81       	ldd	r25, Z+3	; 0x03
    36c8:	0c 5f       	subi	r16, 0xFC	; 252
    36ca:	1f 4f       	sbci	r17, 0xFF	; 255
    36cc:	f3 2d       	mov	r31, r3
    36ce:	ff 76       	andi	r31, 0x6F	; 111
    36d0:	3f 2e       	mov	r3, r31
    36d2:	97 ff       	sbrs	r25, 7
    36d4:	09 c0       	rjmp	.+18     	; 0x36e8 <vfprintf+0x22a>
    36d6:	90 95       	com	r25
    36d8:	80 95       	com	r24
    36da:	70 95       	com	r23
    36dc:	61 95       	neg	r22
    36de:	7f 4f       	sbci	r23, 0xFF	; 255
    36e0:	8f 4f       	sbci	r24, 0xFF	; 255
    36e2:	9f 4f       	sbci	r25, 0xFF	; 255
    36e4:	68 94       	set
    36e6:	37 f8       	bld	r3, 7
    36e8:	2a e0       	ldi	r18, 0x0A	; 10
    36ea:	30 e0       	ldi	r19, 0x00	; 0
    36ec:	a5 01       	movw	r20, r10
    36ee:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__ultoa_invert>
    36f2:	c8 2e       	mov	r12, r24
    36f4:	ca 18       	sub	r12, r10
    36f6:	8c 2c       	mov	r8, r12
    36f8:	43 2c       	mov	r4, r3
    36fa:	36 fe       	sbrs	r3, 6
    36fc:	0c c0       	rjmp	.+24     	; 0x3716 <vfprintf+0x258>
    36fe:	e8 94       	clt
    3700:	40 f8       	bld	r4, 0
    3702:	c9 14       	cp	r12, r9
    3704:	40 f4       	brcc	.+16     	; 0x3716 <vfprintf+0x258>
    3706:	34 fe       	sbrs	r3, 4
    3708:	05 c0       	rjmp	.+10     	; 0x3714 <vfprintf+0x256>
    370a:	32 fc       	sbrc	r3, 2
    370c:	03 c0       	rjmp	.+6      	; 0x3714 <vfprintf+0x256>
    370e:	f3 2d       	mov	r31, r3
    3710:	fe 7e       	andi	r31, 0xEE	; 238
    3712:	4f 2e       	mov	r4, r31
    3714:	89 2c       	mov	r8, r9
    3716:	44 fe       	sbrs	r4, 4
    3718:	aa c0       	rjmp	.+340    	; 0x386e <vfprintf+0x3b0>
    371a:	fe 01       	movw	r30, r28
    371c:	ec 0d       	add	r30, r12
    371e:	f1 1d       	adc	r31, r1
    3720:	80 81       	ld	r24, Z
    3722:	80 33       	cpi	r24, 0x30	; 48
    3724:	09 f0       	breq	.+2      	; 0x3728 <vfprintf+0x26a>
    3726:	9c c0       	rjmp	.+312    	; 0x3860 <vfprintf+0x3a2>
    3728:	24 2d       	mov	r18, r4
    372a:	29 7e       	andi	r18, 0xE9	; 233
    372c:	42 2e       	mov	r4, r18
    372e:	84 2d       	mov	r24, r4
    3730:	88 70       	andi	r24, 0x08	; 8
    3732:	58 2e       	mov	r5, r24
    3734:	43 fc       	sbrc	r4, 3
    3736:	aa c0       	rjmp	.+340    	; 0x388c <vfprintf+0x3ce>
    3738:	40 fe       	sbrs	r4, 0
    373a:	a4 c0       	rjmp	.+328    	; 0x3884 <vfprintf+0x3c6>
    373c:	9c 2c       	mov	r9, r12
    373e:	82 14       	cp	r8, r2
    3740:	18 f4       	brcc	.+6      	; 0x3748 <vfprintf+0x28a>
    3742:	2c 0c       	add	r2, r12
    3744:	92 2c       	mov	r9, r2
    3746:	98 18       	sub	r9, r8
    3748:	44 fe       	sbrs	r4, 4
    374a:	a6 c0       	rjmp	.+332    	; 0x3898 <vfprintf+0x3da>
    374c:	b7 01       	movw	r22, r14
    374e:	80 e3       	ldi	r24, 0x30	; 48
    3750:	90 e0       	ldi	r25, 0x00	; 0
    3752:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <fputc>
    3756:	42 fe       	sbrs	r4, 2
    3758:	09 c0       	rjmp	.+18     	; 0x376c <vfprintf+0x2ae>
    375a:	88 e7       	ldi	r24, 0x78	; 120
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	41 fe       	sbrs	r4, 1
    3760:	02 c0       	rjmp	.+4      	; 0x3766 <vfprintf+0x2a8>
    3762:	88 e5       	ldi	r24, 0x58	; 88
    3764:	90 e0       	ldi	r25, 0x00	; 0
    3766:	b7 01       	movw	r22, r14
    3768:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <fputc>
    376c:	c9 14       	cp	r12, r9
    376e:	08 f4       	brcc	.+2      	; 0x3772 <vfprintf+0x2b4>
    3770:	9f c0       	rjmp	.+318    	; 0x38b0 <vfprintf+0x3f2>
    3772:	ca 94       	dec	r12
    3774:	d1 2c       	mov	r13, r1
    3776:	9f ef       	ldi	r25, 0xFF	; 255
    3778:	c9 1a       	sub	r12, r25
    377a:	d9 0a       	sbc	r13, r25
    377c:	ca 0c       	add	r12, r10
    377e:	db 1c       	adc	r13, r11
    3780:	f6 01       	movw	r30, r12
    3782:	82 91       	ld	r24, -Z
    3784:	6f 01       	movw	r12, r30
    3786:	b7 01       	movw	r22, r14
    3788:	90 e0       	ldi	r25, 0x00	; 0
    378a:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <fputc>
    378e:	ac 14       	cp	r10, r12
    3790:	bd 04       	cpc	r11, r13
    3792:	b1 f7       	brne	.-20     	; 0x3780 <vfprintf+0x2c2>
    3794:	4f cf       	rjmp	.-354    	; 0x3634 <vfprintf+0x176>
    3796:	60 81       	ld	r22, Z
    3798:	71 81       	ldd	r23, Z+1	; 0x01
    379a:	07 2e       	mov	r0, r23
    379c:	00 0c       	add	r0, r0
    379e:	88 0b       	sbc	r24, r24
    37a0:	99 0b       	sbc	r25, r25
    37a2:	0e 5f       	subi	r16, 0xFE	; 254
    37a4:	1f 4f       	sbci	r17, 0xFF	; 255
    37a6:	92 cf       	rjmp	.-220    	; 0x36cc <vfprintf+0x20e>
    37a8:	d3 2c       	mov	r13, r3
    37aa:	e8 94       	clt
    37ac:	d4 f8       	bld	r13, 4
    37ae:	2a e0       	ldi	r18, 0x0A	; 10
    37b0:	30 e0       	ldi	r19, 0x00	; 0
    37b2:	85 37       	cpi	r24, 0x75	; 117
    37b4:	e1 f1       	breq	.+120    	; 0x382e <vfprintf+0x370>
    37b6:	23 2d       	mov	r18, r3
    37b8:	29 7f       	andi	r18, 0xF9	; 249
    37ba:	d2 2e       	mov	r13, r18
    37bc:	8f 36       	cpi	r24, 0x6F	; 111
    37be:	a9 f1       	breq	.+106    	; 0x382a <vfprintf+0x36c>
    37c0:	f0 f4       	brcc	.+60     	; 0x37fe <vfprintf+0x340>
    37c2:	88 35       	cpi	r24, 0x58	; 88
    37c4:	51 f1       	breq	.+84     	; 0x381a <vfprintf+0x35c>
    37c6:	f7 01       	movw	r30, r14
    37c8:	86 81       	ldd	r24, Z+6	; 0x06
    37ca:	97 81       	ldd	r25, Z+7	; 0x07
    37cc:	2b 96       	adiw	r28, 0x0b	; 11
    37ce:	0f b6       	in	r0, 0x3f	; 63
    37d0:	f8 94       	cli
    37d2:	de bf       	out	0x3e, r29	; 62
    37d4:	0f be       	out	0x3f, r0	; 63
    37d6:	cd bf       	out	0x3d, r28	; 61
    37d8:	df 91       	pop	r29
    37da:	cf 91       	pop	r28
    37dc:	1f 91       	pop	r17
    37de:	0f 91       	pop	r16
    37e0:	ff 90       	pop	r15
    37e2:	ef 90       	pop	r14
    37e4:	df 90       	pop	r13
    37e6:	cf 90       	pop	r12
    37e8:	bf 90       	pop	r11
    37ea:	af 90       	pop	r10
    37ec:	9f 90       	pop	r9
    37ee:	8f 90       	pop	r8
    37f0:	7f 90       	pop	r7
    37f2:	6f 90       	pop	r6
    37f4:	5f 90       	pop	r5
    37f6:	4f 90       	pop	r4
    37f8:	3f 90       	pop	r3
    37fa:	2f 90       	pop	r2
    37fc:	08 95       	ret
    37fe:	80 37       	cpi	r24, 0x70	; 112
    3800:	49 f0       	breq	.+18     	; 0x3814 <vfprintf+0x356>
    3802:	88 37       	cpi	r24, 0x78	; 120
    3804:	01 f7       	brne	.-64     	; 0x37c6 <vfprintf+0x308>
    3806:	d4 fe       	sbrs	r13, 4
    3808:	02 c0       	rjmp	.+4      	; 0x380e <vfprintf+0x350>
    380a:	68 94       	set
    380c:	d2 f8       	bld	r13, 2
    380e:	20 e1       	ldi	r18, 0x10	; 16
    3810:	30 e0       	ldi	r19, 0x00	; 0
    3812:	0d c0       	rjmp	.+26     	; 0x382e <vfprintf+0x370>
    3814:	68 94       	set
    3816:	d4 f8       	bld	r13, 4
    3818:	f6 cf       	rjmp	.-20     	; 0x3806 <vfprintf+0x348>
    381a:	34 fe       	sbrs	r3, 4
    381c:	03 c0       	rjmp	.+6      	; 0x3824 <vfprintf+0x366>
    381e:	82 2f       	mov	r24, r18
    3820:	86 60       	ori	r24, 0x06	; 6
    3822:	d8 2e       	mov	r13, r24
    3824:	20 e1       	ldi	r18, 0x10	; 16
    3826:	32 e0       	ldi	r19, 0x02	; 2
    3828:	02 c0       	rjmp	.+4      	; 0x382e <vfprintf+0x370>
    382a:	28 e0       	ldi	r18, 0x08	; 8
    382c:	30 e0       	ldi	r19, 0x00	; 0
    382e:	f8 01       	movw	r30, r16
    3830:	d7 fe       	sbrs	r13, 7
    3832:	0f c0       	rjmp	.+30     	; 0x3852 <vfprintf+0x394>
    3834:	60 81       	ld	r22, Z
    3836:	71 81       	ldd	r23, Z+1	; 0x01
    3838:	82 81       	ldd	r24, Z+2	; 0x02
    383a:	93 81       	ldd	r25, Z+3	; 0x03
    383c:	0c 5f       	subi	r16, 0xFC	; 252
    383e:	1f 4f       	sbci	r17, 0xFF	; 255
    3840:	a5 01       	movw	r20, r10
    3842:	0e 94 a8 1c 	call	0x3950	; 0x3950 <__ultoa_invert>
    3846:	c8 2e       	mov	r12, r24
    3848:	ca 18       	sub	r12, r10
    384a:	3d 2c       	mov	r3, r13
    384c:	e8 94       	clt
    384e:	37 f8       	bld	r3, 7
    3850:	52 cf       	rjmp	.-348    	; 0x36f6 <vfprintf+0x238>
    3852:	60 81       	ld	r22, Z
    3854:	71 81       	ldd	r23, Z+1	; 0x01
    3856:	90 e0       	ldi	r25, 0x00	; 0
    3858:	80 e0       	ldi	r24, 0x00	; 0
    385a:	0e 5f       	subi	r16, 0xFE	; 254
    385c:	1f 4f       	sbci	r17, 0xFF	; 255
    385e:	f0 cf       	rjmp	.-32     	; 0x3840 <vfprintf+0x382>
    3860:	42 fc       	sbrc	r4, 2
    3862:	02 c0       	rjmp	.+4      	; 0x3868 <vfprintf+0x3aa>
    3864:	83 94       	inc	r8
    3866:	63 cf       	rjmp	.-314    	; 0x372e <vfprintf+0x270>
    3868:	83 94       	inc	r8
    386a:	83 94       	inc	r8
    386c:	60 cf       	rjmp	.-320    	; 0x372e <vfprintf+0x270>
    386e:	84 2d       	mov	r24, r4
    3870:	86 78       	andi	r24, 0x86	; 134
    3872:	09 f4       	brne	.+2      	; 0x3876 <vfprintf+0x3b8>
    3874:	5c cf       	rjmp	.-328    	; 0x372e <vfprintf+0x270>
    3876:	f6 cf       	rjmp	.-20     	; 0x3864 <vfprintf+0x3a6>
    3878:	b7 01       	movw	r22, r14
    387a:	80 e2       	ldi	r24, 0x20	; 32
    387c:	90 e0       	ldi	r25, 0x00	; 0
    387e:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <fputc>
    3882:	83 94       	inc	r8
    3884:	82 14       	cp	r8, r2
    3886:	c0 f3       	brcs	.-16     	; 0x3878 <vfprintf+0x3ba>
    3888:	51 2c       	mov	r5, r1
    388a:	5e cf       	rjmp	.-324    	; 0x3748 <vfprintf+0x28a>
    388c:	52 2c       	mov	r5, r2
    388e:	58 18       	sub	r5, r8
    3890:	82 14       	cp	r8, r2
    3892:	08 f4       	brcc	.+2      	; 0x3896 <vfprintf+0x3d8>
    3894:	59 cf       	rjmp	.-334    	; 0x3748 <vfprintf+0x28a>
    3896:	f8 cf       	rjmp	.-16     	; 0x3888 <vfprintf+0x3ca>
    3898:	84 2d       	mov	r24, r4
    389a:	86 78       	andi	r24, 0x86	; 134
    389c:	09 f4       	brne	.+2      	; 0x38a0 <vfprintf+0x3e2>
    389e:	66 cf       	rjmp	.-308    	; 0x376c <vfprintf+0x2ae>
    38a0:	8b e2       	ldi	r24, 0x2B	; 43
    38a2:	41 fe       	sbrs	r4, 1
    38a4:	80 e2       	ldi	r24, 0x20	; 32
    38a6:	47 fc       	sbrc	r4, 7
    38a8:	8d e2       	ldi	r24, 0x2D	; 45
    38aa:	b7 01       	movw	r22, r14
    38ac:	90 e0       	ldi	r25, 0x00	; 0
    38ae:	5c cf       	rjmp	.-328    	; 0x3768 <vfprintf+0x2aa>
    38b0:	b7 01       	movw	r22, r14
    38b2:	80 e3       	ldi	r24, 0x30	; 48
    38b4:	90 e0       	ldi	r25, 0x00	; 0
    38b6:	0e 94 78 1c 	call	0x38f0	; 0x38f0 <fputc>
    38ba:	9a 94       	dec	r9
    38bc:	57 cf       	rjmp	.-338    	; 0x376c <vfprintf+0x2ae>
    38be:	8f ef       	ldi	r24, 0xFF	; 255
    38c0:	9f ef       	ldi	r25, 0xFF	; 255
    38c2:	84 cf       	rjmp	.-248    	; 0x37cc <vfprintf+0x30e>

000038c4 <strnlen_P>:
strnlen_P():
    38c4:	fc 01       	movw	r30, r24
    38c6:	05 90       	lpm	r0, Z+
    38c8:	61 50       	subi	r22, 0x01	; 1
    38ca:	70 40       	sbci	r23, 0x00	; 0
    38cc:	01 10       	cpse	r0, r1
    38ce:	d8 f7       	brcc	.-10     	; 0x38c6 <strnlen_P+0x2>
    38d0:	80 95       	com	r24
    38d2:	90 95       	com	r25
    38d4:	8e 0f       	add	r24, r30
    38d6:	9f 1f       	adc	r25, r31
    38d8:	08 95       	ret

000038da <strnlen>:
strnlen():
    38da:	fc 01       	movw	r30, r24
    38dc:	61 50       	subi	r22, 0x01	; 1
    38de:	70 40       	sbci	r23, 0x00	; 0
    38e0:	01 90       	ld	r0, Z+
    38e2:	01 10       	cpse	r0, r1
    38e4:	d8 f7       	brcc	.-10     	; 0x38dc <strnlen+0x2>
    38e6:	80 95       	com	r24
    38e8:	90 95       	com	r25
    38ea:	8e 0f       	add	r24, r30
    38ec:	9f 1f       	adc	r25, r31
    38ee:	08 95       	ret

000038f0 <fputc>:
fputc():
    38f0:	0f 93       	push	r16
    38f2:	1f 93       	push	r17
    38f4:	cf 93       	push	r28
    38f6:	df 93       	push	r29
    38f8:	18 2f       	mov	r17, r24
    38fa:	09 2f       	mov	r16, r25
    38fc:	eb 01       	movw	r28, r22
    38fe:	8b 81       	ldd	r24, Y+3	; 0x03
    3900:	81 fd       	sbrc	r24, 1
    3902:	09 c0       	rjmp	.+18     	; 0x3916 <fputc+0x26>
    3904:	1f ef       	ldi	r17, 0xFF	; 255
    3906:	0f ef       	ldi	r16, 0xFF	; 255
    3908:	81 2f       	mov	r24, r17
    390a:	90 2f       	mov	r25, r16
    390c:	df 91       	pop	r29
    390e:	cf 91       	pop	r28
    3910:	1f 91       	pop	r17
    3912:	0f 91       	pop	r16
    3914:	08 95       	ret
    3916:	82 ff       	sbrs	r24, 2
    3918:	14 c0       	rjmp	.+40     	; 0x3942 <fputc+0x52>
    391a:	2e 81       	ldd	r18, Y+6	; 0x06
    391c:	3f 81       	ldd	r19, Y+7	; 0x07
    391e:	8c 81       	ldd	r24, Y+4	; 0x04
    3920:	9d 81       	ldd	r25, Y+5	; 0x05
    3922:	28 17       	cp	r18, r24
    3924:	39 07       	cpc	r19, r25
    3926:	3c f4       	brge	.+14     	; 0x3936 <fputc+0x46>
    3928:	e8 81       	ld	r30, Y
    392a:	f9 81       	ldd	r31, Y+1	; 0x01
    392c:	cf 01       	movw	r24, r30
    392e:	01 96       	adiw	r24, 0x01	; 1
    3930:	99 83       	std	Y+1, r25	; 0x01
    3932:	88 83       	st	Y, r24
    3934:	10 83       	st	Z, r17
    3936:	8e 81       	ldd	r24, Y+6	; 0x06
    3938:	9f 81       	ldd	r25, Y+7	; 0x07
    393a:	01 96       	adiw	r24, 0x01	; 1
    393c:	9f 83       	std	Y+7, r25	; 0x07
    393e:	8e 83       	std	Y+6, r24	; 0x06
    3940:	e3 cf       	rjmp	.-58     	; 0x3908 <fputc+0x18>
    3942:	e8 85       	ldd	r30, Y+8	; 0x08
    3944:	f9 85       	ldd	r31, Y+9	; 0x09
    3946:	81 2f       	mov	r24, r17
    3948:	09 95       	icall
    394a:	89 2b       	or	r24, r25
    394c:	a1 f3       	breq	.-24     	; 0x3936 <fputc+0x46>
    394e:	da cf       	rjmp	.-76     	; 0x3904 <fputc+0x14>

00003950 <__ultoa_invert>:
__ultoa_invert():
    3950:	fa 01       	movw	r30, r20
    3952:	aa 27       	eor	r26, r26
    3954:	28 30       	cpi	r18, 0x08	; 8
    3956:	51 f1       	breq	.+84     	; 0x39ac <__ultoa_invert+0x5c>
    3958:	20 31       	cpi	r18, 0x10	; 16
    395a:	81 f1       	breq	.+96     	; 0x39bc <__ultoa_invert+0x6c>
    395c:	e8 94       	clt
    395e:	6f 93       	push	r22
    3960:	6e 7f       	andi	r22, 0xFE	; 254
    3962:	6e 5f       	subi	r22, 0xFE	; 254
    3964:	7f 4f       	sbci	r23, 0xFF	; 255
    3966:	8f 4f       	sbci	r24, 0xFF	; 255
    3968:	9f 4f       	sbci	r25, 0xFF	; 255
    396a:	af 4f       	sbci	r26, 0xFF	; 255
    396c:	b1 e0       	ldi	r27, 0x01	; 1
    396e:	3e d0       	rcall	.+124    	; 0x39ec <__ultoa_invert+0x9c>
    3970:	b4 e0       	ldi	r27, 0x04	; 4
    3972:	3c d0       	rcall	.+120    	; 0x39ec <__ultoa_invert+0x9c>
    3974:	67 0f       	add	r22, r23
    3976:	78 1f       	adc	r23, r24
    3978:	89 1f       	adc	r24, r25
    397a:	9a 1f       	adc	r25, r26
    397c:	a1 1d       	adc	r26, r1
    397e:	68 0f       	add	r22, r24
    3980:	79 1f       	adc	r23, r25
    3982:	8a 1f       	adc	r24, r26
    3984:	91 1d       	adc	r25, r1
    3986:	a1 1d       	adc	r26, r1
    3988:	6a 0f       	add	r22, r26
    398a:	71 1d       	adc	r23, r1
    398c:	81 1d       	adc	r24, r1
    398e:	91 1d       	adc	r25, r1
    3990:	a1 1d       	adc	r26, r1
    3992:	20 d0       	rcall	.+64     	; 0x39d4 <__ultoa_invert+0x84>
    3994:	09 f4       	brne	.+2      	; 0x3998 <__ultoa_invert+0x48>
    3996:	68 94       	set
    3998:	3f 91       	pop	r19
    399a:	2a e0       	ldi	r18, 0x0A	; 10
    399c:	26 9f       	mul	r18, r22
    399e:	11 24       	eor	r1, r1
    39a0:	30 19       	sub	r19, r0
    39a2:	30 5d       	subi	r19, 0xD0	; 208
    39a4:	31 93       	st	Z+, r19
    39a6:	de f6       	brtc	.-74     	; 0x395e <__ultoa_invert+0xe>
    39a8:	cf 01       	movw	r24, r30
    39aa:	08 95       	ret
    39ac:	46 2f       	mov	r20, r22
    39ae:	47 70       	andi	r20, 0x07	; 7
    39b0:	40 5d       	subi	r20, 0xD0	; 208
    39b2:	41 93       	st	Z+, r20
    39b4:	b3 e0       	ldi	r27, 0x03	; 3
    39b6:	0f d0       	rcall	.+30     	; 0x39d6 <__ultoa_invert+0x86>
    39b8:	c9 f7       	brne	.-14     	; 0x39ac <__ultoa_invert+0x5c>
    39ba:	f6 cf       	rjmp	.-20     	; 0x39a8 <__ultoa_invert+0x58>
    39bc:	46 2f       	mov	r20, r22
    39be:	4f 70       	andi	r20, 0x0F	; 15
    39c0:	40 5d       	subi	r20, 0xD0	; 208
    39c2:	4a 33       	cpi	r20, 0x3A	; 58
    39c4:	18 f0       	brcs	.+6      	; 0x39cc <__ultoa_invert+0x7c>
    39c6:	49 5d       	subi	r20, 0xD9	; 217
    39c8:	31 fd       	sbrc	r19, 1
    39ca:	40 52       	subi	r20, 0x20	; 32
    39cc:	41 93       	st	Z+, r20
    39ce:	02 d0       	rcall	.+4      	; 0x39d4 <__ultoa_invert+0x84>
    39d0:	a9 f7       	brne	.-22     	; 0x39bc <__ultoa_invert+0x6c>
    39d2:	ea cf       	rjmp	.-44     	; 0x39a8 <__ultoa_invert+0x58>
    39d4:	b4 e0       	ldi	r27, 0x04	; 4
    39d6:	a6 95       	lsr	r26
    39d8:	97 95       	ror	r25
    39da:	87 95       	ror	r24
    39dc:	77 95       	ror	r23
    39de:	67 95       	ror	r22
    39e0:	ba 95       	dec	r27
    39e2:	c9 f7       	brne	.-14     	; 0x39d6 <__ultoa_invert+0x86>
    39e4:	00 97       	sbiw	r24, 0x00	; 0
    39e6:	61 05       	cpc	r22, r1
    39e8:	71 05       	cpc	r23, r1
    39ea:	08 95       	ret
    39ec:	9b 01       	movw	r18, r22
    39ee:	ac 01       	movw	r20, r24
    39f0:	0a 2e       	mov	r0, r26
    39f2:	06 94       	lsr	r0
    39f4:	57 95       	ror	r21
    39f6:	47 95       	ror	r20
    39f8:	37 95       	ror	r19
    39fa:	27 95       	ror	r18
    39fc:	ba 95       	dec	r27
    39fe:	c9 f7       	brne	.-14     	; 0x39f2 <__ultoa_invert+0xa2>
    3a00:	62 0f       	add	r22, r18
    3a02:	73 1f       	adc	r23, r19
    3a04:	84 1f       	adc	r24, r20
    3a06:	95 1f       	adc	r25, r21
    3a08:	a0 1d       	adc	r26, r0
    3a0a:	08 95       	ret

00003a0c <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    3a0c:	f8 94       	cli

00003a0e <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    3a0e:	ff cf       	rjmp	.-2      	; 0x3a0e <__stop_program>
