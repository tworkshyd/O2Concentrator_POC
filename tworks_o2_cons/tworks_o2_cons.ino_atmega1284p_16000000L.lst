
C:\Users\habeeba\AppData\Local\Temp\arduino_build_217898/tworks_o2_cons.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 cb 00 	jmp	0x196	; 0x196 <__ctors_end>
       4:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       8:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
       c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      10:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      14:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      18:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      1c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      20:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      24:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      28:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      2c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      30:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      34:	0c 94 da 05 	jmp	0xbb4	; 0xbb4 <__vector_13>
      38:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      3c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      40:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      44:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      48:	0c 94 85 13 	jmp	0x270a	; 0x270a <__vector_18>
      4c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      50:	0c 94 a6 16 	jmp	0x2d4c	; 0x2d4c <__vector_20>
      54:	0c 94 dc 16 	jmp	0x2db8	; 0x2db8 <__vector_21>
      58:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      5c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      60:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      64:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      68:	0c 94 60 12 	jmp	0x24c0	; 0x24c0 <__vector_26>
      6c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      70:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      74:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      78:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      7c:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      80:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      84:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>
      88:	0c 94 f5 00 	jmp	0x1ea	; 0x1ea <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	30 2e       	mov	r3, r16
      8e:	33 2e       	mov	r3, r19
      90:	31 00       	.word	0x0031	; ????

00000092 <charTable>:
      92:	7e 30 6d 79 33 5b 5f 70 7f 7b 77 1f 0d 3d 4f 47     ~0my3[_p.{w..=OG
	...
      be:	80 01 80 00 7e 30 6d 79 33 5b 5f 70 7f 7b 00 00     ....~0my3[_p.{..
      ce:	00 00 00 00 00 77 1f 0d 3d 4f 47 00 37 00 00 00     .....w..=OG.7...
      de:	0e 00 00 00 67 00 00 00 00 00 00 00 00 00 00 00     ....g...........
      ee:	00 00 00 08 00 77 1f 0d 3d 4f 47 00 37 00 00 00     .....w..=OG.7...
      fe:	0e 00 15 1d 67 00 00 00 00 00 00 00 00 00 00 00     ....g...........
     10e:	00 00 00 00                                         ....

00000112 <digital_pin_to_timer_PGM>:
     112:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

00000132 <digital_pin_to_bit_mask_PGM>:
     132:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     142:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

00000152 <digital_pin_to_port_PGM>:
     152:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     162:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

00000172 <port_to_input_PGM>:
     172:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

0000017c <port_to_output_PGM>:
     17c:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

00000186 <port_to_mode_PGM>:
     186:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

00000190 <__ctors_start>:
__ctors_start():
     190:	2c 0b       	sbc	r18, r28
     192:	51 11       	cpse	r21, r1
     194:	10 17       	cp	r17, r16

00000196 <__ctors_end>:
__dtors_end():
     196:	11 24       	eor	r1, r1
     198:	1f be       	out	0x3f, r1	; 63
     19a:	cf ef       	ldi	r28, 0xFF	; 255
     19c:	d0 e4       	ldi	r29, 0x40	; 64
     19e:	de bf       	out	0x3e, r29	; 62
     1a0:	cd bf       	out	0x3d, r28	; 61

000001a2 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     1a2:	13 e0       	ldi	r17, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     1a4:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     1a6:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     1a8:	ea e2       	ldi	r30, 0x2A	; 42
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     1aa:	fe e3       	ldi	r31, 0x3E	; 62
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     1ac:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     1ae:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     1b2:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     1b4:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     1b6:	a8 3e       	cpi	r26, 0xE8	; 232
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     1b8:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     1ba:	d9 f7       	brne	.-10     	; 0x1b2 <__do_copy_data+0x10>

000001bc <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     1bc:	26 e0       	ldi	r18, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     1be:	a8 ee       	ldi	r26, 0xE8	; 232
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     1c0:	b3 e0       	ldi	r27, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     1c2:	01 c0       	rjmp	.+2      	; 0x1c6 <.do_clear_bss_start>

000001c4 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     1c4:	1d 92       	st	X+, r1

000001c6 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     1c6:	a3 34       	cpi	r26, 0x43	; 67
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     1c8:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     1ca:	e1 f7       	brne	.-8      	; 0x1c4 <.do_clear_bss_loop>

000001cc <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     1cc:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     1ce:	cb ec       	ldi	r28, 0xCB	; 203
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     1d0:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     1d2:	04 c0       	rjmp	.+8      	; 0x1dc <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     1d4:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     1d6:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     1d8:	0e 94 2c 1c 	call	0x3858	; 0x3858 <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     1dc:	c8 3c       	cpi	r28, 0xC8	; 200
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     1de:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     1e0:	c9 f7       	brne	.-14     	; 0x1d4 <__do_global_ctors+0x8>
     1e2:	0e 94 ab 19 	call	0x3356	; 0x3356 <main>
     1e6:	0c 94 13 1f 	jmp	0x3e26	; 0x3e26 <_exit>

000001ea <__bad_interrupt>:
__vector_22():
     1ea:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000001ee <lcd_clear_buf(char*)>:
_Z13lcd_clear_bufPc():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:466

    lcd.clear();
    lcd.setCursor(0, 3);
    //  "1.3.5.7.9.........20"
    lcd.print("Testing over...!!   ");
    new_delay_msecs (2000);
     1ee:	00 97       	sbiw	r24, 0x00	; 0
     1f0:	49 f0       	breq	.+18     	; 0x204 <lcd_clear_buf(char*)+0x16>
     1f2:	fc 01       	movw	r30, r24
     1f4:	9c 01       	movw	r18, r24
     1f6:	2c 5e       	subi	r18, 0xEC	; 236
     1f8:	3f 4f       	sbci	r19, 0xFF	; 255
     1fa:	40 e2       	ldi	r20, 0x20	; 32
     1fc:	41 93       	st	Z+, r20
     1fe:	2e 17       	cp	r18, r30
     200:	3f 07       	cpc	r19, r31
     202:	e1 f7       	brne	.-8      	; 0x1fc <lcd_clear_buf(char*)+0xe>
     204:	fc 01       	movw	r30, r24
     206:	14 8a       	std	Z+20, r1	; 0x14
     208:	08 95       	ret

0000020a <init_7segments()>:
_Z14init_7segmentsv():
     20a:	40 e0       	ldi	r20, 0x00	; 0
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	60 e0       	ldi	r22, 0x00	; 0
     210:	89 e6       	ldi	r24, 0x69	; 105
     212:	94 e0       	ldi	r25, 0x04	; 4
     214:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LedControl::shutdown(int, bool)>
     218:	48 e0       	ldi	r20, 0x08	; 8
     21a:	50 e0       	ldi	r21, 0x00	; 0
     21c:	70 e0       	ldi	r23, 0x00	; 0
     21e:	60 e0       	ldi	r22, 0x00	; 0
     220:	89 e6       	ldi	r24, 0x69	; 105
     222:	94 e0       	ldi	r25, 0x04	; 4
     224:	0e 94 61 0d 	call	0x1ac2	; 0x1ac2 <LedControl::setIntensity(int, int)>
     228:	70 e0       	ldi	r23, 0x00	; 0
     22a:	60 e0       	ldi	r22, 0x00	; 0
     22c:	89 e6       	ldi	r24, 0x69	; 105
     22e:	94 e0       	ldi	r25, 0x04	; 4
     230:	0c 94 73 0d 	jmp	0x1ae6	; 0x1ae6 <LedControl::clearDisplay(int)>

00000234 <display_banner()>:
_Z14display_bannerv():
     234:	20 e1       	ldi	r18, 0x10	; 16
     236:	50 e0       	ldi	r21, 0x00	; 0
     238:	40 e0       	ldi	r20, 0x00	; 0
     23a:	70 e0       	ldi	r23, 0x00	; 0
     23c:	60 e0       	ldi	r22, 0x00	; 0
     23e:	89 e6       	ldi	r24, 0x69	; 105
     240:	94 e0       	ldi	r25, 0x04	; 4
     242:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LedControl::setRow(int, int, unsigned char)>
     246:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     24a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     24e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     252:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     256:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <delay>
     25a:	20 e1       	ldi	r18, 0x10	; 16
     25c:	41 e0       	ldi	r20, 0x01	; 1
     25e:	50 e0       	ldi	r21, 0x00	; 0
     260:	70 e0       	ldi	r23, 0x00	; 0
     262:	60 e0       	ldi	r22, 0x00	; 0
     264:	89 e6       	ldi	r24, 0x69	; 105
     266:	94 e0       	ldi	r25, 0x04	; 4
     268:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LedControl::setRow(int, int, unsigned char)>
     26c:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     270:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     274:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     278:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     27c:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <delay>
     280:	20 e1       	ldi	r18, 0x10	; 16
     282:	42 e0       	ldi	r20, 0x02	; 2
     284:	50 e0       	ldi	r21, 0x00	; 0
     286:	70 e0       	ldi	r23, 0x00	; 0
     288:	60 e0       	ldi	r22, 0x00	; 0
     28a:	89 e6       	ldi	r24, 0x69	; 105
     28c:	94 e0       	ldi	r25, 0x04	; 4
     28e:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LedControl::setRow(int, int, unsigned char)>
     292:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     296:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     29a:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     29e:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2a2:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <delay>
     2a6:	20 e1       	ldi	r18, 0x10	; 16
     2a8:	43 e0       	ldi	r20, 0x03	; 3
     2aa:	50 e0       	ldi	r21, 0x00	; 0
     2ac:	70 e0       	ldi	r23, 0x00	; 0
     2ae:	60 e0       	ldi	r22, 0x00	; 0
     2b0:	89 e6       	ldi	r24, 0x69	; 105
     2b2:	94 e0       	ldi	r25, 0x04	; 4
     2b4:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LedControl::setRow(int, int, unsigned char)>
     2b8:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2bc:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2c0:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2c4:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2c8:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <delay>
     2cc:	20 e1       	ldi	r18, 0x10	; 16
     2ce:	44 e0       	ldi	r20, 0x04	; 4
     2d0:	50 e0       	ldi	r21, 0x00	; 0
     2d2:	70 e0       	ldi	r23, 0x00	; 0
     2d4:	60 e0       	ldi	r22, 0x00	; 0
     2d6:	89 e6       	ldi	r24, 0x69	; 105
     2d8:	94 e0       	ldi	r25, 0x04	; 4
     2da:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LedControl::setRow(int, int, unsigned char)>
     2de:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     2e2:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     2e6:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     2ea:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     2ee:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <delay>
     2f2:	20 e1       	ldi	r18, 0x10	; 16
     2f4:	45 e0       	ldi	r20, 0x05	; 5
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	70 e0       	ldi	r23, 0x00	; 0
     2fa:	60 e0       	ldi	r22, 0x00	; 0
     2fc:	89 e6       	ldi	r24, 0x69	; 105
     2fe:	94 e0       	ldi	r25, 0x04	; 4
     300:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LedControl::setRow(int, int, unsigned char)>
     304:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     308:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     30c:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     310:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     314:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <delay>
     318:	20 e1       	ldi	r18, 0x10	; 16
     31a:	46 e0       	ldi	r20, 0x06	; 6
     31c:	50 e0       	ldi	r21, 0x00	; 0
     31e:	70 e0       	ldi	r23, 0x00	; 0
     320:	60 e0       	ldi	r22, 0x00	; 0
     322:	89 e6       	ldi	r24, 0x69	; 105
     324:	94 e0       	ldi	r25, 0x04	; 4
     326:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LedControl::setRow(int, int, unsigned char)>
     32a:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     32e:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     332:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     336:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     33a:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <delay>
     33e:	20 e1       	ldi	r18, 0x10	; 16
     340:	47 e0       	ldi	r20, 0x07	; 7
     342:	50 e0       	ldi	r21, 0x00	; 0
     344:	70 e0       	ldi	r23, 0x00	; 0
     346:	60 e0       	ldi	r22, 0x00	; 0
     348:	89 e6       	ldi	r24, 0x69	; 105
     34a:	94 e0       	ldi	r25, 0x04	; 4
     34c:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LedControl::setRow(int, int, unsigned char)>
     350:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     354:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     358:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     35c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     360:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <delay>

00000364 <scrollDigits()>:
_Z12scrollDigitsv():
     364:	0f 93       	push	r16
     366:	cf 93       	push	r28
     368:	df 93       	push	r29
     36a:	cd e0       	ldi	r28, 0x0D	; 13
     36c:	d0 e0       	ldi	r29, 0x00	; 0
     36e:	00 e0       	ldi	r16, 0x00	; 0
     370:	28 e0       	ldi	r18, 0x08	; 8
     372:	47 e0       	ldi	r20, 0x07	; 7
     374:	50 e0       	ldi	r21, 0x00	; 0
     376:	70 e0       	ldi	r23, 0x00	; 0
     378:	60 e0       	ldi	r22, 0x00	; 0
     37a:	89 e6       	ldi	r24, 0x69	; 105
     37c:	94 e0       	ldi	r25, 0x04	; 4
     37e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     382:	28 e0       	ldi	r18, 0x08	; 8
     384:	46 e0       	ldi	r20, 0x06	; 6
     386:	50 e0       	ldi	r21, 0x00	; 0
     388:	70 e0       	ldi	r23, 0x00	; 0
     38a:	60 e0       	ldi	r22, 0x00	; 0
     38c:	89 e6       	ldi	r24, 0x69	; 105
     38e:	94 e0       	ldi	r25, 0x04	; 4
     390:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     394:	28 e0       	ldi	r18, 0x08	; 8
     396:	45 e0       	ldi	r20, 0x05	; 5
     398:	50 e0       	ldi	r21, 0x00	; 0
     39a:	70 e0       	ldi	r23, 0x00	; 0
     39c:	60 e0       	ldi	r22, 0x00	; 0
     39e:	89 e6       	ldi	r24, 0x69	; 105
     3a0:	94 e0       	ldi	r25, 0x04	; 4
     3a2:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     3a6:	28 e0       	ldi	r18, 0x08	; 8
     3a8:	44 e0       	ldi	r20, 0x04	; 4
     3aa:	50 e0       	ldi	r21, 0x00	; 0
     3ac:	70 e0       	ldi	r23, 0x00	; 0
     3ae:	60 e0       	ldi	r22, 0x00	; 0
     3b0:	89 e6       	ldi	r24, 0x69	; 105
     3b2:	94 e0       	ldi	r25, 0x04	; 4
     3b4:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     3b8:	28 e0       	ldi	r18, 0x08	; 8
     3ba:	43 e0       	ldi	r20, 0x03	; 3
     3bc:	50 e0       	ldi	r21, 0x00	; 0
     3be:	70 e0       	ldi	r23, 0x00	; 0
     3c0:	60 e0       	ldi	r22, 0x00	; 0
     3c2:	89 e6       	ldi	r24, 0x69	; 105
     3c4:	94 e0       	ldi	r25, 0x04	; 4
     3c6:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     3ca:	28 e0       	ldi	r18, 0x08	; 8
     3cc:	42 e0       	ldi	r20, 0x02	; 2
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	70 e0       	ldi	r23, 0x00	; 0
     3d2:	60 e0       	ldi	r22, 0x00	; 0
     3d4:	89 e6       	ldi	r24, 0x69	; 105
     3d6:	94 e0       	ldi	r25, 0x04	; 4
     3d8:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     3dc:	28 e0       	ldi	r18, 0x08	; 8
     3de:	41 e0       	ldi	r20, 0x01	; 1
     3e0:	50 e0       	ldi	r21, 0x00	; 0
     3e2:	70 e0       	ldi	r23, 0x00	; 0
     3e4:	60 e0       	ldi	r22, 0x00	; 0
     3e6:	89 e6       	ldi	r24, 0x69	; 105
     3e8:	94 e0       	ldi	r25, 0x04	; 4
     3ea:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     3ee:	28 e0       	ldi	r18, 0x08	; 8
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	40 e0       	ldi	r20, 0x00	; 0
     3f4:	70 e0       	ldi	r23, 0x00	; 0
     3f6:	60 e0       	ldi	r22, 0x00	; 0
     3f8:	89 e6       	ldi	r24, 0x69	; 105
     3fa:	94 e0       	ldi	r25, 0x04	; 4
     3fc:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     400:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     404:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     408:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     40c:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     410:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <delay>
     414:	21 97       	sbiw	r28, 0x01	; 1
     416:	09 f0       	breq	.+2      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     418:	aa cf       	rjmp	.-172    	; 0x36e <scrollDigits()+0xa>
     41a:	70 e0       	ldi	r23, 0x00	; 0
     41c:	60 e0       	ldi	r22, 0x00	; 0
     41e:	89 e6       	ldi	r24, 0x69	; 105
     420:	94 e0       	ldi	r25, 0x04	; 4
     422:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LedControl::clearDisplay(int)>
     426:	60 91 00 01 	lds	r22, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
     42a:	70 91 01 01 	lds	r23, 0x0101	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
     42e:	80 91 02 01 	lds	r24, 0x0102	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
     432:	90 91 03 01 	lds	r25, 0x0103	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
     436:	df 91       	pop	r29
     438:	cf 91       	pop	r28
     43a:	0f 91       	pop	r16
     43c:	0c 94 f4 13 	jmp	0x27e8	; 0x27e8 <delay>

00000440 <test_7segments()>:
_Z14test_7segmentsv():
     440:	0e 94 1a 01 	call	0x234	; 0x234 <display_banner()>
     444:	0c 94 b2 01 	jmp	0x364	; 0x364 <scrollDigits()>

00000448 <display_o2(float)>:
_Z10display_o2f():
     448:	ef 92       	push	r14
     44a:	ff 92       	push	r15
     44c:	0f 93       	push	r16
     44e:	cf 93       	push	r28
     450:	df 93       	push	r29
     452:	20 e0       	ldi	r18, 0x00	; 0
     454:	30 e0       	ldi	r19, 0x00	; 0
     456:	40 e2       	ldi	r20, 0x20	; 32
     458:	51 e4       	ldi	r21, 0x41	; 65
     45a:	0e 94 84 1b 	call	0x3708	; 0x3708 <__mulsf3>
     45e:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
     462:	eb 01       	movw	r28, r22
     464:	cb 01       	movw	r24, r22
     466:	64 e6       	ldi	r22, 0x64	; 100
     468:	70 e0       	ldi	r23, 0x00	; 0
     46a:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
     46e:	cb 01       	movw	r24, r22
     470:	2a e0       	ldi	r18, 0x0A	; 10
     472:	e2 2e       	mov	r14, r18
     474:	f1 2c       	mov	r15, r1
     476:	b7 01       	movw	r22, r14
     478:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
     47c:	00 e0       	ldi	r16, 0x00	; 0
     47e:	28 2f       	mov	r18, r24
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	40 e0       	ldi	r20, 0x00	; 0
     484:	70 e0       	ldi	r23, 0x00	; 0
     486:	60 e0       	ldi	r22, 0x00	; 0
     488:	89 e6       	ldi	r24, 0x69	; 105
     48a:	94 e0       	ldi	r25, 0x04	; 4
     48c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     490:	ce 01       	movw	r24, r28
     492:	b7 01       	movw	r22, r14
     494:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
     498:	c8 2f       	mov	r28, r24
     49a:	cb 01       	movw	r24, r22
     49c:	b7 01       	movw	r22, r14
     49e:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
     4a2:	01 e0       	ldi	r16, 0x01	; 1
     4a4:	28 2f       	mov	r18, r24
     4a6:	41 e0       	ldi	r20, 0x01	; 1
     4a8:	50 e0       	ldi	r21, 0x00	; 0
     4aa:	70 e0       	ldi	r23, 0x00	; 0
     4ac:	60 e0       	ldi	r22, 0x00	; 0
     4ae:	89 e6       	ldi	r24, 0x69	; 105
     4b0:	94 e0       	ldi	r25, 0x04	; 4
     4b2:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     4b6:	00 e0       	ldi	r16, 0x00	; 0
     4b8:	2c 2f       	mov	r18, r28
     4ba:	42 e0       	ldi	r20, 0x02	; 2
     4bc:	50 e0       	ldi	r21, 0x00	; 0
     4be:	70 e0       	ldi	r23, 0x00	; 0
     4c0:	60 e0       	ldi	r22, 0x00	; 0
     4c2:	89 e6       	ldi	r24, 0x69	; 105
     4c4:	94 e0       	ldi	r25, 0x04	; 4
     4c6:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     4ca:	df 91       	pop	r29
     4cc:	cf 91       	pop	r28
     4ce:	0f 91       	pop	r16
     4d0:	ff 90       	pop	r15
     4d2:	ef 90       	pop	r14
     4d4:	08 95       	ret

000004d6 <display_run_hours(unsigned long)>:
_Z17display_run_hoursm():
     4d6:	4f 92       	push	r4
     4d8:	5f 92       	push	r5
     4da:	6f 92       	push	r6
     4dc:	7f 92       	push	r7
     4de:	8f 92       	push	r8
     4e0:	9f 92       	push	r9
     4e2:	af 92       	push	r10
     4e4:	bf 92       	push	r11
     4e6:	cf 92       	push	r12
     4e8:	df 92       	push	r13
     4ea:	ef 92       	push	r14
     4ec:	ff 92       	push	r15
     4ee:	0f 93       	push	r16
     4f0:	1f 93       	push	r17
     4f2:	cf 93       	push	r28
     4f4:	df 93       	push	r29
     4f6:	4b 01       	movw	r8, r22
     4f8:	5c 01       	movw	r10, r24
     4fa:	8a e0       	ldi	r24, 0x0A	; 10
     4fc:	c8 2e       	mov	r12, r24
     4fe:	d1 2c       	mov	r13, r1
     500:	e1 2c       	mov	r14, r1
     502:	f1 2c       	mov	r15, r1
     504:	c5 01       	movw	r24, r10
     506:	a7 01       	movw	r20, r14
     508:	96 01       	movw	r18, r12
     50a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
     50e:	76 2e       	mov	r7, r22
     510:	ca 01       	movw	r24, r20
     512:	b9 01       	movw	r22, r18
     514:	a7 01       	movw	r20, r14
     516:	96 01       	movw	r18, r12
     518:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
     51c:	c6 2f       	mov	r28, r22
     51e:	66 2e       	mov	r6, r22
     520:	c5 01       	movw	r24, r10
     522:	b4 01       	movw	r22, r8
     524:	24 e6       	ldi	r18, 0x64	; 100
     526:	30 e0       	ldi	r19, 0x00	; 0
     528:	40 e0       	ldi	r20, 0x00	; 0
     52a:	50 e0       	ldi	r21, 0x00	; 0
     52c:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
     530:	ca 01       	movw	r24, r20
     532:	b9 01       	movw	r22, r18
     534:	a7 01       	movw	r20, r14
     536:	96 01       	movw	r18, r12
     538:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
     53c:	d6 2f       	mov	r29, r22
     53e:	56 2e       	mov	r5, r22
     540:	c5 01       	movw	r24, r10
     542:	b4 01       	movw	r22, r8
     544:	28 ee       	ldi	r18, 0xE8	; 232
     546:	33 e0       	ldi	r19, 0x03	; 3
     548:	40 e0       	ldi	r20, 0x00	; 0
     54a:	50 e0       	ldi	r21, 0x00	; 0
     54c:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
     550:	ca 01       	movw	r24, r20
     552:	b9 01       	movw	r22, r18
     554:	a7 01       	movw	r20, r14
     556:	96 01       	movw	r18, r12
     558:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
     55c:	16 2f       	mov	r17, r22
     55e:	46 2e       	mov	r4, r22
     560:	c5 01       	movw	r24, r10
     562:	b4 01       	movw	r22, r8
     564:	20 e1       	ldi	r18, 0x10	; 16
     566:	37 e2       	ldi	r19, 0x27	; 39
     568:	40 e0       	ldi	r20, 0x00	; 0
     56a:	50 e0       	ldi	r21, 0x00	; 0
     56c:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
     570:	ca 01       	movw	r24, r20
     572:	b9 01       	movw	r22, r18
     574:	a7 01       	movw	r20, r14
     576:	96 01       	movw	r18, r12
     578:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
     57c:	f6 2e       	mov	r15, r22
     57e:	00 e0       	ldi	r16, 0x00	; 0
     580:	26 2f       	mov	r18, r22
     582:	43 e0       	ldi	r20, 0x03	; 3
     584:	50 e0       	ldi	r21, 0x00	; 0
     586:	70 e0       	ldi	r23, 0x00	; 0
     588:	60 e0       	ldi	r22, 0x00	; 0
     58a:	89 e6       	ldi	r24, 0x69	; 105
     58c:	94 e0       	ldi	r25, 0x04	; 4
     58e:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     592:	21 2f       	mov	r18, r17
     594:	44 e0       	ldi	r20, 0x04	; 4
     596:	50 e0       	ldi	r21, 0x00	; 0
     598:	70 e0       	ldi	r23, 0x00	; 0
     59a:	60 e0       	ldi	r22, 0x00	; 0
     59c:	89 e6       	ldi	r24, 0x69	; 105
     59e:	94 e0       	ldi	r25, 0x04	; 4
     5a0:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     5a4:	2d 2f       	mov	r18, r29
     5a6:	45 e0       	ldi	r20, 0x05	; 5
     5a8:	50 e0       	ldi	r21, 0x00	; 0
     5aa:	70 e0       	ldi	r23, 0x00	; 0
     5ac:	60 e0       	ldi	r22, 0x00	; 0
     5ae:	89 e6       	ldi	r24, 0x69	; 105
     5b0:	94 e0       	ldi	r25, 0x04	; 4
     5b2:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     5b6:	2c 2f       	mov	r18, r28
     5b8:	46 e0       	ldi	r20, 0x06	; 6
     5ba:	50 e0       	ldi	r21, 0x00	; 0
     5bc:	70 e0       	ldi	r23, 0x00	; 0
     5be:	60 e0       	ldi	r22, 0x00	; 0
     5c0:	89 e6       	ldi	r24, 0x69	; 105
     5c2:	94 e0       	ldi	r25, 0x04	; 4
     5c4:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     5c8:	27 2d       	mov	r18, r7
     5ca:	47 e0       	ldi	r20, 0x07	; 7
     5cc:	50 e0       	ldi	r21, 0x00	; 0
     5ce:	70 e0       	ldi	r23, 0x00	; 0
     5d0:	60 e0       	ldi	r22, 0x00	; 0
     5d2:	89 e6       	ldi	r24, 0x69	; 105
     5d4:	94 e0       	ldi	r25, 0x04	; 4
     5d6:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     5da:	ff 20       	and	r15, r15
     5dc:	09 f4       	brne	.+2      	; 0x5e0 <display_run_hours(unsigned long)+0x10a>
     5de:	4b c0       	rjmp	.+150    	; 0x676 <display_run_hours(unsigned long)+0x1a0>
     5e0:	2f 2d       	mov	r18, r15
     5e2:	43 e0       	ldi	r20, 0x03	; 3
     5e4:	50 e0       	ldi	r21, 0x00	; 0
     5e6:	70 e0       	ldi	r23, 0x00	; 0
     5e8:	60 e0       	ldi	r22, 0x00	; 0
     5ea:	89 e6       	ldi	r24, 0x69	; 105
     5ec:	94 e0       	ldi	r25, 0x04	; 4
     5ee:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     5f2:	44 20       	and	r4, r4
     5f4:	09 f4       	brne	.+2      	; 0x5f8 <display_run_hours(unsigned long)+0x122>
     5f6:	49 c0       	rjmp	.+146    	; 0x68a <display_run_hours(unsigned long)+0x1b4>
     5f8:	00 e0       	ldi	r16, 0x00	; 0
     5fa:	21 2f       	mov	r18, r17
     5fc:	44 e0       	ldi	r20, 0x04	; 4
     5fe:	50 e0       	ldi	r21, 0x00	; 0
     600:	70 e0       	ldi	r23, 0x00	; 0
     602:	60 e0       	ldi	r22, 0x00	; 0
     604:	89 e6       	ldi	r24, 0x69	; 105
     606:	94 e0       	ldi	r25, 0x04	; 4
     608:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     60c:	55 20       	and	r5, r5
     60e:	09 f4       	brne	.+2      	; 0x612 <display_run_hours(unsigned long)+0x13c>
     610:	46 c0       	rjmp	.+140    	; 0x69e <display_run_hours(unsigned long)+0x1c8>
     612:	00 e0       	ldi	r16, 0x00	; 0
     614:	2d 2f       	mov	r18, r29
     616:	45 e0       	ldi	r20, 0x05	; 5
     618:	50 e0       	ldi	r21, 0x00	; 0
     61a:	70 e0       	ldi	r23, 0x00	; 0
     61c:	60 e0       	ldi	r22, 0x00	; 0
     61e:	89 e6       	ldi	r24, 0x69	; 105
     620:	94 e0       	ldi	r25, 0x04	; 4
     622:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     626:	66 20       	and	r6, r6
     628:	09 f4       	brne	.+2      	; 0x62c <display_run_hours(unsigned long)+0x156>
     62a:	43 c0       	rjmp	.+134    	; 0x6b2 <display_run_hours(unsigned long)+0x1dc>
     62c:	00 e0       	ldi	r16, 0x00	; 0
     62e:	2c 2f       	mov	r18, r28
     630:	46 e0       	ldi	r20, 0x06	; 6
     632:	50 e0       	ldi	r21, 0x00	; 0
     634:	70 e0       	ldi	r23, 0x00	; 0
     636:	60 e0       	ldi	r22, 0x00	; 0
     638:	89 e6       	ldi	r24, 0x69	; 105
     63a:	94 e0       	ldi	r25, 0x04	; 4
     63c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     640:	00 e0       	ldi	r16, 0x00	; 0
     642:	27 2d       	mov	r18, r7
     644:	47 e0       	ldi	r20, 0x07	; 7
     646:	50 e0       	ldi	r21, 0x00	; 0
     648:	70 e0       	ldi	r23, 0x00	; 0
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	89 e6       	ldi	r24, 0x69	; 105
     64e:	94 e0       	ldi	r25, 0x04	; 4
     650:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     654:	df 91       	pop	r29
     656:	cf 91       	pop	r28
     658:	1f 91       	pop	r17
     65a:	0f 91       	pop	r16
     65c:	ff 90       	pop	r15
     65e:	ef 90       	pop	r14
     660:	df 90       	pop	r13
     662:	cf 90       	pop	r12
     664:	bf 90       	pop	r11
     666:	af 90       	pop	r10
     668:	9f 90       	pop	r9
     66a:	8f 90       	pop	r8
     66c:	7f 90       	pop	r7
     66e:	6f 90       	pop	r6
     670:	5f 90       	pop	r5
     672:	4f 90       	pop	r4
     674:	08 95       	ret
     676:	20 e0       	ldi	r18, 0x00	; 0
     678:	43 e0       	ldi	r20, 0x03	; 3
     67a:	50 e0       	ldi	r21, 0x00	; 0
     67c:	70 e0       	ldi	r23, 0x00	; 0
     67e:	60 e0       	ldi	r22, 0x00	; 0
     680:	89 e6       	ldi	r24, 0x69	; 105
     682:	94 e0       	ldi	r25, 0x04	; 4
     684:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LedControl::setRow(int, int, unsigned char)>
     688:	b4 cf       	rjmp	.-152    	; 0x5f2 <display_run_hours(unsigned long)+0x11c>
     68a:	20 e0       	ldi	r18, 0x00	; 0
     68c:	44 e0       	ldi	r20, 0x04	; 4
     68e:	50 e0       	ldi	r21, 0x00	; 0
     690:	70 e0       	ldi	r23, 0x00	; 0
     692:	60 e0       	ldi	r22, 0x00	; 0
     694:	89 e6       	ldi	r24, 0x69	; 105
     696:	94 e0       	ldi	r25, 0x04	; 4
     698:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LedControl::setRow(int, int, unsigned char)>
     69c:	b7 cf       	rjmp	.-146    	; 0x60c <display_run_hours(unsigned long)+0x136>
     69e:	20 e0       	ldi	r18, 0x00	; 0
     6a0:	45 e0       	ldi	r20, 0x05	; 5
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	89 e6       	ldi	r24, 0x69	; 105
     6aa:	94 e0       	ldi	r25, 0x04	; 4
     6ac:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LedControl::setRow(int, int, unsigned char)>
     6b0:	ba cf       	rjmp	.-140    	; 0x626 <display_run_hours(unsigned long)+0x150>
     6b2:	20 e0       	ldi	r18, 0x00	; 0
     6b4:	46 e0       	ldi	r20, 0x06	; 6
     6b6:	50 e0       	ldi	r21, 0x00	; 0
     6b8:	70 e0       	ldi	r23, 0x00	; 0
     6ba:	60 e0       	ldi	r22, 0x00	; 0
     6bc:	89 e6       	ldi	r24, 0x69	; 105
     6be:	94 e0       	ldi	r25, 0x04	; 4
     6c0:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LedControl::setRow(int, int, unsigned char)>
     6c4:	bd cf       	rjmp	.-134    	; 0x640 <display_run_hours(unsigned long)+0x16a>

000006c6 <display_run_time(unsigned int, unsigned int)>:
_Z16display_run_timejj():
     6c6:	ef 92       	push	r14
     6c8:	ff 92       	push	r15
     6ca:	0f 93       	push	r16
     6cc:	1f 93       	push	r17
     6ce:	cf 93       	push	r28
     6d0:	df 93       	push	r29
     6d2:	9c 01       	movw	r18, r24
     6d4:	cb 01       	movw	r24, r22
     6d6:	6c e3       	ldi	r22, 0x3C	; 60
     6d8:	70 e0       	ldi	r23, 0x00	; 0
     6da:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
     6de:	ec 01       	movw	r28, r24
     6e0:	c9 01       	movw	r24, r18
     6e2:	67 ee       	ldi	r22, 0xE7	; 231
     6e4:	73 e0       	ldi	r23, 0x03	; 3
     6e6:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
     6ea:	fc 01       	movw	r30, r24
     6ec:	2a e0       	ldi	r18, 0x0A	; 10
     6ee:	30 e0       	ldi	r19, 0x00	; 0
     6f0:	ce 01       	movw	r24, r28
     6f2:	b9 01       	movw	r22, r18
     6f4:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
     6f8:	16 2f       	mov	r17, r22
     6fa:	d8 2f       	mov	r29, r24
     6fc:	cf 01       	movw	r24, r30
     6fe:	b9 01       	movw	r22, r18
     700:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
     704:	f8 2e       	mov	r15, r24
     706:	cb 01       	movw	r24, r22
     708:	b9 01       	movw	r22, r18
     70a:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
     70e:	c8 2f       	mov	r28, r24
     710:	e8 2e       	mov	r14, r24
     712:	cf 01       	movw	r24, r30
     714:	64 e6       	ldi	r22, 0x64	; 100
     716:	70 e0       	ldi	r23, 0x00	; 0
     718:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
     71c:	26 2f       	mov	r18, r22
     71e:	66 23       	and	r22, r22
     720:	c9 f1       	breq	.+114    	; 0x794 <display_run_time(unsigned int, unsigned int)+0xce>
     722:	00 e0       	ldi	r16, 0x00	; 0
     724:	43 e0       	ldi	r20, 0x03	; 3
     726:	50 e0       	ldi	r21, 0x00	; 0
     728:	70 e0       	ldi	r23, 0x00	; 0
     72a:	60 e0       	ldi	r22, 0x00	; 0
     72c:	89 e6       	ldi	r24, 0x69	; 105
     72e:	94 e0       	ldi	r25, 0x04	; 4
     730:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     734:	ee 20       	and	r14, r14
     736:	c1 f1       	breq	.+112    	; 0x7a8 <display_run_time(unsigned int, unsigned int)+0xe2>
     738:	00 e0       	ldi	r16, 0x00	; 0
     73a:	2c 2f       	mov	r18, r28
     73c:	44 e0       	ldi	r20, 0x04	; 4
     73e:	50 e0       	ldi	r21, 0x00	; 0
     740:	70 e0       	ldi	r23, 0x00	; 0
     742:	60 e0       	ldi	r22, 0x00	; 0
     744:	89 e6       	ldi	r24, 0x69	; 105
     746:	94 e0       	ldi	r25, 0x04	; 4
     748:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     74c:	01 e0       	ldi	r16, 0x01	; 1
     74e:	2f 2d       	mov	r18, r15
     750:	45 e0       	ldi	r20, 0x05	; 5
     752:	50 e0       	ldi	r21, 0x00	; 0
     754:	70 e0       	ldi	r23, 0x00	; 0
     756:	60 e0       	ldi	r22, 0x00	; 0
     758:	89 e6       	ldi	r24, 0x69	; 105
     75a:	94 e0       	ldi	r25, 0x04	; 4
     75c:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     760:	00 e0       	ldi	r16, 0x00	; 0
     762:	21 2f       	mov	r18, r17
     764:	46 e0       	ldi	r20, 0x06	; 6
     766:	50 e0       	ldi	r21, 0x00	; 0
     768:	70 e0       	ldi	r23, 0x00	; 0
     76a:	60 e0       	ldi	r22, 0x00	; 0
     76c:	89 e6       	ldi	r24, 0x69	; 105
     76e:	94 e0       	ldi	r25, 0x04	; 4
     770:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     774:	2d 2f       	mov	r18, r29
     776:	47 e0       	ldi	r20, 0x07	; 7
     778:	50 e0       	ldi	r21, 0x00	; 0
     77a:	70 e0       	ldi	r23, 0x00	; 0
     77c:	60 e0       	ldi	r22, 0x00	; 0
     77e:	89 e6       	ldi	r24, 0x69	; 105
     780:	94 e0       	ldi	r25, 0x04	; 4
     782:	0e 94 48 0e 	call	0x1c90	; 0x1c90 <LedControl::setDigit(int, int, unsigned char, bool)>
     786:	df 91       	pop	r29
     788:	cf 91       	pop	r28
     78a:	1f 91       	pop	r17
     78c:	0f 91       	pop	r16
     78e:	ff 90       	pop	r15
     790:	ef 90       	pop	r14
     792:	08 95       	ret
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	43 e0       	ldi	r20, 0x03	; 3
     798:	50 e0       	ldi	r21, 0x00	; 0
     79a:	70 e0       	ldi	r23, 0x00	; 0
     79c:	60 e0       	ldi	r22, 0x00	; 0
     79e:	89 e6       	ldi	r24, 0x69	; 105
     7a0:	94 e0       	ldi	r25, 0x04	; 4
     7a2:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LedControl::setRow(int, int, unsigned char)>
     7a6:	c6 cf       	rjmp	.-116    	; 0x734 <display_run_time(unsigned int, unsigned int)+0x6e>
     7a8:	20 e0       	ldi	r18, 0x00	; 0
     7aa:	44 e0       	ldi	r20, 0x04	; 4
     7ac:	50 e0       	ldi	r21, 0x00	; 0
     7ae:	70 e0       	ldi	r23, 0x00	; 0
     7b0:	60 e0       	ldi	r22, 0x00	; 0
     7b2:	89 e6       	ldi	r24, 0x69	; 105
     7b4:	94 e0       	ldi	r25, 0x04	; 4
     7b6:	0e 94 2b 0e 	call	0x1c56	; 0x1c56 <LedControl::setRow(int, int, unsigned char)>
     7ba:	c8 cf       	rjmp	.-112    	; 0x74c <display_run_time(unsigned int, unsigned int)+0x86>

000007bc <log_dump()>:
_Z8log_dumpv():
     7bc:	0f 93       	push	r16
     7be:	1f 93       	push	r17
     7c0:	cf 93       	push	r28
     7c2:	df 93       	push	r29
     7c4:	20 91 5d 04 	lds	r18, 0x045D	; 0x80045d <systemtick_secs>
     7c8:	90 91 5c 04 	lds	r25, 0x045C	; 0x80045c <systemtick_mins>
     7cc:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <systemtick_hrs>
     7d0:	1f 92       	push	r1
     7d2:	2f 93       	push	r18
     7d4:	1f 92       	push	r1
     7d6:	9f 93       	push	r25
     7d8:	1f 92       	push	r1
     7da:	8f 93       	push	r24
     7dc:	08 e0       	ldi	r16, 0x08	; 8
     7de:	11 e0       	ldi	r17, 0x01	; 1
     7e0:	1f 93       	push	r17
     7e2:	0f 93       	push	r16
     7e4:	cc e0       	ldi	r28, 0x0C	; 12
     7e6:	d4 e0       	ldi	r29, 0x04	; 4
     7e8:	df 93       	push	r29
     7ea:	cf 93       	push	r28
     7ec:	0e 94 3c 1c 	call	0x3878	; 0x3878 <sprintf>
     7f0:	be 01       	movw	r22, r28
     7f2:	86 ea       	ldi	r24, 0xA6	; 166
     7f4:	95 e0       	ldi	r25, 0x05	; 5
     7f6:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     7fa:	e0 91 4a 04 	lds	r30, 0x044A	; 0x80044a <current_run_time_secs>
     7fe:	f0 91 4b 04 	lds	r31, 0x044B	; 0x80044b <current_run_time_secs+0x1>
     802:	2c e3       	ldi	r18, 0x3C	; 60
     804:	30 e0       	ldi	r19, 0x00	; 0
     806:	cf 01       	movw	r24, r30
     808:	b9 01       	movw	r22, r18
     80a:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
     80e:	9f 93       	push	r25
     810:	8f 93       	push	r24
     812:	cf 01       	movw	r24, r30
     814:	60 e1       	ldi	r22, 0x10	; 16
     816:	7e e0       	ldi	r23, 0x0E	; 14
     818:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
     81c:	46 2f       	mov	r20, r22
     81e:	e7 2f       	mov	r30, r23
     820:	b9 01       	movw	r22, r18
     822:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
     826:	7f 93       	push	r23
     828:	6f 93       	push	r22
     82a:	ef 93       	push	r30
     82c:	4f 93       	push	r20
     82e:	1f 93       	push	r17
     830:	0f 93       	push	r16
     832:	df 93       	push	r29
     834:	cf 93       	push	r28
     836:	0e 94 3c 1c 	call	0x3878	; 0x3878 <sprintf>
     83a:	be 01       	movw	r22, r28
     83c:	86 ea       	ldi	r24, 0xA6	; 166
     83e:	95 e0       	ldi	r25, 0x05	; 5
     840:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     844:	40 91 42 04 	lds	r20, 0x0442	; 0x800442 <Production_Delay>
     848:	50 91 43 04 	lds	r21, 0x0443	; 0x800443 <Production_Delay+0x1>
     84c:	60 91 44 04 	lds	r22, 0x0444	; 0x800444 <Production_Delay+0x2>
     850:	70 91 45 04 	lds	r23, 0x0445	; 0x800445 <Production_Delay+0x3>
     854:	2a e0       	ldi	r18, 0x0A	; 10
     856:	30 e0       	ldi	r19, 0x00	; 0
     858:	86 ea       	ldi	r24, 0xA6	; 166
     85a:	95 e0       	ldi	r25, 0x05	; 5
     85c:	0e 94 86 18 	call	0x310c	; 0x310c <Print::print(unsigned long, int)>
     860:	6a e9       	ldi	r22, 0x9A	; 154
     862:	73 e0       	ldi	r23, 0x03	; 3
     864:	86 ea       	ldi	r24, 0xA6	; 166
     866:	95 e0       	ldi	r25, 0x05	; 5
     868:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     86c:	40 91 3e 04 	lds	r20, 0x043E	; 0x80043e <Flush_Delay>
     870:	50 91 3f 04 	lds	r21, 0x043F	; 0x80043f <Flush_Delay+0x1>
     874:	60 91 40 04 	lds	r22, 0x0440	; 0x800440 <Flush_Delay+0x2>
     878:	70 91 41 04 	lds	r23, 0x0441	; 0x800441 <Flush_Delay+0x3>
     87c:	2a e0       	ldi	r18, 0x0A	; 10
     87e:	30 e0       	ldi	r19, 0x00	; 0
     880:	86 ea       	ldi	r24, 0xA6	; 166
     882:	95 e0       	ldi	r25, 0x05	; 5
     884:	0e 94 86 18 	call	0x310c	; 0x310c <Print::print(unsigned long, int)>
     888:	6a e9       	ldi	r22, 0x9A	; 154
     88a:	73 e0       	ldi	r23, 0x03	; 3
     88c:	86 ea       	ldi	r24, 0xA6	; 166
     88e:	95 e0       	ldi	r25, 0x05	; 5
     890:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     894:	40 91 3a 04 	lds	r20, 0x043A	; 0x80043a <PreCharge_Delay>
     898:	50 91 3b 04 	lds	r21, 0x043B	; 0x80043b <PreCharge_Delay+0x1>
     89c:	60 91 3c 04 	lds	r22, 0x043C	; 0x80043c <PreCharge_Delay+0x2>
     8a0:	70 91 3d 04 	lds	r23, 0x043D	; 0x80043d <PreCharge_Delay+0x3>
     8a4:	2a e0       	ldi	r18, 0x0A	; 10
     8a6:	30 e0       	ldi	r19, 0x00	; 0
     8a8:	86 ea       	ldi	r24, 0xA6	; 166
     8aa:	95 e0       	ldi	r25, 0x05	; 5
     8ac:	0e 94 86 18 	call	0x310c	; 0x310c <Print::print(unsigned long, int)>
     8b0:	6a e9       	ldi	r22, 0x9A	; 154
     8b2:	73 e0       	ldi	r23, 0x03	; 3
     8b4:	86 ea       	ldi	r24, 0xA6	; 166
     8b6:	95 e0       	ldi	r25, 0x05	; 5
     8b8:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     8bc:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <do_byte>
     8c0:	82 fb       	bst	r24, 2
     8c2:	99 27       	eor	r25, r25
     8c4:	90 f9       	bld	r25, 0
     8c6:	1f 92       	push	r1
     8c8:	9f 93       	push	r25
     8ca:	81 fb       	bst	r24, 1
     8cc:	99 27       	eor	r25, r25
     8ce:	90 f9       	bld	r25, 0
     8d0:	1f 92       	push	r1
     8d2:	9f 93       	push	r25
     8d4:	81 70       	andi	r24, 0x01	; 1
     8d6:	1f 92       	push	r1
     8d8:	8f 93       	push	r24
     8da:	08 e1       	ldi	r16, 0x18	; 24
     8dc:	11 e0       	ldi	r17, 0x01	; 1
     8de:	1f 93       	push	r17
     8e0:	0f 93       	push	r16
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	0e 94 3c 1c 	call	0x3878	; 0x3878 <sprintf>
     8ea:	be 01       	movw	r22, r28
     8ec:	86 ea       	ldi	r24, 0xA6	; 166
     8ee:	95 e0       	ldi	r25, 0x05	; 5
     8f0:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     8f4:	60 91 2f 04 	lds	r22, 0x042F	; 0x80042f <o2_raw_adc_count>
     8f8:	70 91 30 04 	lds	r23, 0x0430	; 0x800430 <o2_raw_adc_count+0x1>
     8fc:	4a e0       	ldi	r20, 0x0A	; 10
     8fe:	50 e0       	ldi	r21, 0x00	; 0
     900:	86 ea       	ldi	r24, 0xA6	; 166
     902:	95 e0       	ldi	r25, 0x05	; 5
     904:	0e 94 6d 18 	call	0x30da	; 0x30da <Print::print(int, int)>
     908:	6a e9       	ldi	r22, 0x9A	; 154
     90a:	73 e0       	ldi	r23, 0x03	; 3
     90c:	86 ea       	ldi	r24, 0xA6	; 166
     90e:	95 e0       	ldi	r25, 0x05	; 5
     910:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     914:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <m_raw_voltage>
     918:	50 91 24 04 	lds	r21, 0x0424	; 0x800424 <m_raw_voltage+0x1>
     91c:	60 91 25 04 	lds	r22, 0x0425	; 0x800425 <m_raw_voltage+0x2>
     920:	70 91 26 04 	lds	r23, 0x0426	; 0x800426 <m_raw_voltage+0x3>
     924:	22 e0       	ldi	r18, 0x02	; 2
     926:	30 e0       	ldi	r19, 0x00	; 0
     928:	86 ea       	ldi	r24, 0xA6	; 166
     92a:	95 e0       	ldi	r25, 0x05	; 5
     92c:	0e 94 a8 19 	call	0x3350	; 0x3350 <Print::print(double, int)>
     930:	6a e9       	ldi	r22, 0x9A	; 154
     932:	73 e0       	ldi	r23, 0x03	; 3
     934:	86 ea       	ldi	r24, 0xA6	; 166
     936:	95 e0       	ldi	r25, 0x05	; 5
     938:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     93c:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <o2_concentration>
     940:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <o2_concentration+0x1>
     944:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <o2_concentration+0x2>
     948:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <o2_concentration+0x3>
     94c:	22 e0       	ldi	r18, 0x02	; 2
     94e:	30 e0       	ldi	r19, 0x00	; 0
     950:	86 ea       	ldi	r24, 0xA6	; 166
     952:	95 e0       	ldi	r25, 0x05	; 5
     954:	0e 94 a8 19 	call	0x3350	; 0x3350 <Print::print(double, int)>
     958:	6a e9       	ldi	r22, 0x9A	; 154
     95a:	73 e0       	ldi	r23, 0x03	; 3
     95c:	86 ea       	ldi	r24, 0xA6	; 166
     95e:	95 e0       	ldi	r25, 0x05	; 5
     960:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     964:	1f 92       	push	r1
     966:	83 e0       	ldi	r24, 0x03	; 3
     968:	8f 93       	push	r24
     96a:	1f 92       	push	r1
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	8f 93       	push	r24
     970:	1f 92       	push	r1
     972:	81 e0       	ldi	r24, 0x01	; 1
     974:	8f 93       	push	r24
     976:	1f 93       	push	r17
     978:	0f 93       	push	r16
     97a:	df 93       	push	r29
     97c:	cf 93       	push	r28
     97e:	0e 94 3c 1c 	call	0x3878	; 0x3878 <sprintf>
     982:	8d b7       	in	r24, 0x3d	; 61
     984:	9e b7       	in	r25, 0x3e	; 62
     986:	88 96       	adiw	r24, 0x28	; 40
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	9e bf       	out	0x3e, r25	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	8d bf       	out	0x3d, r24	; 61
     992:	be 01       	movw	r22, r28
     994:	86 ea       	ldi	r24, 0xA6	; 166
     996:	95 e0       	ldi	r25, 0x05	; 5
     998:	df 91       	pop	r29
     99a:	cf 91       	pop	r28
     99c:	1f 91       	pop	r17
     99e:	0f 91       	pop	r16
     9a0:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <Print::println(char const*)>

000009a4 <logs_task()>:
_Z9logs_taskv():
     9a4:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <f_sec_logs_task>
     9a8:	88 23       	and	r24, r24
     9aa:	a9 f0       	breq	.+42     	; 0x9d6 <logs_task()+0x32>
     9ac:	10 92 53 04 	sts	0x0453, r1	; 0x800453 <f_sec_logs_task>
     9b0:	80 91 0a 04 	lds	r24, 0x040A	; 0x80040a <logs_task()::log_period>
     9b4:	90 91 0b 04 	lds	r25, 0x040B	; 0x80040b <logs_task()::log_period+0x1>
     9b8:	01 96       	adiw	r24, 0x01	; 1
     9ba:	82 30       	cpi	r24, 0x02	; 2
     9bc:	91 05       	cpc	r25, r1
     9be:	2c f4       	brge	.+10     	; 0x9ca <logs_task()+0x26>
     9c0:	90 93 0b 04 	sts	0x040B, r25	; 0x80040b <logs_task()::log_period+0x1>
     9c4:	80 93 0a 04 	sts	0x040A, r24	; 0x80040a <logs_task()::log_period>
     9c8:	08 95       	ret
     9ca:	10 92 0b 04 	sts	0x040B, r1	; 0x80040b <logs_task()::log_period+0x1>
     9ce:	10 92 0a 04 	sts	0x040A, r1	; 0x80040a <logs_task()::log_period>
     9d2:	0c 94 de 03 	jmp	0x7bc	; 0x7bc <log_dump()>
     9d6:	08 95       	ret

000009d8 <ads_init()>:
_Z8ads_initv():
     9d8:	62 e2       	ldi	r22, 0x22	; 34
     9da:	71 e0       	ldi	r23, 0x01	; 1
     9dc:	86 ea       	ldi	r24, 0xA6	; 166
     9de:	95 e0       	ldi	r25, 0x05	; 5
     9e0:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     9e4:	6c e8       	ldi	r22, 0x8C	; 140
     9e6:	70 e0       	ldi	r23, 0x00	; 0
     9e8:	86 ea       	ldi	r24, 0xA6	; 166
     9ea:	95 e0       	ldi	r25, 0x05	; 5
     9ec:	0e 94 b0 17 	call	0x2f60	; 0x2f60 <Print::println(__FlashStringHelper const*)>
     9f0:	84 ef       	ldi	r24, 0xF4	; 244
     9f2:	93 e0       	ldi	r25, 0x03	; 3
     9f4:	0e 94 85 0e 	call	0x1d0a	; 0x1d0a <ADS1X15::begin()>
     9f8:	61 e0       	ldi	r22, 0x01	; 1
     9fa:	84 ef       	ldi	r24, 0xF4	; 244
     9fc:	93 e0       	ldi	r25, 0x03	; 3
     9fe:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <ADS1X15::setGain(unsigned char)>
     a02:	67 e0       	ldi	r22, 0x07	; 7
     a04:	84 ef       	ldi	r24, 0xF4	; 244
     a06:	93 e0       	ldi	r25, 0x03	; 3
     a08:	0e 94 e6 0e 	call	0x1dcc	; 0x1dcc <ADS1X15::setDataRate(unsigned char)>
     a0c:	60 e0       	ldi	r22, 0x00	; 0
     a0e:	84 ef       	ldi	r24, 0xF4	; 244
     a10:	93 e0       	ldi	r25, 0x03	; 3
     a12:	0e 94 da 0e 	call	0x1db4	; 0x1db4 <ADS1X15::setMode(unsigned char)>
     a16:	60 e0       	ldi	r22, 0x00	; 0
     a18:	84 ef       	ldi	r24, 0xF4	; 244
     a1a:	93 e0       	ldi	r25, 0x03	; 3
     a1c:	0c 94 d5 0f 	jmp	0x1faa	; 0x1faa <ADS1X15::readADC(unsigned char)>

00000a20 <o2_sensor_scan()>:
_Z14o2_sensor_scanv():
     a20:	cf 92       	push	r12
     a22:	df 92       	push	r13
     a24:	ef 92       	push	r14
     a26:	ff 92       	push	r15
     a28:	60 e0       	ldi	r22, 0x00	; 0
     a2a:	84 ef       	ldi	r24, 0xF4	; 244
     a2c:	93 e0       	ldi	r25, 0x03	; 3
     a2e:	0e 94 d5 0f 	call	0x1faa	; 0x1faa <ADS1X15::readADC(unsigned char)>
     a32:	84 ef       	ldi	r24, 0xF4	; 244
     a34:	93 e0       	ldi	r25, 0x03	; 3
     a36:	0e 94 a6 0f 	call	0x1f4c	; 0x1f4c <ADS1X15::getValue()>
     a3a:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <o2_raw_adc_count+0x1>
     a3e:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <o2_raw_adc_count>
     a42:	6e eb       	ldi	r22, 0xBE	; 190
     a44:	71 e0       	ldi	r23, 0x01	; 1
     a46:	86 ea       	ldi	r24, 0xA6	; 166
     a48:	95 e0       	ldi	r25, 0x05	; 5
     a4a:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     a4e:	60 91 2f 04 	lds	r22, 0x042F	; 0x80042f <o2_raw_adc_count>
     a52:	70 91 30 04 	lds	r23, 0x0430	; 0x800430 <o2_raw_adc_count+0x1>
     a56:	4a e0       	ldi	r20, 0x0A	; 10
     a58:	50 e0       	ldi	r21, 0x00	; 0
     a5a:	86 ea       	ldi	r24, 0xA6	; 166
     a5c:	95 e0       	ldi	r25, 0x05	; 5
     a5e:	0e 94 6d 18 	call	0x30da	; 0x30da <Print::print(int, int)>
     a62:	60 91 2f 04 	lds	r22, 0x042F	; 0x80042f <o2_raw_adc_count>
     a66:	70 91 30 04 	lds	r23, 0x0430	; 0x800430 <o2_raw_adc_count+0x1>
     a6a:	07 2e       	mov	r0, r23
     a6c:	00 0c       	add	r0, r0
     a6e:	88 0b       	sbc	r24, r24
     a70:	99 0b       	sbc	r25, r25
     a72:	0e 94 cf 1a 	call	0x359e	; 0x359e <__floatsisf>
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	30 e0       	ldi	r19, 0x00	; 0
     a7a:	4a e7       	ldi	r20, 0x7A	; 122
     a7c:	54 e4       	ldi	r21, 0x44	; 68
     a7e:	0e 94 84 1b 	call	0x3708	; 0x3708 <__mulsf3>
     a82:	2f e6       	ldi	r18, 0x6F	; 111
     a84:	32 e1       	ldi	r19, 0x12	; 18
     a86:	43 e0       	ldi	r20, 0x03	; 3
     a88:	59 e3       	ldi	r21, 0x39	; 57
     a8a:	0e 94 84 1b 	call	0x3708	; 0x3708 <__mulsf3>
     a8e:	60 93 23 04 	sts	0x0423, r22	; 0x800423 <m_raw_voltage>
     a92:	70 93 24 04 	sts	0x0424, r23	; 0x800424 <m_raw_voltage+0x1>
     a96:	80 93 25 04 	sts	0x0425, r24	; 0x800425 <m_raw_voltage+0x2>
     a9a:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <m_raw_voltage+0x3>
     a9e:	62 ed       	ldi	r22, 0xD2	; 210
     aa0:	71 e0       	ldi	r23, 0x01	; 1
     aa2:	86 ea       	ldi	r24, 0xA6	; 166
     aa4:	95 e0       	ldi	r25, 0x05	; 5
     aa6:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     aaa:	40 91 23 04 	lds	r20, 0x0423	; 0x800423 <m_raw_voltage>
     aae:	50 91 24 04 	lds	r21, 0x0424	; 0x800424 <m_raw_voltage+0x1>
     ab2:	60 91 25 04 	lds	r22, 0x0425	; 0x800425 <m_raw_voltage+0x2>
     ab6:	70 91 26 04 	lds	r23, 0x0426	; 0x800426 <m_raw_voltage+0x3>
     aba:	24 e0       	ldi	r18, 0x04	; 4
     abc:	30 e0       	ldi	r19, 0x00	; 0
     abe:	86 ea       	ldi	r24, 0xA6	; 166
     ac0:	95 e0       	ldi	r25, 0x05	; 5
     ac2:	0e 94 a8 19 	call	0x3350	; 0x3350 <Print::print(double, int)>
     ac6:	60 91 23 04 	lds	r22, 0x0423	; 0x800423 <m_raw_voltage>
     aca:	70 91 24 04 	lds	r23, 0x0424	; 0x800424 <m_raw_voltage+0x1>
     ace:	80 91 25 04 	lds	r24, 0x0425	; 0x800425 <m_raw_voltage+0x2>
     ad2:	90 91 26 04 	lds	r25, 0x0426	; 0x800426 <m_raw_voltage+0x3>
     ad6:	20 91 2b 04 	lds	r18, 0x042B	; 0x80042b <o2_slope>
     ada:	30 91 2c 04 	lds	r19, 0x042C	; 0x80042c <o2_slope+0x1>
     ade:	40 91 2d 04 	lds	r20, 0x042D	; 0x80042d <o2_slope+0x2>
     ae2:	50 91 2e 04 	lds	r21, 0x042E	; 0x80042e <o2_slope+0x3>
     ae6:	c0 90 27 04 	lds	r12, 0x0427	; 0x800427 <o2_const_val>
     aea:	d0 90 28 04 	lds	r13, 0x0428	; 0x800428 <o2_const_val+0x1>
     aee:	e0 90 29 04 	lds	r14, 0x0429	; 0x800429 <o2_const_val+0x2>
     af2:	f0 90 2a 04 	lds	r15, 0x042A	; 0x80042a <o2_const_val+0x3>
     af6:	0e 94 84 1b 	call	0x3708	; 0x3708 <__mulsf3>
     afa:	a7 01       	movw	r20, r14
     afc:	96 01       	movw	r18, r12
     afe:	0e 94 bb 19 	call	0x3376	; 0x3376 <__addsf3>
     b02:	60 93 04 01 	sts	0x0104, r22	; 0x800104 <o2_concentration>
     b06:	70 93 05 01 	sts	0x0105, r23	; 0x800105 <o2_concentration+0x1>
     b0a:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <o2_concentration+0x2>
     b0e:	90 93 07 01 	sts	0x0107, r25	; 0x800107 <o2_concentration+0x3>
     b12:	65 ee       	ldi	r22, 0xE5	; 229
     b14:	71 e0       	ldi	r23, 0x01	; 1
     b16:	86 ea       	ldi	r24, 0xA6	; 166
     b18:	95 e0       	ldi	r25, 0x05	; 5
     b1a:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     b1e:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <o2_concentration>
     b22:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <o2_concentration+0x1>
     b26:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <o2_concentration+0x2>
     b2a:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <o2_concentration+0x3>
     b2e:	22 e0       	ldi	r18, 0x02	; 2
     b30:	30 e0       	ldi	r19, 0x00	; 0
     b32:	86 ea       	ldi	r24, 0xA6	; 166
     b34:	95 e0       	ldi	r25, 0x05	; 5
     b36:	0e 94 a8 19 	call	0x3350	; 0x3350 <Print::print(double, int)>
     b3a:	40 91 04 01 	lds	r20, 0x0104	; 0x800104 <o2_concentration>
     b3e:	50 91 05 01 	lds	r21, 0x0105	; 0x800105 <o2_concentration+0x1>
     b42:	60 91 06 01 	lds	r22, 0x0106	; 0x800106 <o2_concentration+0x2>
     b46:	70 91 07 01 	lds	r23, 0x0107	; 0x800107 <o2_concentration+0x3>
     b4a:	24 e0       	ldi	r18, 0x04	; 4
     b4c:	30 e0       	ldi	r19, 0x00	; 0
     b4e:	86 ea       	ldi	r24, 0xA6	; 166
     b50:	95 e0       	ldi	r25, 0x05	; 5
     b52:	0e 94 a8 19 	call	0x3350	; 0x3350 <Print::print(double, int)>
     b56:	6a ed       	ldi	r22, 0xDA	; 218
     b58:	73 e0       	ldi	r23, 0x03	; 3
     b5a:	86 ea       	ldi	r24, 0xA6	; 166
     b5c:	95 e0       	ldi	r25, 0x05	; 5
     b5e:	ff 90       	pop	r15
     b60:	ef 90       	pop	r14
     b62:	df 90       	pop	r13
     b64:	cf 90       	pop	r12
     b66:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <Print::println(char const*)>

00000b6a <config_timer1()>:
_Z13config_timer1v():
     b6a:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     b6e:	e1 e8       	ldi	r30, 0x81	; 129
     b70:	f0 e0       	ldi	r31, 0x00	; 0
     b72:	10 82       	st	Z, r1
     b74:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     b78:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     b7c:	89 ef       	ldi	r24, 0xF9	; 249
     b7e:	90 e0       	ldi	r25, 0x00	; 0
     b80:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     b84:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     b88:	80 81       	ld	r24, Z
     b8a:	88 60       	ori	r24, 0x08	; 8
     b8c:	80 83       	st	Z, r24
     b8e:	80 81       	ld	r24, Z
     b90:	83 60       	ori	r24, 0x03	; 3
     b92:	80 83       	st	Z, r24
     b94:	ef e6       	ldi	r30, 0x6F	; 111
     b96:	f0 e0       	ldi	r31, 0x00	; 0
     b98:	80 81       	ld	r24, Z
     b9a:	82 60       	ori	r24, 0x02	; 2
     b9c:	80 83       	st	Z, r24
     b9e:	08 95       	ret

00000ba0 <timer_init()>:
_Z10timer_initv():
     ba0:	f8 94       	cli
     ba2:	0e 94 b5 05 	call	0xb6a	; 0xb6a <config_timer1()>
     ba6:	78 94       	sei
     ba8:	6b ef       	ldi	r22, 0xFB	; 251
     baa:	71 e0       	ldi	r23, 0x01	; 1
     bac:	86 ea       	ldi	r24, 0xA6	; 166
     bae:	95 e0       	ldi	r25, 0x05	; 5
     bb0:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <Print::println(char const*)>

00000bb4 <__vector_13>:
__vector_13():
     bb4:	1f 92       	push	r1
     bb6:	0f 92       	push	r0
     bb8:	0f b6       	in	r0, 0x3f	; 63
     bba:	0f 92       	push	r0
     bbc:	11 24       	eor	r1, r1
     bbe:	0b b6       	in	r0, 0x3b	; 59
     bc0:	0f 92       	push	r0
     bc2:	2f 93       	push	r18
     bc4:	3f 93       	push	r19
     bc6:	4f 93       	push	r20
     bc8:	5f 93       	push	r21
     bca:	6f 93       	push	r22
     bcc:	7f 93       	push	r23
     bce:	8f 93       	push	r24
     bd0:	9f 93       	push	r25
     bd2:	af 93       	push	r26
     bd4:	bf 93       	push	r27
     bd6:	cf 93       	push	r28
     bd8:	ef 93       	push	r30
     bda:	ff 93       	push	r31
     bdc:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <systemtick_msecs>
     be0:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <systemtick_msecs+0x1>
     be4:	a0 91 60 04 	lds	r26, 0x0460	; 0x800460 <systemtick_msecs+0x2>
     be8:	b0 91 61 04 	lds	r27, 0x0461	; 0x800461 <systemtick_msecs+0x3>
     bec:	01 96       	adiw	r24, 0x01	; 1
     bee:	a1 1d       	adc	r26, r1
     bf0:	b1 1d       	adc	r27, r1
     bf2:	80 93 5e 04 	sts	0x045E, r24	; 0x80045e <systemtick_msecs>
     bf6:	90 93 5f 04 	sts	0x045F, r25	; 0x80045f <systemtick_msecs+0x1>
     bfa:	a0 93 60 04 	sts	0x0460, r26	; 0x800460 <systemtick_msecs+0x2>
     bfe:	b0 93 61 04 	sts	0x0461, r27	; 0x800461 <systemtick_msecs+0x3>
     c02:	c1 e0       	ldi	r28, 0x01	; 1
     c04:	c0 93 5a 04 	sts	0x045A, r28	; 0x80045a <f_msec>
     c08:	60 91 5e 04 	lds	r22, 0x045E	; 0x80045e <systemtick_msecs>
     c0c:	70 91 5f 04 	lds	r23, 0x045F	; 0x80045f <systemtick_msecs+0x1>
     c10:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <systemtick_msecs+0x2>
     c14:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <systemtick_msecs+0x3>
     c18:	2a e0       	ldi	r18, 0x0A	; 10
     c1a:	30 e0       	ldi	r19, 0x00	; 0
     c1c:	40 e0       	ldi	r20, 0x00	; 0
     c1e:	50 e0       	ldi	r21, 0x00	; 0
     c20:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
     c24:	67 2b       	or	r22, r23
     c26:	68 2b       	or	r22, r24
     c28:	69 2b       	or	r22, r25
     c2a:	09 f0       	breq	.+2      	; 0xc2e <__vector_13+0x7a>
     c2c:	49 c0       	rjmp	.+146    	; 0xcc0 <__vector_13+0x10c>
     c2e:	c0 93 59 04 	sts	0x0459, r28	; 0x800459 <f_10msec>
     c32:	60 91 5e 04 	lds	r22, 0x045E	; 0x80045e <systemtick_msecs>
     c36:	70 91 5f 04 	lds	r23, 0x045F	; 0x80045f <systemtick_msecs+0x1>
     c3a:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <systemtick_msecs+0x2>
     c3e:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <systemtick_msecs+0x3>
     c42:	24 e6       	ldi	r18, 0x64	; 100
     c44:	30 e0       	ldi	r19, 0x00	; 0
     c46:	40 e0       	ldi	r20, 0x00	; 0
     c48:	50 e0       	ldi	r21, 0x00	; 0
     c4a:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
     c4e:	67 2b       	or	r22, r23
     c50:	68 2b       	or	r22, r24
     c52:	69 2b       	or	r22, r25
     c54:	a9 f5       	brne	.+106    	; 0xcc0 <__vector_13+0x10c>
     c56:	c0 93 58 04 	sts	0x0458, r28	; 0x800458 <f_100msec>
     c5a:	60 91 5e 04 	lds	r22, 0x045E	; 0x80045e <systemtick_msecs>
     c5e:	70 91 5f 04 	lds	r23, 0x045F	; 0x80045f <systemtick_msecs+0x1>
     c62:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <systemtick_msecs+0x2>
     c66:	90 91 61 04 	lds	r25, 0x0461	; 0x800461 <systemtick_msecs+0x3>
     c6a:	28 ee       	ldi	r18, 0xE8	; 232
     c6c:	33 e0       	ldi	r19, 0x03	; 3
     c6e:	40 e0       	ldi	r20, 0x00	; 0
     c70:	50 e0       	ldi	r21, 0x00	; 0
     c72:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
     c76:	67 2b       	or	r22, r23
     c78:	68 2b       	or	r22, r24
     c7a:	69 2b       	or	r22, r25
     c7c:	09 f5       	brne	.+66     	; 0xcc0 <__vector_13+0x10c>
     c7e:	c0 93 57 04 	sts	0x0457, r28	; 0x800457 <f_1sec>
     c82:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <systemtick_secs>
     c86:	8f 5f       	subi	r24, 0xFF	; 255
     c88:	80 93 5d 04 	sts	0x045D, r24	; 0x80045d <systemtick_secs>
     c8c:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <systemtick_secs>
     c90:	8c 33       	cpi	r24, 0x3C	; 60
     c92:	b0 f0       	brcs	.+44     	; 0xcc0 <__vector_13+0x10c>
     c94:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <systemtick_secs>
     c98:	c0 93 56 04 	sts	0x0456, r28	; 0x800456 <f_1min>
     c9c:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <systemtick_mins>
     ca0:	8f 5f       	subi	r24, 0xFF	; 255
     ca2:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <systemtick_mins>
     ca6:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <systemtick_mins>
     caa:	8c 33       	cpi	r24, 0x3C	; 60
     cac:	48 f0       	brcs	.+18     	; 0xcc0 <__vector_13+0x10c>
     cae:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <systemtick_mins>
     cb2:	c0 93 55 04 	sts	0x0455, r28	; 0x800455 <f_1hr>
     cb6:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <systemtick_hrs>
     cba:	8f 5f       	subi	r24, 0xFF	; 255
     cbc:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <systemtick_hrs>
     cc0:	ff 91       	pop	r31
     cc2:	ef 91       	pop	r30
     cc4:	cf 91       	pop	r28
     cc6:	bf 91       	pop	r27
     cc8:	af 91       	pop	r26
     cca:	9f 91       	pop	r25
     ccc:	8f 91       	pop	r24
     cce:	7f 91       	pop	r23
     cd0:	6f 91       	pop	r22
     cd2:	5f 91       	pop	r21
     cd4:	4f 91       	pop	r20
     cd6:	3f 91       	pop	r19
     cd8:	2f 91       	pop	r18
     cda:	0f 90       	pop	r0
     cdc:	0b be       	out	0x3b, r0	; 59
     cde:	0f 90       	pop	r0
     ce0:	0f be       	out	0x3f, r0	; 63
     ce2:	0f 90       	pop	r0
     ce4:	1f 90       	pop	r1
     ce6:	18 95       	reti

00000ce8 <new_delay_msecs(unsigned int)>:
_Z15new_delay_msecsj():
     ce8:	0f 93       	push	r16
     cea:	1f 93       	push	r17
     cec:	cf 93       	push	r28
     cee:	df 93       	push	r29
     cf0:	ec 01       	movw	r28, r24
     cf2:	6f e0       	ldi	r22, 0x0F	; 15
     cf4:	72 e0       	ldi	r23, 0x02	; 2
     cf6:	86 ea       	ldi	r24, 0xA6	; 166
     cf8:	95 e0       	ldi	r25, 0x05	; 5
     cfa:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     cfe:	00 91 5e 04 	lds	r16, 0x045E	; 0x80045e <systemtick_msecs>
     d02:	10 91 5f 04 	lds	r17, 0x045F	; 0x80045f <systemtick_msecs+0x1>
     d06:	20 91 60 04 	lds	r18, 0x0460	; 0x800460 <systemtick_msecs+0x2>
     d0a:	30 91 61 04 	lds	r19, 0x0461	; 0x800461 <systemtick_msecs+0x3>
     d0e:	ce 01       	movw	r24, r28
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	a0 e0       	ldi	r26, 0x00	; 0
_Z12time_elapsedm():
     d14:	40 91 5e 04 	lds	r20, 0x045E	; 0x80045e <systemtick_msecs>
     d18:	50 91 5f 04 	lds	r21, 0x045F	; 0x80045f <systemtick_msecs+0x1>
     d1c:	60 91 60 04 	lds	r22, 0x0460	; 0x800460 <systemtick_msecs+0x2>
     d20:	70 91 61 04 	lds	r23, 0x0461	; 0x800461 <systemtick_msecs+0x3>
     d24:	40 1b       	sub	r20, r16
     d26:	51 0b       	sbc	r21, r17
     d28:	62 0b       	sbc	r22, r18
     d2a:	73 0b       	sbc	r23, r19
_Z15new_delay_msecsj():
     d2c:	48 17       	cp	r20, r24
     d2e:	59 07       	cpc	r21, r25
     d30:	6a 07       	cpc	r22, r26
     d32:	7b 07       	cpc	r23, r27
     d34:	78 f3       	brcs	.-34     	; 0xd14 <new_delay_msecs(unsigned int)+0x2c>
     d36:	df 91       	pop	r29
     d38:	cf 91       	pop	r28
     d3a:	1f 91       	pop	r17
     d3c:	0f 91       	pop	r16
     d3e:	08 95       	ret

00000d40 <platform_init()>:
_Z13platform_initv():
     d40:	0e 94 d0 05 	call	0xba0	; 0xba0 <timer_init()>
     d44:	20 e0       	ldi	r18, 0x00	; 0
     d46:	44 e0       	ldi	r20, 0x04	; 4
     d48:	64 e1       	ldi	r22, 0x14	; 20
     d4a:	81 ec       	ldi	r24, 0xC1	; 193
     d4c:	94 e0       	ldi	r25, 0x04	; 4
     d4e:	0e 94 1a 0c 	call	0x1834	; 0x1834 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>
     d52:	61 e0       	ldi	r22, 0x01	; 1
     d54:	88 e1       	ldi	r24, 0x18	; 24
     d56:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
     d5a:	61 e0       	ldi	r22, 0x01	; 1
     d5c:	89 e1       	ldi	r24, 0x19	; 25
     d5e:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
     d62:	61 e0       	ldi	r22, 0x01	; 1
     d64:	8a e1       	ldi	r24, 0x1A	; 26
     d66:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
     d6a:	61 e0       	ldi	r22, 0x01	; 1
     d6c:	8b e1       	ldi	r24, 0x1B	; 27
     d6e:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
     d72:	61 e0       	ldi	r22, 0x01	; 1
     d74:	8c e0       	ldi	r24, 0x0C	; 12
     d76:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
     d7a:	61 e0       	ldi	r22, 0x01	; 1
     d7c:	8c e0       	ldi	r24, 0x0C	; 12
     d7e:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
     d82:	61 e0       	ldi	r22, 0x01	; 1
     d84:	8d e1       	ldi	r24, 0x1D	; 29
     d86:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
     d8a:	61 e0       	ldi	r22, 0x01	; 1
     d8c:	8b e1       	ldi	r24, 0x1B	; 27
     d8e:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
     d92:	60 e0       	ldi	r22, 0x00	; 0
     d94:	83 e0       	ldi	r24, 0x03	; 3
     d96:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
     d9a:	62 e0       	ldi	r22, 0x02	; 2
     d9c:	83 e0       	ldi	r24, 0x03	; 3
     d9e:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
     da2:	60 e0       	ldi	r22, 0x00	; 0
     da4:	84 e0       	ldi	r24, 0x04	; 4
     da6:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
     daa:	62 e0       	ldi	r22, 0x02	; 2
     dac:	84 e0       	ldi	r24, 0x04	; 4
     dae:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
     db2:	60 e0       	ldi	r22, 0x00	; 0
     db4:	8d e1       	ldi	r24, 0x1D	; 29
     db6:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
     dba:	60 e0       	ldi	r22, 0x00	; 0
     dbc:	8b e1       	ldi	r24, 0x1B	; 27
     dbe:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
     dc2:	61 e0       	ldi	r22, 0x01	; 1
     dc4:	85 e0       	ldi	r24, 0x05	; 5
     dc6:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
     dca:	61 e0       	ldi	r22, 0x01	; 1
     dcc:	87 e0       	ldi	r24, 0x07	; 7
     dce:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
     dd2:	61 e0       	ldi	r22, 0x01	; 1
     dd4:	8d e0       	ldi	r24, 0x0D	; 13
     dd6:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
     dda:	60 e0       	ldi	r22, 0x00	; 0
     ddc:	85 e0       	ldi	r24, 0x05	; 5
     dde:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
     de2:	60 e0       	ldi	r22, 0x00	; 0
     de4:	87 e0       	ldi	r24, 0x07	; 7
     de6:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
     dea:	60 e0       	ldi	r22, 0x00	; 0
     dec:	8d e0       	ldi	r24, 0x0D	; 13
     dee:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
     df2:	61 e1       	ldi	r22, 0x11	; 17
     df4:	72 e0       	ldi	r23, 0x02	; 2
     df6:	86 ea       	ldi	r24, 0xA6	; 166
     df8:	95 e0       	ldi	r25, 0x05	; 5
     dfa:	0c 94 c2 17 	jmp	0x2f84	; 0x2f84 <Print::println(char const*)>

00000dfe <do_control(DO_CONTROLS_E, bool)>:
_Z10do_control13DO_CONTROLS_Eb():
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	ec 01       	movw	r28, r24
     e06:	16 2f       	mov	r17, r22
     e08:	62 e2       	ldi	r22, 0x22	; 34
     e0a:	72 e0       	ldi	r23, 0x02	; 2
     e0c:	86 ea       	ldi	r24, 0xA6	; 166
     e0e:	95 e0       	ldi	r25, 0x05	; 5
     e10:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     e14:	4a e0       	ldi	r20, 0x0A	; 10
     e16:	50 e0       	ldi	r21, 0x00	; 0
     e18:	be 01       	movw	r22, r28
     e1a:	86 ea       	ldi	r24, 0xA6	; 166
     e1c:	95 e0       	ldi	r25, 0x05	; 5
     e1e:	0e 94 74 18 	call	0x30e8	; 0x30e8 <Print::println(int, int)>
     e22:	c8 30       	cpi	r28, 0x08	; 8
     e24:	d1 05       	cpc	r29, r1
     e26:	09 f4       	brne	.+2      	; 0xe2a <do_control(DO_CONTROLS_E, bool)+0x2c>
     e28:	40 c0       	rjmp	.+128    	; 0xeaa <do_control(DO_CONTROLS_E, bool)+0xac>
     e2a:	70 f4       	brcc	.+28     	; 0xe48 <do_control(DO_CONTROLS_E, bool)+0x4a>
     e2c:	c2 30       	cpi	r28, 0x02	; 2
     e2e:	d1 05       	cpc	r29, r1
     e30:	b1 f1       	breq	.+108    	; 0xe9e <do_control(DO_CONTROLS_E, bool)+0xa0>
     e32:	c4 30       	cpi	r28, 0x04	; 4
     e34:	d1 05       	cpc	r29, r1
     e36:	b1 f1       	breq	.+108    	; 0xea4 <do_control(DO_CONTROLS_E, bool)+0xa6>
     e38:	c1 30       	cpi	r28, 0x01	; 1
     e3a:	d1 05       	cpc	r29, r1
     e3c:	79 f4       	brne	.+30     	; 0xe5c <do_control(DO_CONTROLS_E, bool)+0x5e>
     e3e:	61 2f       	mov	r22, r17
     e40:	88 e1       	ldi	r24, 0x18	; 24
     e42:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
     e46:	23 c0       	rjmp	.+70     	; 0xe8e <do_control(DO_CONTROLS_E, bool)+0x90>
     e48:	c0 32       	cpi	r28, 0x20	; 32
     e4a:	d1 05       	cpc	r29, r1
     e4c:	01 f1       	breq	.+64     	; 0xe8e <do_control(DO_CONTROLS_E, bool)+0x90>
     e4e:	c8 f4       	brcc	.+50     	; 0xe82 <do_control(DO_CONTROLS_E, bool)+0x84>
     e50:	61 e0       	ldi	r22, 0x01	; 1
     e52:	61 27       	eor	r22, r17
     e54:	8d e1       	ldi	r24, 0x1D	; 29
     e56:	c0 31       	cpi	r28, 0x10	; 16
     e58:	d1 05       	cpc	r29, r1
     e5a:	99 f3       	breq	.-26     	; 0xe42 <do_control(DO_CONTROLS_E, bool)+0x44>
     e5c:	6b e2       	ldi	r22, 0x2B	; 43
     e5e:	72 e0       	ldi	r23, 0x02	; 2
     e60:	86 ea       	ldi	r24, 0xA6	; 166
     e62:	95 e0       	ldi	r25, 0x05	; 5
     e64:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
     e68:	4a e0       	ldi	r20, 0x0A	; 10
     e6a:	50 e0       	ldi	r21, 0x00	; 0
     e6c:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <do_byte>
     e70:	86 ea       	ldi	r24, 0xA6	; 166
     e72:	95 e0       	ldi	r25, 0x05	; 5
     e74:	0e 94 9a 18 	call	0x3134	; 0x3134 <Print::println(unsigned char, int)>
     e78:	80 e0       	ldi	r24, 0x00	; 0
     e7a:	df 91       	pop	r29
     e7c:	cf 91       	pop	r28
     e7e:	1f 91       	pop	r17
     e80:	08 95       	ret
     e82:	c0 34       	cpi	r28, 0x40	; 64
     e84:	d1 05       	cpc	r29, r1
     e86:	19 f0       	breq	.+6      	; 0xe8e <do_control(DO_CONTROLS_E, bool)+0x90>
     e88:	c0 38       	cpi	r28, 0x80	; 128
     e8a:	d1 05       	cpc	r29, r1
     e8c:	39 f7       	brne	.-50     	; 0xe5c <do_control(DO_CONTROLS_E, bool)+0x5e>
     e8e:	80 91 31 04 	lds	r24, 0x0431	; 0x800431 <do_byte>
     e92:	11 23       	and	r17, r17
     e94:	69 f0       	breq	.+26     	; 0xeb0 <do_control(DO_CONTROLS_E, bool)+0xb2>
     e96:	c8 2b       	or	r28, r24
     e98:	c0 93 31 04 	sts	0x0431, r28	; 0x800431 <do_byte>
     e9c:	df cf       	rjmp	.-66     	; 0xe5c <do_control(DO_CONTROLS_E, bool)+0x5e>
     e9e:	61 2f       	mov	r22, r17
     ea0:	89 e1       	ldi	r24, 0x19	; 25
     ea2:	cf cf       	rjmp	.-98     	; 0xe42 <do_control(DO_CONTROLS_E, bool)+0x44>
     ea4:	61 2f       	mov	r22, r17
     ea6:	8a e1       	ldi	r24, 0x1A	; 26
     ea8:	cc cf       	rjmp	.-104    	; 0xe42 <do_control(DO_CONTROLS_E, bool)+0x44>
     eaa:	61 2f       	mov	r22, r17
     eac:	8b e1       	ldi	r24, 0x1B	; 27
     eae:	c9 cf       	rjmp	.-110    	; 0xe42 <do_control(DO_CONTROLS_E, bool)+0x44>
     eb0:	c0 95       	com	r28
     eb2:	c8 23       	and	r28, r24
     eb4:	f1 cf       	rjmp	.-30     	; 0xe98 <do_control(DO_CONTROLS_E, bool)+0x9a>

00000eb6 <tworks2_values_to_default_postion()>:
_Z33tworks2_values_to_default_postionv():
     eb6:	60 e0       	ldi	r22, 0x00	; 0
     eb8:	81 e0       	ldi	r24, 0x01	; 1
     eba:	90 e0       	ldi	r25, 0x00	; 0
     ebc:	0e 94 ff 06 	call	0xdfe	; 0xdfe <do_control(DO_CONTROLS_E, bool)>
     ec0:	60 e0       	ldi	r22, 0x00	; 0
     ec2:	82 e0       	ldi	r24, 0x02	; 2
     ec4:	90 e0       	ldi	r25, 0x00	; 0
     ec6:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <do_control(DO_CONTROLS_E, bool)>

00000eca <tworks2_PSA_logic()>:
_Z17tworks2_PSA_logicv():
     eca:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <cycle>
     ece:	81 30       	cpi	r24, 0x01	; 1
     ed0:	21 f1       	breq	.+72     	; 0xf1a <tworks2_PSA_logic()+0x50>
     ed2:	80 f0       	brcs	.+32     	; 0xef4 <tworks2_PSA_logic()+0x2a>
     ed4:	82 30       	cpi	r24, 0x02	; 2
     ed6:	09 f4       	brne	.+2      	; 0xeda <tworks2_PSA_logic()+0x10>
     ed8:	40 c0       	rjmp	.+128    	; 0xf5a <tworks2_PSA_logic()+0x90>
     eda:	83 30       	cpi	r24, 0x03	; 3
     edc:	f1 f0       	breq	.+60     	; 0xf1a <tworks2_PSA_logic()+0x50>
     ede:	10 92 68 04 	sts	0x0468, r1	; 0x800468 <cycle>
     ee2:	10 92 36 04 	sts	0x0436, r1	; 0x800436 <nb_delay>
     ee6:	10 92 37 04 	sts	0x0437, r1	; 0x800437 <nb_delay+0x1>
     eea:	10 92 38 04 	sts	0x0438, r1	; 0x800438 <nb_delay+0x2>
     eee:	10 92 39 04 	sts	0x0439, r1	; 0x800439 <nb_delay+0x3>
     ef2:	08 95       	ret
     ef4:	61 e0       	ldi	r22, 0x01	; 1
     ef6:	81 e0       	ldi	r24, 0x01	; 1
     ef8:	90 e0       	ldi	r25, 0x00	; 0
     efa:	0e 94 ff 06 	call	0xdfe	; 0xdfe <do_control(DO_CONTROLS_E, bool)>
     efe:	60 e0       	ldi	r22, 0x00	; 0
     f00:	82 e0       	ldi	r24, 0x02	; 2
     f02:	90 e0       	ldi	r25, 0x00	; 0
     f04:	0e 94 ff 06 	call	0xdfe	; 0xdfe <do_control(DO_CONTROLS_E, bool)>
     f08:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <Production_Delay>
     f0c:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <Production_Delay+0x1>
     f10:	a0 91 44 04 	lds	r26, 0x0444	; 0x800444 <Production_Delay+0x2>
     f14:	b0 91 45 04 	lds	r27, 0x0445	; 0x800445 <Production_Delay+0x3>
     f18:	12 c0       	rjmp	.+36     	; 0xf3e <tworks2_PSA_logic()+0x74>
     f1a:	61 e0       	ldi	r22, 0x01	; 1
     f1c:	81 e0       	ldi	r24, 0x01	; 1
     f1e:	90 e0       	ldi	r25, 0x00	; 0
     f20:	0e 94 ff 06 	call	0xdfe	; 0xdfe <do_control(DO_CONTROLS_E, bool)>
     f24:	61 e0       	ldi	r22, 0x01	; 1
     f26:	82 e0       	ldi	r24, 0x02	; 2
     f28:	90 e0       	ldi	r25, 0x00	; 0
     f2a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <do_control(DO_CONTROLS_E, bool)>
     f2e:	80 91 3a 04 	lds	r24, 0x043A	; 0x80043a <PreCharge_Delay>
     f32:	90 91 3b 04 	lds	r25, 0x043B	; 0x80043b <PreCharge_Delay+0x1>
     f36:	a0 91 3c 04 	lds	r26, 0x043C	; 0x80043c <PreCharge_Delay+0x2>
     f3a:	b0 91 3d 04 	lds	r27, 0x043D	; 0x80043d <PreCharge_Delay+0x3>
     f3e:	80 93 36 04 	sts	0x0436, r24	; 0x800436 <nb_delay>
     f42:	90 93 37 04 	sts	0x0437, r25	; 0x800437 <nb_delay+0x1>
     f46:	a0 93 38 04 	sts	0x0438, r26	; 0x800438 <nb_delay+0x2>
     f4a:	b0 93 39 04 	sts	0x0439, r27	; 0x800439 <nb_delay+0x3>
     f4e:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <cycle>
     f52:	8f 5f       	subi	r24, 0xFF	; 255
     f54:	80 93 68 04 	sts	0x0468, r24	; 0x800468 <cycle>
     f58:	08 95       	ret
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	81 e0       	ldi	r24, 0x01	; 1
     f5e:	90 e0       	ldi	r25, 0x00	; 0
     f60:	0e 94 ff 06 	call	0xdfe	; 0xdfe <do_control(DO_CONTROLS_E, bool)>
     f64:	61 e0       	ldi	r22, 0x01	; 1
     f66:	cc cf       	rjmp	.-104    	; 0xf00 <tworks2_PSA_logic()+0x36>

00000f68 <o2_main_task()>:
_Z12o2_main_taskv():
     f68:	cf 92       	push	r12
     f6a:	df 92       	push	r13
     f6c:	ef 92       	push	r14
     f6e:	ff 92       	push	r15
     f70:	80 91 54 04 	lds	r24, 0x0454	; 0x800454 <f_system_running>
     f74:	81 11       	cpse	r24, r1
     f76:	07 c0       	rjmp	.+14     	; 0xf86 <o2_main_task()+0x1e>
     f78:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <o2_main_task()::once_done>
     f7c:	ff 90       	pop	r15
     f7e:	ef 90       	pop	r14
     f80:	df 90       	pop	r13
     f82:	cf 90       	pop	r12
     f84:	08 95       	ret
     f86:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <o2_main_task()::once_done>
     f8a:	81 11       	cpse	r24, r1
     f8c:	08 c0       	rjmp	.+16     	; 0xf9e <o2_main_task()+0x36>
     f8e:	81 e0       	ldi	r24, 0x01	; 1
     f90:	80 93 62 04 	sts	0x0462, r24	; 0x800462 <o2_main_task()::once_done>
     f94:	61 e0       	ldi	r22, 0x01	; 1
     f96:	88 e0       	ldi	r24, 0x08	; 8
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	0e 94 ff 06 	call	0xdfe	; 0xdfe <do_control(DO_CONTROLS_E, bool)>
     f9e:	80 91 51 04 	lds	r24, 0x0451	; 0x800451 <f_sec_change_o2_task>
     fa2:	88 23       	and	r24, r24
     fa4:	99 f1       	breq	.+102    	; 0x100c <o2_main_task()+0xa4>
     fa6:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <f_sec_change_o2_task>
     faa:	20 91 4a 04 	lds	r18, 0x044A	; 0x80044a <current_run_time_secs>
     fae:	30 91 4b 04 	lds	r19, 0x044B	; 0x80044b <current_run_time_secs+0x1>
     fb2:	2f 5f       	subi	r18, 0xFF	; 255
     fb4:	3f 4f       	sbci	r19, 0xFF	; 255
     fb6:	30 93 4b 04 	sts	0x044B, r19	; 0x80044b <current_run_time_secs+0x1>
     fba:	20 93 4a 04 	sts	0x044A, r18	; 0x80044a <current_run_time_secs>
     fbe:	c0 90 46 04 	lds	r12, 0x0446	; 0x800446 <total_run_time_secs>
     fc2:	d0 90 47 04 	lds	r13, 0x0447	; 0x800447 <total_run_time_secs+0x1>
     fc6:	e0 90 48 04 	lds	r14, 0x0448	; 0x800448 <total_run_time_secs+0x2>
     fca:	f0 90 49 04 	lds	r15, 0x0449	; 0x800449 <total_run_time_secs+0x3>
     fce:	8f ef       	ldi	r24, 0xFF	; 255
     fd0:	c8 1a       	sub	r12, r24
     fd2:	d8 0a       	sbc	r13, r24
     fd4:	e8 0a       	sbc	r14, r24
     fd6:	f8 0a       	sbc	r15, r24
     fd8:	c0 92 46 04 	sts	0x0446, r12	; 0x800446 <total_run_time_secs>
     fdc:	d0 92 47 04 	sts	0x0447, r13	; 0x800447 <total_run_time_secs+0x1>
     fe0:	e0 92 48 04 	sts	0x0448, r14	; 0x800448 <total_run_time_secs+0x2>
     fe4:	f0 92 49 04 	sts	0x0449, r15	; 0x800449 <total_run_time_secs+0x3>
     fe8:	c9 01       	movw	r24, r18
     fea:	6f e0       	ldi	r22, 0x0F	; 15
     fec:	70 e0       	ldi	r23, 0x00	; 0
     fee:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
     ff2:	89 2b       	or	r24, r25
     ff4:	59 f4       	brne	.+22     	; 0x100c <o2_main_task()+0xa4>
     ff6:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <o2_main_task()::quadrant>
     ffa:	8f 5f       	subi	r24, 0xFF	; 255
     ffc:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <o2_main_task()::quadrant>
    1000:	83 30       	cpi	r24, 0x03	; 3
    1002:	08 f4       	brcc	.+2      	; 0x1006 <o2_main_task()+0x9e>
    1004:	73 c0       	rjmp	.+230    	; 0x10ec <o2_main_task()+0x184>
    1006:	83 30       	cpi	r24, 0x03	; 3
    1008:	09 f4       	brne	.+2      	; 0x100c <o2_main_task()+0xa4>
    100a:	7e c0       	rjmp	.+252    	; 0x1108 <o2_main_task()+0x1a0>
_Z12time_elapsedm():
    100c:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <systemtick_msecs>
    1010:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <systemtick_msecs+0x1>
    1014:	a0 91 60 04 	lds	r26, 0x0460	; 0x800460 <systemtick_msecs+0x2>
    1018:	b0 91 61 04 	lds	r27, 0x0461	; 0x800461 <systemtick_msecs+0x3>
    101c:	40 91 64 04 	lds	r20, 0x0464	; 0x800464 <o2_main_task()::time_tag>
    1020:	50 91 65 04 	lds	r21, 0x0465	; 0x800465 <o2_main_task()::time_tag+0x1>
    1024:	60 91 66 04 	lds	r22, 0x0466	; 0x800466 <o2_main_task()::time_tag+0x2>
    1028:	70 91 67 04 	lds	r23, 0x0467	; 0x800467 <o2_main_task()::time_tag+0x3>
    102c:	84 1b       	sub	r24, r20
    102e:	95 0b       	sbc	r25, r21
    1030:	a6 0b       	sbc	r26, r22
    1032:	b7 0b       	sbc	r27, r23
_Z12o2_main_taskv():
    1034:	40 91 36 04 	lds	r20, 0x0436	; 0x800436 <nb_delay>
    1038:	50 91 37 04 	lds	r21, 0x0437	; 0x800437 <nb_delay+0x1>
    103c:	60 91 38 04 	lds	r22, 0x0438	; 0x800438 <nb_delay+0x2>
    1040:	70 91 39 04 	lds	r23, 0x0439	; 0x800439 <nb_delay+0x3>
    1044:	84 17       	cp	r24, r20
    1046:	95 07       	cpc	r25, r21
    1048:	a6 07       	cpc	r26, r22
    104a:	b7 07       	cpc	r27, r23
    104c:	08 f4       	brcc	.+2      	; 0x1050 <o2_main_task()+0xe8>
    104e:	96 cf       	rjmp	.-212    	; 0xf7c <o2_main_task()+0x14>
    1050:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <systemtick_msecs>
    1054:	90 91 5f 04 	lds	r25, 0x045F	; 0x80045f <systemtick_msecs+0x1>
    1058:	a0 91 60 04 	lds	r26, 0x0460	; 0x800460 <systemtick_msecs+0x2>
    105c:	b0 91 61 04 	lds	r27, 0x0461	; 0x800461 <systemtick_msecs+0x3>
    1060:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <o2_main_task()::time_tag>
    1064:	90 93 65 04 	sts	0x0465, r25	; 0x800465 <o2_main_task()::time_tag+0x1>
    1068:	a0 93 66 04 	sts	0x0466, r26	; 0x800466 <o2_main_task()::time_tag+0x2>
    106c:	b0 93 67 04 	sts	0x0467, r27	; 0x800467 <o2_main_task()::time_tag+0x3>
    1070:	66 e3       	ldi	r22, 0x36	; 54
    1072:	72 e0       	ldi	r23, 0x02	; 2
    1074:	86 ea       	ldi	r24, 0xA6	; 166
    1076:	95 e0       	ldi	r25, 0x05	; 5
    1078:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <Print::println(char const*)>
    107c:	0e 94 65 07 	call	0xeca	; 0xeca <tworks2_PSA_logic()>
    1080:	80 91 36 04 	lds	r24, 0x0436	; 0x800436 <nb_delay>
    1084:	90 91 37 04 	lds	r25, 0x0437	; 0x800437 <nb_delay+0x1>
    1088:	a0 91 38 04 	lds	r26, 0x0438	; 0x800438 <nb_delay+0x2>
    108c:	b0 91 39 04 	lds	r27, 0x0439	; 0x800439 <nb_delay+0x3>
    1090:	40 91 32 04 	lds	r20, 0x0432	; 0x800432 <prev_nb_delay>
    1094:	50 91 33 04 	lds	r21, 0x0433	; 0x800433 <prev_nb_delay+0x1>
    1098:	60 91 34 04 	lds	r22, 0x0434	; 0x800434 <prev_nb_delay+0x2>
    109c:	70 91 35 04 	lds	r23, 0x0435	; 0x800435 <prev_nb_delay+0x3>
    10a0:	84 17       	cp	r24, r20
    10a2:	95 07       	cpc	r25, r21
    10a4:	a6 07       	cpc	r26, r22
    10a6:	b7 07       	cpc	r27, r23
    10a8:	09 f4       	brne	.+2      	; 0x10ac <o2_main_task()+0x144>
    10aa:	68 cf       	rjmp	.-304    	; 0xf7c <o2_main_task()+0x14>
    10ac:	80 93 32 04 	sts	0x0432, r24	; 0x800432 <prev_nb_delay>
    10b0:	90 93 33 04 	sts	0x0433, r25	; 0x800433 <prev_nb_delay+0x1>
    10b4:	a0 93 34 04 	sts	0x0434, r26	; 0x800434 <prev_nb_delay+0x2>
    10b8:	b0 93 35 04 	sts	0x0435, r27	; 0x800435 <prev_nb_delay+0x3>
    10bc:	6a e4       	ldi	r22, 0x4A	; 74
    10be:	72 e0       	ldi	r23, 0x02	; 2
    10c0:	86 ea       	ldi	r24, 0xA6	; 166
    10c2:	95 e0       	ldi	r25, 0x05	; 5
    10c4:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
    10c8:	40 91 36 04 	lds	r20, 0x0436	; 0x800436 <nb_delay>
    10cc:	50 91 37 04 	lds	r21, 0x0437	; 0x800437 <nb_delay+0x1>
    10d0:	60 91 38 04 	lds	r22, 0x0438	; 0x800438 <nb_delay+0x2>
    10d4:	70 91 39 04 	lds	r23, 0x0439	; 0x800439 <nb_delay+0x3>
    10d8:	2a e0       	ldi	r18, 0x0A	; 10
    10da:	30 e0       	ldi	r19, 0x00	; 0
    10dc:	86 ea       	ldi	r24, 0xA6	; 166
    10de:	95 e0       	ldi	r25, 0x05	; 5
    10e0:	ff 90       	pop	r15
    10e2:	ef 90       	pop	r14
    10e4:	df 90       	pop	r13
    10e6:	cf 90       	pop	r12
    10e8:	0c 94 b2 18 	jmp	0x3164	; 0x3164 <Print::println(unsigned long, int)>
    10ec:	c9 01       	movw	r24, r18
    10ee:	60 e1       	ldi	r22, 0x10	; 16
    10f0:	7e e0       	ldi	r23, 0x0E	; 14
    10f2:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
    10f6:	9b 01       	movw	r18, r22
    10f8:	6c e3       	ldi	r22, 0x3C	; 60
    10fa:	70 e0       	ldi	r23, 0x00	; 0
    10fc:	0e 94 f6 1b 	call	0x37ec	; 0x37ec <__udivmodhi4>
    1100:	c9 01       	movw	r24, r18
    1102:	0e 94 63 03 	call	0x6c6	; 0x6c6 <display_run_time(unsigned int, unsigned int)>
    1106:	82 cf       	rjmp	.-252    	; 0x100c <o2_main_task()+0xa4>
    1108:	c7 01       	movw	r24, r14
    110a:	b6 01       	movw	r22, r12
    110c:	20 e1       	ldi	r18, 0x10	; 16
    110e:	3e e0       	ldi	r19, 0x0E	; 14
    1110:	40 e0       	ldi	r20, 0x00	; 0
    1112:	50 e0       	ldi	r21, 0x00	; 0
    1114:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
    1118:	b9 01       	movw	r22, r18
    111a:	33 0f       	add	r19, r19
    111c:	88 0b       	sbc	r24, r24
    111e:	99 0b       	sbc	r25, r25
    1120:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <display_run_hours(unsigned long)>
    1124:	10 92 63 04 	sts	0x0463, r1	; 0x800463 <o2_main_task()::quadrant>
    1128:	71 cf       	rjmp	.-286    	; 0x100c <o2_main_task()+0xa4>

0000112a <o2_cons_init()>:
_Z12o2_cons_initv():
    112a:	66 e5       	ldi	r22, 0x56	; 86
    112c:	72 e0       	ldi	r23, 0x02	; 2
    112e:	86 ea       	ldi	r24, 0xA6	; 166
    1130:	95 e0       	ldi	r25, 0x05	; 5
    1132:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <Print::println(char const*)>
    1136:	85 ec       	ldi	r24, 0xC5	; 197
    1138:	9f e8       	ldi	r25, 0x8F	; 143
    113a:	a1 e3       	ldi	r26, 0x31	; 49
    113c:	be e3       	ldi	r27, 0x3E	; 62
    113e:	80 93 2b 04 	sts	0x042B, r24	; 0x80042b <o2_slope>
    1142:	90 93 2c 04 	sts	0x042C, r25	; 0x80042c <o2_slope+0x1>
    1146:	a0 93 2d 04 	sts	0x042D, r26	; 0x80042d <o2_slope+0x2>
    114a:	b0 93 2e 04 	sts	0x042E, r27	; 0x80042e <o2_slope+0x3>
    114e:	87 ef       	ldi	r24, 0xF7	; 247
    1150:	95 e7       	ldi	r25, 0x75	; 117
    1152:	a0 e7       	ldi	r26, 0x70	; 112
    1154:	bf e3       	ldi	r27, 0x3F	; 63
    1156:	80 93 27 04 	sts	0x0427, r24	; 0x800427 <o2_const_val>
    115a:	90 93 28 04 	sts	0x0428, r25	; 0x800428 <o2_const_val+0x1>
    115e:	a0 93 29 04 	sts	0x0429, r26	; 0x800429 <o2_const_val+0x2>
    1162:	b0 93 2a 04 	sts	0x042A, r27	; 0x80042a <o2_const_val+0x3>
    1166:	6a ed       	ldi	r22, 0xDA	; 218
    1168:	73 e0       	ldi	r23, 0x03	; 3
    116a:	86 ea       	ldi	r24, 0xA6	; 166
    116c:	95 e0       	ldi	r25, 0x05	; 5
    116e:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <Print::println(char const*)>
    1172:	60 ea       	ldi	r22, 0xA0	; 160
    1174:	71 e0       	ldi	r23, 0x01	; 1
    1176:	86 ea       	ldi	r24, 0xA6	; 166
    1178:	95 e0       	ldi	r25, 0x05	; 5
    117a:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
    117e:	40 91 2b 04 	lds	r20, 0x042B	; 0x80042b <o2_slope>
    1182:	50 91 2c 04 	lds	r21, 0x042C	; 0x80042c <o2_slope+0x1>
    1186:	60 91 2d 04 	lds	r22, 0x042D	; 0x80042d <o2_slope+0x2>
    118a:	70 91 2e 04 	lds	r23, 0x042E	; 0x80042e <o2_slope+0x3>
    118e:	22 e0       	ldi	r18, 0x02	; 2
    1190:	30 e0       	ldi	r19, 0x00	; 0
    1192:	86 ea       	ldi	r24, 0xA6	; 166
    1194:	95 e0       	ldi	r25, 0x05	; 5
    1196:	0e 94 a8 19 	call	0x3350	; 0x3350 <Print::print(double, int)>
    119a:	6c ea       	ldi	r22, 0xAC	; 172
    119c:	71 e0       	ldi	r23, 0x01	; 1
    119e:	86 ea       	ldi	r24, 0xA6	; 166
    11a0:	95 e0       	ldi	r25, 0x05	; 5
    11a2:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
    11a6:	40 91 27 04 	lds	r20, 0x0427	; 0x800427 <o2_const_val>
    11aa:	50 91 28 04 	lds	r21, 0x0428	; 0x800428 <o2_const_val+0x1>
    11ae:	60 91 29 04 	lds	r22, 0x0429	; 0x800429 <o2_const_val+0x2>
    11b2:	70 91 2a 04 	lds	r23, 0x042A	; 0x80042a <o2_const_val+0x3>
    11b6:	22 e0       	ldi	r18, 0x02	; 2
    11b8:	30 e0       	ldi	r19, 0x00	; 0
    11ba:	86 ea       	ldi	r24, 0xA6	; 166
    11bc:	95 e0       	ldi	r25, 0x05	; 5
    11be:	0e 94 a8 19 	call	0x3350	; 0x3350 <Print::print(double, int)>
    11c2:	88 e1       	ldi	r24, 0x18	; 24
    11c4:	95 e1       	ldi	r25, 0x15	; 21
    11c6:	a0 e0       	ldi	r26, 0x00	; 0
    11c8:	b0 e0       	ldi	r27, 0x00	; 0
    11ca:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <Production_Delay>
    11ce:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <Production_Delay+0x1>
    11d2:	a0 93 44 04 	sts	0x0444, r26	; 0x800444 <Production_Delay+0x2>
    11d6:	b0 93 45 04 	sts	0x0445, r27	; 0x800445 <Production_Delay+0x3>
    11da:	8c eb       	ldi	r24, 0xBC	; 188
    11dc:	92 e0       	ldi	r25, 0x02	; 2
    11de:	a0 e0       	ldi	r26, 0x00	; 0
    11e0:	b0 e0       	ldi	r27, 0x00	; 0
    11e2:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <PreCharge_Delay>
    11e6:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <PreCharge_Delay+0x1>
    11ea:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <PreCharge_Delay+0x2>
    11ee:	b0 93 3d 04 	sts	0x043D, r27	; 0x80043d <PreCharge_Delay+0x3>
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	0e 94 ff 06 	call	0xdfe	; 0xdfe <do_control(DO_CONTROLS_E, bool)>
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	90 e0       	ldi	r25, 0x00	; 0
    1202:	0e 94 ff 06 	call	0xdfe	; 0xdfe <do_control(DO_CONTROLS_E, bool)>
    1206:	60 e0       	ldi	r22, 0x00	; 0
    1208:	84 e0       	ldi	r24, 0x04	; 4
    120a:	90 e0       	ldi	r25, 0x00	; 0
    120c:	0e 94 ff 06 	call	0xdfe	; 0xdfe <do_control(DO_CONTROLS_E, bool)>
    1210:	84 ef       	ldi	r24, 0xF4	; 244
    1212:	91 e0       	ldi	r25, 0x01	; 1
    1214:	0c 94 74 06 	jmp	0xce8	; 0xce8 <new_delay_msecs(unsigned int)>

00001218 <button_check()>:
_Z12button_checkv():
    1218:	cf 93       	push	r28
    121a:	df 93       	push	r29
    121c:	83 e0       	ldi	r24, 0x03	; 3
    121e:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <digitalRead>
    1222:	ec 01       	movw	r28, r24
    1224:	84 e0       	ldi	r24, 0x04	; 4
    1226:	0e 94 0c 15 	call	0x2a18	; 0x2a18 <digitalRead>
    122a:	20 97       	sbiw	r28, 0x00	; 0
    122c:	59 f5       	brne	.+86     	; 0x1284 <button_check()+0x6c>
    122e:	20 91 ec 03 	lds	r18, 0x03EC	; 0x8003ec <start_switch_dbnc_dly>
    1232:	30 91 ed 03 	lds	r19, 0x03ED	; 0x8003ed <start_switch_dbnc_dly+0x1>
    1236:	2f 5f       	subi	r18, 0xFF	; 255
    1238:	3f 4f       	sbci	r19, 0xFF	; 255
    123a:	30 93 ed 03 	sts	0x03ED, r19	; 0x8003ed <start_switch_dbnc_dly+0x1>
    123e:	20 93 ec 03 	sts	0x03EC, r18	; 0x8003ec <start_switch_dbnc_dly>
    1242:	28 33       	cpi	r18, 0x38	; 56
    1244:	31 05       	cpc	r19, r1
    1246:	3c f0       	brlt	.+14     	; 0x1256 <button_check()+0x3e>
    1248:	21 e0       	ldi	r18, 0x01	; 1
    124a:	20 93 22 04 	sts	0x0422, r18	; 0x800422 <start_switch_pressed>
    124e:	10 92 ed 03 	sts	0x03ED, r1	; 0x8003ed <start_switch_dbnc_dly+0x1>
    1252:	10 92 ec 03 	sts	0x03EC, r1	; 0x8003ec <start_switch_dbnc_dly>
    1256:	00 97       	sbiw	r24, 0x00	; 0
    1258:	39 f5       	brne	.+78     	; 0x12a8 <button_check()+0x90>
    125a:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <alarm_clear_bttn_dbnc_dly>
    125e:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <alarm_clear_bttn_dbnc_dly+0x1>
    1262:	01 96       	adiw	r24, 0x01	; 1
    1264:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <alarm_clear_bttn_dbnc_dly+0x1>
    1268:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <alarm_clear_bttn_dbnc_dly>
    126c:	c8 97       	sbiw	r24, 0x38	; 56
    126e:	3c f0       	brlt	.+14     	; 0x127e <button_check()+0x66>
    1270:	81 e0       	ldi	r24, 0x01	; 1
    1272:	80 93 21 04 	sts	0x0421, r24	; 0x800421 <alarm_clear_button_pressed>
    1276:	10 92 eb 03 	sts	0x03EB, r1	; 0x8003eb <alarm_clear_bttn_dbnc_dly+0x1>
    127a:	10 92 ea 03 	sts	0x03EA, r1	; 0x8003ea <alarm_clear_bttn_dbnc_dly>
    127e:	df 91       	pop	r29
    1280:	cf 91       	pop	r28
    1282:	08 95       	ret
    1284:	21 97       	sbiw	r28, 0x01	; 1
    1286:	39 f7       	brne	.-50     	; 0x1256 <button_check()+0x3e>
    1288:	20 91 ec 03 	lds	r18, 0x03EC	; 0x8003ec <start_switch_dbnc_dly>
    128c:	30 91 ed 03 	lds	r19, 0x03ED	; 0x8003ed <start_switch_dbnc_dly+0x1>
    1290:	2f 5f       	subi	r18, 0xFF	; 255
    1292:	3f 4f       	sbci	r19, 0xFF	; 255
    1294:	30 93 ed 03 	sts	0x03ED, r19	; 0x8003ed <start_switch_dbnc_dly+0x1>
    1298:	20 93 ec 03 	sts	0x03EC, r18	; 0x8003ec <start_switch_dbnc_dly>
    129c:	28 33       	cpi	r18, 0x38	; 56
    129e:	31 05       	cpc	r19, r1
    12a0:	d4 f2       	brlt	.-76     	; 0x1256 <button_check()+0x3e>
    12a2:	10 92 22 04 	sts	0x0422, r1	; 0x800422 <start_switch_pressed>
    12a6:	d3 cf       	rjmp	.-90     	; 0x124e <button_check()+0x36>
    12a8:	01 97       	sbiw	r24, 0x01	; 1
    12aa:	49 f7       	brne	.-46     	; 0x127e <button_check()+0x66>
    12ac:	80 91 ea 03 	lds	r24, 0x03EA	; 0x8003ea <alarm_clear_bttn_dbnc_dly>
    12b0:	90 91 eb 03 	lds	r25, 0x03EB	; 0x8003eb <alarm_clear_bttn_dbnc_dly+0x1>
    12b4:	01 96       	adiw	r24, 0x01	; 1
    12b6:	90 93 eb 03 	sts	0x03EB, r25	; 0x8003eb <alarm_clear_bttn_dbnc_dly+0x1>
    12ba:	80 93 ea 03 	sts	0x03EA, r24	; 0x8003ea <alarm_clear_bttn_dbnc_dly>
    12be:	c8 97       	sbiw	r24, 0x38	; 56
    12c0:	f4 f2       	brlt	.-68     	; 0x127e <button_check()+0x66>
    12c2:	10 92 21 04 	sts	0x0421, r1	; 0x800421 <alarm_clear_button_pressed>
    12c6:	d7 cf       	rjmp	.-82     	; 0x1276 <button_check()+0x5e>

000012c8 <ui_print_welcome()>:
_Z16ui_print_welcomev():
    12c8:	40 e0       	ldi	r20, 0x00	; 0
    12ca:	60 e0       	ldi	r22, 0x00	; 0
    12cc:	81 ec       	ldi	r24, 0xC1	; 193
    12ce:	94 e0       	ldi	r25, 0x04	; 4
    12d0:	0e 94 01 0c 	call	0x1802	; 0x1802 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    12d4:	69 e8       	ldi	r22, 0x89	; 137
    12d6:	72 e0       	ldi	r23, 0x02	; 2
    12d8:	81 ec       	ldi	r24, 0xC1	; 193
    12da:	94 e0       	ldi	r25, 0x04	; 4
    12dc:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
    12e0:	41 e0       	ldi	r20, 0x01	; 1
    12e2:	60 e0       	ldi	r22, 0x00	; 0
    12e4:	81 ec       	ldi	r24, 0xC1	; 193
    12e6:	94 e0       	ldi	r25, 0x04	; 4
    12e8:	0e 94 01 0c 	call	0x1802	; 0x1802 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    12ec:	6c e9       	ldi	r22, 0x9C	; 156
    12ee:	72 e0       	ldi	r23, 0x02	; 2
    12f0:	81 ec       	ldi	r24, 0xC1	; 193
    12f2:	94 e0       	ldi	r25, 0x04	; 4
    12f4:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
    12f8:	42 e0       	ldi	r20, 0x02	; 2
    12fa:	60 e0       	ldi	r22, 0x00	; 0
    12fc:	81 ec       	ldi	r24, 0xC1	; 193
    12fe:	94 e0       	ldi	r25, 0x04	; 4
    1300:	0e 94 01 0c 	call	0x1802	; 0x1802 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1304:	6b ea       	ldi	r22, 0xAB	; 171
    1306:	72 e0       	ldi	r23, 0x02	; 2
    1308:	81 ec       	ldi	r24, 0xC1	; 193
    130a:	94 e0       	ldi	r25, 0x04	; 4
    130c:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <Print::print(char const*)>

00001310 <setup>:
_ZN14HardwareSerial5beginEm():
    1310:	26 e0       	ldi	r18, 0x06	; 6
    1312:	40 e0       	ldi	r20, 0x00	; 0
    1314:	52 ec       	ldi	r21, 0xC2	; 194
    1316:	61 e0       	ldi	r22, 0x01	; 1
    1318:	70 e0       	ldi	r23, 0x00	; 0
    131a:	86 ea       	ldi	r24, 0xA6	; 166
    131c:	95 e0       	ldi	r25, 0x05	; 5
    131e:	0e 94 4e 16 	call	0x2c9c	; 0x2c9c <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
    1322:	60 ec       	ldi	r22, 0xC0	; 192
    1324:	72 e0       	ldi	r23, 0x02	; 2
    1326:	86 ea       	ldi	r24, 0xA6	; 166
    1328:	95 e0       	ldi	r25, 0x05	; 5
    132a:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <Print::println(char const*)>
    132e:	0e 94 a0 06 	call	0xd40	; 0xd40 <platform_init()>
    1332:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <ads_init()>
_Z7db_initv():
    1336:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <f_system_running>
setup():
    133a:	0e 94 95 08 	call	0x112a	; 0x112a <o2_cons_init()>
    133e:	0e 94 05 01 	call	0x20a	; 0x20a <init_7segments()>
    1342:	0e 94 20 02 	call	0x440	; 0x440 <test_7segments()>
    1346:	60 e0       	ldi	r22, 0x00	; 0
    1348:	70 e0       	ldi	r23, 0x00	; 0
    134a:	cb 01       	movw	r24, r22
    134c:	0e 94 24 02 	call	0x448	; 0x448 <display_o2(float)>
    1350:	60 91 46 04 	lds	r22, 0x0446	; 0x800446 <total_run_time_secs>
    1354:	70 91 47 04 	lds	r23, 0x0447	; 0x800447 <total_run_time_secs+0x1>
    1358:	80 91 48 04 	lds	r24, 0x0448	; 0x800448 <total_run_time_secs+0x2>
    135c:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <total_run_time_secs+0x3>
    1360:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <display_run_hours(unsigned long)>
_Z7ui_initv():
    1364:	0c 94 64 09 	jmp	0x12c8	; 0x12c8 <ui_print_welcome()>

00001368 <beep_for(int)>:
_Z8beep_fori():
    1368:	cf 93       	push	r28
    136a:	df 93       	push	r29
    136c:	ec 01       	movw	r28, r24
    136e:	60 e0       	ldi	r22, 0x00	; 0
    1370:	80 e1       	ldi	r24, 0x10	; 16
    1372:	90 e0       	ldi	r25, 0x00	; 0
    1374:	0e 94 ff 06 	call	0xdfe	; 0xdfe <do_control(DO_CONTROLS_E, bool)>
    1378:	ce 01       	movw	r24, r28
    137a:	0e 94 74 06 	call	0xce8	; 0xce8 <new_delay_msecs(unsigned int)>
    137e:	61 e0       	ldi	r22, 0x01	; 1
    1380:	80 e1       	ldi	r24, 0x10	; 16
    1382:	90 e0       	ldi	r25, 0x00	; 0
    1384:	df 91       	pop	r29
    1386:	cf 91       	pop	r28
    1388:	0c 94 ff 06 	jmp	0xdfe	; 0xdfe <do_control(DO_CONTROLS_E, bool)>

0000138c <ui_task_main()>:
_Z12ui_task_mainv():
    138c:	80 91 52 04 	lds	r24, 0x0452	; 0x800452 <f_sec_change_ui_task>
    1390:	88 23       	and	r24, r24
    1392:	59 f0       	breq	.+22     	; 0x13aa <ui_task_main()+0x1e>
    1394:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <f_sec_change_ui_task>
    1398:	80 91 e8 03 	lds	r24, 0x03E8	; 0x8003e8 <__data_end>
    139c:	90 91 e9 03 	lds	r25, 0x03E9	; 0x8003e9 <__data_end+0x1>
    13a0:	01 96       	adiw	r24, 0x01	; 1
    13a2:	90 93 e9 03 	sts	0x03E9, r25	; 0x8003e9 <__data_end+0x1>
    13a6:	80 93 e8 03 	sts	0x03E8, r24	; 0x8003e8 <__data_end>
    13aa:	0e 94 0c 09 	call	0x1218	; 0x1218 <button_check()>
    13ae:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <ui_state>
    13b2:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <ui_state+0x1>
    13b6:	85 30       	cpi	r24, 0x05	; 5
    13b8:	91 05       	cpc	r25, r1
    13ba:	09 f4       	brne	.+2      	; 0x13be <ui_task_main()+0x32>
    13bc:	99 c0       	rjmp	.+306    	; 0x14f0 <ui_task_main()+0x164>
    13be:	5c f4       	brge	.+22     	; 0x13d6 <ui_task_main()+0x4a>
    13c0:	00 97       	sbiw	r24, 0x00	; 0
    13c2:	09 f4       	brne	.+2      	; 0x13c6 <ui_task_main()+0x3a>
    13c4:	50 c0       	rjmp	.+160    	; 0x1466 <ui_task_main()+0xda>
    13c6:	04 97       	sbiw	r24, 0x04	; 4
    13c8:	09 f4       	brne	.+2      	; 0x13cc <ui_task_main()+0x40>
    13ca:	7d c0       	rjmp	.+250    	; 0x14c6 <ui_task_main()+0x13a>
    13cc:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <ui_state+0x1>
    13d0:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <ui_state>
    13d4:	4e c0       	rjmp	.+156    	; 0x1472 <ui_task_main()+0xe6>
    13d6:	86 30       	cpi	r24, 0x06	; 6
    13d8:	91 05       	cpc	r25, r1
    13da:	09 f4       	brne	.+2      	; 0x13de <ui_task_main()+0x52>
    13dc:	b9 c0       	rjmp	.+370    	; 0x1550 <ui_task_main()+0x1c4>
    13de:	07 97       	sbiw	r24, 0x07	; 7
    13e0:	a9 f7       	brne	.-22     	; 0x13cc <ui_task_main()+0x40>
    13e2:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <f_system_running>
    13e6:	68 e4       	ldi	r22, 0x48	; 72
    13e8:	73 e0       	ldi	r23, 0x03	; 3
    13ea:	86 ea       	ldi	r24, 0xA6	; 166
    13ec:	95 e0       	ldi	r25, 0x05	; 5
    13ee:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <Print::println(char const*)>
    13f2:	43 e0       	ldi	r20, 0x03	; 3
    13f4:	60 e0       	ldi	r22, 0x00	; 0
    13f6:	81 ec       	ldi	r24, 0xC1	; 193
    13f8:	94 e0       	ldi	r25, 0x04	; 4
    13fa:	0e 94 01 0c 	call	0x1802	; 0x1802 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    13fe:	6d e5       	ldi	r22, 0x5D	; 93
    1400:	73 e0       	ldi	r23, 0x03	; 3
    1402:	81 ec       	ldi	r24, 0xC1	; 193
    1404:	94 e0       	ldi	r25, 0x04	; 4
    1406:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
    140a:	60 e0       	ldi	r22, 0x00	; 0
    140c:	88 e0       	ldi	r24, 0x08	; 8
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	0e 94 ff 06 	call	0xdfe	; 0xdfe <do_control(DO_CONTROLS_E, bool)>
    1414:	8f e6       	ldi	r24, 0x6F	; 111
    1416:	90 e0       	ldi	r25, 0x00	; 0
    1418:	0e 94 b4 09 	call	0x1368	; 0x1368 <beep_for(int)>
    141c:	0e 94 5b 07 	call	0xeb6	; 0xeb6 <tworks2_values_to_default_postion()>
    1420:	88 ee       	ldi	r24, 0xE8	; 232
    1422:	93 e0       	ldi	r25, 0x03	; 3
    1424:	0e 94 74 06 	call	0xce8	; 0xce8 <new_delay_msecs(unsigned int)>
    1428:	43 e0       	ldi	r20, 0x03	; 3
    142a:	60 e0       	ldi	r22, 0x00	; 0
    142c:	81 ec       	ldi	r24, 0xC1	; 193
    142e:	94 e0       	ldi	r25, 0x04	; 4
    1430:	0e 94 01 0c 	call	0x1802	; 0x1802 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1434:	62 e7       	ldi	r22, 0x72	; 114
    1436:	73 e0       	ldi	r23, 0x03	; 3
    1438:	81 ec       	ldi	r24, 0xC1	; 193
    143a:	94 e0       	ldi	r25, 0x04	; 4
    143c:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
    1440:	88 ee       	ldi	r24, 0xE8	; 232
    1442:	93 e0       	ldi	r25, 0x03	; 3
    1444:	0e 94 74 06 	call	0xce8	; 0xce8 <new_delay_msecs(unsigned int)>
    1448:	43 e0       	ldi	r20, 0x03	; 3
    144a:	60 e0       	ldi	r22, 0x00	; 0
    144c:	81 ec       	ldi	r24, 0xC1	; 193
    144e:	94 e0       	ldi	r25, 0x04	; 4
    1450:	0e 94 01 0c 	call	0x1802	; 0x1802 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1454:	67 e8       	ldi	r22, 0x87	; 135
    1456:	73 e0       	ldi	r23, 0x03	; 3
    1458:	81 ec       	ldi	r24, 0xC1	; 193
    145a:	94 e0       	ldi	r25, 0x04	; 4
    145c:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
    1460:	88 e0       	ldi	r24, 0x08	; 8
    1462:	90 e0       	ldi	r25, 0x00	; 0
    1464:	02 c0       	rjmp	.+4      	; 0x146a <ui_task_main()+0xde>
    1466:	84 e0       	ldi	r24, 0x04	; 4
    1468:	90 e0       	ldi	r25, 0x00	; 0
    146a:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <ui_state+0x1>
    146e:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <ui_state>
    1472:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <ui_state>
    1476:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <ui_state+0x1>
    147a:	20 91 f0 03 	lds	r18, 0x03F0	; 0x8003f0 <prev_ui_state>
    147e:	30 91 f1 03 	lds	r19, 0x03F1	; 0x8003f1 <prev_ui_state+0x1>
    1482:	82 17       	cp	r24, r18
    1484:	93 07       	cpc	r25, r19
    1486:	09 f4       	brne	.+2      	; 0x148a <ui_task_main()+0xfe>
    1488:	9c c0       	rjmp	.+312    	; 0x15c2 <ui_task_main()+0x236>
    148a:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <prev_ui_state+0x1>
    148e:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <prev_ui_state>
    1492:	81 e0       	ldi	r24, 0x01	; 1
    1494:	90 e0       	ldi	r25, 0x00	; 0
    1496:	90 93 ef 03 	sts	0x03EF, r25	; 0x8003ef <f_state_changed+0x1>
    149a:	80 93 ee 03 	sts	0x03EE, r24	; 0x8003ee <f_state_changed>
    149e:	10 92 e9 03 	sts	0x03E9, r1	; 0x8003e9 <__data_end+0x1>
    14a2:	10 92 e8 03 	sts	0x03E8, r1	; 0x8003e8 <__data_end>
    14a6:	6c e9       	ldi	r22, 0x9C	; 156
    14a8:	73 e0       	ldi	r23, 0x03	; 3
    14aa:	86 ea       	ldi	r24, 0xA6	; 166
    14ac:	95 e0       	ldi	r25, 0x05	; 5
    14ae:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
    14b2:	60 91 f2 03 	lds	r22, 0x03F2	; 0x8003f2 <ui_state>
    14b6:	70 91 f3 03 	lds	r23, 0x03F3	; 0x8003f3 <ui_state+0x1>
    14ba:	4a e0       	ldi	r20, 0x0A	; 10
    14bc:	50 e0       	ldi	r21, 0x00	; 0
    14be:	86 ea       	ldi	r24, 0xA6	; 166
    14c0:	95 e0       	ldi	r25, 0x05	; 5
    14c2:	0c 94 74 18 	jmp	0x30e8	; 0x30e8 <Print::println(int, int)>
    14c6:	81 ec       	ldi	r24, 0xC1	; 193
    14c8:	94 e0       	ldi	r25, 0x04	; 4
    14ca:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <LiquidCrystal::clear()>
    14ce:	0e 94 64 09 	call	0x12c8	; 0x12c8 <ui_print_welcome()>
    14d2:	43 e0       	ldi	r20, 0x03	; 3
    14d4:	60 e0       	ldi	r22, 0x00	; 0
    14d6:	81 ec       	ldi	r24, 0xC1	; 193
    14d8:	94 e0       	ldi	r25, 0x04	; 4
    14da:	0e 94 01 0c 	call	0x1802	; 0x1802 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    14de:	6c ed       	ldi	r22, 0xDC	; 220
    14e0:	72 e0       	ldi	r23, 0x02	; 2
    14e2:	81 ec       	ldi	r24, 0xC1	; 193
    14e4:	94 e0       	ldi	r25, 0x04	; 4
    14e6:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
    14ea:	85 e0       	ldi	r24, 0x05	; 5
    14ec:	90 e0       	ldi	r25, 0x00	; 0
    14ee:	bd cf       	rjmp	.-134    	; 0x146a <ui_task_main()+0xde>
    14f0:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <start_switch_pressed>
    14f4:	81 30       	cpi	r24, 0x01	; 1
    14f6:	09 f0       	breq	.+2      	; 0x14fa <ui_task_main()+0x16e>
    14f8:	bc cf       	rjmp	.-136    	; 0x1472 <ui_task_main()+0xe6>
    14fa:	80 93 54 04 	sts	0x0454, r24	; 0x800454 <f_system_running>
    14fe:	61 ef       	ldi	r22, 0xF1	; 241
    1500:	72 e0       	ldi	r23, 0x02	; 2
    1502:	86 ea       	ldi	r24, 0xA6	; 166
    1504:	95 e0       	ldi	r25, 0x05	; 5
    1506:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <Print::println(char const*)>
    150a:	43 e0       	ldi	r20, 0x03	; 3
    150c:	60 e0       	ldi	r22, 0x00	; 0
    150e:	81 ec       	ldi	r24, 0xC1	; 193
    1510:	94 e0       	ldi	r25, 0x04	; 4
    1512:	0e 94 01 0c 	call	0x1802	; 0x1802 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1516:	69 e0       	ldi	r22, 0x09	; 9
    1518:	73 e0       	ldi	r23, 0x03	; 3
    151a:	81 ec       	ldi	r24, 0xC1	; 193
    151c:	94 e0       	ldi	r25, 0x04	; 4
    151e:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
    1522:	8b e2       	ldi	r24, 0x2B	; 43
    1524:	92 e0       	ldi	r25, 0x02	; 2
    1526:	0e 94 b4 09 	call	0x1368	; 0x1368 <beep_for(int)>
    152a:	43 e0       	ldi	r20, 0x03	; 3
    152c:	60 e0       	ldi	r22, 0x00	; 0
    152e:	81 ec       	ldi	r24, 0xC1	; 193
    1530:	94 e0       	ldi	r25, 0x04	; 4
    1532:	0e 94 01 0c 	call	0x1802	; 0x1802 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1536:	6e e1       	ldi	r22, 0x1E	; 30
    1538:	73 e0       	ldi	r23, 0x03	; 3
    153a:	81 ec       	ldi	r24, 0xC1	; 193
    153c:	94 e0       	ldi	r25, 0x04	; 4
    153e:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
    1542:	88 ee       	ldi	r24, 0xE8	; 232
    1544:	93 e0       	ldi	r25, 0x03	; 3
    1546:	0e 94 74 06 	call	0xce8	; 0xce8 <new_delay_msecs(unsigned int)>
    154a:	86 e0       	ldi	r24, 0x06	; 6
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	8d cf       	rjmp	.-230    	; 0x146a <ui_task_main()+0xde>
    1550:	80 91 ee 03 	lds	r24, 0x03EE	; 0x8003ee <f_state_changed>
    1554:	90 91 ef 03 	lds	r25, 0x03EF	; 0x8003ef <f_state_changed+0x1>
    1558:	89 2b       	or	r24, r25
    155a:	61 f1       	breq	.+88     	; 0x15b4 <ui_task_main()+0x228>
    155c:	10 92 ef 03 	sts	0x03EF, r1	; 0x8003ef <f_state_changed+0x1>
    1560:	10 92 ee 03 	sts	0x03EE, r1	; 0x8003ee <f_state_changed>
    1564:	8c e0       	ldi	r24, 0x0C	; 12
    1566:	94 e0       	ldi	r25, 0x04	; 4
    1568:	0e 94 f7 00 	call	0x1ee	; 0x1ee <lcd_clear_buf(char*)>
    156c:	81 ec       	ldi	r24, 0xC1	; 193
    156e:	94 e0       	ldi	r25, 0x04	; 4
    1570:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <LiquidCrystal::clear()>
    1574:	40 e0       	ldi	r20, 0x00	; 0
    1576:	60 e0       	ldi	r22, 0x00	; 0
    1578:	81 ec       	ldi	r24, 0xC1	; 193
    157a:	94 e0       	ldi	r25, 0x04	; 4
    157c:	0e 94 01 0c 	call	0x1802	; 0x1802 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1580:	64 e3       	ldi	r22, 0x34	; 52
    1582:	73 e0       	ldi	r23, 0x03	; 3
    1584:	8c e0       	ldi	r24, 0x0C	; 12
    1586:	94 e0       	ldi	r25, 0x04	; 4
    1588:	0e 94 35 1c 	call	0x386a	; 0x386a <strcpy>
    158c:	6c e0       	ldi	r22, 0x0C	; 12
    158e:	74 e0       	ldi	r23, 0x04	; 4
    1590:	86 ea       	ldi	r24, 0xA6	; 166
    1592:	95 e0       	ldi	r25, 0x05	; 5
    1594:	0e 94 c2 17 	call	0x2f84	; 0x2f84 <Print::println(char const*)>
    1598:	6c e0       	ldi	r22, 0x0C	; 12
    159a:	74 e0       	ldi	r23, 0x04	; 4
    159c:	81 ec       	ldi	r24, 0xC1	; 193
    159e:	94 e0       	ldi	r25, 0x04	; 4
    15a0:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <Print::print(char const*)>
    15a4:	10 92 4c 04 	sts	0x044C, r1	; 0x80044c <prev_o2_concentration>
    15a8:	10 92 4d 04 	sts	0x044D, r1	; 0x80044d <prev_o2_concentration+0x1>
    15ac:	10 92 4e 04 	sts	0x044E, r1	; 0x80044e <prev_o2_concentration+0x2>
    15b0:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <prev_o2_concentration+0x3>
    15b4:	80 91 22 04 	lds	r24, 0x0422	; 0x800422 <start_switch_pressed>
    15b8:	81 11       	cpse	r24, r1
    15ba:	5b cf       	rjmp	.-330    	; 0x1472 <ui_task_main()+0xe6>
    15bc:	87 e0       	ldi	r24, 0x07	; 7
    15be:	90 e0       	ldi	r25, 0x00	; 0
    15c0:	54 cf       	rjmp	.-344    	; 0x146a <ui_task_main()+0xde>
    15c2:	08 95       	ret

000015c4 <loop>:
loop():
    15c4:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <f_msec>
    15c8:	88 23       	and	r24, r24
    15ca:	19 f0       	breq	.+6      	; 0x15d2 <loop+0xe>
    15cc:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <f_msec>
    15d0:	08 95       	ret
    15d2:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <f_10msec>
    15d6:	88 23       	and	r24, r24
    15d8:	19 f0       	breq	.+6      	; 0x15e0 <loop+0x1c>
    15da:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <f_10msec>
    15de:	08 95       	ret
    15e0:	80 91 58 04 	lds	r24, 0x0458	; 0x800458 <f_100msec>
    15e4:	88 23       	and	r24, r24
    15e6:	19 f0       	breq	.+6      	; 0x15ee <loop+0x2a>
    15e8:	10 92 58 04 	sts	0x0458, r1	; 0x800458 <f_100msec>
    15ec:	08 95       	ret
    15ee:	80 91 57 04 	lds	r24, 0x0457	; 0x800457 <f_1sec>
    15f2:	88 23       	and	r24, r24
    15f4:	e9 f0       	breq	.+58     	; 0x1630 <loop+0x6c>
    15f6:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <f_1sec>
    15fa:	81 e0       	ldi	r24, 0x01	; 1
    15fc:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <f_sec_logs_task>
    1600:	80 93 52 04 	sts	0x0452, r24	; 0x800452 <f_sec_change_ui_task>
    1604:	80 93 51 04 	sts	0x0451, r24	; 0x800451 <f_sec_change_o2_task>
    1608:	80 93 50 04 	sts	0x0450, r24	; 0x800450 <f_sec_change_sensor_task>
    160c:	0e 94 10 05 	call	0xa20	; 0xa20 <o2_sensor_scan()>
    1610:	60 91 04 01 	lds	r22, 0x0104	; 0x800104 <o2_concentration>
    1614:	70 91 05 01 	lds	r23, 0x0105	; 0x800105 <o2_concentration+0x1>
    1618:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <o2_concentration+0x2>
    161c:	90 91 07 01 	lds	r25, 0x0107	; 0x800107 <o2_concentration+0x3>
    1620:	0e 94 24 02 	call	0x448	; 0x448 <display_o2(float)>
    1624:	68 e4       	ldi	r22, 0x48	; 72
    1626:	72 e0       	ldi	r23, 0x02	; 2
    1628:	86 ea       	ldi	r24, 0xA6	; 166
    162a:	95 e0       	ldi	r25, 0x05	; 5
    162c:	0c 94 9d 17 	jmp	0x2f3a	; 0x2f3a <Print::print(char const*)>
    1630:	80 91 56 04 	lds	r24, 0x0456	; 0x800456 <f_1min>
    1634:	88 23       	and	r24, r24
    1636:	19 f0       	breq	.+6      	; 0x163e <loop+0x7a>
    1638:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <f_1min>
    163c:	08 95       	ret
    163e:	80 91 55 04 	lds	r24, 0x0455	; 0x800455 <f_1hr>
    1642:	88 23       	and	r24, r24
    1644:	19 f0       	breq	.+6      	; 0x164c <loop+0x88>
    1646:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <f_1hr>
    164a:	08 95       	ret
    164c:	0e 94 b4 07 	call	0xf68	; 0xf68 <o2_main_task()>
    1650:	0e 94 c6 09 	call	0x138c	; 0x138c <ui_task_main()>
    1654:	0c 94 d2 04 	jmp	0x9a4	; 0x9a4 <logs_task()>

00001658 <_GLOBAL__sub_I_lcd>:
_GLOBAL__sub_I_lcd():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:468

}
    1658:	cf 92       	push	r12
    165a:	ef 92       	push	r14
    165c:	0f 93       	push	r16
    165e:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\habeeba\AppData\Local\Temp\arduino_build_217898\sketch/display.h:40


#define LCD_ROWS   ( 4)
#define LCD_COLS   (20)

LiquidCrystal   lcd(RS, EN, D4, D5, D6, D7);
    1660:	87 e1       	ldi	r24, 0x17	; 23
    1662:	c8 2e       	mov	r12, r24
    1664:	96 e1       	ldi	r25, 0x16	; 22
    1666:	e9 2e       	mov	r14, r25
    1668:	05 e1       	ldi	r16, 0x15	; 21
    166a:	24 e1       	ldi	r18, 0x14	; 20
    166c:	43 e1       	ldi	r20, 0x13	; 19
    166e:	62 e1       	ldi	r22, 0x12	; 18
    1670:	81 ec       	ldi	r24, 0xC1	; 193
    1672:	94 e0       	ldi	r25, 0x04	; 4
    1674:	0e 94 b6 0c 	call	0x196c	; 0x196c <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
C:\Users\habeeba\AppData\Local\Temp\arduino_build_217898\sketch/display.h:41
LedControl      lc = LedControl(dataPin_7segment, clckPin_7segment, loadPin_7segment, 1);
    1678:	01 e0       	ldi	r16, 0x01	; 1
    167a:	10 e0       	ldi	r17, 0x00	; 0
    167c:	2d e0       	ldi	r18, 0x0D	; 13
    167e:	30 e0       	ldi	r19, 0x00	; 0
    1680:	47 e0       	ldi	r20, 0x07	; 7
    1682:	50 e0       	ldi	r21, 0x00	; 0
    1684:	65 e0       	ldi	r22, 0x05	; 5
    1686:	70 e0       	ldi	r23, 0x00	; 0
    1688:	89 e6       	ldi	r24, 0x69	; 105
    168a:	94 e0       	ldi	r25, 0x04	; 4
    168c:	0e 94 a7 0d 	call	0x1b4e	; 0x1b4e <LedControl::LedControl(int, int, int, int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:20
//float x_samples[NUM_OF_SAMPLES_O2] = {224.0,  1083.0, 4888.0};




ADS1115 ADS(O2_SENSOR_ADS_ADDR);
    1690:	49 ed       	ldi	r20, 0xD9	; 217
    1692:	54 e0       	ldi	r21, 0x04	; 4
    1694:	68 e4       	ldi	r22, 0x48	; 72
    1696:	84 ef       	ldi	r24, 0xF4	; 244
    1698:	93 e0       	ldi	r25, 0x03	; 3
_GLOBAL__sub_I_lcd():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:468
    169a:	1f 91       	pop	r17
    169c:	0f 91       	pop	r16
    169e:	ef 90       	pop	r14
    16a0:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:20
    16a2:	0c 94 e3 0f 	jmp	0x1fc6	; 0x1fc6 <ADS1115::ADS1115(unsigned char, TwoWire*)>

000016a6 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:271
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    16a6:	90 e0       	ldi	r25, 0x00	; 0
    16a8:	80 e0       	ldi	r24, 0x00	; 0
    16aa:	08 95       	ret

000016ac <Print::flush()>:
_ZN5Print5flushEv():
    16ac:	08 95       	ret

000016ae <LiquidCrystal::pulseEnable()>:
_ZN13LiquidCrystal11pulseEnableEv():
    16ae:	cf 93       	push	r28
    16b0:	df 93       	push	r29
    16b2:	ec 01       	movw	r28, r24
    16b4:	60 e0       	ldi	r22, 0x00	; 0
    16b6:	8e 81       	ldd	r24, Y+6	; 0x06
    16b8:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    16bc:	81 e0       	ldi	r24, 0x01	; 1
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 2d 14 	call	0x285a	; 0x285a <delayMicroseconds>
    16c4:	61 e0       	ldi	r22, 0x01	; 1
    16c6:	8e 81       	ldd	r24, Y+6	; 0x06
    16c8:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    16cc:	81 e0       	ldi	r24, 0x01	; 1
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	0e 94 2d 14 	call	0x285a	; 0x285a <delayMicroseconds>
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	8e 81       	ldd	r24, Y+6	; 0x06
    16d8:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    16dc:	84 e6       	ldi	r24, 0x64	; 100
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	df 91       	pop	r29
    16e2:	cf 91       	pop	r28
    16e4:	0c 94 2d 14 	jmp	0x285a	; 0x285a <delayMicroseconds>

000016e8 <LiquidCrystal::write4bits(unsigned char)>:
_ZN13LiquidCrystal10write4bitsEh():
    16e8:	cf 92       	push	r12
    16ea:	df 92       	push	r13
    16ec:	ef 92       	push	r14
    16ee:	ff 92       	push	r15
    16f0:	0f 93       	push	r16
    16f2:	1f 93       	push	r17
    16f4:	cf 93       	push	r28
    16f6:	df 93       	push	r29
    16f8:	6c 01       	movw	r12, r24
    16fa:	7c 01       	movw	r14, r24
    16fc:	87 e0       	ldi	r24, 0x07	; 7
    16fe:	e8 0e       	add	r14, r24
    1700:	f1 1c       	adc	r15, r1
    1702:	d0 e0       	ldi	r29, 0x00	; 0
    1704:	c0 e0       	ldi	r28, 0x00	; 0
    1706:	06 2f       	mov	r16, r22
    1708:	10 e0       	ldi	r17, 0x00	; 0
    170a:	b8 01       	movw	r22, r16
    170c:	0c 2e       	mov	r0, r28
    170e:	02 c0       	rjmp	.+4      	; 0x1714 <LiquidCrystal::write4bits(unsigned char)+0x2c>
    1710:	75 95       	asr	r23
    1712:	67 95       	ror	r22
    1714:	0a 94       	dec	r0
    1716:	e2 f7       	brpl	.-8      	; 0x1710 <LiquidCrystal::write4bits(unsigned char)+0x28>
    1718:	61 70       	andi	r22, 0x01	; 1
    171a:	f7 01       	movw	r30, r14
    171c:	81 91       	ld	r24, Z+
    171e:	7f 01       	movw	r14, r30
    1720:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    1724:	21 96       	adiw	r28, 0x01	; 1
    1726:	c4 30       	cpi	r28, 0x04	; 4
    1728:	d1 05       	cpc	r29, r1
    172a:	79 f7       	brne	.-34     	; 0x170a <LiquidCrystal::write4bits(unsigned char)+0x22>
    172c:	c6 01       	movw	r24, r12
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	df 90       	pop	r13
    173c:	cf 90       	pop	r12
    173e:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <LiquidCrystal::pulseEnable()>

00001742 <LiquidCrystal::write8bits(unsigned char)>:
_ZN13LiquidCrystal10write8bitsEh():
    1742:	cf 92       	push	r12
    1744:	df 92       	push	r13
    1746:	ef 92       	push	r14
    1748:	ff 92       	push	r15
    174a:	0f 93       	push	r16
    174c:	1f 93       	push	r17
    174e:	cf 93       	push	r28
    1750:	df 93       	push	r29
    1752:	6c 01       	movw	r12, r24
    1754:	7c 01       	movw	r14, r24
    1756:	87 e0       	ldi	r24, 0x07	; 7
    1758:	e8 0e       	add	r14, r24
    175a:	f1 1c       	adc	r15, r1
    175c:	d0 e0       	ldi	r29, 0x00	; 0
    175e:	c0 e0       	ldi	r28, 0x00	; 0
    1760:	06 2f       	mov	r16, r22
    1762:	10 e0       	ldi	r17, 0x00	; 0
    1764:	b8 01       	movw	r22, r16
    1766:	0c 2e       	mov	r0, r28
    1768:	02 c0       	rjmp	.+4      	; 0x176e <LiquidCrystal::write8bits(unsigned char)+0x2c>
    176a:	75 95       	asr	r23
    176c:	67 95       	ror	r22
    176e:	0a 94       	dec	r0
    1770:	e2 f7       	brpl	.-8      	; 0x176a <LiquidCrystal::write8bits(unsigned char)+0x28>
    1772:	61 70       	andi	r22, 0x01	; 1
    1774:	f7 01       	movw	r30, r14
    1776:	81 91       	ld	r24, Z+
    1778:	7f 01       	movw	r14, r30
    177a:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    177e:	21 96       	adiw	r28, 0x01	; 1
    1780:	c8 30       	cpi	r28, 0x08	; 8
    1782:	d1 05       	cpc	r29, r1
    1784:	79 f7       	brne	.-34     	; 0x1764 <LiquidCrystal::write8bits(unsigned char)+0x22>
    1786:	c6 01       	movw	r24, r12
    1788:	df 91       	pop	r29
    178a:	cf 91       	pop	r28
    178c:	1f 91       	pop	r17
    178e:	0f 91       	pop	r16
    1790:	ff 90       	pop	r15
    1792:	ef 90       	pop	r14
    1794:	df 90       	pop	r13
    1796:	cf 90       	pop	r12
    1798:	0c 94 57 0b 	jmp	0x16ae	; 0x16ae <LiquidCrystal::pulseEnable()>

0000179c <LiquidCrystal::send(unsigned char, unsigned char)>:
_ZN13LiquidCrystal4sendEhh():
    179c:	1f 93       	push	r17
    179e:	cf 93       	push	r28
    17a0:	df 93       	push	r29
    17a2:	ec 01       	movw	r28, r24
    17a4:	16 2f       	mov	r17, r22
    17a6:	64 2f       	mov	r22, r20
    17a8:	8c 81       	ldd	r24, Y+4	; 0x04
    17aa:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    17ae:	8d 81       	ldd	r24, Y+5	; 0x05
    17b0:	8f 3f       	cpi	r24, 0xFF	; 255
    17b2:	19 f0       	breq	.+6      	; 0x17ba <LiquidCrystal::send(unsigned char, unsigned char)+0x1e>
    17b4:	60 e0       	ldi	r22, 0x00	; 0
    17b6:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    17ba:	8f 85       	ldd	r24, Y+15	; 0x0f
    17bc:	61 2f       	mov	r22, r17
    17be:	84 ff       	sbrs	r24, 4
    17c0:	06 c0       	rjmp	.+12     	; 0x17ce <LiquidCrystal::send(unsigned char, unsigned char)+0x32>
    17c2:	ce 01       	movw	r24, r28
    17c4:	df 91       	pop	r29
    17c6:	cf 91       	pop	r28
    17c8:	1f 91       	pop	r17
    17ca:	0c 94 a1 0b 	jmp	0x1742	; 0x1742 <LiquidCrystal::write8bits(unsigned char)>
    17ce:	70 e0       	ldi	r23, 0x00	; 0
    17d0:	84 e0       	ldi	r24, 0x04	; 4
    17d2:	75 95       	asr	r23
    17d4:	67 95       	ror	r22
    17d6:	8a 95       	dec	r24
    17d8:	e1 f7       	brne	.-8      	; 0x17d2 <LiquidCrystal::send(unsigned char, unsigned char)+0x36>
    17da:	ce 01       	movw	r24, r28
    17dc:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LiquidCrystal::write4bits(unsigned char)>
    17e0:	61 2f       	mov	r22, r17
    17e2:	ce 01       	movw	r24, r28
    17e4:	df 91       	pop	r29
    17e6:	cf 91       	pop	r28
    17e8:	1f 91       	pop	r17
    17ea:	0c 94 74 0b 	jmp	0x16e8	; 0x16e8 <LiquidCrystal::write4bits(unsigned char)>

000017ee <LiquidCrystal::command(unsigned char)>:
_ZN13LiquidCrystal7commandEh():
    17ee:	40 e0       	ldi	r20, 0x00	; 0
    17f0:	0c 94 ce 0b 	jmp	0x179c	; 0x179c <LiquidCrystal::send(unsigned char, unsigned char)>

000017f4 <LiquidCrystal::clear()>:
_ZN13LiquidCrystal5clearEv():
    17f4:	61 e0       	ldi	r22, 0x01	; 1
    17f6:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <LiquidCrystal::command(unsigned char)>
    17fa:	80 ed       	ldi	r24, 0xD0	; 208
    17fc:	97 e0       	ldi	r25, 0x07	; 7
    17fe:	0c 94 2d 14 	jmp	0x285a	; 0x285a <delayMicroseconds>

00001802 <LiquidCrystal::setCursor(unsigned char, unsigned char)>:
_ZN13LiquidCrystal9setCursorEhh():
    1802:	44 30       	cpi	r20, 0x04	; 4
    1804:	08 f0       	brcs	.+2      	; 0x1808 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x6>
    1806:	43 e0       	ldi	r20, 0x03	; 3
    1808:	fc 01       	movw	r30, r24
    180a:	23 89       	ldd	r18, Z+19	; 0x13
    180c:	42 17       	cp	r20, r18
    180e:	10 f0       	brcs	.+4      	; 0x1814 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x12>
    1810:	4f ef       	ldi	r20, 0xFF	; 255
    1812:	42 0f       	add	r20, r18
    1814:	fc 01       	movw	r30, r24
    1816:	e4 0f       	add	r30, r20
    1818:	f1 1d       	adc	r31, r1
    181a:	24 89       	ldd	r18, Z+20	; 0x14
    181c:	62 0f       	add	r22, r18
    181e:	60 68       	ori	r22, 0x80	; 128
    1820:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <LiquidCrystal::command(unsigned char)>

00001824 <LiquidCrystal::display()>:
_ZN13LiquidCrystal7displayEv():
    1824:	fc 01       	movw	r30, r24
    1826:	60 89       	ldd	r22, Z+16	; 0x10
    1828:	26 2f       	mov	r18, r22
    182a:	24 60       	ori	r18, 0x04	; 4
    182c:	20 8b       	std	Z+16, r18	; 0x10
    182e:	6c 60       	ori	r22, 0x0C	; 12
    1830:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <LiquidCrystal::command(unsigned char)>

00001834 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystal5beginEhhh():
    1834:	0f 93       	push	r16
    1836:	1f 93       	push	r17
    1838:	cf 93       	push	r28
    183a:	df 93       	push	r29
    183c:	ec 01       	movw	r28, r24
    183e:	42 30       	cpi	r20, 0x02	; 2
    1840:	18 f0       	brcs	.+6      	; 0x1848 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x14>
    1842:	8f 85       	ldd	r24, Y+15	; 0x0f
    1844:	88 60       	ori	r24, 0x08	; 8
    1846:	8f 87       	std	Y+15, r24	; 0x0f
    1848:	4b 8b       	std	Y+19, r20	; 0x13
_ZN13LiquidCrystal13setRowOffsetsEiiii():
    184a:	1c 8a       	std	Y+20, r1	; 0x14
    184c:	80 e4       	ldi	r24, 0x40	; 64
    184e:	8d 8b       	std	Y+21, r24	; 0x15
    1850:	6e 8b       	std	Y+22, r22	; 0x16
    1852:	60 5c       	subi	r22, 0xC0	; 192
    1854:	6f 8b       	std	Y+23, r22	; 0x17
_ZN13LiquidCrystal5beginEhhh():
    1856:	22 23       	and	r18, r18
    1858:	29 f0       	breq	.+10     	; 0x1864 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    185a:	41 30       	cpi	r20, 0x01	; 1
    185c:	19 f4       	brne	.+6      	; 0x1864 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    185e:	8f 85       	ldd	r24, Y+15	; 0x0f
    1860:	84 60       	ori	r24, 0x04	; 4
    1862:	8f 87       	std	Y+15, r24	; 0x0f
    1864:	61 e0       	ldi	r22, 0x01	; 1
    1866:	8c 81       	ldd	r24, Y+4	; 0x04
    1868:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
    186c:	8d 81       	ldd	r24, Y+5	; 0x05
    186e:	8f 3f       	cpi	r24, 0xFF	; 255
    1870:	19 f0       	breq	.+6      	; 0x1878 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x44>
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
    1878:	61 e0       	ldi	r22, 0x01	; 1
    187a:	8e 81       	ldd	r24, Y+6	; 0x06
    187c:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
    1880:	8e 01       	movw	r16, r28
    1882:	98 01       	movw	r18, r16
    1884:	2c 1b       	sub	r18, r28
    1886:	3d 0b       	sbc	r19, r29
    1888:	8f 85       	ldd	r24, Y+15	; 0x0f
    188a:	84 fd       	sbrc	r24, 4
    188c:	0d c0       	rjmp	.+26     	; 0x18a8 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x74>
    188e:	84 e0       	ldi	r24, 0x04	; 4
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0f 5f       	subi	r16, 0xFF	; 255
    1894:	1f 4f       	sbci	r17, 0xFF	; 255
    1896:	28 17       	cp	r18, r24
    1898:	39 07       	cpc	r19, r25
    189a:	4c f4       	brge	.+18     	; 0x18ae <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x7a>
    189c:	61 e0       	ldi	r22, 0x01	; 1
    189e:	f8 01       	movw	r30, r16
    18a0:	86 81       	ldd	r24, Z+6	; 0x06
    18a2:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
    18a6:	ed cf       	rjmp	.-38     	; 0x1882 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x4e>
    18a8:	88 e0       	ldi	r24, 0x08	; 8
    18aa:	90 e0       	ldi	r25, 0x00	; 0
    18ac:	f2 cf       	rjmp	.-28     	; 0x1892 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x5e>
    18ae:	80 e5       	ldi	r24, 0x50	; 80
    18b0:	93 ec       	ldi	r25, 0xC3	; 195
    18b2:	0e 94 2d 14 	call	0x285a	; 0x285a <delayMicroseconds>
    18b6:	60 e0       	ldi	r22, 0x00	; 0
    18b8:	8c 81       	ldd	r24, Y+4	; 0x04
    18ba:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	8e 81       	ldd	r24, Y+6	; 0x06
    18c2:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    18c6:	8d 81       	ldd	r24, Y+5	; 0x05
    18c8:	8f 3f       	cpi	r24, 0xFF	; 255
    18ca:	19 f0       	breq	.+6      	; 0x18d2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x9e>
    18cc:	60 e0       	ldi	r22, 0x00	; 0
    18ce:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    18d2:	6f 85       	ldd	r22, Y+15	; 0x0f
    18d4:	64 fd       	sbrc	r22, 4
    18d6:	33 c0       	rjmp	.+102    	; 0x193e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x10a>
    18d8:	63 e0       	ldi	r22, 0x03	; 3
    18da:	ce 01       	movw	r24, r28
    18dc:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LiquidCrystal::write4bits(unsigned char)>
    18e0:	84 e9       	ldi	r24, 0x94	; 148
    18e2:	91 e1       	ldi	r25, 0x11	; 17
    18e4:	0e 94 2d 14 	call	0x285a	; 0x285a <delayMicroseconds>
    18e8:	63 e0       	ldi	r22, 0x03	; 3
    18ea:	ce 01       	movw	r24, r28
    18ec:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LiquidCrystal::write4bits(unsigned char)>
    18f0:	84 e9       	ldi	r24, 0x94	; 148
    18f2:	91 e1       	ldi	r25, 0x11	; 17
    18f4:	0e 94 2d 14 	call	0x285a	; 0x285a <delayMicroseconds>
    18f8:	63 e0       	ldi	r22, 0x03	; 3
    18fa:	ce 01       	movw	r24, r28
    18fc:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LiquidCrystal::write4bits(unsigned char)>
    1900:	86 e9       	ldi	r24, 0x96	; 150
    1902:	90 e0       	ldi	r25, 0x00	; 0
    1904:	0e 94 2d 14 	call	0x285a	; 0x285a <delayMicroseconds>
    1908:	62 e0       	ldi	r22, 0x02	; 2
    190a:	ce 01       	movw	r24, r28
    190c:	0e 94 74 0b 	call	0x16e8	; 0x16e8 <LiquidCrystal::write4bits(unsigned char)>
    1910:	6f 85       	ldd	r22, Y+15	; 0x0f
    1912:	60 62       	ori	r22, 0x20	; 32
    1914:	ce 01       	movw	r24, r28
    1916:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <LiquidCrystal::command(unsigned char)>
    191a:	84 e0       	ldi	r24, 0x04	; 4
    191c:	88 8b       	std	Y+16, r24	; 0x10
    191e:	ce 01       	movw	r24, r28
    1920:	0e 94 12 0c 	call	0x1824	; 0x1824 <LiquidCrystal::display()>
    1924:	ce 01       	movw	r24, r28
    1926:	0e 94 fa 0b 	call	0x17f4	; 0x17f4 <LiquidCrystal::clear()>
    192a:	82 e0       	ldi	r24, 0x02	; 2
    192c:	89 8b       	std	Y+17, r24	; 0x11
    192e:	66 e0       	ldi	r22, 0x06	; 6
    1930:	ce 01       	movw	r24, r28
    1932:	df 91       	pop	r29
    1934:	cf 91       	pop	r28
    1936:	1f 91       	pop	r17
    1938:	0f 91       	pop	r16
    193a:	0c 94 f7 0b 	jmp	0x17ee	; 0x17ee <LiquidCrystal::command(unsigned char)>
    193e:	60 62       	ori	r22, 0x20	; 32
    1940:	ce 01       	movw	r24, r28
    1942:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <LiquidCrystal::command(unsigned char)>
    1946:	84 e9       	ldi	r24, 0x94	; 148
    1948:	91 e1       	ldi	r25, 0x11	; 17
    194a:	0e 94 2d 14 	call	0x285a	; 0x285a <delayMicroseconds>
    194e:	6f 85       	ldd	r22, Y+15	; 0x0f
    1950:	60 62       	ori	r22, 0x20	; 32
    1952:	ce 01       	movw	r24, r28
    1954:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <LiquidCrystal::command(unsigned char)>
    1958:	86 e9       	ldi	r24, 0x96	; 150
    195a:	90 e0       	ldi	r25, 0x00	; 0
    195c:	0e 94 2d 14 	call	0x285a	; 0x285a <delayMicroseconds>
    1960:	6f 85       	ldd	r22, Y+15	; 0x0f
    1962:	60 62       	ori	r22, 0x20	; 32
    1964:	ce 01       	movw	r24, r28
    1966:	0e 94 f7 0b 	call	0x17ee	; 0x17ee <LiquidCrystal::command(unsigned char)>
    196a:	d2 cf       	rjmp	.-92     	; 0x1910 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xdc>

0000196c <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystalC2Ehhhhhh():
    196c:	cf 92       	push	r12
    196e:	ef 92       	push	r14
    1970:	0f 93       	push	r16
    1972:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    1974:	13 82       	std	Z+3, r1	; 0x03
    1976:	12 82       	std	Z+2, r1	; 0x02
_ZN13LiquidCrystalC2Ehhhhhh():
    1978:	8c ea       	ldi	r24, 0xAC	; 172
    197a:	93 e0       	ldi	r25, 0x03	; 3
    197c:	91 83       	std	Z+1, r25	; 0x01
    197e:	80 83       	st	Z, r24
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    1980:	64 83       	std	Z+4, r22	; 0x04
    1982:	8f ef       	ldi	r24, 0xFF	; 255
    1984:	85 83       	std	Z+5, r24	; 0x05
    1986:	46 83       	std	Z+6, r20	; 0x06
    1988:	27 83       	std	Z+7, r18	; 0x07
    198a:	00 87       	std	Z+8, r16	; 0x08
    198c:	e1 86       	std	Z+9, r14	; 0x09
    198e:	c2 86       	std	Z+10, r12	; 0x0a
    1990:	13 86       	std	Z+11, r1	; 0x0b
    1992:	14 86       	std	Z+12, r1	; 0x0c
    1994:	15 86       	std	Z+13, r1	; 0x0d
    1996:	16 86       	std	Z+14, r1	; 0x0e
    1998:	17 86       	std	Z+15, r1	; 0x0f
    199a:	20 e0       	ldi	r18, 0x00	; 0
    199c:	41 e0       	ldi	r20, 0x01	; 1
    199e:	60 e1       	ldi	r22, 0x10	; 16
    19a0:	cf 01       	movw	r24, r30
_ZN13LiquidCrystalC2Ehhhhhh():
    19a2:	0f 91       	pop	r16
    19a4:	ef 90       	pop	r14
    19a6:	cf 90       	pop	r12
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    19a8:	0c 94 1a 0c 	jmp	0x1834	; 0x1834 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>

000019ac <LiquidCrystal::write(unsigned char)>:
_ZN13LiquidCrystal5writeEh():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    19ac:	41 e0       	ldi	r20, 0x01	; 1
    19ae:	0e 94 ce 0b 	call	0x179c	; 0x179c <LiquidCrystal::send(unsigned char, unsigned char)>
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	08 95       	ret

000019b8 <LedControl::spiTransfer(int, unsigned char, unsigned char)>:
_ZN10LedControl11spiTransferEihh():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:153
    for(int row=0;row<8;row++) {
        val=value >> (7-row);
        val=val & 0x01;
        setLed(addr,row,col,val);
    }
}
    19b8:	8f 92       	push	r8
    19ba:	9f 92       	push	r9
    19bc:	af 92       	push	r10
    19be:	bf 92       	push	r11
    19c0:	cf 92       	push	r12
    19c2:	df 92       	push	r13
    19c4:	ef 92       	push	r14
    19c6:	ff 92       	push	r15
    19c8:	0f 93       	push	r16
    19ca:	1f 93       	push	r17
    19cc:	cf 93       	push	r28
    19ce:	df 93       	push	r29
    19d0:	00 d0       	rcall	.+0      	; 0x19d2 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x1a>
    19d2:	cd b7       	in	r28, 0x3d	; 61
    19d4:	de b7       	in	r29, 0x3e	; 62
    19d6:	8c 01       	movw	r16, r24
    19d8:	49 83       	std	Y+1, r20	; 0x01
    19da:	2a 83       	std	Y+2, r18	; 0x02
    19dc:	66 0f       	add	r22, r22
    19de:	77 1f       	adc	r23, r23
    19e0:	f8 01       	movw	r30, r16
    19e2:	ea 5a       	subi	r30, 0xAA	; 170
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	e0 80       	ld	r14, Z
    19e8:	f1 80       	ldd	r15, Z+1	; 0x01
    19ea:	ee 0c       	add	r14, r14
    19ec:	ff 1c       	adc	r15, r15
    19ee:	f8 01       	movw	r30, r16
    19f0:	cf 01       	movw	r24, r30
    19f2:	80 1b       	sub	r24, r16
    19f4:	91 0b       	sbc	r25, r17
    19f6:	8e 15       	cp	r24, r14
    19f8:	9f 05       	cpc	r25, r15
    19fa:	14 f4       	brge	.+4      	; 0x1a00 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x48>
    19fc:	11 92       	st	Z+, r1
    19fe:	f8 cf       	rjmp	.-16     	; 0x19f0 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x38>
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
    1a02:	f8 01       	movw	r30, r16
    1a04:	e6 0f       	add	r30, r22
    1a06:	f7 1f       	adc	r31, r23
    1a08:	81 83       	std	Z+1, r24	; 0x01
    1a0a:	8a 81       	ldd	r24, Y+2	; 0x02
    1a0c:	80 83       	st	Z, r24
    1a0e:	68 01       	movw	r12, r16
    1a10:	84 e5       	ldi	r24, 0x54	; 84
    1a12:	c8 0e       	add	r12, r24
    1a14:	d1 1c       	adc	r13, r1
    1a16:	60 e0       	ldi	r22, 0x00	; 0
    1a18:	f6 01       	movw	r30, r12
    1a1a:	80 81       	ld	r24, Z
    1a1c:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    1a20:	48 01       	movw	r8, r16
    1a22:	f2 e5       	ldi	r31, 0x52	; 82
    1a24:	8f 0e       	add	r8, r31
    1a26:	91 1c       	adc	r9, r1
    1a28:	58 01       	movw	r10, r16
    1a2a:	80 e5       	ldi	r24, 0x50	; 80
    1a2c:	a8 0e       	add	r10, r24
    1a2e:	b1 1c       	adc	r11, r1
    1a30:	1e 14       	cp	r1, r14
    1a32:	1f 04       	cpc	r1, r15
    1a34:	7c f4       	brge	.+30     	; 0x1a54 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x9c>
    1a36:	e1 e0       	ldi	r30, 0x01	; 1
    1a38:	ee 1a       	sub	r14, r30
    1a3a:	f1 08       	sbc	r15, r1
    1a3c:	f8 01       	movw	r30, r16
    1a3e:	ee 0d       	add	r30, r14
    1a40:	ff 1d       	adc	r31, r15
    1a42:	20 81       	ld	r18, Z
    1a44:	41 e0       	ldi	r20, 0x01	; 1
    1a46:	f4 01       	movw	r30, r8
    1a48:	60 81       	ld	r22, Z
    1a4a:	f5 01       	movw	r30, r10
    1a4c:	80 81       	ld	r24, Z
    1a4e:	0e 94 35 15 	call	0x2a6a	; 0x2a6a <shiftOut>
    1a52:	ee cf       	rjmp	.-36     	; 0x1a30 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x78>
    1a54:	61 e0       	ldi	r22, 0x01	; 1
    1a56:	f6 01       	movw	r30, r12
    1a58:	80 81       	ld	r24, Z
    1a5a:	0f 90       	pop	r0
    1a5c:	0f 90       	pop	r0
    1a5e:	df 91       	pop	r29
    1a60:	cf 91       	pop	r28
    1a62:	1f 91       	pop	r17
    1a64:	0f 91       	pop	r16
    1a66:	ff 90       	pop	r15
    1a68:	ef 90       	pop	r14
    1a6a:	df 90       	pop	r13
    1a6c:	cf 90       	pop	r12
    1a6e:	bf 90       	pop	r11
    1a70:	af 90       	pop	r10
    1a72:	9f 90       	pop	r9
    1a74:	8f 90       	pop	r8
    1a76:	0c 94 de 14 	jmp	0x29bc	; 0x29bc <digitalWrite>

00001a7a <LedControl::shutdown(int, bool)>:
_ZN10LedControl8shutdownEib():
    1a7a:	77 fd       	sbrc	r23, 7
    1a7c:	0f c0       	rjmp	.+30     	; 0x1a9c <LedControl::shutdown(int, bool)+0x22>
    1a7e:	fc 01       	movw	r30, r24
    1a80:	ea 5a       	subi	r30, 0xAA	; 170
    1a82:	ff 4f       	sbci	r31, 0xFF	; 255
    1a84:	20 81       	ld	r18, Z
    1a86:	31 81       	ldd	r19, Z+1	; 0x01
    1a88:	62 17       	cp	r22, r18
    1a8a:	73 07       	cpc	r23, r19
    1a8c:	3c f4       	brge	.+14     	; 0x1a9c <LedControl::shutdown(int, bool)+0x22>
    1a8e:	20 e0       	ldi	r18, 0x00	; 0
    1a90:	41 11       	cpse	r20, r1
    1a92:	01 c0       	rjmp	.+2      	; 0x1a96 <LedControl::shutdown(int, bool)+0x1c>
    1a94:	21 e0       	ldi	r18, 0x01	; 1
    1a96:	4c e0       	ldi	r20, 0x0C	; 12
    1a98:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1a9c:	08 95       	ret

00001a9e <LedControl::setScanLimit(int, int)>:
_ZN10LedControl12setScanLimitEii():
    1a9e:	77 fd       	sbrc	r23, 7
    1aa0:	0f c0       	rjmp	.+30     	; 0x1ac0 <LedControl::setScanLimit(int, int)+0x22>
    1aa2:	fc 01       	movw	r30, r24
    1aa4:	ea 5a       	subi	r30, 0xAA	; 170
    1aa6:	ff 4f       	sbci	r31, 0xFF	; 255
    1aa8:	20 81       	ld	r18, Z
    1aaa:	31 81       	ldd	r19, Z+1	; 0x01
    1aac:	62 17       	cp	r22, r18
    1aae:	73 07       	cpc	r23, r19
    1ab0:	3c f4       	brge	.+14     	; 0x1ac0 <LedControl::setScanLimit(int, int)+0x22>
    1ab2:	48 30       	cpi	r20, 0x08	; 8
    1ab4:	51 05       	cpc	r21, r1
    1ab6:	20 f4       	brcc	.+8      	; 0x1ac0 <LedControl::setScanLimit(int, int)+0x22>
    1ab8:	24 2f       	mov	r18, r20
    1aba:	4b e0       	ldi	r20, 0x0B	; 11
    1abc:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1ac0:	08 95       	ret

00001ac2 <LedControl::setIntensity(int, int)>:
_ZN10LedControl12setIntensityEii():
    1ac2:	77 fd       	sbrc	r23, 7
    1ac4:	0f c0       	rjmp	.+30     	; 0x1ae4 <LedControl::setIntensity(int, int)+0x22>
    1ac6:	fc 01       	movw	r30, r24
    1ac8:	ea 5a       	subi	r30, 0xAA	; 170
    1aca:	ff 4f       	sbci	r31, 0xFF	; 255
    1acc:	20 81       	ld	r18, Z
    1ace:	31 81       	ldd	r19, Z+1	; 0x01
    1ad0:	62 17       	cp	r22, r18
    1ad2:	73 07       	cpc	r23, r19
    1ad4:	3c f4       	brge	.+14     	; 0x1ae4 <LedControl::setIntensity(int, int)+0x22>
    1ad6:	40 31       	cpi	r20, 0x10	; 16
    1ad8:	51 05       	cpc	r21, r1
    1ada:	20 f4       	brcc	.+8      	; 0x1ae4 <LedControl::setIntensity(int, int)+0x22>
    1adc:	24 2f       	mov	r18, r20
    1ade:	4a e0       	ldi	r20, 0x0A	; 10
    1ae0:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1ae4:	08 95       	ret

00001ae6 <LedControl::clearDisplay(int)>:
_ZN10LedControl12clearDisplayEi():
    1ae6:	df 92       	push	r13
    1ae8:	ef 92       	push	r14
    1aea:	ff 92       	push	r15
    1aec:	0f 93       	push	r16
    1aee:	1f 93       	push	r17
    1af0:	cf 93       	push	r28
    1af2:	df 93       	push	r29
    1af4:	77 fd       	sbrc	r23, 7
    1af6:	23 c0       	rjmp	.+70     	; 0x1b3e <LedControl::clearDisplay(int)+0x58>
    1af8:	fc 01       	movw	r30, r24
    1afa:	ea 5a       	subi	r30, 0xAA	; 170
    1afc:	ff 4f       	sbci	r31, 0xFF	; 255
    1afe:	20 81       	ld	r18, Z
    1b00:	31 81       	ldd	r19, Z+1	; 0x01
    1b02:	62 17       	cp	r22, r18
    1b04:	73 07       	cpc	r23, r19
    1b06:	dc f4       	brge	.+54     	; 0x1b3e <LedControl::clearDisplay(int)+0x58>
    1b08:	eb 01       	movw	r28, r22
    1b0a:	7c 01       	movw	r14, r24
    1b0c:	8b 01       	movw	r16, r22
    1b0e:	83 e0       	ldi	r24, 0x03	; 3
    1b10:	00 0f       	add	r16, r16
    1b12:	11 1f       	adc	r17, r17
    1b14:	8a 95       	dec	r24
    1b16:	e1 f7       	brne	.-8      	; 0x1b10 <LedControl::clearDisplay(int)+0x2a>
    1b18:	00 5f       	subi	r16, 0xF0	; 240
    1b1a:	1f 4f       	sbci	r17, 0xFF	; 255
    1b1c:	0e 0d       	add	r16, r14
    1b1e:	1f 1d       	adc	r17, r15
    1b20:	dd 24       	eor	r13, r13
    1b22:	d3 94       	inc	r13
    1b24:	f8 01       	movw	r30, r16
    1b26:	11 92       	st	Z+, r1
    1b28:	8f 01       	movw	r16, r30
    1b2a:	20 e0       	ldi	r18, 0x00	; 0
    1b2c:	4d 2d       	mov	r20, r13
    1b2e:	be 01       	movw	r22, r28
    1b30:	c7 01       	movw	r24, r14
    1b32:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1b36:	d3 94       	inc	r13
    1b38:	f9 e0       	ldi	r31, 0x09	; 9
    1b3a:	df 12       	cpse	r13, r31
    1b3c:	f3 cf       	rjmp	.-26     	; 0x1b24 <LedControl::clearDisplay(int)+0x3e>
    1b3e:	df 91       	pop	r29
    1b40:	cf 91       	pop	r28
    1b42:	1f 91       	pop	r17
    1b44:	0f 91       	pop	r16
    1b46:	ff 90       	pop	r15
    1b48:	ef 90       	pop	r14
    1b4a:	df 90       	pop	r13
    1b4c:	08 95       	ret

00001b4e <LedControl::LedControl(int, int, int, int)>:
_ZN10LedControlC2Eiiii():
    1b4e:	6f 92       	push	r6
    1b50:	7f 92       	push	r7
    1b52:	8f 92       	push	r8
    1b54:	9f 92       	push	r9
    1b56:	af 92       	push	r10
    1b58:	bf 92       	push	r11
    1b5a:	cf 92       	push	r12
    1b5c:	df 92       	push	r13
    1b5e:	ef 92       	push	r14
    1b60:	ff 92       	push	r15
    1b62:	0f 93       	push	r16
    1b64:	1f 93       	push	r17
    1b66:	cf 93       	push	r28
    1b68:	df 93       	push	r29
    1b6a:	ec 01       	movw	r28, r24
    1b6c:	d6 2e       	mov	r13, r22
    1b6e:	c7 2e       	mov	r12, r23
    1b70:	7c 01       	movw	r14, r24
    1b72:	80 e5       	ldi	r24, 0x50	; 80
    1b74:	e8 0e       	add	r14, r24
    1b76:	f1 1c       	adc	r15, r1
    1b78:	f7 01       	movw	r30, r14
    1b7a:	60 83       	st	Z, r22
    1b7c:	71 83       	std	Z+1, r23	; 0x01
    1b7e:	3e 01       	movw	r6, r28
    1b80:	f2 e5       	ldi	r31, 0x52	; 82
    1b82:	6f 0e       	add	r6, r31
    1b84:	71 1c       	adc	r7, r1
    1b86:	f3 01       	movw	r30, r6
    1b88:	51 83       	std	Z+1, r21	; 0x01
    1b8a:	40 83       	st	Z, r20
    1b8c:	4e 01       	movw	r8, r28
    1b8e:	f4 e5       	ldi	r31, 0x54	; 84
    1b90:	8f 0e       	add	r8, r31
    1b92:	91 1c       	adc	r9, r1
    1b94:	f4 01       	movw	r30, r8
    1b96:	31 83       	std	Z+1, r19	; 0x01
    1b98:	20 83       	st	Z, r18
    1b9a:	c8 01       	movw	r24, r16
    1b9c:	01 97       	sbiw	r24, 0x01	; 1
    1b9e:	08 97       	sbiw	r24, 0x08	; 8
    1ba0:	10 f0       	brcs	.+4      	; 0x1ba6 <LedControl::LedControl(int, int, int, int)+0x58>
    1ba2:	08 e0       	ldi	r16, 0x08	; 8
    1ba4:	10 e0       	ldi	r17, 0x00	; 0
    1ba6:	5e 01       	movw	r10, r28
    1ba8:	f6 e5       	ldi	r31, 0x56	; 86
    1baa:	af 0e       	add	r10, r31
    1bac:	b1 1c       	adc	r11, r1
    1bae:	f5 01       	movw	r30, r10
    1bb0:	11 83       	std	Z+1, r17	; 0x01
    1bb2:	00 83       	st	Z, r16
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	8d 2d       	mov	r24, r13
    1bb8:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
    1bbc:	61 e0       	ldi	r22, 0x01	; 1
    1bbe:	f3 01       	movw	r30, r6
    1bc0:	80 81       	ld	r24, Z
    1bc2:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
    1bc6:	61 e0       	ldi	r22, 0x01	; 1
    1bc8:	f4 01       	movw	r30, r8
    1bca:	80 81       	ld	r24, Z
    1bcc:	0e 94 a2 14 	call	0x2944	; 0x2944 <pinMode>
    1bd0:	61 e0       	ldi	r22, 0x01	; 1
    1bd2:	f4 01       	movw	r30, r8
    1bd4:	80 81       	ld	r24, Z
    1bd6:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    1bda:	f7 01       	movw	r30, r14
    1bdc:	d0 82       	st	Z, r13
    1bde:	c1 82       	std	Z+1, r12	; 0x01
    1be0:	fe 01       	movw	r30, r28
    1be2:	70 96       	adiw	r30, 0x10	; 16
    1be4:	11 92       	st	Z+, r1
    1be6:	ee 15       	cp	r30, r14
    1be8:	ff 05       	cpc	r31, r15
    1bea:	e1 f7       	brne	.-8      	; 0x1be4 <LedControl::LedControl(int, int, int, int)+0x96>
    1bec:	10 e0       	ldi	r17, 0x00	; 0
    1bee:	00 e0       	ldi	r16, 0x00	; 0
    1bf0:	f5 01       	movw	r30, r10
    1bf2:	80 81       	ld	r24, Z
    1bf4:	91 81       	ldd	r25, Z+1	; 0x01
    1bf6:	08 17       	cp	r16, r24
    1bf8:	19 07       	cpc	r17, r25
    1bfa:	f4 f4       	brge	.+60     	; 0x1c38 <LedControl::LedControl(int, int, int, int)+0xea>
    1bfc:	20 e0       	ldi	r18, 0x00	; 0
    1bfe:	4f e0       	ldi	r20, 0x0F	; 15
    1c00:	b8 01       	movw	r22, r16
    1c02:	ce 01       	movw	r24, r28
    1c04:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1c08:	47 e0       	ldi	r20, 0x07	; 7
    1c0a:	50 e0       	ldi	r21, 0x00	; 0
    1c0c:	b8 01       	movw	r22, r16
    1c0e:	ce 01       	movw	r24, r28
    1c10:	0e 94 4f 0d 	call	0x1a9e	; 0x1a9e <LedControl::setScanLimit(int, int)>
    1c14:	20 e0       	ldi	r18, 0x00	; 0
    1c16:	49 e0       	ldi	r20, 0x09	; 9
    1c18:	b8 01       	movw	r22, r16
    1c1a:	ce 01       	movw	r24, r28
    1c1c:	0e 94 dc 0c 	call	0x19b8	; 0x19b8 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1c20:	b8 01       	movw	r22, r16
    1c22:	ce 01       	movw	r24, r28
    1c24:	0e 94 73 0d 	call	0x1ae6	; 0x1ae6 <LedControl::clearDisplay(int)>
    1c28:	41 e0       	ldi	r20, 0x01	; 1
    1c2a:	b8 01       	movw	r22, r16
    1c2c:	ce 01       	movw	r24, r28
    1c2e:	0e 94 3d 0d 	call	0x1a7a	; 0x1a7a <LedControl::shutdown(int, bool)>
    1c32:	0f 5f       	subi	r16, 0xFF	; 255
    1c34:	1f 4f       	sbci	r17, 0xFF	; 255
    1c36:	dc cf       	rjmp	.-72     	; 0x1bf0 <LedControl::LedControl(int, int, int, int)+0xa2>
    1c38:	df 91       	pop	r29
    1c3a:	cf 91       	pop	r28
    1c3c:	1f 91       	pop	r17
    1c3e:	0f 91       	pop	r16
    1c40:	ff 90       	pop	r15
    1c42:	ef 90       	pop	r14
    1c44:	df 90       	pop	r13
    1c46:	cf 90       	pop	r12
    1c48:	bf 90       	pop	r11
    1c4a:	af 90       	pop	r10
    1c4c:	9f 90       	pop	r9
    1c4e:	8f 90       	pop	r8
    1c50:	7f 90       	pop	r7
    1c52:	6f 90       	pop	r6
    1c54:	08 95       	ret

00001c56 <LedControl::setRow(int, int, unsigned char)>:
_ZN10LedControl6setRowEiih():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:132
    spiTransfer(addr, row+1,status[offset+row]);
}

void LedControl::setRow(int addr, int row, byte value) {
    int offset;
    if(addr<0 || addr>=maxDevices)
    1c56:	77 fd       	sbrc	r23, 7
    1c58:	1a c0       	rjmp	.+52     	; 0x1c8e <LedControl::setRow(int, int, unsigned char)+0x38>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:132 (discriminator 1)
    1c5a:	fc 01       	movw	r30, r24
    1c5c:	ea 5a       	subi	r30, 0xAA	; 170
    1c5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c60:	01 90       	ld	r0, Z+
    1c62:	f0 81       	ld	r31, Z
    1c64:	e0 2d       	mov	r30, r0
    1c66:	6e 17       	cp	r22, r30
    1c68:	7f 07       	cpc	r23, r31
    1c6a:	8c f4       	brge	.+34     	; 0x1c8e <LedControl::setRow(int, int, unsigned char)+0x38>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:134
        return;
    if(row<0 || row>7)
    1c6c:	48 30       	cpi	r20, 0x08	; 8
    1c6e:	51 05       	cpc	r21, r1
    1c70:	70 f4       	brcc	.+28     	; 0x1c8e <LedControl::setRow(int, int, unsigned char)+0x38>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:137
        return;
    offset=addr*8;
    status[offset+row]=value;
    1c72:	fb 01       	movw	r30, r22
    1c74:	33 e0       	ldi	r19, 0x03	; 3
    1c76:	ee 0f       	add	r30, r30
    1c78:	ff 1f       	adc	r31, r31
    1c7a:	3a 95       	dec	r19
    1c7c:	e1 f7       	brne	.-8      	; 0x1c76 <LedControl::setRow(int, int, unsigned char)+0x20>
    1c7e:	e8 0f       	add	r30, r24
    1c80:	f9 1f       	adc	r31, r25
    1c82:	e4 0f       	add	r30, r20
    1c84:	f5 1f       	adc	r31, r21
    1c86:	20 8b       	std	Z+16, r18	; 0x10
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:138
    spiTransfer(addr, row+1,status[offset+row]);
    1c88:	4f 5f       	subi	r20, 0xFF	; 255
    1c8a:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:139
}
    1c8e:	08 95       	ret

00001c90 <LedControl::setDigit(int, int, unsigned char, bool)>:
_ZN10LedControl8setDigitEiihb():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:155
        val=val & 0x01;
        setLed(addr,row,col,val);
    }
}

void LedControl::setDigit(int addr, int digit, byte value, boolean dp) {
    1c90:	0f 93       	push	r16
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:159
    int offset;
    byte v;

    if(addr<0 || addr>=maxDevices)
    1c92:	77 fd       	sbrc	r23, 7
    1c94:	25 c0       	rjmp	.+74     	; 0x1ce0 <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:159 (discriminator 1)
    1c96:	fc 01       	movw	r30, r24
    1c98:	ea 5a       	subi	r30, 0xAA	; 170
    1c9a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c9c:	01 90       	ld	r0, Z+
    1c9e:	f0 81       	ld	r31, Z
    1ca0:	e0 2d       	mov	r30, r0
    1ca2:	6e 17       	cp	r22, r30
    1ca4:	7f 07       	cpc	r23, r31
    1ca6:	e4 f4       	brge	.+56     	; 0x1ce0 <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:161
        return;
    if(digit<0 || digit>7 || value>15)
    1ca8:	48 30       	cpi	r20, 0x08	; 8
    1caa:	51 05       	cpc	r21, r1
    1cac:	c8 f4       	brcc	.+50     	; 0x1ce0 <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:161 (discriminator 1)
    1cae:	20 31       	cpi	r18, 0x10	; 16
    1cb0:	b8 f4       	brcc	.+46     	; 0x1ce0 <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:163
        return;
    offset=addr*8;
    1cb2:	db 01       	movw	r26, r22
    1cb4:	33 e0       	ldi	r19, 0x03	; 3
    1cb6:	aa 0f       	add	r26, r26
    1cb8:	bb 1f       	adc	r27, r27
    1cba:	3a 95       	dec	r19
    1cbc:	e1 f7       	brne	.-8      	; 0x1cb6 <LedControl::setDigit(int, int, unsigned char, bool)+0x26>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:164
    v=pgm_read_byte_near(charTable + value); 
    1cbe:	e2 2f       	mov	r30, r18
    1cc0:	f0 e0       	ldi	r31, 0x00	; 0
    1cc2:	ee 56       	subi	r30, 0x6E	; 110
    1cc4:	ff 4f       	sbci	r31, 0xFF	; 255
    1cc6:	24 91       	lpm	r18, Z
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:165
    if(dp)
    1cc8:	01 11       	cpse	r16, r1
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:166
        v|=B10000000;
    1cca:	20 68       	ori	r18, 0x80	; 128
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:167
    status[offset+digit]=v;
    1ccc:	a8 0f       	add	r26, r24
    1cce:	b9 1f       	adc	r27, r25
    1cd0:	a4 0f       	add	r26, r20
    1cd2:	b5 1f       	adc	r27, r21
    1cd4:	50 96       	adiw	r26, 0x10	; 16
    1cd6:	2c 93       	st	X, r18
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:168
    spiTransfer(addr, digit+1,v);
    1cd8:	4f 5f       	subi	r20, 0xFF	; 255
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:169
}
    1cda:	0f 91       	pop	r16
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:168
    offset=addr*8;
    v=pgm_read_byte_near(charTable + value); 
    if(dp)
        v|=B10000000;
    status[offset+digit]=v;
    spiTransfer(addr, digit+1,v);
    1cdc:	0c 94 dc 0c 	jmp	0x19b8	; 0x19b8 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:169
}
    1ce0:	0f 91       	pop	r16
    1ce2:	08 95       	ret

00001ce4 <ADS1X15::isConnected()>:
_ZN7ADS1X1511isConnectedEv():
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:570
  _wire = wire;
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_1;
  _conversionDelay = ADS1115_CONVERSION_DELAY;
  _bitShift = 0;
  _maxPorts = 1;
}
    1ce4:	cf 93       	push	r28
    1ce6:	df 93       	push	r29
    1ce8:	ec 01       	movw	r28, r24
    1cea:	6a 81       	ldd	r22, Y+2	; 0x02
    1cec:	88 89       	ldd	r24, Y+16	; 0x10
    1cee:	99 89       	ldd	r25, Y+17	; 0x11
    1cf0:	0e 94 cb 10 	call	0x2196	; 0x2196 <TwoWire::beginTransmission(unsigned char)>
    1cf4:	88 89       	ldd	r24, Y+16	; 0x10
    1cf6:	99 89       	ldd	r25, Y+17	; 0x11
    1cf8:	0e 94 4e 11 	call	0x229c	; 0x229c <TwoWire::endTransmission()>
    1cfc:	91 e0       	ldi	r25, 0x01	; 1
    1cfe:	81 11       	cpse	r24, r1
    1d00:	90 e0       	ldi	r25, 0x00	; 0
    1d02:	89 2f       	mov	r24, r25
    1d04:	df 91       	pop	r29
    1d06:	cf 91       	pop	r28
    1d08:	08 95       	ret

00001d0a <ADS1X15::begin()>:
_ZN7ADS1X155beginEv():
    1d0a:	cf 93       	push	r28
    1d0c:	df 93       	push	r29
    1d0e:	ec 01       	movw	r28, r24
    1d10:	88 89       	ldd	r24, Y+16	; 0x10
    1d12:	99 89       	ldd	r25, Y+17	; 0x11
    1d14:	0e 94 b9 10 	call	0x2172	; 0x2172 <TwoWire::begin()>
    1d18:	8a 81       	ldd	r24, Y+2	; 0x02
    1d1a:	88 54       	subi	r24, 0x48	; 72
    1d1c:	84 30       	cpi	r24, 0x04	; 4
    1d1e:	28 f4       	brcc	.+10     	; 0x1d2a <ADS1X15::begin()+0x20>
    1d20:	ce 01       	movw	r24, r28
    1d22:	df 91       	pop	r29
    1d24:	cf 91       	pop	r28
    1d26:	0c 94 72 0e 	jmp	0x1ce4	; 0x1ce4 <ADS1X15::isConnected()>
    1d2a:	80 e0       	ldi	r24, 0x00	; 0
    1d2c:	df 91       	pop	r29
    1d2e:	cf 91       	pop	r28
    1d30:	08 95       	ret

00001d32 <ADS1X15::setGain(unsigned char)>:
_ZN7ADS1X157setGainEh():
    1d32:	fc 01       	movw	r30, r24
    1d34:	80 81       	ld	r24, Z
    1d36:	84 ff       	sbrs	r24, 4
    1d38:	09 c0       	rjmp	.+18     	; 0x1d4c <ADS1X15::setGain(unsigned char)+0x1a>
    1d3a:	64 30       	cpi	r22, 0x04	; 4
    1d3c:	b1 f0       	breq	.+44     	; 0x1d6a <ADS1X15::setGain(unsigned char)+0x38>
    1d3e:	48 f4       	brcc	.+18     	; 0x1d52 <ADS1X15::setGain(unsigned char)+0x20>
    1d40:	61 30       	cpi	r22, 0x01	; 1
    1d42:	81 f0       	breq	.+32     	; 0x1d64 <ADS1X15::setGain(unsigned char)+0x32>
    1d44:	80 e0       	ldi	r24, 0x00	; 0
    1d46:	94 e0       	ldi	r25, 0x04	; 4
    1d48:	62 30       	cpi	r22, 0x02	; 2
    1d4a:	49 f0       	breq	.+18     	; 0x1d5e <ADS1X15::setGain(unsigned char)+0x2c>
    1d4c:	16 82       	std	Z+6, r1	; 0x06
    1d4e:	15 82       	std	Z+5, r1	; 0x05
    1d50:	08 95       	ret
    1d52:	68 30       	cpi	r22, 0x08	; 8
    1d54:	69 f0       	breq	.+26     	; 0x1d70 <ADS1X15::setGain(unsigned char)+0x3e>
    1d56:	80 e0       	ldi	r24, 0x00	; 0
    1d58:	9a e0       	ldi	r25, 0x0A	; 10
    1d5a:	60 31       	cpi	r22, 0x10	; 16
    1d5c:	b9 f7       	brne	.-18     	; 0x1d4c <ADS1X15::setGain(unsigned char)+0x1a>
    1d5e:	96 83       	std	Z+6, r25	; 0x06
    1d60:	85 83       	std	Z+5, r24	; 0x05
    1d62:	08 95       	ret
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	92 e0       	ldi	r25, 0x02	; 2
    1d68:	fa cf       	rjmp	.-12     	; 0x1d5e <ADS1X15::setGain(unsigned char)+0x2c>
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	96 e0       	ldi	r25, 0x06	; 6
    1d6e:	f7 cf       	rjmp	.-18     	; 0x1d5e <ADS1X15::setGain(unsigned char)+0x2c>
    1d70:	80 e0       	ldi	r24, 0x00	; 0
    1d72:	98 e0       	ldi	r25, 0x08	; 8
    1d74:	f4 cf       	rjmp	.-24     	; 0x1d5e <ADS1X15::setGain(unsigned char)+0x2c>

00001d76 <ADS1X15::reset()>:
_ZN7ADS1X155resetEv():
    1d76:	cf 93       	push	r28
    1d78:	df 93       	push	r29
    1d7a:	ec 01       	movw	r28, r24
    1d7c:	60 e0       	ldi	r22, 0x00	; 0
    1d7e:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <ADS1X15::setGain(unsigned char)>
_ZN7ADS1X157setModeEh():
    1d82:	80 e0       	ldi	r24, 0x00	; 0
    1d84:	91 e0       	ldi	r25, 0x01	; 1
    1d86:	98 87       	std	Y+8, r25	; 0x08
    1d88:	8f 83       	std	Y+7, r24	; 0x07
_ZN7ADS1X1511setDataRateEh():
    1d8a:	80 e8       	ldi	r24, 0x80	; 128
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	9a 87       	std	Y+10, r25	; 0x0a
    1d90:	89 87       	std	Y+9, r24	; 0x09
_ZN7ADS1X155resetEv():
    1d92:	1b 86       	std	Y+11, r1	; 0x0b
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	8c 87       	std	Y+12, r24	; 0x0c
    1d98:	1d 86       	std	Y+13, r1	; 0x0d
    1d9a:	83 e0       	ldi	r24, 0x03	; 3
    1d9c:	8e 87       	std	Y+14, r24	; 0x0e
    1d9e:	df 91       	pop	r29
    1da0:	cf 91       	pop	r28
    1da2:	08 95       	ret

00001da4 <ADS1X15::ADS1X15()>:
_ZN7ADS1X15C2Ev():
    1da4:	fc 01       	movw	r30, r24
    1da6:	17 86       	std	Z+15, r1	; 0x0f
    1da8:	12 8a       	std	Z+18, r1	; 0x12
    1daa:	13 8a       	std	Z+19, r1	; 0x13
    1dac:	14 8a       	std	Z+20, r1	; 0x14
    1dae:	15 8a       	std	Z+21, r1	; 0x15
    1db0:	0c 94 bb 0e 	jmp	0x1d76	; 0x1d76 <ADS1X15::reset()>

00001db4 <ADS1X15::setMode(unsigned char)>:
_ZN7ADS1X157setModeEh():
    1db4:	61 11       	cpse	r22, r1
    1db6:	04 c0       	rjmp	.+8      	; 0x1dc0 <ADS1X15::setMode(unsigned char)+0xc>
    1db8:	fc 01       	movw	r30, r24
    1dba:	10 86       	std	Z+8, r1	; 0x08
    1dbc:	17 82       	std	Z+7, r1	; 0x07
    1dbe:	08 95       	ret
    1dc0:	20 e0       	ldi	r18, 0x00	; 0
    1dc2:	31 e0       	ldi	r19, 0x01	; 1
    1dc4:	fc 01       	movw	r30, r24
    1dc6:	30 87       	std	Z+8, r19	; 0x08
    1dc8:	27 83       	std	Z+7, r18	; 0x07
    1dca:	08 95       	ret

00001dcc <ADS1X15::setDataRate(unsigned char)>:
_ZN7ADS1X1511setDataRateEh():
    1dcc:	fc 01       	movw	r30, r24
    1dce:	70 e0       	ldi	r23, 0x00	; 0
    1dd0:	68 30       	cpi	r22, 0x08	; 8
    1dd2:	71 05       	cpc	r23, r1
    1dd4:	60 f4       	brcc	.+24     	; 0x1dee <ADS1X15::setDataRate(unsigned char)+0x22>
    1dd6:	72 87       	std	Z+10, r23	; 0x0a
    1dd8:	61 87       	std	Z+9, r22	; 0x09
    1dda:	81 85       	ldd	r24, Z+9	; 0x09
    1ddc:	92 85       	ldd	r25, Z+10	; 0x0a
    1dde:	25 e0       	ldi	r18, 0x05	; 5
    1de0:	88 0f       	add	r24, r24
    1de2:	99 1f       	adc	r25, r25
    1de4:	2a 95       	dec	r18
    1de6:	e1 f7       	brne	.-8      	; 0x1de0 <ADS1X15::setDataRate(unsigned char)+0x14>
    1de8:	92 87       	std	Z+10, r25	; 0x0a
    1dea:	81 87       	std	Z+9, r24	; 0x09
    1dec:	08 95       	ret
    1dee:	84 e0       	ldi	r24, 0x04	; 4
    1df0:	90 e0       	ldi	r25, 0x00	; 0
    1df2:	92 87       	std	Z+10, r25	; 0x0a
    1df4:	81 87       	std	Z+9, r24	; 0x09
    1df6:	f1 cf       	rjmp	.-30     	; 0x1dda <ADS1X15::setDataRate(unsigned char)+0xe>

00001df8 <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>:
_ZN7ADS1X1514_writeRegisterEhhj():
    1df8:	ff 92       	push	r15
    1dfa:	0f 93       	push	r16
    1dfc:	1f 93       	push	r17
    1dfe:	cf 93       	push	r28
    1e00:	df 93       	push	r29
    1e02:	ec 01       	movw	r28, r24
    1e04:	f4 2e       	mov	r15, r20
    1e06:	12 2f       	mov	r17, r18
    1e08:	03 2f       	mov	r16, r19
    1e0a:	88 89       	ldd	r24, Y+16	; 0x10
    1e0c:	99 89       	ldd	r25, Y+17	; 0x11
    1e0e:	0e 94 cb 10 	call	0x2196	; 0x2196 <TwoWire::beginTransmission(unsigned char)>
    1e12:	88 89       	ldd	r24, Y+16	; 0x10
    1e14:	99 89       	ldd	r25, Y+17	; 0x11
    1e16:	dc 01       	movw	r26, r24
    1e18:	ed 91       	ld	r30, X+
    1e1a:	fc 91       	ld	r31, X
    1e1c:	01 90       	ld	r0, Z+
    1e1e:	f0 81       	ld	r31, Z
    1e20:	e0 2d       	mov	r30, r0
    1e22:	6f 2d       	mov	r22, r15
    1e24:	09 95       	icall
    1e26:	88 89       	ldd	r24, Y+16	; 0x10
    1e28:	99 89       	ldd	r25, Y+17	; 0x11
    1e2a:	dc 01       	movw	r26, r24
    1e2c:	ed 91       	ld	r30, X+
    1e2e:	fc 91       	ld	r31, X
    1e30:	01 90       	ld	r0, Z+
    1e32:	f0 81       	ld	r31, Z
    1e34:	e0 2d       	mov	r30, r0
    1e36:	60 2f       	mov	r22, r16
    1e38:	09 95       	icall
    1e3a:	88 89       	ldd	r24, Y+16	; 0x10
    1e3c:	99 89       	ldd	r25, Y+17	; 0x11
    1e3e:	dc 01       	movw	r26, r24
    1e40:	ed 91       	ld	r30, X+
    1e42:	fc 91       	ld	r31, X
    1e44:	01 90       	ld	r0, Z+
    1e46:	f0 81       	ld	r31, Z
    1e48:	e0 2d       	mov	r30, r0
    1e4a:	61 2f       	mov	r22, r17
    1e4c:	09 95       	icall
    1e4e:	88 89       	ldd	r24, Y+16	; 0x10
    1e50:	99 89       	ldd	r25, Y+17	; 0x11
    1e52:	0e 94 4e 11 	call	0x229c	; 0x229c <TwoWire::endTransmission()>
    1e56:	91 e0       	ldi	r25, 0x01	; 1
    1e58:	81 11       	cpse	r24, r1
    1e5a:	90 e0       	ldi	r25, 0x00	; 0
    1e5c:	89 2f       	mov	r24, r25
    1e5e:	df 91       	pop	r29
    1e60:	cf 91       	pop	r28
    1e62:	1f 91       	pop	r17
    1e64:	0f 91       	pop	r16
    1e66:	ff 90       	pop	r15
    1e68:	08 95       	ret

00001e6a <ADS1X15::_requestADC(unsigned int)>:
_ZN7ADS1X1511_requestADCEj():
    1e6a:	fc 01       	movw	r30, r24
    1e6c:	25 81       	ldd	r18, Z+5	; 0x05
    1e6e:	36 81       	ldd	r19, Z+6	; 0x06
    1e70:	87 81       	ldd	r24, Z+7	; 0x07
    1e72:	90 85       	ldd	r25, Z+8	; 0x08
    1e74:	28 2b       	or	r18, r24
    1e76:	39 2b       	or	r19, r25
    1e78:	30 68       	ori	r19, 0x80	; 128
    1e7a:	81 85       	ldd	r24, Z+9	; 0x09
    1e7c:	92 85       	ldd	r25, Z+10	; 0x0a
    1e7e:	28 2b       	or	r18, r24
    1e80:	39 2b       	or	r19, r25
    1e82:	26 2b       	or	r18, r22
    1e84:	37 2b       	or	r19, r23
    1e86:	83 85       	ldd	r24, Z+11	; 0x0b
    1e88:	81 11       	cpse	r24, r1
    1e8a:	20 61       	ori	r18, 0x10	; 16
    1e8c:	84 85       	ldd	r24, Z+12	; 0x0c
    1e8e:	81 11       	cpse	r24, r1
    1e90:	28 60       	ori	r18, 0x08	; 8
    1e92:	85 85       	ldd	r24, Z+13	; 0x0d
    1e94:	81 11       	cpse	r24, r1
    1e96:	24 60       	ori	r18, 0x04	; 4
    1e98:	86 85       	ldd	r24, Z+14	; 0x0e
    1e9a:	28 2b       	or	r18, r24
    1e9c:	41 e0       	ldi	r20, 0x01	; 1
    1e9e:	62 81       	ldd	r22, Z+2	; 0x02
    1ea0:	cf 01       	movw	r24, r30
    1ea2:	0c 94 fc 0e 	jmp	0x1df8	; 0x1df8 <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>

00001ea6 <ADS1X15::_readRegister(unsigned char, unsigned char)>:
_ZN7ADS1X1513_readRegisterEhh():
    1ea6:	0f 93       	push	r16
    1ea8:	1f 93       	push	r17
    1eaa:	cf 93       	push	r28
    1eac:	df 93       	push	r29
    1eae:	8c 01       	movw	r16, r24
    1eb0:	c6 2f       	mov	r28, r22
    1eb2:	d4 2f       	mov	r29, r20
    1eb4:	dc 01       	movw	r26, r24
    1eb6:	50 96       	adiw	r26, 0x10	; 16
    1eb8:	8d 91       	ld	r24, X+
    1eba:	9c 91       	ld	r25, X
    1ebc:	0e 94 cb 10 	call	0x2196	; 0x2196 <TwoWire::beginTransmission(unsigned char)>
    1ec0:	f8 01       	movw	r30, r16
    1ec2:	80 89       	ldd	r24, Z+16	; 0x10
    1ec4:	91 89       	ldd	r25, Z+17	; 0x11
    1ec6:	dc 01       	movw	r26, r24
    1ec8:	ed 91       	ld	r30, X+
    1eca:	fc 91       	ld	r31, X
    1ecc:	01 90       	ld	r0, Z+
    1ece:	f0 81       	ld	r31, Z
    1ed0:	e0 2d       	mov	r30, r0
    1ed2:	6d 2f       	mov	r22, r29
    1ed4:	09 95       	icall
    1ed6:	f8 01       	movw	r30, r16
    1ed8:	80 89       	ldd	r24, Z+16	; 0x10
    1eda:	91 89       	ldd	r25, Z+17	; 0x11
    1edc:	0e 94 4e 11 	call	0x229c	; 0x229c <TwoWire::endTransmission()>
    1ee0:	42 e0       	ldi	r20, 0x02	; 2
    1ee2:	6c 2f       	mov	r22, r28
    1ee4:	d8 01       	movw	r26, r16
    1ee6:	50 96       	adiw	r26, 0x10	; 16
    1ee8:	8d 91       	ld	r24, X+
    1eea:	9c 91       	ld	r25, X
    1eec:	0e 94 4b 11 	call	0x2296	; 0x2296 <TwoWire::requestFrom(unsigned char, unsigned char)>
    1ef0:	82 30       	cpi	r24, 0x02	; 2
    1ef2:	f1 f4       	brne	.+60     	; 0x1f30 <ADS1X15::_readRegister(unsigned char, unsigned char)+0x8a>
    1ef4:	f8 01       	movw	r30, r16
    1ef6:	80 89       	ldd	r24, Z+16	; 0x10
    1ef8:	91 89       	ldd	r25, Z+17	; 0x11
    1efa:	dc 01       	movw	r26, r24
    1efc:	ed 91       	ld	r30, X+
    1efe:	fc 91       	ld	r31, X
    1f00:	02 84       	ldd	r0, Z+10	; 0x0a
    1f02:	f3 85       	ldd	r31, Z+11	; 0x0b
    1f04:	e0 2d       	mov	r30, r0
    1f06:	09 95       	icall
    1f08:	d8 2f       	mov	r29, r24
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	cb 2f       	mov	r28, r27
    1f0e:	f8 01       	movw	r30, r16
    1f10:	80 89       	ldd	r24, Z+16	; 0x10
    1f12:	91 89       	ldd	r25, Z+17	; 0x11
    1f14:	dc 01       	movw	r26, r24
    1f16:	ed 91       	ld	r30, X+
    1f18:	fc 91       	ld	r31, X
    1f1a:	02 84       	ldd	r0, Z+10	; 0x0a
    1f1c:	f3 85       	ldd	r31, Z+11	; 0x0b
    1f1e:	e0 2d       	mov	r30, r0
    1f20:	09 95       	icall
    1f22:	8c 0f       	add	r24, r28
    1f24:	9d 1f       	adc	r25, r29
    1f26:	df 91       	pop	r29
    1f28:	cf 91       	pop	r28
    1f2a:	1f 91       	pop	r17
    1f2c:	0f 91       	pop	r16
    1f2e:	08 95       	ret
    1f30:	90 e0       	ldi	r25, 0x00	; 0
    1f32:	80 e0       	ldi	r24, 0x00	; 0
    1f34:	f8 cf       	rjmp	.-16     	; 0x1f26 <ADS1X15::_readRegister(unsigned char, unsigned char)+0x80>

00001f36 <ADS1X15::isBusy()>:
_ZN7ADS1X156isBusyEv():
    1f36:	41 e0       	ldi	r20, 0x01	; 1
    1f38:	fc 01       	movw	r30, r24
    1f3a:	62 81       	ldd	r22, Z+2	; 0x02
    1f3c:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <ADS1X15::_readRegister(unsigned char, unsigned char)>
    1f40:	89 2f       	mov	r24, r25
    1f42:	80 95       	com	r24
    1f44:	88 1f       	adc	r24, r24
    1f46:	88 27       	eor	r24, r24
    1f48:	88 1f       	adc	r24, r24
    1f4a:	08 95       	ret

00001f4c <ADS1X15::getValue()>:
_ZN7ADS1X158getValueEv():
    1f4c:	cf 93       	push	r28
    1f4e:	df 93       	push	r29
    1f50:	ec 01       	movw	r28, r24
    1f52:	40 e0       	ldi	r20, 0x00	; 0
    1f54:	6a 81       	ldd	r22, Y+2	; 0x02
    1f56:	0e 94 53 0f 	call	0x1ea6	; 0x1ea6 <ADS1X15::_readRegister(unsigned char, unsigned char)>
    1f5a:	2c 81       	ldd	r18, Y+4	; 0x04
    1f5c:	22 23       	and	r18, r18
    1f5e:	29 f0       	breq	.+10     	; 0x1f6a <ADS1X15::getValue()+0x1e>
    1f60:	02 c0       	rjmp	.+4      	; 0x1f66 <ADS1X15::getValue()+0x1a>
    1f62:	95 95       	asr	r25
    1f64:	87 95       	ror	r24
    1f66:	2a 95       	dec	r18
    1f68:	e2 f7       	brpl	.-8      	; 0x1f62 <ADS1X15::getValue()+0x16>
    1f6a:	df 91       	pop	r29
    1f6c:	cf 91       	pop	r28
    1f6e:	08 95       	ret

00001f70 <ADS1X15::_readADC(unsigned int)>:
_ZN7ADS1X158_readADCEj():
    1f70:	cf 93       	push	r28
    1f72:	df 93       	push	r29
    1f74:	ec 01       	movw	r28, r24
    1f76:	0e 94 35 0f 	call	0x1e6a	; 0x1e6a <ADS1X15::_requestADC(unsigned int)>
    1f7a:	8f 81       	ldd	r24, Y+7	; 0x07
    1f7c:	98 85       	ldd	r25, Y+8	; 0x08
    1f7e:	81 15       	cp	r24, r1
    1f80:	91 40       	sbci	r25, 0x01	; 1
    1f82:	41 f4       	brne	.+16     	; 0x1f94 <ADS1X15::_readADC(unsigned int)+0x24>
    1f84:	ce 01       	movw	r24, r28
    1f86:	0e 94 9b 0f 	call	0x1f36	; 0x1f36 <ADS1X15::isBusy()>
    1f8a:	88 23       	and	r24, r24
    1f8c:	49 f0       	breq	.+18     	; 0x1fa0 <ADS1X15::_readADC(unsigned int)+0x30>
    1f8e:	0e 94 84 13 	call	0x2708	; 0x2708 <yield>
    1f92:	f8 cf       	rjmp	.-16     	; 0x1f84 <ADS1X15::_readADC(unsigned int)+0x14>
    1f94:	6b 81       	ldd	r22, Y+3	; 0x03
    1f96:	70 e0       	ldi	r23, 0x00	; 0
    1f98:	90 e0       	ldi	r25, 0x00	; 0
    1f9a:	80 e0       	ldi	r24, 0x00	; 0
    1f9c:	0e 94 f4 13 	call	0x27e8	; 0x27e8 <delay>
    1fa0:	ce 01       	movw	r24, r28
    1fa2:	df 91       	pop	r29
    1fa4:	cf 91       	pop	r28
    1fa6:	0c 94 a6 0f 	jmp	0x1f4c	; 0x1f4c <ADS1X15::getValue()>

00001faa <ADS1X15::readADC(unsigned char)>:
_ZN7ADS1X157readADCEh():
    1faa:	fc 01       	movw	r30, r24
    1fac:	21 81       	ldd	r18, Z+1	; 0x01
    1fae:	62 17       	cp	r22, r18
    1fb0:	38 f4       	brcc	.+14     	; 0x1fc0 <ADS1X15::readADC(unsigned char)+0x16>
    1fb2:	62 95       	swap	r22
    1fb4:	60 7f       	andi	r22, 0xF0	; 240
    1fb6:	70 e4       	ldi	r23, 0x40	; 64
    1fb8:	76 0f       	add	r23, r22
    1fba:	60 e0       	ldi	r22, 0x00	; 0
    1fbc:	0c 94 b8 0f 	jmp	0x1f70	; 0x1f70 <ADS1X15::_readADC(unsigned int)>
    1fc0:	90 e0       	ldi	r25, 0x00	; 0
    1fc2:	80 e0       	ldi	r24, 0x00	; 0
    1fc4:	08 95       	ret

00001fc6 <ADS1115::ADS1115(unsigned char, TwoWire*)>:
_ZN7ADS1115C2EhP7TwoWire():
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:577

///////////////////////////////////////////////////////////////////////////
//
// ADS1115
//
ADS1115::ADS1115(uint8_t address, TwoWire *wire)
    1fc6:	ff 92       	push	r15
    1fc8:	0f 93       	push	r16
    1fca:	1f 93       	push	r17
    1fcc:	cf 93       	push	r28
    1fce:	df 93       	push	r29
    1fd0:	ec 01       	movw	r28, r24
    1fd2:	f6 2e       	mov	r15, r22
    1fd4:	8a 01       	movw	r16, r20
    1fd6:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <ADS1X15::ADS1X15()>
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:579
{
  _address = address;
    1fda:	fa 82       	std	Y+2, r15	; 0x02
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:580
  _wire = wire;
    1fdc:	19 8b       	std	Y+17, r17	; 0x11
    1fde:	08 8b       	std	Y+16, r16	; 0x10
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:581
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_4;
    1fe0:	85 e3       	ldi	r24, 0x35	; 53
    1fe2:	88 83       	st	Y, r24
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:582
  _conversionDelay = ADS1115_CONVERSION_DELAY;
    1fe4:	88 e0       	ldi	r24, 0x08	; 8
    1fe6:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:583
  _bitShift = 0;
    1fe8:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:584
  _maxPorts = 4;
    1fea:	84 e0       	ldi	r24, 0x04	; 4
    1fec:	89 83       	std	Y+1, r24	; 0x01
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:585
}
    1fee:	df 91       	pop	r29
    1ff0:	cf 91       	pop	r28
    1ff2:	1f 91       	pop	r17
    1ff4:	0f 91       	pop	r16
    1ff6:	ff 90       	pop	r15
    1ff8:	08 95       	ret

00001ffa <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:329

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    1ffa:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <TwoWire::rxBufferLength>
    1ffe:	90 91 0e 05 	lds	r25, 0x050E	; 0x80050e <TwoWire::rxBufferIndex>
    2002:	89 1b       	sub	r24, r25
    2004:	99 0b       	sbc	r25, r25
    2006:	08 95       	ret

00002008 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    2008:	90 91 0e 05 	lds	r25, 0x050E	; 0x80050e <TwoWire::rxBufferIndex>
    200c:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <TwoWire::rxBufferLength>
    2010:	2f ef       	ldi	r18, 0xFF	; 255
    2012:	3f ef       	ldi	r19, 0xFF	; 255
    2014:	98 17       	cp	r25, r24
    2016:	48 f4       	brcc	.+18     	; 0x202a <TwoWire::read()+0x22>
    2018:	e9 2f       	mov	r30, r25
    201a:	f0 e0       	ldi	r31, 0x00	; 0
    201c:	e1 5f       	subi	r30, 0xF1	; 241
    201e:	fa 4f       	sbci	r31, 0xFA	; 250
    2020:	20 81       	ld	r18, Z
    2022:	30 e0       	ldi	r19, 0x00	; 0
    2024:	9f 5f       	subi	r25, 0xFF	; 255
    2026:	90 93 0e 05 	sts	0x050E, r25	; 0x80050e <TwoWire::rxBufferIndex>
    202a:	c9 01       	movw	r24, r18
    202c:	08 95       	ret

0000202e <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    202e:	e0 91 0e 05 	lds	r30, 0x050E	; 0x80050e <TwoWire::rxBufferIndex>
    2032:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <TwoWire::rxBufferLength>
    2036:	e8 17       	cp	r30, r24
    2038:	30 f4       	brcc	.+12     	; 0x2046 <TwoWire::peek()+0x18>
    203a:	f0 e0       	ldi	r31, 0x00	; 0
    203c:	e1 5f       	subi	r30, 0xF1	; 241
    203e:	fa 4f       	sbci	r31, 0xFA	; 250
    2040:	80 81       	ld	r24, Z
    2042:	90 e0       	ldi	r25, 0x00	; 0
    2044:	08 95       	ret
    2046:	8f ef       	ldi	r24, 0xFF	; 255
    2048:	9f ef       	ldi	r25, 0xFF	; 255
    204a:	08 95       	ret

0000204c <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    204c:	08 95       	ret

0000204e <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    204e:	cf 93       	push	r28
    2050:	df 93       	push	r29
    2052:	ec 01       	movw	r28, r24
    2054:	e0 91 e5 04 	lds	r30, 0x04E5	; 0x8004e5 <TwoWire::user_onReceive>
    2058:	f0 91 e6 04 	lds	r31, 0x04E6	; 0x8004e6 <TwoWire::user_onReceive+0x1>
    205c:	30 97       	sbiw	r30, 0x00	; 0
    205e:	f1 f0       	breq	.+60     	; 0x209c <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    2060:	90 91 0e 05 	lds	r25, 0x050E	; 0x80050e <TwoWire::rxBufferIndex>
    2064:	80 91 0d 05 	lds	r24, 0x050D	; 0x80050d <TwoWire::rxBufferLength>
    2068:	98 17       	cp	r25, r24
    206a:	c0 f0       	brcs	.+48     	; 0x209c <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    206c:	90 e0       	ldi	r25, 0x00	; 0
    206e:	29 2f       	mov	r18, r25
    2070:	30 e0       	ldi	r19, 0x00	; 0
    2072:	26 17       	cp	r18, r22
    2074:	37 07       	cpc	r19, r23
    2076:	54 f4       	brge	.+20     	; 0x208c <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
    2078:	de 01       	movw	r26, r28
    207a:	a2 0f       	add	r26, r18
    207c:	b3 1f       	adc	r27, r19
    207e:	4c 91       	ld	r20, X
    2080:	21 5f       	subi	r18, 0xF1	; 241
    2082:	3a 4f       	sbci	r19, 0xFA	; 250
    2084:	d9 01       	movw	r26, r18
    2086:	4c 93       	st	X, r20
    2088:	9f 5f       	subi	r25, 0xFF	; 255
    208a:	f1 cf       	rjmp	.-30     	; 0x206e <TwoWire::onReceiveService(unsigned char*, int)+0x20>
    208c:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <TwoWire::rxBufferIndex>
    2090:	60 93 0d 05 	sts	0x050D, r22	; 0x80050d <TwoWire::rxBufferLength>
    2094:	cb 01       	movw	r24, r22
    2096:	df 91       	pop	r29
    2098:	cf 91       	pop	r28
    209a:	09 94       	ijmp
    209c:	df 91       	pop	r29
    209e:	cf 91       	pop	r28
    20a0:	08 95       	ret

000020a2 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    20a2:	e0 91 e7 04 	lds	r30, 0x04E7	; 0x8004e7 <TwoWire::user_onRequest>
    20a6:	f0 91 e8 04 	lds	r31, 0x04E8	; 0x8004e8 <TwoWire::user_onRequest+0x1>
    20aa:	30 97       	sbiw	r30, 0x00	; 0
    20ac:	29 f0       	breq	.+10     	; 0x20b8 <TwoWire::onRequestService()+0x16>
    20ae:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <TwoWire::txBufferIndex>
    20b2:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <TwoWire::txBufferLength>
    20b6:	09 94       	ijmp
    20b8:	08 95       	ret

000020ba <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    20ba:	cf 93       	push	r28
    20bc:	df 93       	push	r29
    20be:	1f 92       	push	r1
    20c0:	cd b7       	in	r28, 0x3d	; 61
    20c2:	de b7       	in	r29, 0x3e	; 62
    20c4:	69 83       	std	Y+1, r22	; 0x01
    20c6:	20 91 e9 04 	lds	r18, 0x04E9	; 0x8004e9 <TwoWire::transmitting>
    20ca:	22 23       	and	r18, r18
    20cc:	f9 f0       	breq	.+62     	; 0x210c <TwoWire::write(unsigned char)+0x52>
    20ce:	20 91 ea 04 	lds	r18, 0x04EA	; 0x8004ea <TwoWire::txBufferLength>
    20d2:	20 32       	cpi	r18, 0x20	; 32
    20d4:	58 f0       	brcs	.+22     	; 0x20ec <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    20d6:	21 e0       	ldi	r18, 0x01	; 1
    20d8:	30 e0       	ldi	r19, 0x00	; 0
    20da:	fc 01       	movw	r30, r24
    20dc:	33 83       	std	Z+3, r19	; 0x03
    20de:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	80 e0       	ldi	r24, 0x00	; 0
    20e4:	0f 90       	pop	r0
    20e6:	df 91       	pop	r29
    20e8:	cf 91       	pop	r28
    20ea:	08 95       	ret
    20ec:	80 91 eb 04 	lds	r24, 0x04EB	; 0x8004eb <TwoWire::txBufferIndex>
    20f0:	e8 2f       	mov	r30, r24
    20f2:	f0 e0       	ldi	r31, 0x00	; 0
    20f4:	e4 51       	subi	r30, 0x14	; 20
    20f6:	fb 4f       	sbci	r31, 0xFB	; 251
    20f8:	99 81       	ldd	r25, Y+1	; 0x01
    20fa:	90 83       	st	Z, r25
    20fc:	8f 5f       	subi	r24, 0xFF	; 255
    20fe:	80 93 eb 04 	sts	0x04EB, r24	; 0x8004eb <TwoWire::txBufferIndex>
    2102:	80 93 ea 04 	sts	0x04EA, r24	; 0x8004ea <TwoWire::txBufferLength>
    2106:	81 e0       	ldi	r24, 0x01	; 1
    2108:	90 e0       	ldi	r25, 0x00	; 0
    210a:	ec cf       	rjmp	.-40     	; 0x20e4 <TwoWire::write(unsigned char)+0x2a>
    210c:	61 e0       	ldi	r22, 0x01	; 1
    210e:	ce 01       	movw	r24, r28
    2110:	01 96       	adiw	r24, 0x01	; 1
    2112:	0e 94 1f 12 	call	0x243e	; 0x243e <twi_transmit>
    2116:	f7 cf       	rjmp	.-18     	; 0x2106 <TwoWire::write(unsigned char)+0x4c>

00002118 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    2118:	cf 92       	push	r12
    211a:	df 92       	push	r13
    211c:	ef 92       	push	r14
    211e:	ff 92       	push	r15
    2120:	0f 93       	push	r16
    2122:	1f 93       	push	r17
    2124:	cf 93       	push	r28
    2126:	df 93       	push	r29
    2128:	7c 01       	movw	r14, r24
    212a:	cb 01       	movw	r24, r22
    212c:	8a 01       	movw	r16, r20
    212e:	20 91 e9 04 	lds	r18, 0x04E9	; 0x8004e9 <TwoWire::transmitting>
    2132:	22 23       	and	r18, r18
    2134:	89 f0       	breq	.+34     	; 0x2158 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    2136:	eb 01       	movw	r28, r22
    2138:	6b 01       	movw	r12, r22
    213a:	c4 0e       	add	r12, r20
    213c:	d5 1e       	adc	r13, r21
    213e:	cc 15       	cp	r28, r12
    2140:	dd 05       	cpc	r29, r13
    2142:	69 f0       	breq	.+26     	; 0x215e <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    2144:	69 91       	ld	r22, Y+
    2146:	d7 01       	movw	r26, r14
    2148:	ed 91       	ld	r30, X+
    214a:	fc 91       	ld	r31, X
    214c:	01 90       	ld	r0, Z+
    214e:	f0 81       	ld	r31, Z
    2150:	e0 2d       	mov	r30, r0
    2152:	c7 01       	movw	r24, r14
    2154:	09 95       	icall
    2156:	f3 cf       	rjmp	.-26     	; 0x213e <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    2158:	64 2f       	mov	r22, r20
    215a:	0e 94 1f 12 	call	0x243e	; 0x243e <twi_transmit>
    215e:	c8 01       	movw	r24, r16
    2160:	df 91       	pop	r29
    2162:	cf 91       	pop	r28
    2164:	1f 91       	pop	r17
    2166:	0f 91       	pop	r16
    2168:	ff 90       	pop	r15
    216a:	ef 90       	pop	r14
    216c:	df 90       	pop	r13
    216e:	cf 90       	pop	r12
    2170:	08 95       	ret

00002172 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    2172:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <TwoWire::rxBufferIndex>
    2176:	10 92 0d 05 	sts	0x050D, r1	; 0x80050d <TwoWire::rxBufferLength>
    217a:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <TwoWire::txBufferIndex>
    217e:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <TwoWire::txBufferLength>
    2182:	0e 94 62 11 	call	0x22c4	; 0x22c4 <twi_init>
    2186:	81 e5       	ldi	r24, 0x51	; 81
    2188:	90 e1       	ldi	r25, 0x10	; 16
    218a:	0e 94 4b 12 	call	0x2496	; 0x2496 <twi_attachSlaveTxEvent>
    218e:	87 e2       	ldi	r24, 0x27	; 39
    2190:	90 e1       	ldi	r25, 0x10	; 16
    2192:	0c 94 46 12 	jmp	0x248c	; 0x248c <twi_attachSlaveRxEvent>

00002196 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    2196:	81 e0       	ldi	r24, 0x01	; 1
    2198:	80 93 e9 04 	sts	0x04E9, r24	; 0x8004e9 <TwoWire::transmitting>
    219c:	60 93 0c 05 	sts	0x050C, r22	; 0x80050c <TwoWire::txAddress>
    21a0:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <TwoWire::txBufferIndex>
    21a4:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <TwoWire::txBufferLength>
    21a8:	08 95       	ret

000021aa <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    21aa:	0f 93       	push	r16
    21ac:	06 2f       	mov	r16, r22
    21ae:	21 e0       	ldi	r18, 0x01	; 1
    21b0:	40 91 ea 04 	lds	r20, 0x04EA	; 0x8004ea <TwoWire::txBufferLength>
    21b4:	6c ee       	ldi	r22, 0xEC	; 236
    21b6:	74 e0       	ldi	r23, 0x04	; 4
    21b8:	80 91 0c 05 	lds	r24, 0x050C	; 0x80050c <TwoWire::txAddress>
    21bc:	0e 94 c8 11 	call	0x2390	; 0x2390 <twi_writeTo>
    21c0:	10 92 eb 04 	sts	0x04EB, r1	; 0x8004eb <TwoWire::txBufferIndex>
    21c4:	10 92 ea 04 	sts	0x04EA, r1	; 0x8004ea <TwoWire::txBufferLength>
    21c8:	10 92 e9 04 	sts	0x04E9, r1	; 0x8004e9 <TwoWire::transmitting>
    21cc:	0f 91       	pop	r16
    21ce:	08 95       	ret

000021d0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    21d0:	4f 92       	push	r4
    21d2:	5f 92       	push	r5
    21d4:	6f 92       	push	r6
    21d6:	7f 92       	push	r7
    21d8:	af 92       	push	r10
    21da:	bf 92       	push	r11
    21dc:	cf 92       	push	r12
    21de:	ef 92       	push	r14
    21e0:	ff 92       	push	r15
    21e2:	0f 93       	push	r16
    21e4:	1f 93       	push	r17
    21e6:	cf 93       	push	r28
    21e8:	df 93       	push	r29
    21ea:	5c 01       	movw	r10, r24
    21ec:	f6 2e       	mov	r15, r22
    21ee:	d4 2f       	mov	r29, r20
    21f0:	28 01       	movw	r4, r16
    21f2:	39 01       	movw	r6, r18
    21f4:	ee 20       	and	r14, r14
    21f6:	19 f1       	breq	.+70     	; 0x223e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    21f8:	0e 94 cb 10 	call	0x2196	; 0x2196 <TwoWire::beginTransmission(unsigned char)>
    21fc:	ce 2d       	mov	r28, r14
    21fe:	c4 30       	cpi	r28, 0x04	; 4
    2200:	08 f0       	brcs	.+2      	; 0x2204 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    2202:	c3 e0       	ldi	r28, 0x03	; 3
    2204:	c1 50       	subi	r28, 0x01	; 1
    2206:	b8 f0       	brcs	.+46     	; 0x2236 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    2208:	28 e0       	ldi	r18, 0x08	; 8
    220a:	c2 9f       	mul	r28, r18
    220c:	c0 01       	movw	r24, r0
    220e:	11 24       	eor	r1, r1
    2210:	a3 01       	movw	r20, r6
    2212:	92 01       	movw	r18, r4
    2214:	04 c0       	rjmp	.+8      	; 0x221e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    2216:	56 95       	lsr	r21
    2218:	47 95       	ror	r20
    221a:	37 95       	ror	r19
    221c:	27 95       	ror	r18
    221e:	8a 95       	dec	r24
    2220:	d2 f7       	brpl	.-12     	; 0x2216 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    2222:	b9 01       	movw	r22, r18
    2224:	d5 01       	movw	r26, r10
    2226:	ed 91       	ld	r30, X+
    2228:	fc 91       	ld	r31, X
    222a:	01 90       	ld	r0, Z+
    222c:	f0 81       	ld	r31, Z
    222e:	e0 2d       	mov	r30, r0
    2230:	c5 01       	movw	r24, r10
    2232:	09 95       	icall
    2234:	e7 cf       	rjmp	.-50     	; 0x2204 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    2236:	60 e0       	ldi	r22, 0x00	; 0
    2238:	c5 01       	movw	r24, r10
    223a:	0e 94 d5 10 	call	0x21aa	; 0x21aa <TwoWire::endTransmission(unsigned char)>
    223e:	4d 2f       	mov	r20, r29
    2240:	d1 32       	cpi	r29, 0x21	; 33
    2242:	08 f0       	brcs	.+2      	; 0x2246 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    2244:	40 e2       	ldi	r20, 0x20	; 32
    2246:	2c 2d       	mov	r18, r12
    2248:	6f e0       	ldi	r22, 0x0F	; 15
    224a:	75 e0       	ldi	r23, 0x05	; 5
    224c:	8f 2d       	mov	r24, r15
    224e:	0e 94 80 11 	call	0x2300	; 0x2300 <twi_readFrom>
    2252:	10 92 0e 05 	sts	0x050E, r1	; 0x80050e <TwoWire::rxBufferIndex>
    2256:	80 93 0d 05 	sts	0x050D, r24	; 0x80050d <TwoWire::rxBufferLength>
    225a:	df 91       	pop	r29
    225c:	cf 91       	pop	r28
    225e:	1f 91       	pop	r17
    2260:	0f 91       	pop	r16
    2262:	ff 90       	pop	r15
    2264:	ef 90       	pop	r14
    2266:	cf 90       	pop	r12
    2268:	bf 90       	pop	r11
    226a:	af 90       	pop	r10
    226c:	7f 90       	pop	r7
    226e:	6f 90       	pop	r6
    2270:	5f 90       	pop	r5
    2272:	4f 90       	pop	r4
    2274:	08 95       	ret

00002276 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    2276:	cf 92       	push	r12
    2278:	ef 92       	push	r14
    227a:	0f 93       	push	r16
    227c:	1f 93       	push	r17
    227e:	c2 2e       	mov	r12, r18
    2280:	e1 2c       	mov	r14, r1
    2282:	00 e0       	ldi	r16, 0x00	; 0
    2284:	10 e0       	ldi	r17, 0x00	; 0
    2286:	98 01       	movw	r18, r16
    2288:	0e 94 e8 10 	call	0x21d0	; 0x21d0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    228c:	1f 91       	pop	r17
    228e:	0f 91       	pop	r16
    2290:	ef 90       	pop	r14
    2292:	cf 90       	pop	r12
    2294:	08 95       	ret

00002296 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
    2296:	21 e0       	ldi	r18, 0x01	; 1
    2298:	0c 94 3b 11 	jmp	0x2276	; 0x2276 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

0000229c <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    229c:	61 e0       	ldi	r22, 0x01	; 1
    229e:	0c 94 d5 10 	jmp	0x21aa	; 0x21aa <TwoWire::endTransmission(unsigned char)>

000022a2 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    22a2:	e9 ed       	ldi	r30, 0xD9	; 217
    22a4:	f4 e0       	ldi	r31, 0x04	; 4
    22a6:	13 82       	std	Z+3, r1	; 0x03
    22a8:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    22aa:	88 ee       	ldi	r24, 0xE8	; 232
    22ac:	93 e0       	ldi	r25, 0x03	; 3
    22ae:	a0 e0       	ldi	r26, 0x00	; 0
    22b0:	b0 e0       	ldi	r27, 0x00	; 0
    22b2:	84 83       	std	Z+4, r24	; 0x04
    22b4:	95 83       	std	Z+5, r25	; 0x05
    22b6:	a6 83       	std	Z+6, r26	; 0x06
    22b8:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:52
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    22ba:	88 eb       	ldi	r24, 0xB8	; 184
    22bc:	93 e0       	ldi	r25, 0x03	; 3
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:333
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    22c2:	08 95       	ret

000022c4 <twi_init>:
twi_init():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    22c4:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <twi_state>
    22c8:	81 e0       	ldi	r24, 0x01	; 1
    22ca:	80 93 9a 05 	sts	0x059A, r24	; 0x80059a <twi_sendStop>
    22ce:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <twi_inRepStart>
    22d2:	61 e0       	ldi	r22, 0x01	; 1
    22d4:	81 e1       	ldi	r24, 0x11	; 17
    22d6:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    22da:	61 e0       	ldi	r22, 0x01	; 1
    22dc:	80 e1       	ldi	r24, 0x10	; 16
    22de:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    22e2:	e9 eb       	ldi	r30, 0xB9	; 185
    22e4:	f0 e0       	ldi	r31, 0x00	; 0
    22e6:	80 81       	ld	r24, Z
    22e8:	8e 7f       	andi	r24, 0xFE	; 254
    22ea:	80 83       	st	Z, r24
    22ec:	80 81       	ld	r24, Z
    22ee:	8d 7f       	andi	r24, 0xFD	; 253
    22f0:	80 83       	st	Z, r24
    22f2:	88 e4       	ldi	r24, 0x48	; 72
    22f4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    22f8:	85 e4       	ldi	r24, 0x45	; 69
    22fa:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    22fe:	08 95       	ret

00002300 <twi_readFrom>:
twi_readFrom():
    2300:	41 32       	cpi	r20, 0x21	; 33
    2302:	08 f0       	brcs	.+2      	; 0x2306 <twi_readFrom+0x6>
    2304:	43 c0       	rjmp	.+134    	; 0x238c <twi_readFrom+0x8c>
    2306:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <twi_state>
    230a:	91 11       	cpse	r25, r1
    230c:	fc cf       	rjmp	.-8      	; 0x2306 <twi_readFrom+0x6>
    230e:	91 e0       	ldi	r25, 0x01	; 1
    2310:	90 93 9c 05 	sts	0x059C, r25	; 0x80059c <twi_state>
    2314:	20 93 9a 05 	sts	0x059A, r18	; 0x80059a <twi_sendStop>
    2318:	2f ef       	ldi	r18, 0xFF	; 255
    231a:	20 93 2f 05 	sts	0x052F, r18	; 0x80052f <twi_error>
    231e:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <twi_masterBufferIndex>
    2322:	24 0f       	add	r18, r20
    2324:	20 93 73 05 	sts	0x0573, r18	; 0x800573 <twi_masterBufferLength>
    2328:	90 93 9b 05 	sts	0x059B, r25	; 0x80059b <twi_slarw>
    232c:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <twi_slarw>
    2330:	88 0f       	add	r24, r24
    2332:	89 2b       	or	r24, r25
    2334:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <twi_slarw>
    2338:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <twi_inRepStart>
    233c:	81 30       	cpi	r24, 0x01	; 1
    233e:	09 f5       	brne	.+66     	; 0x2382 <twi_readFrom+0x82>
    2340:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <twi_inRepStart>
    2344:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <twi_slarw>
    2348:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    234c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2350:	83 fd       	sbrc	r24, 3
    2352:	f8 cf       	rjmp	.-16     	; 0x2344 <twi_readFrom+0x44>
    2354:	85 ec       	ldi	r24, 0xC5	; 197
    2356:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    235a:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <twi_state>
    235e:	81 30       	cpi	r24, 0x01	; 1
    2360:	e1 f3       	breq	.-8      	; 0x235a <twi_readFrom+0x5a>
    2362:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <twi_masterBufferIndex>
    2366:	84 17       	cp	r24, r20
    2368:	10 f4       	brcc	.+4      	; 0x236e <twi_readFrom+0x6e>
    236a:	40 91 74 05 	lds	r20, 0x0574	; 0x800574 <twi_masterBufferIndex>
    236e:	a5 e7       	ldi	r26, 0x75	; 117
    2370:	b5 e0       	ldi	r27, 0x05	; 5
    2372:	96 2f       	mov	r25, r22
    2374:	fb 01       	movw	r30, r22
    2376:	8e 2f       	mov	r24, r30
    2378:	89 1b       	sub	r24, r25
    237a:	84 17       	cp	r24, r20
    237c:	20 f0       	brcs	.+8      	; 0x2386 <twi_readFrom+0x86>
    237e:	84 2f       	mov	r24, r20
    2380:	08 95       	ret
    2382:	85 ee       	ldi	r24, 0xE5	; 229
    2384:	e8 cf       	rjmp	.-48     	; 0x2356 <twi_readFrom+0x56>
    2386:	8d 91       	ld	r24, X+
    2388:	81 93       	st	Z+, r24
    238a:	f5 cf       	rjmp	.-22     	; 0x2376 <twi_readFrom+0x76>
    238c:	40 e0       	ldi	r20, 0x00	; 0
    238e:	f7 cf       	rjmp	.-18     	; 0x237e <twi_readFrom+0x7e>

00002390 <twi_writeTo>:
twi_writeTo():
    2390:	0f 93       	push	r16
    2392:	41 32       	cpi	r20, 0x21	; 33
    2394:	08 f0       	brcs	.+2      	; 0x2398 <twi_writeTo+0x8>
    2396:	4b c0       	rjmp	.+150    	; 0x242e <twi_writeTo+0x9e>
    2398:	90 91 9c 05 	lds	r25, 0x059C	; 0x80059c <twi_state>
    239c:	91 11       	cpse	r25, r1
    239e:	fc cf       	rjmp	.-8      	; 0x2398 <twi_writeTo+0x8>
    23a0:	92 e0       	ldi	r25, 0x02	; 2
    23a2:	90 93 9c 05 	sts	0x059C, r25	; 0x80059c <twi_state>
    23a6:	00 93 9a 05 	sts	0x059A, r16	; 0x80059a <twi_sendStop>
    23aa:	9f ef       	ldi	r25, 0xFF	; 255
    23ac:	90 93 2f 05 	sts	0x052F, r25	; 0x80052f <twi_error>
    23b0:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <twi_masterBufferIndex>
    23b4:	40 93 73 05 	sts	0x0573, r20	; 0x800573 <twi_masterBufferLength>
    23b8:	36 2f       	mov	r19, r22
    23ba:	a5 e7       	ldi	r26, 0x75	; 117
    23bc:	b5 e0       	ldi	r27, 0x05	; 5
    23be:	fb 01       	movw	r30, r22
    23c0:	9e 2f       	mov	r25, r30
    23c2:	93 1b       	sub	r25, r19
    23c4:	94 17       	cp	r25, r20
    23c6:	70 f1       	brcs	.+92     	; 0x2424 <twi_writeTo+0x94>
    23c8:	10 92 9b 05 	sts	0x059B, r1	; 0x80059b <twi_slarw>
    23cc:	90 91 9b 05 	lds	r25, 0x059B	; 0x80059b <twi_slarw>
    23d0:	88 0f       	add	r24, r24
    23d2:	89 2b       	or	r24, r25
    23d4:	80 93 9b 05 	sts	0x059B, r24	; 0x80059b <twi_slarw>
    23d8:	80 91 99 05 	lds	r24, 0x0599	; 0x800599 <twi_inRepStart>
    23dc:	81 30       	cpi	r24, 0x01	; 1
    23de:	29 f5       	brne	.+74     	; 0x242a <twi_writeTo+0x9a>
    23e0:	10 92 99 05 	sts	0x0599, r1	; 0x800599 <twi_inRepStart>
    23e4:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <twi_slarw>
    23e8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    23ec:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    23f0:	83 fd       	sbrc	r24, 3
    23f2:	f8 cf       	rjmp	.-16     	; 0x23e4 <twi_writeTo+0x54>
    23f4:	85 ec       	ldi	r24, 0xC5	; 197
    23f6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    23fa:	22 23       	and	r18, r18
    23fc:	21 f0       	breq	.+8      	; 0x2406 <twi_writeTo+0x76>
    23fe:	80 91 9c 05 	lds	r24, 0x059C	; 0x80059c <twi_state>
    2402:	82 30       	cpi	r24, 0x02	; 2
    2404:	d1 f3       	breq	.-12     	; 0x23fa <twi_writeTo+0x6a>
    2406:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <twi_error>
    240a:	8f 3f       	cpi	r24, 0xFF	; 255
    240c:	91 f0       	breq	.+36     	; 0x2432 <twi_writeTo+0xa2>
    240e:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <twi_error>
    2412:	80 32       	cpi	r24, 0x20	; 32
    2414:	81 f0       	breq	.+32     	; 0x2436 <twi_writeTo+0xa6>
    2416:	80 91 2f 05 	lds	r24, 0x052F	; 0x80052f <twi_error>
    241a:	80 33       	cpi	r24, 0x30	; 48
    241c:	71 f0       	breq	.+28     	; 0x243a <twi_writeTo+0xaa>
    241e:	84 e0       	ldi	r24, 0x04	; 4
    2420:	0f 91       	pop	r16
    2422:	08 95       	ret
    2424:	91 91       	ld	r25, Z+
    2426:	9d 93       	st	X+, r25
    2428:	cb cf       	rjmp	.-106    	; 0x23c0 <twi_writeTo+0x30>
    242a:	85 ee       	ldi	r24, 0xE5	; 229
    242c:	e4 cf       	rjmp	.-56     	; 0x23f6 <twi_writeTo+0x66>
    242e:	81 e0       	ldi	r24, 0x01	; 1
    2430:	f7 cf       	rjmp	.-18     	; 0x2420 <twi_writeTo+0x90>
    2432:	80 e0       	ldi	r24, 0x00	; 0
    2434:	f5 cf       	rjmp	.-22     	; 0x2420 <twi_writeTo+0x90>
    2436:	82 e0       	ldi	r24, 0x02	; 2
    2438:	f3 cf       	rjmp	.-26     	; 0x2420 <twi_writeTo+0x90>
    243a:	83 e0       	ldi	r24, 0x03	; 3
    243c:	f1 cf       	rjmp	.-30     	; 0x2420 <twi_writeTo+0x90>

0000243e <twi_transmit>:
twi_transmit():
    243e:	20 91 51 05 	lds	r18, 0x0551	; 0x800551 <twi_txBufferLength>
    2442:	26 0f       	add	r18, r22
    2444:	33 27       	eor	r19, r19
    2446:	33 1f       	adc	r19, r19
    2448:	21 32       	cpi	r18, 0x21	; 33
    244a:	31 05       	cpc	r19, r1
    244c:	ec f4       	brge	.+58     	; 0x2488 <twi_transmit+0x4a>
    244e:	20 91 9c 05 	lds	r18, 0x059C	; 0x80059c <twi_state>
    2452:	fc 01       	movw	r30, r24
    2454:	90 e0       	ldi	r25, 0x00	; 0
    2456:	80 e0       	ldi	r24, 0x00	; 0
    2458:	24 30       	cpi	r18, 0x04	; 4
    245a:	69 f0       	breq	.+26     	; 0x2476 <twi_transmit+0x38>
    245c:	82 e0       	ldi	r24, 0x02	; 2
    245e:	08 95       	ret
    2460:	a0 91 51 05 	lds	r26, 0x0551	; 0x800551 <twi_txBufferLength>
    2464:	21 91       	ld	r18, Z+
    2466:	ac 01       	movw	r20, r24
    2468:	4d 5a       	subi	r20, 0xAD	; 173
    246a:	5a 4f       	sbci	r21, 0xFA	; 250
    246c:	a4 0f       	add	r26, r20
    246e:	b5 2f       	mov	r27, r21
    2470:	b1 1d       	adc	r27, r1
    2472:	2c 93       	st	X, r18
    2474:	01 96       	adiw	r24, 0x01	; 1
    2476:	86 17       	cp	r24, r22
    2478:	98 f3       	brcs	.-26     	; 0x2460 <twi_transmit+0x22>
    247a:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <twi_txBufferLength>
    247e:	68 0f       	add	r22, r24
    2480:	60 93 51 05 	sts	0x0551, r22	; 0x800551 <twi_txBufferLength>
    2484:	80 e0       	ldi	r24, 0x00	; 0
    2486:	08 95       	ret
    2488:	81 e0       	ldi	r24, 0x01	; 1
    248a:	08 95       	ret

0000248c <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    248c:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <twi_onSlaveReceive+0x1>
    2490:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <twi_onSlaveReceive>
    2494:	08 95       	ret

00002496 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    2496:	90 93 98 05 	sts	0x0598, r25	; 0x800598 <twi_onSlaveTransmit+0x1>
    249a:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <twi_onSlaveTransmit>
    249e:	08 95       	ret

000024a0 <twi_stop>:
twi_stop():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    24a0:	85 ed       	ldi	r24, 0xD5	; 213
    24a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    24a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    24aa:	84 fd       	sbrc	r24, 4
    24ac:	fc cf       	rjmp	.-8      	; 0x24a6 <twi_stop+0x6>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    24ae:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
    24b2:	08 95       	ret

000024b4 <twi_releaseBus>:
twi_releaseBus():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    24b4:	85 ec       	ldi	r24, 0xC5	; 197
    24b6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    24ba:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:397
}
    24be:	08 95       	ret

000024c0 <__vector_26>:
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
    24c0:	1f 92       	push	r1
    24c2:	0f 92       	push	r0
    24c4:	0f b6       	in	r0, 0x3f	; 63
    24c6:	0f 92       	push	r0
    24c8:	11 24       	eor	r1, r1
    24ca:	0b b6       	in	r0, 0x3b	; 59
    24cc:	0f 92       	push	r0
    24ce:	2f 93       	push	r18
    24d0:	3f 93       	push	r19
    24d2:	4f 93       	push	r20
    24d4:	5f 93       	push	r21
    24d6:	6f 93       	push	r22
    24d8:	7f 93       	push	r23
    24da:	8f 93       	push	r24
    24dc:	9f 93       	push	r25
    24de:	af 93       	push	r26
    24e0:	bf 93       	push	r27
    24e2:	ef 93       	push	r30
    24e4:	ff 93       	push	r31
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    24e6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    24ea:	88 7f       	andi	r24, 0xF8	; 248
    24ec:	80 36       	cpi	r24, 0x60	; 96
    24ee:	09 f4       	brne	.+2      	; 0x24f2 <__vector_26+0x32>
    24f0:	4e c0       	rjmp	.+156    	; 0x258e <__vector_26+0xce>
    24f2:	08 f0       	brcs	.+2      	; 0x24f6 <__vector_26+0x36>
    24f4:	41 c0       	rjmp	.+130    	; 0x2578 <__vector_26+0xb8>
    24f6:	88 32       	cpi	r24, 0x28	; 40
    24f8:	09 f4       	brne	.+2      	; 0x24fc <__vector_26+0x3c>
    24fa:	aa c0       	rjmp	.+340    	; 0x2650 <__vector_26+0x190>
    24fc:	28 f5       	brcc	.+74     	; 0x2548 <__vector_26+0x88>
    24fe:	80 31       	cpi	r24, 0x10	; 16
    2500:	09 f4       	brne	.+2      	; 0x2504 <__vector_26+0x44>
    2502:	9e c0       	rjmp	.+316    	; 0x2640 <__vector_26+0x180>
    2504:	c8 f4       	brcc	.+50     	; 0x2538 <__vector_26+0x78>
    2506:	88 23       	and	r24, r24
    2508:	09 f4       	brne	.+2      	; 0x250c <__vector_26+0x4c>
    250a:	fb c0       	rjmp	.+502    	; 0x2702 <__vector_26+0x242>
    250c:	88 30       	cpi	r24, 0x08	; 8
    250e:	09 f4       	brne	.+2      	; 0x2512 <__vector_26+0x52>
    2510:	97 c0       	rjmp	.+302    	; 0x2640 <__vector_26+0x180>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2512:	ff 91       	pop	r31
    2514:	ef 91       	pop	r30
    2516:	bf 91       	pop	r27
    2518:	af 91       	pop	r26
    251a:	9f 91       	pop	r25
    251c:	8f 91       	pop	r24
    251e:	7f 91       	pop	r23
    2520:	6f 91       	pop	r22
    2522:	5f 91       	pop	r21
    2524:	4f 91       	pop	r20
    2526:	3f 91       	pop	r19
    2528:	2f 91       	pop	r18
    252a:	0f 90       	pop	r0
    252c:	0b be       	out	0x3b, r0	; 59
    252e:	0f 90       	pop	r0
    2530:	0f be       	out	0x3f, r0	; 63
    2532:	0f 90       	pop	r0
    2534:	1f 90       	pop	r1
    2536:	18 95       	reti
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2538:	88 31       	cpi	r24, 0x18	; 24
    253a:	09 f4       	brne	.+2      	; 0x253e <__vector_26+0x7e>
    253c:	89 c0       	rjmp	.+274    	; 0x2650 <__vector_26+0x190>
    253e:	80 32       	cpi	r24, 0x20	; 32
    2540:	41 f7       	brne	.-48     	; 0x2512 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2542:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <twi_error>
    2546:	15 c0       	rjmp	.+42     	; 0x2572 <__vector_26+0xb2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2548:	80 34       	cpi	r24, 0x40	; 64
    254a:	09 f4       	brne	.+2      	; 0x254e <__vector_26+0x8e>
    254c:	9e c0       	rjmp	.+316    	; 0x268a <__vector_26+0x1ca>
    254e:	48 f4       	brcc	.+18     	; 0x2562 <__vector_26+0xa2>
    2550:	80 33       	cpi	r24, 0x30	; 48
    2552:	b9 f3       	breq	.-18     	; 0x2542 <__vector_26+0x82>
    2554:	88 33       	cpi	r24, 0x38	; 56
    2556:	e9 f6       	brne	.-70     	; 0x2512 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2558:	80 93 2f 05 	sts	0x052F, r24	; 0x80052f <twi_error>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
    255c:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <twi_releaseBus>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:442
      break;
    2560:	d8 cf       	rjmp	.-80     	; 0x2512 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2562:	80 35       	cpi	r24, 0x50	; 80
    2564:	09 f4       	brne	.+2      	; 0x2568 <__vector_26+0xa8>
    2566:	85 c0       	rjmp	.+266    	; 0x2672 <__vector_26+0x1b2>
    2568:	88 35       	cpi	r24, 0x58	; 88
    256a:	09 f4       	brne	.+2      	; 0x256e <__vector_26+0xae>
    256c:	96 c0       	rjmp	.+300    	; 0x269a <__vector_26+0x1da>
    256e:	88 34       	cpi	r24, 0x48	; 72
    2570:	81 f6       	brne	.-96     	; 0x2512 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    2572:	0e 94 50 12 	call	0x24a0	; 0x24a0 <twi_stop>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
    2576:	cd cf       	rjmp	.-102    	; 0x2512 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2578:	88 39       	cpi	r24, 0x98	; 152
    257a:	09 f4       	brne	.+2      	; 0x257e <__vector_26+0xbe>
    257c:	8c c0       	rjmp	.+280    	; 0x2696 <__vector_26+0x1d6>
    257e:	38 f5       	brcc	.+78     	; 0x25ce <__vector_26+0x10e>
    2580:	88 37       	cpi	r24, 0x78	; 120
    2582:	29 f0       	breq	.+10     	; 0x258e <__vector_26+0xce>
    2584:	50 f4       	brcc	.+20     	; 0x259a <__vector_26+0xda>
    2586:	88 36       	cpi	r24, 0x68	; 104
    2588:	11 f0       	breq	.+4      	; 0x258e <__vector_26+0xce>
    258a:	80 37       	cpi	r24, 0x70	; 112
    258c:	11 f6       	brne	.-124    	; 0x2512 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    258e:	83 e0       	ldi	r24, 0x03	; 3
    2590:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2594:	10 92 30 05 	sts	0x0530, r1	; 0x800530 <twi_rxBufferIndex>
    2598:	57 c0       	rjmp	.+174    	; 0x2648 <__vector_26+0x188>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    259a:	88 38       	cpi	r24, 0x88	; 136
    259c:	09 f4       	brne	.+2      	; 0x25a0 <__vector_26+0xe0>
    259e:	7b c0       	rjmp	.+246    	; 0x2696 <__vector_26+0x1d6>
    25a0:	80 39       	cpi	r24, 0x90	; 144
    25a2:	19 f0       	breq	.+6      	; 0x25aa <__vector_26+0xea>
    25a4:	80 38       	cpi	r24, 0x80	; 128
    25a6:	09 f0       	breq	.+2      	; 0x25aa <__vector_26+0xea>
    25a8:	b4 cf       	rjmp	.-152    	; 0x2512 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    25aa:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <twi_rxBufferIndex>
    25ae:	80 32       	cpi	r24, 0x20	; 32
    25b0:	08 f0       	brcs	.+2      	; 0x25b4 <__vector_26+0xf4>
    25b2:	71 c0       	rjmp	.+226    	; 0x2696 <__vector_26+0x1d6>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    25b4:	e0 91 30 05 	lds	r30, 0x0530	; 0x800530 <twi_rxBufferIndex>
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	8e 0f       	add	r24, r30
    25bc:	80 93 30 05 	sts	0x0530, r24	; 0x800530 <twi_rxBufferIndex>
    25c0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    25c4:	f0 e0       	ldi	r31, 0x00	; 0
    25c6:	ef 5c       	subi	r30, 0xCF	; 207
    25c8:	fa 4f       	sbci	r31, 0xFA	; 250
    25ca:	80 83       	st	Z, r24
    25cc:	3d c0       	rjmp	.+122    	; 0x2648 <__vector_26+0x188>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    25ce:	80 3b       	cpi	r24, 0xB0	; 176
    25d0:	39 f0       	breq	.+14     	; 0x25e0 <__vector_26+0x120>
    25d2:	e0 f4       	brcc	.+56     	; 0x260c <__vector_26+0x14c>
    25d4:	80 3a       	cpi	r24, 0xA0	; 160
    25d6:	09 f4       	brne	.+2      	; 0x25da <__vector_26+0x11a>
    25d8:	79 c0       	rjmp	.+242    	; 0x26cc <__vector_26+0x20c>
    25da:	88 3a       	cpi	r24, 0xA8	; 168
    25dc:	09 f0       	breq	.+2      	; 0x25e0 <__vector_26+0x120>
    25de:	99 cf       	rjmp	.-206    	; 0x2512 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    25e0:	84 e0       	ldi	r24, 0x04	; 4
    25e2:	80 93 9c 05 	sts	0x059C, r24	; 0x80059c <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    25e6:	10 92 52 05 	sts	0x0552, r1	; 0x800552 <twi_txBufferIndex>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    25ea:	10 92 51 05 	sts	0x0551, r1	; 0x800551 <twi_txBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    25ee:	e0 91 97 05 	lds	r30, 0x0597	; 0x800597 <twi_onSlaveTransmit>
    25f2:	f0 91 98 05 	lds	r31, 0x0598	; 0x800598 <twi_onSlaveTransmit+0x1>
    25f6:	09 95       	icall
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    25f8:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <twi_txBufferLength>
    25fc:	81 11       	cpse	r24, r1
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <__vector_26+0x15e>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    2600:	81 e0       	ldi	r24, 0x01	; 1
    2602:	80 93 51 05 	sts	0x0551, r24	; 0x800551 <twi_txBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    2606:	10 92 53 05 	sts	0x0553, r1	; 0x800553 <twi_txBuffer>
    260a:	09 c0       	rjmp	.+18     	; 0x261e <__vector_26+0x15e>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    260c:	80 3c       	cpi	r24, 0xC0	; 192
    260e:	09 f4       	brne	.+2      	; 0x2612 <__vector_26+0x152>
    2610:	76 c0       	rjmp	.+236    	; 0x26fe <__vector_26+0x23e>
    2612:	88 3c       	cpi	r24, 0xC8	; 200
    2614:	09 f4       	brne	.+2      	; 0x2618 <__vector_26+0x158>
    2616:	73 c0       	rjmp	.+230    	; 0x26fe <__vector_26+0x23e>
    2618:	88 3b       	cpi	r24, 0xB8	; 184
    261a:	09 f0       	breq	.+2      	; 0x261e <__vector_26+0x15e>
    261c:	7a cf       	rjmp	.-268    	; 0x2512 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    261e:	e0 91 52 05 	lds	r30, 0x0552	; 0x800552 <twi_txBufferIndex>
    2622:	81 e0       	ldi	r24, 0x01	; 1
    2624:	8e 0f       	add	r24, r30
    2626:	80 93 52 05 	sts	0x0552, r24	; 0x800552 <twi_txBufferIndex>
    262a:	f0 e0       	ldi	r31, 0x00	; 0
    262c:	ed 5a       	subi	r30, 0xAD	; 173
    262e:	fa 4f       	sbci	r31, 0xFA	; 250
    2630:	80 81       	ld	r24, Z
    2632:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2636:	90 91 52 05 	lds	r25, 0x0552	; 0x800552 <twi_txBufferIndex>
    263a:	80 91 51 05 	lds	r24, 0x0551	; 0x800551 <twi_txBufferLength>
    263e:	29 c0       	rjmp	.+82     	; 0x2692 <__vector_26+0x1d2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    2640:	80 91 9b 05 	lds	r24, 0x059B	; 0x80059b <twi_slarw>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    2644:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2648:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    264a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    264e:	61 cf       	rjmp	.-318    	; 0x2512 <__vector_26+0x52>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    2650:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_masterBufferIndex>
    2654:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_masterBufferLength>
    2658:	98 17       	cp	r25, r24
    265a:	58 f5       	brcc	.+86     	; 0x26b2 <__vector_26+0x1f2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    265c:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <twi_masterBufferIndex>
    2660:	81 e0       	ldi	r24, 0x01	; 1
    2662:	8e 0f       	add	r24, r30
    2664:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <twi_masterBufferIndex>
    2668:	f0 e0       	ldi	r31, 0x00	; 0
    266a:	eb 58       	subi	r30, 0x8B	; 139
    266c:	fa 4f       	sbci	r31, 0xFA	; 250
    266e:	80 81       	ld	r24, Z
    2670:	e9 cf       	rjmp	.-46     	; 0x2644 <__vector_26+0x184>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    2672:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <twi_masterBufferIndex>
    2676:	81 e0       	ldi	r24, 0x01	; 1
    2678:	8e 0f       	add	r24, r30
    267a:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <twi_masterBufferIndex>
    267e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2682:	f0 e0       	ldi	r31, 0x00	; 0
    2684:	eb 58       	subi	r30, 0x8B	; 139
    2686:	fa 4f       	sbci	r31, 0xFA	; 250
    2688:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    268a:	90 91 74 05 	lds	r25, 0x0574	; 0x800574 <twi_masterBufferIndex>
    268e:	80 91 73 05 	lds	r24, 0x0573	; 0x800573 <twi_masterBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2692:	98 17       	cp	r25, r24
    2694:	c8 f2       	brcs	.-78     	; 0x2648 <__vector_26+0x188>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2696:	85 e8       	ldi	r24, 0x85	; 133
    2698:	d8 cf       	rjmp	.-80     	; 0x264a <__vector_26+0x18a>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    269a:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <twi_masterBufferIndex>
    269e:	81 e0       	ldi	r24, 0x01	; 1
    26a0:	8e 0f       	add	r24, r30
    26a2:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <twi_masterBufferIndex>
    26a6:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    26aa:	f0 e0       	ldi	r31, 0x00	; 0
    26ac:	eb 58       	subi	r30, 0x8B	; 139
    26ae:	fa 4f       	sbci	r31, 0xFA	; 250
    26b0:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    26b2:	80 91 9a 05 	lds	r24, 0x059A	; 0x80059a <twi_sendStop>
    26b6:	81 11       	cpse	r24, r1
    26b8:	5c cf       	rjmp	.-328    	; 0x2572 <__vector_26+0xb2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    26ba:	81 e0       	ldi	r24, 0x01	; 1
    26bc:	80 93 99 05 	sts	0x0599, r24	; 0x800599 <twi_inRepStart>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    26c0:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    26c2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    26c6:	10 92 9c 05 	sts	0x059C, r1	; 0x80059c <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:552
      break;
    26ca:	23 cf       	rjmp	.-442    	; 0x2512 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    26cc:	0e 94 5a 12 	call	0x24b4	; 0x24b4 <twi_releaseBus>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    26d0:	80 91 30 05 	lds	r24, 0x0530	; 0x800530 <twi_rxBufferIndex>
    26d4:	80 32       	cpi	r24, 0x20	; 32
    26d6:	30 f4       	brcc	.+12     	; 0x26e4 <__vector_26+0x224>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    26d8:	e0 91 30 05 	lds	r30, 0x0530	; 0x800530 <twi_rxBufferIndex>
    26dc:	f0 e0       	ldi	r31, 0x00	; 0
    26de:	ef 5c       	subi	r30, 0xCF	; 207
    26e0:	fa 4f       	sbci	r31, 0xFA	; 250
    26e2:	10 82       	st	Z, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    26e4:	60 91 30 05 	lds	r22, 0x0530	; 0x800530 <twi_rxBufferIndex>
    26e8:	70 e0       	ldi	r23, 0x00	; 0
    26ea:	e0 91 95 05 	lds	r30, 0x0595	; 0x800595 <twi_onSlaveReceive>
    26ee:	f0 91 96 05 	lds	r31, 0x0596	; 0x800596 <twi_onSlaveReceive+0x1>
    26f2:	81 e3       	ldi	r24, 0x31	; 49
    26f4:	95 e0       	ldi	r25, 0x05	; 5
    26f6:	09 95       	icall
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    26f8:	10 92 30 05 	sts	0x0530, r1	; 0x800530 <twi_rxBufferIndex>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:510
      break;
    26fc:	0a cf       	rjmp	.-492    	; 0x2512 <__vector_26+0x52>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    26fe:	85 ec       	ldi	r24, 0xC5	; 197
    2700:	e0 cf       	rjmp	.-64     	; 0x26c2 <__vector_26+0x202>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2702:	10 92 2f 05 	sts	0x052F, r1	; 0x80052f <twi_error>
    2706:	35 cf       	rjmp	.-406    	; 0x2572 <__vector_26+0xb2>

00002708 <yield>:
__empty():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    2708:	08 95       	ret

0000270a <__vector_18>:
__vector_18():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227
  cli();
  m = timer0_millis;
  SREG = oldSREG;

  return m;
}
    270a:	1f 92       	push	r1
    270c:	0f 92       	push	r0
    270e:	0f b6       	in	r0, 0x3f	; 63
    2710:	0f 92       	push	r0
    2712:	11 24       	eor	r1, r1
    2714:	2f 93       	push	r18
    2716:	3f 93       	push	r19
    2718:	8f 93       	push	r24
    271a:	9f 93       	push	r25
    271c:	af 93       	push	r26
    271e:	bf 93       	push	r27
    2720:	80 91 a2 05 	lds	r24, 0x05A2	; 0x8005a2 <timer0_millis>
    2724:	90 91 a3 05 	lds	r25, 0x05A3	; 0x8005a3 <timer0_millis+0x1>
    2728:	a0 91 a4 05 	lds	r26, 0x05A4	; 0x8005a4 <timer0_millis+0x2>
    272c:	b0 91 a5 05 	lds	r27, 0x05A5	; 0x8005a5 <timer0_millis+0x3>
    2730:	30 91 a1 05 	lds	r19, 0x05A1	; 0x8005a1 <timer0_fract>
    2734:	23 e0       	ldi	r18, 0x03	; 3
    2736:	23 0f       	add	r18, r19
    2738:	2d 37       	cpi	r18, 0x7D	; 125
    273a:	68 f1       	brcs	.+90     	; 0x2796 <__vector_18+0x8c>
    273c:	26 e8       	ldi	r18, 0x86	; 134
    273e:	23 0f       	add	r18, r19
    2740:	02 96       	adiw	r24, 0x02	; 2
    2742:	a1 1d       	adc	r26, r1
    2744:	b1 1d       	adc	r27, r1
    2746:	20 93 a1 05 	sts	0x05A1, r18	; 0x8005a1 <timer0_fract>
    274a:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <timer0_millis>
    274e:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <timer0_millis+0x1>
    2752:	a0 93 a4 05 	sts	0x05A4, r26	; 0x8005a4 <timer0_millis+0x2>
    2756:	b0 93 a5 05 	sts	0x05A5, r27	; 0x8005a5 <timer0_millis+0x3>
    275a:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <timer0_overflow_count>
    275e:	90 91 9e 05 	lds	r25, 0x059E	; 0x80059e <timer0_overflow_count+0x1>
    2762:	a0 91 9f 05 	lds	r26, 0x059F	; 0x80059f <timer0_overflow_count+0x2>
    2766:	b0 91 a0 05 	lds	r27, 0x05A0	; 0x8005a0 <timer0_overflow_count+0x3>
    276a:	01 96       	adiw	r24, 0x01	; 1
    276c:	a1 1d       	adc	r26, r1
    276e:	b1 1d       	adc	r27, r1
    2770:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <timer0_overflow_count>
    2774:	90 93 9e 05 	sts	0x059E, r25	; 0x80059e <timer0_overflow_count+0x1>
    2778:	a0 93 9f 05 	sts	0x059F, r26	; 0x80059f <timer0_overflow_count+0x2>
    277c:	b0 93 a0 05 	sts	0x05A0, r27	; 0x8005a0 <timer0_overflow_count+0x3>
    2780:	bf 91       	pop	r27
    2782:	af 91       	pop	r26
    2784:	9f 91       	pop	r25
    2786:	8f 91       	pop	r24
    2788:	3f 91       	pop	r19
    278a:	2f 91       	pop	r18
    278c:	0f 90       	pop	r0
    278e:	0f be       	out	0x3f, r0	; 63
    2790:	0f 90       	pop	r0
    2792:	1f 90       	pop	r1
    2794:	18 95       	reti
    2796:	01 96       	adiw	r24, 0x01	; 1
    2798:	a1 1d       	adc	r26, r1
    279a:	b1 1d       	adc	r27, r1
    279c:	d4 cf       	rjmp	.-88     	; 0x2746 <__vector_18+0x3c>

0000279e <micros>:
micros():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    279e:	3f b7       	in	r19, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    27a0:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    27a2:	80 91 9d 05 	lds	r24, 0x059D	; 0x80059d <timer0_overflow_count>
    27a6:	90 91 9e 05 	lds	r25, 0x059E	; 0x80059e <timer0_overflow_count+0x1>
    27aa:	a0 91 9f 05 	lds	r26, 0x059F	; 0x80059f <timer0_overflow_count+0x2>
    27ae:	b0 91 a0 05 	lds	r27, 0x05A0	; 0x8005a0 <timer0_overflow_count+0x3>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    27b2:	26 b5       	in	r18, 0x26	; 38
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    27b4:	a8 9b       	sbis	0x15, 0	; 21
    27b6:	05 c0       	rjmp	.+10     	; 0x27c2 <micros+0x24>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    27b8:	2f 3f       	cpi	r18, 0xFF	; 255
    27ba:	19 f0       	breq	.+6      	; 0x27c2 <micros+0x24>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    27bc:	01 96       	adiw	r24, 0x01	; 1
    27be:	a1 1d       	adc	r26, r1
    27c0:	b1 1d       	adc	r27, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    27c2:	3f bf       	out	0x3f, r19	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    27c4:	ba 2f       	mov	r27, r26
    27c6:	a9 2f       	mov	r26, r25
    27c8:	98 2f       	mov	r25, r24
    27ca:	88 27       	eor	r24, r24
    27cc:	bc 01       	movw	r22, r24
    27ce:	cd 01       	movw	r24, r26
    27d0:	62 0f       	add	r22, r18
    27d2:	71 1d       	adc	r23, r1
    27d4:	81 1d       	adc	r24, r1
    27d6:	91 1d       	adc	r25, r1
    27d8:	42 e0       	ldi	r20, 0x02	; 2
    27da:	66 0f       	add	r22, r22
    27dc:	77 1f       	adc	r23, r23
    27de:	88 1f       	adc	r24, r24
    27e0:	99 1f       	adc	r25, r25
    27e2:	4a 95       	dec	r20
    27e4:	d1 f7       	brne	.-12     	; 0x27da <micros+0x3c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    27e6:	08 95       	ret

000027e8 <delay>:
delay():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    27e8:	8f 92       	push	r8
    27ea:	9f 92       	push	r9
    27ec:	af 92       	push	r10
    27ee:	bf 92       	push	r11
    27f0:	cf 92       	push	r12
    27f2:	df 92       	push	r13
    27f4:	ef 92       	push	r14
    27f6:	ff 92       	push	r15
    27f8:	6b 01       	movw	r12, r22
    27fa:	7c 01       	movw	r14, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    27fc:	0e 94 cf 13 	call	0x279e	; 0x279e <micros>
    2800:	4b 01       	movw	r8, r22
    2802:	5c 01       	movw	r10, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    2804:	c1 14       	cp	r12, r1
    2806:	d1 04       	cpc	r13, r1
    2808:	e1 04       	cpc	r14, r1
    280a:	f1 04       	cpc	r15, r1
    280c:	e9 f0       	breq	.+58     	; 0x2848 <delay+0x60>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    280e:	0e 94 84 13 	call	0x2708	; 0x2708 <yield>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    2812:	0e 94 cf 13 	call	0x279e	; 0x279e <micros>
    2816:	68 19       	sub	r22, r8
    2818:	79 09       	sbc	r23, r9
    281a:	8a 09       	sbc	r24, r10
    281c:	9b 09       	sbc	r25, r11
    281e:	68 3e       	cpi	r22, 0xE8	; 232
    2820:	73 40       	sbci	r23, 0x03	; 3
    2822:	81 05       	cpc	r24, r1
    2824:	91 05       	cpc	r25, r1
    2826:	70 f3       	brcs	.-36     	; 0x2804 <delay+0x1c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    2828:	21 e0       	ldi	r18, 0x01	; 1
    282a:	c2 1a       	sub	r12, r18
    282c:	d1 08       	sbc	r13, r1
    282e:	e1 08       	sbc	r14, r1
    2830:	f1 08       	sbc	r15, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    2832:	88 ee       	ldi	r24, 0xE8	; 232
    2834:	88 0e       	add	r8, r24
    2836:	83 e0       	ldi	r24, 0x03	; 3
    2838:	98 1e       	adc	r9, r24
    283a:	a1 1c       	adc	r10, r1
    283c:	b1 1c       	adc	r11, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    283e:	c1 14       	cp	r12, r1
    2840:	d1 04       	cpc	r13, r1
    2842:	e1 04       	cpc	r14, r1
    2844:	f1 04       	cpc	r15, r1
    2846:	29 f7       	brne	.-54     	; 0x2812 <delay+0x2a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    2848:	ff 90       	pop	r15
    284a:	ef 90       	pop	r14
    284c:	df 90       	pop	r13
    284e:	cf 90       	pop	r12
    2850:	bf 90       	pop	r11
    2852:	af 90       	pop	r10
    2854:	9f 90       	pop	r9
    2856:	8f 90       	pop	r8
    2858:	08 95       	ret

0000285a <delayMicroseconds>:
delayMicroseconds():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    285a:	82 30       	cpi	r24, 0x02	; 2
    285c:	91 05       	cpc	r25, r1
    285e:	38 f0       	brcs	.+14     	; 0x286e <delayMicroseconds+0x14>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    2860:	88 0f       	add	r24, r24
    2862:	99 1f       	adc	r25, r25
    2864:	88 0f       	add	r24, r24
    2866:	99 1f       	adc	r25, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    2868:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    286a:	01 97       	sbiw	r24, 0x01	; 1
    286c:	f1 f7       	brne	.-4      	; 0x286a <delayMicroseconds+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    286e:	08 95       	ret

00002870 <init>:
init():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    2870:	78 94       	sei
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    2872:	84 b5       	in	r24, 0x24	; 36
    2874:	83 60       	ori	r24, 0x03	; 3
    2876:	84 bd       	out	0x24, r24	; 36
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    2878:	85 b5       	in	r24, 0x25	; 37
    287a:	83 60       	ori	r24, 0x03	; 3
    287c:	85 bd       	out	0x25, r24	; 37
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    287e:	ee e6       	ldi	r30, 0x6E	; 110
    2880:	f0 e0       	ldi	r31, 0x00	; 0
    2882:	80 81       	ld	r24, Z
    2884:	81 60       	ori	r24, 0x01	; 1
    2886:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    2888:	e1 e8       	ldi	r30, 0x81	; 129
    288a:	f0 e0       	ldi	r31, 0x00	; 0
    288c:	82 e0       	ldi	r24, 0x02	; 2
    288e:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    2890:	80 81       	ld	r24, Z
    2892:	81 60       	ori	r24, 0x01	; 1
    2894:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    2896:	e0 e8       	ldi	r30, 0x80	; 128
    2898:	f0 e0       	ldi	r31, 0x00	; 0
    289a:	80 81       	ld	r24, Z
    289c:	81 60       	ori	r24, 0x01	; 1
    289e:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    28a0:	e1 eb       	ldi	r30, 0xB1	; 177
    28a2:	f0 e0       	ldi	r31, 0x00	; 0
    28a4:	80 81       	ld	r24, Z
    28a6:	84 60       	ori	r24, 0x04	; 4
    28a8:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    28aa:	e0 eb       	ldi	r30, 0xB0	; 176
    28ac:	f0 e0       	ldi	r31, 0x00	; 0
    28ae:	80 81       	ld	r24, Z
    28b0:	81 60       	ori	r24, 0x01	; 1
    28b2:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    28b4:	e1 e9       	ldi	r30, 0x91	; 145
    28b6:	f0 e0       	ldi	r31, 0x00	; 0
    28b8:	80 81       	ld	r24, Z
    28ba:	83 60       	ori	r24, 0x03	; 3
    28bc:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    28be:	e0 e9       	ldi	r30, 0x90	; 144
    28c0:	f0 e0       	ldi	r31, 0x00	; 0
    28c2:	80 81       	ld	r24, Z
    28c4:	81 60       	ori	r24, 0x01	; 1
    28c6:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    28c8:	87 e8       	ldi	r24, 0x87	; 135
    28ca:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    28ce:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    28d2:	08 95       	ret

000028d4 <turnOffPWM>:
turnOffPWM():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    28d4:	82 50       	subi	r24, 0x02	; 2
    28d6:	8a 30       	cpi	r24, 0x0A	; 10
    28d8:	88 f5       	brcc	.+98     	; 0x293c <turnOffPWM+0x68>
    28da:	e8 2f       	mov	r30, r24
    28dc:	f0 e0       	ldi	r31, 0x00	; 0
    28de:	ed 58       	subi	r30, 0x8D	; 141
    28e0:	fb 4e       	sbci	r31, 0xEB	; 235
    28e2:	0c 94 2c 1c 	jmp	0x3858	; 0x3858 <__tablejump2__>
    28e6:	9b 14       	cp	r9, r11
    28e8:	9f 14       	cp	r9, r15
    28ea:	7d 14       	cp	r7, r13
    28ec:	83 14       	cp	r8, r3
    28ee:	9e 14       	cp	r9, r14
    28f0:	9e 14       	cp	r9, r14
    28f2:	87 14       	cp	r8, r7
    28f4:	8d 14       	cp	r8, r13
    28f6:	91 14       	cp	r9, r1
    28f8:	97 14       	cp	r9, r7
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    28fa:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    28fe:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2900:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    2904:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2906:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    290a:	8f 7d       	andi	r24, 0xDF	; 223
    290c:	f9 cf       	rjmp	.-14     	; 0x2900 <turnOffPWM+0x2c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    290e:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2912:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2914:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    2918:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    291a:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    291e:	8f 7d       	andi	r24, 0xDF	; 223
    2920:	f9 cf       	rjmp	.-14     	; 0x2914 <turnOffPWM+0x40>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    2922:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2926:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    2928:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    292c:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    292e:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2932:	8f 7d       	andi	r24, 0xDF	; 223
    2934:	f9 cf       	rjmp	.-14     	; 0x2928 <turnOffPWM+0x54>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    2936:	84 b5       	in	r24, 0x24	; 36
    2938:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    293a:	84 bd       	out	0x24, r24	; 36
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    293c:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    293e:	84 b5       	in	r24, 0x24	; 36
    2940:	8f 7d       	andi	r24, 0xDF	; 223
    2942:	fb cf       	rjmp	.-10     	; 0x293a <turnOffPWM+0x66>

00002944 <pinMode>:
pinMode():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    2944:	cf 93       	push	r28
    2946:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    2948:	90 e0       	ldi	r25, 0x00	; 0
    294a:	fc 01       	movw	r30, r24
    294c:	ee 5c       	subi	r30, 0xCE	; 206
    294e:	fe 4f       	sbci	r31, 0xFE	; 254
    2950:	24 91       	lpm	r18, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    2952:	8e 5a       	subi	r24, 0xAE	; 174
    2954:	9e 4f       	sbci	r25, 0xFE	; 254
    2956:	fc 01       	movw	r30, r24
    2958:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    295a:	88 23       	and	r24, r24
    295c:	c9 f0       	breq	.+50     	; 0x2990 <pinMode+0x4c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	88 0f       	add	r24, r24
    2962:	99 1f       	adc	r25, r25
    2964:	fc 01       	movw	r30, r24
    2966:	ea 57       	subi	r30, 0x7A	; 122
    2968:	fe 4f       	sbci	r31, 0xFE	; 254
    296a:	a5 91       	lpm	r26, Z+
    296c:	b4 91       	lpm	r27, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    296e:	fc 01       	movw	r30, r24
    2970:	e4 58       	subi	r30, 0x84	; 132
    2972:	fe 4f       	sbci	r31, 0xFE	; 254
    2974:	c5 91       	lpm	r28, Z+
    2976:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    2978:	61 11       	cpse	r22, r1
    297a:	0d c0       	rjmp	.+26     	; 0x2996 <pinMode+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    297c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    297e:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    2980:	8c 91       	ld	r24, X
    2982:	20 95       	com	r18
    2984:	82 23       	and	r24, r18
    2986:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    2988:	88 81       	ld	r24, Y
    298a:	28 23       	and	r18, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    298c:	28 83       	st	Y, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    298e:	9f bf       	out	0x3f, r25	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    2990:	df 91       	pop	r29
    2992:	cf 91       	pop	r28
    2994:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    2996:	62 30       	cpi	r22, 0x02	; 2
    2998:	51 f4       	brne	.+20     	; 0x29ae <pinMode+0x6a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    299a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    299c:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    299e:	3c 91       	ld	r19, X
    29a0:	82 2f       	mov	r24, r18
    29a2:	80 95       	com	r24
    29a4:	83 23       	and	r24, r19
    29a6:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    29a8:	e8 81       	ld	r30, Y
    29aa:	2e 2b       	or	r18, r30
    29ac:	ef cf       	rjmp	.-34     	; 0x298c <pinMode+0x48>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    29ae:	8f b7       	in	r24, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    29b0:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    29b2:	ec 91       	ld	r30, X
    29b4:	2e 2b       	or	r18, r30
    29b6:	2c 93       	st	X, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    29b8:	8f bf       	out	0x3f, r24	; 63
    29ba:	ea cf       	rjmp	.-44     	; 0x2990 <pinMode+0x4c>

000029bc <digitalWrite>:
digitalWrite():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    29bc:	1f 93       	push	r17
    29be:	cf 93       	push	r28
    29c0:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    29c2:	28 2f       	mov	r18, r24
    29c4:	30 e0       	ldi	r19, 0x00	; 0
    29c6:	f9 01       	movw	r30, r18
    29c8:	ee 5e       	subi	r30, 0xEE	; 238
    29ca:	fe 4f       	sbci	r31, 0xFE	; 254
    29cc:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    29ce:	f9 01       	movw	r30, r18
    29d0:	ee 5c       	subi	r30, 0xCE	; 206
    29d2:	fe 4f       	sbci	r31, 0xFE	; 254
    29d4:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    29d6:	f9 01       	movw	r30, r18
    29d8:	ee 5a       	subi	r30, 0xAE	; 174
    29da:	fe 4f       	sbci	r31, 0xFE	; 254
    29dc:	c4 91       	lpm	r28, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    29de:	cc 23       	and	r28, r28
    29e0:	a9 f0       	breq	.+42     	; 0x2a0c <digitalWrite+0x50>
    29e2:	16 2f       	mov	r17, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    29e4:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    29e6:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <turnOffPWM>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    29ea:	ec 2f       	mov	r30, r28
    29ec:	f0 e0       	ldi	r31, 0x00	; 0
    29ee:	ee 0f       	add	r30, r30
    29f0:	ff 1f       	adc	r31, r31
    29f2:	e4 58       	subi	r30, 0x84	; 132
    29f4:	fe 4f       	sbci	r31, 0xFE	; 254
    29f6:	a5 91       	lpm	r26, Z+
    29f8:	b4 91       	lpm	r27, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    29fa:	8f b7       	in	r24, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    29fc:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    29fe:	ec 91       	ld	r30, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    2a00:	11 11       	cpse	r17, r1
    2a02:	08 c0       	rjmp	.+16     	; 0x2a14 <digitalWrite+0x58>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    2a04:	d0 95       	com	r29
    2a06:	de 23       	and	r29, r30
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    2a08:	dc 93       	st	X, r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    2a0a:	8f bf       	out	0x3f, r24	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    2a0c:	df 91       	pop	r29
    2a0e:	cf 91       	pop	r28
    2a10:	1f 91       	pop	r17
    2a12:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    2a14:	de 2b       	or	r29, r30
    2a16:	f8 cf       	rjmp	.-16     	; 0x2a08 <digitalWrite+0x4c>

00002a18 <digitalRead>:
digitalRead():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    2a18:	cf 93       	push	r28
    2a1a:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    2a1c:	28 2f       	mov	r18, r24
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	f9 01       	movw	r30, r18
    2a22:	ee 5e       	subi	r30, 0xEE	; 238
    2a24:	fe 4f       	sbci	r31, 0xFE	; 254
    2a26:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    2a28:	f9 01       	movw	r30, r18
    2a2a:	ee 5c       	subi	r30, 0xCE	; 206
    2a2c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a2e:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    2a30:	f9 01       	movw	r30, r18
    2a32:	ee 5a       	subi	r30, 0xAE	; 174
    2a34:	fe 4f       	sbci	r31, 0xFE	; 254
    2a36:	c4 91       	lpm	r28, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    2a38:	cc 23       	and	r28, r28
    2a3a:	a1 f0       	breq	.+40     	; 0x2a64 <digitalRead+0x4c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2a3c:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    2a3e:	0e 94 6a 14 	call	0x28d4	; 0x28d4 <turnOffPWM>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    2a42:	ec 2f       	mov	r30, r28
    2a44:	f0 e0       	ldi	r31, 0x00	; 0
    2a46:	ee 0f       	add	r30, r30
    2a48:	ff 1f       	adc	r31, r31
    2a4a:	ee 58       	subi	r30, 0x8E	; 142
    2a4c:	fe 4f       	sbci	r31, 0xFE	; 254
    2a4e:	a5 91       	lpm	r26, Z+
    2a50:	b4 91       	lpm	r27, Z
    2a52:	ec 91       	ld	r30, X
    2a54:	ed 23       	and	r30, r29
    2a56:	81 e0       	ldi	r24, 0x01	; 1
    2a58:	90 e0       	ldi	r25, 0x00	; 0
    2a5a:	09 f4       	brne	.+2      	; 0x2a5e <digitalRead+0x46>
    2a5c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    2a5e:	df 91       	pop	r29
    2a60:	cf 91       	pop	r28
    2a62:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    2a64:	80 e0       	ldi	r24, 0x00	; 0
    2a66:	90 e0       	ldi	r25, 0x00	; 0
    2a68:	fa cf       	rjmp	.-12     	; 0x2a5e <digitalRead+0x46>

00002a6a <shiftOut>:
shiftOut():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:41
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    2a6a:	bf 92       	push	r11
    2a6c:	cf 92       	push	r12
    2a6e:	df 92       	push	r13
    2a70:	ef 92       	push	r14
    2a72:	ff 92       	push	r15
    2a74:	0f 93       	push	r16
    2a76:	1f 93       	push	r17
    2a78:	cf 93       	push	r28
    2a7a:	df 93       	push	r29
    2a7c:	c8 2e       	mov	r12, r24
    2a7e:	d6 2e       	mov	r13, r22
    2a80:	b4 2e       	mov	r11, r20
    2a82:	d0 e0       	ldi	r29, 0x00	; 0
    2a84:	c0 e0       	ldi	r28, 0x00	; 0
    2a86:	02 2f       	mov	r16, r18
    2a88:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:48

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    2a8a:	87 e0       	ldi	r24, 0x07	; 7
    2a8c:	e8 2e       	mov	r14, r24
    2a8e:	f1 2c       	mov	r15, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:46
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    2a90:	b8 01       	movw	r22, r16
    2a92:	8c 2f       	mov	r24, r28
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:45
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
    2a94:	bb 20       	and	r11, r11
    2a96:	19 f0       	breq	.+6      	; 0x2a9e <shiftOut+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:48
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    2a98:	c7 01       	movw	r24, r14
    2a9a:	8c 1b       	sub	r24, r28
    2a9c:	9d 0b       	sbc	r25, r29
    2a9e:	02 c0       	rjmp	.+4      	; 0x2aa4 <shiftOut+0x3a>
    2aa0:	75 95       	asr	r23
    2aa2:	67 95       	ror	r22
    2aa4:	8a 95       	dec	r24
    2aa6:	e2 f7       	brpl	.-8      	; 0x2aa0 <shiftOut+0x36>
    2aa8:	61 70       	andi	r22, 0x01	; 1
    2aaa:	8c 2d       	mov	r24, r12
    2aac:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:50
      
    digitalWrite(clockPin, HIGH);
    2ab0:	61 e0       	ldi	r22, 0x01	; 1
    2ab2:	8d 2d       	mov	r24, r13
    2ab4:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:51
    digitalWrite(clockPin, LOW);    
    2ab8:	60 e0       	ldi	r22, 0x00	; 0
    2aba:	8d 2d       	mov	r24, r13
    2abc:	0e 94 de 14 	call	0x29bc	; 0x29bc <digitalWrite>
    2ac0:	21 96       	adiw	r28, 0x01	; 1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:44

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    2ac2:	c8 30       	cpi	r28, 0x08	; 8
    2ac4:	d1 05       	cpc	r29, r1
    2ac6:	21 f7       	brne	.-56     	; 0x2a90 <shiftOut+0x26>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:53
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
      
    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);    
  }
}
    2ac8:	df 91       	pop	r29
    2aca:	cf 91       	pop	r28
    2acc:	1f 91       	pop	r17
    2ace:	0f 91       	pop	r16
    2ad0:	ff 90       	pop	r15
    2ad2:	ef 90       	pop	r14
    2ad4:	df 90       	pop	r13
    2ad6:	cf 90       	pop	r12
    2ad8:	bf 90       	pop	r11
    2ada:	08 95       	ret

00002adc <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    2adc:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2ade:	91 8d       	ldd	r25, Z+25	; 0x19
    2ae0:	22 8d       	ldd	r18, Z+26	; 0x1a
    2ae2:	89 2f       	mov	r24, r25
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	80 5c       	subi	r24, 0xC0	; 192
    2ae8:	9f 4f       	sbci	r25, 0xFF	; 255
    2aea:	82 1b       	sub	r24, r18
    2aec:	91 09       	sbc	r25, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    2aee:	8f 73       	andi	r24, 0x3F	; 63
    2af0:	99 27       	eor	r25, r25
    2af2:	08 95       	ret

00002af4 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    2af4:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    2af6:	91 8d       	ldd	r25, Z+25	; 0x19
    2af8:	82 8d       	ldd	r24, Z+26	; 0x1a
    2afa:	98 17       	cp	r25, r24
    2afc:	31 f0       	breq	.+12     	; 0x2b0a <HardwareSerial::peek()+0x16>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2afe:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b00:	e8 0f       	add	r30, r24
    2b02:	f1 1d       	adc	r31, r1
    2b04:	85 8d       	ldd	r24, Z+29	; 0x1d
    2b06:	90 e0       	ldi	r25, 0x00	; 0
    2b08:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2b0a:	8f ef       	ldi	r24, 0xFF	; 255
    2b0c:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2b0e:	08 95       	ret

00002b10 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    2b10:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2b12:	91 8d       	ldd	r25, Z+25	; 0x19
    2b14:	82 8d       	ldd	r24, Z+26	; 0x1a
    2b16:	98 17       	cp	r25, r24
    2b18:	61 f0       	breq	.+24     	; 0x2b32 <HardwareSerial::read()+0x22>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    2b1a:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2b1c:	ae 0f       	add	r26, r30
    2b1e:	bf 2f       	mov	r27, r31
    2b20:	b1 1d       	adc	r27, r1
    2b22:	5d 96       	adiw	r26, 0x1d	; 29
    2b24:	8c 91       	ld	r24, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2b26:	92 8d       	ldd	r25, Z+26	; 0x1a
    2b28:	9f 5f       	subi	r25, 0xFF	; 255
    2b2a:	9f 73       	andi	r25, 0x3F	; 63
    2b2c:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    2b2e:	90 e0       	ldi	r25, 0x00	; 0
    2b30:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2b32:	8f ef       	ldi	r24, 0xFF	; 255
    2b34:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2b36:	08 95       	ret

00002b38 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    2b38:	fc 01       	movw	r30, r24
    2b3a:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    2b3c:	44 8d       	ldd	r20, Z+28	; 0x1c
    2b3e:	25 2f       	mov	r18, r21
    2b40:	30 e0       	ldi	r19, 0x00	; 0
    2b42:	84 2f       	mov	r24, r20
    2b44:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    2b46:	82 1b       	sub	r24, r18
    2b48:	93 0b       	sbc	r25, r19
    2b4a:	54 17       	cp	r21, r20
    2b4c:	10 f0       	brcs	.+4      	; 0x2b52 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    2b4e:	cf 96       	adiw	r24, 0x3f	; 63
    2b50:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    2b52:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    2b54:	08 95       	ret

00002b56 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    2b56:	86 e0       	ldi	r24, 0x06	; 6
    2b58:	97 e1       	ldi	r25, 0x17	; 23
    2b5a:	89 2b       	or	r24, r25
    2b5c:	49 f0       	breq	.+18     	; 0x2b70 <serialEventRun()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    2b5e:	80 e0       	ldi	r24, 0x00	; 0
    2b60:	90 e0       	ldi	r25, 0x00	; 0
    2b62:	89 2b       	or	r24, r25
    2b64:	29 f0       	breq	.+10     	; 0x2b70 <serialEventRun()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    2b66:	0e 94 06 17 	call	0x2e0c	; 0x2e0c <Serial0_available()>
    2b6a:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    2b6c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    2b70:	80 e0       	ldi	r24, 0x00	; 0
    2b72:	90 e0       	ldi	r25, 0x00	; 0
    2b74:	89 2b       	or	r24, r25
    2b76:	49 f0       	breq	.+18     	; 0x2b8a <serialEventRun()+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	90 e0       	ldi	r25, 0x00	; 0
    2b7c:	89 2b       	or	r24, r25
    2b7e:	29 f0       	breq	.+10     	; 0x2b8a <serialEventRun()+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    2b80:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    2b84:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    2b86:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    2b8a:	08 95       	ret

00002b8c <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    2b8c:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    2b8e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    2b90:	a8 0f       	add	r26, r24
    2b92:	b9 2f       	mov	r27, r25
    2b94:	b1 1d       	adc	r27, r1
    2b96:	a3 5a       	subi	r26, 0xA3	; 163
    2b98:	bf 4f       	sbci	r27, 0xFF	; 255
    2b9a:	2c 91       	ld	r18, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    2b9c:	84 8d       	ldd	r24, Z+28	; 0x1c
    2b9e:	90 e0       	ldi	r25, 0x00	; 0
    2ba0:	01 96       	adiw	r24, 0x01	; 1
    2ba2:	8f 73       	andi	r24, 0x3F	; 63
    2ba4:	99 27       	eor	r25, r25
    2ba6:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    2ba8:	a6 89       	ldd	r26, Z+22	; 0x16
    2baa:	b7 89       	ldd	r27, Z+23	; 0x17
    2bac:	2c 93       	st	X, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    2bae:	a0 89       	ldd	r26, Z+16	; 0x10
    2bb0:	b1 89       	ldd	r27, Z+17	; 0x11
    2bb2:	8c 91       	ld	r24, X
    2bb4:	80 64       	ori	r24, 0x40	; 64
    2bb6:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    2bb8:	93 8d       	ldd	r25, Z+27	; 0x1b
    2bba:	84 8d       	ldd	r24, Z+28	; 0x1c
    2bbc:	98 13       	cpse	r25, r24
    2bbe:	06 c0       	rjmp	.+12     	; 0x2bcc <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    2bc0:	02 88       	ldd	r0, Z+18	; 0x12
    2bc2:	f3 89       	ldd	r31, Z+19	; 0x13
    2bc4:	e0 2d       	mov	r30, r0
    2bc6:	80 81       	ld	r24, Z
    2bc8:	8f 7d       	andi	r24, 0xDF	; 223
    2bca:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    2bcc:	08 95       	ret

00002bce <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2bce:	cf 93       	push	r28
    2bd0:	df 93       	push	r29
    2bd2:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2bd4:	88 8d       	ldd	r24, Y+24	; 0x18
    2bd6:	88 23       	and	r24, r24
    2bd8:	b9 f0       	breq	.+46     	; 0x2c08 <HardwareSerial::flush()+0x3a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    2bda:	aa 89       	ldd	r26, Y+18	; 0x12
    2bdc:	bb 89       	ldd	r27, Y+19	; 0x13
    2bde:	e8 89       	ldd	r30, Y+16	; 0x10
    2be0:	f9 89       	ldd	r31, Y+17	; 0x11
    2be2:	8c 91       	ld	r24, X
    2be4:	85 fd       	sbrc	r24, 5
    2be6:	03 c0       	rjmp	.+6      	; 0x2bee <HardwareSerial::flush()+0x20>
    2be8:	80 81       	ld	r24, Z
    2bea:	86 fd       	sbrc	r24, 6
    2bec:	0d c0       	rjmp	.+26     	; 0x2c08 <HardwareSerial::flush()+0x3a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2bee:	0f b6       	in	r0, 0x3f	; 63
    2bf0:	07 fc       	sbrc	r0, 7
    2bf2:	f7 cf       	rjmp	.-18     	; 0x2be2 <HardwareSerial::flush()+0x14>
    2bf4:	8c 91       	ld	r24, X
    2bf6:	85 ff       	sbrs	r24, 5
    2bf8:	f2 cf       	rjmp	.-28     	; 0x2bde <HardwareSerial::flush()+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    2bfa:	80 81       	ld	r24, Z
    2bfc:	85 ff       	sbrs	r24, 5
    2bfe:	ed cf       	rjmp	.-38     	; 0x2bda <HardwareSerial::flush()+0xc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    2c00:	ce 01       	movw	r24, r28
    2c02:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HardwareSerial::_tx_udr_empty_irq()>
    2c06:	e9 cf       	rjmp	.-46     	; 0x2bda <HardwareSerial::flush()+0xc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    2c08:	df 91       	pop	r29
    2c0a:	cf 91       	pop	r28
    2c0c:	08 95       	ret

00002c0e <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    2c0e:	ef 92       	push	r14
    2c10:	ff 92       	push	r15
    2c12:	0f 93       	push	r16
    2c14:	1f 93       	push	r17
    2c16:	cf 93       	push	r28
    2c18:	df 93       	push	r29
    2c1a:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    2c1c:	81 e0       	ldi	r24, 0x01	; 1
    2c1e:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2c20:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2c22:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c24:	98 13       	cpse	r25, r24
    2c26:	16 c0       	rjmp	.+44     	; 0x2c54 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    2c28:	e8 89       	ldd	r30, Y+16	; 0x10
    2c2a:	f9 89       	ldd	r31, Y+17	; 0x11
    2c2c:	80 81       	ld	r24, Z
    2c2e:	85 ff       	sbrs	r24, 5
    2c30:	11 c0       	rjmp	.+34     	; 0x2c54 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    2c32:	ee 89       	ldd	r30, Y+22	; 0x16
    2c34:	ff 89       	ldd	r31, Y+23	; 0x17
    2c36:	60 83       	st	Z, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    2c38:	e8 89       	ldd	r30, Y+16	; 0x10
    2c3a:	f9 89       	ldd	r31, Y+17	; 0x11
    2c3c:	80 81       	ld	r24, Z
    2c3e:	80 64       	ori	r24, 0x40	; 64
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    2c40:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    2c42:	81 e0       	ldi	r24, 0x01	; 1
    2c44:	90 e0       	ldi	r25, 0x00	; 0
    2c46:	df 91       	pop	r29
    2c48:	cf 91       	pop	r28
    2c4a:	1f 91       	pop	r17
    2c4c:	0f 91       	pop	r16
    2c4e:	ff 90       	pop	r15
    2c50:	ef 90       	pop	r14
    2c52:	08 95       	ret
    2c54:	f6 2e       	mov	r15, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    2c56:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2c58:	10 e0       	ldi	r17, 0x00	; 0
    2c5a:	0f 5f       	subi	r16, 0xFF	; 255
    2c5c:	1f 4f       	sbci	r17, 0xFF	; 255
    2c5e:	0f 73       	andi	r16, 0x3F	; 63
    2c60:	11 27       	eor	r17, r17
    2c62:	e0 2e       	mov	r14, r16
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    2c64:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2c66:	8e 11       	cpse	r24, r14
    2c68:	0c c0       	rjmp	.+24     	; 0x2c82 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    2c6a:	0f b6       	in	r0, 0x3f	; 63
    2c6c:	07 fc       	sbrc	r0, 7
    2c6e:	fa cf       	rjmp	.-12     	; 0x2c64 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    2c70:	e8 89       	ldd	r30, Y+16	; 0x10
    2c72:	f9 89       	ldd	r31, Y+17	; 0x11
    2c74:	80 81       	ld	r24, Z
    2c76:	85 ff       	sbrs	r24, 5
    2c78:	f5 cf       	rjmp	.-22     	; 0x2c64 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    2c7a:	ce 01       	movw	r24, r28
    2c7c:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HardwareSerial::_tx_udr_empty_irq()>
    2c80:	f1 cf       	rjmp	.-30     	; 0x2c64 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    2c82:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2c84:	ec 0f       	add	r30, r28
    2c86:	fd 2f       	mov	r31, r29
    2c88:	f1 1d       	adc	r31, r1
    2c8a:	e3 5a       	subi	r30, 0xA3	; 163
    2c8c:	ff 4f       	sbci	r31, 0xFF	; 255
    2c8e:	f0 82       	st	Z, r15
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    2c90:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    2c92:	ea 89       	ldd	r30, Y+18	; 0x12
    2c94:	fb 89       	ldd	r31, Y+19	; 0x13
    2c96:	80 81       	ld	r24, Z
    2c98:	80 62       	ori	r24, 0x20	; 32
    2c9a:	d2 cf       	rjmp	.-92     	; 0x2c40 <HardwareSerial::write(unsigned char)+0x32>

00002c9c <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    2c9c:	cf 92       	push	r12
    2c9e:	df 92       	push	r13
    2ca0:	ef 92       	push	r14
    2ca2:	ff 92       	push	r15
    2ca4:	1f 93       	push	r17
    2ca6:	cf 93       	push	r28
    2ca8:	df 93       	push	r29
    2caa:	ec 01       	movw	r28, r24
    2cac:	6a 01       	movw	r12, r20
    2cae:	7b 01       	movw	r14, r22
    2cb0:	12 2f       	mov	r17, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2cb2:	e8 89       	ldd	r30, Y+16	; 0x10
    2cb4:	f9 89       	ldd	r31, Y+17	; 0x11
    2cb6:	82 e0       	ldi	r24, 0x02	; 2
    2cb8:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2cba:	c1 14       	cp	r12, r1
    2cbc:	81 ee       	ldi	r24, 0xE1	; 225
    2cbe:	d8 06       	cpc	r13, r24
    2cc0:	e1 04       	cpc	r14, r1
    2cc2:	f1 04       	cpc	r15, r1
    2cc4:	a1 f0       	breq	.+40     	; 0x2cee <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2cc6:	60 e0       	ldi	r22, 0x00	; 0
    2cc8:	79 e0       	ldi	r23, 0x09	; 9
    2cca:	8d e3       	ldi	r24, 0x3D	; 61
    2ccc:	90 e0       	ldi	r25, 0x00	; 0
    2cce:	a7 01       	movw	r20, r14
    2cd0:	96 01       	movw	r18, r12
    2cd2:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
    2cd6:	21 50       	subi	r18, 0x01	; 1
    2cd8:	31 09       	sbc	r19, r1
    2cda:	41 09       	sbc	r20, r1
    2cdc:	51 09       	sbc	r21, r1
    2cde:	56 95       	lsr	r21
    2ce0:	47 95       	ror	r20
    2ce2:	37 95       	ror	r19
    2ce4:	27 95       	ror	r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2ce6:	21 15       	cp	r18, r1
    2ce8:	80 e1       	ldi	r24, 0x10	; 16
    2cea:	38 07       	cpc	r19, r24
    2cec:	98 f0       	brcs	.+38     	; 0x2d14 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    2cee:	e8 89       	ldd	r30, Y+16	; 0x10
    2cf0:	f9 89       	ldd	r31, Y+17	; 0x11
    2cf2:	10 82       	st	Z, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2cf4:	60 e8       	ldi	r22, 0x80	; 128
    2cf6:	74 e8       	ldi	r23, 0x84	; 132
    2cf8:	8e e1       	ldi	r24, 0x1E	; 30
    2cfa:	90 e0       	ldi	r25, 0x00	; 0
    2cfc:	a7 01       	movw	r20, r14
    2cfe:	96 01       	movw	r18, r12
    2d00:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
    2d04:	21 50       	subi	r18, 0x01	; 1
    2d06:	31 09       	sbc	r19, r1
    2d08:	41 09       	sbc	r20, r1
    2d0a:	51 09       	sbc	r21, r1
    2d0c:	56 95       	lsr	r21
    2d0e:	47 95       	ror	r20
    2d10:	37 95       	ror	r19
    2d12:	27 95       	ror	r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2d14:	ec 85       	ldd	r30, Y+12	; 0x0c
    2d16:	fd 85       	ldd	r31, Y+13	; 0x0d
    2d18:	30 83       	st	Z, r19
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    2d1a:	ee 85       	ldd	r30, Y+14	; 0x0e
    2d1c:	ff 85       	ldd	r31, Y+15	; 0x0f
    2d1e:	20 83       	st	Z, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    2d20:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2d22:	ec 89       	ldd	r30, Y+20	; 0x14
    2d24:	fd 89       	ldd	r31, Y+21	; 0x15
    2d26:	10 83       	st	Z, r17
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    2d28:	ea 89       	ldd	r30, Y+18	; 0x12
    2d2a:	fb 89       	ldd	r31, Y+19	; 0x13
    2d2c:	80 81       	ld	r24, Z
    2d2e:	88 69       	ori	r24, 0x98	; 152
    2d30:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    2d32:	ea 89       	ldd	r30, Y+18	; 0x12
    2d34:	fb 89       	ldd	r31, Y+19	; 0x13
    2d36:	80 81       	ld	r24, Z
    2d38:	8f 7d       	andi	r24, 0xDF	; 223
    2d3a:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    2d3c:	df 91       	pop	r29
    2d3e:	cf 91       	pop	r28
    2d40:	1f 91       	pop	r17
    2d42:	ff 90       	pop	r15
    2d44:	ef 90       	pop	r14
    2d46:	df 90       	pop	r13
    2d48:	cf 90       	pop	r12
    2d4a:	08 95       	ret

00002d4c <__vector_20>:
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    2d4c:	1f 92       	push	r1
    2d4e:	0f 92       	push	r0
    2d50:	0f b6       	in	r0, 0x3f	; 63
    2d52:	0f 92       	push	r0
    2d54:	11 24       	eor	r1, r1
    2d56:	0b b6       	in	r0, 0x3b	; 59
    2d58:	0f 92       	push	r0
    2d5a:	2f 93       	push	r18
    2d5c:	8f 93       	push	r24
    2d5e:	9f 93       	push	r25
    2d60:	ef 93       	push	r30
    2d62:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    2d64:	e0 91 b6 05 	lds	r30, 0x05B6	; 0x8005b6 <Serial+0x10>
    2d68:	f0 91 b7 05 	lds	r31, 0x05B7	; 0x8005b7 <Serial+0x11>
    2d6c:	80 81       	ld	r24, Z
    2d6e:	e0 91 bc 05 	lds	r30, 0x05BC	; 0x8005bc <Serial+0x16>
    2d72:	f0 91 bd 05 	lds	r31, 0x05BD	; 0x8005bd <Serial+0x17>
    2d76:	82 fd       	sbrc	r24, 2
    2d78:	1d c0       	rjmp	.+58     	; 0x2db4 <__vector_20+0x68>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    2d7a:	90 81       	ld	r25, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    2d7c:	80 91 bf 05 	lds	r24, 0x05BF	; 0x8005bf <Serial+0x19>
    2d80:	8f 5f       	subi	r24, 0xFF	; 255
    2d82:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    2d84:	20 91 c0 05 	lds	r18, 0x05C0	; 0x8005c0 <Serial+0x1a>
    2d88:	82 17       	cp	r24, r18
    2d8a:	41 f0       	breq	.+16     	; 0x2d9c <__vector_20+0x50>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    2d8c:	e0 91 bf 05 	lds	r30, 0x05BF	; 0x8005bf <Serial+0x19>
    2d90:	f0 e0       	ldi	r31, 0x00	; 0
    2d92:	ea 55       	subi	r30, 0x5A	; 90
    2d94:	fa 4f       	sbci	r31, 0xFA	; 250
    2d96:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    2d98:	80 93 bf 05 	sts	0x05BF, r24	; 0x8005bf <Serial+0x19>
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    2d9c:	ff 91       	pop	r31
    2d9e:	ef 91       	pop	r30
    2da0:	9f 91       	pop	r25
    2da2:	8f 91       	pop	r24
    2da4:	2f 91       	pop	r18
    2da6:	0f 90       	pop	r0
    2da8:	0b be       	out	0x3b, r0	; 59
    2daa:	0f 90       	pop	r0
    2dac:	0f be       	out	0x3f, r0	; 63
    2dae:	0f 90       	pop	r0
    2db0:	1f 90       	pop	r1
    2db2:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2db4:	80 81       	ld	r24, Z
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    2db6:	f2 cf       	rjmp	.-28     	; 0x2d9c <__vector_20+0x50>

00002db8 <__vector_21>:
__vector_21():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    2db8:	1f 92       	push	r1
    2dba:	0f 92       	push	r0
    2dbc:	0f b6       	in	r0, 0x3f	; 63
    2dbe:	0f 92       	push	r0
    2dc0:	11 24       	eor	r1, r1
    2dc2:	0b b6       	in	r0, 0x3b	; 59
    2dc4:	0f 92       	push	r0
    2dc6:	2f 93       	push	r18
    2dc8:	3f 93       	push	r19
    2dca:	4f 93       	push	r20
    2dcc:	5f 93       	push	r21
    2dce:	6f 93       	push	r22
    2dd0:	7f 93       	push	r23
    2dd2:	8f 93       	push	r24
    2dd4:	9f 93       	push	r25
    2dd6:	af 93       	push	r26
    2dd8:	bf 93       	push	r27
    2dda:	ef 93       	push	r30
    2ddc:	ff 93       	push	r31
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    2dde:	86 ea       	ldi	r24, 0xA6	; 166
    2de0:	95 e0       	ldi	r25, 0x05	; 5
    2de2:	0e 94 c6 15 	call	0x2b8c	; 0x2b8c <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    2de6:	ff 91       	pop	r31
    2de8:	ef 91       	pop	r30
    2dea:	bf 91       	pop	r27
    2dec:	af 91       	pop	r26
    2dee:	9f 91       	pop	r25
    2df0:	8f 91       	pop	r24
    2df2:	7f 91       	pop	r23
    2df4:	6f 91       	pop	r22
    2df6:	5f 91       	pop	r21
    2df8:	4f 91       	pop	r20
    2dfa:	3f 91       	pop	r19
    2dfc:	2f 91       	pop	r18
    2dfe:	0f 90       	pop	r0
    2e00:	0b be       	out	0x3b, r0	; 59
    2e02:	0f 90       	pop	r0
    2e04:	0f be       	out	0x3f, r0	; 63
    2e06:	0f 90       	pop	r0
    2e08:	1f 90       	pop	r1
    2e0a:	18 95       	reti

00002e0c <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    2e0c:	86 ea       	ldi	r24, 0xA6	; 166
    2e0e:	95 e0       	ldi	r25, 0x05	; 5
    2e10:	0e 94 6e 15 	call	0x2adc	; 0x2adc <HardwareSerial::available()>
    2e14:	21 e0       	ldi	r18, 0x01	; 1
    2e16:	89 2b       	or	r24, r25
    2e18:	09 f4       	brne	.+2      	; 0x2e1c <Serial0_available()+0x10>
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    2e1c:	82 2f       	mov	r24, r18
    2e1e:	08 95       	ret

00002e20 <_GLOBAL__sub_I___vector_20>:
_ZN5PrintC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    2e20:	e6 ea       	ldi	r30, 0xA6	; 166
    2e22:	f5 e0       	ldi	r31, 0x05	; 5
    2e24:	13 82       	std	Z+3, r1	; 0x03
    2e26:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
    2e28:	88 ee       	ldi	r24, 0xE8	; 232
    2e2a:	93 e0       	ldi	r25, 0x03	; 3
    2e2c:	a0 e0       	ldi	r26, 0x00	; 0
    2e2e:	b0 e0       	ldi	r27, 0x00	; 0
    2e30:	84 83       	std	Z+4, r24	; 0x04
    2e32:	95 83       	std	Z+5, r25	; 0x05
    2e34:	a6 83       	std	Z+6, r26	; 0x06
    2e36:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    2e38:	8a ec       	ldi	r24, 0xCA	; 202
    2e3a:	93 e0       	ldi	r25, 0x03	; 3
    2e3c:	91 83       	std	Z+1, r25	; 0x01
    2e3e:	80 83       	st	Z, r24
    2e40:	85 ec       	ldi	r24, 0xC5	; 197
    2e42:	90 e0       	ldi	r25, 0x00	; 0
    2e44:	95 87       	std	Z+13, r25	; 0x0d
    2e46:	84 87       	std	Z+12, r24	; 0x0c
    2e48:	84 ec       	ldi	r24, 0xC4	; 196
    2e4a:	90 e0       	ldi	r25, 0x00	; 0
    2e4c:	97 87       	std	Z+15, r25	; 0x0f
    2e4e:	86 87       	std	Z+14, r24	; 0x0e
    2e50:	80 ec       	ldi	r24, 0xC0	; 192
    2e52:	90 e0       	ldi	r25, 0x00	; 0
    2e54:	91 8b       	std	Z+17, r25	; 0x11
    2e56:	80 8b       	std	Z+16, r24	; 0x10
    2e58:	81 ec       	ldi	r24, 0xC1	; 193
    2e5a:	90 e0       	ldi	r25, 0x00	; 0
    2e5c:	93 8b       	std	Z+19, r25	; 0x13
    2e5e:	82 8b       	std	Z+18, r24	; 0x12
    2e60:	82 ec       	ldi	r24, 0xC2	; 194
    2e62:	90 e0       	ldi	r25, 0x00	; 0
    2e64:	95 8b       	std	Z+21, r25	; 0x15
    2e66:	84 8b       	std	Z+20, r24	; 0x14
    2e68:	86 ec       	ldi	r24, 0xC6	; 198
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	97 8b       	std	Z+23, r25	; 0x17
    2e6e:	86 8b       	std	Z+22, r24	; 0x16
    2e70:	11 8e       	std	Z+25, r1	; 0x19
    2e72:	12 8e       	std	Z+26, r1	; 0x1a
    2e74:	13 8e       	std	Z+27, r1	; 0x1b
    2e76:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    2e78:	08 95       	ret

00002e7a <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:171
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    2e7a:	af 92       	push	r10
    2e7c:	bf 92       	push	r11
    2e7e:	cf 92       	push	r12
    2e80:	df 92       	push	r13
    2e82:	ef 92       	push	r14
    2e84:	ff 92       	push	r15
    2e86:	0f 93       	push	r16
    2e88:	1f 93       	push	r17
    2e8a:	cf 93       	push	r28
    2e8c:	df 93       	push	r29
    2e8e:	6c 01       	movw	r12, r24
    2e90:	7b 01       	movw	r14, r22
    2e92:	8b 01       	movw	r16, r22
    2e94:	04 0f       	add	r16, r20
    2e96:	15 1f       	adc	r17, r21
    2e98:	eb 01       	movw	r28, r22
    2e9a:	5e 01       	movw	r10, r28
    2e9c:	ae 18       	sub	r10, r14
    2e9e:	bf 08       	sbc	r11, r15
    2ea0:	c0 17       	cp	r28, r16
    2ea2:	d1 07       	cpc	r29, r17
    2ea4:	59 f0       	breq	.+22     	; 0x2ebc <Print::write(unsigned char const*, unsigned int)+0x42>
    2ea6:	69 91       	ld	r22, Y+
    2ea8:	d6 01       	movw	r26, r12
    2eaa:	ed 91       	ld	r30, X+
    2eac:	fc 91       	ld	r31, X
    2eae:	01 90       	ld	r0, Z+
    2eb0:	f0 81       	ld	r31, Z
    2eb2:	e0 2d       	mov	r30, r0
    2eb4:	c6 01       	movw	r24, r12
    2eb6:	09 95       	icall
    2eb8:	89 2b       	or	r24, r25
    2eba:	79 f7       	brne	.-34     	; 0x2e9a <Print::write(unsigned char const*, unsigned int)+0x20>
    2ebc:	c5 01       	movw	r24, r10
    2ebe:	df 91       	pop	r29
    2ec0:	cf 91       	pop	r28
    2ec2:	1f 91       	pop	r17
    2ec4:	0f 91       	pop	r16
    2ec6:	ff 90       	pop	r15
    2ec8:	ef 90       	pop	r14
    2eca:	df 90       	pop	r13
    2ecc:	cf 90       	pop	r12
    2ece:	bf 90       	pop	r11
    2ed0:	af 90       	pop	r10
    2ed2:	08 95       	ret

00002ed4 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    2ed4:	fb 01       	movw	r30, r22
    2ed6:	01 90       	ld	r0, Z+
    2ed8:	00 20       	and	r0, r0
    2eda:	e9 f7       	brne	.-6      	; 0x2ed6 <Print::write(char const*) [clone .part.2]+0x2>
    2edc:	31 97       	sbiw	r30, 0x01	; 1
    2ede:	af 01       	movw	r20, r30
    2ee0:	46 1b       	sub	r20, r22
    2ee2:	57 0b       	sbc	r21, r23
    2ee4:	dc 01       	movw	r26, r24
    2ee6:	ed 91       	ld	r30, X+
    2ee8:	fc 91       	ld	r31, X
    2eea:	02 80       	ldd	r0, Z+2	; 0x02
    2eec:	f3 81       	ldd	r31, Z+3	; 0x03
    2eee:	e0 2d       	mov	r30, r0
    2ef0:	09 94       	ijmp

00002ef2 <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    2ef2:	ef 92       	push	r14
    2ef4:	ff 92       	push	r15
    2ef6:	0f 93       	push	r16
    2ef8:	1f 93       	push	r17
    2efa:	cf 93       	push	r28
    2efc:	df 93       	push	r29
    2efe:	8c 01       	movw	r16, r24
    2f00:	7b 01       	movw	r14, r22
    2f02:	d0 e0       	ldi	r29, 0x00	; 0
    2f04:	c0 e0       	ldi	r28, 0x00	; 0
    2f06:	f7 01       	movw	r30, r14
    2f08:	ec 0f       	add	r30, r28
    2f0a:	fd 1f       	adc	r31, r29
    2f0c:	64 91       	lpm	r22, Z
    2f0e:	66 23       	and	r22, r22
    2f10:	61 f0       	breq	.+24     	; 0x2f2a <Print::print(__FlashStringHelper const*)+0x38>
    2f12:	d8 01       	movw	r26, r16
    2f14:	ed 91       	ld	r30, X+
    2f16:	fc 91       	ld	r31, X
    2f18:	01 90       	ld	r0, Z+
    2f1a:	f0 81       	ld	r31, Z
    2f1c:	e0 2d       	mov	r30, r0
    2f1e:	c8 01       	movw	r24, r16
    2f20:	09 95       	icall
    2f22:	89 2b       	or	r24, r25
    2f24:	11 f0       	breq	.+4      	; 0x2f2a <Print::print(__FlashStringHelper const*)+0x38>
    2f26:	21 96       	adiw	r28, 0x01	; 1
    2f28:	ee cf       	rjmp	.-36     	; 0x2f06 <Print::print(__FlashStringHelper const*)+0x14>
    2f2a:	ce 01       	movw	r24, r28
    2f2c:	df 91       	pop	r29
    2f2e:	cf 91       	pop	r28
    2f30:	1f 91       	pop	r17
    2f32:	0f 91       	pop	r16
    2f34:	ff 90       	pop	r15
    2f36:	ef 90       	pop	r14
    2f38:	08 95       	ret

00002f3a <Print::print(char const*)>:
_ZN5Print5writeEPKc():
    2f3a:	61 15       	cp	r22, r1
    2f3c:	71 05       	cpc	r23, r1
    2f3e:	11 f0       	breq	.+4      	; 0x2f44 <Print::print(char const*)+0xa>
    2f40:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    2f44:	90 e0       	ldi	r25, 0x00	; 0
    2f46:	80 e0       	ldi	r24, 0x00	; 0
    2f48:	08 95       	ret

00002f4a <Print::print(char)>:
_ZN5Print5printEc():
    2f4a:	dc 01       	movw	r26, r24
    2f4c:	ed 91       	ld	r30, X+
    2f4e:	fc 91       	ld	r31, X
    2f50:	01 90       	ld	r0, Z+
    2f52:	f0 81       	ld	r31, Z
    2f54:	e0 2d       	mov	r30, r0
    2f56:	09 94       	ijmp

00002f58 <Print::println()>:
_ZN5Print5writeEPKc():
    2f58:	68 ed       	ldi	r22, 0xD8	; 216
    2f5a:	73 e0       	ldi	r23, 0x03	; 3
    2f5c:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <Print::write(char const*) [clone .part.2]>

00002f60 <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
    2f60:	0f 93       	push	r16
    2f62:	1f 93       	push	r17
    2f64:	cf 93       	push	r28
    2f66:	df 93       	push	r29
    2f68:	ec 01       	movw	r28, r24
    2f6a:	0e 94 79 17 	call	0x2ef2	; 0x2ef2 <Print::print(__FlashStringHelper const*)>
    2f6e:	8c 01       	movw	r16, r24
    2f70:	ce 01       	movw	r24, r28
    2f72:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <Print::println()>
    2f76:	80 0f       	add	r24, r16
    2f78:	91 1f       	adc	r25, r17
    2f7a:	df 91       	pop	r29
    2f7c:	cf 91       	pop	r28
    2f7e:	1f 91       	pop	r17
    2f80:	0f 91       	pop	r16
    2f82:	08 95       	ret

00002f84 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    2f84:	0f 93       	push	r16
    2f86:	1f 93       	push	r17
    2f88:	cf 93       	push	r28
    2f8a:	df 93       	push	r29
    2f8c:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    2f8e:	d0 e0       	ldi	r29, 0x00	; 0
    2f90:	c0 e0       	ldi	r28, 0x00	; 0
    2f92:	61 15       	cp	r22, r1
    2f94:	71 05       	cpc	r23, r1
    2f96:	19 f0       	breq	.+6      	; 0x2f9e <Print::println(char const*)+0x1a>
    2f98:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <Print::write(char const*) [clone .part.2]>
    2f9c:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    2f9e:	c8 01       	movw	r24, r16
    2fa0:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <Print::println()>
    2fa4:	8c 0f       	add	r24, r28
    2fa6:	9d 1f       	adc	r25, r29
    2fa8:	df 91       	pop	r29
    2faa:	cf 91       	pop	r28
    2fac:	1f 91       	pop	r17
    2fae:	0f 91       	pop	r16
    2fb0:	08 95       	ret

00002fb2 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    2fb2:	8f 92       	push	r8
    2fb4:	9f 92       	push	r9
    2fb6:	af 92       	push	r10
    2fb8:	bf 92       	push	r11
    2fba:	ef 92       	push	r14
    2fbc:	ff 92       	push	r15
    2fbe:	0f 93       	push	r16
    2fc0:	1f 93       	push	r17
    2fc2:	cf 93       	push	r28
    2fc4:	df 93       	push	r29
    2fc6:	cd b7       	in	r28, 0x3d	; 61
    2fc8:	de b7       	in	r29, 0x3e	; 62
    2fca:	a1 97       	sbiw	r28, 0x21	; 33
    2fcc:	0f b6       	in	r0, 0x3f	; 63
    2fce:	f8 94       	cli
    2fd0:	de bf       	out	0x3e, r29	; 62
    2fd2:	0f be       	out	0x3f, r0	; 63
    2fd4:	cd bf       	out	0x3d, r28	; 61
    2fd6:	7c 01       	movw	r14, r24
    2fd8:	fa 01       	movw	r30, r20
    2fda:	cb 01       	movw	r24, r22
    2fdc:	19 a2       	std	Y+33, r1	; 0x21
    2fde:	22 30       	cpi	r18, 0x02	; 2
    2fe0:	08 f4       	brcc	.+2      	; 0x2fe4 <Print::printNumber(unsigned long, unsigned char)+0x32>
    2fe2:	2a e0       	ldi	r18, 0x0A	; 10
    2fe4:	8e 01       	movw	r16, r28
    2fe6:	0f 5d       	subi	r16, 0xDF	; 223
    2fe8:	1f 4f       	sbci	r17, 0xFF	; 255
    2fea:	82 2e       	mov	r8, r18
    2fec:	91 2c       	mov	r9, r1
    2fee:	b1 2c       	mov	r11, r1
    2ff0:	a1 2c       	mov	r10, r1
    2ff2:	bf 01       	movw	r22, r30
    2ff4:	a5 01       	movw	r20, r10
    2ff6:	94 01       	movw	r18, r8
    2ff8:	0e 94 0a 1c 	call	0x3814	; 0x3814 <__udivmodsi4>
    2ffc:	f9 01       	movw	r30, r18
    2ffe:	ca 01       	movw	r24, r20
    3000:	6a 30       	cpi	r22, 0x0A	; 10
    3002:	0c f5       	brge	.+66     	; 0x3046 <Print::printNumber(unsigned long, unsigned char)+0x94>
    3004:	60 5d       	subi	r22, 0xD0	; 208
    3006:	d8 01       	movw	r26, r16
    3008:	6e 93       	st	-X, r22
    300a:	8d 01       	movw	r16, r26
    300c:	23 2b       	or	r18, r19
    300e:	24 2b       	or	r18, r20
    3010:	25 2b       	or	r18, r21
    3012:	79 f7       	brne	.-34     	; 0x2ff2 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    3014:	90 e0       	ldi	r25, 0x00	; 0
    3016:	80 e0       	ldi	r24, 0x00	; 0
    3018:	10 97       	sbiw	r26, 0x00	; 0
    301a:	21 f0       	breq	.+8      	; 0x3024 <Print::printNumber(unsigned long, unsigned char)+0x72>
    301c:	bd 01       	movw	r22, r26
    301e:	c7 01       	movw	r24, r14
    3020:	0e 94 6a 17 	call	0x2ed4	; 0x2ed4 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    3024:	a1 96       	adiw	r28, 0x21	; 33
    3026:	0f b6       	in	r0, 0x3f	; 63
    3028:	f8 94       	cli
    302a:	de bf       	out	0x3e, r29	; 62
    302c:	0f be       	out	0x3f, r0	; 63
    302e:	cd bf       	out	0x3d, r28	; 61
    3030:	df 91       	pop	r29
    3032:	cf 91       	pop	r28
    3034:	1f 91       	pop	r17
    3036:	0f 91       	pop	r16
    3038:	ff 90       	pop	r15
    303a:	ef 90       	pop	r14
    303c:	bf 90       	pop	r11
    303e:	af 90       	pop	r10
    3040:	9f 90       	pop	r9
    3042:	8f 90       	pop	r8
    3044:	08 95       	ret
    3046:	69 5c       	subi	r22, 0xC9	; 201
    3048:	de cf       	rjmp	.-68     	; 0x3006 <Print::printNumber(unsigned long, unsigned char)+0x54>

0000304a <Print::print(long, int)>:
_ZN5Print5printEli():
    304a:	cf 92       	push	r12
    304c:	df 92       	push	r13
    304e:	ef 92       	push	r14
    3050:	ff 92       	push	r15
    3052:	0f 93       	push	r16
    3054:	1f 93       	push	r17
    3056:	cf 93       	push	r28
    3058:	df 93       	push	r29
    305a:	21 15       	cp	r18, r1
    305c:	31 05       	cpc	r19, r1
    305e:	81 f4       	brne	.+32     	; 0x3080 <Print::print(long, int)+0x36>
    3060:	dc 01       	movw	r26, r24
    3062:	ed 91       	ld	r30, X+
    3064:	fc 91       	ld	r31, X
    3066:	01 90       	ld	r0, Z+
    3068:	f0 81       	ld	r31, Z
    306a:	e0 2d       	mov	r30, r0
    306c:	64 2f       	mov	r22, r20
    306e:	df 91       	pop	r29
    3070:	cf 91       	pop	r28
    3072:	1f 91       	pop	r17
    3074:	0f 91       	pop	r16
    3076:	ff 90       	pop	r15
    3078:	ef 90       	pop	r14
    307a:	df 90       	pop	r13
    307c:	cf 90       	pop	r12
    307e:	09 94       	ijmp
    3080:	2a 30       	cpi	r18, 0x0A	; 10
    3082:	31 05       	cpc	r19, r1
    3084:	01 f5       	brne	.+64     	; 0x30c6 <Print::print(long, int)+0x7c>
    3086:	2a e0       	ldi	r18, 0x0A	; 10
    3088:	77 ff       	sbrs	r23, 7
    308a:	1d c0       	rjmp	.+58     	; 0x30c6 <Print::print(long, int)+0x7c>
    308c:	6a 01       	movw	r12, r20
    308e:	7b 01       	movw	r14, r22
    3090:	ec 01       	movw	r28, r24
    3092:	6d e2       	ldi	r22, 0x2D	; 45
    3094:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <Print::print(char)>
    3098:	8c 01       	movw	r16, r24
    309a:	44 27       	eor	r20, r20
    309c:	55 27       	eor	r21, r21
    309e:	ba 01       	movw	r22, r20
    30a0:	4c 19       	sub	r20, r12
    30a2:	5d 09       	sbc	r21, r13
    30a4:	6e 09       	sbc	r22, r14
    30a6:	7f 09       	sbc	r23, r15
    30a8:	2a e0       	ldi	r18, 0x0A	; 10
    30aa:	ce 01       	movw	r24, r28
    30ac:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <Print::printNumber(unsigned long, unsigned char)>
    30b0:	80 0f       	add	r24, r16
    30b2:	91 1f       	adc	r25, r17
    30b4:	df 91       	pop	r29
    30b6:	cf 91       	pop	r28
    30b8:	1f 91       	pop	r17
    30ba:	0f 91       	pop	r16
    30bc:	ff 90       	pop	r15
    30be:	ef 90       	pop	r14
    30c0:	df 90       	pop	r13
    30c2:	cf 90       	pop	r12
    30c4:	08 95       	ret
    30c6:	df 91       	pop	r29
    30c8:	cf 91       	pop	r28
    30ca:	1f 91       	pop	r17
    30cc:	0f 91       	pop	r16
    30ce:	ff 90       	pop	r15
    30d0:	ef 90       	pop	r14
    30d2:	df 90       	pop	r13
    30d4:	cf 90       	pop	r12
    30d6:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <Print::printNumber(unsigned long, unsigned char)>

000030da <Print::print(int, int)>:
_ZN5Print5printEii():
    30da:	9a 01       	movw	r18, r20
    30dc:	ab 01       	movw	r20, r22
    30de:	77 0f       	add	r23, r23
    30e0:	66 0b       	sbc	r22, r22
    30e2:	77 0b       	sbc	r23, r23
    30e4:	0c 94 25 18 	jmp	0x304a	; 0x304a <Print::print(long, int)>

000030e8 <Print::println(int, int)>:
_ZN5Print7printlnEii():
    30e8:	0f 93       	push	r16
    30ea:	1f 93       	push	r17
    30ec:	cf 93       	push	r28
    30ee:	df 93       	push	r29
    30f0:	ec 01       	movw	r28, r24
    30f2:	0e 94 6d 18 	call	0x30da	; 0x30da <Print::print(int, int)>
    30f6:	8c 01       	movw	r16, r24
    30f8:	ce 01       	movw	r24, r28
    30fa:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <Print::println()>
    30fe:	80 0f       	add	r24, r16
    3100:	91 1f       	adc	r25, r17
    3102:	df 91       	pop	r29
    3104:	cf 91       	pop	r28
    3106:	1f 91       	pop	r17
    3108:	0f 91       	pop	r16
    310a:	08 95       	ret

0000310c <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    310c:	21 15       	cp	r18, r1
    310e:	31 05       	cpc	r19, r1
    3110:	41 f4       	brne	.+16     	; 0x3122 <Print::print(unsigned long, int)+0x16>
    3112:	dc 01       	movw	r26, r24
    3114:	ed 91       	ld	r30, X+
    3116:	fc 91       	ld	r31, X
    3118:	01 90       	ld	r0, Z+
    311a:	f0 81       	ld	r31, Z
    311c:	e0 2d       	mov	r30, r0
    311e:	64 2f       	mov	r22, r20
    3120:	09 94       	ijmp
    3122:	0c 94 d9 17 	jmp	0x2fb2	; 0x2fb2 <Print::printNumber(unsigned long, unsigned char)>

00003126 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
    3126:	9a 01       	movw	r18, r20
    3128:	46 2f       	mov	r20, r22
    312a:	50 e0       	ldi	r21, 0x00	; 0
    312c:	70 e0       	ldi	r23, 0x00	; 0
    312e:	60 e0       	ldi	r22, 0x00	; 0
    3130:	0c 94 86 18 	jmp	0x310c	; 0x310c <Print::print(unsigned long, int)>

00003134 <Print::println(unsigned char, int)>:
_ZN5Print7printlnEhi():
    3134:	0f 93       	push	r16
    3136:	1f 93       	push	r17
    3138:	cf 93       	push	r28
    313a:	df 93       	push	r29
    313c:	ec 01       	movw	r28, r24
    313e:	0e 94 93 18 	call	0x3126	; 0x3126 <Print::print(unsigned char, int)>
    3142:	8c 01       	movw	r16, r24
    3144:	ce 01       	movw	r24, r28
    3146:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <Print::println()>
    314a:	80 0f       	add	r24, r16
    314c:	91 1f       	adc	r25, r17
    314e:	df 91       	pop	r29
    3150:	cf 91       	pop	r28
    3152:	1f 91       	pop	r17
    3154:	0f 91       	pop	r16
    3156:	08 95       	ret

00003158 <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
    3158:	9a 01       	movw	r18, r20
    315a:	ab 01       	movw	r20, r22
    315c:	70 e0       	ldi	r23, 0x00	; 0
    315e:	60 e0       	ldi	r22, 0x00	; 0
    3160:	0c 94 86 18 	jmp	0x310c	; 0x310c <Print::print(unsigned long, int)>

00003164 <Print::println(unsigned long, int)>:
_ZN5Print7printlnEmi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:181
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    3164:	0f 93       	push	r16
    3166:	1f 93       	push	r17
    3168:	cf 93       	push	r28
    316a:	df 93       	push	r29
    316c:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:182
  size_t n = print(num, base);
    316e:	0e 94 86 18 	call	0x310c	; 0x310c <Print::print(unsigned long, int)>
    3172:	8c 01       	movw	r16, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:183
  n += println();
    3174:	ce 01       	movw	r24, r28
    3176:	0e 94 ac 17 	call	0x2f58	; 0x2f58 <Print::println()>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
  return n;
}
    317a:	80 0f       	add	r24, r16
    317c:	91 1f       	adc	r25, r17
    317e:	df 91       	pop	r29
    3180:	cf 91       	pop	r28
    3182:	1f 91       	pop	r17
    3184:	0f 91       	pop	r16
    3186:	08 95       	ret

00003188 <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3188:	2f 92       	push	r2
    318a:	3f 92       	push	r3
    318c:	4f 92       	push	r4
    318e:	5f 92       	push	r5
    3190:	6f 92       	push	r6
    3192:	7f 92       	push	r7
    3194:	8f 92       	push	r8
    3196:	9f 92       	push	r9
    3198:	af 92       	push	r10
    319a:	bf 92       	push	r11
    319c:	cf 92       	push	r12
    319e:	df 92       	push	r13
    31a0:	ef 92       	push	r14
    31a2:	ff 92       	push	r15
    31a4:	1f 93       	push	r17
    31a6:	cf 93       	push	r28
    31a8:	df 93       	push	r29
    31aa:	ec 01       	movw	r28, r24
    31ac:	6a 01       	movw	r12, r20
    31ae:	7b 01       	movw	r14, r22
    31b0:	72 2e       	mov	r7, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    31b2:	ab 01       	movw	r20, r22
    31b4:	96 01       	movw	r18, r12
    31b6:	cb 01       	movw	r24, r22
    31b8:	b6 01       	movw	r22, r12
    31ba:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__unordsf2>
_ZN5Print5writeEPKc():
    31be:	6b ed       	ldi	r22, 0xDB	; 219
    31c0:	73 e0       	ldi	r23, 0x03	; 3
_ZN5Print10printFloatEdh():
    31c2:	81 11       	cpse	r24, r1
    31c4:	26 c0       	rjmp	.+76     	; 0x3212 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    31c6:	46 01       	movw	r8, r12
    31c8:	57 01       	movw	r10, r14
    31ca:	e8 94       	clt
    31cc:	b7 f8       	bld	r11, 7
    31ce:	2f ef       	ldi	r18, 0xFF	; 255
    31d0:	3f ef       	ldi	r19, 0xFF	; 255
    31d2:	4f e7       	ldi	r20, 0x7F	; 127
    31d4:	5f e7       	ldi	r21, 0x7F	; 127
    31d6:	c5 01       	movw	r24, r10
    31d8:	b4 01       	movw	r22, r8
    31da:	0e 94 f1 1b 	call	0x37e2	; 0x37e2 <__unordsf2>
    31de:	81 11       	cpse	r24, r1
    31e0:	0c c0       	rjmp	.+24     	; 0x31fa <Print::printFloat(double, unsigned char)+0x72>
    31e2:	2f ef       	ldi	r18, 0xFF	; 255
    31e4:	3f ef       	ldi	r19, 0xFF	; 255
    31e6:	4f e7       	ldi	r20, 0x7F	; 127
    31e8:	5f e7       	ldi	r21, 0x7F	; 127
    31ea:	c5 01       	movw	r24, r10
    31ec:	b4 01       	movw	r22, r8
    31ee:	0e 94 27 1a 	call	0x344e	; 0x344e <__cmpsf2>
_ZN5Print5writeEPKc():
    31f2:	6f ed       	ldi	r22, 0xDF	; 223
    31f4:	73 e0       	ldi	r23, 0x03	; 3
_ZN5Print10printFloatEdh():
    31f6:	18 16       	cp	r1, r24
    31f8:	64 f0       	brlt	.+24     	; 0x3212 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    31fa:	2f ef       	ldi	r18, 0xFF	; 255
    31fc:	3f ef       	ldi	r19, 0xFF	; 255
    31fe:	4f e7       	ldi	r20, 0x7F	; 127
    3200:	5f e4       	ldi	r21, 0x4F	; 79
    3202:	c7 01       	movw	r24, r14
    3204:	b6 01       	movw	r22, r12
    3206:	0e 94 7f 1b 	call	0x36fe	; 0x36fe <__gesf2>
    320a:	18 16       	cp	r1, r24
    320c:	b4 f4       	brge	.+44     	; 0x323a <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
    320e:	63 ee       	ldi	r22, 0xE3	; 227
    3210:	73 e0       	ldi	r23, 0x03	; 3
    3212:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3214:	df 91       	pop	r29
    3216:	cf 91       	pop	r28
    3218:	1f 91       	pop	r17
    321a:	ff 90       	pop	r15
    321c:	ef 90       	pop	r14
    321e:	df 90       	pop	r13
    3220:	cf 90       	pop	r12
    3222:	bf 90       	pop	r11
    3224:	af 90       	pop	r10
    3226:	9f 90       	pop	r9
    3228:	8f 90       	pop	r8
    322a:	7f 90       	pop	r7
    322c:	6f 90       	pop	r6
    322e:	5f 90       	pop	r5
    3230:	4f 90       	pop	r4
    3232:	3f 90       	pop	r3
    3234:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
    3236:	0c 94 6a 17 	jmp	0x2ed4	; 0x2ed4 <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    323a:	2f ef       	ldi	r18, 0xFF	; 255
    323c:	3f ef       	ldi	r19, 0xFF	; 255
    323e:	4f e7       	ldi	r20, 0x7F	; 127
    3240:	5f ec       	ldi	r21, 0xCF	; 207
    3242:	c7 01       	movw	r24, r14
    3244:	b6 01       	movw	r22, r12
    3246:	0e 94 27 1a 	call	0x344e	; 0x344e <__cmpsf2>
    324a:	87 fd       	sbrc	r24, 7
    324c:	e0 cf       	rjmp	.-64     	; 0x320e <Print::printFloat(double, unsigned char)+0x86>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    324e:	20 e0       	ldi	r18, 0x00	; 0
    3250:	30 e0       	ldi	r19, 0x00	; 0
    3252:	a9 01       	movw	r20, r18
    3254:	c7 01       	movw	r24, r14
    3256:	b6 01       	movw	r22, r12
    3258:	0e 94 27 1a 	call	0x344e	; 0x344e <__cmpsf2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    325c:	31 2c       	mov	r3, r1
    325e:	21 2c       	mov	r2, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    3260:	87 ff       	sbrs	r24, 7
    3262:	09 c0       	rjmp	.+18     	; 0x3276 <Print::printFloat(double, unsigned char)+0xee>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
    3264:	6d e2       	ldi	r22, 0x2D	; 45
    3266:	ce 01       	movw	r24, r28
    3268:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <Print::print(char)>
    326c:	1c 01       	movw	r2, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
    326e:	f7 fa       	bst	r15, 7
    3270:	f0 94       	com	r15
    3272:	f7 f8       	bld	r15, 7
    3274:	f0 94       	com	r15
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3276:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    3278:	60 e0       	ldi	r22, 0x00	; 0
    327a:	70 e0       	ldi	r23, 0x00	; 0
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    3280:	71 16       	cp	r7, r17
    3282:	41 f0       	breq	.+16     	; 0x3294 <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    3284:	20 e0       	ldi	r18, 0x00	; 0
    3286:	30 e0       	ldi	r19, 0x00	; 0
    3288:	40 e2       	ldi	r20, 0x20	; 32
    328a:	51 e4       	ldi	r21, 0x41	; 65
    328c:	0e 94 2c 1a 	call	0x3458	; 0x3458 <__divsf3>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3290:	1f 5f       	subi	r17, 0xFF	; 255
    3292:	f6 cf       	rjmp	.-20     	; 0x3280 <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    3294:	a7 01       	movw	r20, r14
    3296:	96 01       	movw	r18, r12
    3298:	0e 94 bb 19 	call	0x3376	; 0x3376 <__addsf3>
    329c:	2b 01       	movw	r4, r22
    329e:	3c 01       	movw	r6, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    32a0:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
    32a4:	4b 01       	movw	r8, r22
    32a6:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    32a8:	2a e0       	ldi	r18, 0x0A	; 10
    32aa:	bc 01       	movw	r22, r24
    32ac:	a4 01       	movw	r20, r8
    32ae:	ce 01       	movw	r24, r28
    32b0:	0e 94 d9 17 	call	0x2fb2	; 0x2fb2 <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    32b4:	7c 01       	movw	r14, r24
    32b6:	e2 0c       	add	r14, r2
    32b8:	f3 1c       	adc	r15, r3
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    32ba:	11 23       	and	r17, r17
    32bc:	b1 f1       	breq	.+108    	; 0x332a <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    32be:	c5 01       	movw	r24, r10
    32c0:	b4 01       	movw	r22, r8
    32c2:	0e 94 cd 1a 	call	0x359a	; 0x359a <__floatunsisf>
    32c6:	9b 01       	movw	r18, r22
    32c8:	ac 01       	movw	r20, r24
    32ca:	c3 01       	movw	r24, r6
    32cc:	b2 01       	movw	r22, r4
    32ce:	0e 94 ba 19 	call	0x3374	; 0x3374 <__subsf3>
    32d2:	4b 01       	movw	r8, r22
    32d4:	5c 01       	movw	r10, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    32d6:	6e e2       	ldi	r22, 0x2E	; 46
    32d8:	ce 01       	movw	r24, r28
    32da:	0e 94 a5 17 	call	0x2f4a	; 0x2f4a <Print::print(char)>
    32de:	e8 0e       	add	r14, r24
    32e0:	f9 1e       	adc	r15, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    32e2:	11 50       	subi	r17, 0x01	; 1
    32e4:	10 f1       	brcs	.+68     	; 0x332a <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    32e6:	20 e0       	ldi	r18, 0x00	; 0
    32e8:	30 e0       	ldi	r19, 0x00	; 0
    32ea:	40 e2       	ldi	r20, 0x20	; 32
    32ec:	51 e4       	ldi	r21, 0x41	; 65
    32ee:	c5 01       	movw	r24, r10
    32f0:	b4 01       	movw	r22, r8
    32f2:	0e 94 84 1b 	call	0x3708	; 0x3708 <__mulsf3>
    32f6:	2b 01       	movw	r4, r22
    32f8:	3c 01       	movw	r6, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    32fa:	0e 94 9e 1a 	call	0x353c	; 0x353c <__fixunssfsi>
    32fe:	4b 01       	movw	r8, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    3300:	4a e0       	ldi	r20, 0x0A	; 10
    3302:	50 e0       	ldi	r21, 0x00	; 0
    3304:	ce 01       	movw	r24, r28
    3306:	0e 94 ac 18 	call	0x3158	; 0x3158 <Print::print(unsigned int, int)>
    330a:	e8 0e       	add	r14, r24
    330c:	f9 1e       	adc	r15, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    330e:	b4 01       	movw	r22, r8
    3310:	90 e0       	ldi	r25, 0x00	; 0
    3312:	80 e0       	ldi	r24, 0x00	; 0
    3314:	0e 94 cd 1a 	call	0x359a	; 0x359a <__floatunsisf>
    3318:	9b 01       	movw	r18, r22
    331a:	ac 01       	movw	r20, r24
    331c:	c3 01       	movw	r24, r6
    331e:	b2 01       	movw	r22, r4
    3320:	0e 94 ba 19 	call	0x3374	; 0x3374 <__subsf3>
    3324:	4b 01       	movw	r8, r22
    3326:	5c 01       	movw	r10, r24
    3328:	dc cf       	rjmp	.-72     	; 0x32e2 <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    332a:	c7 01       	movw	r24, r14
    332c:	df 91       	pop	r29
    332e:	cf 91       	pop	r28
    3330:	1f 91       	pop	r17
    3332:	ff 90       	pop	r15
    3334:	ef 90       	pop	r14
    3336:	df 90       	pop	r13
    3338:	cf 90       	pop	r12
    333a:	bf 90       	pop	r11
    333c:	af 90       	pop	r10
    333e:	9f 90       	pop	r9
    3340:	8f 90       	pop	r8
    3342:	7f 90       	pop	r7
    3344:	6f 90       	pop	r6
    3346:	5f 90       	pop	r5
    3348:	4f 90       	pop	r4
    334a:	3f 90       	pop	r3
    334c:	2f 90       	pop	r2
    334e:	08 95       	ret

00003350 <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3350:	0c 94 c4 18 	jmp	0x3188	; 0x3188 <Print::printFloat(double, unsigned char)>

00003354 <initVariant>:
initVariant():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    3354:	08 95       	ret

00003356 <main>:
main():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    3356:	0e 94 38 14 	call	0x2870	; 0x2870 <init>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    335a:	0e 94 aa 19 	call	0x3354	; 0x3354 <initVariant>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    335e:	0e 94 88 09 	call	0x1310	; 0x1310 <setup>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    3362:	cb ea       	ldi	r28, 0xAB	; 171
    3364:	d5 e1       	ldi	r29, 0x15	; 21
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    3366:	0e 94 e2 0a 	call	0x15c4	; 0x15c4 <loop>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    336a:	20 97       	sbiw	r28, 0x00	; 0
    336c:	e1 f3       	breq	.-8      	; 0x3366 <main+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    336e:	0e 94 ab 15 	call	0x2b56	; 0x2b56 <serialEventRun()>
    3372:	f9 cf       	rjmp	.-14     	; 0x3366 <main+0x10>

00003374 <__subsf3>:
__subsf3():
    3374:	50 58       	subi	r21, 0x80	; 128

00003376 <__addsf3>:
    3376:	bb 27       	eor	r27, r27
    3378:	aa 27       	eor	r26, r26
    337a:	0e 94 d2 19 	call	0x33a4	; 0x33a4 <__addsf3x>
    337e:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__fp_round>
__addsf3():
    3382:	0e 94 37 1b 	call	0x366e	; 0x366e <__fp_pscA>
    3386:	38 f0       	brcs	.+14     	; 0x3396 <__addsf3+0x20>
    3388:	0e 94 3e 1b 	call	0x367c	; 0x367c <__fp_pscB>
    338c:	20 f0       	brcs	.+8      	; 0x3396 <__addsf3+0x20>
    338e:	39 f4       	brne	.+14     	; 0x339e <__addsf3+0x28>
    3390:	9f 3f       	cpi	r25, 0xFF	; 255
    3392:	19 f4       	brne	.+6      	; 0x339a <__addsf3+0x24>
    3394:	26 f4       	brtc	.+8      	; 0x339e <__addsf3+0x28>
    3396:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__fp_nan>
    339a:	0e f4       	brtc	.+2      	; 0x339e <__addsf3+0x28>
    339c:	e0 95       	com	r30
    339e:	e7 fb       	bst	r30, 7
    33a0:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <__fp_inf>

000033a4 <__addsf3x>:
__addsf3x():
    33a4:	e9 2f       	mov	r30, r25
    33a6:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__fp_split3>
    33aa:	58 f3       	brcs	.-42     	; 0x3382 <__addsf3+0xc>
    33ac:	ba 17       	cp	r27, r26
    33ae:	62 07       	cpc	r22, r18
    33b0:	73 07       	cpc	r23, r19
    33b2:	84 07       	cpc	r24, r20
    33b4:	95 07       	cpc	r25, r21
    33b6:	20 f0       	brcs	.+8      	; 0x33c0 <__addsf3x+0x1c>
    33b8:	79 f4       	brne	.+30     	; 0x33d8 <__addsf3x+0x34>
    33ba:	a6 f5       	brtc	.+104    	; 0x3424 <__addsf3x+0x80>
    33bc:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__fp_zero>
    33c0:	0e f4       	brtc	.+2      	; 0x33c4 <__addsf3x+0x20>
    33c2:	e0 95       	com	r30
    33c4:	0b 2e       	mov	r0, r27
    33c6:	ba 2f       	mov	r27, r26
    33c8:	a0 2d       	mov	r26, r0
    33ca:	0b 01       	movw	r0, r22
    33cc:	b9 01       	movw	r22, r18
    33ce:	90 01       	movw	r18, r0
    33d0:	0c 01       	movw	r0, r24
    33d2:	ca 01       	movw	r24, r20
    33d4:	a0 01       	movw	r20, r0
    33d6:	11 24       	eor	r1, r1
    33d8:	ff 27       	eor	r31, r31
    33da:	59 1b       	sub	r21, r25
    33dc:	99 f0       	breq	.+38     	; 0x3404 <__addsf3x+0x60>
    33de:	59 3f       	cpi	r21, 0xF9	; 249
    33e0:	50 f4       	brcc	.+20     	; 0x33f6 <__addsf3x+0x52>
    33e2:	50 3e       	cpi	r21, 0xE0	; 224
    33e4:	68 f1       	brcs	.+90     	; 0x3440 <__addsf3x+0x9c>
    33e6:	1a 16       	cp	r1, r26
    33e8:	f0 40       	sbci	r31, 0x00	; 0
    33ea:	a2 2f       	mov	r26, r18
    33ec:	23 2f       	mov	r18, r19
    33ee:	34 2f       	mov	r19, r20
    33f0:	44 27       	eor	r20, r20
    33f2:	58 5f       	subi	r21, 0xF8	; 248
    33f4:	f3 cf       	rjmp	.-26     	; 0x33dc <__addsf3x+0x38>
    33f6:	46 95       	lsr	r20
    33f8:	37 95       	ror	r19
    33fa:	27 95       	ror	r18
    33fc:	a7 95       	ror	r26
    33fe:	f0 40       	sbci	r31, 0x00	; 0
    3400:	53 95       	inc	r21
    3402:	c9 f7       	brne	.-14     	; 0x33f6 <__addsf3x+0x52>
    3404:	7e f4       	brtc	.+30     	; 0x3424 <__addsf3x+0x80>
    3406:	1f 16       	cp	r1, r31
    3408:	ba 0b       	sbc	r27, r26
    340a:	62 0b       	sbc	r22, r18
    340c:	73 0b       	sbc	r23, r19
    340e:	84 0b       	sbc	r24, r20
    3410:	ba f0       	brmi	.+46     	; 0x3440 <__addsf3x+0x9c>
    3412:	91 50       	subi	r25, 0x01	; 1
    3414:	a1 f0       	breq	.+40     	; 0x343e <__addsf3x+0x9a>
    3416:	ff 0f       	add	r31, r31
    3418:	bb 1f       	adc	r27, r27
    341a:	66 1f       	adc	r22, r22
    341c:	77 1f       	adc	r23, r23
    341e:	88 1f       	adc	r24, r24
    3420:	c2 f7       	brpl	.-16     	; 0x3412 <__addsf3x+0x6e>
    3422:	0e c0       	rjmp	.+28     	; 0x3440 <__addsf3x+0x9c>
    3424:	ba 0f       	add	r27, r26
    3426:	62 1f       	adc	r22, r18
    3428:	73 1f       	adc	r23, r19
    342a:	84 1f       	adc	r24, r20
    342c:	48 f4       	brcc	.+18     	; 0x3440 <__addsf3x+0x9c>
    342e:	87 95       	ror	r24
    3430:	77 95       	ror	r23
    3432:	67 95       	ror	r22
    3434:	b7 95       	ror	r27
    3436:	f7 95       	ror	r31
    3438:	9e 3f       	cpi	r25, 0xFE	; 254
    343a:	08 f0       	brcs	.+2      	; 0x343e <__addsf3x+0x9a>
    343c:	b0 cf       	rjmp	.-160    	; 0x339e <__addsf3+0x28>
    343e:	93 95       	inc	r25
    3440:	88 0f       	add	r24, r24
    3442:	08 f0       	brcs	.+2      	; 0x3446 <__addsf3x+0xa2>
    3444:	99 27       	eor	r25, r25
    3446:	ee 0f       	add	r30, r30
    3448:	97 95       	ror	r25
    344a:	87 95       	ror	r24
    344c:	08 95       	ret

0000344e <__cmpsf2>:
    344e:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__fp_cmp>
    3452:	08 f4       	brcc	.+2      	; 0x3456 <__cmpsf2+0x8>
    3454:	81 e0       	ldi	r24, 0x01	; 1
    3456:	08 95       	ret

00003458 <__divsf3>:
    3458:	0e 94 40 1a 	call	0x3480	; 0x3480 <__divsf3x>
    345c:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__fp_round>
    3460:	0e 94 3e 1b 	call	0x367c	; 0x367c <__fp_pscB>
    3464:	58 f0       	brcs	.+22     	; 0x347c <__divsf3+0x24>
    3466:	0e 94 37 1b 	call	0x366e	; 0x366e <__fp_pscA>
    346a:	40 f0       	brcs	.+16     	; 0x347c <__divsf3+0x24>
    346c:	29 f4       	brne	.+10     	; 0x3478 <__divsf3+0x20>
    346e:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    3470:	29 f0       	breq	.+10     	; 0x347c <__divsf3+0x24>
    3472:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <__fp_inf>
    3476:	51 11       	cpse	r21, r1
    3478:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__fp_szero>
    347c:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__fp_nan>

00003480 <__divsf3x>:
__divsf3x():
    3480:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__fp_split3>
    3484:	68 f3       	brcs	.-38     	; 0x3460 <__divsf3+0x8>

00003486 <__divsf3_pse>:
    3486:	99 23       	and	r25, r25
    3488:	b1 f3       	breq	.-20     	; 0x3476 <__divsf3+0x1e>
    348a:	55 23       	and	r21, r21
    348c:	91 f3       	breq	.-28     	; 0x3472 <__divsf3+0x1a>
    348e:	95 1b       	sub	r25, r21
    3490:	55 0b       	sbc	r21, r21
    3492:	bb 27       	eor	r27, r27
    3494:	aa 27       	eor	r26, r26
    3496:	62 17       	cp	r22, r18
    3498:	73 07       	cpc	r23, r19
    349a:	84 07       	cpc	r24, r20
    349c:	38 f0       	brcs	.+14     	; 0x34ac <__divsf3_pse+0x26>
    349e:	9f 5f       	subi	r25, 0xFF	; 255
    34a0:	5f 4f       	sbci	r21, 0xFF	; 255
    34a2:	22 0f       	add	r18, r18
    34a4:	33 1f       	adc	r19, r19
    34a6:	44 1f       	adc	r20, r20
    34a8:	aa 1f       	adc	r26, r26
    34aa:	a9 f3       	breq	.-22     	; 0x3496 <__divsf3_pse+0x10>
    34ac:	35 d0       	rcall	.+106    	; 0x3518 <__divsf3_pse+0x92>
    34ae:	0e 2e       	mov	r0, r30
    34b0:	3a f0       	brmi	.+14     	; 0x34c0 <__divsf3_pse+0x3a>
    34b2:	e0 e8       	ldi	r30, 0x80	; 128
    34b4:	32 d0       	rcall	.+100    	; 0x351a <__divsf3_pse+0x94>
    34b6:	91 50       	subi	r25, 0x01	; 1
    34b8:	50 40       	sbci	r21, 0x00	; 0
    34ba:	e6 95       	lsr	r30
    34bc:	00 1c       	adc	r0, r0
    34be:	ca f7       	brpl	.-14     	; 0x34b2 <__divsf3_pse+0x2c>
    34c0:	2b d0       	rcall	.+86     	; 0x3518 <__divsf3_pse+0x92>
    34c2:	fe 2f       	mov	r31, r30
    34c4:	29 d0       	rcall	.+82     	; 0x3518 <__divsf3_pse+0x92>
    34c6:	66 0f       	add	r22, r22
    34c8:	77 1f       	adc	r23, r23
    34ca:	88 1f       	adc	r24, r24
    34cc:	bb 1f       	adc	r27, r27
    34ce:	26 17       	cp	r18, r22
    34d0:	37 07       	cpc	r19, r23
    34d2:	48 07       	cpc	r20, r24
    34d4:	ab 07       	cpc	r26, r27
    34d6:	b0 e8       	ldi	r27, 0x80	; 128
    34d8:	09 f0       	breq	.+2      	; 0x34dc <__divsf3_pse+0x56>
    34da:	bb 0b       	sbc	r27, r27
    34dc:	80 2d       	mov	r24, r0
    34de:	bf 01       	movw	r22, r30
    34e0:	ff 27       	eor	r31, r31
    34e2:	93 58       	subi	r25, 0x83	; 131
    34e4:	5f 4f       	sbci	r21, 0xFF	; 255
    34e6:	3a f0       	brmi	.+14     	; 0x34f6 <__divsf3_pse+0x70>
    34e8:	9e 3f       	cpi	r25, 0xFE	; 254
    34ea:	51 05       	cpc	r21, r1
    34ec:	78 f0       	brcs	.+30     	; 0x350c <__divsf3_pse+0x86>
    34ee:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <__fp_inf>
    34f2:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__fp_szero>
    34f6:	5f 3f       	cpi	r21, 0xFF	; 255
    34f8:	e4 f3       	brlt	.-8      	; 0x34f2 <__divsf3_pse+0x6c>
    34fa:	98 3e       	cpi	r25, 0xE8	; 232
    34fc:	d4 f3       	brlt	.-12     	; 0x34f2 <__divsf3_pse+0x6c>
    34fe:	86 95       	lsr	r24
    3500:	77 95       	ror	r23
    3502:	67 95       	ror	r22
    3504:	b7 95       	ror	r27
    3506:	f7 95       	ror	r31
    3508:	9f 5f       	subi	r25, 0xFF	; 255
    350a:	c9 f7       	brne	.-14     	; 0x34fe <__divsf3_pse+0x78>
    350c:	88 0f       	add	r24, r24
    350e:	91 1d       	adc	r25, r1
    3510:	96 95       	lsr	r25
    3512:	87 95       	ror	r24
    3514:	97 f9       	bld	r25, 7
    3516:	08 95       	ret
    3518:	e1 e0       	ldi	r30, 0x01	; 1
    351a:	66 0f       	add	r22, r22
    351c:	77 1f       	adc	r23, r23
    351e:	88 1f       	adc	r24, r24
    3520:	bb 1f       	adc	r27, r27
    3522:	62 17       	cp	r22, r18
    3524:	73 07       	cpc	r23, r19
    3526:	84 07       	cpc	r24, r20
    3528:	ba 07       	cpc	r27, r26
    352a:	20 f0       	brcs	.+8      	; 0x3534 <__divsf3_pse+0xae>
    352c:	62 1b       	sub	r22, r18
    352e:	73 0b       	sbc	r23, r19
    3530:	84 0b       	sbc	r24, r20
    3532:	ba 0b       	sbc	r27, r26
    3534:	ee 1f       	adc	r30, r30
    3536:	88 f7       	brcc	.-30     	; 0x351a <__divsf3_pse+0x94>
    3538:	e0 95       	com	r30
    353a:	08 95       	ret

0000353c <__fixunssfsi>:
    353c:	0e 94 5e 1b 	call	0x36bc	; 0x36bc <__fp_splitA>
    3540:	88 f0       	brcs	.+34     	; 0x3564 <__fixunssfsi+0x28>
    3542:	9f 57       	subi	r25, 0x7F	; 127
    3544:	98 f0       	brcs	.+38     	; 0x356c <__fixunssfsi+0x30>
    3546:	b9 2f       	mov	r27, r25
    3548:	99 27       	eor	r25, r25
    354a:	b7 51       	subi	r27, 0x17	; 23
    354c:	b0 f0       	brcs	.+44     	; 0x357a <__fixunssfsi+0x3e>
    354e:	e1 f0       	breq	.+56     	; 0x3588 <__fixunssfsi+0x4c>
    3550:	66 0f       	add	r22, r22
    3552:	77 1f       	adc	r23, r23
    3554:	88 1f       	adc	r24, r24
    3556:	99 1f       	adc	r25, r25
    3558:	1a f0       	brmi	.+6      	; 0x3560 <__fixunssfsi+0x24>
    355a:	ba 95       	dec	r27
__fixunssfsi():
    355c:	c9 f7       	brne	.-14     	; 0x3550 <__fixunssfsi+0x14>
    355e:	14 c0       	rjmp	.+40     	; 0x3588 <__fixunssfsi+0x4c>
    3560:	b1 30       	cpi	r27, 0x01	; 1
    3562:	91 f0       	breq	.+36     	; 0x3588 <__fixunssfsi+0x4c>
    3564:	0e 94 78 1b 	call	0x36f0	; 0x36f0 <__fp_zero>
    3568:	b1 e0       	ldi	r27, 0x01	; 1
    356a:	08 95       	ret
    356c:	0c 94 78 1b 	jmp	0x36f0	; 0x36f0 <__fp_zero>
    3570:	67 2f       	mov	r22, r23
    3572:	78 2f       	mov	r23, r24
    3574:	88 27       	eor	r24, r24
    3576:	b8 5f       	subi	r27, 0xF8	; 248
    3578:	39 f0       	breq	.+14     	; 0x3588 <__fixunssfsi+0x4c>
    357a:	b9 3f       	cpi	r27, 0xF9	; 249
    357c:	cc f3       	brlt	.-14     	; 0x3570 <__fixunssfsi+0x34>
    357e:	86 95       	lsr	r24
    3580:	77 95       	ror	r23
    3582:	67 95       	ror	r22
    3584:	b3 95       	inc	r27
    3586:	d9 f7       	brne	.-10     	; 0x357e <__fixunssfsi+0x42>
    3588:	3e f4       	brtc	.+14     	; 0x3598 <__fixunssfsi+0x5c>
    358a:	90 95       	com	r25
    358c:	80 95       	com	r24
    358e:	70 95       	com	r23
    3590:	61 95       	neg	r22
    3592:	7f 4f       	sbci	r23, 0xFF	; 255
    3594:	8f 4f       	sbci	r24, 0xFF	; 255
    3596:	9f 4f       	sbci	r25, 0xFF	; 255
    3598:	08 95       	ret

0000359a <__floatunsisf>:
__floatunsisf():
    359a:	e8 94       	clt
    359c:	09 c0       	rjmp	.+18     	; 0x35b0 <__floatsisf+0x12>

0000359e <__floatsisf>:
    359e:	97 fb       	bst	r25, 7
    35a0:	3e f4       	brtc	.+14     	; 0x35b0 <__floatsisf+0x12>
    35a2:	90 95       	com	r25
    35a4:	80 95       	com	r24
    35a6:	70 95       	com	r23
    35a8:	61 95       	neg	r22
    35aa:	7f 4f       	sbci	r23, 0xFF	; 255
    35ac:	8f 4f       	sbci	r24, 0xFF	; 255
    35ae:	9f 4f       	sbci	r25, 0xFF	; 255
    35b0:	99 23       	and	r25, r25
    35b2:	a9 f0       	breq	.+42     	; 0x35de <__floatsisf+0x40>
    35b4:	f9 2f       	mov	r31, r25
    35b6:	96 e9       	ldi	r25, 0x96	; 150
    35b8:	bb 27       	eor	r27, r27
    35ba:	93 95       	inc	r25
    35bc:	f6 95       	lsr	r31
    35be:	87 95       	ror	r24
    35c0:	77 95       	ror	r23
    35c2:	67 95       	ror	r22
    35c4:	b7 95       	ror	r27
    35c6:	f1 11       	cpse	r31, r1
    35c8:	f8 cf       	rjmp	.-16     	; 0x35ba <__floatsisf+0x1c>
    35ca:	fa f4       	brpl	.+62     	; 0x360a <__floatsisf+0x6c>
    35cc:	bb 0f       	add	r27, r27
    35ce:	11 f4       	brne	.+4      	; 0x35d4 <__floatsisf+0x36>
    35d0:	60 ff       	sbrs	r22, 0
    35d2:	1b c0       	rjmp	.+54     	; 0x360a <__floatsisf+0x6c>
    35d4:	6f 5f       	subi	r22, 0xFF	; 255
    35d6:	7f 4f       	sbci	r23, 0xFF	; 255
    35d8:	8f 4f       	sbci	r24, 0xFF	; 255
    35da:	9f 4f       	sbci	r25, 0xFF	; 255
    35dc:	16 c0       	rjmp	.+44     	; 0x360a <__floatsisf+0x6c>
    35de:	88 23       	and	r24, r24
    35e0:	11 f0       	breq	.+4      	; 0x35e6 <__floatsisf+0x48>
    35e2:	96 e9       	ldi	r25, 0x96	; 150
    35e4:	11 c0       	rjmp	.+34     	; 0x3608 <__floatsisf+0x6a>
    35e6:	77 23       	and	r23, r23
    35e8:	21 f0       	breq	.+8      	; 0x35f2 <__floatsisf+0x54>
    35ea:	9e e8       	ldi	r25, 0x8E	; 142
    35ec:	87 2f       	mov	r24, r23
    35ee:	76 2f       	mov	r23, r22
    35f0:	05 c0       	rjmp	.+10     	; 0x35fc <__floatsisf+0x5e>
    35f2:	66 23       	and	r22, r22
    35f4:	71 f0       	breq	.+28     	; 0x3612 <__floatsisf+0x74>
    35f6:	96 e8       	ldi	r25, 0x86	; 134
    35f8:	86 2f       	mov	r24, r22
    35fa:	70 e0       	ldi	r23, 0x00	; 0
    35fc:	60 e0       	ldi	r22, 0x00	; 0
    35fe:	2a f0       	brmi	.+10     	; 0x360a <__floatsisf+0x6c>
    3600:	9a 95       	dec	r25
    3602:	66 0f       	add	r22, r22
    3604:	77 1f       	adc	r23, r23
    3606:	88 1f       	adc	r24, r24
    3608:	da f7       	brpl	.-10     	; 0x3600 <__floatsisf+0x62>
    360a:	88 0f       	add	r24, r24
    360c:	96 95       	lsr	r25
    360e:	87 95       	ror	r24
    3610:	97 f9       	bld	r25, 7
    3612:	08 95       	ret

00003614 <__fp_cmp>:
__fp_cmp():
    3614:	99 0f       	add	r25, r25
    3616:	00 08       	sbc	r0, r0
    3618:	55 0f       	add	r21, r21
    361a:	aa 0b       	sbc	r26, r26
    361c:	e0 e8       	ldi	r30, 0x80	; 128
    361e:	fe ef       	ldi	r31, 0xFE	; 254
    3620:	16 16       	cp	r1, r22
    3622:	17 06       	cpc	r1, r23
    3624:	e8 07       	cpc	r30, r24
    3626:	f9 07       	cpc	r31, r25
    3628:	c0 f0       	brcs	.+48     	; 0x365a <__fp_cmp+0x46>
    362a:	12 16       	cp	r1, r18
    362c:	13 06       	cpc	r1, r19
    362e:	e4 07       	cpc	r30, r20
    3630:	f5 07       	cpc	r31, r21
    3632:	98 f0       	brcs	.+38     	; 0x365a <__fp_cmp+0x46>
    3634:	62 1b       	sub	r22, r18
    3636:	73 0b       	sbc	r23, r19
    3638:	84 0b       	sbc	r24, r20
    363a:	95 0b       	sbc	r25, r21
    363c:	39 f4       	brne	.+14     	; 0x364c <__fp_cmp+0x38>
    363e:	0a 26       	eor	r0, r26
    3640:	61 f0       	breq	.+24     	; 0x365a <__fp_cmp+0x46>
    3642:	23 2b       	or	r18, r19
    3644:	24 2b       	or	r18, r20
    3646:	25 2b       	or	r18, r21
    3648:	21 f4       	brne	.+8      	; 0x3652 <__fp_cmp+0x3e>
    364a:	08 95       	ret
    364c:	0a 26       	eor	r0, r26
    364e:	09 f4       	brne	.+2      	; 0x3652 <__fp_cmp+0x3e>
    3650:	a1 40       	sbci	r26, 0x01	; 1
    3652:	a6 95       	lsr	r26
    3654:	8f ef       	ldi	r24, 0xFF	; 255
    3656:	81 1d       	adc	r24, r1
    3658:	81 1d       	adc	r24, r1
    365a:	08 95       	ret

0000365c <__fp_inf>:
__fp_inf():
    365c:	97 f9       	bld	r25, 7
    365e:	9f 67       	ori	r25, 0x7F	; 127
    3660:	80 e8       	ldi	r24, 0x80	; 128
    3662:	70 e0       	ldi	r23, 0x00	; 0
    3664:	60 e0       	ldi	r22, 0x00	; 0
    3666:	08 95       	ret

00003668 <__fp_nan>:
__fp_nan():
    3668:	9f ef       	ldi	r25, 0xFF	; 255
    366a:	80 ec       	ldi	r24, 0xC0	; 192
    366c:	08 95       	ret

0000366e <__fp_pscA>:
__fp_pscA():
    366e:	00 24       	eor	r0, r0
    3670:	0a 94       	dec	r0
    3672:	16 16       	cp	r1, r22
    3674:	17 06       	cpc	r1, r23
    3676:	18 06       	cpc	r1, r24
    3678:	09 06       	cpc	r0, r25
    367a:	08 95       	ret

0000367c <__fp_pscB>:
__fp_pscB():
    367c:	00 24       	eor	r0, r0
    367e:	0a 94       	dec	r0
    3680:	12 16       	cp	r1, r18
    3682:	13 06       	cpc	r1, r19
    3684:	14 06       	cpc	r1, r20
    3686:	05 06       	cpc	r0, r21
    3688:	08 95       	ret

0000368a <__fp_round>:
__fp_round():
    368a:	09 2e       	mov	r0, r25
    368c:	03 94       	inc	r0
    368e:	00 0c       	add	r0, r0
    3690:	11 f4       	brne	.+4      	; 0x3696 <__fp_round+0xc>
    3692:	88 23       	and	r24, r24
    3694:	52 f0       	brmi	.+20     	; 0x36aa <__fp_round+0x20>
    3696:	bb 0f       	add	r27, r27
    3698:	40 f4       	brcc	.+16     	; 0x36aa <__fp_round+0x20>
    369a:	bf 2b       	or	r27, r31
    369c:	11 f4       	brne	.+4      	; 0x36a2 <__fp_round+0x18>
    369e:	60 ff       	sbrs	r22, 0
    36a0:	04 c0       	rjmp	.+8      	; 0x36aa <__fp_round+0x20>
    36a2:	6f 5f       	subi	r22, 0xFF	; 255
    36a4:	7f 4f       	sbci	r23, 0xFF	; 255
    36a6:	8f 4f       	sbci	r24, 0xFF	; 255
    36a8:	9f 4f       	sbci	r25, 0xFF	; 255
    36aa:	08 95       	ret

000036ac <__fp_split3>:
__fp_split3():
    36ac:	57 fd       	sbrc	r21, 7
    36ae:	90 58       	subi	r25, 0x80	; 128
    36b0:	44 0f       	add	r20, r20
    36b2:	55 1f       	adc	r21, r21
    36b4:	59 f0       	breq	.+22     	; 0x36cc <__fp_splitA+0x10>
    36b6:	5f 3f       	cpi	r21, 0xFF	; 255
    36b8:	71 f0       	breq	.+28     	; 0x36d6 <__fp_splitA+0x1a>
    36ba:	47 95       	ror	r20

000036bc <__fp_splitA>:
    36bc:	88 0f       	add	r24, r24
    36be:	97 fb       	bst	r25, 7
    36c0:	99 1f       	adc	r25, r25
    36c2:	61 f0       	breq	.+24     	; 0x36dc <__fp_splitA+0x20>
    36c4:	9f 3f       	cpi	r25, 0xFF	; 255
    36c6:	79 f0       	breq	.+30     	; 0x36e6 <__fp_splitA+0x2a>
    36c8:	87 95       	ror	r24
    36ca:	08 95       	ret
    36cc:	12 16       	cp	r1, r18
    36ce:	13 06       	cpc	r1, r19
    36d0:	14 06       	cpc	r1, r20
    36d2:	55 1f       	adc	r21, r21
    36d4:	f2 cf       	rjmp	.-28     	; 0x36ba <__fp_split3+0xe>
    36d6:	46 95       	lsr	r20
    36d8:	f1 df       	rcall	.-30     	; 0x36bc <__fp_splitA>
    36da:	08 c0       	rjmp	.+16     	; 0x36ec <__fp_splitA+0x30>
    36dc:	16 16       	cp	r1, r22
    36de:	17 06       	cpc	r1, r23
    36e0:	18 06       	cpc	r1, r24
    36e2:	99 1f       	adc	r25, r25
    36e4:	f1 cf       	rjmp	.-30     	; 0x36c8 <__fp_splitA+0xc>
    36e6:	86 95       	lsr	r24
    36e8:	71 05       	cpc	r23, r1
    36ea:	61 05       	cpc	r22, r1
    36ec:	08 94       	sec
    36ee:	08 95       	ret

000036f0 <__fp_zero>:
__fp_zero():
    36f0:	e8 94       	clt

000036f2 <__fp_szero>:
    36f2:	bb 27       	eor	r27, r27
    36f4:	66 27       	eor	r22, r22
    36f6:	77 27       	eor	r23, r23
    36f8:	cb 01       	movw	r24, r22
    36fa:	97 f9       	bld	r25, 7
    36fc:	08 95       	ret

000036fe <__gesf2>:
__gesf2():
    36fe:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__fp_cmp>
    3702:	08 f4       	brcc	.+2      	; 0x3706 <__gesf2+0x8>
    3704:	8f ef       	ldi	r24, 0xFF	; 255
    3706:	08 95       	ret

00003708 <__mulsf3>:
__mulsf3():
    3708:	0e 94 97 1b 	call	0x372e	; 0x372e <__mulsf3x>
    370c:	0c 94 45 1b 	jmp	0x368a	; 0x368a <__fp_round>
    3710:	0e 94 37 1b 	call	0x366e	; 0x366e <__fp_pscA>
    3714:	38 f0       	brcs	.+14     	; 0x3724 <__mulsf3+0x1c>
    3716:	0e 94 3e 1b 	call	0x367c	; 0x367c <__fp_pscB>
    371a:	20 f0       	brcs	.+8      	; 0x3724 <__mulsf3+0x1c>
    371c:	95 23       	and	r25, r21
    371e:	11 f0       	breq	.+4      	; 0x3724 <__mulsf3+0x1c>
    3720:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <__fp_inf>
    3724:	0c 94 34 1b 	jmp	0x3668	; 0x3668 <__fp_nan>
    3728:	11 24       	eor	r1, r1
    372a:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__fp_szero>

0000372e <__mulsf3x>:
__mulsf3x():
    372e:	0e 94 56 1b 	call	0x36ac	; 0x36ac <__fp_split3>
    3732:	70 f3       	brcs	.-36     	; 0x3710 <__mulsf3+0x8>

00003734 <__mulsf3_pse>:
    3734:	95 9f       	mul	r25, r21
    3736:	c1 f3       	breq	.-16     	; 0x3728 <__mulsf3+0x20>
    3738:	95 0f       	add	r25, r21
    373a:	50 e0       	ldi	r21, 0x00	; 0
    373c:	55 1f       	adc	r21, r21
    373e:	62 9f       	mul	r22, r18
    3740:	f0 01       	movw	r30, r0
    3742:	72 9f       	mul	r23, r18
    3744:	bb 27       	eor	r27, r27
    3746:	f0 0d       	add	r31, r0
    3748:	b1 1d       	adc	r27, r1
    374a:	63 9f       	mul	r22, r19
    374c:	aa 27       	eor	r26, r26
    374e:	f0 0d       	add	r31, r0
    3750:	b1 1d       	adc	r27, r1
    3752:	aa 1f       	adc	r26, r26
    3754:	64 9f       	mul	r22, r20
    3756:	66 27       	eor	r22, r22
    3758:	b0 0d       	add	r27, r0
    375a:	a1 1d       	adc	r26, r1
    375c:	66 1f       	adc	r22, r22
    375e:	82 9f       	mul	r24, r18
    3760:	22 27       	eor	r18, r18
    3762:	b0 0d       	add	r27, r0
    3764:	a1 1d       	adc	r26, r1
    3766:	62 1f       	adc	r22, r18
    3768:	73 9f       	mul	r23, r19
    376a:	b0 0d       	add	r27, r0
    376c:	a1 1d       	adc	r26, r1
    376e:	62 1f       	adc	r22, r18
    3770:	83 9f       	mul	r24, r19
    3772:	a0 0d       	add	r26, r0
    3774:	61 1d       	adc	r22, r1
    3776:	22 1f       	adc	r18, r18
    3778:	74 9f       	mul	r23, r20
    377a:	33 27       	eor	r19, r19
    377c:	a0 0d       	add	r26, r0
    377e:	61 1d       	adc	r22, r1
    3780:	23 1f       	adc	r18, r19
    3782:	84 9f       	mul	r24, r20
    3784:	60 0d       	add	r22, r0
    3786:	21 1d       	adc	r18, r1
    3788:	82 2f       	mov	r24, r18
    378a:	76 2f       	mov	r23, r22
    378c:	6a 2f       	mov	r22, r26
    378e:	11 24       	eor	r1, r1
    3790:	9f 57       	subi	r25, 0x7F	; 127
    3792:	50 40       	sbci	r21, 0x00	; 0
    3794:	9a f0       	brmi	.+38     	; 0x37bc <__mulsf3_pse+0x88>
    3796:	f1 f0       	breq	.+60     	; 0x37d4 <__mulsf3_pse+0xa0>
    3798:	88 23       	and	r24, r24
    379a:	4a f0       	brmi	.+18     	; 0x37ae <__mulsf3_pse+0x7a>
    379c:	ee 0f       	add	r30, r30
    379e:	ff 1f       	adc	r31, r31
    37a0:	bb 1f       	adc	r27, r27
    37a2:	66 1f       	adc	r22, r22
    37a4:	77 1f       	adc	r23, r23
    37a6:	88 1f       	adc	r24, r24
    37a8:	91 50       	subi	r25, 0x01	; 1
    37aa:	50 40       	sbci	r21, 0x00	; 0
    37ac:	a9 f7       	brne	.-22     	; 0x3798 <__mulsf3_pse+0x64>
    37ae:	9e 3f       	cpi	r25, 0xFE	; 254
    37b0:	51 05       	cpc	r21, r1
    37b2:	80 f0       	brcs	.+32     	; 0x37d4 <__mulsf3_pse+0xa0>
    37b4:	0c 94 2e 1b 	jmp	0x365c	; 0x365c <__fp_inf>
    37b8:	0c 94 79 1b 	jmp	0x36f2	; 0x36f2 <__fp_szero>
    37bc:	5f 3f       	cpi	r21, 0xFF	; 255
    37be:	e4 f3       	brlt	.-8      	; 0x37b8 <__mulsf3_pse+0x84>
    37c0:	98 3e       	cpi	r25, 0xE8	; 232
    37c2:	d4 f3       	brlt	.-12     	; 0x37b8 <__mulsf3_pse+0x84>
    37c4:	86 95       	lsr	r24
    37c6:	77 95       	ror	r23
    37c8:	67 95       	ror	r22
    37ca:	b7 95       	ror	r27
    37cc:	f7 95       	ror	r31
    37ce:	e7 95       	ror	r30
    37d0:	9f 5f       	subi	r25, 0xFF	; 255
    37d2:	c1 f7       	brne	.-16     	; 0x37c4 <__mulsf3_pse+0x90>
    37d4:	fe 2b       	or	r31, r30
    37d6:	88 0f       	add	r24, r24
    37d8:	91 1d       	adc	r25, r1
    37da:	96 95       	lsr	r25
    37dc:	87 95       	ror	r24
    37de:	97 f9       	bld	r25, 7
    37e0:	08 95       	ret

000037e2 <__unordsf2>:
    37e2:	0e 94 0a 1b 	call	0x3614	; 0x3614 <__fp_cmp>
    37e6:	88 0b       	sbc	r24, r24
    37e8:	99 0b       	sbc	r25, r25
    37ea:	08 95       	ret

000037ec <__udivmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    37ec:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    37ee:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    37f0:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    37f2:	07 c0       	rjmp	.+14     	; 0x3802 <__udivmodhi4_ep>

000037f4 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    37f4:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    37f6:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    37f8:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    37fa:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    37fc:	10 f0       	brcs	.+4      	; 0x3802 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    37fe:	a6 1b       	sub	r26, r22
__udivmodhi4_loop():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    3800:	b7 0b       	sbc	r27, r23

00003802 <__udivmodhi4_ep>:
__udivmodhi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    3802:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    3804:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    3806:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    3808:	a9 f7       	brne	.-22     	; 0x37f4 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    380a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    380c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    380e:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    3810:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    3812:	08 95       	ret

00003814 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    3814:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    3816:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    3818:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    381a:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    381c:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    381e:	0d c0       	rjmp	.+26     	; 0x383a <__udivmodsi4_ep>

00003820 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    3820:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3822:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    3824:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    3826:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    3828:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    382a:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    382c:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    382e:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    3830:	20 f0       	brcs	.+8      	; 0x383a <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3832:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3834:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    3836:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    3838:	f5 0b       	sbc	r31, r21

0000383a <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    383a:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    383c:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    383e:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    3840:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    3842:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    3844:	69 f7       	brne	.-38     	; 0x3820 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    3846:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    3848:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    384a:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    384c:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    384e:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    3850:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    3852:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    3854:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    3856:	08 95       	ret

00003858 <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    3858:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    385a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    385c:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    385e:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    3860:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    3862:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    3864:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    3866:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    3868:	09 94       	ijmp

0000386a <strcpy>:
strcpy():
    386a:	fb 01       	movw	r30, r22
    386c:	dc 01       	movw	r26, r24
    386e:	01 90       	ld	r0, Z+
    3870:	0d 92       	st	X+, r0
    3872:	00 20       	and	r0, r0
    3874:	e1 f7       	brne	.-8      	; 0x386e <strcpy+0x4>
    3876:	08 95       	ret

00003878 <sprintf>:
sprintf():
    3878:	0f 93       	push	r16
    387a:	1f 93       	push	r17
    387c:	cf 93       	push	r28
    387e:	df 93       	push	r29
    3880:	cd b7       	in	r28, 0x3d	; 61
    3882:	de b7       	in	r29, 0x3e	; 62
    3884:	2e 97       	sbiw	r28, 0x0e	; 14
    3886:	0f b6       	in	r0, 0x3f	; 63
    3888:	f8 94       	cli
    388a:	de bf       	out	0x3e, r29	; 62
    388c:	0f be       	out	0x3f, r0	; 63
    388e:	cd bf       	out	0x3d, r28	; 61
    3890:	0d 89       	ldd	r16, Y+21	; 0x15
    3892:	1e 89       	ldd	r17, Y+22	; 0x16
    3894:	86 e0       	ldi	r24, 0x06	; 6
    3896:	8c 83       	std	Y+4, r24	; 0x04
    3898:	1a 83       	std	Y+2, r17	; 0x02
    389a:	09 83       	std	Y+1, r16	; 0x01
    389c:	8f ef       	ldi	r24, 0xFF	; 255
    389e:	9f e7       	ldi	r25, 0x7F	; 127
    38a0:	9e 83       	std	Y+6, r25	; 0x06
    38a2:	8d 83       	std	Y+5, r24	; 0x05
    38a4:	ae 01       	movw	r20, r28
    38a6:	47 5e       	subi	r20, 0xE7	; 231
    38a8:	5f 4f       	sbci	r21, 0xFF	; 255
    38aa:	6f 89       	ldd	r22, Y+23	; 0x17
    38ac:	78 8d       	ldd	r23, Y+24	; 0x18
    38ae:	ce 01       	movw	r24, r28
    38b0:	01 96       	adiw	r24, 0x01	; 1
    38b2:	0e 94 6c 1c 	call	0x38d8	; 0x38d8 <vfprintf>
    38b6:	2f 81       	ldd	r18, Y+7	; 0x07
    38b8:	38 85       	ldd	r19, Y+8	; 0x08
    38ba:	02 0f       	add	r16, r18
    38bc:	13 1f       	adc	r17, r19
    38be:	f8 01       	movw	r30, r16
    38c0:	10 82       	st	Z, r1
    38c2:	2e 96       	adiw	r28, 0x0e	; 14
    38c4:	0f b6       	in	r0, 0x3f	; 63
    38c6:	f8 94       	cli
    38c8:	de bf       	out	0x3e, r29	; 62
    38ca:	0f be       	out	0x3f, r0	; 63
    38cc:	cd bf       	out	0x3d, r28	; 61
    38ce:	df 91       	pop	r29
    38d0:	cf 91       	pop	r28
    38d2:	1f 91       	pop	r17
    38d4:	0f 91       	pop	r16
    38d6:	08 95       	ret

000038d8 <vfprintf>:
vfprintf():
    38d8:	2f 92       	push	r2
    38da:	3f 92       	push	r3
    38dc:	4f 92       	push	r4
    38de:	5f 92       	push	r5
    38e0:	6f 92       	push	r6
    38e2:	7f 92       	push	r7
    38e4:	8f 92       	push	r8
    38e6:	9f 92       	push	r9
    38e8:	af 92       	push	r10
    38ea:	bf 92       	push	r11
    38ec:	cf 92       	push	r12
    38ee:	df 92       	push	r13
    38f0:	ef 92       	push	r14
    38f2:	ff 92       	push	r15
    38f4:	0f 93       	push	r16
    38f6:	1f 93       	push	r17
    38f8:	cf 93       	push	r28
    38fa:	df 93       	push	r29
    38fc:	cd b7       	in	r28, 0x3d	; 61
    38fe:	de b7       	in	r29, 0x3e	; 62
    3900:	2b 97       	sbiw	r28, 0x0b	; 11
    3902:	0f b6       	in	r0, 0x3f	; 63
    3904:	f8 94       	cli
    3906:	de bf       	out	0x3e, r29	; 62
    3908:	0f be       	out	0x3f, r0	; 63
    390a:	cd bf       	out	0x3d, r28	; 61
    390c:	7c 01       	movw	r14, r24
    390e:	3b 01       	movw	r6, r22
    3910:	8a 01       	movw	r16, r20
    3912:	fc 01       	movw	r30, r24
    3914:	17 82       	std	Z+7, r1	; 0x07
    3916:	16 82       	std	Z+6, r1	; 0x06
    3918:	83 81       	ldd	r24, Z+3	; 0x03
    391a:	81 ff       	sbrs	r24, 1
    391c:	dd c1       	rjmp	.+954    	; 0x3cd8 <vfprintf+0x400>
    391e:	ce 01       	movw	r24, r28
    3920:	01 96       	adiw	r24, 0x01	; 1
    3922:	5c 01       	movw	r10, r24
    3924:	f7 01       	movw	r30, r14
    3926:	93 81       	ldd	r25, Z+3	; 0x03
    3928:	f3 01       	movw	r30, r6
    392a:	93 fd       	sbrc	r25, 3
    392c:	85 91       	lpm	r24, Z+
    392e:	93 ff       	sbrs	r25, 3
    3930:	81 91       	ld	r24, Z+
    3932:	3f 01       	movw	r6, r30
    3934:	88 23       	and	r24, r24
    3936:	09 f4       	brne	.+2      	; 0x393a <vfprintf+0x62>
    3938:	53 c1       	rjmp	.+678    	; 0x3be0 <vfprintf+0x308>
    393a:	85 32       	cpi	r24, 0x25	; 37
    393c:	39 f4       	brne	.+14     	; 0x394c <vfprintf+0x74>
    393e:	93 fd       	sbrc	r25, 3
    3940:	85 91       	lpm	r24, Z+
    3942:	93 ff       	sbrs	r25, 3
    3944:	81 91       	ld	r24, Z+
    3946:	3f 01       	movw	r6, r30
    3948:	85 32       	cpi	r24, 0x25	; 37
    394a:	29 f4       	brne	.+10     	; 0x3956 <vfprintf+0x7e>
    394c:	b7 01       	movw	r22, r14
    394e:	90 e0       	ldi	r25, 0x00	; 0
    3950:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <fputc>
    3954:	e7 cf       	rjmp	.-50     	; 0x3924 <vfprintf+0x4c>
    3956:	91 2c       	mov	r9, r1
    3958:	21 2c       	mov	r2, r1
    395a:	31 2c       	mov	r3, r1
    395c:	ff e1       	ldi	r31, 0x1F	; 31
    395e:	f3 15       	cp	r31, r3
    3960:	38 f0       	brcs	.+14     	; 0x3970 <vfprintf+0x98>
    3962:	8b 32       	cpi	r24, 0x2B	; 43
    3964:	11 f1       	breq	.+68     	; 0x39aa <vfprintf+0xd2>
    3966:	90 f4       	brcc	.+36     	; 0x398c <vfprintf+0xb4>
    3968:	80 32       	cpi	r24, 0x20	; 32
    396a:	09 f1       	breq	.+66     	; 0x39ae <vfprintf+0xd6>
    396c:	83 32       	cpi	r24, 0x23	; 35
    396e:	29 f1       	breq	.+74     	; 0x39ba <vfprintf+0xe2>
    3970:	37 fc       	sbrc	r3, 7
    3972:	3c c0       	rjmp	.+120    	; 0x39ec <vfprintf+0x114>
    3974:	20 ed       	ldi	r18, 0xD0	; 208
    3976:	28 0f       	add	r18, r24
    3978:	2a 30       	cpi	r18, 0x0A	; 10
    397a:	50 f5       	brcc	.+84     	; 0x39d0 <vfprintf+0xf8>
    397c:	36 fe       	sbrs	r3, 6
    397e:	20 c0       	rjmp	.+64     	; 0x39c0 <vfprintf+0xe8>
    3980:	8a e0       	ldi	r24, 0x0A	; 10
    3982:	98 9e       	mul	r9, r24
    3984:	20 0d       	add	r18, r0
    3986:	11 24       	eor	r1, r1
    3988:	92 2e       	mov	r9, r18
    398a:	06 c0       	rjmp	.+12     	; 0x3998 <vfprintf+0xc0>
    398c:	8d 32       	cpi	r24, 0x2D	; 45
    398e:	91 f0       	breq	.+36     	; 0x39b4 <vfprintf+0xdc>
    3990:	80 33       	cpi	r24, 0x30	; 48
    3992:	71 f7       	brne	.-36     	; 0x3970 <vfprintf+0x98>
    3994:	68 94       	set
    3996:	30 f8       	bld	r3, 0
    3998:	f3 01       	movw	r30, r6
    399a:	93 fd       	sbrc	r25, 3
    399c:	85 91       	lpm	r24, Z+
    399e:	93 ff       	sbrs	r25, 3
    39a0:	81 91       	ld	r24, Z+
    39a2:	3f 01       	movw	r6, r30
    39a4:	81 11       	cpse	r24, r1
    39a6:	da cf       	rjmp	.-76     	; 0x395c <vfprintf+0x84>
    39a8:	21 c0       	rjmp	.+66     	; 0x39ec <vfprintf+0x114>
    39aa:	68 94       	set
    39ac:	31 f8       	bld	r3, 1
    39ae:	68 94       	set
    39b0:	32 f8       	bld	r3, 2
    39b2:	f2 cf       	rjmp	.-28     	; 0x3998 <vfprintf+0xc0>
    39b4:	68 94       	set
    39b6:	33 f8       	bld	r3, 3
    39b8:	ef cf       	rjmp	.-34     	; 0x3998 <vfprintf+0xc0>
    39ba:	68 94       	set
    39bc:	34 f8       	bld	r3, 4
    39be:	ec cf       	rjmp	.-40     	; 0x3998 <vfprintf+0xc0>
    39c0:	ea e0       	ldi	r30, 0x0A	; 10
    39c2:	2e 9e       	mul	r2, r30
    39c4:	20 0d       	add	r18, r0
    39c6:	11 24       	eor	r1, r1
    39c8:	22 2e       	mov	r2, r18
    39ca:	68 94       	set
    39cc:	35 f8       	bld	r3, 5
    39ce:	e4 cf       	rjmp	.-56     	; 0x3998 <vfprintf+0xc0>
    39d0:	8e 32       	cpi	r24, 0x2E	; 46
    39d2:	29 f4       	brne	.+10     	; 0x39de <vfprintf+0x106>
    39d4:	36 fc       	sbrc	r3, 6
    39d6:	04 c1       	rjmp	.+520    	; 0x3be0 <vfprintf+0x308>
    39d8:	68 94       	set
    39da:	36 f8       	bld	r3, 6
    39dc:	dd cf       	rjmp	.-70     	; 0x3998 <vfprintf+0xc0>
    39de:	8c 36       	cpi	r24, 0x6C	; 108
    39e0:	19 f4       	brne	.+6      	; 0x39e8 <vfprintf+0x110>
    39e2:	68 94       	set
    39e4:	37 f8       	bld	r3, 7
    39e6:	d8 cf       	rjmp	.-80     	; 0x3998 <vfprintf+0xc0>
    39e8:	88 36       	cpi	r24, 0x68	; 104
    39ea:	b1 f2       	breq	.-84     	; 0x3998 <vfprintf+0xc0>
    39ec:	98 2f       	mov	r25, r24
    39ee:	9f 7d       	andi	r25, 0xDF	; 223
    39f0:	95 54       	subi	r25, 0x45	; 69
    39f2:	93 30       	cpi	r25, 0x03	; 3
    39f4:	e0 f0       	brcs	.+56     	; 0x3a2e <vfprintf+0x156>
    39f6:	83 36       	cpi	r24, 0x63	; 99
    39f8:	a1 f1       	breq	.+104    	; 0x3a62 <vfprintf+0x18a>
    39fa:	83 37       	cpi	r24, 0x73	; 115
    39fc:	c1 f1       	breq	.+112    	; 0x3a6e <vfprintf+0x196>
    39fe:	83 35       	cpi	r24, 0x53	; 83
    3a00:	09 f0       	breq	.+2      	; 0x3a04 <vfprintf+0x12c>
    3a02:	63 c0       	rjmp	.+198    	; 0x3aca <vfprintf+0x1f2>
    3a04:	28 01       	movw	r4, r16
    3a06:	f2 e0       	ldi	r31, 0x02	; 2
    3a08:	4f 0e       	add	r4, r31
    3a0a:	51 1c       	adc	r5, r1
    3a0c:	f8 01       	movw	r30, r16
    3a0e:	c0 80       	ld	r12, Z
    3a10:	d1 80       	ldd	r13, Z+1	; 0x01
    3a12:	69 2d       	mov	r22, r9
    3a14:	70 e0       	ldi	r23, 0x00	; 0
    3a16:	36 fc       	sbrc	r3, 6
    3a18:	02 c0       	rjmp	.+4      	; 0x3a1e <vfprintf+0x146>
    3a1a:	6f ef       	ldi	r22, 0xFF	; 255
    3a1c:	7f ef       	ldi	r23, 0xFF	; 255
    3a1e:	c6 01       	movw	r24, r12
    3a20:	0e 94 6f 1e 	call	0x3cde	; 0x3cde <strnlen_P>
    3a24:	4c 01       	movw	r8, r24
    3a26:	68 94       	set
    3a28:	37 f8       	bld	r3, 7
    3a2a:	82 01       	movw	r16, r4
    3a2c:	0a c0       	rjmp	.+20     	; 0x3a42 <vfprintf+0x16a>
    3a2e:	0c 5f       	subi	r16, 0xFC	; 252
    3a30:	1f 4f       	sbci	r17, 0xFF	; 255
    3a32:	ff e3       	ldi	r31, 0x3F	; 63
    3a34:	f9 83       	std	Y+1, r31	; 0x01
    3a36:	88 24       	eor	r8, r8
    3a38:	83 94       	inc	r8
    3a3a:	91 2c       	mov	r9, r1
    3a3c:	65 01       	movw	r12, r10
    3a3e:	e8 94       	clt
    3a40:	37 f8       	bld	r3, 7
    3a42:	33 fe       	sbrs	r3, 3
    3a44:	2d c0       	rjmp	.+90     	; 0x3aa0 <vfprintf+0x1c8>
    3a46:	52 2c       	mov	r5, r2
    3a48:	81 14       	cp	r8, r1
    3a4a:	91 04       	cpc	r9, r1
    3a4c:	71 f5       	brne	.+92     	; 0x3aaa <vfprintf+0x1d2>
    3a4e:	55 20       	and	r5, r5
    3a50:	09 f4       	brne	.+2      	; 0x3a54 <vfprintf+0x17c>
    3a52:	68 cf       	rjmp	.-304    	; 0x3924 <vfprintf+0x4c>
    3a54:	b7 01       	movw	r22, r14
    3a56:	80 e2       	ldi	r24, 0x20	; 32
    3a58:	90 e0       	ldi	r25, 0x00	; 0
    3a5a:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <fputc>
    3a5e:	5a 94       	dec	r5
    3a60:	f6 cf       	rjmp	.-20     	; 0x3a4e <vfprintf+0x176>
    3a62:	f8 01       	movw	r30, r16
    3a64:	80 81       	ld	r24, Z
    3a66:	89 83       	std	Y+1, r24	; 0x01
    3a68:	0e 5f       	subi	r16, 0xFE	; 254
    3a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    3a6c:	e4 cf       	rjmp	.-56     	; 0x3a36 <vfprintf+0x15e>
    3a6e:	28 01       	movw	r4, r16
    3a70:	f2 e0       	ldi	r31, 0x02	; 2
    3a72:	4f 0e       	add	r4, r31
    3a74:	51 1c       	adc	r5, r1
    3a76:	f8 01       	movw	r30, r16
    3a78:	c0 80       	ld	r12, Z
    3a7a:	d1 80       	ldd	r13, Z+1	; 0x01
    3a7c:	69 2d       	mov	r22, r9
    3a7e:	70 e0       	ldi	r23, 0x00	; 0
    3a80:	36 fc       	sbrc	r3, 6
    3a82:	02 c0       	rjmp	.+4      	; 0x3a88 <vfprintf+0x1b0>
    3a84:	6f ef       	ldi	r22, 0xFF	; 255
    3a86:	7f ef       	ldi	r23, 0xFF	; 255
    3a88:	c6 01       	movw	r24, r12
    3a8a:	0e 94 7a 1e 	call	0x3cf4	; 0x3cf4 <strnlen>
    3a8e:	4c 01       	movw	r8, r24
    3a90:	82 01       	movw	r16, r4
    3a92:	d5 cf       	rjmp	.-86     	; 0x3a3e <vfprintf+0x166>
    3a94:	b7 01       	movw	r22, r14
    3a96:	80 e2       	ldi	r24, 0x20	; 32
    3a98:	90 e0       	ldi	r25, 0x00	; 0
    3a9a:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <fputc>
    3a9e:	2a 94       	dec	r2
    3aa0:	28 14       	cp	r2, r8
    3aa2:	19 04       	cpc	r1, r9
    3aa4:	09 f0       	breq	.+2      	; 0x3aa8 <vfprintf+0x1d0>
    3aa6:	b0 f7       	brcc	.-20     	; 0x3a94 <vfprintf+0x1bc>
    3aa8:	ce cf       	rjmp	.-100    	; 0x3a46 <vfprintf+0x16e>
    3aaa:	f6 01       	movw	r30, r12
    3aac:	37 fc       	sbrc	r3, 7
    3aae:	85 91       	lpm	r24, Z+
    3ab0:	37 fe       	sbrs	r3, 7
    3ab2:	81 91       	ld	r24, Z+
    3ab4:	6f 01       	movw	r12, r30
    3ab6:	b7 01       	movw	r22, r14
    3ab8:	90 e0       	ldi	r25, 0x00	; 0
    3aba:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <fputc>
    3abe:	51 10       	cpse	r5, r1
    3ac0:	5a 94       	dec	r5
    3ac2:	f1 e0       	ldi	r31, 0x01	; 1
    3ac4:	8f 1a       	sub	r8, r31
    3ac6:	91 08       	sbc	r9, r1
    3ac8:	bf cf       	rjmp	.-130    	; 0x3a48 <vfprintf+0x170>
    3aca:	84 36       	cpi	r24, 0x64	; 100
    3acc:	19 f0       	breq	.+6      	; 0x3ad4 <vfprintf+0x1fc>
    3ace:	89 36       	cpi	r24, 0x69	; 105
    3ad0:	09 f0       	breq	.+2      	; 0x3ad4 <vfprintf+0x1fc>
    3ad2:	77 c0       	rjmp	.+238    	; 0x3bc2 <vfprintf+0x2ea>
    3ad4:	f8 01       	movw	r30, r16
    3ad6:	37 fe       	sbrs	r3, 7
    3ad8:	6b c0       	rjmp	.+214    	; 0x3bb0 <vfprintf+0x2d8>
    3ada:	60 81       	ld	r22, Z
    3adc:	71 81       	ldd	r23, Z+1	; 0x01
    3ade:	82 81       	ldd	r24, Z+2	; 0x02
    3ae0:	93 81       	ldd	r25, Z+3	; 0x03
    3ae2:	0c 5f       	subi	r16, 0xFC	; 252
    3ae4:	1f 4f       	sbci	r17, 0xFF	; 255
    3ae6:	f3 2d       	mov	r31, r3
    3ae8:	ff 76       	andi	r31, 0x6F	; 111
    3aea:	3f 2e       	mov	r3, r31
    3aec:	97 ff       	sbrs	r25, 7
    3aee:	09 c0       	rjmp	.+18     	; 0x3b02 <vfprintf+0x22a>
    3af0:	90 95       	com	r25
    3af2:	80 95       	com	r24
    3af4:	70 95       	com	r23
    3af6:	61 95       	neg	r22
    3af8:	7f 4f       	sbci	r23, 0xFF	; 255
    3afa:	8f 4f       	sbci	r24, 0xFF	; 255
    3afc:	9f 4f       	sbci	r25, 0xFF	; 255
    3afe:	68 94       	set
    3b00:	37 f8       	bld	r3, 7
    3b02:	2a e0       	ldi	r18, 0x0A	; 10
    3b04:	30 e0       	ldi	r19, 0x00	; 0
    3b06:	a5 01       	movw	r20, r10
    3b08:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <__ultoa_invert>
    3b0c:	c8 2e       	mov	r12, r24
    3b0e:	ca 18       	sub	r12, r10
    3b10:	8c 2c       	mov	r8, r12
    3b12:	43 2c       	mov	r4, r3
    3b14:	36 fe       	sbrs	r3, 6
    3b16:	0c c0       	rjmp	.+24     	; 0x3b30 <vfprintf+0x258>
    3b18:	e8 94       	clt
    3b1a:	40 f8       	bld	r4, 0
    3b1c:	c9 14       	cp	r12, r9
    3b1e:	40 f4       	brcc	.+16     	; 0x3b30 <vfprintf+0x258>
    3b20:	34 fe       	sbrs	r3, 4
    3b22:	05 c0       	rjmp	.+10     	; 0x3b2e <vfprintf+0x256>
    3b24:	32 fc       	sbrc	r3, 2
    3b26:	03 c0       	rjmp	.+6      	; 0x3b2e <vfprintf+0x256>
    3b28:	f3 2d       	mov	r31, r3
    3b2a:	fe 7e       	andi	r31, 0xEE	; 238
    3b2c:	4f 2e       	mov	r4, r31
    3b2e:	89 2c       	mov	r8, r9
    3b30:	44 fe       	sbrs	r4, 4
    3b32:	aa c0       	rjmp	.+340    	; 0x3c88 <vfprintf+0x3b0>
    3b34:	fe 01       	movw	r30, r28
    3b36:	ec 0d       	add	r30, r12
    3b38:	f1 1d       	adc	r31, r1
    3b3a:	80 81       	ld	r24, Z
    3b3c:	80 33       	cpi	r24, 0x30	; 48
    3b3e:	09 f0       	breq	.+2      	; 0x3b42 <vfprintf+0x26a>
    3b40:	9c c0       	rjmp	.+312    	; 0x3c7a <vfprintf+0x3a2>
    3b42:	24 2d       	mov	r18, r4
    3b44:	29 7e       	andi	r18, 0xE9	; 233
    3b46:	42 2e       	mov	r4, r18
    3b48:	84 2d       	mov	r24, r4
    3b4a:	88 70       	andi	r24, 0x08	; 8
    3b4c:	58 2e       	mov	r5, r24
    3b4e:	43 fc       	sbrc	r4, 3
    3b50:	aa c0       	rjmp	.+340    	; 0x3ca6 <vfprintf+0x3ce>
    3b52:	40 fe       	sbrs	r4, 0
    3b54:	a4 c0       	rjmp	.+328    	; 0x3c9e <vfprintf+0x3c6>
    3b56:	9c 2c       	mov	r9, r12
    3b58:	82 14       	cp	r8, r2
    3b5a:	18 f4       	brcc	.+6      	; 0x3b62 <vfprintf+0x28a>
    3b5c:	2c 0c       	add	r2, r12
    3b5e:	92 2c       	mov	r9, r2
    3b60:	98 18       	sub	r9, r8
    3b62:	44 fe       	sbrs	r4, 4
    3b64:	a6 c0       	rjmp	.+332    	; 0x3cb2 <vfprintf+0x3da>
    3b66:	b7 01       	movw	r22, r14
    3b68:	80 e3       	ldi	r24, 0x30	; 48
    3b6a:	90 e0       	ldi	r25, 0x00	; 0
    3b6c:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <fputc>
    3b70:	42 fe       	sbrs	r4, 2
    3b72:	09 c0       	rjmp	.+18     	; 0x3b86 <vfprintf+0x2ae>
    3b74:	88 e7       	ldi	r24, 0x78	; 120
    3b76:	90 e0       	ldi	r25, 0x00	; 0
    3b78:	41 fe       	sbrs	r4, 1
    3b7a:	02 c0       	rjmp	.+4      	; 0x3b80 <vfprintf+0x2a8>
    3b7c:	88 e5       	ldi	r24, 0x58	; 88
    3b7e:	90 e0       	ldi	r25, 0x00	; 0
    3b80:	b7 01       	movw	r22, r14
    3b82:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <fputc>
    3b86:	c9 14       	cp	r12, r9
    3b88:	08 f4       	brcc	.+2      	; 0x3b8c <vfprintf+0x2b4>
    3b8a:	9f c0       	rjmp	.+318    	; 0x3cca <vfprintf+0x3f2>
    3b8c:	ca 94       	dec	r12
    3b8e:	d1 2c       	mov	r13, r1
    3b90:	9f ef       	ldi	r25, 0xFF	; 255
    3b92:	c9 1a       	sub	r12, r25
    3b94:	d9 0a       	sbc	r13, r25
    3b96:	ca 0c       	add	r12, r10
    3b98:	db 1c       	adc	r13, r11
    3b9a:	f6 01       	movw	r30, r12
    3b9c:	82 91       	ld	r24, -Z
    3b9e:	6f 01       	movw	r12, r30
    3ba0:	b7 01       	movw	r22, r14
    3ba2:	90 e0       	ldi	r25, 0x00	; 0
    3ba4:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <fputc>
    3ba8:	ac 14       	cp	r10, r12
    3baa:	bd 04       	cpc	r11, r13
    3bac:	b1 f7       	brne	.-20     	; 0x3b9a <vfprintf+0x2c2>
    3bae:	4f cf       	rjmp	.-354    	; 0x3a4e <vfprintf+0x176>
    3bb0:	60 81       	ld	r22, Z
    3bb2:	71 81       	ldd	r23, Z+1	; 0x01
    3bb4:	07 2e       	mov	r0, r23
    3bb6:	00 0c       	add	r0, r0
    3bb8:	88 0b       	sbc	r24, r24
    3bba:	99 0b       	sbc	r25, r25
    3bbc:	0e 5f       	subi	r16, 0xFE	; 254
    3bbe:	1f 4f       	sbci	r17, 0xFF	; 255
    3bc0:	92 cf       	rjmp	.-220    	; 0x3ae6 <vfprintf+0x20e>
    3bc2:	d3 2c       	mov	r13, r3
    3bc4:	e8 94       	clt
    3bc6:	d4 f8       	bld	r13, 4
    3bc8:	2a e0       	ldi	r18, 0x0A	; 10
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	85 37       	cpi	r24, 0x75	; 117
    3bce:	e1 f1       	breq	.+120    	; 0x3c48 <vfprintf+0x370>
    3bd0:	23 2d       	mov	r18, r3
    3bd2:	29 7f       	andi	r18, 0xF9	; 249
    3bd4:	d2 2e       	mov	r13, r18
    3bd6:	8f 36       	cpi	r24, 0x6F	; 111
    3bd8:	a9 f1       	breq	.+106    	; 0x3c44 <vfprintf+0x36c>
    3bda:	f0 f4       	brcc	.+60     	; 0x3c18 <vfprintf+0x340>
    3bdc:	88 35       	cpi	r24, 0x58	; 88
    3bde:	51 f1       	breq	.+84     	; 0x3c34 <vfprintf+0x35c>
    3be0:	f7 01       	movw	r30, r14
    3be2:	86 81       	ldd	r24, Z+6	; 0x06
    3be4:	97 81       	ldd	r25, Z+7	; 0x07
    3be6:	2b 96       	adiw	r28, 0x0b	; 11
    3be8:	0f b6       	in	r0, 0x3f	; 63
    3bea:	f8 94       	cli
    3bec:	de bf       	out	0x3e, r29	; 62
    3bee:	0f be       	out	0x3f, r0	; 63
    3bf0:	cd bf       	out	0x3d, r28	; 61
    3bf2:	df 91       	pop	r29
    3bf4:	cf 91       	pop	r28
    3bf6:	1f 91       	pop	r17
    3bf8:	0f 91       	pop	r16
    3bfa:	ff 90       	pop	r15
    3bfc:	ef 90       	pop	r14
    3bfe:	df 90       	pop	r13
    3c00:	cf 90       	pop	r12
    3c02:	bf 90       	pop	r11
    3c04:	af 90       	pop	r10
    3c06:	9f 90       	pop	r9
    3c08:	8f 90       	pop	r8
    3c0a:	7f 90       	pop	r7
    3c0c:	6f 90       	pop	r6
    3c0e:	5f 90       	pop	r5
    3c10:	4f 90       	pop	r4
    3c12:	3f 90       	pop	r3
    3c14:	2f 90       	pop	r2
    3c16:	08 95       	ret
    3c18:	80 37       	cpi	r24, 0x70	; 112
    3c1a:	49 f0       	breq	.+18     	; 0x3c2e <vfprintf+0x356>
    3c1c:	88 37       	cpi	r24, 0x78	; 120
    3c1e:	01 f7       	brne	.-64     	; 0x3be0 <vfprintf+0x308>
    3c20:	d4 fe       	sbrs	r13, 4
    3c22:	02 c0       	rjmp	.+4      	; 0x3c28 <vfprintf+0x350>
    3c24:	68 94       	set
    3c26:	d2 f8       	bld	r13, 2
    3c28:	20 e1       	ldi	r18, 0x10	; 16
    3c2a:	30 e0       	ldi	r19, 0x00	; 0
    3c2c:	0d c0       	rjmp	.+26     	; 0x3c48 <vfprintf+0x370>
    3c2e:	68 94       	set
    3c30:	d4 f8       	bld	r13, 4
    3c32:	f6 cf       	rjmp	.-20     	; 0x3c20 <vfprintf+0x348>
    3c34:	34 fe       	sbrs	r3, 4
    3c36:	03 c0       	rjmp	.+6      	; 0x3c3e <vfprintf+0x366>
    3c38:	82 2f       	mov	r24, r18
    3c3a:	86 60       	ori	r24, 0x06	; 6
    3c3c:	d8 2e       	mov	r13, r24
    3c3e:	20 e1       	ldi	r18, 0x10	; 16
    3c40:	32 e0       	ldi	r19, 0x02	; 2
    3c42:	02 c0       	rjmp	.+4      	; 0x3c48 <vfprintf+0x370>
    3c44:	28 e0       	ldi	r18, 0x08	; 8
    3c46:	30 e0       	ldi	r19, 0x00	; 0
    3c48:	f8 01       	movw	r30, r16
    3c4a:	d7 fe       	sbrs	r13, 7
    3c4c:	0f c0       	rjmp	.+30     	; 0x3c6c <vfprintf+0x394>
    3c4e:	60 81       	ld	r22, Z
    3c50:	71 81       	ldd	r23, Z+1	; 0x01
    3c52:	82 81       	ldd	r24, Z+2	; 0x02
    3c54:	93 81       	ldd	r25, Z+3	; 0x03
    3c56:	0c 5f       	subi	r16, 0xFC	; 252
    3c58:	1f 4f       	sbci	r17, 0xFF	; 255
    3c5a:	a5 01       	movw	r20, r10
    3c5c:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <__ultoa_invert>
    3c60:	c8 2e       	mov	r12, r24
    3c62:	ca 18       	sub	r12, r10
    3c64:	3d 2c       	mov	r3, r13
    3c66:	e8 94       	clt
    3c68:	37 f8       	bld	r3, 7
    3c6a:	52 cf       	rjmp	.-348    	; 0x3b10 <vfprintf+0x238>
    3c6c:	60 81       	ld	r22, Z
    3c6e:	71 81       	ldd	r23, Z+1	; 0x01
    3c70:	90 e0       	ldi	r25, 0x00	; 0
    3c72:	80 e0       	ldi	r24, 0x00	; 0
    3c74:	0e 5f       	subi	r16, 0xFE	; 254
    3c76:	1f 4f       	sbci	r17, 0xFF	; 255
    3c78:	f0 cf       	rjmp	.-32     	; 0x3c5a <vfprintf+0x382>
    3c7a:	42 fc       	sbrc	r4, 2
    3c7c:	02 c0       	rjmp	.+4      	; 0x3c82 <vfprintf+0x3aa>
    3c7e:	83 94       	inc	r8
    3c80:	63 cf       	rjmp	.-314    	; 0x3b48 <vfprintf+0x270>
    3c82:	83 94       	inc	r8
    3c84:	83 94       	inc	r8
    3c86:	60 cf       	rjmp	.-320    	; 0x3b48 <vfprintf+0x270>
    3c88:	84 2d       	mov	r24, r4
    3c8a:	86 78       	andi	r24, 0x86	; 134
    3c8c:	09 f4       	brne	.+2      	; 0x3c90 <vfprintf+0x3b8>
    3c8e:	5c cf       	rjmp	.-328    	; 0x3b48 <vfprintf+0x270>
    3c90:	f6 cf       	rjmp	.-20     	; 0x3c7e <vfprintf+0x3a6>
    3c92:	b7 01       	movw	r22, r14
    3c94:	80 e2       	ldi	r24, 0x20	; 32
    3c96:	90 e0       	ldi	r25, 0x00	; 0
    3c98:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <fputc>
    3c9c:	83 94       	inc	r8
    3c9e:	82 14       	cp	r8, r2
    3ca0:	c0 f3       	brcs	.-16     	; 0x3c92 <vfprintf+0x3ba>
    3ca2:	51 2c       	mov	r5, r1
    3ca4:	5e cf       	rjmp	.-324    	; 0x3b62 <vfprintf+0x28a>
    3ca6:	52 2c       	mov	r5, r2
    3ca8:	58 18       	sub	r5, r8
    3caa:	82 14       	cp	r8, r2
    3cac:	08 f4       	brcc	.+2      	; 0x3cb0 <vfprintf+0x3d8>
    3cae:	59 cf       	rjmp	.-334    	; 0x3b62 <vfprintf+0x28a>
    3cb0:	f8 cf       	rjmp	.-16     	; 0x3ca2 <vfprintf+0x3ca>
    3cb2:	84 2d       	mov	r24, r4
    3cb4:	86 78       	andi	r24, 0x86	; 134
    3cb6:	09 f4       	brne	.+2      	; 0x3cba <vfprintf+0x3e2>
    3cb8:	66 cf       	rjmp	.-308    	; 0x3b86 <vfprintf+0x2ae>
    3cba:	8b e2       	ldi	r24, 0x2B	; 43
    3cbc:	41 fe       	sbrs	r4, 1
    3cbe:	80 e2       	ldi	r24, 0x20	; 32
    3cc0:	47 fc       	sbrc	r4, 7
    3cc2:	8d e2       	ldi	r24, 0x2D	; 45
    3cc4:	b7 01       	movw	r22, r14
    3cc6:	90 e0       	ldi	r25, 0x00	; 0
    3cc8:	5c cf       	rjmp	.-328    	; 0x3b82 <vfprintf+0x2aa>
    3cca:	b7 01       	movw	r22, r14
    3ccc:	80 e3       	ldi	r24, 0x30	; 48
    3cce:	90 e0       	ldi	r25, 0x00	; 0
    3cd0:	0e 94 85 1e 	call	0x3d0a	; 0x3d0a <fputc>
    3cd4:	9a 94       	dec	r9
    3cd6:	57 cf       	rjmp	.-338    	; 0x3b86 <vfprintf+0x2ae>
    3cd8:	8f ef       	ldi	r24, 0xFF	; 255
    3cda:	9f ef       	ldi	r25, 0xFF	; 255
    3cdc:	84 cf       	rjmp	.-248    	; 0x3be6 <vfprintf+0x30e>

00003cde <strnlen_P>:
strnlen_P():
    3cde:	fc 01       	movw	r30, r24
    3ce0:	05 90       	lpm	r0, Z+
    3ce2:	61 50       	subi	r22, 0x01	; 1
    3ce4:	70 40       	sbci	r23, 0x00	; 0
    3ce6:	01 10       	cpse	r0, r1
    3ce8:	d8 f7       	brcc	.-10     	; 0x3ce0 <strnlen_P+0x2>
    3cea:	80 95       	com	r24
    3cec:	90 95       	com	r25
    3cee:	8e 0f       	add	r24, r30
    3cf0:	9f 1f       	adc	r25, r31
    3cf2:	08 95       	ret

00003cf4 <strnlen>:
strnlen():
    3cf4:	fc 01       	movw	r30, r24
    3cf6:	61 50       	subi	r22, 0x01	; 1
    3cf8:	70 40       	sbci	r23, 0x00	; 0
    3cfa:	01 90       	ld	r0, Z+
    3cfc:	01 10       	cpse	r0, r1
    3cfe:	d8 f7       	brcc	.-10     	; 0x3cf6 <strnlen+0x2>
    3d00:	80 95       	com	r24
    3d02:	90 95       	com	r25
    3d04:	8e 0f       	add	r24, r30
    3d06:	9f 1f       	adc	r25, r31
    3d08:	08 95       	ret

00003d0a <fputc>:
fputc():
    3d0a:	0f 93       	push	r16
    3d0c:	1f 93       	push	r17
    3d0e:	cf 93       	push	r28
    3d10:	df 93       	push	r29
    3d12:	18 2f       	mov	r17, r24
    3d14:	09 2f       	mov	r16, r25
    3d16:	eb 01       	movw	r28, r22
    3d18:	8b 81       	ldd	r24, Y+3	; 0x03
    3d1a:	81 fd       	sbrc	r24, 1
    3d1c:	09 c0       	rjmp	.+18     	; 0x3d30 <fputc+0x26>
    3d1e:	1f ef       	ldi	r17, 0xFF	; 255
    3d20:	0f ef       	ldi	r16, 0xFF	; 255
    3d22:	81 2f       	mov	r24, r17
    3d24:	90 2f       	mov	r25, r16
    3d26:	df 91       	pop	r29
    3d28:	cf 91       	pop	r28
    3d2a:	1f 91       	pop	r17
    3d2c:	0f 91       	pop	r16
    3d2e:	08 95       	ret
    3d30:	82 ff       	sbrs	r24, 2
    3d32:	14 c0       	rjmp	.+40     	; 0x3d5c <fputc+0x52>
    3d34:	2e 81       	ldd	r18, Y+6	; 0x06
    3d36:	3f 81       	ldd	r19, Y+7	; 0x07
    3d38:	8c 81       	ldd	r24, Y+4	; 0x04
    3d3a:	9d 81       	ldd	r25, Y+5	; 0x05
    3d3c:	28 17       	cp	r18, r24
    3d3e:	39 07       	cpc	r19, r25
    3d40:	3c f4       	brge	.+14     	; 0x3d50 <fputc+0x46>
    3d42:	e8 81       	ld	r30, Y
    3d44:	f9 81       	ldd	r31, Y+1	; 0x01
    3d46:	cf 01       	movw	r24, r30
    3d48:	01 96       	adiw	r24, 0x01	; 1
    3d4a:	99 83       	std	Y+1, r25	; 0x01
    3d4c:	88 83       	st	Y, r24
    3d4e:	10 83       	st	Z, r17
    3d50:	8e 81       	ldd	r24, Y+6	; 0x06
    3d52:	9f 81       	ldd	r25, Y+7	; 0x07
    3d54:	01 96       	adiw	r24, 0x01	; 1
    3d56:	9f 83       	std	Y+7, r25	; 0x07
    3d58:	8e 83       	std	Y+6, r24	; 0x06
    3d5a:	e3 cf       	rjmp	.-58     	; 0x3d22 <fputc+0x18>
    3d5c:	e8 85       	ldd	r30, Y+8	; 0x08
    3d5e:	f9 85       	ldd	r31, Y+9	; 0x09
    3d60:	81 2f       	mov	r24, r17
    3d62:	09 95       	icall
    3d64:	89 2b       	or	r24, r25
    3d66:	a1 f3       	breq	.-24     	; 0x3d50 <fputc+0x46>
    3d68:	da cf       	rjmp	.-76     	; 0x3d1e <fputc+0x14>

00003d6a <__ultoa_invert>:
__ultoa_invert():
    3d6a:	fa 01       	movw	r30, r20
    3d6c:	aa 27       	eor	r26, r26
    3d6e:	28 30       	cpi	r18, 0x08	; 8
    3d70:	51 f1       	breq	.+84     	; 0x3dc6 <__ultoa_invert+0x5c>
    3d72:	20 31       	cpi	r18, 0x10	; 16
    3d74:	81 f1       	breq	.+96     	; 0x3dd6 <__ultoa_invert+0x6c>
    3d76:	e8 94       	clt
    3d78:	6f 93       	push	r22
    3d7a:	6e 7f       	andi	r22, 0xFE	; 254
    3d7c:	6e 5f       	subi	r22, 0xFE	; 254
    3d7e:	7f 4f       	sbci	r23, 0xFF	; 255
    3d80:	8f 4f       	sbci	r24, 0xFF	; 255
    3d82:	9f 4f       	sbci	r25, 0xFF	; 255
    3d84:	af 4f       	sbci	r26, 0xFF	; 255
    3d86:	b1 e0       	ldi	r27, 0x01	; 1
    3d88:	3e d0       	rcall	.+124    	; 0x3e06 <__ultoa_invert+0x9c>
    3d8a:	b4 e0       	ldi	r27, 0x04	; 4
    3d8c:	3c d0       	rcall	.+120    	; 0x3e06 <__ultoa_invert+0x9c>
    3d8e:	67 0f       	add	r22, r23
    3d90:	78 1f       	adc	r23, r24
    3d92:	89 1f       	adc	r24, r25
    3d94:	9a 1f       	adc	r25, r26
    3d96:	a1 1d       	adc	r26, r1
    3d98:	68 0f       	add	r22, r24
    3d9a:	79 1f       	adc	r23, r25
    3d9c:	8a 1f       	adc	r24, r26
    3d9e:	91 1d       	adc	r25, r1
    3da0:	a1 1d       	adc	r26, r1
    3da2:	6a 0f       	add	r22, r26
    3da4:	71 1d       	adc	r23, r1
    3da6:	81 1d       	adc	r24, r1
    3da8:	91 1d       	adc	r25, r1
    3daa:	a1 1d       	adc	r26, r1
    3dac:	20 d0       	rcall	.+64     	; 0x3dee <__ultoa_invert+0x84>
    3dae:	09 f4       	brne	.+2      	; 0x3db2 <__ultoa_invert+0x48>
    3db0:	68 94       	set
    3db2:	3f 91       	pop	r19
    3db4:	2a e0       	ldi	r18, 0x0A	; 10
    3db6:	26 9f       	mul	r18, r22
    3db8:	11 24       	eor	r1, r1
    3dba:	30 19       	sub	r19, r0
    3dbc:	30 5d       	subi	r19, 0xD0	; 208
    3dbe:	31 93       	st	Z+, r19
    3dc0:	de f6       	brtc	.-74     	; 0x3d78 <__ultoa_invert+0xe>
    3dc2:	cf 01       	movw	r24, r30
    3dc4:	08 95       	ret
    3dc6:	46 2f       	mov	r20, r22
    3dc8:	47 70       	andi	r20, 0x07	; 7
    3dca:	40 5d       	subi	r20, 0xD0	; 208
    3dcc:	41 93       	st	Z+, r20
    3dce:	b3 e0       	ldi	r27, 0x03	; 3
    3dd0:	0f d0       	rcall	.+30     	; 0x3df0 <__ultoa_invert+0x86>
    3dd2:	c9 f7       	brne	.-14     	; 0x3dc6 <__ultoa_invert+0x5c>
    3dd4:	f6 cf       	rjmp	.-20     	; 0x3dc2 <__ultoa_invert+0x58>
    3dd6:	46 2f       	mov	r20, r22
    3dd8:	4f 70       	andi	r20, 0x0F	; 15
    3dda:	40 5d       	subi	r20, 0xD0	; 208
    3ddc:	4a 33       	cpi	r20, 0x3A	; 58
    3dde:	18 f0       	brcs	.+6      	; 0x3de6 <__ultoa_invert+0x7c>
    3de0:	49 5d       	subi	r20, 0xD9	; 217
    3de2:	31 fd       	sbrc	r19, 1
    3de4:	40 52       	subi	r20, 0x20	; 32
    3de6:	41 93       	st	Z+, r20
    3de8:	02 d0       	rcall	.+4      	; 0x3dee <__ultoa_invert+0x84>
    3dea:	a9 f7       	brne	.-22     	; 0x3dd6 <__ultoa_invert+0x6c>
    3dec:	ea cf       	rjmp	.-44     	; 0x3dc2 <__ultoa_invert+0x58>
    3dee:	b4 e0       	ldi	r27, 0x04	; 4
    3df0:	a6 95       	lsr	r26
    3df2:	97 95       	ror	r25
    3df4:	87 95       	ror	r24
    3df6:	77 95       	ror	r23
    3df8:	67 95       	ror	r22
    3dfa:	ba 95       	dec	r27
    3dfc:	c9 f7       	brne	.-14     	; 0x3df0 <__ultoa_invert+0x86>
    3dfe:	00 97       	sbiw	r24, 0x00	; 0
    3e00:	61 05       	cpc	r22, r1
    3e02:	71 05       	cpc	r23, r1
    3e04:	08 95       	ret
    3e06:	9b 01       	movw	r18, r22
    3e08:	ac 01       	movw	r20, r24
    3e0a:	0a 2e       	mov	r0, r26
    3e0c:	06 94       	lsr	r0
    3e0e:	57 95       	ror	r21
    3e10:	47 95       	ror	r20
    3e12:	37 95       	ror	r19
    3e14:	27 95       	ror	r18
    3e16:	ba 95       	dec	r27
    3e18:	c9 f7       	brne	.-14     	; 0x3e0c <__ultoa_invert+0xa2>
    3e1a:	62 0f       	add	r22, r18
    3e1c:	73 1f       	adc	r23, r19
    3e1e:	84 1f       	adc	r24, r20
    3e20:	95 1f       	adc	r25, r21
    3e22:	a0 1d       	adc	r26, r0
    3e24:	08 95       	ret

00003e26 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    3e26:	f8 94       	cli

00003e28 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    3e28:	ff cf       	rjmp	.-2      	; 0x3e28 <__stop_program>
