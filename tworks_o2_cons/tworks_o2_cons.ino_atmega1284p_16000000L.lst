
C:\Users\habeeba\AppData\Local\Temp\arduino_build_987024/tworks_o2_cons.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 48 01 	jmp	0x290	; 0x290 <__ctors_end>
       4:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
       8:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
       c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      10:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      14:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      18:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      1c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      20:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      24:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      28:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      2c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      30:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      34:	0c 94 0a 08 	jmp	0x1014	; 0x1014 <__vector_13>
      38:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      3c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      40:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      44:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      48:	0c 94 6d 18 	jmp	0x30da	; 0x30da <__vector_18>
      4c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      50:	0c 94 8e 1b 	jmp	0x371c	; 0x371c <__vector_20>
      54:	0c 94 c4 1b 	jmp	0x3788	; 0x3788 <__vector_21>
      58:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      5c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      60:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      64:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      68:	0c 94 48 17 	jmp	0x2e90	; 0x2e90 <__vector_26>
      6c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      70:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      74:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      78:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      7c:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      80:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      84:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>
      88:	0c 94 72 01 	jmp	0x2e4	; 0x2e4 <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	00 40       	sbci	r16, 0x00	; 0
      8e:	7a 10       	cpse	r7, r10
      90:	f3 5a       	subi	r31, 0xA3	; 163
      92:	00 a0       	ldd	r0, Z+32	; 0x20
      94:	72 4e       	sbci	r23, 0xE2	; 226
      96:	18 09       	sbc	r17, r8
      98:	00 10       	cpse	r0, r0
      9a:	a5 d4       	rcall	.+2378   	; 0x9e6 <log_dump()+0x130>
      9c:	e8 00       	.word	0x00e8	; ????
      9e:	00 e8       	ldi	r16, 0x80	; 128
      a0:	76 48       	sbci	r23, 0x86	; 134
      a2:	17 00       	.word	0x0017	; ????
      a4:	00 e4       	ldi	r16, 0x40	; 64
      a6:	0b 54       	subi	r16, 0x4B	; 75
      a8:	02 00       	.word	0x0002	; ????
      aa:	00 ca       	rjmp	.-3072   	; 0xfffff4ac <__eeprom_end+0xff7ef4ac>
      ac:	9a 3b       	cpi	r25, 0xBA	; 186
      ae:	00 00       	nop
      b0:	00 e1       	ldi	r16, 0x10	; 16
      b2:	f5 05       	cpc	r31, r5
      b4:	00 00       	nop
      b6:	80 96       	adiw	r24, 0x20	; 32
      b8:	98 00       	.word	0x0098	; ????
      ba:	00 00       	nop
      bc:	40 42       	sbci	r20, 0x20	; 32
      be:	0f 00       	.word	0x000f	; ????
      c0:	00 00       	nop
      c2:	a0 86       	std	Z+8, r10	; 0x08
      c4:	01 00       	.word	0x0001	; ????
      c6:	00 00       	nop
      c8:	10 27       	eor	r17, r16
      ca:	00 00       	nop
      cc:	00 00       	nop
      ce:	e8 03       	fmulsu	r22, r16
      d0:	00 00       	nop
      d2:	00 00       	nop
      d4:	64 00       	.word	0x0064	; ????
      d6:	00 00       	nop
      d8:	00 00       	nop
      da:	0a 00       	.word	0x000a	; ????
      dc:	00 00       	nop
      de:	00 00       	nop
      e0:	01 00       	.word	0x0001	; ????
      e2:	00 00       	nop
      e4:	00 00       	nop
      e6:	2c 76       	andi	r18, 0x6C	; 108
      e8:	d8 88       	ldd	r13, Y+16	; 0x10
      ea:	dc 67       	ori	r29, 0x7C	; 124
      ec:	4f 08       	sbc	r4, r15
      ee:	23 df       	rcall	.-442    	; 0xffffff36 <__eeprom_end+0xff7eff36>
      f0:	c1 df       	rcall	.-126    	; 0x74 <__SREG__+0x35>
      f2:	ae 59       	subi	r26, 0x9E	; 158
      f4:	e1 b1       	in	r30, 0x01	; 1
      f6:	b7 96       	adiw	r30, 0x27	; 39
      f8:	e5 e3       	ldi	r30, 0x35	; 53
      fa:	e4 53       	subi	r30, 0x34	; 52
      fc:	c6 3a       	cpi	r28, 0xA6	; 166
      fe:	e6 51       	subi	r30, 0x16	; 22
     100:	99 76       	andi	r25, 0x69	; 105
     102:	96 e8       	ldi	r25, 0x86	; 134
     104:	e6 c2       	rjmp	.+1484   	; 0x6d2 <display_run_hours(unsigned long)+0x102>
     106:	84 26       	eor	r8, r20
     108:	eb 89       	ldd	r30, Y+19	; 0x13
     10a:	8c 9b       	sbis	0x11, 4	; 17
     10c:	62 ed       	ldi	r22, 0xD2	; 210
     10e:	40 7c       	andi	r20, 0xC0	; 192
     110:	6f fc       	.word	0xfc6f	; ????
     112:	ef bc       	out	0x2f, r14	; 47
     114:	9c 9f       	mul	r25, r28
     116:	40 f2       	brcs	.-112    	; 0xa8 <__trampolines_end+0x1c>
     118:	ba a5       	ldd	r27, Y+42	; 0x2a
     11a:	6f a5       	ldd	r22, Y+47	; 0x2f
     11c:	f4 90       	lpm	r15, Z
     11e:	05 5a       	subi	r16, 0xA5	; 165
     120:	2a f7       	brpl	.-54     	; 0xec <__trampolines_end+0x60>
     122:	5c 93       	st	X, r21
     124:	6b 6c       	ori	r22, 0xCB	; 203
     126:	f9 67       	ori	r31, 0x79	; 121
     128:	6d c1       	rjmp	.+730    	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
     12a:	1b fc       	.word	0xfc1b	; ????
     12c:	e0 e4       	ldi	r30, 0x40	; 64
     12e:	0d 47       	sbci	r16, 0x7D	; 125
     130:	fe f5       	brtc	.+126    	; 0x1b0 <charTable+0x24>
     132:	20 e6       	ldi	r18, 0x60	; 96
     134:	b5 00       	.word	0x00b5	; ????
     136:	d0 ed       	ldi	r29, 0xD0	; 208
     138:	90 2e       	mov	r9, r16
     13a:	03 00       	.word	0x0003	; ????
     13c:	94 35       	cpi	r25, 0x54	; 84
     13e:	77 05       	cpc	r23, r7
     140:	00 80       	ld	r0, Z
     142:	84 1e       	adc	r8, r20
     144:	08 00       	.word	0x0008	; ????
     146:	00 20       	and	r0, r0
     148:	4e 0a       	sbc	r4, r30
     14a:	00 00       	nop
     14c:	00 c8       	rjmp	.-4096   	; 0xfffff14e <__eeprom_end+0xff7ef14e>
     14e:	0c 33       	cpi	r16, 0x3C	; 60
     150:	33 33       	cpi	r19, 0x33	; 51
     152:	33 0f       	add	r19, r19
     154:	98 6e       	ori	r25, 0xE8	; 232
     156:	12 83       	std	Z+2, r17	; 0x02
     158:	11 41       	sbci	r17, 0x11	; 17
     15a:	ef 8d       	ldd	r30, Y+31	; 0x1f
     15c:	21 14       	cp	r2, r1
     15e:	89 3b       	cpi	r24, 0xB9	; 185
     160:	e6 55       	subi	r30, 0x56	; 86
     162:	16 cf       	rjmp	.-468    	; 0xffffff90 <__eeprom_end+0xff7eff90>
     164:	fe e6       	ldi	r31, 0x6E	; 110
     166:	db 18       	sub	r13, r11
     168:	d1 84       	ldd	r13, Z+9	; 0x09
     16a:	4b 38       	cpi	r20, 0x8B	; 139
     16c:	1b f7       	brvc	.-58     	; 0x134 <__trampolines_end+0xa8>
     16e:	7c 1d       	adc	r23, r12
     170:	90 1d       	adc	r25, r0
     172:	a4 bb       	out	0x14, r26	; 20
     174:	e4 24       	eor	r14, r4
     176:	20 32       	cpi	r18, 0x20	; 32
     178:	84 72       	andi	r24, 0x24	; 36
     17a:	5e 22       	and	r5, r30
     17c:	81 00       	.word	0x0081	; ????
     17e:	c9 f1       	breq	.+114    	; 0x1f2 <charTable+0x66>
     180:	24 ec       	ldi	r18, 0xC4	; 196
     182:	a1 e5       	ldi	r26, 0x51	; 81
     184:	3d 27       	eor	r19, r29

00000186 <ads_init()::__c>:
     186:	30 2e 33 2e 31 00                                   0.3.1.

0000018c <charTable>:
     18c:	7e 30 6d 79 33 5b 5f 70 7f 7b 77 1f 0d 3d 4f 47     ~0my3[_p.{w..=OG
	...
     1b8:	80 01 80 00 7e 30 6d 79 33 5b 5f 70 7f 7b 00 00     ....~0my3[_p.{..
     1c8:	00 00 00 00 00 77 1f 0d 3d 4f 47 00 37 00 00 00     .....w..=OG.7...
     1d8:	0e 00 00 00 67 00 00 00 00 00 00 00 00 00 00 00     ....g...........
     1e8:	00 00 00 08 00 77 1f 0d 3d 4f 47 00 37 00 00 00     .....w..=OG.7...
     1f8:	0e 00 15 1d 67 00 00 00 00 00 00 00 00 00 00 00     ....g...........
     208:	00 00 00 00                                         ....

0000020c <digital_pin_to_timer_PGM>:
     20c:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

0000022c <digital_pin_to_bit_mask_PGM>:
     22c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
     23c:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

0000024c <digital_pin_to_port_PGM>:
     24c:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
     25c:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

0000026c <port_to_input_PGM>:
     26c:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

00000276 <port_to_output_PGM>:
     276:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

00000280 <port_to_mode_PGM>:
     280:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

0000028a <__ctors_start>:
__ctors_start():
     28a:	14 10       	cpse	r1, r4
     28c:	39 16       	cp	r3, r25
     28e:	f8 1b       	sub	r31, r24

00000290 <__ctors_end>:
__dtors_end():
     290:	11 24       	eor	r1, r1
     292:	1f be       	out	0x3f, r1	; 63
     294:	cf ef       	ldi	r28, 0xFF	; 255
     296:	d0 e4       	ldi	r29, 0x40	; 64
     298:	de bf       	out	0x3e, r29	; 62
     29a:	cd bf       	out	0x3d, r28	; 61

0000029c <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     29c:	15 e0       	ldi	r17, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     29e:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     2a0:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     2a2:	e2 e0       	ldi	r30, 0x02	; 2
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     2a4:	fd e4       	ldi	r31, 0x4D	; 77
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     2a6:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     2a8:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     2aa:	02 c0       	rjmp	.+4      	; 0x2b0 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     2ac:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     2ae:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     2b0:	a2 36       	cpi	r26, 0x62	; 98
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     2b2:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     2b4:	d9 f7       	brne	.-10     	; 0x2ac <__do_copy_data+0x10>

000002b6 <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     2b6:	27 e0       	ldi	r18, 0x07	; 7
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     2b8:	a2 e6       	ldi	r26, 0x62	; 98
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     2ba:	b5 e0       	ldi	r27, 0x05	; 5
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     2bc:	01 c0       	rjmp	.+2      	; 0x2c0 <.do_clear_bss_start>

000002be <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     2be:	1d 92       	st	X+, r1

000002c0 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     2c0:	a5 3c       	cpi	r26, 0xC5	; 197
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     2c2:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     2c4:	e1 f7       	brne	.-8      	; 0x2be <.do_clear_bss_loop>

000002c6 <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     2c6:	11 e0       	ldi	r17, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     2c8:	c8 e4       	ldi	r28, 0x48	; 72
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     2ca:	d1 e0       	ldi	r29, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     2cc:	04 c0       	rjmp	.+8      	; 0x2d6 <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     2ce:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     2d0:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     2d2:	0e 94 26 21 	call	0x424c	; 0x424c <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     2d6:	c5 34       	cpi	r28, 0x45	; 69
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     2d8:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     2da:	c9 f7       	brne	.-14     	; 0x2ce <__do_global_ctors+0x8>
     2dc:	0e 94 a5 1e 	call	0x3d4a	; 0x3d4a <main>
     2e0:	0c 94 7f 26 	jmp	0x4cfe	; 0x4cfe <_exit>

000002e4 <__bad_interrupt>:
__vector_22():
     2e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002e8 <lcd_clear_buf(char*)>:
_Z13lcd_clear_bufPc():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:36
}

void ui_init (void) {

    // Print a message to the LCD.
    ui_print_welcome ();
     2e8:	00 97       	sbiw	r24, 0x00	; 0
     2ea:	49 f0       	breq	.+18     	; 0x2fe <lcd_clear_buf(char*)+0x16>
     2ec:	fc 01       	movw	r30, r24
     2ee:	9c 01       	movw	r18, r24
     2f0:	2c 5e       	subi	r18, 0xEC	; 236
     2f2:	3f 4f       	sbci	r19, 0xFF	; 255
     2f4:	40 e2       	ldi	r20, 0x20	; 32
     2f6:	41 93       	st	Z+, r20
     2f8:	2e 17       	cp	r18, r30
     2fa:	3f 07       	cpc	r19, r31
     2fc:	e1 f7       	brne	.-8      	; 0x2f6 <lcd_clear_buf(char*)+0xe>
     2fe:	fc 01       	movw	r30, r24
     300:	14 8a       	std	Z+20, r1	; 0x14
     302:	08 95       	ret

00000304 <init_7segments()>:
_Z14init_7segmentsv():
     304:	40 e0       	ldi	r20, 0x00	; 0
     306:	70 e0       	ldi	r23, 0x00	; 0
     308:	60 e0       	ldi	r22, 0x00	; 0
     30a:	8b ee       	ldi	r24, 0xEB	; 235
     30c:	95 e0       	ldi	r25, 0x05	; 5
     30e:	0e 94 25 12 	call	0x244a	; 0x244a <LedControl::shutdown(int, bool)>
     312:	48 e0       	ldi	r20, 0x08	; 8
     314:	50 e0       	ldi	r21, 0x00	; 0
     316:	70 e0       	ldi	r23, 0x00	; 0
     318:	60 e0       	ldi	r22, 0x00	; 0
     31a:	8b ee       	ldi	r24, 0xEB	; 235
     31c:	95 e0       	ldi	r25, 0x05	; 5
     31e:	0e 94 49 12 	call	0x2492	; 0x2492 <LedControl::setIntensity(int, int)>
     322:	70 e0       	ldi	r23, 0x00	; 0
     324:	60 e0       	ldi	r22, 0x00	; 0
     326:	8b ee       	ldi	r24, 0xEB	; 235
     328:	95 e0       	ldi	r25, 0x05	; 5
     32a:	0c 94 5b 12 	jmp	0x24b6	; 0x24b6 <LedControl::clearDisplay(int)>

0000032e <display_banner()>:
_Z14display_bannerv():
     32e:	20 e1       	ldi	r18, 0x10	; 16
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	40 e0       	ldi	r20, 0x00	; 0
     334:	70 e0       	ldi	r23, 0x00	; 0
     336:	60 e0       	ldi	r22, 0x00	; 0
     338:	8b ee       	ldi	r24, 0xEB	; 235
     33a:	95 e0       	ldi	r25, 0x05	; 5
     33c:	0e 94 13 13 	call	0x2626	; 0x2626 <LedControl::setRow(int, int, unsigned char)>
     340:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     344:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     348:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     34c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     350:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
     354:	20 e1       	ldi	r18, 0x10	; 16
     356:	41 e0       	ldi	r20, 0x01	; 1
     358:	50 e0       	ldi	r21, 0x00	; 0
     35a:	70 e0       	ldi	r23, 0x00	; 0
     35c:	60 e0       	ldi	r22, 0x00	; 0
     35e:	8b ee       	ldi	r24, 0xEB	; 235
     360:	95 e0       	ldi	r25, 0x05	; 5
     362:	0e 94 13 13 	call	0x2626	; 0x2626 <LedControl::setRow(int, int, unsigned char)>
     366:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     36a:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     36e:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     372:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     376:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
     37a:	20 e1       	ldi	r18, 0x10	; 16
     37c:	42 e0       	ldi	r20, 0x02	; 2
     37e:	50 e0       	ldi	r21, 0x00	; 0
     380:	70 e0       	ldi	r23, 0x00	; 0
     382:	60 e0       	ldi	r22, 0x00	; 0
     384:	8b ee       	ldi	r24, 0xEB	; 235
     386:	95 e0       	ldi	r25, 0x05	; 5
     388:	0e 94 13 13 	call	0x2626	; 0x2626 <LedControl::setRow(int, int, unsigned char)>
     38c:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     390:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     394:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     398:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     39c:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
     3a0:	20 e1       	ldi	r18, 0x10	; 16
     3a2:	43 e0       	ldi	r20, 0x03	; 3
     3a4:	50 e0       	ldi	r21, 0x00	; 0
     3a6:	70 e0       	ldi	r23, 0x00	; 0
     3a8:	60 e0       	ldi	r22, 0x00	; 0
     3aa:	8b ee       	ldi	r24, 0xEB	; 235
     3ac:	95 e0       	ldi	r25, 0x05	; 5
     3ae:	0e 94 13 13 	call	0x2626	; 0x2626 <LedControl::setRow(int, int, unsigned char)>
     3b2:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     3b6:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     3ba:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     3be:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     3c2:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
     3c6:	20 e1       	ldi	r18, 0x10	; 16
     3c8:	44 e0       	ldi	r20, 0x04	; 4
     3ca:	50 e0       	ldi	r21, 0x00	; 0
     3cc:	70 e0       	ldi	r23, 0x00	; 0
     3ce:	60 e0       	ldi	r22, 0x00	; 0
     3d0:	8b ee       	ldi	r24, 0xEB	; 235
     3d2:	95 e0       	ldi	r25, 0x05	; 5
     3d4:	0e 94 13 13 	call	0x2626	; 0x2626 <LedControl::setRow(int, int, unsigned char)>
     3d8:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     3dc:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     3e0:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     3e4:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     3e8:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
     3ec:	20 e1       	ldi	r18, 0x10	; 16
     3ee:	45 e0       	ldi	r20, 0x05	; 5
     3f0:	50 e0       	ldi	r21, 0x00	; 0
     3f2:	70 e0       	ldi	r23, 0x00	; 0
     3f4:	60 e0       	ldi	r22, 0x00	; 0
     3f6:	8b ee       	ldi	r24, 0xEB	; 235
     3f8:	95 e0       	ldi	r25, 0x05	; 5
     3fa:	0e 94 13 13 	call	0x2626	; 0x2626 <LedControl::setRow(int, int, unsigned char)>
     3fe:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     402:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     406:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     40a:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     40e:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
     412:	20 e1       	ldi	r18, 0x10	; 16
     414:	46 e0       	ldi	r20, 0x06	; 6
     416:	50 e0       	ldi	r21, 0x00	; 0
     418:	70 e0       	ldi	r23, 0x00	; 0
     41a:	60 e0       	ldi	r22, 0x00	; 0
     41c:	8b ee       	ldi	r24, 0xEB	; 235
     41e:	95 e0       	ldi	r25, 0x05	; 5
     420:	0e 94 13 13 	call	0x2626	; 0x2626 <LedControl::setRow(int, int, unsigned char)>
     424:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     428:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     42c:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     430:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     434:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
     438:	20 e1       	ldi	r18, 0x10	; 16
     43a:	47 e0       	ldi	r20, 0x07	; 7
     43c:	50 e0       	ldi	r21, 0x00	; 0
     43e:	70 e0       	ldi	r23, 0x00	; 0
     440:	60 e0       	ldi	r22, 0x00	; 0
     442:	8b ee       	ldi	r24, 0xEB	; 235
     444:	95 e0       	ldi	r25, 0x05	; 5
     446:	0e 94 13 13 	call	0x2626	; 0x2626 <LedControl::setRow(int, int, unsigned char)>
     44a:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     44e:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     452:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     456:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     45a:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <delay>

0000045e <scrollDigits()>:
_Z12scrollDigitsv():
     45e:	0f 93       	push	r16
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd e0       	ldi	r28, 0x0D	; 13
     466:	d0 e0       	ldi	r29, 0x00	; 0
     468:	00 e0       	ldi	r16, 0x00	; 0
     46a:	28 e0       	ldi	r18, 0x08	; 8
     46c:	47 e0       	ldi	r20, 0x07	; 7
     46e:	50 e0       	ldi	r21, 0x00	; 0
     470:	70 e0       	ldi	r23, 0x00	; 0
     472:	60 e0       	ldi	r22, 0x00	; 0
     474:	8b ee       	ldi	r24, 0xEB	; 235
     476:	95 e0       	ldi	r25, 0x05	; 5
     478:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     47c:	28 e0       	ldi	r18, 0x08	; 8
     47e:	46 e0       	ldi	r20, 0x06	; 6
     480:	50 e0       	ldi	r21, 0x00	; 0
     482:	70 e0       	ldi	r23, 0x00	; 0
     484:	60 e0       	ldi	r22, 0x00	; 0
     486:	8b ee       	ldi	r24, 0xEB	; 235
     488:	95 e0       	ldi	r25, 0x05	; 5
     48a:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     48e:	28 e0       	ldi	r18, 0x08	; 8
     490:	45 e0       	ldi	r20, 0x05	; 5
     492:	50 e0       	ldi	r21, 0x00	; 0
     494:	70 e0       	ldi	r23, 0x00	; 0
     496:	60 e0       	ldi	r22, 0x00	; 0
     498:	8b ee       	ldi	r24, 0xEB	; 235
     49a:	95 e0       	ldi	r25, 0x05	; 5
     49c:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     4a0:	28 e0       	ldi	r18, 0x08	; 8
     4a2:	44 e0       	ldi	r20, 0x04	; 4
     4a4:	50 e0       	ldi	r21, 0x00	; 0
     4a6:	70 e0       	ldi	r23, 0x00	; 0
     4a8:	60 e0       	ldi	r22, 0x00	; 0
     4aa:	8b ee       	ldi	r24, 0xEB	; 235
     4ac:	95 e0       	ldi	r25, 0x05	; 5
     4ae:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     4b2:	28 e0       	ldi	r18, 0x08	; 8
     4b4:	43 e0       	ldi	r20, 0x03	; 3
     4b6:	50 e0       	ldi	r21, 0x00	; 0
     4b8:	70 e0       	ldi	r23, 0x00	; 0
     4ba:	60 e0       	ldi	r22, 0x00	; 0
     4bc:	8b ee       	ldi	r24, 0xEB	; 235
     4be:	95 e0       	ldi	r25, 0x05	; 5
     4c0:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     4c4:	28 e0       	ldi	r18, 0x08	; 8
     4c6:	42 e0       	ldi	r20, 0x02	; 2
     4c8:	50 e0       	ldi	r21, 0x00	; 0
     4ca:	70 e0       	ldi	r23, 0x00	; 0
     4cc:	60 e0       	ldi	r22, 0x00	; 0
     4ce:	8b ee       	ldi	r24, 0xEB	; 235
     4d0:	95 e0       	ldi	r25, 0x05	; 5
     4d2:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     4d6:	28 e0       	ldi	r18, 0x08	; 8
     4d8:	41 e0       	ldi	r20, 0x01	; 1
     4da:	50 e0       	ldi	r21, 0x00	; 0
     4dc:	70 e0       	ldi	r23, 0x00	; 0
     4de:	60 e0       	ldi	r22, 0x00	; 0
     4e0:	8b ee       	ldi	r24, 0xEB	; 235
     4e2:	95 e0       	ldi	r25, 0x05	; 5
     4e4:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     4e8:	28 e0       	ldi	r18, 0x08	; 8
     4ea:	50 e0       	ldi	r21, 0x00	; 0
     4ec:	40 e0       	ldi	r20, 0x00	; 0
     4ee:	70 e0       	ldi	r23, 0x00	; 0
     4f0:	60 e0       	ldi	r22, 0x00	; 0
     4f2:	8b ee       	ldi	r24, 0xEB	; 235
     4f4:	95 e0       	ldi	r25, 0x05	; 5
     4f6:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     4fa:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     4fe:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     502:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     506:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     50a:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
     50e:	21 97       	sbiw	r28, 0x01	; 1
     510:	09 f0       	breq	.+2      	; 0x514 <scrollDigits()+0xb6>
     512:	aa cf       	rjmp	.-172    	; 0x468 <scrollDigits()+0xa>
     514:	70 e0       	ldi	r23, 0x00	; 0
     516:	60 e0       	ldi	r22, 0x00	; 0
     518:	8b ee       	ldi	r24, 0xEB	; 235
     51a:	95 e0       	ldi	r25, 0x05	; 5
     51c:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <LedControl::clearDisplay(int)>
     520:	60 91 18 01 	lds	r22, 0x0118	; 0x800118 <delaytime>
     524:	70 91 19 01 	lds	r23, 0x0119	; 0x800119 <delaytime+0x1>
     528:	80 91 1a 01 	lds	r24, 0x011A	; 0x80011a <delaytime+0x2>
     52c:	90 91 1b 01 	lds	r25, 0x011B	; 0x80011b <delaytime+0x3>
     530:	df 91       	pop	r29
     532:	cf 91       	pop	r28
     534:	0f 91       	pop	r16
     536:	0c 94 dc 18 	jmp	0x31b8	; 0x31b8 <delay>

0000053a <test_7segments()>:
_Z14test_7segmentsv():
     53a:	0e 94 97 01 	call	0x32e	; 0x32e <display_banner()>
     53e:	0c 94 2f 02 	jmp	0x45e	; 0x45e <scrollDigits()>

00000542 <display_o2(float)>:
_Z10display_o2f():
     542:	ef 92       	push	r14
     544:	ff 92       	push	r15
     546:	0f 93       	push	r16
     548:	cf 93       	push	r28
     54a:	df 93       	push	r29
     54c:	20 e0       	ldi	r18, 0x00	; 0
     54e:	30 e0       	ldi	r19, 0x00	; 0
     550:	40 e2       	ldi	r20, 0x20	; 32
     552:	51 e4       	ldi	r21, 0x41	; 65
     554:	0e 94 7e 20 	call	0x40fc	; 0x40fc <__mulsf3>
     558:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <__fixunssfsi>
     55c:	eb 01       	movw	r28, r22
     55e:	cb 01       	movw	r24, r22
     560:	64 e6       	ldi	r22, 0x64	; 100
     562:	70 e0       	ldi	r23, 0x00	; 0
     564:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
     568:	cb 01       	movw	r24, r22
     56a:	2a e0       	ldi	r18, 0x0A	; 10
     56c:	e2 2e       	mov	r14, r18
     56e:	f1 2c       	mov	r15, r1
     570:	b7 01       	movw	r22, r14
     572:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
     576:	00 e0       	ldi	r16, 0x00	; 0
     578:	28 2f       	mov	r18, r24
     57a:	50 e0       	ldi	r21, 0x00	; 0
     57c:	40 e0       	ldi	r20, 0x00	; 0
     57e:	70 e0       	ldi	r23, 0x00	; 0
     580:	60 e0       	ldi	r22, 0x00	; 0
     582:	8b ee       	ldi	r24, 0xEB	; 235
     584:	95 e0       	ldi	r25, 0x05	; 5
     586:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     58a:	ce 01       	movw	r24, r28
     58c:	b7 01       	movw	r22, r14
     58e:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
     592:	c8 2f       	mov	r28, r24
     594:	cb 01       	movw	r24, r22
     596:	b7 01       	movw	r22, r14
     598:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
     59c:	01 e0       	ldi	r16, 0x01	; 1
     59e:	28 2f       	mov	r18, r24
     5a0:	41 e0       	ldi	r20, 0x01	; 1
     5a2:	50 e0       	ldi	r21, 0x00	; 0
     5a4:	70 e0       	ldi	r23, 0x00	; 0
     5a6:	60 e0       	ldi	r22, 0x00	; 0
     5a8:	8b ee       	ldi	r24, 0xEB	; 235
     5aa:	95 e0       	ldi	r25, 0x05	; 5
     5ac:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     5b0:	00 e0       	ldi	r16, 0x00	; 0
     5b2:	2c 2f       	mov	r18, r28
     5b4:	42 e0       	ldi	r20, 0x02	; 2
     5b6:	50 e0       	ldi	r21, 0x00	; 0
     5b8:	70 e0       	ldi	r23, 0x00	; 0
     5ba:	60 e0       	ldi	r22, 0x00	; 0
     5bc:	8b ee       	ldi	r24, 0xEB	; 235
     5be:	95 e0       	ldi	r25, 0x05	; 5
     5c0:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     5c4:	df 91       	pop	r29
     5c6:	cf 91       	pop	r28
     5c8:	0f 91       	pop	r16
     5ca:	ff 90       	pop	r15
     5cc:	ef 90       	pop	r14
     5ce:	08 95       	ret

000005d0 <display_run_hours(unsigned long)>:
_Z17display_run_hoursm():
     5d0:	4f 92       	push	r4
     5d2:	5f 92       	push	r5
     5d4:	6f 92       	push	r6
     5d6:	7f 92       	push	r7
     5d8:	8f 92       	push	r8
     5da:	9f 92       	push	r9
     5dc:	af 92       	push	r10
     5de:	bf 92       	push	r11
     5e0:	cf 92       	push	r12
     5e2:	df 92       	push	r13
     5e4:	ef 92       	push	r14
     5e6:	ff 92       	push	r15
     5e8:	0f 93       	push	r16
     5ea:	1f 93       	push	r17
     5ec:	cf 93       	push	r28
     5ee:	df 93       	push	r29
     5f0:	4b 01       	movw	r8, r22
     5f2:	5c 01       	movw	r10, r24
     5f4:	8a e0       	ldi	r24, 0x0A	; 10
     5f6:	c8 2e       	mov	r12, r24
     5f8:	d1 2c       	mov	r13, r1
     5fa:	e1 2c       	mov	r14, r1
     5fc:	f1 2c       	mov	r15, r1
     5fe:	c5 01       	movw	r24, r10
     600:	a7 01       	movw	r20, r14
     602:	96 01       	movw	r18, r12
     604:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
     608:	76 2e       	mov	r7, r22
     60a:	ca 01       	movw	r24, r20
     60c:	b9 01       	movw	r22, r18
     60e:	a7 01       	movw	r20, r14
     610:	96 01       	movw	r18, r12
     612:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
     616:	c6 2f       	mov	r28, r22
     618:	66 2e       	mov	r6, r22
     61a:	c5 01       	movw	r24, r10
     61c:	b4 01       	movw	r22, r8
     61e:	24 e6       	ldi	r18, 0x64	; 100
     620:	30 e0       	ldi	r19, 0x00	; 0
     622:	40 e0       	ldi	r20, 0x00	; 0
     624:	50 e0       	ldi	r21, 0x00	; 0
     626:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
     62a:	ca 01       	movw	r24, r20
     62c:	b9 01       	movw	r22, r18
     62e:	a7 01       	movw	r20, r14
     630:	96 01       	movw	r18, r12
     632:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
     636:	d6 2f       	mov	r29, r22
     638:	56 2e       	mov	r5, r22
     63a:	c5 01       	movw	r24, r10
     63c:	b4 01       	movw	r22, r8
     63e:	28 ee       	ldi	r18, 0xE8	; 232
     640:	33 e0       	ldi	r19, 0x03	; 3
     642:	40 e0       	ldi	r20, 0x00	; 0
     644:	50 e0       	ldi	r21, 0x00	; 0
     646:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
     64a:	ca 01       	movw	r24, r20
     64c:	b9 01       	movw	r22, r18
     64e:	a7 01       	movw	r20, r14
     650:	96 01       	movw	r18, r12
     652:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
     656:	16 2f       	mov	r17, r22
     658:	46 2e       	mov	r4, r22
     65a:	c5 01       	movw	r24, r10
     65c:	b4 01       	movw	r22, r8
     65e:	20 e1       	ldi	r18, 0x10	; 16
     660:	37 e2       	ldi	r19, 0x27	; 39
     662:	40 e0       	ldi	r20, 0x00	; 0
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
     66a:	ca 01       	movw	r24, r20
     66c:	b9 01       	movw	r22, r18
     66e:	a7 01       	movw	r20, r14
     670:	96 01       	movw	r18, r12
     672:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
     676:	f6 2e       	mov	r15, r22
     678:	00 e0       	ldi	r16, 0x00	; 0
     67a:	26 2f       	mov	r18, r22
     67c:	43 e0       	ldi	r20, 0x03	; 3
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	70 e0       	ldi	r23, 0x00	; 0
     682:	60 e0       	ldi	r22, 0x00	; 0
     684:	8b ee       	ldi	r24, 0xEB	; 235
     686:	95 e0       	ldi	r25, 0x05	; 5
     688:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     68c:	21 2f       	mov	r18, r17
     68e:	44 e0       	ldi	r20, 0x04	; 4
     690:	50 e0       	ldi	r21, 0x00	; 0
     692:	70 e0       	ldi	r23, 0x00	; 0
     694:	60 e0       	ldi	r22, 0x00	; 0
     696:	8b ee       	ldi	r24, 0xEB	; 235
     698:	95 e0       	ldi	r25, 0x05	; 5
     69a:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     69e:	2d 2f       	mov	r18, r29
     6a0:	45 e0       	ldi	r20, 0x05	; 5
     6a2:	50 e0       	ldi	r21, 0x00	; 0
     6a4:	70 e0       	ldi	r23, 0x00	; 0
     6a6:	60 e0       	ldi	r22, 0x00	; 0
     6a8:	8b ee       	ldi	r24, 0xEB	; 235
     6aa:	95 e0       	ldi	r25, 0x05	; 5
     6ac:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     6b0:	2c 2f       	mov	r18, r28
     6b2:	46 e0       	ldi	r20, 0x06	; 6
     6b4:	50 e0       	ldi	r21, 0x00	; 0
     6b6:	70 e0       	ldi	r23, 0x00	; 0
     6b8:	60 e0       	ldi	r22, 0x00	; 0
     6ba:	8b ee       	ldi	r24, 0xEB	; 235
     6bc:	95 e0       	ldi	r25, 0x05	; 5
     6be:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     6c2:	27 2d       	mov	r18, r7
     6c4:	47 e0       	ldi	r20, 0x07	; 7
     6c6:	50 e0       	ldi	r21, 0x00	; 0
     6c8:	70 e0       	ldi	r23, 0x00	; 0
     6ca:	60 e0       	ldi	r22, 0x00	; 0
     6cc:	8b ee       	ldi	r24, 0xEB	; 235
     6ce:	95 e0       	ldi	r25, 0x05	; 5
     6d0:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     6d4:	ff 20       	and	r15, r15
     6d6:	09 f4       	brne	.+2      	; 0x6da <display_run_hours(unsigned long)+0x10a>
     6d8:	4b c0       	rjmp	.+150    	; 0x770 <display_run_hours(unsigned long)+0x1a0>
     6da:	2f 2d       	mov	r18, r15
     6dc:	43 e0       	ldi	r20, 0x03	; 3
     6de:	50 e0       	ldi	r21, 0x00	; 0
     6e0:	70 e0       	ldi	r23, 0x00	; 0
     6e2:	60 e0       	ldi	r22, 0x00	; 0
     6e4:	8b ee       	ldi	r24, 0xEB	; 235
     6e6:	95 e0       	ldi	r25, 0x05	; 5
     6e8:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     6ec:	44 20       	and	r4, r4
     6ee:	09 f4       	brne	.+2      	; 0x6f2 <display_run_hours(unsigned long)+0x122>
     6f0:	49 c0       	rjmp	.+146    	; 0x784 <display_run_hours(unsigned long)+0x1b4>
     6f2:	00 e0       	ldi	r16, 0x00	; 0
     6f4:	21 2f       	mov	r18, r17
     6f6:	44 e0       	ldi	r20, 0x04	; 4
     6f8:	50 e0       	ldi	r21, 0x00	; 0
     6fa:	70 e0       	ldi	r23, 0x00	; 0
     6fc:	60 e0       	ldi	r22, 0x00	; 0
     6fe:	8b ee       	ldi	r24, 0xEB	; 235
     700:	95 e0       	ldi	r25, 0x05	; 5
     702:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     706:	55 20       	and	r5, r5
     708:	09 f4       	brne	.+2      	; 0x70c <display_run_hours(unsigned long)+0x13c>
     70a:	46 c0       	rjmp	.+140    	; 0x798 <display_run_hours(unsigned long)+0x1c8>
     70c:	00 e0       	ldi	r16, 0x00	; 0
     70e:	2d 2f       	mov	r18, r29
     710:	45 e0       	ldi	r20, 0x05	; 5
     712:	50 e0       	ldi	r21, 0x00	; 0
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	60 e0       	ldi	r22, 0x00	; 0
     718:	8b ee       	ldi	r24, 0xEB	; 235
     71a:	95 e0       	ldi	r25, 0x05	; 5
     71c:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     720:	66 20       	and	r6, r6
     722:	09 f4       	brne	.+2      	; 0x726 <display_run_hours(unsigned long)+0x156>
     724:	43 c0       	rjmp	.+134    	; 0x7ac <display_run_hours(unsigned long)+0x1dc>
     726:	00 e0       	ldi	r16, 0x00	; 0
     728:	2c 2f       	mov	r18, r28
     72a:	46 e0       	ldi	r20, 0x06	; 6
     72c:	50 e0       	ldi	r21, 0x00	; 0
     72e:	70 e0       	ldi	r23, 0x00	; 0
     730:	60 e0       	ldi	r22, 0x00	; 0
     732:	8b ee       	ldi	r24, 0xEB	; 235
     734:	95 e0       	ldi	r25, 0x05	; 5
     736:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     73a:	00 e0       	ldi	r16, 0x00	; 0
     73c:	27 2d       	mov	r18, r7
     73e:	47 e0       	ldi	r20, 0x07	; 7
     740:	50 e0       	ldi	r21, 0x00	; 0
     742:	70 e0       	ldi	r23, 0x00	; 0
     744:	60 e0       	ldi	r22, 0x00	; 0
     746:	8b ee       	ldi	r24, 0xEB	; 235
     748:	95 e0       	ldi	r25, 0x05	; 5
     74a:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     74e:	df 91       	pop	r29
     750:	cf 91       	pop	r28
     752:	1f 91       	pop	r17
     754:	0f 91       	pop	r16
     756:	ff 90       	pop	r15
     758:	ef 90       	pop	r14
     75a:	df 90       	pop	r13
     75c:	cf 90       	pop	r12
     75e:	bf 90       	pop	r11
     760:	af 90       	pop	r10
     762:	9f 90       	pop	r9
     764:	8f 90       	pop	r8
     766:	7f 90       	pop	r7
     768:	6f 90       	pop	r6
     76a:	5f 90       	pop	r5
     76c:	4f 90       	pop	r4
     76e:	08 95       	ret
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	43 e0       	ldi	r20, 0x03	; 3
     774:	50 e0       	ldi	r21, 0x00	; 0
     776:	70 e0       	ldi	r23, 0x00	; 0
     778:	60 e0       	ldi	r22, 0x00	; 0
     77a:	8b ee       	ldi	r24, 0xEB	; 235
     77c:	95 e0       	ldi	r25, 0x05	; 5
     77e:	0e 94 13 13 	call	0x2626	; 0x2626 <LedControl::setRow(int, int, unsigned char)>
     782:	b4 cf       	rjmp	.-152    	; 0x6ec <display_run_hours(unsigned long)+0x11c>
     784:	20 e0       	ldi	r18, 0x00	; 0
     786:	44 e0       	ldi	r20, 0x04	; 4
     788:	50 e0       	ldi	r21, 0x00	; 0
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	60 e0       	ldi	r22, 0x00	; 0
     78e:	8b ee       	ldi	r24, 0xEB	; 235
     790:	95 e0       	ldi	r25, 0x05	; 5
     792:	0e 94 13 13 	call	0x2626	; 0x2626 <LedControl::setRow(int, int, unsigned char)>
     796:	b7 cf       	rjmp	.-146    	; 0x706 <display_run_hours(unsigned long)+0x136>
     798:	20 e0       	ldi	r18, 0x00	; 0
     79a:	45 e0       	ldi	r20, 0x05	; 5
     79c:	50 e0       	ldi	r21, 0x00	; 0
     79e:	70 e0       	ldi	r23, 0x00	; 0
     7a0:	60 e0       	ldi	r22, 0x00	; 0
     7a2:	8b ee       	ldi	r24, 0xEB	; 235
     7a4:	95 e0       	ldi	r25, 0x05	; 5
     7a6:	0e 94 13 13 	call	0x2626	; 0x2626 <LedControl::setRow(int, int, unsigned char)>
     7aa:	ba cf       	rjmp	.-140    	; 0x720 <display_run_hours(unsigned long)+0x150>
     7ac:	20 e0       	ldi	r18, 0x00	; 0
     7ae:	46 e0       	ldi	r20, 0x06	; 6
     7b0:	50 e0       	ldi	r21, 0x00	; 0
     7b2:	70 e0       	ldi	r23, 0x00	; 0
     7b4:	60 e0       	ldi	r22, 0x00	; 0
     7b6:	8b ee       	ldi	r24, 0xEB	; 235
     7b8:	95 e0       	ldi	r25, 0x05	; 5
     7ba:	0e 94 13 13 	call	0x2626	; 0x2626 <LedControl::setRow(int, int, unsigned char)>
     7be:	bd cf       	rjmp	.-134    	; 0x73a <display_run_hours(unsigned long)+0x16a>

000007c0 <display_run_time(unsigned int, unsigned int)>:
_Z16display_run_timejj():
     7c0:	ef 92       	push	r14
     7c2:	ff 92       	push	r15
     7c4:	0f 93       	push	r16
     7c6:	1f 93       	push	r17
     7c8:	cf 93       	push	r28
     7ca:	df 93       	push	r29
     7cc:	9c 01       	movw	r18, r24
     7ce:	cb 01       	movw	r24, r22
     7d0:	6c e3       	ldi	r22, 0x3C	; 60
     7d2:	70 e0       	ldi	r23, 0x00	; 0
     7d4:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
     7d8:	ec 01       	movw	r28, r24
     7da:	c9 01       	movw	r24, r18
     7dc:	67 ee       	ldi	r22, 0xE7	; 231
     7de:	73 e0       	ldi	r23, 0x03	; 3
     7e0:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
     7e4:	fc 01       	movw	r30, r24
     7e6:	2a e0       	ldi	r18, 0x0A	; 10
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	ce 01       	movw	r24, r28
     7ec:	b9 01       	movw	r22, r18
     7ee:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
     7f2:	16 2f       	mov	r17, r22
     7f4:	d8 2f       	mov	r29, r24
     7f6:	cf 01       	movw	r24, r30
     7f8:	b9 01       	movw	r22, r18
     7fa:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
     7fe:	f8 2e       	mov	r15, r24
     800:	cb 01       	movw	r24, r22
     802:	b9 01       	movw	r22, r18
     804:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
     808:	c8 2f       	mov	r28, r24
     80a:	e8 2e       	mov	r14, r24
     80c:	cf 01       	movw	r24, r30
     80e:	64 e6       	ldi	r22, 0x64	; 100
     810:	70 e0       	ldi	r23, 0x00	; 0
     812:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
     816:	26 2f       	mov	r18, r22
     818:	66 23       	and	r22, r22
     81a:	c9 f1       	breq	.+114    	; 0x88e <display_run_time(unsigned int, unsigned int)+0xce>
     81c:	00 e0       	ldi	r16, 0x00	; 0
     81e:	43 e0       	ldi	r20, 0x03	; 3
     820:	50 e0       	ldi	r21, 0x00	; 0
     822:	70 e0       	ldi	r23, 0x00	; 0
     824:	60 e0       	ldi	r22, 0x00	; 0
     826:	8b ee       	ldi	r24, 0xEB	; 235
     828:	95 e0       	ldi	r25, 0x05	; 5
     82a:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     82e:	ee 20       	and	r14, r14
     830:	c1 f1       	breq	.+112    	; 0x8a2 <display_run_time(unsigned int, unsigned int)+0xe2>
     832:	00 e0       	ldi	r16, 0x00	; 0
     834:	2c 2f       	mov	r18, r28
     836:	44 e0       	ldi	r20, 0x04	; 4
     838:	50 e0       	ldi	r21, 0x00	; 0
     83a:	70 e0       	ldi	r23, 0x00	; 0
     83c:	60 e0       	ldi	r22, 0x00	; 0
     83e:	8b ee       	ldi	r24, 0xEB	; 235
     840:	95 e0       	ldi	r25, 0x05	; 5
     842:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     846:	01 e0       	ldi	r16, 0x01	; 1
     848:	2f 2d       	mov	r18, r15
     84a:	45 e0       	ldi	r20, 0x05	; 5
     84c:	50 e0       	ldi	r21, 0x00	; 0
     84e:	70 e0       	ldi	r23, 0x00	; 0
     850:	60 e0       	ldi	r22, 0x00	; 0
     852:	8b ee       	ldi	r24, 0xEB	; 235
     854:	95 e0       	ldi	r25, 0x05	; 5
     856:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     85a:	00 e0       	ldi	r16, 0x00	; 0
     85c:	21 2f       	mov	r18, r17
     85e:	46 e0       	ldi	r20, 0x06	; 6
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	70 e0       	ldi	r23, 0x00	; 0
     864:	60 e0       	ldi	r22, 0x00	; 0
     866:	8b ee       	ldi	r24, 0xEB	; 235
     868:	95 e0       	ldi	r25, 0x05	; 5
     86a:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     86e:	2d 2f       	mov	r18, r29
     870:	47 e0       	ldi	r20, 0x07	; 7
     872:	50 e0       	ldi	r21, 0x00	; 0
     874:	70 e0       	ldi	r23, 0x00	; 0
     876:	60 e0       	ldi	r22, 0x00	; 0
     878:	8b ee       	ldi	r24, 0xEB	; 235
     87a:	95 e0       	ldi	r25, 0x05	; 5
     87c:	0e 94 30 13 	call	0x2660	; 0x2660 <LedControl::setDigit(int, int, unsigned char, bool)>
     880:	df 91       	pop	r29
     882:	cf 91       	pop	r28
     884:	1f 91       	pop	r17
     886:	0f 91       	pop	r16
     888:	ff 90       	pop	r15
     88a:	ef 90       	pop	r14
     88c:	08 95       	ret
     88e:	20 e0       	ldi	r18, 0x00	; 0
     890:	43 e0       	ldi	r20, 0x03	; 3
     892:	50 e0       	ldi	r21, 0x00	; 0
     894:	70 e0       	ldi	r23, 0x00	; 0
     896:	60 e0       	ldi	r22, 0x00	; 0
     898:	8b ee       	ldi	r24, 0xEB	; 235
     89a:	95 e0       	ldi	r25, 0x05	; 5
     89c:	0e 94 13 13 	call	0x2626	; 0x2626 <LedControl::setRow(int, int, unsigned char)>
     8a0:	c6 cf       	rjmp	.-116    	; 0x82e <display_run_time(unsigned int, unsigned int)+0x6e>
     8a2:	20 e0       	ldi	r18, 0x00	; 0
     8a4:	44 e0       	ldi	r20, 0x04	; 4
     8a6:	50 e0       	ldi	r21, 0x00	; 0
     8a8:	70 e0       	ldi	r23, 0x00	; 0
     8aa:	60 e0       	ldi	r22, 0x00	; 0
     8ac:	8b ee       	ldi	r24, 0xEB	; 235
     8ae:	95 e0       	ldi	r25, 0x05	; 5
     8b0:	0e 94 13 13 	call	0x2626	; 0x2626 <LedControl::setRow(int, int, unsigned char)>
     8b4:	c8 cf       	rjmp	.-112    	; 0x846 <display_run_time(unsigned int, unsigned int)+0x86>

000008b6 <log_dump()>:
_Z8log_dumpv():
     8b6:	0f 93       	push	r16
     8b8:	1f 93       	push	r17
     8ba:	cf 93       	push	r28
     8bc:	df 93       	push	r29
     8be:	20 91 df 05 	lds	r18, 0x05DF	; 0x8005df <systemtick_secs>
     8c2:	90 91 de 05 	lds	r25, 0x05DE	; 0x8005de <systemtick_mins>
     8c6:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <systemtick_hrs>
     8ca:	1f 92       	push	r1
     8cc:	2f 93       	push	r18
     8ce:	1f 92       	push	r1
     8d0:	9f 93       	push	r25
     8d2:	1f 92       	push	r1
     8d4:	8f 93       	push	r24
     8d6:	08 e2       	ldi	r16, 0x28	; 40
     8d8:	11 e0       	ldi	r17, 0x01	; 1
     8da:	1f 93       	push	r17
     8dc:	0f 93       	push	r16
     8de:	ce e8       	ldi	r28, 0x8E	; 142
     8e0:	d5 e0       	ldi	r29, 0x05	; 5
     8e2:	df 93       	push	r29
     8e4:	cf 93       	push	r28
     8e6:	0e 94 54 21 	call	0x42a8	; 0x42a8 <sprintf>
     8ea:	be 01       	movw	r22, r28
     8ec:	88 e2       	ldi	r24, 0x28	; 40
     8ee:	97 e0       	ldi	r25, 0x07	; 7
     8f0:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     8f4:	e0 91 cc 05 	lds	r30, 0x05CC	; 0x8005cc <current_run_time_secs>
     8f8:	f0 91 cd 05 	lds	r31, 0x05CD	; 0x8005cd <current_run_time_secs+0x1>
     8fc:	2c e3       	ldi	r18, 0x3C	; 60
     8fe:	30 e0       	ldi	r19, 0x00	; 0
     900:	cf 01       	movw	r24, r30
     902:	b9 01       	movw	r22, r18
     904:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
     908:	9f 93       	push	r25
     90a:	8f 93       	push	r24
     90c:	cf 01       	movw	r24, r30
     90e:	60 e1       	ldi	r22, 0x10	; 16
     910:	7e e0       	ldi	r23, 0x0E	; 14
     912:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
     916:	46 2f       	mov	r20, r22
     918:	e7 2f       	mov	r30, r23
     91a:	b9 01       	movw	r22, r18
     91c:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
     920:	7f 93       	push	r23
     922:	6f 93       	push	r22
     924:	ef 93       	push	r30
     926:	4f 93       	push	r20
     928:	1f 93       	push	r17
     92a:	0f 93       	push	r16
     92c:	df 93       	push	r29
     92e:	cf 93       	push	r28
     930:	0e 94 54 21 	call	0x42a8	; 0x42a8 <sprintf>
     934:	be 01       	movw	r22, r28
     936:	88 e2       	ldi	r24, 0x28	; 40
     938:	97 e0       	ldi	r25, 0x07	; 7
     93a:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     93e:	40 91 c2 05 	lds	r20, 0x05C2	; 0x8005c2 <Production_Delay>
     942:	50 91 c3 05 	lds	r21, 0x05C3	; 0x8005c3 <Production_Delay+0x1>
     946:	60 91 c4 05 	lds	r22, 0x05C4	; 0x8005c4 <Production_Delay+0x2>
     94a:	70 91 c5 05 	lds	r23, 0x05C5	; 0x8005c5 <Production_Delay+0x3>
     94e:	2a e0       	ldi	r18, 0x0A	; 10
     950:	30 e0       	ldi	r19, 0x00	; 0
     952:	88 e2       	ldi	r24, 0x28	; 40
     954:	97 e0       	ldi	r25, 0x07	; 7
     956:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <Print::print(unsigned long, int)>
     95a:	67 e7       	ldi	r22, 0x77	; 119
     95c:	73 e0       	ldi	r23, 0x03	; 3
     95e:	88 e2       	ldi	r24, 0x28	; 40
     960:	97 e0       	ldi	r25, 0x07	; 7
     962:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     966:	40 91 be 05 	lds	r20, 0x05BE	; 0x8005be <Flush_Delay>
     96a:	50 91 bf 05 	lds	r21, 0x05BF	; 0x8005bf <Flush_Delay+0x1>
     96e:	60 91 c0 05 	lds	r22, 0x05C0	; 0x8005c0 <Flush_Delay+0x2>
     972:	70 91 c1 05 	lds	r23, 0x05C1	; 0x8005c1 <Flush_Delay+0x3>
     976:	2a e0       	ldi	r18, 0x0A	; 10
     978:	30 e0       	ldi	r19, 0x00	; 0
     97a:	88 e2       	ldi	r24, 0x28	; 40
     97c:	97 e0       	ldi	r25, 0x07	; 7
     97e:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <Print::print(unsigned long, int)>
     982:	67 e7       	ldi	r22, 0x77	; 119
     984:	73 e0       	ldi	r23, 0x03	; 3
     986:	88 e2       	ldi	r24, 0x28	; 40
     988:	97 e0       	ldi	r25, 0x07	; 7
     98a:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     98e:	40 91 ba 05 	lds	r20, 0x05BA	; 0x8005ba <PreCharge_Delay>
     992:	50 91 bb 05 	lds	r21, 0x05BB	; 0x8005bb <PreCharge_Delay+0x1>
     996:	60 91 bc 05 	lds	r22, 0x05BC	; 0x8005bc <PreCharge_Delay+0x2>
     99a:	70 91 bd 05 	lds	r23, 0x05BD	; 0x8005bd <PreCharge_Delay+0x3>
     99e:	2a e0       	ldi	r18, 0x0A	; 10
     9a0:	30 e0       	ldi	r19, 0x00	; 0
     9a2:	88 e2       	ldi	r24, 0x28	; 40
     9a4:	97 e0       	ldi	r25, 0x07	; 7
     9a6:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <Print::print(unsigned long, int)>
     9aa:	67 e7       	ldi	r22, 0x77	; 119
     9ac:	73 e0       	ldi	r23, 0x03	; 3
     9ae:	88 e2       	ldi	r24, 0x28	; 40
     9b0:	97 e0       	ldi	r25, 0x07	; 7
     9b2:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     9b6:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <do_byte>
     9ba:	82 fb       	bst	r24, 2
     9bc:	99 27       	eor	r25, r25
     9be:	90 f9       	bld	r25, 0
     9c0:	1f 92       	push	r1
     9c2:	9f 93       	push	r25
     9c4:	81 fb       	bst	r24, 1
     9c6:	99 27       	eor	r25, r25
     9c8:	90 f9       	bld	r25, 0
     9ca:	1f 92       	push	r1
     9cc:	9f 93       	push	r25
     9ce:	81 70       	andi	r24, 0x01	; 1
     9d0:	1f 92       	push	r1
     9d2:	8f 93       	push	r24
     9d4:	08 e3       	ldi	r16, 0x38	; 56
     9d6:	11 e0       	ldi	r17, 0x01	; 1
     9d8:	1f 93       	push	r17
     9da:	0f 93       	push	r16
     9dc:	df 93       	push	r29
     9de:	cf 93       	push	r28
     9e0:	0e 94 54 21 	call	0x42a8	; 0x42a8 <sprintf>
     9e4:	be 01       	movw	r22, r28
     9e6:	88 e2       	ldi	r24, 0x28	; 40
     9e8:	97 e0       	ldi	r25, 0x07	; 7
     9ea:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     9ee:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <o2_raw_adc_count>
     9f2:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <o2_raw_adc_count+0x1>
     9f6:	4a e0       	ldi	r20, 0x0A	; 10
     9f8:	50 e0       	ldi	r21, 0x00	; 0
     9fa:	88 e2       	ldi	r24, 0x28	; 40
     9fc:	97 e0       	ldi	r25, 0x07	; 7
     9fe:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <Print::print(int, int)>
     a02:	67 e7       	ldi	r22, 0x77	; 119
     a04:	73 e0       	ldi	r23, 0x03	; 3
     a06:	88 e2       	ldi	r24, 0x28	; 40
     a08:	97 e0       	ldi	r25, 0x07	; 7
     a0a:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     a0e:	40 91 a3 05 	lds	r20, 0x05A3	; 0x8005a3 <m_raw_voltage>
     a12:	50 91 a4 05 	lds	r21, 0x05A4	; 0x8005a4 <m_raw_voltage+0x1>
     a16:	60 91 a5 05 	lds	r22, 0x05A5	; 0x8005a5 <m_raw_voltage+0x2>
     a1a:	70 91 a6 05 	lds	r23, 0x05A6	; 0x8005a6 <m_raw_voltage+0x3>
     a1e:	22 e0       	ldi	r18, 0x02	; 2
     a20:	30 e0       	ldi	r19, 0x00	; 0
     a22:	88 e2       	ldi	r24, 0x28	; 40
     a24:	97 e0       	ldi	r25, 0x07	; 7
     a26:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <Print::print(double, int)>
     a2a:	67 e7       	ldi	r22, 0x77	; 119
     a2c:	73 e0       	ldi	r23, 0x03	; 3
     a2e:	88 e2       	ldi	r24, 0x28	; 40
     a30:	97 e0       	ldi	r25, 0x07	; 7
     a32:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     a36:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <o2_concentration>
     a3a:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <o2_concentration+0x1>
     a3e:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <o2_concentration+0x2>
     a42:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <o2_concentration+0x3>
     a46:	22 e0       	ldi	r18, 0x02	; 2
     a48:	30 e0       	ldi	r19, 0x00	; 0
     a4a:	88 e2       	ldi	r24, 0x28	; 40
     a4c:	97 e0       	ldi	r25, 0x07	; 7
     a4e:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <Print::print(double, int)>
     a52:	67 e7       	ldi	r22, 0x77	; 119
     a54:	73 e0       	ldi	r23, 0x03	; 3
     a56:	88 e2       	ldi	r24, 0x28	; 40
     a58:	97 e0       	ldi	r25, 0x07	; 7
     a5a:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     a5e:	1f 92       	push	r1
     a60:	83 e0       	ldi	r24, 0x03	; 3
     a62:	8f 93       	push	r24
     a64:	1f 92       	push	r1
     a66:	82 e0       	ldi	r24, 0x02	; 2
     a68:	8f 93       	push	r24
     a6a:	1f 92       	push	r1
     a6c:	81 e0       	ldi	r24, 0x01	; 1
     a6e:	8f 93       	push	r24
     a70:	1f 93       	push	r17
     a72:	0f 93       	push	r16
     a74:	df 93       	push	r29
     a76:	cf 93       	push	r28
     a78:	0e 94 54 21 	call	0x42a8	; 0x42a8 <sprintf>
     a7c:	8d b7       	in	r24, 0x3d	; 61
     a7e:	9e b7       	in	r25, 0x3e	; 62
     a80:	88 96       	adiw	r24, 0x28	; 40
     a82:	0f b6       	in	r0, 0x3f	; 63
     a84:	f8 94       	cli
     a86:	9e bf       	out	0x3e, r25	; 62
     a88:	0f be       	out	0x3f, r0	; 63
     a8a:	8d bf       	out	0x3d, r24	; 61
     a8c:	be 01       	movw	r22, r28
     a8e:	88 e2       	ldi	r24, 0x28	; 40
     a90:	97 e0       	ldi	r25, 0x07	; 7
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	0f 91       	pop	r16
     a9a:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <Print::println(char const*)>

00000a9e <logs_task()>:
_Z9logs_taskv():
     a9e:	80 91 d5 05 	lds	r24, 0x05D5	; 0x8005d5 <f_sec_logs_task>
     aa2:	88 23       	and	r24, r24
     aa4:	a9 f0       	breq	.+42     	; 0xad0 <logs_task()+0x32>
     aa6:	10 92 d5 05 	sts	0x05D5, r1	; 0x8005d5 <f_sec_logs_task>
     aaa:	80 91 8c 05 	lds	r24, 0x058C	; 0x80058c <logs_task()::log_period>
     aae:	90 91 8d 05 	lds	r25, 0x058D	; 0x80058d <logs_task()::log_period+0x1>
     ab2:	01 96       	adiw	r24, 0x01	; 1
     ab4:	82 30       	cpi	r24, 0x02	; 2
     ab6:	91 05       	cpc	r25, r1
     ab8:	2c f4       	brge	.+10     	; 0xac4 <logs_task()+0x26>
     aba:	90 93 8d 05 	sts	0x058D, r25	; 0x80058d <logs_task()::log_period+0x1>
     abe:	80 93 8c 05 	sts	0x058C, r24	; 0x80058c <logs_task()::log_period>
     ac2:	08 95       	ret
     ac4:	10 92 8d 05 	sts	0x058D, r1	; 0x80058d <logs_task()::log_period+0x1>
     ac8:	10 92 8c 05 	sts	0x058C, r1	; 0x80058c <logs_task()::log_period>
     acc:	0c 94 5b 04 	jmp	0x8b6	; 0x8b6 <log_dump()>
     ad0:	08 95       	ret

00000ad2 <ads_init()>:
_Z8ads_initv():
     ad2:	62 e4       	ldi	r22, 0x42	; 66
     ad4:	71 e0       	ldi	r23, 0x01	; 1
     ad6:	88 e2       	ldi	r24, 0x28	; 40
     ad8:	97 e0       	ldi	r25, 0x07	; 7
     ada:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     ade:	66 e8       	ldi	r22, 0x86	; 134
     ae0:	71 e0       	ldi	r23, 0x01	; 1
     ae2:	88 e2       	ldi	r24, 0x28	; 40
     ae4:	97 e0       	ldi	r25, 0x07	; 7
     ae6:	0e 94 98 1c 	call	0x3930	; 0x3930 <Print::println(__FlashStringHelper const*)>
     aea:	86 e7       	ldi	r24, 0x76	; 118
     aec:	95 e0       	ldi	r25, 0x05	; 5
     aee:	0e 94 6d 13 	call	0x26da	; 0x26da <ADS1X15::begin()>
     af2:	61 e0       	ldi	r22, 0x01	; 1
     af4:	86 e7       	ldi	r24, 0x76	; 118
     af6:	95 e0       	ldi	r25, 0x05	; 5
     af8:	0e 94 81 13 	call	0x2702	; 0x2702 <ADS1X15::setGain(unsigned char)>
     afc:	67 e0       	ldi	r22, 0x07	; 7
     afe:	86 e7       	ldi	r24, 0x76	; 118
     b00:	95 e0       	ldi	r25, 0x05	; 5
     b02:	0e 94 ce 13 	call	0x279c	; 0x279c <ADS1X15::setDataRate(unsigned char)>
     b06:	60 e0       	ldi	r22, 0x00	; 0
     b08:	86 e7       	ldi	r24, 0x76	; 118
     b0a:	95 e0       	ldi	r25, 0x05	; 5
     b0c:	0e 94 c2 13 	call	0x2784	; 0x2784 <ADS1X15::setMode(unsigned char)>
     b10:	60 e0       	ldi	r22, 0x00	; 0
     b12:	86 e7       	ldi	r24, 0x76	; 118
     b14:	95 e0       	ldi	r25, 0x05	; 5
     b16:	0c 94 bd 14 	jmp	0x297a	; 0x297a <ADS1X15::readADC(unsigned char)>

00000b1a <sensor_zero_calibration()>:
_Z23sensor_zero_calibrationv():
     b1a:	4f 92       	push	r4
     b1c:	5f 92       	push	r5
     b1e:	6f 92       	push	r6
     b20:	7f 92       	push	r7
     b22:	8f 92       	push	r8
     b24:	9f 92       	push	r9
     b26:	af 92       	push	r10
     b28:	bf 92       	push	r11
     b2a:	cf 92       	push	r12
     b2c:	df 92       	push	r13
     b2e:	ef 92       	push	r14
     b30:	ff 92       	push	r15
     b32:	0f 93       	push	r16
     b34:	1f 93       	push	r17
     b36:	cf 93       	push	r28
     b38:	df 93       	push	r29
     b3a:	cd b7       	in	r28, 0x3d	; 61
     b3c:	de b7       	in	r29, 0x3e	; 62
     b3e:	2e 97       	sbiw	r28, 0x0e	; 14
     b40:	0f b6       	in	r0, 0x3f	; 63
     b42:	f8 94       	cli
     b44:	de bf       	out	0x3e, r29	; 62
     b46:	0f be       	out	0x3f, r0	; 63
     b48:	cd bf       	out	0x3d, r28	; 61
     b4a:	8c e0       	ldi	r24, 0x0C	; 12
     b4c:	91 e0       	ldi	r25, 0x01	; 1
     b4e:	9e 87       	std	Y+14, r25	; 0x0e
     b50:	8d 87       	std	Y+13, r24	; 0x0d
     b52:	00 e0       	ldi	r16, 0x00	; 0
     b54:	11 e0       	ldi	r17, 0x01	; 1
     b56:	19 86       	std	Y+9, r1	; 0x09
     b58:	1a 86       	std	Y+10, r1	; 0x0a
     b5a:	1b 86       	std	Y+11, r1	; 0x0b
     b5c:	1c 86       	std	Y+12, r1	; 0x0c
     b5e:	1d 82       	std	Y+5, r1	; 0x05
     b60:	1e 82       	std	Y+6, r1	; 0x06
     b62:	1f 82       	std	Y+7, r1	; 0x07
     b64:	18 86       	std	Y+8, r1	; 0x08
     b66:	19 82       	std	Y+1, r1	; 0x01
     b68:	1a 82       	std	Y+2, r1	; 0x02
     b6a:	1b 82       	std	Y+3, r1	; 0x03
     b6c:	1c 82       	std	Y+4, r1	; 0x04
     b6e:	c1 2c       	mov	r12, r1
     b70:	d1 2c       	mov	r13, r1
     b72:	76 01       	movw	r14, r12
     b74:	ed 85       	ldd	r30, Y+13	; 0x0d
     b76:	fe 85       	ldd	r31, Y+14	; 0x0e
     b78:	41 90       	ld	r4, Z+
     b7a:	51 90       	ld	r5, Z+
     b7c:	61 90       	ld	r6, Z+
     b7e:	71 90       	ld	r7, Z+
     b80:	fe 87       	std	Y+14, r31	; 0x0e
     b82:	ed 87       	std	Y+13, r30	; 0x0d
     b84:	f8 01       	movw	r30, r16
     b86:	81 90       	ld	r8, Z+
     b88:	91 90       	ld	r9, Z+
     b8a:	a1 90       	ld	r10, Z+
     b8c:	b1 90       	ld	r11, Z+
     b8e:	8f 01       	movw	r16, r30
     b90:	a5 01       	movw	r20, r10
     b92:	94 01       	movw	r18, r8
     b94:	c7 01       	movw	r24, r14
     b96:	b6 01       	movw	r22, r12
     b98:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <__addsf3>
     b9c:	6b 01       	movw	r12, r22
     b9e:	7c 01       	movw	r14, r24
     ba0:	a3 01       	movw	r20, r6
     ba2:	92 01       	movw	r18, r4
     ba4:	69 81       	ldd	r22, Y+1	; 0x01
     ba6:	7a 81       	ldd	r23, Y+2	; 0x02
     ba8:	8b 81       	ldd	r24, Y+3	; 0x03
     baa:	9c 81       	ldd	r25, Y+4	; 0x04
     bac:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <__addsf3>
     bb0:	69 83       	std	Y+1, r22	; 0x01
     bb2:	7a 83       	std	Y+2, r23	; 0x02
     bb4:	8b 83       	std	Y+3, r24	; 0x03
     bb6:	9c 83       	std	Y+4, r25	; 0x04
     bb8:	a5 01       	movw	r20, r10
     bba:	94 01       	movw	r18, r8
     bbc:	c5 01       	movw	r24, r10
     bbe:	b4 01       	movw	r22, r8
     bc0:	0e 94 7e 20 	call	0x40fc	; 0x40fc <__mulsf3>
     bc4:	9b 01       	movw	r18, r22
     bc6:	ac 01       	movw	r20, r24
     bc8:	6d 81       	ldd	r22, Y+5	; 0x05
     bca:	7e 81       	ldd	r23, Y+6	; 0x06
     bcc:	8f 81       	ldd	r24, Y+7	; 0x07
     bce:	98 85       	ldd	r25, Y+8	; 0x08
     bd0:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <__addsf3>
     bd4:	6d 83       	std	Y+5, r22	; 0x05
     bd6:	7e 83       	std	Y+6, r23	; 0x06
     bd8:	8f 83       	std	Y+7, r24	; 0x07
     bda:	98 87       	std	Y+8, r25	; 0x08
     bdc:	a5 01       	movw	r20, r10
     bde:	94 01       	movw	r18, r8
     be0:	c3 01       	movw	r24, r6
     be2:	b2 01       	movw	r22, r4
     be4:	0e 94 7e 20 	call	0x40fc	; 0x40fc <__mulsf3>
     be8:	9b 01       	movw	r18, r22
     bea:	ac 01       	movw	r20, r24
     bec:	69 85       	ldd	r22, Y+9	; 0x09
     bee:	7a 85       	ldd	r23, Y+10	; 0x0a
     bf0:	8b 85       	ldd	r24, Y+11	; 0x0b
     bf2:	9c 85       	ldd	r25, Y+12	; 0x0c
     bf4:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <__addsf3>
     bf8:	69 87       	std	Y+9, r22	; 0x09
     bfa:	7a 87       	std	Y+10, r23	; 0x0a
     bfc:	8b 87       	std	Y+11, r24	; 0x0b
     bfe:	9c 87       	std	Y+12, r25	; 0x0c
     c00:	68 e5       	ldi	r22, 0x58	; 88
     c02:	71 e0       	ldi	r23, 0x01	; 1
     c04:	88 e2       	ldi	r24, 0x28	; 40
     c06:	97 e0       	ldi	r25, 0x07	; 7
     c08:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     c0c:	22 e0       	ldi	r18, 0x02	; 2
     c0e:	30 e0       	ldi	r19, 0x00	; 0
     c10:	b5 01       	movw	r22, r10
     c12:	a4 01       	movw	r20, r8
     c14:	88 e2       	ldi	r24, 0x28	; 40
     c16:	97 e0       	ldi	r25, 0x07	; 7
     c18:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <Print::print(double, int)>
     c1c:	6d e5       	ldi	r22, 0x5D	; 93
     c1e:	71 e0       	ldi	r23, 0x01	; 1
     c20:	88 e2       	ldi	r24, 0x28	; 40
     c22:	97 e0       	ldi	r25, 0x07	; 7
     c24:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     c28:	22 e0       	ldi	r18, 0x02	; 2
     c2a:	30 e0       	ldi	r19, 0x00	; 0
     c2c:	b3 01       	movw	r22, r6
     c2e:	a2 01       	movw	r20, r4
     c30:	88 e2       	ldi	r24, 0x28	; 40
     c32:	97 e0       	ldi	r25, 0x07	; 7
     c34:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <Print::println(double, int)>
     c38:	64 e6       	ldi	r22, 0x64	; 100
     c3a:	71 e0       	ldi	r23, 0x01	; 1
     c3c:	88 e2       	ldi	r24, 0x28	; 40
     c3e:	97 e0       	ldi	r25, 0x07	; 7
     c40:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     c44:	22 e0       	ldi	r18, 0x02	; 2
     c46:	30 e0       	ldi	r19, 0x00	; 0
     c48:	b7 01       	movw	r22, r14
     c4a:	a6 01       	movw	r20, r12
     c4c:	88 e2       	ldi	r24, 0x28	; 40
     c4e:	97 e0       	ldi	r25, 0x07	; 7
     c50:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <Print::print(double, int)>
     c54:	6e e6       	ldi	r22, 0x6E	; 110
     c56:	71 e0       	ldi	r23, 0x01	; 1
     c58:	88 e2       	ldi	r24, 0x28	; 40
     c5a:	97 e0       	ldi	r25, 0x07	; 7
     c5c:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     c60:	22 e0       	ldi	r18, 0x02	; 2
     c62:	30 e0       	ldi	r19, 0x00	; 0
     c64:	49 81       	ldd	r20, Y+1	; 0x01
     c66:	5a 81       	ldd	r21, Y+2	; 0x02
     c68:	6b 81       	ldd	r22, Y+3	; 0x03
     c6a:	7c 81       	ldd	r23, Y+4	; 0x04
     c6c:	88 e2       	ldi	r24, 0x28	; 40
     c6e:	97 e0       	ldi	r25, 0x07	; 7
     c70:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <Print::println(double, int)>
     c74:	6a e7       	ldi	r22, 0x7A	; 122
     c76:	71 e0       	ldi	r23, 0x01	; 1
     c78:	88 e2       	ldi	r24, 0x28	; 40
     c7a:	97 e0       	ldi	r25, 0x07	; 7
     c7c:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     c80:	22 e0       	ldi	r18, 0x02	; 2
     c82:	30 e0       	ldi	r19, 0x00	; 0
     c84:	4d 81       	ldd	r20, Y+5	; 0x05
     c86:	5e 81       	ldd	r21, Y+6	; 0x06
     c88:	6f 81       	ldd	r22, Y+7	; 0x07
     c8a:	78 85       	ldd	r23, Y+8	; 0x08
     c8c:	88 e2       	ldi	r24, 0x28	; 40
     c8e:	97 e0       	ldi	r25, 0x07	; 7
     c90:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <Print::print(double, int)>
     c94:	65 e8       	ldi	r22, 0x85	; 133
     c96:	71 e0       	ldi	r23, 0x01	; 1
     c98:	88 e2       	ldi	r24, 0x28	; 40
     c9a:	97 e0       	ldi	r25, 0x07	; 7
     c9c:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     ca0:	22 e0       	ldi	r18, 0x02	; 2
     ca2:	30 e0       	ldi	r19, 0x00	; 0
     ca4:	49 85       	ldd	r20, Y+9	; 0x09
     ca6:	5a 85       	ldd	r21, Y+10	; 0x0a
     ca8:	6b 85       	ldd	r22, Y+11	; 0x0b
     caa:	7c 85       	ldd	r23, Y+12	; 0x0c
     cac:	88 e2       	ldi	r24, 0x28	; 40
     cae:	97 e0       	ldi	r25, 0x07	; 7
     cb0:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <Print::println(double, int)>
     cb4:	8d 85       	ldd	r24, Y+13	; 0x0d
     cb6:	9e 85       	ldd	r25, Y+14	; 0x0e
     cb8:	88 51       	subi	r24, 0x18	; 24
     cba:	91 40       	sbci	r25, 0x01	; 1
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <sensor_zero_calibration()+0x1a6>
     cbe:	5a cf       	rjmp	.-332    	; 0xb74 <sensor_zero_calibration()+0x5a>
     cc0:	20 e0       	ldi	r18, 0x00	; 0
     cc2:	30 e0       	ldi	r19, 0x00	; 0
     cc4:	40 e4       	ldi	r20, 0x40	; 64
     cc6:	50 e4       	ldi	r21, 0x40	; 64
     cc8:	6d 81       	ldd	r22, Y+5	; 0x05
     cca:	7e 81       	ldd	r23, Y+6	; 0x06
     ccc:	8f 81       	ldd	r24, Y+7	; 0x07
     cce:	98 85       	ldd	r25, Y+8	; 0x08
     cd0:	0e 94 7e 20 	call	0x40fc	; 0x40fc <__mulsf3>
     cd4:	4b 01       	movw	r8, r22
     cd6:	5c 01       	movw	r10, r24
     cd8:	a7 01       	movw	r20, r14
     cda:	96 01       	movw	r18, r12
     cdc:	c7 01       	movw	r24, r14
     cde:	b6 01       	movw	r22, r12
     ce0:	0e 94 7e 20 	call	0x40fc	; 0x40fc <__mulsf3>
     ce4:	9b 01       	movw	r18, r22
     ce6:	ac 01       	movw	r20, r24
     ce8:	c5 01       	movw	r24, r10
     cea:	b4 01       	movw	r22, r8
     cec:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__subsf3>
     cf0:	4b 01       	movw	r8, r22
     cf2:	5c 01       	movw	r10, r24
     cf4:	62 e9       	ldi	r22, 0x92	; 146
     cf6:	71 e0       	ldi	r23, 0x01	; 1
     cf8:	88 e2       	ldi	r24, 0x28	; 40
     cfa:	97 e0       	ldi	r25, 0x07	; 7
     cfc:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     d00:	22 e0       	ldi	r18, 0x02	; 2
     d02:	30 e0       	ldi	r19, 0x00	; 0
     d04:	b5 01       	movw	r22, r10
     d06:	a4 01       	movw	r20, r8
     d08:	88 e2       	ldi	r24, 0x28	; 40
     d0a:	97 e0       	ldi	r25, 0x07	; 7
     d0c:	0e 94 92 1e 	call	0x3d24	; 0x3d24 <Print::println(double, int)>
     d10:	20 e0       	ldi	r18, 0x00	; 0
     d12:	30 e0       	ldi	r19, 0x00	; 0
     d14:	a9 01       	movw	r20, r18
     d16:	c5 01       	movw	r24, r10
     d18:	b4 01       	movw	r22, r8
     d1a:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <__cmpsf2>
     d1e:	88 23       	and	r24, r24
     d20:	09 f4       	brne	.+2      	; 0xd24 <sensor_zero_calibration()+0x20a>
     d22:	87 c0       	rjmp	.+270    	; 0xe32 <sensor_zero_calibration()+0x318>
     d24:	20 e0       	ldi	r18, 0x00	; 0
     d26:	30 e0       	ldi	r19, 0x00	; 0
     d28:	40 e4       	ldi	r20, 0x40	; 64
     d2a:	50 e4       	ldi	r21, 0x40	; 64
     d2c:	69 85       	ldd	r22, Y+9	; 0x09
     d2e:	7a 85       	ldd	r23, Y+10	; 0x0a
     d30:	8b 85       	ldd	r24, Y+11	; 0x0b
     d32:	9c 85       	ldd	r25, Y+12	; 0x0c
     d34:	0e 94 7e 20 	call	0x40fc	; 0x40fc <__mulsf3>
     d38:	2b 01       	movw	r4, r22
     d3a:	3c 01       	movw	r6, r24
     d3c:	29 81       	ldd	r18, Y+1	; 0x01
     d3e:	3a 81       	ldd	r19, Y+2	; 0x02
     d40:	4b 81       	ldd	r20, Y+3	; 0x03
     d42:	5c 81       	ldd	r21, Y+4	; 0x04
     d44:	c7 01       	movw	r24, r14
     d46:	b6 01       	movw	r22, r12
     d48:	0e 94 7e 20 	call	0x40fc	; 0x40fc <__mulsf3>
     d4c:	9b 01       	movw	r18, r22
     d4e:	ac 01       	movw	r20, r24
     d50:	c3 01       	movw	r24, r6
     d52:	b2 01       	movw	r22, r4
     d54:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__subsf3>
     d58:	a5 01       	movw	r20, r10
     d5a:	94 01       	movw	r18, r8
     d5c:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__divsf3>
     d60:	60 93 ab 05 	sts	0x05AB, r22	; 0x8005ab <o2_slope>
     d64:	70 93 ac 05 	sts	0x05AC, r23	; 0x8005ac <o2_slope+0x1>
     d68:	80 93 ad 05 	sts	0x05AD, r24	; 0x8005ad <o2_slope+0x2>
     d6c:	90 93 ae 05 	sts	0x05AE, r25	; 0x8005ae <o2_slope+0x3>
     d70:	2d 81       	ldd	r18, Y+5	; 0x05
     d72:	3e 81       	ldd	r19, Y+6	; 0x06
     d74:	4f 81       	ldd	r20, Y+7	; 0x07
     d76:	58 85       	ldd	r21, Y+8	; 0x08
     d78:	69 81       	ldd	r22, Y+1	; 0x01
     d7a:	7a 81       	ldd	r23, Y+2	; 0x02
     d7c:	8b 81       	ldd	r24, Y+3	; 0x03
     d7e:	9c 81       	ldd	r25, Y+4	; 0x04
     d80:	0e 94 7e 20 	call	0x40fc	; 0x40fc <__mulsf3>
     d84:	2b 01       	movw	r4, r22
     d86:	3c 01       	movw	r6, r24
     d88:	29 85       	ldd	r18, Y+9	; 0x09
     d8a:	3a 85       	ldd	r19, Y+10	; 0x0a
     d8c:	4b 85       	ldd	r20, Y+11	; 0x0b
     d8e:	5c 85       	ldd	r21, Y+12	; 0x0c
     d90:	c7 01       	movw	r24, r14
     d92:	b6 01       	movw	r22, r12
     d94:	0e 94 7e 20 	call	0x40fc	; 0x40fc <__mulsf3>
     d98:	9b 01       	movw	r18, r22
     d9a:	ac 01       	movw	r20, r24
     d9c:	c3 01       	movw	r24, r6
     d9e:	b2 01       	movw	r22, r4
     da0:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__subsf3>
     da4:	a5 01       	movw	r20, r10
     da6:	94 01       	movw	r18, r8
     da8:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__divsf3>
     dac:	60 93 a7 05 	sts	0x05A7, r22	; 0x8005a7 <o2_const_val>
     db0:	70 93 a8 05 	sts	0x05A8, r23	; 0x8005a8 <o2_const_val+0x1>
     db4:	80 93 a9 05 	sts	0x05A9, r24	; 0x8005a9 <o2_const_val+0x2>
     db8:	90 93 aa 05 	sts	0x05AA, r25	; 0x8005aa <o2_const_val+0x3>
     dbc:	1a 82       	std	Y+2, r1	; 0x02
     dbe:	19 82       	std	Y+1, r1	; 0x01
     dc0:	64 e5       	ldi	r22, 0x54	; 84
     dc2:	75 e0       	ldi	r23, 0x05	; 5
     dc4:	88 e2       	ldi	r24, 0x28	; 40
     dc6:	97 e0       	ldi	r25, 0x07	; 7
     dc8:	0e 94 aa 1c 	call	0x3954	; 0x3954 <Print::println(char const*)>
     dcc:	60 ec       	ldi	r22, 0xC0	; 192
     dce:	71 e0       	ldi	r23, 0x01	; 1
     dd0:	88 e2       	ldi	r24, 0x28	; 40
     dd2:	97 e0       	ldi	r25, 0x07	; 7
     dd4:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     dd8:	40 91 ab 05 	lds	r20, 0x05AB	; 0x8005ab <o2_slope>
     ddc:	50 91 ac 05 	lds	r21, 0x05AC	; 0x8005ac <o2_slope+0x1>
     de0:	60 91 ad 05 	lds	r22, 0x05AD	; 0x8005ad <o2_slope+0x2>
     de4:	70 91 ae 05 	lds	r23, 0x05AE	; 0x8005ae <o2_slope+0x3>
     de8:	22 e0       	ldi	r18, 0x02	; 2
     dea:	30 e0       	ldi	r19, 0x00	; 0
     dec:	88 e2       	ldi	r24, 0x28	; 40
     dee:	97 e0       	ldi	r25, 0x07	; 7
     df0:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <Print::print(double, int)>
     df4:	6c ec       	ldi	r22, 0xCC	; 204
     df6:	71 e0       	ldi	r23, 0x01	; 1
     df8:	88 e2       	ldi	r24, 0x28	; 40
     dfa:	97 e0       	ldi	r25, 0x07	; 7
     dfc:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     e00:	89 81       	ldd	r24, Y+1	; 0x01
     e02:	9a 81       	ldd	r25, Y+2	; 0x02
     e04:	2e 96       	adiw	r28, 0x0e	; 14
     e06:	0f b6       	in	r0, 0x3f	; 63
     e08:	f8 94       	cli
     e0a:	de bf       	out	0x3e, r29	; 62
     e0c:	0f be       	out	0x3f, r0	; 63
     e0e:	cd bf       	out	0x3d, r28	; 61
     e10:	df 91       	pop	r29
     e12:	cf 91       	pop	r28
     e14:	1f 91       	pop	r17
     e16:	0f 91       	pop	r16
     e18:	ff 90       	pop	r15
     e1a:	ef 90       	pop	r14
     e1c:	df 90       	pop	r13
     e1e:	cf 90       	pop	r12
     e20:	bf 90       	pop	r11
     e22:	af 90       	pop	r10
     e24:	9f 90       	pop	r9
     e26:	8f 90       	pop	r8
     e28:	7f 90       	pop	r7
     e2a:	6f 90       	pop	r6
     e2c:	5f 90       	pop	r5
     e2e:	4f 90       	pop	r4
     e30:	08 95       	ret
     e32:	10 92 ab 05 	sts	0x05AB, r1	; 0x8005ab <o2_slope>
     e36:	10 92 ac 05 	sts	0x05AC, r1	; 0x8005ac <o2_slope+0x1>
     e3a:	10 92 ad 05 	sts	0x05AD, r1	; 0x8005ad <o2_slope+0x2>
     e3e:	10 92 ae 05 	sts	0x05AE, r1	; 0x8005ae <o2_slope+0x3>
     e42:	10 92 a7 05 	sts	0x05A7, r1	; 0x8005a7 <o2_const_val>
     e46:	10 92 a8 05 	sts	0x05A8, r1	; 0x8005a8 <o2_const_val+0x1>
     e4a:	10 92 a9 05 	sts	0x05A9, r1	; 0x8005a9 <o2_const_val+0x2>
     e4e:	10 92 aa 05 	sts	0x05AA, r1	; 0x8005aa <o2_const_val+0x3>
     e52:	61 ea       	ldi	r22, 0xA1	; 161
     e54:	71 e0       	ldi	r23, 0x01	; 1
     e56:	88 e2       	ldi	r24, 0x28	; 40
     e58:	97 e0       	ldi	r25, 0x07	; 7
     e5a:	0e 94 aa 1c 	call	0x3954	; 0x3954 <Print::println(char const*)>
     e5e:	88 ef       	ldi	r24, 0xF8	; 248
     e60:	9f ef       	ldi	r25, 0xFF	; 255
     e62:	9a 83       	std	Y+2, r25	; 0x02
     e64:	89 83       	std	Y+1, r24	; 0x01
     e66:	ac cf       	rjmp	.-168    	; 0xdc0 <sensor_zero_calibration()+0x2a6>

00000e68 <o2_sensor_scan()>:
_Z14o2_sensor_scanv():
     e68:	8f 92       	push	r8
     e6a:	9f 92       	push	r9
     e6c:	af 92       	push	r10
     e6e:	bf 92       	push	r11
     e70:	cf 92       	push	r12
     e72:	df 92       	push	r13
     e74:	ef 92       	push	r14
     e76:	ff 92       	push	r15
     e78:	60 e0       	ldi	r22, 0x00	; 0
     e7a:	86 e7       	ldi	r24, 0x76	; 118
     e7c:	95 e0       	ldi	r25, 0x05	; 5
     e7e:	0e 94 bd 14 	call	0x297a	; 0x297a <ADS1X15::readADC(unsigned char)>
     e82:	86 e7       	ldi	r24, 0x76	; 118
     e84:	95 e0       	ldi	r25, 0x05	; 5
     e86:	0e 94 8e 14 	call	0x291c	; 0x291c <ADS1X15::getValue()>
     e8a:	90 93 b0 05 	sts	0x05B0, r25	; 0x8005b0 <o2_raw_adc_count+0x1>
     e8e:	80 93 af 05 	sts	0x05AF, r24	; 0x8005af <o2_raw_adc_count>
     e92:	6e ed       	ldi	r22, 0xDE	; 222
     e94:	71 e0       	ldi	r23, 0x01	; 1
     e96:	88 e2       	ldi	r24, 0x28	; 40
     e98:	97 e0       	ldi	r25, 0x07	; 7
     e9a:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     e9e:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <o2_raw_adc_count>
     ea2:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <o2_raw_adc_count+0x1>
     ea6:	4a e0       	ldi	r20, 0x0A	; 10
     ea8:	50 e0       	ldi	r21, 0x00	; 0
     eaa:	88 e2       	ldi	r24, 0x28	; 40
     eac:	97 e0       	ldi	r25, 0x07	; 7
     eae:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <Print::print(int, int)>
     eb2:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <o2_raw_adc_count>
     eb6:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <o2_raw_adc_count+0x1>
     eba:	07 2e       	mov	r0, r23
     ebc:	00 0c       	add	r0, r0
     ebe:	88 0b       	sbc	r24, r24
     ec0:	99 0b       	sbc	r25, r25
     ec2:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__floatsisf>
     ec6:	20 e0       	ldi	r18, 0x00	; 0
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	4a e7       	ldi	r20, 0x7A	; 122
     ecc:	54 e4       	ldi	r21, 0x44	; 68
     ece:	0e 94 7e 20 	call	0x40fc	; 0x40fc <__mulsf3>
     ed2:	2f e6       	ldi	r18, 0x6F	; 111
     ed4:	32 e1       	ldi	r19, 0x12	; 18
     ed6:	43 e0       	ldi	r20, 0x03	; 3
     ed8:	59 e3       	ldi	r21, 0x39	; 57
     eda:	0e 94 7e 20 	call	0x40fc	; 0x40fc <__mulsf3>
     ede:	60 93 a3 05 	sts	0x05A3, r22	; 0x8005a3 <m_raw_voltage>
     ee2:	70 93 a4 05 	sts	0x05A4, r23	; 0x8005a4 <m_raw_voltage+0x1>
     ee6:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <m_raw_voltage+0x2>
     eea:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <m_raw_voltage+0x3>
     eee:	62 ef       	ldi	r22, 0xF2	; 242
     ef0:	71 e0       	ldi	r23, 0x01	; 1
     ef2:	88 e2       	ldi	r24, 0x28	; 40
     ef4:	97 e0       	ldi	r25, 0x07	; 7
     ef6:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     efa:	40 91 a3 05 	lds	r20, 0x05A3	; 0x8005a3 <m_raw_voltage>
     efe:	50 91 a4 05 	lds	r21, 0x05A4	; 0x8005a4 <m_raw_voltage+0x1>
     f02:	60 91 a5 05 	lds	r22, 0x05A5	; 0x8005a5 <m_raw_voltage+0x2>
     f06:	70 91 a6 05 	lds	r23, 0x05A6	; 0x8005a6 <m_raw_voltage+0x3>
     f0a:	24 e0       	ldi	r18, 0x04	; 4
     f0c:	30 e0       	ldi	r19, 0x00	; 0
     f0e:	88 e2       	ldi	r24, 0x28	; 40
     f10:	97 e0       	ldi	r25, 0x07	; 7
     f12:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <Print::print(double, int)>
     f16:	60 91 af 05 	lds	r22, 0x05AF	; 0x8005af <o2_raw_adc_count>
     f1a:	70 91 b0 05 	lds	r23, 0x05B0	; 0x8005b0 <o2_raw_adc_count+0x1>
     f1e:	c0 90 ab 05 	lds	r12, 0x05AB	; 0x8005ab <o2_slope>
     f22:	d0 90 ac 05 	lds	r13, 0x05AC	; 0x8005ac <o2_slope+0x1>
     f26:	e0 90 ad 05 	lds	r14, 0x05AD	; 0x8005ad <o2_slope+0x2>
     f2a:	f0 90 ae 05 	lds	r15, 0x05AE	; 0x8005ae <o2_slope+0x3>
     f2e:	80 90 a7 05 	lds	r8, 0x05A7	; 0x8005a7 <o2_const_val>
     f32:	90 90 a8 05 	lds	r9, 0x05A8	; 0x8005a8 <o2_const_val+0x1>
     f36:	a0 90 a9 05 	lds	r10, 0x05A9	; 0x8005a9 <o2_const_val+0x2>
     f3a:	b0 90 aa 05 	lds	r11, 0x05AA	; 0x8005aa <o2_const_val+0x3>
     f3e:	07 2e       	mov	r0, r23
     f40:	00 0c       	add	r0, r0
     f42:	88 0b       	sbc	r24, r24
     f44:	99 0b       	sbc	r25, r25
     f46:	0e 94 c9 1f 	call	0x3f92	; 0x3f92 <__floatsisf>
     f4a:	a7 01       	movw	r20, r14
     f4c:	96 01       	movw	r18, r12
     f4e:	0e 94 7e 20 	call	0x40fc	; 0x40fc <__mulsf3>
     f52:	a5 01       	movw	r20, r10
     f54:	94 01       	movw	r18, r8
     f56:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <__addsf3>
     f5a:	60 93 24 01 	sts	0x0124, r22	; 0x800124 <o2_concentration>
     f5e:	70 93 25 01 	sts	0x0125, r23	; 0x800125 <o2_concentration+0x1>
     f62:	80 93 26 01 	sts	0x0126, r24	; 0x800126 <o2_concentration+0x2>
     f66:	90 93 27 01 	sts	0x0127, r25	; 0x800127 <o2_concentration+0x3>
     f6a:	65 e0       	ldi	r22, 0x05	; 5
     f6c:	72 e0       	ldi	r23, 0x02	; 2
     f6e:	88 e2       	ldi	r24, 0x28	; 40
     f70:	97 e0       	ldi	r25, 0x07	; 7
     f72:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
     f76:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <o2_concentration>
     f7a:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <o2_concentration+0x1>
     f7e:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <o2_concentration+0x2>
     f82:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <o2_concentration+0x3>
     f86:	22 e0       	ldi	r18, 0x02	; 2
     f88:	30 e0       	ldi	r19, 0x00	; 0
     f8a:	88 e2       	ldi	r24, 0x28	; 40
     f8c:	97 e0       	ldi	r25, 0x07	; 7
     f8e:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <Print::print(double, int)>
     f92:	40 91 24 01 	lds	r20, 0x0124	; 0x800124 <o2_concentration>
     f96:	50 91 25 01 	lds	r21, 0x0125	; 0x800125 <o2_concentration+0x1>
     f9a:	60 91 26 01 	lds	r22, 0x0126	; 0x800126 <o2_concentration+0x2>
     f9e:	70 91 27 01 	lds	r23, 0x0127	; 0x800127 <o2_concentration+0x3>
     fa2:	24 e0       	ldi	r18, 0x04	; 4
     fa4:	30 e0       	ldi	r19, 0x00	; 0
     fa6:	88 e2       	ldi	r24, 0x28	; 40
     fa8:	97 e0       	ldi	r25, 0x07	; 7
     faa:	0e 94 90 1e 	call	0x3d20	; 0x3d20 <Print::print(double, int)>
     fae:	64 e5       	ldi	r22, 0x54	; 84
     fb0:	75 e0       	ldi	r23, 0x05	; 5
     fb2:	88 e2       	ldi	r24, 0x28	; 40
     fb4:	97 e0       	ldi	r25, 0x07	; 7
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	cf 90       	pop	r12
     fbe:	bf 90       	pop	r11
     fc0:	af 90       	pop	r10
     fc2:	9f 90       	pop	r9
     fc4:	8f 90       	pop	r8
     fc6:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <Print::println(char const*)>

00000fca <config_timer1()>:
_Z13config_timer1v():
     fca:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     fce:	e1 e8       	ldi	r30, 0x81	; 129
     fd0:	f0 e0       	ldi	r31, 0x00	; 0
     fd2:	10 82       	st	Z, r1
     fd4:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     fd8:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     fdc:	89 ef       	ldi	r24, 0xF9	; 249
     fde:	90 e0       	ldi	r25, 0x00	; 0
     fe0:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     fe4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     fe8:	80 81       	ld	r24, Z
     fea:	88 60       	ori	r24, 0x08	; 8
     fec:	80 83       	st	Z, r24
     fee:	80 81       	ld	r24, Z
     ff0:	83 60       	ori	r24, 0x03	; 3
     ff2:	80 83       	st	Z, r24
     ff4:	ef e6       	ldi	r30, 0x6F	; 111
     ff6:	f0 e0       	ldi	r31, 0x00	; 0
     ff8:	80 81       	ld	r24, Z
     ffa:	82 60       	ori	r24, 0x02	; 2
     ffc:	80 83       	st	Z, r24
     ffe:	08 95       	ret

00001000 <timer_init()>:
_Z10timer_initv():
    1000:	f8 94       	cli
    1002:	0e 94 e5 07 	call	0xfca	; 0xfca <config_timer1()>
    1006:	78 94       	sei
    1008:	6b e1       	ldi	r22, 0x1B	; 27
    100a:	72 e0       	ldi	r23, 0x02	; 2
    100c:	88 e2       	ldi	r24, 0x28	; 40
    100e:	97 e0       	ldi	r25, 0x07	; 7
    1010:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <Print::println(char const*)>

00001014 <__vector_13>:
__vector_13():
    1014:	1f 92       	push	r1
    1016:	0f 92       	push	r0
    1018:	0f b6       	in	r0, 0x3f	; 63
    101a:	0f 92       	push	r0
    101c:	11 24       	eor	r1, r1
    101e:	0b b6       	in	r0, 0x3b	; 59
    1020:	0f 92       	push	r0
    1022:	2f 93       	push	r18
    1024:	3f 93       	push	r19
    1026:	4f 93       	push	r20
    1028:	5f 93       	push	r21
    102a:	6f 93       	push	r22
    102c:	7f 93       	push	r23
    102e:	8f 93       	push	r24
    1030:	9f 93       	push	r25
    1032:	af 93       	push	r26
    1034:	bf 93       	push	r27
    1036:	cf 93       	push	r28
    1038:	ef 93       	push	r30
    103a:	ff 93       	push	r31
    103c:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <systemtick_msecs>
    1040:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    1044:	a0 91 e2 05 	lds	r26, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    1048:	b0 91 e3 05 	lds	r27, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    104c:	01 96       	adiw	r24, 0x01	; 1
    104e:	a1 1d       	adc	r26, r1
    1050:	b1 1d       	adc	r27, r1
    1052:	80 93 e0 05 	sts	0x05E0, r24	; 0x8005e0 <systemtick_msecs>
    1056:	90 93 e1 05 	sts	0x05E1, r25	; 0x8005e1 <systemtick_msecs+0x1>
    105a:	a0 93 e2 05 	sts	0x05E2, r26	; 0x8005e2 <systemtick_msecs+0x2>
    105e:	b0 93 e3 05 	sts	0x05E3, r27	; 0x8005e3 <systemtick_msecs+0x3>
    1062:	c1 e0       	ldi	r28, 0x01	; 1
    1064:	c0 93 dc 05 	sts	0x05DC, r28	; 0x8005dc <f_msec>
    1068:	60 91 e0 05 	lds	r22, 0x05E0	; 0x8005e0 <systemtick_msecs>
    106c:	70 91 e1 05 	lds	r23, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    1070:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    1074:	90 91 e3 05 	lds	r25, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    1078:	2a e0       	ldi	r18, 0x0A	; 10
    107a:	30 e0       	ldi	r19, 0x00	; 0
    107c:	40 e0       	ldi	r20, 0x00	; 0
    107e:	50 e0       	ldi	r21, 0x00	; 0
    1080:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
    1084:	67 2b       	or	r22, r23
    1086:	68 2b       	or	r22, r24
    1088:	69 2b       	or	r22, r25
    108a:	09 f0       	breq	.+2      	; 0x108e <__vector_13+0x7a>
    108c:	49 c0       	rjmp	.+146    	; 0x1120 <__vector_13+0x10c>
    108e:	c0 93 db 05 	sts	0x05DB, r28	; 0x8005db <f_10msec>
    1092:	60 91 e0 05 	lds	r22, 0x05E0	; 0x8005e0 <systemtick_msecs>
    1096:	70 91 e1 05 	lds	r23, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    109a:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    109e:	90 91 e3 05 	lds	r25, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    10a2:	24 e6       	ldi	r18, 0x64	; 100
    10a4:	30 e0       	ldi	r19, 0x00	; 0
    10a6:	40 e0       	ldi	r20, 0x00	; 0
    10a8:	50 e0       	ldi	r21, 0x00	; 0
    10aa:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
    10ae:	67 2b       	or	r22, r23
    10b0:	68 2b       	or	r22, r24
    10b2:	69 2b       	or	r22, r25
    10b4:	a9 f5       	brne	.+106    	; 0x1120 <__vector_13+0x10c>
    10b6:	c0 93 da 05 	sts	0x05DA, r28	; 0x8005da <f_100msec>
    10ba:	60 91 e0 05 	lds	r22, 0x05E0	; 0x8005e0 <systemtick_msecs>
    10be:	70 91 e1 05 	lds	r23, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    10c2:	80 91 e2 05 	lds	r24, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    10c6:	90 91 e3 05 	lds	r25, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    10ca:	28 ee       	ldi	r18, 0xE8	; 232
    10cc:	33 e0       	ldi	r19, 0x03	; 3
    10ce:	40 e0       	ldi	r20, 0x00	; 0
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
    10d6:	67 2b       	or	r22, r23
    10d8:	68 2b       	or	r22, r24
    10da:	69 2b       	or	r22, r25
    10dc:	09 f5       	brne	.+66     	; 0x1120 <__vector_13+0x10c>
    10de:	c0 93 d9 05 	sts	0x05D9, r28	; 0x8005d9 <f_1sec>
    10e2:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <systemtick_secs>
    10e6:	8f 5f       	subi	r24, 0xFF	; 255
    10e8:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <systemtick_secs>
    10ec:	80 91 df 05 	lds	r24, 0x05DF	; 0x8005df <systemtick_secs>
    10f0:	8c 33       	cpi	r24, 0x3C	; 60
    10f2:	b0 f0       	brcs	.+44     	; 0x1120 <__vector_13+0x10c>
    10f4:	10 92 df 05 	sts	0x05DF, r1	; 0x8005df <systemtick_secs>
    10f8:	c0 93 d8 05 	sts	0x05D8, r28	; 0x8005d8 <f_1min>
    10fc:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <systemtick_mins>
    1100:	8f 5f       	subi	r24, 0xFF	; 255
    1102:	80 93 de 05 	sts	0x05DE, r24	; 0x8005de <systemtick_mins>
    1106:	80 91 de 05 	lds	r24, 0x05DE	; 0x8005de <systemtick_mins>
    110a:	8c 33       	cpi	r24, 0x3C	; 60
    110c:	48 f0       	brcs	.+18     	; 0x1120 <__vector_13+0x10c>
    110e:	10 92 de 05 	sts	0x05DE, r1	; 0x8005de <systemtick_mins>
    1112:	c0 93 d7 05 	sts	0x05D7, r28	; 0x8005d7 <f_1hr>
    1116:	80 91 dd 05 	lds	r24, 0x05DD	; 0x8005dd <systemtick_hrs>
    111a:	8f 5f       	subi	r24, 0xFF	; 255
    111c:	80 93 dd 05 	sts	0x05DD, r24	; 0x8005dd <systemtick_hrs>
    1120:	ff 91       	pop	r31
    1122:	ef 91       	pop	r30
    1124:	cf 91       	pop	r28
    1126:	bf 91       	pop	r27
    1128:	af 91       	pop	r26
    112a:	9f 91       	pop	r25
    112c:	8f 91       	pop	r24
    112e:	7f 91       	pop	r23
    1130:	6f 91       	pop	r22
    1132:	5f 91       	pop	r21
    1134:	4f 91       	pop	r20
    1136:	3f 91       	pop	r19
    1138:	2f 91       	pop	r18
    113a:	0f 90       	pop	r0
    113c:	0b be       	out	0x3b, r0	; 59
    113e:	0f 90       	pop	r0
    1140:	0f be       	out	0x3f, r0	; 63
    1142:	0f 90       	pop	r0
    1144:	1f 90       	pop	r1
    1146:	18 95       	reti

00001148 <new_delay_msecs(unsigned int)>:
_Z15new_delay_msecsj():
    1148:	0f 93       	push	r16
    114a:	1f 93       	push	r17
    114c:	cf 93       	push	r28
    114e:	df 93       	push	r29
    1150:	ec 01       	movw	r28, r24
    1152:	6f e2       	ldi	r22, 0x2F	; 47
    1154:	72 e0       	ldi	r23, 0x02	; 2
    1156:	88 e2       	ldi	r24, 0x28	; 40
    1158:	97 e0       	ldi	r25, 0x07	; 7
    115a:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
    115e:	00 91 e0 05 	lds	r16, 0x05E0	; 0x8005e0 <systemtick_msecs>
    1162:	10 91 e1 05 	lds	r17, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    1166:	20 91 e2 05 	lds	r18, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    116a:	30 91 e3 05 	lds	r19, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    116e:	ce 01       	movw	r24, r28
    1170:	b0 e0       	ldi	r27, 0x00	; 0
    1172:	a0 e0       	ldi	r26, 0x00	; 0
_Z12time_elapsedm():
    1174:	40 91 e0 05 	lds	r20, 0x05E0	; 0x8005e0 <systemtick_msecs>
    1178:	50 91 e1 05 	lds	r21, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    117c:	60 91 e2 05 	lds	r22, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    1180:	70 91 e3 05 	lds	r23, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    1184:	40 1b       	sub	r20, r16
    1186:	51 0b       	sbc	r21, r17
    1188:	62 0b       	sbc	r22, r18
    118a:	73 0b       	sbc	r23, r19
_Z15new_delay_msecsj():
    118c:	48 17       	cp	r20, r24
    118e:	59 07       	cpc	r21, r25
    1190:	6a 07       	cpc	r22, r26
    1192:	7b 07       	cpc	r23, r27
    1194:	78 f3       	brcs	.-34     	; 0x1174 <new_delay_msecs(unsigned int)+0x2c>
    1196:	df 91       	pop	r29
    1198:	cf 91       	pop	r28
    119a:	1f 91       	pop	r17
    119c:	0f 91       	pop	r16
    119e:	08 95       	ret

000011a0 <platform_init()>:
_Z13platform_initv():
    11a0:	0e 94 00 08 	call	0x1000	; 0x1000 <timer_init()>
    11a4:	20 e0       	ldi	r18, 0x00	; 0
    11a6:	44 e0       	ldi	r20, 0x04	; 4
    11a8:	64 e1       	ldi	r22, 0x14	; 20
    11aa:	83 e4       	ldi	r24, 0x43	; 67
    11ac:	96 e0       	ldi	r25, 0x06	; 6
    11ae:	0e 94 02 11 	call	0x2204	; 0x2204 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>
    11b2:	61 e0       	ldi	r22, 0x01	; 1
    11b4:	88 e1       	ldi	r24, 0x18	; 24
    11b6:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    11ba:	61 e0       	ldi	r22, 0x01	; 1
    11bc:	89 e1       	ldi	r24, 0x19	; 25
    11be:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    11c2:	61 e0       	ldi	r22, 0x01	; 1
    11c4:	8a e1       	ldi	r24, 0x1A	; 26
    11c6:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    11ca:	61 e0       	ldi	r22, 0x01	; 1
    11cc:	8b e1       	ldi	r24, 0x1B	; 27
    11ce:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    11d2:	61 e0       	ldi	r22, 0x01	; 1
    11d4:	8c e0       	ldi	r24, 0x0C	; 12
    11d6:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    11da:	61 e0       	ldi	r22, 0x01	; 1
    11dc:	8c e0       	ldi	r24, 0x0C	; 12
    11de:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    11e2:	61 e0       	ldi	r22, 0x01	; 1
    11e4:	8d e1       	ldi	r24, 0x1D	; 29
    11e6:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    11ea:	61 e0       	ldi	r22, 0x01	; 1
    11ec:	8b e1       	ldi	r24, 0x1B	; 27
    11ee:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    11f2:	60 e0       	ldi	r22, 0x00	; 0
    11f4:	83 e0       	ldi	r24, 0x03	; 3
    11f6:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    11fa:	62 e0       	ldi	r22, 0x02	; 2
    11fc:	83 e0       	ldi	r24, 0x03	; 3
    11fe:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    1202:	60 e0       	ldi	r22, 0x00	; 0
    1204:	8d e1       	ldi	r24, 0x1D	; 29
    1206:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    120a:	60 e0       	ldi	r22, 0x00	; 0
    120c:	8b e1       	ldi	r24, 0x1B	; 27
    120e:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    1212:	61 e0       	ldi	r22, 0x01	; 1
    1214:	85 e0       	ldi	r24, 0x05	; 5
    1216:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    121a:	61 e0       	ldi	r22, 0x01	; 1
    121c:	87 e0       	ldi	r24, 0x07	; 7
    121e:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    1222:	61 e0       	ldi	r22, 0x01	; 1
    1224:	8d e0       	ldi	r24, 0x0D	; 13
    1226:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    122a:	60 e0       	ldi	r22, 0x00	; 0
    122c:	85 e0       	ldi	r24, 0x05	; 5
    122e:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    1232:	60 e0       	ldi	r22, 0x00	; 0
    1234:	87 e0       	ldi	r24, 0x07	; 7
    1236:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	8d e0       	ldi	r24, 0x0D	; 13
    123e:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    1242:	61 e3       	ldi	r22, 0x31	; 49
    1244:	72 e0       	ldi	r23, 0x02	; 2
    1246:	88 e2       	ldi	r24, 0x28	; 40
    1248:	97 e0       	ldi	r25, 0x07	; 7
    124a:	0c 94 aa 1c 	jmp	0x3954	; 0x3954 <Print::println(char const*)>

0000124e <do_control(DO_CONTROLS_E, bool)>:
_Z10do_control13DO_CONTROLS_Eb():
    124e:	1f 93       	push	r17
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	ec 01       	movw	r28, r24
    1256:	16 2f       	mov	r17, r22
    1258:	62 e4       	ldi	r22, 0x42	; 66
    125a:	72 e0       	ldi	r23, 0x02	; 2
    125c:	88 e2       	ldi	r24, 0x28	; 40
    125e:	97 e0       	ldi	r25, 0x07	; 7
    1260:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
    1264:	4a e0       	ldi	r20, 0x0A	; 10
    1266:	50 e0       	ldi	r21, 0x00	; 0
    1268:	be 01       	movw	r22, r28
    126a:	88 e2       	ldi	r24, 0x28	; 40
    126c:	97 e0       	ldi	r25, 0x07	; 7
    126e:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <Print::println(int, int)>
    1272:	c8 30       	cpi	r28, 0x08	; 8
    1274:	d1 05       	cpc	r29, r1
    1276:	09 f4       	brne	.+2      	; 0x127a <do_control(DO_CONTROLS_E, bool)+0x2c>
    1278:	40 c0       	rjmp	.+128    	; 0x12fa <do_control(DO_CONTROLS_E, bool)+0xac>
    127a:	70 f4       	brcc	.+28     	; 0x1298 <do_control(DO_CONTROLS_E, bool)+0x4a>
    127c:	c2 30       	cpi	r28, 0x02	; 2
    127e:	d1 05       	cpc	r29, r1
    1280:	b1 f1       	breq	.+108    	; 0x12ee <do_control(DO_CONTROLS_E, bool)+0xa0>
    1282:	c4 30       	cpi	r28, 0x04	; 4
    1284:	d1 05       	cpc	r29, r1
    1286:	b1 f1       	breq	.+108    	; 0x12f4 <do_control(DO_CONTROLS_E, bool)+0xa6>
    1288:	c1 30       	cpi	r28, 0x01	; 1
    128a:	d1 05       	cpc	r29, r1
    128c:	79 f4       	brne	.+30     	; 0x12ac <do_control(DO_CONTROLS_E, bool)+0x5e>
    128e:	61 2f       	mov	r22, r17
    1290:	88 e1       	ldi	r24, 0x18	; 24
    1292:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    1296:	23 c0       	rjmp	.+70     	; 0x12de <do_control(DO_CONTROLS_E, bool)+0x90>
    1298:	c0 32       	cpi	r28, 0x20	; 32
    129a:	d1 05       	cpc	r29, r1
    129c:	01 f1       	breq	.+64     	; 0x12de <do_control(DO_CONTROLS_E, bool)+0x90>
    129e:	c8 f4       	brcc	.+50     	; 0x12d2 <do_control(DO_CONTROLS_E, bool)+0x84>
    12a0:	61 e0       	ldi	r22, 0x01	; 1
    12a2:	61 27       	eor	r22, r17
    12a4:	8d e1       	ldi	r24, 0x1D	; 29
    12a6:	c0 31       	cpi	r28, 0x10	; 16
    12a8:	d1 05       	cpc	r29, r1
    12aa:	99 f3       	breq	.-26     	; 0x1292 <do_control(DO_CONTROLS_E, bool)+0x44>
    12ac:	6b e4       	ldi	r22, 0x4B	; 75
    12ae:	72 e0       	ldi	r23, 0x02	; 2
    12b0:	88 e2       	ldi	r24, 0x28	; 40
    12b2:	97 e0       	ldi	r25, 0x07	; 7
    12b4:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
    12b8:	4a e0       	ldi	r20, 0x0A	; 10
    12ba:	50 e0       	ldi	r21, 0x00	; 0
    12bc:	60 91 b1 05 	lds	r22, 0x05B1	; 0x8005b1 <do_byte>
    12c0:	88 e2       	ldi	r24, 0x28	; 40
    12c2:	97 e0       	ldi	r25, 0x07	; 7
    12c4:	0e 94 82 1d 	call	0x3b04	; 0x3b04 <Print::println(unsigned char, int)>
    12c8:	80 e0       	ldi	r24, 0x00	; 0
    12ca:	df 91       	pop	r29
    12cc:	cf 91       	pop	r28
    12ce:	1f 91       	pop	r17
    12d0:	08 95       	ret
    12d2:	c0 34       	cpi	r28, 0x40	; 64
    12d4:	d1 05       	cpc	r29, r1
    12d6:	19 f0       	breq	.+6      	; 0x12de <do_control(DO_CONTROLS_E, bool)+0x90>
    12d8:	c0 38       	cpi	r28, 0x80	; 128
    12da:	d1 05       	cpc	r29, r1
    12dc:	39 f7       	brne	.-50     	; 0x12ac <do_control(DO_CONTROLS_E, bool)+0x5e>
    12de:	80 91 b1 05 	lds	r24, 0x05B1	; 0x8005b1 <do_byte>
    12e2:	11 23       	and	r17, r17
    12e4:	69 f0       	breq	.+26     	; 0x1300 <do_control(DO_CONTROLS_E, bool)+0xb2>
    12e6:	c8 2b       	or	r28, r24
    12e8:	c0 93 b1 05 	sts	0x05B1, r28	; 0x8005b1 <do_byte>
    12ec:	df cf       	rjmp	.-66     	; 0x12ac <do_control(DO_CONTROLS_E, bool)+0x5e>
    12ee:	61 2f       	mov	r22, r17
    12f0:	89 e1       	ldi	r24, 0x19	; 25
    12f2:	cf cf       	rjmp	.-98     	; 0x1292 <do_control(DO_CONTROLS_E, bool)+0x44>
    12f4:	61 2f       	mov	r22, r17
    12f6:	8a e1       	ldi	r24, 0x1A	; 26
    12f8:	cc cf       	rjmp	.-104    	; 0x1292 <do_control(DO_CONTROLS_E, bool)+0x44>
    12fa:	61 2f       	mov	r22, r17
    12fc:	8b e1       	ldi	r24, 0x1B	; 27
    12fe:	c9 cf       	rjmp	.-110    	; 0x1292 <do_control(DO_CONTROLS_E, bool)+0x44>
    1300:	c0 95       	com	r28
    1302:	c8 23       	and	r28, r24
    1304:	f1 cf       	rjmp	.-30     	; 0x12e8 <do_control(DO_CONTROLS_E, bool)+0x9a>

00001306 <tworks2_values_to_default_postion()>:
_Z33tworks2_values_to_default_postionv():
    1306:	60 e0       	ldi	r22, 0x00	; 0
    1308:	81 e0       	ldi	r24, 0x01	; 1
    130a:	90 e0       	ldi	r25, 0x00	; 0
    130c:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    1310:	60 e0       	ldi	r22, 0x00	; 0
    1312:	82 e0       	ldi	r24, 0x02	; 2
    1314:	90 e0       	ldi	r25, 0x00	; 0
    1316:	0c 94 27 09 	jmp	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>

0000131a <tworks2_PSA_logic()>:
_Z17tworks2_PSA_logicv():
    131a:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <cycle>
    131e:	81 30       	cpi	r24, 0x01	; 1
    1320:	21 f1       	breq	.+72     	; 0x136a <tworks2_PSA_logic()+0x50>
    1322:	80 f0       	brcs	.+32     	; 0x1344 <tworks2_PSA_logic()+0x2a>
    1324:	82 30       	cpi	r24, 0x02	; 2
    1326:	09 f4       	brne	.+2      	; 0x132a <tworks2_PSA_logic()+0x10>
    1328:	40 c0       	rjmp	.+128    	; 0x13aa <tworks2_PSA_logic()+0x90>
    132a:	83 30       	cpi	r24, 0x03	; 3
    132c:	f1 f0       	breq	.+60     	; 0x136a <tworks2_PSA_logic()+0x50>
    132e:	10 92 ea 05 	sts	0x05EA, r1	; 0x8005ea <cycle>
    1332:	10 92 b6 05 	sts	0x05B6, r1	; 0x8005b6 <nb_delay>
    1336:	10 92 b7 05 	sts	0x05B7, r1	; 0x8005b7 <nb_delay+0x1>
    133a:	10 92 b8 05 	sts	0x05B8, r1	; 0x8005b8 <nb_delay+0x2>
    133e:	10 92 b9 05 	sts	0x05B9, r1	; 0x8005b9 <nb_delay+0x3>
    1342:	08 95       	ret
    1344:	61 e0       	ldi	r22, 0x01	; 1
    1346:	81 e0       	ldi	r24, 0x01	; 1
    1348:	90 e0       	ldi	r25, 0x00	; 0
    134a:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    134e:	60 e0       	ldi	r22, 0x00	; 0
    1350:	82 e0       	ldi	r24, 0x02	; 2
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    1358:	80 91 c2 05 	lds	r24, 0x05C2	; 0x8005c2 <Production_Delay>
    135c:	90 91 c3 05 	lds	r25, 0x05C3	; 0x8005c3 <Production_Delay+0x1>
    1360:	a0 91 c4 05 	lds	r26, 0x05C4	; 0x8005c4 <Production_Delay+0x2>
    1364:	b0 91 c5 05 	lds	r27, 0x05C5	; 0x8005c5 <Production_Delay+0x3>
    1368:	12 c0       	rjmp	.+36     	; 0x138e <tworks2_PSA_logic()+0x74>
    136a:	61 e0       	ldi	r22, 0x01	; 1
    136c:	81 e0       	ldi	r24, 0x01	; 1
    136e:	90 e0       	ldi	r25, 0x00	; 0
    1370:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    1374:	61 e0       	ldi	r22, 0x01	; 1
    1376:	82 e0       	ldi	r24, 0x02	; 2
    1378:	90 e0       	ldi	r25, 0x00	; 0
    137a:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    137e:	80 91 ba 05 	lds	r24, 0x05BA	; 0x8005ba <PreCharge_Delay>
    1382:	90 91 bb 05 	lds	r25, 0x05BB	; 0x8005bb <PreCharge_Delay+0x1>
    1386:	a0 91 bc 05 	lds	r26, 0x05BC	; 0x8005bc <PreCharge_Delay+0x2>
    138a:	b0 91 bd 05 	lds	r27, 0x05BD	; 0x8005bd <PreCharge_Delay+0x3>
    138e:	80 93 b6 05 	sts	0x05B6, r24	; 0x8005b6 <nb_delay>
    1392:	90 93 b7 05 	sts	0x05B7, r25	; 0x8005b7 <nb_delay+0x1>
    1396:	a0 93 b8 05 	sts	0x05B8, r26	; 0x8005b8 <nb_delay+0x2>
    139a:	b0 93 b9 05 	sts	0x05B9, r27	; 0x8005b9 <nb_delay+0x3>
    139e:	80 91 ea 05 	lds	r24, 0x05EA	; 0x8005ea <cycle>
    13a2:	8f 5f       	subi	r24, 0xFF	; 255
    13a4:	80 93 ea 05 	sts	0x05EA, r24	; 0x8005ea <cycle>
    13a8:	08 95       	ret
    13aa:	60 e0       	ldi	r22, 0x00	; 0
    13ac:	81 e0       	ldi	r24, 0x01	; 1
    13ae:	90 e0       	ldi	r25, 0x00	; 0
    13b0:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    13b4:	61 e0       	ldi	r22, 0x01	; 1
    13b6:	cc cf       	rjmp	.-104    	; 0x1350 <tworks2_PSA_logic()+0x36>

000013b8 <o2_main_task()>:
_Z12o2_main_taskv():
    13b8:	cf 92       	push	r12
    13ba:	df 92       	push	r13
    13bc:	ef 92       	push	r14
    13be:	ff 92       	push	r15
    13c0:	80 91 d6 05 	lds	r24, 0x05D6	; 0x8005d6 <f_system_running>
    13c4:	81 11       	cpse	r24, r1
    13c6:	07 c0       	rjmp	.+14     	; 0x13d6 <o2_main_task()+0x1e>
    13c8:	10 92 e4 05 	sts	0x05E4, r1	; 0x8005e4 <o2_main_task()::once_done>
    13cc:	ff 90       	pop	r15
    13ce:	ef 90       	pop	r14
    13d0:	df 90       	pop	r13
    13d2:	cf 90       	pop	r12
    13d4:	08 95       	ret
    13d6:	80 91 e4 05 	lds	r24, 0x05E4	; 0x8005e4 <o2_main_task()::once_done>
    13da:	81 11       	cpse	r24, r1
    13dc:	08 c0       	rjmp	.+16     	; 0x13ee <o2_main_task()+0x36>
    13de:	81 e0       	ldi	r24, 0x01	; 1
    13e0:	80 93 e4 05 	sts	0x05E4, r24	; 0x8005e4 <o2_main_task()::once_done>
    13e4:	61 e0       	ldi	r22, 0x01	; 1
    13e6:	88 e0       	ldi	r24, 0x08	; 8
    13e8:	90 e0       	ldi	r25, 0x00	; 0
    13ea:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    13ee:	80 91 d3 05 	lds	r24, 0x05D3	; 0x8005d3 <f_sec_change_o2_task>
    13f2:	88 23       	and	r24, r24
    13f4:	99 f1       	breq	.+102    	; 0x145c <o2_main_task()+0xa4>
    13f6:	10 92 d3 05 	sts	0x05D3, r1	; 0x8005d3 <f_sec_change_o2_task>
    13fa:	20 91 cc 05 	lds	r18, 0x05CC	; 0x8005cc <current_run_time_secs>
    13fe:	30 91 cd 05 	lds	r19, 0x05CD	; 0x8005cd <current_run_time_secs+0x1>
    1402:	2f 5f       	subi	r18, 0xFF	; 255
    1404:	3f 4f       	sbci	r19, 0xFF	; 255
    1406:	30 93 cd 05 	sts	0x05CD, r19	; 0x8005cd <current_run_time_secs+0x1>
    140a:	20 93 cc 05 	sts	0x05CC, r18	; 0x8005cc <current_run_time_secs>
    140e:	c0 90 c6 05 	lds	r12, 0x05C6	; 0x8005c6 <total_run_time_secs>
    1412:	d0 90 c7 05 	lds	r13, 0x05C7	; 0x8005c7 <total_run_time_secs+0x1>
    1416:	e0 90 c8 05 	lds	r14, 0x05C8	; 0x8005c8 <total_run_time_secs+0x2>
    141a:	f0 90 c9 05 	lds	r15, 0x05C9	; 0x8005c9 <total_run_time_secs+0x3>
    141e:	8f ef       	ldi	r24, 0xFF	; 255
    1420:	c8 1a       	sub	r12, r24
    1422:	d8 0a       	sbc	r13, r24
    1424:	e8 0a       	sbc	r14, r24
    1426:	f8 0a       	sbc	r15, r24
    1428:	c0 92 c6 05 	sts	0x05C6, r12	; 0x8005c6 <total_run_time_secs>
    142c:	d0 92 c7 05 	sts	0x05C7, r13	; 0x8005c7 <total_run_time_secs+0x1>
    1430:	e0 92 c8 05 	sts	0x05C8, r14	; 0x8005c8 <total_run_time_secs+0x2>
    1434:	f0 92 c9 05 	sts	0x05C9, r15	; 0x8005c9 <total_run_time_secs+0x3>
    1438:	c9 01       	movw	r24, r18
    143a:	6f e0       	ldi	r22, 0x0F	; 15
    143c:	70 e0       	ldi	r23, 0x00	; 0
    143e:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
    1442:	89 2b       	or	r24, r25
    1444:	59 f4       	brne	.+22     	; 0x145c <o2_main_task()+0xa4>
    1446:	80 91 e5 05 	lds	r24, 0x05E5	; 0x8005e5 <o2_main_task()::quadrant>
    144a:	8f 5f       	subi	r24, 0xFF	; 255
    144c:	80 93 e5 05 	sts	0x05E5, r24	; 0x8005e5 <o2_main_task()::quadrant>
    1450:	83 30       	cpi	r24, 0x03	; 3
    1452:	08 f4       	brcc	.+2      	; 0x1456 <o2_main_task()+0x9e>
    1454:	73 c0       	rjmp	.+230    	; 0x153c <o2_main_task()+0x184>
    1456:	83 30       	cpi	r24, 0x03	; 3
    1458:	09 f4       	brne	.+2      	; 0x145c <o2_main_task()+0xa4>
    145a:	7e c0       	rjmp	.+252    	; 0x1558 <o2_main_task()+0x1a0>
_Z12time_elapsedm():
    145c:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <systemtick_msecs>
    1460:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    1464:	a0 91 e2 05 	lds	r26, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    1468:	b0 91 e3 05 	lds	r27, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    146c:	40 91 e6 05 	lds	r20, 0x05E6	; 0x8005e6 <o2_main_task()::time_tag>
    1470:	50 91 e7 05 	lds	r21, 0x05E7	; 0x8005e7 <o2_main_task()::time_tag+0x1>
    1474:	60 91 e8 05 	lds	r22, 0x05E8	; 0x8005e8 <o2_main_task()::time_tag+0x2>
    1478:	70 91 e9 05 	lds	r23, 0x05E9	; 0x8005e9 <o2_main_task()::time_tag+0x3>
    147c:	84 1b       	sub	r24, r20
    147e:	95 0b       	sbc	r25, r21
    1480:	a6 0b       	sbc	r26, r22
    1482:	b7 0b       	sbc	r27, r23
_Z12o2_main_taskv():
    1484:	40 91 b6 05 	lds	r20, 0x05B6	; 0x8005b6 <nb_delay>
    1488:	50 91 b7 05 	lds	r21, 0x05B7	; 0x8005b7 <nb_delay+0x1>
    148c:	60 91 b8 05 	lds	r22, 0x05B8	; 0x8005b8 <nb_delay+0x2>
    1490:	70 91 b9 05 	lds	r23, 0x05B9	; 0x8005b9 <nb_delay+0x3>
    1494:	84 17       	cp	r24, r20
    1496:	95 07       	cpc	r25, r21
    1498:	a6 07       	cpc	r26, r22
    149a:	b7 07       	cpc	r27, r23
    149c:	08 f4       	brcc	.+2      	; 0x14a0 <o2_main_task()+0xe8>
    149e:	96 cf       	rjmp	.-212    	; 0x13cc <o2_main_task()+0x14>
    14a0:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <systemtick_msecs>
    14a4:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    14a8:	a0 91 e2 05 	lds	r26, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    14ac:	b0 91 e3 05 	lds	r27, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    14b0:	80 93 e6 05 	sts	0x05E6, r24	; 0x8005e6 <o2_main_task()::time_tag>
    14b4:	90 93 e7 05 	sts	0x05E7, r25	; 0x8005e7 <o2_main_task()::time_tag+0x1>
    14b8:	a0 93 e8 05 	sts	0x05E8, r26	; 0x8005e8 <o2_main_task()::time_tag+0x2>
    14bc:	b0 93 e9 05 	sts	0x05E9, r27	; 0x8005e9 <o2_main_task()::time_tag+0x3>
    14c0:	66 e5       	ldi	r22, 0x56	; 86
    14c2:	72 e0       	ldi	r23, 0x02	; 2
    14c4:	88 e2       	ldi	r24, 0x28	; 40
    14c6:	97 e0       	ldi	r25, 0x07	; 7
    14c8:	0e 94 aa 1c 	call	0x3954	; 0x3954 <Print::println(char const*)>
    14cc:	0e 94 8d 09 	call	0x131a	; 0x131a <tworks2_PSA_logic()>
    14d0:	80 91 b6 05 	lds	r24, 0x05B6	; 0x8005b6 <nb_delay>
    14d4:	90 91 b7 05 	lds	r25, 0x05B7	; 0x8005b7 <nb_delay+0x1>
    14d8:	a0 91 b8 05 	lds	r26, 0x05B8	; 0x8005b8 <nb_delay+0x2>
    14dc:	b0 91 b9 05 	lds	r27, 0x05B9	; 0x8005b9 <nb_delay+0x3>
    14e0:	40 91 b2 05 	lds	r20, 0x05B2	; 0x8005b2 <prev_nb_delay>
    14e4:	50 91 b3 05 	lds	r21, 0x05B3	; 0x8005b3 <prev_nb_delay+0x1>
    14e8:	60 91 b4 05 	lds	r22, 0x05B4	; 0x8005b4 <prev_nb_delay+0x2>
    14ec:	70 91 b5 05 	lds	r23, 0x05B5	; 0x8005b5 <prev_nb_delay+0x3>
    14f0:	84 17       	cp	r24, r20
    14f2:	95 07       	cpc	r25, r21
    14f4:	a6 07       	cpc	r26, r22
    14f6:	b7 07       	cpc	r27, r23
    14f8:	09 f4       	brne	.+2      	; 0x14fc <o2_main_task()+0x144>
    14fa:	68 cf       	rjmp	.-304    	; 0x13cc <o2_main_task()+0x14>
    14fc:	80 93 b2 05 	sts	0x05B2, r24	; 0x8005b2 <prev_nb_delay>
    1500:	90 93 b3 05 	sts	0x05B3, r25	; 0x8005b3 <prev_nb_delay+0x1>
    1504:	a0 93 b4 05 	sts	0x05B4, r26	; 0x8005b4 <prev_nb_delay+0x2>
    1508:	b0 93 b5 05 	sts	0x05B5, r27	; 0x8005b5 <prev_nb_delay+0x3>
    150c:	6a e6       	ldi	r22, 0x6A	; 106
    150e:	72 e0       	ldi	r23, 0x02	; 2
    1510:	88 e2       	ldi	r24, 0x28	; 40
    1512:	97 e0       	ldi	r25, 0x07	; 7
    1514:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
    1518:	40 91 b6 05 	lds	r20, 0x05B6	; 0x8005b6 <nb_delay>
    151c:	50 91 b7 05 	lds	r21, 0x05B7	; 0x8005b7 <nb_delay+0x1>
    1520:	60 91 b8 05 	lds	r22, 0x05B8	; 0x8005b8 <nb_delay+0x2>
    1524:	70 91 b9 05 	lds	r23, 0x05B9	; 0x8005b9 <nb_delay+0x3>
    1528:	2a e0       	ldi	r18, 0x0A	; 10
    152a:	30 e0       	ldi	r19, 0x00	; 0
    152c:	88 e2       	ldi	r24, 0x28	; 40
    152e:	97 e0       	ldi	r25, 0x07	; 7
    1530:	ff 90       	pop	r15
    1532:	ef 90       	pop	r14
    1534:	df 90       	pop	r13
    1536:	cf 90       	pop	r12
    1538:	0c 94 9a 1d 	jmp	0x3b34	; 0x3b34 <Print::println(unsigned long, int)>
    153c:	c9 01       	movw	r24, r18
    153e:	60 e1       	ldi	r22, 0x10	; 16
    1540:	7e e0       	ldi	r23, 0x0E	; 14
    1542:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
    1546:	9b 01       	movw	r18, r22
    1548:	6c e3       	ldi	r22, 0x3C	; 60
    154a:	70 e0       	ldi	r23, 0x00	; 0
    154c:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
    1550:	c9 01       	movw	r24, r18
    1552:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <display_run_time(unsigned int, unsigned int)>
    1556:	82 cf       	rjmp	.-252    	; 0x145c <o2_main_task()+0xa4>
    1558:	c7 01       	movw	r24, r14
    155a:	b6 01       	movw	r22, r12
    155c:	20 e1       	ldi	r18, 0x10	; 16
    155e:	3e e0       	ldi	r19, 0x0E	; 14
    1560:	40 e0       	ldi	r20, 0x00	; 0
    1562:	50 e0       	ldi	r21, 0x00	; 0
    1564:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
    1568:	b9 01       	movw	r22, r18
    156a:	33 0f       	add	r19, r19
    156c:	88 0b       	sbc	r24, r24
    156e:	99 0b       	sbc	r25, r25
    1570:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <display_run_hours(unsigned long)>
    1574:	10 92 e5 05 	sts	0x05E5, r1	; 0x8005e5 <o2_main_task()::quadrant>
    1578:	71 cf       	rjmp	.-286    	; 0x145c <o2_main_task()+0xa4>

0000157a <o2_cons_init()>:
_Z12o2_cons_initv():
    157a:	0e 94 8d 05 	call	0xb1a	; 0xb1a <sensor_zero_calibration()>
    157e:	88 e1       	ldi	r24, 0x18	; 24
    1580:	95 e1       	ldi	r25, 0x15	; 21
    1582:	a0 e0       	ldi	r26, 0x00	; 0
    1584:	b0 e0       	ldi	r27, 0x00	; 0
    1586:	80 93 c2 05 	sts	0x05C2, r24	; 0x8005c2 <Production_Delay>
    158a:	90 93 c3 05 	sts	0x05C3, r25	; 0x8005c3 <Production_Delay+0x1>
    158e:	a0 93 c4 05 	sts	0x05C4, r26	; 0x8005c4 <Production_Delay+0x2>
    1592:	b0 93 c5 05 	sts	0x05C5, r27	; 0x8005c5 <Production_Delay+0x3>
    1596:	8c eb       	ldi	r24, 0xBC	; 188
    1598:	92 e0       	ldi	r25, 0x02	; 2
    159a:	a0 e0       	ldi	r26, 0x00	; 0
    159c:	b0 e0       	ldi	r27, 0x00	; 0
    159e:	80 93 ba 05 	sts	0x05BA, r24	; 0x8005ba <PreCharge_Delay>
    15a2:	90 93 bb 05 	sts	0x05BB, r25	; 0x8005bb <PreCharge_Delay+0x1>
    15a6:	a0 93 bc 05 	sts	0x05BC, r26	; 0x8005bc <PreCharge_Delay+0x2>
    15aa:	b0 93 bd 05 	sts	0x05BD, r27	; 0x8005bd <PreCharge_Delay+0x3>
    15ae:	60 e0       	ldi	r22, 0x00	; 0
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	90 e0       	ldi	r25, 0x00	; 0
    15b4:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    15b8:	60 e0       	ldi	r22, 0x00	; 0
    15ba:	82 e0       	ldi	r24, 0x02	; 2
    15bc:	90 e0       	ldi	r25, 0x00	; 0
    15be:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    15c2:	60 e0       	ldi	r22, 0x00	; 0
    15c4:	84 e0       	ldi	r24, 0x04	; 4
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
    15cc:	84 ef       	ldi	r24, 0xF4	; 244
    15ce:	91 e0       	ldi	r25, 0x01	; 1
    15d0:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>

000015d4 <ui_print_welcome()>:
_Z16ui_print_welcomev():
    15d4:	40 e0       	ldi	r20, 0x00	; 0
    15d6:	60 e0       	ldi	r22, 0x00	; 0
    15d8:	83 e4       	ldi	r24, 0x43	; 67
    15da:	96 e0       	ldi	r25, 0x06	; 6
    15dc:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    15e0:	66 e7       	ldi	r22, 0x76	; 118
    15e2:	72 e0       	ldi	r23, 0x02	; 2
    15e4:	83 e4       	ldi	r24, 0x43	; 67
    15e6:	96 e0       	ldi	r25, 0x06	; 6
    15e8:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
    15ec:	41 e0       	ldi	r20, 0x01	; 1
    15ee:	60 e0       	ldi	r22, 0x00	; 0
    15f0:	83 e4       	ldi	r24, 0x43	; 67
    15f2:	96 e0       	ldi	r25, 0x06	; 6
    15f4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    15f8:	69 e8       	ldi	r22, 0x89	; 137
    15fa:	72 e0       	ldi	r23, 0x02	; 2
    15fc:	83 e4       	ldi	r24, 0x43	; 67
    15fe:	96 e0       	ldi	r25, 0x06	; 6
    1600:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
    1604:	42 e0       	ldi	r20, 0x02	; 2
    1606:	60 e0       	ldi	r22, 0x00	; 0
    1608:	83 e4       	ldi	r24, 0x43	; 67
    160a:	96 e0       	ldi	r25, 0x06	; 6
    160c:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1610:	68 e9       	ldi	r22, 0x98	; 152
    1612:	72 e0       	ldi	r23, 0x02	; 2
    1614:	83 e4       	ldi	r24, 0x43	; 67
    1616:	96 e0       	ldi	r25, 0x06	; 6
    1618:	0c 94 85 1c 	jmp	0x390a	; 0x390a <Print::print(char const*)>

0000161c <setup>:
_ZN14HardwareSerial5beginEm():
    161c:	26 e0       	ldi	r18, 0x06	; 6
    161e:	40 e0       	ldi	r20, 0x00	; 0
    1620:	52 ec       	ldi	r21, 0xC2	; 194
    1622:	61 e0       	ldi	r22, 0x01	; 1
    1624:	70 e0       	ldi	r23, 0x00	; 0
    1626:	88 e2       	ldi	r24, 0x28	; 40
    1628:	97 e0       	ldi	r25, 0x07	; 7
    162a:	0e 94 36 1b 	call	0x366c	; 0x366c <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
    162e:	6d ea       	ldi	r22, 0xAD	; 173
    1630:	72 e0       	ldi	r23, 0x02	; 2
    1632:	88 e2       	ldi	r24, 0x28	; 40
    1634:	97 e0       	ldi	r25, 0x07	; 7
    1636:	0e 94 aa 1c 	call	0x3954	; 0x3954 <Print::println(char const*)>
    163a:	0e 94 d0 08 	call	0x11a0	; 0x11a0 <platform_init()>
    163e:	0e 94 69 05 	call	0xad2	; 0xad2 <ads_init()>
_Z7db_initv():
    1642:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <f_system_running>
setup():
    1646:	0e 94 bd 0a 	call	0x157a	; 0x157a <o2_cons_init()>
    164a:	0e 94 82 01 	call	0x304	; 0x304 <init_7segments()>
    164e:	0e 94 9d 02 	call	0x53a	; 0x53a <test_7segments()>
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	cb 01       	movw	r24, r22
    1658:	0e 94 a1 02 	call	0x542	; 0x542 <display_o2(float)>
    165c:	60 91 c6 05 	lds	r22, 0x05C6	; 0x8005c6 <total_run_time_secs>
    1660:	70 91 c7 05 	lds	r23, 0x05C7	; 0x8005c7 <total_run_time_secs+0x1>
    1664:	80 91 c8 05 	lds	r24, 0x05C8	; 0x8005c8 <total_run_time_secs+0x2>
    1668:	90 91 c9 05 	lds	r25, 0x05C9	; 0x8005c9 <total_run_time_secs+0x3>
    166c:	0e 94 e8 02 	call	0x5d0	; 0x5d0 <display_run_hours(unsigned long)>
_Z7ui_initv():
    1670:	0c 94 ea 0a 	jmp	0x15d4	; 0x15d4 <ui_print_welcome()>

00001674 <beep_for(int)>:
_Z8beep_fori():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:42

}



void beep_for (int msecs) {
    1674:	cf 93       	push	r28
    1676:	df 93       	push	r29
    1678:	ec 01       	movw	r28, r24
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:44

    BUUZZER_CNTRL (BUZZ_ON);
    167a:	60 e0       	ldi	r22, 0x00	; 0
    167c:	80 e1       	ldi	r24, 0x10	; 16
    167e:	90 e0       	ldi	r25, 0x00	; 0
    1680:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:45
    new_delay_msecs (msecs);
    1684:	ce 01       	movw	r24, r28
    1686:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:46
    BUUZZER_CNTRL (BUZZ_OFF);
    168a:	61 e0       	ldi	r22, 0x01	; 1
    168c:	80 e1       	ldi	r24, 0x10	; 16
    168e:	90 e0       	ldi	r25, 0x00	; 0
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:48

}
    1690:	df 91       	pop	r29
    1692:	cf 91       	pop	r28
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:46

void beep_for (int msecs) {

    BUUZZER_CNTRL (BUZZ_ON);
    new_delay_msecs (msecs);
    BUUZZER_CNTRL (BUZZ_OFF);
    1694:	0c 94 27 09 	jmp	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>

00001698 <multi_beeps(int)>:
_Z11multi_beepsi():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:51

}


void multi_beeps (int count) {
    1698:	0f 93       	push	r16
    169a:	1f 93       	push	r17
    169c:	cf 93       	push	r28
    169e:	df 93       	push	r29
    16a0:	8c 01       	movw	r16, r24
    16a2:	0b 97       	sbiw	r24, 0x0b	; 11
    16a4:	14 f0       	brlt	.+4      	; 0x16aa <multi_beeps(int)+0x12>
    16a6:	0a e0       	ldi	r16, 0x0A	; 10
    16a8:	10 e0       	ldi	r17, 0x00	; 0
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:58
    int   i;
    if (count > 10) {
        count = 10;
    }

    for (i = 0; i < count; i++)
    16aa:	d0 e0       	ldi	r29, 0x00	; 0
    16ac:	c0 e0       	ldi	r28, 0x00	; 0
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:58 (discriminator 3)
    16ae:	c0 17       	cp	r28, r16
    16b0:	d1 07       	cpc	r29, r17
    16b2:	54 f4       	brge	.+20     	; 0x16c8 <multi_beeps(int)+0x30>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:60 (discriminator 2)
    {
        beep_for (50);
    16b4:	82 e3       	ldi	r24, 0x32	; 50
    16b6:	90 e0       	ldi	r25, 0x00	; 0
    16b8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:61 (discriminator 2)
        new_delay_msecs (100);
    16bc:	84 e6       	ldi	r24, 0x64	; 100
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:58 (discriminator 2)
    int   i;
    if (count > 10) {
        count = 10;
    }

    for (i = 0; i < count; i++)
    16c4:	21 96       	adiw	r28, 0x01	; 1
    16c6:	f3 cf       	rjmp	.-26     	; 0x16ae <multi_beeps(int)+0x16>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:64
    {
        beep_for (50);
        new_delay_msecs (100);
    }

}
    16c8:	df 91       	pop	r29
    16ca:	cf 91       	pop	r28
    16cc:	1f 91       	pop	r17
    16ce:	0f 91       	pop	r16
    16d0:	08 95       	ret

000016d2 <power_on_self_test()>:
_Z18power_on_self_testv():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:323



void power_on_self_test (void) {

    lcd.setCursor(0, 1);
    16d2:	41 e0       	ldi	r20, 0x01	; 1
    16d4:	60 e0       	ldi	r22, 0x00	; 0
    16d6:	83 e4       	ldi	r24, 0x43	; 67
    16d8:	96 e0       	ldi	r25, 0x06	; 6
    16da:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:324
    lcd.print("Relay Tests..");
    16de:	69 ec       	ldi	r22, 0xC9	; 201
    16e0:	72 e0       	ldi	r23, 0x02	; 2
    16e2:	83 e4       	ldi	r24, 0x43	; 67
    16e4:	96 e0       	ldi	r25, 0x06	; 6
    16e6:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:327

    // 1. Relay Z1TSOL
    lcd.setCursor(0, 2);
    16ea:	42 e0       	ldi	r20, 0x02	; 2
    16ec:	60 e0       	ldi	r22, 0x00	; 0
    16ee:	83 e4       	ldi	r24, 0x43	; 67
    16f0:	96 e0       	ldi	r25, 0x06	; 6
    16f2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:328
    lcd.print("Z1TSOL - CLOSE  ");
    16f6:	67 ed       	ldi	r22, 0xD7	; 215
    16f8:	72 e0       	ldi	r23, 0x02	; 2
    16fa:	83 e4       	ldi	r24, 0x43	; 67
    16fc:	96 e0       	ldi	r25, 0x06	; 6
    16fe:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:329
    digitalWrite(Sieve_A_Valve_Z1,      OPEN_VALVE);
    1702:	61 e0       	ldi	r22, 0x01	; 1
    1704:	88 e1       	ldi	r24, 0x18	; 24
    1706:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:330
    beep_for (HIGH_BEEP);   // msecs
    170a:	88 ec       	ldi	r24, 0xC8	; 200
    170c:	90 e0       	ldi	r25, 0x00	; 0
    170e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:331
    new_delay_msecs (5000);
    1712:	88 e8       	ldi	r24, 0x88	; 136
    1714:	93 e1       	ldi	r25, 0x13	; 19
    1716:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:333

    lcd.setCursor(0, 2);
    171a:	42 e0       	ldi	r20, 0x02	; 2
    171c:	60 e0       	ldi	r22, 0x00	; 0
    171e:	83 e4       	ldi	r24, 0x43	; 67
    1720:	96 e0       	ldi	r25, 0x06	; 6
    1722:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:334
    lcd.print("Z1TSOL - OPEN   ");
    1726:	68 ee       	ldi	r22, 0xE8	; 232
    1728:	72 e0       	ldi	r23, 0x02	; 2
    172a:	83 e4       	ldi	r24, 0x43	; 67
    172c:	96 e0       	ldi	r25, 0x06	; 6
    172e:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:335
    digitalWrite(Sieve_A_Valve_Z1,      CLOSE_VALVE);
    1732:	60 e0       	ldi	r22, 0x00	; 0
    1734:	88 e1       	ldi	r24, 0x18	; 24
    1736:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:336
    beep_for (LOW_BEEP);   // msecs
    173a:	82 e3       	ldi	r24, 0x32	; 50
    173c:	90 e0       	ldi	r25, 0x00	; 0
    173e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:338

    new_delay_msecs (5000);
    1742:	88 e8       	ldi	r24, 0x88	; 136
    1744:	93 e1       	ldi	r25, 0x13	; 19
    1746:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:342


    // 2. Relay Z2TSOL
    lcd.setCursor(0, 2);
    174a:	42 e0       	ldi	r20, 0x02	; 2
    174c:	60 e0       	ldi	r22, 0x00	; 0
    174e:	83 e4       	ldi	r24, 0x43	; 67
    1750:	96 e0       	ldi	r25, 0x06	; 6
    1752:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:343
    lcd.print("Z2TSOL - CLOSE  ");
    1756:	69 ef       	ldi	r22, 0xF9	; 249
    1758:	72 e0       	ldi	r23, 0x02	; 2
    175a:	83 e4       	ldi	r24, 0x43	; 67
    175c:	96 e0       	ldi	r25, 0x06	; 6
    175e:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:344
    digitalWrite(Sieve_B_Valve_Z2,      OPEN_VALVE);
    1762:	61 e0       	ldi	r22, 0x01	; 1
    1764:	89 e1       	ldi	r24, 0x19	; 25
    1766:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:345
    beep_for (HIGH_BEEP);   // msecs
    176a:	88 ec       	ldi	r24, 0xC8	; 200
    176c:	90 e0       	ldi	r25, 0x00	; 0
    176e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:346
    new_delay_msecs (5000);
    1772:	88 e8       	ldi	r24, 0x88	; 136
    1774:	93 e1       	ldi	r25, 0x13	; 19
    1776:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:347
    lcd.setCursor(0, 2);
    177a:	42 e0       	ldi	r20, 0x02	; 2
    177c:	60 e0       	ldi	r22, 0x00	; 0
    177e:	83 e4       	ldi	r24, 0x43	; 67
    1780:	96 e0       	ldi	r25, 0x06	; 6
    1782:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:348
    lcd.print("Z2TSOL - OPEN   ");
    1786:	6a e0       	ldi	r22, 0x0A	; 10
    1788:	73 e0       	ldi	r23, 0x03	; 3
    178a:	83 e4       	ldi	r24, 0x43	; 67
    178c:	96 e0       	ldi	r25, 0x06	; 6
    178e:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:349
    digitalWrite(Sieve_B_Valve_Z2,      CLOSE_VALVE);
    1792:	60 e0       	ldi	r22, 0x00	; 0
    1794:	89 e1       	ldi	r24, 0x19	; 25
    1796:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:350
    beep_for (LOW_BEEP);   // msecs
    179a:	82 e3       	ldi	r24, 0x32	; 50
    179c:	90 e0       	ldi	r25, 0x00	; 0
    179e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:351
    new_delay_msecs (2000);
    17a2:	80 ed       	ldi	r24, 0xD0	; 208
    17a4:	97 e0       	ldi	r25, 0x07	; 7
    17a6:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:354

    // 3. Relay BCKFSOL
    lcd.setCursor(0, 2);
    17aa:	42 e0       	ldi	r20, 0x02	; 2
    17ac:	60 e0       	ldi	r22, 0x00	; 0
    17ae:	83 e4       	ldi	r24, 0x43	; 67
    17b0:	96 e0       	ldi	r25, 0x06	; 6
    17b2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:355
    lcd.print("BCKFSOL - CLOSE ");
    17b6:	6b e1       	ldi	r22, 0x1B	; 27
    17b8:	73 e0       	ldi	r23, 0x03	; 3
    17ba:	83 e4       	ldi	r24, 0x43	; 67
    17bc:	96 e0       	ldi	r25, 0x06	; 6
    17be:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:356
    digitalWrite(PreCharge_Valve_BCKF,  OPEN_VALVE);
    17c2:	61 e0       	ldi	r22, 0x01	; 1
    17c4:	8a e1       	ldi	r24, 0x1A	; 26
    17c6:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:357
    beep_for (HIGH_BEEP);   // msecs
    17ca:	88 ec       	ldi	r24, 0xC8	; 200
    17cc:	90 e0       	ldi	r25, 0x00	; 0
    17ce:	0e 94 3a 0b 	call	0x1674	; 0x1674 <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:358
    new_delay_msecs (5000);
    17d2:	88 e8       	ldi	r24, 0x88	; 136
    17d4:	93 e1       	ldi	r25, 0x13	; 19
    17d6:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:360

    lcd.setCursor(0, 2);
    17da:	42 e0       	ldi	r20, 0x02	; 2
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	83 e4       	ldi	r24, 0x43	; 67
    17e0:	96 e0       	ldi	r25, 0x06	; 6
    17e2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:361
    lcd.print("BCKFSOL - OPEN  ");
    17e6:	6c e2       	ldi	r22, 0x2C	; 44
    17e8:	73 e0       	ldi	r23, 0x03	; 3
    17ea:	83 e4       	ldi	r24, 0x43	; 67
    17ec:	96 e0       	ldi	r25, 0x06	; 6
    17ee:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:362
    digitalWrite(PreCharge_Valve_BCKF,  CLOSE_VALVE);
    17f2:	60 e0       	ldi	r22, 0x00	; 0
    17f4:	8a e1       	ldi	r24, 0x1A	; 26
    17f6:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:363
    beep_for (LOW_BEEP);   // msecs
    17fa:	82 e3       	ldi	r24, 0x32	; 50
    17fc:	90 e0       	ldi	r25, 0x00	; 0
    17fe:	0e 94 3a 0b 	call	0x1674	; 0x1674 <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:364
    new_delay_msecs (2000);
    1802:	80 ed       	ldi	r24, 0xD0	; 208
    1804:	97 e0       	ldi	r25, 0x07	; 7
    1806:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:367

    //lcd.clear();
    lcd.setCursor(0, 1);
    180a:	41 e0       	ldi	r20, 0x01	; 1
    180c:	60 e0       	ldi	r22, 0x00	; 0
    180e:	83 e4       	ldi	r24, 0x43	; 67
    1810:	96 e0       	ldi	r25, 0x06	; 6
    1812:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:368
    lcd.print("Compressor Test..");
    1816:	6d e3       	ldi	r22, 0x3D	; 61
    1818:	73 e0       	ldi	r23, 0x03	; 3
    181a:	83 e4       	ldi	r24, 0x43	; 67
    181c:	96 e0       	ldi	r25, 0x06	; 6
    181e:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:372

    // 4. Compressor check
    // Open release valves.. to avoid blocking of compressor o/p during its test-run
    lcd.setCursor(0, 2);
    1822:	42 e0       	ldi	r20, 0x02	; 2
    1824:	60 e0       	ldi	r22, 0x00	; 0
    1826:	83 e4       	ldi	r24, 0x43	; 67
    1828:	96 e0       	ldi	r25, 0x06	; 6
    182a:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:374
    //        "...................."
    lcd.print("Opening releaseValvs");
    182e:	6f e4       	ldi	r22, 0x4F	; 79
    1830:	73 e0       	ldi	r23, 0x03	; 3
    1832:	83 e4       	ldi	r24, 0x43	; 67
    1834:	96 e0       	ldi	r25, 0x06	; 6
    1836:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:375
    beep_for (HIGH_BEEP);   // msecs
    183a:	88 ec       	ldi	r24, 0xC8	; 200
    183c:	90 e0       	ldi	r25, 0x00	; 0
    183e:	0e 94 3a 0b 	call	0x1674	; 0x1674 <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:376
    digitalWrite(Sieve_A_Valve_Z1,      CLOSE_VALVE);
    1842:	60 e0       	ldi	r22, 0x00	; 0
    1844:	88 e1       	ldi	r24, 0x18	; 24
    1846:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:377
    digitalWrite(Sieve_B_Valve_Z2,      CLOSE_VALVE);
    184a:	60 e0       	ldi	r22, 0x00	; 0
    184c:	89 e1       	ldi	r24, 0x19	; 25
    184e:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:378
    new_delay_msecs (1000);
    1852:	88 ee       	ldi	r24, 0xE8	; 232
    1854:	93 e0       	ldi	r25, 0x03	; 3
    1856:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:380

    lcd.setCursor(0, 2);
    185a:	42 e0       	ldi	r20, 0x02	; 2
    185c:	60 e0       	ldi	r22, 0x00	; 0
    185e:	83 e4       	ldi	r24, 0x43	; 67
    1860:	96 e0       	ldi	r25, 0x06	; 6
    1862:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:381
    lcd.print("Compressor - ON     ");
    1866:	64 e6       	ldi	r22, 0x64	; 100
    1868:	73 e0       	ldi	r23, 0x03	; 3
    186a:	83 e4       	ldi	r24, 0x43	; 67
    186c:	96 e0       	ldi	r25, 0x06	; 6
    186e:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:382
    COMPRSSR_CNTRL (COMPRSSR_ON);
    1872:	61 e0       	ldi	r22, 0x01	; 1
    1874:	88 e0       	ldi	r24, 0x08	; 8
    1876:	90 e0       	ldi	r25, 0x00	; 0
    1878:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:383
    beep_for (HIGH_BEEP);   // msecs
    187c:	88 ec       	ldi	r24, 0xC8	; 200
    187e:	90 e0       	ldi	r25, 0x00	; 0
    1880:	0e 94 3a 0b 	call	0x1674	; 0x1674 <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:384
    new_delay_msecs (5000);
    1884:	88 e8       	ldi	r24, 0x88	; 136
    1886:	93 e1       	ldi	r25, 0x13	; 19
    1888:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:387
    

    BUUZZER_CNTRL (BUZZ_OFF);
    188c:	61 e0       	ldi	r22, 0x01	; 1
    188e:	80 e1       	ldi	r24, 0x10	; 16
    1890:	90 e0       	ldi	r25, 0x00	; 0
    1892:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:389

    beep_for (LOW_BEEP);   // msecs
    1896:	82 e3       	ldi	r24, 0x32	; 50
    1898:	90 e0       	ldi	r25, 0x00	; 0
    189a:	0e 94 3a 0b 	call	0x1674	; 0x1674 <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:390
    new_delay_msecs (1000);
    189e:	88 ee       	ldi	r24, 0xE8	; 232
    18a0:	93 e0       	ldi	r25, 0x03	; 3
    18a2:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:391
    lcd.setCursor(0, 2);
    18a6:	42 e0       	ldi	r20, 0x02	; 2
    18a8:	60 e0       	ldi	r22, 0x00	; 0
    18aa:	83 e4       	ldi	r24, 0x43	; 67
    18ac:	96 e0       	ldi	r25, 0x06	; 6
    18ae:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:392
    lcd.print("Compressor - OFF    ");
    18b2:	69 e7       	ldi	r22, 0x79	; 121
    18b4:	73 e0       	ldi	r23, 0x03	; 3
    18b6:	83 e4       	ldi	r24, 0x43	; 67
    18b8:	96 e0       	ldi	r25, 0x06	; 6
    18ba:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:393
    COMPRSSR_CNTRL (COMPRSSR_OFF);
    18be:	60 e0       	ldi	r22, 0x00	; 0
    18c0:	88 e0       	ldi	r24, 0x08	; 8
    18c2:	90 e0       	ldi	r25, 0x00	; 0
    18c4:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:395

    lcd.clear();
    18c8:	83 e4       	ldi	r24, 0x43	; 67
    18ca:	96 e0       	ldi	r25, 0x06	; 6
    18cc:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LiquidCrystal::clear()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:396
    lcd.setCursor(0, 3);
    18d0:	43 e0       	ldi	r20, 0x03	; 3
    18d2:	60 e0       	ldi	r22, 0x00	; 0
    18d4:	83 e4       	ldi	r24, 0x43	; 67
    18d6:	96 e0       	ldi	r25, 0x06	; 6
    18d8:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:398
    //  "1.3.5.7.9.........20"
    lcd.print("Testing over...!!   ");
    18dc:	6e e8       	ldi	r22, 0x8E	; 142
    18de:	73 e0       	ldi	r23, 0x03	; 3
    18e0:	83 e4       	ldi	r24, 0x43	; 67
    18e2:	96 e0       	ldi	r25, 0x06	; 6
    18e4:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:399
    new_delay_msecs (2000);
    18e8:	80 ed       	ldi	r24, 0xD0	; 208
    18ea:	97 e0       	ldi	r25, 0x07	; 7
    18ec:	0c 94 a4 08 	jmp	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>

000018f0 <ui_task_main()>:
_Z12ui_task_mainv():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:68

}



void ui_task_main (void)    {
    18f0:	8f 92       	push	r8
    18f2:	9f 92       	push	r9
    18f4:	af 92       	push	r10
    18f6:	bf 92       	push	r11
    18f8:	cf 92       	push	r12
    18fa:	df 92       	push	r13
    18fc:	ef 92       	push	r14
    18fe:	ff 92       	push	r15
    1900:	0f 93       	push	r16
    1902:	1f 93       	push	r17
    1904:	cf 93       	push	r28
    1906:	df 93       	push	r29
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62
    190c:	2c 97       	sbiw	r28, 0x0c	; 12
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:76
    static unsigned long  time_tag;
    static unsigned int   state_time;
    char                  str_temp[6];
    char                  str_temp2[6];

    buttonState = digitalRead(startButtonPin);
    1918:	83 e0       	ldi	r24, 0x03	; 3
    191a:	0e 94 f4 19 	call	0x33e8	; 0x33e8 <digitalRead>
    191e:	90 93 6f 05 	sts	0x056F, r25	; 0x80056f <buttonState+0x1>
    1922:	80 93 6e 05 	sts	0x056E, r24	; 0x80056e <buttonState>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:78

    if (f_sec_change_ui_task) {
    1926:	20 91 d4 05 	lds	r18, 0x05D4	; 0x8005d4 <f_sec_change_ui_task>
    192a:	22 23       	and	r18, r18
    192c:	61 f0       	breq	.+24     	; 0x1946 <ui_task_main()+0x56>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:79
        f_sec_change_ui_task = 0;
    192e:	10 92 d4 05 	sts	0x05D4, r1	; 0x8005d4 <f_sec_change_ui_task>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:80
        state_time++;
    1932:	20 91 62 05 	lds	r18, 0x0562	; 0x800562 <__data_end>
    1936:	30 91 63 05 	lds	r19, 0x0563	; 0x800563 <__data_end+0x1>
    193a:	2f 5f       	subi	r18, 0xFF	; 255
    193c:	3f 4f       	sbci	r19, 0xFF	; 255
    193e:	30 93 63 05 	sts	0x0563, r19	; 0x800563 <__data_end+0x1>
    1942:	20 93 62 05 	sts	0x0562, r18	; 0x800562 <__data_end>
    1946:	20 91 68 05 	lds	r18, 0x0568	; 0x800568 <ui_task_main()::button_debounce_delay>
    194a:	30 91 69 05 	lds	r19, 0x0569	; 0x800569 <ui_task_main()::button_debounce_delay+0x1>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:83
    }

    if (buttonState == BUTTON_ACTIVE) {   // press detection
    194e:	89 2b       	or	r24, r25
    1950:	09 f0       	breq	.+2      	; 0x1954 <ui_task_main()+0x64>
    1952:	38 c0       	rjmp	.+112    	; 0x19c4 <ui_task_main()+0xd4>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:84
        button_debounce_delay++;
    1954:	2f 5f       	subi	r18, 0xFF	; 255
    1956:	3f 4f       	sbci	r19, 0xFF	; 255
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:85
        if (button_debounce_delay >= BUTTON_DEBOUNCE_DLY)   {
    1958:	27 33       	cpi	r18, 0x37	; 55
    195a:	31 05       	cpc	r19, r1
    195c:	44 f5       	brge	.+80     	; 0x19ae <ui_task_main()+0xbe>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:84
        f_sec_change_ui_task = 0;
        state_time++;
    }

    if (buttonState == BUTTON_ACTIVE) {   // press detection
        button_debounce_delay++;
    195e:	30 93 69 05 	sts	0x0569, r19	; 0x800569 <ui_task_main()::button_debounce_delay+0x1>
    1962:	20 93 68 05 	sts	0x0568, r18	; 0x800568 <ui_task_main()::button_debounce_delay>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:90
        if (button_debounce_delay >= BUTTON_DEBOUNCE_DLY)   {
            button_debounce_delay = 0;
            button_pressed = true;
        }
        // temp
        DBG_PRINT  ("button_debounce_delay : ");
    1966:	63 ea       	ldi	r22, 0xA3	; 163
    1968:	73 e0       	ldi	r23, 0x03	; 3
    196a:	88 e2       	ldi	r24, 0x28	; 40
    196c:	97 e0       	ldi	r25, 0x07	; 7
    196e:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:91
        DBG_PRINTLN(button_debounce_delay);
    1972:	60 91 68 05 	lds	r22, 0x0568	; 0x800568 <ui_task_main()::button_debounce_delay>
    1976:	70 91 69 05 	lds	r23, 0x0569	; 0x800569 <ui_task_main()::button_debounce_delay+0x1>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:103
                button_pressed = false;
                button_press_count++;
                time_tag = systemtick_msecs;
                // temp
                DBG_PRINT  ("button_press_count : ");
                DBG_PRINTLN(button_press_count);
    197a:	4a e0       	ldi	r20, 0x0A	; 10
    197c:	50 e0       	ldi	r21, 0x00	; 0
    197e:	88 e2       	ldi	r24, 0x28	; 40
    1980:	97 e0       	ldi	r25, 0x07	; 7
    1982:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <Print::println(int, int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:110
        }

    }


    switch (ui_state)
    1986:	e0 91 74 05 	lds	r30, 0x0574	; 0x800574 <ui_state>
    198a:	f0 91 75 05 	lds	r31, 0x0575	; 0x800575 <ui_state+0x1>
    198e:	e8 30       	cpi	r30, 0x08	; 8
    1990:	f1 05       	cpc	r31, r1
    1992:	08 f0       	brcs	.+2      	; 0x1996 <ui_task_main()+0xa6>
    1994:	fa c2       	rjmp	.+1524   	; 0x1f8a <ui_task_main()+0x69a>
    1996:	e1 53       	subi	r30, 0x31	; 49
    1998:	f3 4f       	sbci	r31, 0xF3	; 243
    199a:	0c 94 26 21 	jmp	0x424c	; 0x424c <__tablejump2__>
    199e:	1f 0d       	add	r17, r15
    19a0:	c8 0d       	add	r28, r8
    19a2:	ef 0d       	add	r30, r15
    19a4:	0e 0e       	add	r0, r30
    19a6:	2d 0e       	add	r2, r29
    19a8:	42 0e       	add	r4, r18
    19aa:	79 0e       	add	r7, r25
    19ac:	78 0f       	add	r23, r24
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:86
    }

    if (buttonState == BUTTON_ACTIVE) {   // press detection
        button_debounce_delay++;
        if (button_debounce_delay >= BUTTON_DEBOUNCE_DLY)   {
            button_debounce_delay = 0;
    19ae:	10 92 69 05 	sts	0x0569, r1	; 0x800569 <ui_task_main()::button_debounce_delay+0x1>
    19b2:	10 92 68 05 	sts	0x0568, r1	; 0x800568 <ui_task_main()::button_debounce_delay>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:87
            button_pressed = true;
    19b6:	81 e0       	ldi	r24, 0x01	; 1
    19b8:	90 e0       	ldi	r25, 0x00	; 0
    19ba:	90 93 6d 05 	sts	0x056D, r25	; 0x80056d <button_pressed+0x1>
    19be:	80 93 6c 05 	sts	0x056C, r24	; 0x80056c <button_pressed>
    19c2:	d1 cf       	rjmp	.-94     	; 0x1966 <ui_task_main()+0x76>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:94
        // temp
        DBG_PRINT  ("button_debounce_delay : ");
        DBG_PRINTLN(button_debounce_delay);
    }
    else {  // release detection
        if (button_debounce_delay)
    19c4:	21 15       	cp	r18, r1
    19c6:	31 05       	cpc	r19, r1
    19c8:	31 f0       	breq	.+12     	; 0x19d6 <ui_task_main()+0xe6>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:95
            button_debounce_delay--;
    19ca:	21 50       	subi	r18, 0x01	; 1
    19cc:	31 09       	sbc	r19, r1
    19ce:	30 93 69 05 	sts	0x0569, r19	; 0x800569 <ui_task_main()::button_debounce_delay+0x1>
    19d2:	20 93 68 05 	sts	0x0568, r18	; 0x800568 <ui_task_main()::button_debounce_delay>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:96
        if (button_debounce_delay == 0)    {
    19d6:	80 91 68 05 	lds	r24, 0x0568	; 0x800568 <ui_task_main()::button_debounce_delay>
    19da:	90 91 69 05 	lds	r25, 0x0569	; 0x800569 <ui_task_main()::button_debounce_delay+0x1>
    19de:	89 2b       	or	r24, r25
    19e0:	91 f6       	brne	.-92     	; 0x1986 <ui_task_main()+0x96>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:97
            if (button_pressed) {
    19e2:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <button_pressed>
    19e6:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <button_pressed+0x1>
    19ea:	89 2b       	or	r24, r25
    19ec:	61 f2       	breq	.-104    	; 0x1986 <ui_task_main()+0x96>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:98
                button_pressed = false;
    19ee:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <button_pressed+0x1>
    19f2:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <button_pressed>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:99
                button_press_count++;
    19f6:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <button_press_count>
    19fa:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <button_press_count+0x1>
    19fe:	01 96       	adiw	r24, 0x01	; 1
    1a00:	90 93 6b 05 	sts	0x056B, r25	; 0x80056b <button_press_count+0x1>
    1a04:	80 93 6a 05 	sts	0x056A, r24	; 0x80056a <button_press_count>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:100
                time_tag = systemtick_msecs;
    1a08:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <systemtick_msecs>
    1a0c:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    1a10:	a0 91 e2 05 	lds	r26, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    1a14:	b0 91 e3 05 	lds	r27, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    1a18:	80 93 64 05 	sts	0x0564, r24	; 0x800564 <ui_task_main()::time_tag>
    1a1c:	90 93 65 05 	sts	0x0565, r25	; 0x800565 <ui_task_main()::time_tag+0x1>
    1a20:	a0 93 66 05 	sts	0x0566, r26	; 0x800566 <ui_task_main()::time_tag+0x2>
    1a24:	b0 93 67 05 	sts	0x0567, r27	; 0x800567 <ui_task_main()::time_tag+0x3>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:102
                // temp
                DBG_PRINT  ("button_press_count : ");
    1a28:	6c eb       	ldi	r22, 0xBC	; 188
    1a2a:	73 e0       	ldi	r23, 0x03	; 3
    1a2c:	88 e2       	ldi	r24, 0x28	; 40
    1a2e:	97 e0       	ldi	r25, 0x07	; 7
    1a30:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:103
                DBG_PRINTLN(button_press_count);
    1a34:	60 91 6a 05 	lds	r22, 0x056A	; 0x80056a <button_press_count>
    1a38:	70 91 6b 05 	lds	r23, 0x056B	; 0x80056b <button_press_count+0x1>
    1a3c:	9e cf       	rjmp	.-196    	; 0x197a <ui_task_main()+0x8a>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:114

    switch (ui_state)
    {
        case UI_START:
            //if (powerUpTimer.check())   {
            if (state_time >= 10) {
    1a3e:	80 91 62 05 	lds	r24, 0x0562	; 0x800562 <__data_end>
    1a42:	90 91 63 05 	lds	r25, 0x0563	; 0x800563 <__data_end+0x1>
    1a46:	0a 97       	sbiw	r24, 0x0a	; 10
    1a48:	08 f4       	brcc	.+2      	; 0x1a4c <ui_task_main()+0x15c>
    1a4a:	52 c0       	rjmp	.+164    	; 0x1af0 <ui_task_main()+0x200>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:115
                ui_state = UI_SYS_INIT;
    1a4c:	84 e0       	ldi	r24, 0x04	; 4
    1a4e:	90 e0       	ldi	r25, 0x00	; 0
    1a50:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <ui_state+0x1>
    1a54:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <ui_state>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:116
                lcd.setCursor(0, 3);
    1a58:	43 e0       	ldi	r20, 0x03	; 3
    1a5a:	60 e0       	ldi	r22, 0x00	; 0
    1a5c:	83 e4       	ldi	r24, 0x43	; 67
    1a5e:	96 e0       	ldi	r25, 0x06	; 6
    1a60:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:117
                button_press_count = 0;
    1a64:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <button_press_count+0x1>
    1a68:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <button_press_count>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:118
                lcd.print("Press ButtonToStart!");
    1a6c:	62 ed       	ldi	r22, 0xD2	; 210
    1a6e:	73 e0       	ldi	r23, 0x03	; 3
    1a70:	83 e4       	ldi	r24, 0x43	; 67
    1a72:	96 e0       	ldi	r25, 0x06	; 6
    1a74:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:309
        case UI_LAST:
            ui_state = UI_START;
            break;
    }

    if (ui_state != prev_ui_state ) {
    1a78:	80 91 74 05 	lds	r24, 0x0574	; 0x800574 <ui_state>
    1a7c:	90 91 75 05 	lds	r25, 0x0575	; 0x800575 <ui_state+0x1>
    1a80:	20 91 72 05 	lds	r18, 0x0572	; 0x800572 <prev_ui_state>
    1a84:	30 91 73 05 	lds	r19, 0x0573	; 0x800573 <prev_ui_state+0x1>
    1a88:	82 17       	cp	r24, r18
    1a8a:	93 07       	cpc	r25, r19
    1a8c:	f1 f0       	breq	.+60     	; 0x1aca <ui_task_main()+0x1da>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:310
        prev_ui_state = ui_state;
    1a8e:	90 93 73 05 	sts	0x0573, r25	; 0x800573 <prev_ui_state+0x1>
    1a92:	80 93 72 05 	sts	0x0572, r24	; 0x800572 <prev_ui_state>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:311
        f_state_changed = 1;
    1a96:	81 e0       	ldi	r24, 0x01	; 1
    1a98:	90 e0       	ldi	r25, 0x00	; 0
    1a9a:	90 93 71 05 	sts	0x0571, r25	; 0x800571 <f_state_changed+0x1>
    1a9e:	80 93 70 05 	sts	0x0570, r24	; 0x800570 <f_state_changed>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:312
        state_time = 0;
    1aa2:	10 92 63 05 	sts	0x0563, r1	; 0x800563 <__data_end+0x1>
    1aa6:	10 92 62 05 	sts	0x0562, r1	; 0x800562 <__data_end>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:313
        DBG_PRINT("ui_state : ");
    1aaa:	66 e1       	ldi	r22, 0x16	; 22
    1aac:	75 e0       	ldi	r23, 0x05	; 5
    1aae:	88 e2       	ldi	r24, 0x28	; 40
    1ab0:	97 e0       	ldi	r25, 0x07	; 7
    1ab2:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:314
        DBG_PRINTLN(ui_state);
    1ab6:	60 91 74 05 	lds	r22, 0x0574	; 0x800574 <ui_state>
    1aba:	70 91 75 05 	lds	r23, 0x0575	; 0x800575 <ui_state+0x1>
    1abe:	4a e0       	ldi	r20, 0x0A	; 10
    1ac0:	50 e0       	ldi	r21, 0x00	; 0
    1ac2:	88 e2       	ldi	r24, 0x28	; 40
    1ac4:	97 e0       	ldi	r25, 0x07	; 7
    1ac6:	0e 94 5c 1d 	call	0x3ab8	; 0x3ab8 <Print::println(int, int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:316
    }
}
    1aca:	2c 96       	adiw	r28, 0x0c	; 12
    1acc:	0f b6       	in	r0, 0x3f	; 63
    1ace:	f8 94       	cli
    1ad0:	de bf       	out	0x3e, r29	; 62
    1ad2:	0f be       	out	0x3f, r0	; 63
    1ad4:	cd bf       	out	0x3d, r28	; 61
    1ad6:	df 91       	pop	r29
    1ad8:	cf 91       	pop	r28
    1ada:	1f 91       	pop	r17
    1adc:	0f 91       	pop	r16
    1ade:	ff 90       	pop	r15
    1ae0:	ef 90       	pop	r14
    1ae2:	df 90       	pop	r13
    1ae4:	cf 90       	pop	r12
    1ae6:	bf 90       	pop	r11
    1ae8:	af 90       	pop	r10
    1aea:	9f 90       	pop	r9
    1aec:	8f 90       	pop	r8
    1aee:	08 95       	ret
_Z12time_elapsedm():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/platform.ino:196



unsigned long int time_elapsed (unsigned long int time_delay)  {

    return systemtick_msecs - time_delay;
    1af0:	80 91 e0 05 	lds	r24, 0x05E0	; 0x8005e0 <systemtick_msecs>
    1af4:	90 91 e1 05 	lds	r25, 0x05E1	; 0x8005e1 <systemtick_msecs+0x1>
    1af8:	a0 91 e2 05 	lds	r26, 0x05E2	; 0x8005e2 <systemtick_msecs+0x2>
    1afc:	b0 91 e3 05 	lds	r27, 0x05E3	; 0x8005e3 <systemtick_msecs+0x3>
    1b00:	40 91 64 05 	lds	r20, 0x0564	; 0x800564 <ui_task_main()::time_tag>
    1b04:	50 91 65 05 	lds	r21, 0x0565	; 0x800565 <ui_task_main()::time_tag+0x1>
    1b08:	60 91 66 05 	lds	r22, 0x0566	; 0x800566 <ui_task_main()::time_tag+0x2>
    1b0c:	70 91 67 05 	lds	r23, 0x0567	; 0x800567 <ui_task_main()::time_tag+0x3>
    1b10:	84 1b       	sub	r24, r20
    1b12:	95 0b       	sbc	r25, r21
    1b14:	a6 0b       	sbc	r26, r22
    1b16:	b7 0b       	sbc	r27, r23
_Z12ui_task_mainv():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:120
                ui_state = UI_SYS_INIT;
                lcd.setCursor(0, 3);
                button_press_count = 0;
                lcd.print("Press ButtonToStart!");
            }
            else if (time_elapsed (time_tag) > 1500) {
    1b18:	8d 3d       	cpi	r24, 0xDD	; 221
    1b1a:	95 40       	sbci	r25, 0x05	; 5
    1b1c:	a1 05       	cpc	r26, r1
    1b1e:	b1 05       	cpc	r27, r1
    1b20:	68 f1       	brcs	.+90     	; 0x1b7c <ui_task_main()+0x28c>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:121
                if (button_press_count >= CALIBRATION_MODE_ENTRY_CHECK)  {
    1b22:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <button_press_count>
    1b26:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <button_press_count+0x1>
    1b2a:	85 30       	cpi	r24, 0x05	; 5
    1b2c:	91 05       	cpc	r25, r1
    1b2e:	ec f0       	brlt	.+58     	; 0x1b6a <ui_task_main()+0x27a>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:122
                    button_press_count = 0;
    1b30:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <button_press_count+0x1>
    1b34:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <button_press_count>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:123
                    ui_state = UI_CALIB_MODE;
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	90 e0       	ldi	r25, 0x00	; 0
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:127
                }
                else if (button_press_count >= FACTORY_MODE_ENTRY_CHECK)  {
                    button_press_count = 0;
                    ui_state = UI_FACTORY_MODE;
    1b3c:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <ui_state+0x1>
    1b40:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <ui_state>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:129
                }
                if (button_press_count >= CONFIG_MODE_ENTRY_CHECK)  {
    1b44:	80 91 6a 05 	lds	r24, 0x056A	; 0x80056a <button_press_count>
    1b48:	90 91 6b 05 	lds	r25, 0x056B	; 0x80056b <button_press_count+0x1>
    1b4c:	18 16       	cp	r1, r24
    1b4e:	19 06       	cpc	r1, r25
    1b50:	0c f0       	brlt	.+2      	; 0x1b54 <ui_task_main()+0x264>
    1b52:	92 cf       	rjmp	.-220    	; 0x1a78 <ui_task_main()+0x188>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:130
                    button_press_count = 0;
    1b54:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <button_press_count+0x1>
    1b58:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <button_press_count>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:131
                    ui_state = UI_CONFIG_MODE;
    1b5c:	83 e0       	ldi	r24, 0x03	; 3
    1b5e:	90 e0       	ldi	r25, 0x00	; 0
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:161

            multi_beeps (3);

            // Power On self test - on demand
            power_on_self_test ();
            ui_state = UI_SYS_INIT;
    1b60:	90 93 75 05 	sts	0x0575, r25	; 0x800575 <ui_state+0x1>
    1b64:	80 93 74 05 	sts	0x0574, r24	; 0x800574 <ui_state>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:162
            break;
    1b68:	87 cf       	rjmp	.-242    	; 0x1a78 <ui_task_main()+0x188>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:125
            else if (time_elapsed (time_tag) > 1500) {
                if (button_press_count >= CALIBRATION_MODE_ENTRY_CHECK)  {
                    button_press_count = 0;
                    ui_state = UI_CALIB_MODE;
                }
                else if (button_press_count >= FACTORY_MODE_ENTRY_CHECK)  {
    1b6a:	03 97       	sbiw	r24, 0x03	; 3
    1b6c:	5c f3       	brlt	.-42     	; 0x1b44 <ui_task_main()+0x254>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:126
                    button_press_count = 0;
    1b6e:	10 92 6b 05 	sts	0x056B, r1	; 0x80056b <button_press_count+0x1>
    1b72:	10 92 6a 05 	sts	0x056A, r1	; 0x80056a <button_press_count>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:127
                    ui_state = UI_FACTORY_MODE;
    1b76:	82 e0       	ldi	r24, 0x02	; 2
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	e0 cf       	rjmp	.-64     	; 0x1b3c <ui_task_main()+0x24c>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:135
                    button_press_count = 0;
                    ui_state = UI_CONFIG_MODE;
                }
            }
            else {
                if (f_state_changed)  {
    1b7c:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <f_state_changed>
    1b80:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <f_state_changed+0x1>
    1b84:	89 2b       	or	r24, r25
    1b86:	09 f4       	brne	.+2      	; 0x1b8a <ui_task_main()+0x29a>
    1b88:	77 cf       	rjmp	.-274    	; 0x1a78 <ui_task_main()+0x188>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:136
                    ui_print_welcome ();
    1b8a:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <ui_print_welcome()>
    1b8e:	74 cf       	rjmp	.-280    	; 0x1a78 <ui_task_main()+0x188>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:141
                }
            }
            break;
        case UI_CALIB_MODE:
            DBG_PRINTLN("Entered Calibration Mode..");
    1b90:	67 ee       	ldi	r22, 0xE7	; 231
    1b92:	73 e0       	ldi	r23, 0x03	; 3
    1b94:	88 e2       	ldi	r24, 0x28	; 40
    1b96:	97 e0       	ldi	r25, 0x07	; 7
    1b98:	0e 94 aa 1c 	call	0x3954	; 0x3954 <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:142
            lcd.clear();
    1b9c:	83 e4       	ldi	r24, 0x43	; 67
    1b9e:	96 e0       	ldi	r25, 0x06	; 6
    1ba0:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LiquidCrystal::clear()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:143
            lcd.setCursor(0, 0);
    1ba4:	40 e0       	ldi	r20, 0x00	; 0
    1ba6:	60 e0       	ldi	r22, 0x00	; 0
    1ba8:	83 e4       	ldi	r24, 0x43	; 67
    1baa:	96 e0       	ldi	r25, 0x06	; 6
    1bac:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:144
            lcd.print("Calibration Mode..");
    1bb0:	6f ee       	ldi	r22, 0xEF	; 239
    1bb2:	73 e0       	ldi	r23, 0x03	; 3
    1bb4:	83 e4       	ldi	r24, 0x43	; 67
    1bb6:	96 e0       	ldi	r25, 0x06	; 6
    1bb8:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:145
            lcd.setCursor(0, 1);
    1bbc:	41 e0       	ldi	r20, 0x01	; 1
    1bbe:	60 e0       	ldi	r22, 0x00	; 0
    1bc0:	83 e4       	ldi	r24, 0x43	; 67
    1bc2:	96 e0       	ldi	r25, 0x06	; 6
    1bc4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:146
            lcd.print("O2 sensorCalibration");
    1bc8:	62 e0       	ldi	r22, 0x02	; 2
    1bca:	74 e0       	ldi	r23, 0x04	; 4
    1bcc:	83 e4       	ldi	r24, 0x43	; 67
    1bce:	96 e0       	ldi	r25, 0x06	; 6
    1bd0:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:147
            multi_beeps (5);
    1bd4:	85 e0       	ldi	r24, 0x05	; 5
    1bd6:	90 e0       	ldi	r25, 0x00	; 0
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:171
            lcd.clear();
            lcd.setCursor(0, 0);
            lcd.print("Configuration Mode..");
            lcd.setCursor(0, 1);

            multi_beeps (2);
    1bd8:	0e 94 4c 0b 	call	0x1698	; 0x1698 <multi_beeps(int)>
    1bdc:	1c c0       	rjmp	.+56     	; 0x1c16 <ui_task_main()+0x326>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:152
            multi_beeps (5);
            
            ui_state = UI_SYS_INIT;
            break;
        case UI_FACTORY_MODE:
            DBG_PRINTLN("Factory Mode..");
    1bde:	67 e1       	ldi	r22, 0x17	; 23
    1be0:	74 e0       	ldi	r23, 0x04	; 4
    1be2:	88 e2       	ldi	r24, 0x28	; 40
    1be4:	97 e0       	ldi	r25, 0x07	; 7
    1be6:	0e 94 aa 1c 	call	0x3954	; 0x3954 <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:153
            lcd.clear();
    1bea:	83 e4       	ldi	r24, 0x43	; 67
    1bec:	96 e0       	ldi	r25, 0x06	; 6
    1bee:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LiquidCrystal::clear()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:154
            lcd.setCursor(0, 0);
    1bf2:	40 e0       	ldi	r20, 0x00	; 0
    1bf4:	60 e0       	ldi	r22, 0x00	; 0
    1bf6:	83 e4       	ldi	r24, 0x43	; 67
    1bf8:	96 e0       	ldi	r25, 0x06	; 6
    1bfa:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:155
            lcd.print("Factory Mode..");
    1bfe:	67 e1       	ldi	r22, 0x17	; 23
    1c00:	74 e0       	ldi	r23, 0x04	; 4
    1c02:	83 e4       	ldi	r24, 0x43	; 67
    1c04:	96 e0       	ldi	r25, 0x06	; 6
    1c06:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:157

            multi_beeps (3);
    1c0a:	83 e0       	ldi	r24, 0x03	; 3
    1c0c:	90 e0       	ldi	r25, 0x00	; 0
    1c0e:	0e 94 4c 0b 	call	0x1698	; 0x1698 <multi_beeps(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:160

            // Power On self test - on demand
            power_on_self_test ();
    1c12:	0e 94 69 0b 	call	0x16d2	; 0x16d2 <power_on_self_test()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:161
            ui_state = UI_SYS_INIT;
    1c16:	84 e0       	ldi	r24, 0x04	; 4
    1c18:	90 e0       	ldi	r25, 0x00	; 0
    1c1a:	a2 cf       	rjmp	.-188    	; 0x1b60 <ui_task_main()+0x270>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:165
            break;

        case UI_CONFIG_MODE:
            DBG_PRINTLN("Entered Configuration Mode..");
    1c1c:	66 e2       	ldi	r22, 0x26	; 38
    1c1e:	74 e0       	ldi	r23, 0x04	; 4
    1c20:	88 e2       	ldi	r24, 0x28	; 40
    1c22:	97 e0       	ldi	r25, 0x07	; 7
    1c24:	0e 94 aa 1c 	call	0x3954	; 0x3954 <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:166
            lcd.clear();
    1c28:	83 e4       	ldi	r24, 0x43	; 67
    1c2a:	96 e0       	ldi	r25, 0x06	; 6
    1c2c:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LiquidCrystal::clear()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:167
            lcd.setCursor(0, 0);
    1c30:	40 e0       	ldi	r20, 0x00	; 0
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	83 e4       	ldi	r24, 0x43	; 67
    1c36:	96 e0       	ldi	r25, 0x06	; 6
    1c38:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:168
            lcd.print("Configuration Mode..");
    1c3c:	6e e2       	ldi	r22, 0x2E	; 46
    1c3e:	74 e0       	ldi	r23, 0x04	; 4
    1c40:	83 e4       	ldi	r24, 0x43	; 67
    1c42:	96 e0       	ldi	r25, 0x06	; 6
    1c44:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:169
            lcd.setCursor(0, 1);
    1c48:	41 e0       	ldi	r20, 0x01	; 1
    1c4a:	60 e0       	ldi	r22, 0x00	; 0
    1c4c:	83 e4       	ldi	r24, 0x43	; 67
    1c4e:	96 e0       	ldi	r25, 0x06	; 6
    1c50:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:171

            multi_beeps (2);
    1c54:	82 e0       	ldi	r24, 0x02	; 2
    1c56:	90 e0       	ldi	r25, 0x00	; 0
    1c58:	bf cf       	rjmp	.-130    	; 0x1bd8 <ui_task_main()+0x2e8>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:176
            ui_state = UI_SYS_INIT;
            break;

        case UI_SYS_INIT:
            lcd.clear();
    1c5a:	83 e4       	ldi	r24, 0x43	; 67
    1c5c:	96 e0       	ldi	r25, 0x06	; 6
    1c5e:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LiquidCrystal::clear()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:177
            ui_print_welcome ();
    1c62:	0e 94 ea 0a 	call	0x15d4	; 0x15d4 <ui_print_welcome()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:178
            lcd.setCursor(0, 3);
    1c66:	43 e0       	ldi	r20, 0x03	; 3
    1c68:	60 e0       	ldi	r22, 0x00	; 0
    1c6a:	83 e4       	ldi	r24, 0x43	; 67
    1c6c:	96 e0       	ldi	r25, 0x06	; 6
    1c6e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:179
            lcd.print("Press ButtonToStart!");
    1c72:	62 ed       	ldi	r22, 0xD2	; 210
    1c74:	73 e0       	ldi	r23, 0x03	; 3
    1c76:	83 e4       	ldi	r24, 0x43	; 67
    1c78:	96 e0       	ldi	r25, 0x06	; 6
    1c7a:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:180
            ui_state = UI_SYS_ON_CHECK;
    1c7e:	85 e0       	ldi	r24, 0x05	; 5
    1c80:	90 e0       	ldi	r25, 0x00	; 0
    1c82:	6e cf       	rjmp	.-292    	; 0x1b60 <ui_task_main()+0x270>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:184
            break;
        case UI_SYS_ON_CHECK:
            // System ON check
            if (button_pressed == true)  {
    1c84:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <button_pressed>
    1c88:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <button_pressed+0x1>
    1c8c:	01 97       	sbiw	r24, 0x01	; 1
    1c8e:	09 f0       	breq	.+2      	; 0x1c92 <ui_task_main()+0x3a2>
    1c90:	f3 ce       	rjmp	.-538    	; 0x1a78 <ui_task_main()+0x188>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:185
                button_pressed = false;
    1c92:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <button_pressed+0x1>
    1c96:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <button_pressed>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:186
                f_system_running = true;
    1c9a:	81 e0       	ldi	r24, 0x01	; 1
    1c9c:	80 93 d6 05 	sts	0x05D6, r24	; 0x8005d6 <f_system_running>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:188

                DBG_PRINTLN("Start Button Pressed..!");
    1ca0:	63 e4       	ldi	r22, 0x43	; 67
    1ca2:	74 e0       	ldi	r23, 0x04	; 4
    1ca4:	88 e2       	ldi	r24, 0x28	; 40
    1ca6:	97 e0       	ldi	r25, 0x07	; 7
    1ca8:	0e 94 aa 1c 	call	0x3954	; 0x3954 <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:189
                lcd.setCursor(0, 3);
    1cac:	43 e0       	ldi	r20, 0x03	; 3
    1cae:	60 e0       	ldi	r22, 0x00	; 0
    1cb0:	83 e4       	ldi	r24, 0x43	; 67
    1cb2:	96 e0       	ldi	r25, 0x06	; 6
    1cb4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:190
                lcd.print("Start Button Pressed");
    1cb8:	6b e5       	ldi	r22, 0x5B	; 91
    1cba:	74 e0       	ldi	r23, 0x04	; 4
    1cbc:	83 e4       	ldi	r24, 0x43	; 67
    1cbe:	96 e0       	ldi	r25, 0x06	; 6
    1cc0:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:191
                beep_for (SYS_ON_BEEP);   // msecs
    1cc4:	8b e2       	ldi	r24, 0x2B	; 43
    1cc6:	92 e0       	ldi	r25, 0x02	; 2
    1cc8:	0e 94 3a 0b 	call	0x1674	; 0x1674 <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:196

                
                // new_delay_msecs (1000);

                lcd.setCursor(0, 3);
    1ccc:	43 e0       	ldi	r20, 0x03	; 3
    1cce:	60 e0       	ldi	r22, 0x00	; 0
    1cd0:	83 e4       	ldi	r24, 0x43	; 67
    1cd2:	96 e0       	ldi	r25, 0x06	; 6
    1cd4:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:197
                lcd.print("O2 Cons. Starting... ");
    1cd8:	60 e7       	ldi	r22, 0x70	; 112
    1cda:	74 e0       	ldi	r23, 0x04	; 4
    1cdc:	83 e4       	ldi	r24, 0x43	; 67
    1cde:	96 e0       	ldi	r25, 0x06	; 6
    1ce0:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:198
                new_delay_msecs (1000);
    1ce4:	88 ee       	ldi	r24, 0xE8	; 232
    1ce6:	93 e0       	ldi	r25, 0x03	; 3
    1ce8:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:300
                lcd.print("O2 Cons. Stopped..! ");
                ui_state = UI_LAST;
            }
            else {
                // back to run state..
                ui_state = UI_SYS_RUNNING;
    1cec:	86 e0       	ldi	r24, 0x06	; 6
    1cee:	90 e0       	ldi	r25, 0x00	; 0
    1cf0:	37 cf       	rjmp	.-402    	; 0x1b60 <ui_task_main()+0x270>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:209


        case UI_SYS_RUNNING:
            // system running
            // LCD Line 1
            if (f_state_changed)  {
    1cf2:	80 91 70 05 	lds	r24, 0x0570	; 0x800570 <f_state_changed>
    1cf6:	90 91 71 05 	lds	r25, 0x0571	; 0x800571 <f_state_changed+0x1>
    1cfa:	89 2b       	or	r24, r25
    1cfc:	61 f1       	breq	.+88     	; 0x1d56 <ui_task_main()+0x466>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:210
                f_state_changed = 0;
    1cfe:	10 92 71 05 	sts	0x0571, r1	; 0x800571 <f_state_changed+0x1>
    1d02:	10 92 70 05 	sts	0x0570, r1	; 0x800570 <f_state_changed>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:211
                lcd_clear_buf (lcd_temp_string);
    1d06:	8e e8       	ldi	r24, 0x8E	; 142
    1d08:	95 e0       	ldi	r25, 0x05	; 5
    1d0a:	0e 94 74 01 	call	0x2e8	; 0x2e8 <lcd_clear_buf(char*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:214


                lcd.clear();
    1d0e:	83 e4       	ldi	r24, 0x43	; 67
    1d10:	96 e0       	ldi	r25, 0x06	; 6
    1d12:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LiquidCrystal::clear()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:215
                lcd.setCursor(0, 0);
    1d16:	40 e0       	ldi	r20, 0x00	; 0
    1d18:	60 e0       	ldi	r22, 0x00	; 0
    1d1a:	83 e4       	ldi	r24, 0x43	; 67
    1d1c:	96 e0       	ldi	r25, 0x06	; 6
    1d1e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:216
                sprintf(lcd_temp_string, "O2 CONC   PRESSURE ");
    1d22:	66 e8       	ldi	r22, 0x86	; 134
    1d24:	74 e0       	ldi	r23, 0x04	; 4
    1d26:	8e e8       	ldi	r24, 0x8E	; 142
    1d28:	95 e0       	ldi	r25, 0x05	; 5
    1d2a:	0e 94 4d 21 	call	0x429a	; 0x429a <strcpy>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:217
                DBG_PRINTLN(lcd_temp_string);
    1d2e:	6e e8       	ldi	r22, 0x8E	; 142
    1d30:	75 e0       	ldi	r23, 0x05	; 5
    1d32:	88 e2       	ldi	r24, 0x28	; 40
    1d34:	97 e0       	ldi	r25, 0x07	; 7
    1d36:	0e 94 aa 1c 	call	0x3954	; 0x3954 <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:219
                //        "...................."
                lcd.print(lcd_temp_string);
    1d3a:	6e e8       	ldi	r22, 0x8E	; 142
    1d3c:	75 e0       	ldi	r23, 0x05	; 5
    1d3e:	83 e4       	ldi	r24, 0x43	; 67
    1d40:	96 e0       	ldi	r25, 0x06	; 6
    1d42:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:222

                // temp : just to trigger LCD refresh for O2 values
                prev_o2_concentration = 0;
    1d46:	10 92 ce 05 	sts	0x05CE, r1	; 0x8005ce <prev_o2_concentration>
    1d4a:	10 92 cf 05 	sts	0x05CF, r1	; 0x8005cf <prev_o2_concentration+0x1>
    1d4e:	10 92 d0 05 	sts	0x05D0, r1	; 0x8005d0 <prev_o2_concentration+0x2>
    1d52:	10 92 d1 05 	sts	0x05D1, r1	; 0x8005d1 <prev_o2_concentration+0x3>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:227
            }

            // LCD Line 2
            // O2 concentration / output pressure
            if (prev_o2_concentration != o2_concentration || prev_output_pressure != output_pressure)  {
    1d56:	80 90 24 01 	lds	r8, 0x0124	; 0x800124 <o2_concentration>
    1d5a:	90 90 25 01 	lds	r9, 0x0125	; 0x800125 <o2_concentration+0x1>
    1d5e:	a0 90 26 01 	lds	r10, 0x0126	; 0x800126 <o2_concentration+0x2>
    1d62:	b0 90 27 01 	lds	r11, 0x0127	; 0x800127 <o2_concentration+0x3>
    1d66:	c0 90 20 01 	lds	r12, 0x0120	; 0x800120 <output_pressure>
    1d6a:	d0 90 21 01 	lds	r13, 0x0121	; 0x800121 <output_pressure+0x1>
    1d6e:	e0 90 22 01 	lds	r14, 0x0122	; 0x800122 <output_pressure+0x2>
    1d72:	f0 90 23 01 	lds	r15, 0x0123	; 0x800123 <output_pressure+0x3>
    1d76:	a5 01       	movw	r20, r10
    1d78:	94 01       	movw	r18, r8
    1d7a:	60 91 ce 05 	lds	r22, 0x05CE	; 0x8005ce <prev_o2_concentration>
    1d7e:	70 91 cf 05 	lds	r23, 0x05CF	; 0x8005cf <prev_o2_concentration+0x1>
    1d82:	80 91 d0 05 	lds	r24, 0x05D0	; 0x8005d0 <prev_o2_concentration+0x2>
    1d86:	90 91 d1 05 	lds	r25, 0x05D1	; 0x8005d1 <prev_o2_concentration+0x3>
    1d8a:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <__cmpsf2>
    1d8e:	81 11       	cpse	r24, r1
    1d90:	0f c0       	rjmp	.+30     	; 0x1db0 <ui_task_main()+0x4c0>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:227 (discriminator 1)
    1d92:	a7 01       	movw	r20, r14
    1d94:	96 01       	movw	r18, r12
    1d96:	60 91 1c 01 	lds	r22, 0x011C	; 0x80011c <prev_output_pressure>
    1d9a:	70 91 1d 01 	lds	r23, 0x011D	; 0x80011d <prev_output_pressure+0x1>
    1d9e:	80 91 1e 01 	lds	r24, 0x011E	; 0x80011e <prev_output_pressure+0x2>
    1da2:	90 91 1f 01 	lds	r25, 0x011F	; 0x80011f <prev_output_pressure+0x3>
    1da6:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <__cmpsf2>
    1daa:	88 23       	and	r24, r24
    1dac:	09 f4       	brne	.+2      	; 0x1db0 <ui_task_main()+0x4c0>
    1dae:	51 c0       	rjmp	.+162    	; 0x1e52 <ui_task_main()+0x562>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:228
                prev_o2_concentration  = o2_concentration;
    1db0:	80 92 ce 05 	sts	0x05CE, r8	; 0x8005ce <prev_o2_concentration>
    1db4:	90 92 cf 05 	sts	0x05CF, r9	; 0x8005cf <prev_o2_concentration+0x1>
    1db8:	a0 92 d0 05 	sts	0x05D0, r10	; 0x8005d0 <prev_o2_concentration+0x2>
    1dbc:	b0 92 d1 05 	sts	0x05D1, r11	; 0x8005d1 <prev_o2_concentration+0x3>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:229
                prev_output_pressure = output_pressure;
    1dc0:	c0 92 1c 01 	sts	0x011C, r12	; 0x80011c <prev_output_pressure>
    1dc4:	d0 92 1d 01 	sts	0x011D, r13	; 0x80011d <prev_output_pressure+0x1>
    1dc8:	e0 92 1e 01 	sts	0x011E, r14	; 0x80011e <prev_output_pressure+0x2>
    1dcc:	f0 92 1f 01 	sts	0x011F, r15	; 0x80011f <prev_output_pressure+0x3>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:233
                // sprintf(lcd_temp_string, "%f \%%   %2d psi", o2_concentration, output_pressure);
                // DBG_PRINTLN(lcd_temp_string);
                /* 4 is mininum width, 2 is precision; float value is copied onto str_temp*/
                dtostrf(o2_concentration, 4, 2, str_temp);
    1dd0:	7e 01       	movw	r14, r28
    1dd2:	37 e0       	ldi	r19, 0x07	; 7
    1dd4:	e3 0e       	add	r14, r19
    1dd6:	f1 1c       	adc	r15, r1
    1dd8:	87 01       	movw	r16, r14
    1dda:	22 e0       	ldi	r18, 0x02	; 2
    1ddc:	44 e0       	ldi	r20, 0x04	; 4
    1dde:	c5 01       	movw	r24, r10
    1de0:	b4 01       	movw	r22, r8
    1de2:	0e 94 2f 21 	call	0x425e	; 0x425e <dtostrf>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:236


                dtostrf(output_pressure, 5, 2, str_temp2);
    1de6:	60 91 20 01 	lds	r22, 0x0120	; 0x800120 <output_pressure>
    1dea:	70 91 21 01 	lds	r23, 0x0121	; 0x800121 <output_pressure+0x1>
    1dee:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <output_pressure+0x2>
    1df2:	90 91 23 01 	lds	r25, 0x0123	; 0x800123 <output_pressure+0x3>
    1df6:	9e 01       	movw	r18, r28
    1df8:	2f 5f       	subi	r18, 0xFF	; 255
    1dfa:	3f 4f       	sbci	r19, 0xFF	; 255
    1dfc:	59 01       	movw	r10, r18
    1dfe:	89 01       	movw	r16, r18
    1e00:	22 e0       	ldi	r18, 0x02	; 2
    1e02:	45 e0       	ldi	r20, 0x05	; 5
    1e04:	0e 94 2f 21 	call	0x425e	; 0x425e <dtostrf>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:238
                // sprintf(lcd_temp_string, "%f \%%   %2d psi", o2_concentration, output_pressure);
                sprintf(lcd_temp_string, "%s %%   %s psi", str_temp, str_temp2);
    1e08:	bf 92       	push	r11
    1e0a:	af 92       	push	r10
    1e0c:	ff 92       	push	r15
    1e0e:	ef 92       	push	r14
    1e10:	8a e9       	ldi	r24, 0x9A	; 154
    1e12:	94 e0       	ldi	r25, 0x04	; 4
    1e14:	9f 93       	push	r25
    1e16:	8f 93       	push	r24
    1e18:	8e e8       	ldi	r24, 0x8E	; 142
    1e1a:	95 e0       	ldi	r25, 0x05	; 5
    1e1c:	9f 93       	push	r25
    1e1e:	8f 93       	push	r24
    1e20:	0e 94 54 21 	call	0x42a8	; 0x42a8 <sprintf>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:240

                DBG_PRINTLN(lcd_temp_string);
    1e24:	6e e8       	ldi	r22, 0x8E	; 142
    1e26:	75 e0       	ldi	r23, 0x05	; 5
    1e28:	88 e2       	ldi	r24, 0x28	; 40
    1e2a:	97 e0       	ldi	r25, 0x07	; 7
    1e2c:	0e 94 aa 1c 	call	0x3954	; 0x3954 <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:241
                lcd.setCursor(0, 1);
    1e30:	41 e0       	ldi	r20, 0x01	; 1
    1e32:	60 e0       	ldi	r22, 0x00	; 0
    1e34:	83 e4       	ldi	r24, 0x43	; 67
    1e36:	96 e0       	ldi	r25, 0x06	; 6
    1e38:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:242
                lcd.print(lcd_temp_string);
    1e3c:	6e e8       	ldi	r22, 0x8E	; 142
    1e3e:	75 e0       	ldi	r23, 0x05	; 5
    1e40:	83 e4       	ldi	r24, 0x43	; 67
    1e42:	96 e0       	ldi	r25, 0x06	; 6
    1e44:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
    1e48:	0f b6       	in	r0, 0x3f	; 63
    1e4a:	f8 94       	cli
    1e4c:	de bf       	out	0x3e, r29	; 62
    1e4e:	0f be       	out	0x3f, r0	; 63
    1e50:	cd bf       	out	0x3d, r28	; 61
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:254
            // LCD Line 3
            // lcd.setCursor(0, 2);
            // blank for now

            // LCD Line 4
            if (prev_current_run_time_secs ^ current_run_time_secs) {
    1e52:	20 91 cc 05 	lds	r18, 0x05CC	; 0x8005cc <current_run_time_secs>
    1e56:	30 91 cd 05 	lds	r19, 0x05CD	; 0x8005cd <current_run_time_secs+0x1>
    1e5a:	80 91 ca 05 	lds	r24, 0x05CA	; 0x8005ca <prev_current_run_time_secs>
    1e5e:	90 91 cb 05 	lds	r25, 0x05CB	; 0x8005cb <prev_current_run_time_secs+0x1>
    1e62:	82 17       	cp	r24, r18
    1e64:	93 07       	cpc	r25, r19
    1e66:	d1 f1       	breq	.+116    	; 0x1edc <ui_task_main()+0x5ec>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:255
                prev_current_run_time_secs = current_run_time_secs;
    1e68:	30 93 cb 05 	sts	0x05CB, r19	; 0x8005cb <prev_current_run_time_secs+0x1>
    1e6c:	20 93 ca 05 	sts	0x05CA, r18	; 0x8005ca <prev_current_run_time_secs>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:257

                int secs = ( current_run_time_secs %  60);
    1e70:	ec e3       	ldi	r30, 0x3C	; 60
    1e72:	f0 e0       	ldi	r31, 0x00	; 0
    1e74:	c9 01       	movw	r24, r18
    1e76:	bf 01       	movw	r22, r30
    1e78:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:260
                int mins = ((current_run_time_secs % (60 * 60)) / 60);
                int hrs  = ( current_run_time_secs / (60 * 60));
                sprintf(lcd_temp_string, "RUN TIME  %02d:%02d:%02d", hrs, mins, secs);
    1e7c:	9f 93       	push	r25
    1e7e:	8f 93       	push	r24
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:258
            // LCD Line 4
            if (prev_current_run_time_secs ^ current_run_time_secs) {
                prev_current_run_time_secs = current_run_time_secs;

                int secs = ( current_run_time_secs %  60);
                int mins = ((current_run_time_secs % (60 * 60)) / 60);
    1e80:	c9 01       	movw	r24, r18
    1e82:	60 e1       	ldi	r22, 0x10	; 16
    1e84:	7e e0       	ldi	r23, 0x0E	; 14
    1e86:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
    1e8a:	9b 01       	movw	r18, r22
    1e8c:	bf 01       	movw	r22, r30
    1e8e:	0e 94 f0 20 	call	0x41e0	; 0x41e0 <__udivmodhi4>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:260
                int hrs  = ( current_run_time_secs / (60 * 60));
                sprintf(lcd_temp_string, "RUN TIME  %02d:%02d:%02d", hrs, mins, secs);
    1e92:	7f 93       	push	r23
    1e94:	6f 93       	push	r22
    1e96:	3f 93       	push	r19
    1e98:	2f 93       	push	r18
    1e9a:	89 ea       	ldi	r24, 0xA9	; 169
    1e9c:	94 e0       	ldi	r25, 0x04	; 4
    1e9e:	9f 93       	push	r25
    1ea0:	8f 93       	push	r24
    1ea2:	8e e8       	ldi	r24, 0x8E	; 142
    1ea4:	95 e0       	ldi	r25, 0x05	; 5
    1ea6:	9f 93       	push	r25
    1ea8:	8f 93       	push	r24
    1eaa:	0e 94 54 21 	call	0x42a8	; 0x42a8 <sprintf>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:261
                DBG_PRINTLN(lcd_temp_string);
    1eae:	6e e8       	ldi	r22, 0x8E	; 142
    1eb0:	75 e0       	ldi	r23, 0x05	; 5
    1eb2:	88 e2       	ldi	r24, 0x28	; 40
    1eb4:	97 e0       	ldi	r25, 0x07	; 7
    1eb6:	0e 94 aa 1c 	call	0x3954	; 0x3954 <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:262
                lcd.setCursor(0, 3);
    1eba:	43 e0       	ldi	r20, 0x03	; 3
    1ebc:	60 e0       	ldi	r22, 0x00	; 0
    1ebe:	83 e4       	ldi	r24, 0x43	; 67
    1ec0:	96 e0       	ldi	r25, 0x06	; 6
    1ec2:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:263
                lcd.print(lcd_temp_string);
    1ec6:	6e e8       	ldi	r22, 0x8E	; 142
    1ec8:	75 e0       	ldi	r23, 0x05	; 5
    1eca:	83 e4       	ldi	r24, 0x43	; 67
    1ecc:	96 e0       	ldi	r25, 0x06	; 6
    1ece:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
    1ed2:	0f b6       	in	r0, 0x3f	; 63
    1ed4:	f8 94       	cli
    1ed6:	de bf       	out	0x3e, r29	; 62
    1ed8:	0f be       	out	0x3f, r0	; 63
    1eda:	cd bf       	out	0x3d, r28	; 61
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:267
            }

            // System OFF check
            if (button_pressed == true)  {
    1edc:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <button_pressed>
    1ee0:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <button_pressed+0x1>
    1ee4:	01 97       	sbiw	r24, 0x01	; 1
    1ee6:	09 f0       	breq	.+2      	; 0x1eea <ui_task_main()+0x5fa>
    1ee8:	c7 cd       	rjmp	.-1138   	; 0x1a78 <ui_task_main()+0x188>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:268
                ui_state = UI_SYS_OFF_CHECK;
    1eea:	87 e0       	ldi	r24, 0x07	; 7
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	38 ce       	rjmp	.-912    	; 0x1b60 <ui_task_main()+0x270>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:277
            }
            break;

        case UI_SYS_OFF_CHECK:
            // System OFF check
            if (button_pressed == true)  {
    1ef0:	80 91 6c 05 	lds	r24, 0x056C	; 0x80056c <button_pressed>
    1ef4:	90 91 6d 05 	lds	r25, 0x056D	; 0x80056d <button_pressed+0x1>
    1ef8:	01 97       	sbiw	r24, 0x01	; 1
    1efa:	09 f0       	breq	.+2      	; 0x1efe <ui_task_main()+0x60e>
    1efc:	f7 ce       	rjmp	.-530    	; 0x1cec <ui_task_main()+0x3fc>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:278
                button_pressed = false;
    1efe:	10 92 6d 05 	sts	0x056D, r1	; 0x80056d <button_pressed+0x1>
    1f02:	10 92 6c 05 	sts	0x056C, r1	; 0x80056c <button_pressed>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:279
                f_system_running = false;
    1f06:	10 92 d6 05 	sts	0x05D6, r1	; 0x8005d6 <f_system_running>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:280
                DBG_PRINTLN("Stop Button Pressed!");
    1f0a:	62 ec       	ldi	r22, 0xC2	; 194
    1f0c:	74 e0       	ldi	r23, 0x04	; 4
    1f0e:	88 e2       	ldi	r24, 0x28	; 40
    1f10:	97 e0       	ldi	r25, 0x07	; 7
    1f12:	0e 94 aa 1c 	call	0x3954	; 0x3954 <Print::println(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:281
                lcd.setCursor(0, 3);
    1f16:	43 e0       	ldi	r20, 0x03	; 3
    1f18:	60 e0       	ldi	r22, 0x00	; 0
    1f1a:	83 e4       	ldi	r24, 0x43	; 67
    1f1c:	96 e0       	ldi	r25, 0x06	; 6
    1f1e:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:282
                lcd.print("Stop Button Pressed ");
    1f22:	67 ed       	ldi	r22, 0xD7	; 215
    1f24:	74 e0       	ldi	r23, 0x04	; 4
    1f26:	83 e4       	ldi	r24, 0x43	; 67
    1f28:	96 e0       	ldi	r25, 0x06	; 6
    1f2a:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:283
                COMPRSSR_CNTRL (COMPRSSR_OFF);
    1f2e:	60 e0       	ldi	r22, 0x00	; 0
    1f30:	88 e0       	ldi	r24, 0x08	; 8
    1f32:	90 e0       	ldi	r25, 0x00	; 0
    1f34:	0e 94 27 09 	call	0x124e	; 0x124e <do_control(DO_CONTROLS_E, bool)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:284
                beep_for (SYS_OFF_BEEP);   // msecs
    1f38:	8f e6       	ldi	r24, 0x6F	; 111
    1f3a:	90 e0       	ldi	r25, 0x00	; 0
    1f3c:	0e 94 3a 0b 	call	0x1674	; 0x1674 <beep_for(int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:287

                // Bring values to default position
                tworks2_values_to_default_postion ();
    1f40:	0e 94 83 09 	call	0x1306	; 0x1306 <tworks2_values_to_default_postion()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:289

                new_delay_msecs (1000);
    1f44:	88 ee       	ldi	r24, 0xE8	; 232
    1f46:	93 e0       	ldi	r25, 0x03	; 3
    1f48:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:290
                lcd.setCursor(0, 3);
    1f4c:	43 e0       	ldi	r20, 0x03	; 3
    1f4e:	60 e0       	ldi	r22, 0x00	; 0
    1f50:	83 e4       	ldi	r24, 0x43	; 67
    1f52:	96 e0       	ldi	r25, 0x06	; 6
    1f54:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:291
                lcd.print("O2 Cons. Stopping.. ");
    1f58:	6c ee       	ldi	r22, 0xEC	; 236
    1f5a:	74 e0       	ldi	r23, 0x04	; 4
    1f5c:	83 e4       	ldi	r24, 0x43	; 67
    1f5e:	96 e0       	ldi	r25, 0x06	; 6
    1f60:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:292
                new_delay_msecs (1000);
    1f64:	88 ee       	ldi	r24, 0xE8	; 232
    1f66:	93 e0       	ldi	r25, 0x03	; 3
    1f68:	0e 94 a4 08 	call	0x1148	; 0x1148 <new_delay_msecs(unsigned int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:294

                lcd.setCursor(0, 3);
    1f6c:	43 e0       	ldi	r20, 0x03	; 3
    1f6e:	60 e0       	ldi	r22, 0x00	; 0
    1f70:	83 e4       	ldi	r24, 0x43	; 67
    1f72:	96 e0       	ldi	r25, 0x06	; 6
    1f74:	0e 94 e9 10 	call	0x21d2	; 0x21d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:295
                lcd.print("O2 Cons. Stopped..! ");
    1f78:	61 e0       	ldi	r22, 0x01	; 1
    1f7a:	75 e0       	ldi	r23, 0x05	; 5
    1f7c:	83 e4       	ldi	r24, 0x43	; 67
    1f7e:	96 e0       	ldi	r25, 0x06	; 6
    1f80:	0e 94 85 1c 	call	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:296
                ui_state = UI_LAST;
    1f84:	88 e0       	ldi	r24, 0x08	; 8
    1f86:	90 e0       	ldi	r25, 0x00	; 0
    1f88:	eb cd       	rjmp	.-1066   	; 0x1b60 <ui_task_main()+0x270>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:305
                ui_state = UI_SYS_RUNNING;
            }
            break;
        default:
        case UI_LAST:
            ui_state = UI_START;
    1f8a:	10 92 75 05 	sts	0x0575, r1	; 0x800575 <ui_state+0x1>
    1f8e:	10 92 74 05 	sts	0x0574, r1	; 0x800574 <ui_state>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:306
            break;
    1f92:	72 cd       	rjmp	.-1308   	; 0x1a78 <ui_task_main()+0x188>

00001f94 <loop>:
loop():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:56


void loop (void) {

    // 1. periodic tasks are called here
    if (f_msec) {
    1f94:	80 91 dc 05 	lds	r24, 0x05DC	; 0x8005dc <f_msec>
    1f98:	88 23       	and	r24, r24
    1f9a:	19 f0       	breq	.+6      	; 0x1fa2 <loop+0xe>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:57
        f_msec = 0;
    1f9c:	10 92 dc 05 	sts	0x05DC, r1	; 0x8005dc <f_msec>
    1fa0:	08 95       	ret
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:61
        // milli second tasks go here..

    }
    else if (f_10msec) {
    1fa2:	80 91 db 05 	lds	r24, 0x05DB	; 0x8005db <f_10msec>
    1fa6:	88 23       	and	r24, r24
    1fa8:	19 f0       	breq	.+6      	; 0x1fb0 <loop+0x1c>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:62
        f_10msec = 0;
    1faa:	10 92 db 05 	sts	0x05DB, r1	; 0x8005db <f_10msec>
    1fae:	08 95       	ret
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:66
        // 10 milli second tasks go here..

    }
    else if (f_100msec) {
    1fb0:	80 91 da 05 	lds	r24, 0x05DA	; 0x8005da <f_100msec>
    1fb4:	88 23       	and	r24, r24
    1fb6:	19 f0       	breq	.+6      	; 0x1fbe <loop+0x2a>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:67
        f_100msec = 0;
    1fb8:	10 92 da 05 	sts	0x05DA, r1	; 0x8005da <f_100msec>
    1fbc:	08 95       	ret
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:70
        // 100 milli second tasks go here..
    }
    else if (f_1sec) {
    1fbe:	80 91 d9 05 	lds	r24, 0x05D9	; 0x8005d9 <f_1sec>
    1fc2:	88 23       	and	r24, r24
    1fc4:	e9 f0       	breq	.+58     	; 0x2000 <loop+0x6c>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:71
        f_1sec = 0;
    1fc6:	10 92 d9 05 	sts	0x05D9, r1	; 0x8005d9 <f_1sec>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:73
        // 1 second tasks go here..
        f_sec_logs_task = 1;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	80 93 d5 05 	sts	0x05D5, r24	; 0x8005d5 <f_sec_logs_task>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:74
        f_sec_change_ui_task = 1;
    1fd0:	80 93 d4 05 	sts	0x05D4, r24	; 0x8005d4 <f_sec_change_ui_task>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:75
        f_sec_change_o2_task = 1;
    1fd4:	80 93 d3 05 	sts	0x05D3, r24	; 0x8005d3 <f_sec_change_o2_task>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:76
        f_sec_change_sensor_task = 1;
    1fd8:	80 93 d2 05 	sts	0x05D2, r24	; 0x8005d2 <f_sec_change_sensor_task>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:78

        o2_sensor_scan ();
    1fdc:	0e 94 34 07 	call	0xe68	; 0xe68 <o2_sensor_scan()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:80
        // read_pressure ();
        display_o2 (o2_concentration);       
    1fe0:	60 91 24 01 	lds	r22, 0x0124	; 0x800124 <o2_concentration>
    1fe4:	70 91 25 01 	lds	r23, 0x0125	; 0x800125 <o2_concentration+0x1>
    1fe8:	80 91 26 01 	lds	r24, 0x0126	; 0x800126 <o2_concentration+0x2>
    1fec:	90 91 27 01 	lds	r25, 0x0127	; 0x800127 <o2_concentration+0x3>
    1ff0:	0e 94 a1 02 	call	0x542	; 0x542 <display_o2(float)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:81
        DBG_PRINT (".");
    1ff4:	68 e6       	ldi	r22, 0x68	; 104
    1ff6:	72 e0       	ldi	r23, 0x02	; 2
    1ff8:	88 e2       	ldi	r24, 0x28	; 40
    1ffa:	97 e0       	ldi	r25, 0x07	; 7
    1ffc:	0c 94 85 1c 	jmp	0x390a	; 0x390a <Print::print(char const*)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:83
    }
    else if (f_1min) {
    2000:	80 91 d8 05 	lds	r24, 0x05D8	; 0x8005d8 <f_1min>
    2004:	88 23       	and	r24, r24
    2006:	19 f0       	breq	.+6      	; 0x200e <loop+0x7a>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:84
        f_1min = 0;
    2008:	10 92 d8 05 	sts	0x05D8, r1	; 0x8005d8 <f_1min>
    200c:	08 95       	ret
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:88
        // 1 minute tasks go here..
        
    }
    else if (f_1hr) {
    200e:	80 91 d7 05 	lds	r24, 0x05D7	; 0x8005d7 <f_1hr>
    2012:	88 23       	and	r24, r24
    2014:	19 f0       	breq	.+6      	; 0x201c <loop+0x88>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:89
        f_1hr = 0;
    2016:	10 92 d7 05 	sts	0x05D7, r1	; 0x8005d7 <f_1hr>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:101
        o2_main_task ();
        ui_task_main ();
        logs_task ();
    }

}
    201a:	08 95       	ret
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:96

    }

    // 2. contineous tasks are called here
    else {
        o2_main_task ();
    201c:	0e 94 dc 09 	call	0x13b8	; 0x13b8 <o2_main_task()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:97
        ui_task_main ();
    2020:	0e 94 78 0c 	call	0x18f0	; 0x18f0 <ui_task_main()>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/tworks_o2_cons.ino:98
        logs_task ();
    2024:	0c 94 4f 05 	jmp	0xa9e	; 0xa9e <logs_task()>

00002028 <_GLOBAL__sub_I_lcd>:
_GLOBAL__sub_I_lcd():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:401
    lcd.setCursor(0, 3);
    //  "1.3.5.7.9.........20"
    lcd.print("Testing over...!!   ");
    new_delay_msecs (2000);

}
    2028:	cf 92       	push	r12
    202a:	ef 92       	push	r14
    202c:	0f 93       	push	r16
    202e:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\habeeba\AppData\Local\Temp\arduino_build_987024\sketch/display.h:40


#define LCD_ROWS   ( 4)
#define LCD_COLS   (20)

LiquidCrystal   lcd(RS, EN, D4, D5, D6, D7);
    2030:	87 e1       	ldi	r24, 0x17	; 23
    2032:	c8 2e       	mov	r12, r24
    2034:	96 e1       	ldi	r25, 0x16	; 22
    2036:	e9 2e       	mov	r14, r25
    2038:	05 e1       	ldi	r16, 0x15	; 21
    203a:	24 e1       	ldi	r18, 0x14	; 20
    203c:	43 e1       	ldi	r20, 0x13	; 19
    203e:	62 e1       	ldi	r22, 0x12	; 18
    2040:	83 e4       	ldi	r24, 0x43	; 67
    2042:	96 e0       	ldi	r25, 0x06	; 6
    2044:	0e 94 9e 11 	call	0x233c	; 0x233c <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
C:\Users\habeeba\AppData\Local\Temp\arduino_build_987024\sketch/display.h:41
LedControl      lc = LedControl(dataPin_7segment, clckPin_7segment, loadPin_7segment, 1);
    2048:	01 e0       	ldi	r16, 0x01	; 1
    204a:	10 e0       	ldi	r17, 0x00	; 0
    204c:	2d e0       	ldi	r18, 0x0D	; 13
    204e:	30 e0       	ldi	r19, 0x00	; 0
    2050:	47 e0       	ldi	r20, 0x07	; 7
    2052:	50 e0       	ldi	r21, 0x00	; 0
    2054:	65 e0       	ldi	r22, 0x05	; 5
    2056:	70 e0       	ldi	r23, 0x00	; 0
    2058:	8b ee       	ldi	r24, 0xEB	; 235
    205a:	95 e0       	ldi	r25, 0x05	; 5
    205c:	0e 94 8f 12 	call	0x251e	; 0x251e <LedControl::LedControl(int, int, int, int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:20
//float x_samples[NUM_OF_SAMPLES_O2] = {224.0,  1083.0, 4888.0};




ADS1115 ADS(O2_SENSOR_ADS_ADDR);
    2060:	4b e5       	ldi	r20, 0x5B	; 91
    2062:	56 e0       	ldi	r21, 0x06	; 6
    2064:	68 e4       	ldi	r22, 0x48	; 72
    2066:	86 e7       	ldi	r24, 0x76	; 118
    2068:	95 e0       	ldi	r25, 0x05	; 5
_GLOBAL__sub_I_lcd():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:401
    206a:	1f 91       	pop	r17
    206c:	0f 91       	pop	r16
    206e:	ef 90       	pop	r14
    2070:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:20
    2072:	0c 94 cb 14 	jmp	0x2996	; 0x2996 <ADS1115::ADS1115(unsigned char, TwoWire*)>

00002076 <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:271
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    2076:	90 e0       	ldi	r25, 0x00	; 0
    2078:	80 e0       	ldi	r24, 0x00	; 0
    207a:	08 95       	ret

0000207c <Print::flush()>:
_ZN5Print5flushEv():
    207c:	08 95       	ret

0000207e <LiquidCrystal::pulseEnable()>:
_ZN13LiquidCrystal11pulseEnableEv():
    207e:	cf 93       	push	r28
    2080:	df 93       	push	r29
    2082:	ec 01       	movw	r28, r24
    2084:	60 e0       	ldi	r22, 0x00	; 0
    2086:	8e 81       	ldd	r24, Y+6	; 0x06
    2088:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    208c:	81 e0       	ldi	r24, 0x01	; 1
    208e:	90 e0       	ldi	r25, 0x00	; 0
    2090:	0e 94 15 19 	call	0x322a	; 0x322a <delayMicroseconds>
    2094:	61 e0       	ldi	r22, 0x01	; 1
    2096:	8e 81       	ldd	r24, Y+6	; 0x06
    2098:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    209c:	81 e0       	ldi	r24, 0x01	; 1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	0e 94 15 19 	call	0x322a	; 0x322a <delayMicroseconds>
    20a4:	60 e0       	ldi	r22, 0x00	; 0
    20a6:	8e 81       	ldd	r24, Y+6	; 0x06
    20a8:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    20ac:	84 e6       	ldi	r24, 0x64	; 100
    20ae:	90 e0       	ldi	r25, 0x00	; 0
    20b0:	df 91       	pop	r29
    20b2:	cf 91       	pop	r28
    20b4:	0c 94 15 19 	jmp	0x322a	; 0x322a <delayMicroseconds>

000020b8 <LiquidCrystal::write4bits(unsigned char)>:
_ZN13LiquidCrystal10write4bitsEh():
    20b8:	cf 92       	push	r12
    20ba:	df 92       	push	r13
    20bc:	ef 92       	push	r14
    20be:	ff 92       	push	r15
    20c0:	0f 93       	push	r16
    20c2:	1f 93       	push	r17
    20c4:	cf 93       	push	r28
    20c6:	df 93       	push	r29
    20c8:	6c 01       	movw	r12, r24
    20ca:	7c 01       	movw	r14, r24
    20cc:	87 e0       	ldi	r24, 0x07	; 7
    20ce:	e8 0e       	add	r14, r24
    20d0:	f1 1c       	adc	r15, r1
    20d2:	d0 e0       	ldi	r29, 0x00	; 0
    20d4:	c0 e0       	ldi	r28, 0x00	; 0
    20d6:	06 2f       	mov	r16, r22
    20d8:	10 e0       	ldi	r17, 0x00	; 0
    20da:	b8 01       	movw	r22, r16
    20dc:	0c 2e       	mov	r0, r28
    20de:	02 c0       	rjmp	.+4      	; 0x20e4 <LiquidCrystal::write4bits(unsigned char)+0x2c>
    20e0:	75 95       	asr	r23
    20e2:	67 95       	ror	r22
    20e4:	0a 94       	dec	r0
    20e6:	e2 f7       	brpl	.-8      	; 0x20e0 <LiquidCrystal::write4bits(unsigned char)+0x28>
    20e8:	61 70       	andi	r22, 0x01	; 1
    20ea:	f7 01       	movw	r30, r14
    20ec:	81 91       	ld	r24, Z+
    20ee:	7f 01       	movw	r14, r30
    20f0:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    20f4:	21 96       	adiw	r28, 0x01	; 1
    20f6:	c4 30       	cpi	r28, 0x04	; 4
    20f8:	d1 05       	cpc	r29, r1
    20fa:	79 f7       	brne	.-34     	; 0x20da <LiquidCrystal::write4bits(unsigned char)+0x22>
    20fc:	c6 01       	movw	r24, r12
    20fe:	df 91       	pop	r29
    2100:	cf 91       	pop	r28
    2102:	1f 91       	pop	r17
    2104:	0f 91       	pop	r16
    2106:	ff 90       	pop	r15
    2108:	ef 90       	pop	r14
    210a:	df 90       	pop	r13
    210c:	cf 90       	pop	r12
    210e:	0c 94 3f 10 	jmp	0x207e	; 0x207e <LiquidCrystal::pulseEnable()>

00002112 <LiquidCrystal::write8bits(unsigned char)>:
_ZN13LiquidCrystal10write8bitsEh():
    2112:	cf 92       	push	r12
    2114:	df 92       	push	r13
    2116:	ef 92       	push	r14
    2118:	ff 92       	push	r15
    211a:	0f 93       	push	r16
    211c:	1f 93       	push	r17
    211e:	cf 93       	push	r28
    2120:	df 93       	push	r29
    2122:	6c 01       	movw	r12, r24
    2124:	7c 01       	movw	r14, r24
    2126:	87 e0       	ldi	r24, 0x07	; 7
    2128:	e8 0e       	add	r14, r24
    212a:	f1 1c       	adc	r15, r1
    212c:	d0 e0       	ldi	r29, 0x00	; 0
    212e:	c0 e0       	ldi	r28, 0x00	; 0
    2130:	06 2f       	mov	r16, r22
    2132:	10 e0       	ldi	r17, 0x00	; 0
    2134:	b8 01       	movw	r22, r16
    2136:	0c 2e       	mov	r0, r28
    2138:	02 c0       	rjmp	.+4      	; 0x213e <LiquidCrystal::write8bits(unsigned char)+0x2c>
    213a:	75 95       	asr	r23
    213c:	67 95       	ror	r22
    213e:	0a 94       	dec	r0
    2140:	e2 f7       	brpl	.-8      	; 0x213a <LiquidCrystal::write8bits(unsigned char)+0x28>
    2142:	61 70       	andi	r22, 0x01	; 1
    2144:	f7 01       	movw	r30, r14
    2146:	81 91       	ld	r24, Z+
    2148:	7f 01       	movw	r14, r30
    214a:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    214e:	21 96       	adiw	r28, 0x01	; 1
    2150:	c8 30       	cpi	r28, 0x08	; 8
    2152:	d1 05       	cpc	r29, r1
    2154:	79 f7       	brne	.-34     	; 0x2134 <LiquidCrystal::write8bits(unsigned char)+0x22>
    2156:	c6 01       	movw	r24, r12
    2158:	df 91       	pop	r29
    215a:	cf 91       	pop	r28
    215c:	1f 91       	pop	r17
    215e:	0f 91       	pop	r16
    2160:	ff 90       	pop	r15
    2162:	ef 90       	pop	r14
    2164:	df 90       	pop	r13
    2166:	cf 90       	pop	r12
    2168:	0c 94 3f 10 	jmp	0x207e	; 0x207e <LiquidCrystal::pulseEnable()>

0000216c <LiquidCrystal::send(unsigned char, unsigned char)>:
_ZN13LiquidCrystal4sendEhh():
    216c:	1f 93       	push	r17
    216e:	cf 93       	push	r28
    2170:	df 93       	push	r29
    2172:	ec 01       	movw	r28, r24
    2174:	16 2f       	mov	r17, r22
    2176:	64 2f       	mov	r22, r20
    2178:	8c 81       	ldd	r24, Y+4	; 0x04
    217a:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    217e:	8d 81       	ldd	r24, Y+5	; 0x05
    2180:	8f 3f       	cpi	r24, 0xFF	; 255
    2182:	19 f0       	breq	.+6      	; 0x218a <LiquidCrystal::send(unsigned char, unsigned char)+0x1e>
    2184:	60 e0       	ldi	r22, 0x00	; 0
    2186:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    218a:	8f 85       	ldd	r24, Y+15	; 0x0f
    218c:	61 2f       	mov	r22, r17
    218e:	84 ff       	sbrs	r24, 4
    2190:	06 c0       	rjmp	.+12     	; 0x219e <LiquidCrystal::send(unsigned char, unsigned char)+0x32>
    2192:	ce 01       	movw	r24, r28
    2194:	df 91       	pop	r29
    2196:	cf 91       	pop	r28
    2198:	1f 91       	pop	r17
    219a:	0c 94 89 10 	jmp	0x2112	; 0x2112 <LiquidCrystal::write8bits(unsigned char)>
    219e:	70 e0       	ldi	r23, 0x00	; 0
    21a0:	84 e0       	ldi	r24, 0x04	; 4
    21a2:	75 95       	asr	r23
    21a4:	67 95       	ror	r22
    21a6:	8a 95       	dec	r24
    21a8:	e1 f7       	brne	.-8      	; 0x21a2 <LiquidCrystal::send(unsigned char, unsigned char)+0x36>
    21aa:	ce 01       	movw	r24, r28
    21ac:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LiquidCrystal::write4bits(unsigned char)>
    21b0:	61 2f       	mov	r22, r17
    21b2:	ce 01       	movw	r24, r28
    21b4:	df 91       	pop	r29
    21b6:	cf 91       	pop	r28
    21b8:	1f 91       	pop	r17
    21ba:	0c 94 5c 10 	jmp	0x20b8	; 0x20b8 <LiquidCrystal::write4bits(unsigned char)>

000021be <LiquidCrystal::command(unsigned char)>:
_ZN13LiquidCrystal7commandEh():
    21be:	40 e0       	ldi	r20, 0x00	; 0
    21c0:	0c 94 b6 10 	jmp	0x216c	; 0x216c <LiquidCrystal::send(unsigned char, unsigned char)>

000021c4 <LiquidCrystal::clear()>:
_ZN13LiquidCrystal5clearEv():
    21c4:	61 e0       	ldi	r22, 0x01	; 1
    21c6:	0e 94 df 10 	call	0x21be	; 0x21be <LiquidCrystal::command(unsigned char)>
    21ca:	80 ed       	ldi	r24, 0xD0	; 208
    21cc:	97 e0       	ldi	r25, 0x07	; 7
    21ce:	0c 94 15 19 	jmp	0x322a	; 0x322a <delayMicroseconds>

000021d2 <LiquidCrystal::setCursor(unsigned char, unsigned char)>:
_ZN13LiquidCrystal9setCursorEhh():
    21d2:	44 30       	cpi	r20, 0x04	; 4
    21d4:	08 f0       	brcs	.+2      	; 0x21d8 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x6>
    21d6:	43 e0       	ldi	r20, 0x03	; 3
    21d8:	fc 01       	movw	r30, r24
    21da:	23 89       	ldd	r18, Z+19	; 0x13
    21dc:	42 17       	cp	r20, r18
    21de:	10 f0       	brcs	.+4      	; 0x21e4 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x12>
    21e0:	4f ef       	ldi	r20, 0xFF	; 255
    21e2:	42 0f       	add	r20, r18
    21e4:	fc 01       	movw	r30, r24
    21e6:	e4 0f       	add	r30, r20
    21e8:	f1 1d       	adc	r31, r1
    21ea:	24 89       	ldd	r18, Z+20	; 0x14
    21ec:	62 0f       	add	r22, r18
    21ee:	60 68       	ori	r22, 0x80	; 128
    21f0:	0c 94 df 10 	jmp	0x21be	; 0x21be <LiquidCrystal::command(unsigned char)>

000021f4 <LiquidCrystal::display()>:
_ZN13LiquidCrystal7displayEv():
    21f4:	fc 01       	movw	r30, r24
    21f6:	60 89       	ldd	r22, Z+16	; 0x10
    21f8:	26 2f       	mov	r18, r22
    21fa:	24 60       	ori	r18, 0x04	; 4
    21fc:	20 8b       	std	Z+16, r18	; 0x10
    21fe:	6c 60       	ori	r22, 0x0C	; 12
    2200:	0c 94 df 10 	jmp	0x21be	; 0x21be <LiquidCrystal::command(unsigned char)>

00002204 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystal5beginEhhh():
    2204:	0f 93       	push	r16
    2206:	1f 93       	push	r17
    2208:	cf 93       	push	r28
    220a:	df 93       	push	r29
    220c:	ec 01       	movw	r28, r24
    220e:	42 30       	cpi	r20, 0x02	; 2
    2210:	18 f0       	brcs	.+6      	; 0x2218 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x14>
    2212:	8f 85       	ldd	r24, Y+15	; 0x0f
    2214:	88 60       	ori	r24, 0x08	; 8
    2216:	8f 87       	std	Y+15, r24	; 0x0f
    2218:	4b 8b       	std	Y+19, r20	; 0x13
_ZN13LiquidCrystal13setRowOffsetsEiiii():
    221a:	1c 8a       	std	Y+20, r1	; 0x14
    221c:	80 e4       	ldi	r24, 0x40	; 64
    221e:	8d 8b       	std	Y+21, r24	; 0x15
    2220:	6e 8b       	std	Y+22, r22	; 0x16
    2222:	60 5c       	subi	r22, 0xC0	; 192
    2224:	6f 8b       	std	Y+23, r22	; 0x17
_ZN13LiquidCrystal5beginEhhh():
    2226:	22 23       	and	r18, r18
    2228:	29 f0       	breq	.+10     	; 0x2234 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    222a:	41 30       	cpi	r20, 0x01	; 1
    222c:	19 f4       	brne	.+6      	; 0x2234 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    222e:	8f 85       	ldd	r24, Y+15	; 0x0f
    2230:	84 60       	ori	r24, 0x04	; 4
    2232:	8f 87       	std	Y+15, r24	; 0x0f
    2234:	61 e0       	ldi	r22, 0x01	; 1
    2236:	8c 81       	ldd	r24, Y+4	; 0x04
    2238:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    223c:	8d 81       	ldd	r24, Y+5	; 0x05
    223e:	8f 3f       	cpi	r24, 0xFF	; 255
    2240:	19 f0       	breq	.+6      	; 0x2248 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x44>
    2242:	61 e0       	ldi	r22, 0x01	; 1
    2244:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    2248:	61 e0       	ldi	r22, 0x01	; 1
    224a:	8e 81       	ldd	r24, Y+6	; 0x06
    224c:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    2250:	8e 01       	movw	r16, r28
    2252:	98 01       	movw	r18, r16
    2254:	2c 1b       	sub	r18, r28
    2256:	3d 0b       	sbc	r19, r29
    2258:	8f 85       	ldd	r24, Y+15	; 0x0f
    225a:	84 fd       	sbrc	r24, 4
    225c:	0d c0       	rjmp	.+26     	; 0x2278 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x74>
    225e:	84 e0       	ldi	r24, 0x04	; 4
    2260:	90 e0       	ldi	r25, 0x00	; 0
    2262:	0f 5f       	subi	r16, 0xFF	; 255
    2264:	1f 4f       	sbci	r17, 0xFF	; 255
    2266:	28 17       	cp	r18, r24
    2268:	39 07       	cpc	r19, r25
    226a:	4c f4       	brge	.+18     	; 0x227e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x7a>
    226c:	61 e0       	ldi	r22, 0x01	; 1
    226e:	f8 01       	movw	r30, r16
    2270:	86 81       	ldd	r24, Z+6	; 0x06
    2272:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    2276:	ed cf       	rjmp	.-38     	; 0x2252 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x4e>
    2278:	88 e0       	ldi	r24, 0x08	; 8
    227a:	90 e0       	ldi	r25, 0x00	; 0
    227c:	f2 cf       	rjmp	.-28     	; 0x2262 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x5e>
    227e:	80 e5       	ldi	r24, 0x50	; 80
    2280:	93 ec       	ldi	r25, 0xC3	; 195
    2282:	0e 94 15 19 	call	0x322a	; 0x322a <delayMicroseconds>
    2286:	60 e0       	ldi	r22, 0x00	; 0
    2288:	8c 81       	ldd	r24, Y+4	; 0x04
    228a:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    228e:	60 e0       	ldi	r22, 0x00	; 0
    2290:	8e 81       	ldd	r24, Y+6	; 0x06
    2292:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    2296:	8d 81       	ldd	r24, Y+5	; 0x05
    2298:	8f 3f       	cpi	r24, 0xFF	; 255
    229a:	19 f0       	breq	.+6      	; 0x22a2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x9e>
    229c:	60 e0       	ldi	r22, 0x00	; 0
    229e:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    22a2:	6f 85       	ldd	r22, Y+15	; 0x0f
    22a4:	64 fd       	sbrc	r22, 4
    22a6:	33 c0       	rjmp	.+102    	; 0x230e <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x10a>
    22a8:	63 e0       	ldi	r22, 0x03	; 3
    22aa:	ce 01       	movw	r24, r28
    22ac:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LiquidCrystal::write4bits(unsigned char)>
    22b0:	84 e9       	ldi	r24, 0x94	; 148
    22b2:	91 e1       	ldi	r25, 0x11	; 17
    22b4:	0e 94 15 19 	call	0x322a	; 0x322a <delayMicroseconds>
    22b8:	63 e0       	ldi	r22, 0x03	; 3
    22ba:	ce 01       	movw	r24, r28
    22bc:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LiquidCrystal::write4bits(unsigned char)>
    22c0:	84 e9       	ldi	r24, 0x94	; 148
    22c2:	91 e1       	ldi	r25, 0x11	; 17
    22c4:	0e 94 15 19 	call	0x322a	; 0x322a <delayMicroseconds>
    22c8:	63 e0       	ldi	r22, 0x03	; 3
    22ca:	ce 01       	movw	r24, r28
    22cc:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LiquidCrystal::write4bits(unsigned char)>
    22d0:	86 e9       	ldi	r24, 0x96	; 150
    22d2:	90 e0       	ldi	r25, 0x00	; 0
    22d4:	0e 94 15 19 	call	0x322a	; 0x322a <delayMicroseconds>
    22d8:	62 e0       	ldi	r22, 0x02	; 2
    22da:	ce 01       	movw	r24, r28
    22dc:	0e 94 5c 10 	call	0x20b8	; 0x20b8 <LiquidCrystal::write4bits(unsigned char)>
    22e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    22e2:	60 62       	ori	r22, 0x20	; 32
    22e4:	ce 01       	movw	r24, r28
    22e6:	0e 94 df 10 	call	0x21be	; 0x21be <LiquidCrystal::command(unsigned char)>
    22ea:	84 e0       	ldi	r24, 0x04	; 4
    22ec:	88 8b       	std	Y+16, r24	; 0x10
    22ee:	ce 01       	movw	r24, r28
    22f0:	0e 94 fa 10 	call	0x21f4	; 0x21f4 <LiquidCrystal::display()>
    22f4:	ce 01       	movw	r24, r28
    22f6:	0e 94 e2 10 	call	0x21c4	; 0x21c4 <LiquidCrystal::clear()>
    22fa:	82 e0       	ldi	r24, 0x02	; 2
    22fc:	89 8b       	std	Y+17, r24	; 0x11
    22fe:	66 e0       	ldi	r22, 0x06	; 6
    2300:	ce 01       	movw	r24, r28
    2302:	df 91       	pop	r29
    2304:	cf 91       	pop	r28
    2306:	1f 91       	pop	r17
    2308:	0f 91       	pop	r16
    230a:	0c 94 df 10 	jmp	0x21be	; 0x21be <LiquidCrystal::command(unsigned char)>
    230e:	60 62       	ori	r22, 0x20	; 32
    2310:	ce 01       	movw	r24, r28
    2312:	0e 94 df 10 	call	0x21be	; 0x21be <LiquidCrystal::command(unsigned char)>
    2316:	84 e9       	ldi	r24, 0x94	; 148
    2318:	91 e1       	ldi	r25, 0x11	; 17
    231a:	0e 94 15 19 	call	0x322a	; 0x322a <delayMicroseconds>
    231e:	6f 85       	ldd	r22, Y+15	; 0x0f
    2320:	60 62       	ori	r22, 0x20	; 32
    2322:	ce 01       	movw	r24, r28
    2324:	0e 94 df 10 	call	0x21be	; 0x21be <LiquidCrystal::command(unsigned char)>
    2328:	86 e9       	ldi	r24, 0x96	; 150
    232a:	90 e0       	ldi	r25, 0x00	; 0
    232c:	0e 94 15 19 	call	0x322a	; 0x322a <delayMicroseconds>
    2330:	6f 85       	ldd	r22, Y+15	; 0x0f
    2332:	60 62       	ori	r22, 0x20	; 32
    2334:	ce 01       	movw	r24, r28
    2336:	0e 94 df 10 	call	0x21be	; 0x21be <LiquidCrystal::command(unsigned char)>
    233a:	d2 cf       	rjmp	.-92     	; 0x22e0 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xdc>

0000233c <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystalC2Ehhhhhh():
    233c:	cf 92       	push	r12
    233e:	ef 92       	push	r14
    2340:	0f 93       	push	r16
    2342:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    2344:	13 82       	std	Z+3, r1	; 0x03
    2346:	12 82       	std	Z+2, r1	; 0x02
_ZN13LiquidCrystalC2Ehhhhhh():
    2348:	86 e2       	ldi	r24, 0x26	; 38
    234a:	95 e0       	ldi	r25, 0x05	; 5
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	80 83       	st	Z, r24
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    2350:	64 83       	std	Z+4, r22	; 0x04
    2352:	8f ef       	ldi	r24, 0xFF	; 255
    2354:	85 83       	std	Z+5, r24	; 0x05
    2356:	46 83       	std	Z+6, r20	; 0x06
    2358:	27 83       	std	Z+7, r18	; 0x07
    235a:	00 87       	std	Z+8, r16	; 0x08
    235c:	e1 86       	std	Z+9, r14	; 0x09
    235e:	c2 86       	std	Z+10, r12	; 0x0a
    2360:	13 86       	std	Z+11, r1	; 0x0b
    2362:	14 86       	std	Z+12, r1	; 0x0c
    2364:	15 86       	std	Z+13, r1	; 0x0d
    2366:	16 86       	std	Z+14, r1	; 0x0e
    2368:	17 86       	std	Z+15, r1	; 0x0f
    236a:	20 e0       	ldi	r18, 0x00	; 0
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	60 e1       	ldi	r22, 0x10	; 16
    2370:	cf 01       	movw	r24, r30
_ZN13LiquidCrystalC2Ehhhhhh():
    2372:	0f 91       	pop	r16
    2374:	ef 90       	pop	r14
    2376:	cf 90       	pop	r12
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    2378:	0c 94 02 11 	jmp	0x2204	; 0x2204 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>

0000237c <LiquidCrystal::write(unsigned char)>:
_ZN13LiquidCrystal5writeEh():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    237c:	41 e0       	ldi	r20, 0x01	; 1
    237e:	0e 94 b6 10 	call	0x216c	; 0x216c <LiquidCrystal::send(unsigned char, unsigned char)>
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
    2382:	81 e0       	ldi	r24, 0x01	; 1
    2384:	90 e0       	ldi	r25, 0x00	; 0
    2386:	08 95       	ret

00002388 <LedControl::spiTransfer(int, unsigned char, unsigned char)>:
_ZN10LedControl11spiTransferEihh():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:153
    for(int row=0;row<8;row++) {
        val=value >> (7-row);
        val=val & 0x01;
        setLed(addr,row,col,val);
    }
}
    2388:	8f 92       	push	r8
    238a:	9f 92       	push	r9
    238c:	af 92       	push	r10
    238e:	bf 92       	push	r11
    2390:	cf 92       	push	r12
    2392:	df 92       	push	r13
    2394:	ef 92       	push	r14
    2396:	ff 92       	push	r15
    2398:	0f 93       	push	r16
    239a:	1f 93       	push	r17
    239c:	cf 93       	push	r28
    239e:	df 93       	push	r29
    23a0:	00 d0       	rcall	.+0      	; 0x23a2 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x1a>
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
    23a6:	8c 01       	movw	r16, r24
    23a8:	49 83       	std	Y+1, r20	; 0x01
    23aa:	2a 83       	std	Y+2, r18	; 0x02
    23ac:	66 0f       	add	r22, r22
    23ae:	77 1f       	adc	r23, r23
    23b0:	f8 01       	movw	r30, r16
    23b2:	ea 5a       	subi	r30, 0xAA	; 170
    23b4:	ff 4f       	sbci	r31, 0xFF	; 255
    23b6:	e0 80       	ld	r14, Z
    23b8:	f1 80       	ldd	r15, Z+1	; 0x01
    23ba:	ee 0c       	add	r14, r14
    23bc:	ff 1c       	adc	r15, r15
    23be:	f8 01       	movw	r30, r16
    23c0:	cf 01       	movw	r24, r30
    23c2:	80 1b       	sub	r24, r16
    23c4:	91 0b       	sbc	r25, r17
    23c6:	8e 15       	cp	r24, r14
    23c8:	9f 05       	cpc	r25, r15
    23ca:	14 f4       	brge	.+4      	; 0x23d0 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x48>
    23cc:	11 92       	st	Z+, r1
    23ce:	f8 cf       	rjmp	.-16     	; 0x23c0 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x38>
    23d0:	89 81       	ldd	r24, Y+1	; 0x01
    23d2:	f8 01       	movw	r30, r16
    23d4:	e6 0f       	add	r30, r22
    23d6:	f7 1f       	adc	r31, r23
    23d8:	81 83       	std	Z+1, r24	; 0x01
    23da:	8a 81       	ldd	r24, Y+2	; 0x02
    23dc:	80 83       	st	Z, r24
    23de:	68 01       	movw	r12, r16
    23e0:	84 e5       	ldi	r24, 0x54	; 84
    23e2:	c8 0e       	add	r12, r24
    23e4:	d1 1c       	adc	r13, r1
    23e6:	60 e0       	ldi	r22, 0x00	; 0
    23e8:	f6 01       	movw	r30, r12
    23ea:	80 81       	ld	r24, Z
    23ec:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    23f0:	48 01       	movw	r8, r16
    23f2:	f2 e5       	ldi	r31, 0x52	; 82
    23f4:	8f 0e       	add	r8, r31
    23f6:	91 1c       	adc	r9, r1
    23f8:	58 01       	movw	r10, r16
    23fa:	80 e5       	ldi	r24, 0x50	; 80
    23fc:	a8 0e       	add	r10, r24
    23fe:	b1 1c       	adc	r11, r1
    2400:	1e 14       	cp	r1, r14
    2402:	1f 04       	cpc	r1, r15
    2404:	7c f4       	brge	.+30     	; 0x2424 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x9c>
    2406:	e1 e0       	ldi	r30, 0x01	; 1
    2408:	ee 1a       	sub	r14, r30
    240a:	f1 08       	sbc	r15, r1
    240c:	f8 01       	movw	r30, r16
    240e:	ee 0d       	add	r30, r14
    2410:	ff 1d       	adc	r31, r15
    2412:	20 81       	ld	r18, Z
    2414:	41 e0       	ldi	r20, 0x01	; 1
    2416:	f4 01       	movw	r30, r8
    2418:	60 81       	ld	r22, Z
    241a:	f5 01       	movw	r30, r10
    241c:	80 81       	ld	r24, Z
    241e:	0e 94 1d 1a 	call	0x343a	; 0x343a <shiftOut>
    2422:	ee cf       	rjmp	.-36     	; 0x2400 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x78>
    2424:	61 e0       	ldi	r22, 0x01	; 1
    2426:	f6 01       	movw	r30, r12
    2428:	80 81       	ld	r24, Z
    242a:	0f 90       	pop	r0
    242c:	0f 90       	pop	r0
    242e:	df 91       	pop	r29
    2430:	cf 91       	pop	r28
    2432:	1f 91       	pop	r17
    2434:	0f 91       	pop	r16
    2436:	ff 90       	pop	r15
    2438:	ef 90       	pop	r14
    243a:	df 90       	pop	r13
    243c:	cf 90       	pop	r12
    243e:	bf 90       	pop	r11
    2440:	af 90       	pop	r10
    2442:	9f 90       	pop	r9
    2444:	8f 90       	pop	r8
    2446:	0c 94 c6 19 	jmp	0x338c	; 0x338c <digitalWrite>

0000244a <LedControl::shutdown(int, bool)>:
_ZN10LedControl8shutdownEib():
    244a:	77 fd       	sbrc	r23, 7
    244c:	0f c0       	rjmp	.+30     	; 0x246c <LedControl::shutdown(int, bool)+0x22>
    244e:	fc 01       	movw	r30, r24
    2450:	ea 5a       	subi	r30, 0xAA	; 170
    2452:	ff 4f       	sbci	r31, 0xFF	; 255
    2454:	20 81       	ld	r18, Z
    2456:	31 81       	ldd	r19, Z+1	; 0x01
    2458:	62 17       	cp	r22, r18
    245a:	73 07       	cpc	r23, r19
    245c:	3c f4       	brge	.+14     	; 0x246c <LedControl::shutdown(int, bool)+0x22>
    245e:	20 e0       	ldi	r18, 0x00	; 0
    2460:	41 11       	cpse	r20, r1
    2462:	01 c0       	rjmp	.+2      	; 0x2466 <LedControl::shutdown(int, bool)+0x1c>
    2464:	21 e0       	ldi	r18, 0x01	; 1
    2466:	4c e0       	ldi	r20, 0x0C	; 12
    2468:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    246c:	08 95       	ret

0000246e <LedControl::setScanLimit(int, int)>:
_ZN10LedControl12setScanLimitEii():
    246e:	77 fd       	sbrc	r23, 7
    2470:	0f c0       	rjmp	.+30     	; 0x2490 <LedControl::setScanLimit(int, int)+0x22>
    2472:	fc 01       	movw	r30, r24
    2474:	ea 5a       	subi	r30, 0xAA	; 170
    2476:	ff 4f       	sbci	r31, 0xFF	; 255
    2478:	20 81       	ld	r18, Z
    247a:	31 81       	ldd	r19, Z+1	; 0x01
    247c:	62 17       	cp	r22, r18
    247e:	73 07       	cpc	r23, r19
    2480:	3c f4       	brge	.+14     	; 0x2490 <LedControl::setScanLimit(int, int)+0x22>
    2482:	48 30       	cpi	r20, 0x08	; 8
    2484:	51 05       	cpc	r21, r1
    2486:	20 f4       	brcc	.+8      	; 0x2490 <LedControl::setScanLimit(int, int)+0x22>
    2488:	24 2f       	mov	r18, r20
    248a:	4b e0       	ldi	r20, 0x0B	; 11
    248c:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    2490:	08 95       	ret

00002492 <LedControl::setIntensity(int, int)>:
_ZN10LedControl12setIntensityEii():
    2492:	77 fd       	sbrc	r23, 7
    2494:	0f c0       	rjmp	.+30     	; 0x24b4 <LedControl::setIntensity(int, int)+0x22>
    2496:	fc 01       	movw	r30, r24
    2498:	ea 5a       	subi	r30, 0xAA	; 170
    249a:	ff 4f       	sbci	r31, 0xFF	; 255
    249c:	20 81       	ld	r18, Z
    249e:	31 81       	ldd	r19, Z+1	; 0x01
    24a0:	62 17       	cp	r22, r18
    24a2:	73 07       	cpc	r23, r19
    24a4:	3c f4       	brge	.+14     	; 0x24b4 <LedControl::setIntensity(int, int)+0x22>
    24a6:	40 31       	cpi	r20, 0x10	; 16
    24a8:	51 05       	cpc	r21, r1
    24aa:	20 f4       	brcc	.+8      	; 0x24b4 <LedControl::setIntensity(int, int)+0x22>
    24ac:	24 2f       	mov	r18, r20
    24ae:	4a e0       	ldi	r20, 0x0A	; 10
    24b0:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    24b4:	08 95       	ret

000024b6 <LedControl::clearDisplay(int)>:
_ZN10LedControl12clearDisplayEi():
    24b6:	df 92       	push	r13
    24b8:	ef 92       	push	r14
    24ba:	ff 92       	push	r15
    24bc:	0f 93       	push	r16
    24be:	1f 93       	push	r17
    24c0:	cf 93       	push	r28
    24c2:	df 93       	push	r29
    24c4:	77 fd       	sbrc	r23, 7
    24c6:	23 c0       	rjmp	.+70     	; 0x250e <LedControl::clearDisplay(int)+0x58>
    24c8:	fc 01       	movw	r30, r24
    24ca:	ea 5a       	subi	r30, 0xAA	; 170
    24cc:	ff 4f       	sbci	r31, 0xFF	; 255
    24ce:	20 81       	ld	r18, Z
    24d0:	31 81       	ldd	r19, Z+1	; 0x01
    24d2:	62 17       	cp	r22, r18
    24d4:	73 07       	cpc	r23, r19
    24d6:	dc f4       	brge	.+54     	; 0x250e <LedControl::clearDisplay(int)+0x58>
    24d8:	eb 01       	movw	r28, r22
    24da:	7c 01       	movw	r14, r24
    24dc:	8b 01       	movw	r16, r22
    24de:	83 e0       	ldi	r24, 0x03	; 3
    24e0:	00 0f       	add	r16, r16
    24e2:	11 1f       	adc	r17, r17
    24e4:	8a 95       	dec	r24
    24e6:	e1 f7       	brne	.-8      	; 0x24e0 <LedControl::clearDisplay(int)+0x2a>
    24e8:	00 5f       	subi	r16, 0xF0	; 240
    24ea:	1f 4f       	sbci	r17, 0xFF	; 255
    24ec:	0e 0d       	add	r16, r14
    24ee:	1f 1d       	adc	r17, r15
    24f0:	dd 24       	eor	r13, r13
    24f2:	d3 94       	inc	r13
    24f4:	f8 01       	movw	r30, r16
    24f6:	11 92       	st	Z+, r1
    24f8:	8f 01       	movw	r16, r30
    24fa:	20 e0       	ldi	r18, 0x00	; 0
    24fc:	4d 2d       	mov	r20, r13
    24fe:	be 01       	movw	r22, r28
    2500:	c7 01       	movw	r24, r14
    2502:	0e 94 c4 11 	call	0x2388	; 0x2388 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    2506:	d3 94       	inc	r13
    2508:	f9 e0       	ldi	r31, 0x09	; 9
    250a:	df 12       	cpse	r13, r31
    250c:	f3 cf       	rjmp	.-26     	; 0x24f4 <LedControl::clearDisplay(int)+0x3e>
    250e:	df 91       	pop	r29
    2510:	cf 91       	pop	r28
    2512:	1f 91       	pop	r17
    2514:	0f 91       	pop	r16
    2516:	ff 90       	pop	r15
    2518:	ef 90       	pop	r14
    251a:	df 90       	pop	r13
    251c:	08 95       	ret

0000251e <LedControl::LedControl(int, int, int, int)>:
_ZN10LedControlC2Eiiii():
    251e:	6f 92       	push	r6
    2520:	7f 92       	push	r7
    2522:	8f 92       	push	r8
    2524:	9f 92       	push	r9
    2526:	af 92       	push	r10
    2528:	bf 92       	push	r11
    252a:	cf 92       	push	r12
    252c:	df 92       	push	r13
    252e:	ef 92       	push	r14
    2530:	ff 92       	push	r15
    2532:	0f 93       	push	r16
    2534:	1f 93       	push	r17
    2536:	cf 93       	push	r28
    2538:	df 93       	push	r29
    253a:	ec 01       	movw	r28, r24
    253c:	d6 2e       	mov	r13, r22
    253e:	c7 2e       	mov	r12, r23
    2540:	7c 01       	movw	r14, r24
    2542:	80 e5       	ldi	r24, 0x50	; 80
    2544:	e8 0e       	add	r14, r24
    2546:	f1 1c       	adc	r15, r1
    2548:	f7 01       	movw	r30, r14
    254a:	60 83       	st	Z, r22
    254c:	71 83       	std	Z+1, r23	; 0x01
    254e:	3e 01       	movw	r6, r28
    2550:	f2 e5       	ldi	r31, 0x52	; 82
    2552:	6f 0e       	add	r6, r31
    2554:	71 1c       	adc	r7, r1
    2556:	f3 01       	movw	r30, r6
    2558:	51 83       	std	Z+1, r21	; 0x01
    255a:	40 83       	st	Z, r20
    255c:	4e 01       	movw	r8, r28
    255e:	f4 e5       	ldi	r31, 0x54	; 84
    2560:	8f 0e       	add	r8, r31
    2562:	91 1c       	adc	r9, r1
    2564:	f4 01       	movw	r30, r8
    2566:	31 83       	std	Z+1, r19	; 0x01
    2568:	20 83       	st	Z, r18
    256a:	c8 01       	movw	r24, r16
    256c:	01 97       	sbiw	r24, 0x01	; 1
    256e:	08 97       	sbiw	r24, 0x08	; 8
    2570:	10 f0       	brcs	.+4      	; 0x2576 <LedControl::LedControl(int, int, int, int)+0x58>
    2572:	08 e0       	ldi	r16, 0x08	; 8
    2574:	10 e0       	ldi	r17, 0x00	; 0
    2576:	5e 01       	movw	r10, r28
    2578:	f6 e5       	ldi	r31, 0x56	; 86
    257a:	af 0e       	add	r10, r31
    257c:	b1 1c       	adc	r11, r1
    257e:	f5 01       	movw	r30, r10
    2580:	11 83       	std	Z+1, r17	; 0x01
    2582:	00 83       	st	Z, r16
    2584:	61 e0       	ldi	r22, 0x01	; 1
    2586:	8d 2d       	mov	r24, r13
    2588:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    258c:	61 e0       	ldi	r22, 0x01	; 1
    258e:	f3 01       	movw	r30, r6
    2590:	80 81       	ld	r24, Z
    2592:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    2596:	61 e0       	ldi	r22, 0x01	; 1
    2598:	f4 01       	movw	r30, r8
    259a:	80 81       	ld	r24, Z
    259c:	0e 94 8a 19 	call	0x3314	; 0x3314 <pinMode>
    25a0:	61 e0       	ldi	r22, 0x01	; 1
    25a2:	f4 01       	movw	r30, r8
    25a4:	80 81       	ld	r24, Z
    25a6:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    25aa:	f7 01       	movw	r30, r14
    25ac:	d0 82       	st	Z, r13
    25ae:	c1 82       	std	Z+1, r12	; 0x01
    25b0:	fe 01       	movw	r30, r28
    25b2:	70 96       	adiw	r30, 0x10	; 16
    25b4:	11 92       	st	Z+, r1
    25b6:	ee 15       	cp	r30, r14
    25b8:	ff 05       	cpc	r31, r15
    25ba:	e1 f7       	brne	.-8      	; 0x25b4 <LedControl::LedControl(int, int, int, int)+0x96>
    25bc:	10 e0       	ldi	r17, 0x00	; 0
    25be:	00 e0       	ldi	r16, 0x00	; 0
    25c0:	f5 01       	movw	r30, r10
    25c2:	80 81       	ld	r24, Z
    25c4:	91 81       	ldd	r25, Z+1	; 0x01
    25c6:	08 17       	cp	r16, r24
    25c8:	19 07       	cpc	r17, r25
    25ca:	f4 f4       	brge	.+60     	; 0x2608 <LedControl::LedControl(int, int, int, int)+0xea>
    25cc:	20 e0       	ldi	r18, 0x00	; 0
    25ce:	4f e0       	ldi	r20, 0x0F	; 15
    25d0:	b8 01       	movw	r22, r16
    25d2:	ce 01       	movw	r24, r28
    25d4:	0e 94 c4 11 	call	0x2388	; 0x2388 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    25d8:	47 e0       	ldi	r20, 0x07	; 7
    25da:	50 e0       	ldi	r21, 0x00	; 0
    25dc:	b8 01       	movw	r22, r16
    25de:	ce 01       	movw	r24, r28
    25e0:	0e 94 37 12 	call	0x246e	; 0x246e <LedControl::setScanLimit(int, int)>
    25e4:	20 e0       	ldi	r18, 0x00	; 0
    25e6:	49 e0       	ldi	r20, 0x09	; 9
    25e8:	b8 01       	movw	r22, r16
    25ea:	ce 01       	movw	r24, r28
    25ec:	0e 94 c4 11 	call	0x2388	; 0x2388 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    25f0:	b8 01       	movw	r22, r16
    25f2:	ce 01       	movw	r24, r28
    25f4:	0e 94 5b 12 	call	0x24b6	; 0x24b6 <LedControl::clearDisplay(int)>
    25f8:	41 e0       	ldi	r20, 0x01	; 1
    25fa:	b8 01       	movw	r22, r16
    25fc:	ce 01       	movw	r24, r28
    25fe:	0e 94 25 12 	call	0x244a	; 0x244a <LedControl::shutdown(int, bool)>
    2602:	0f 5f       	subi	r16, 0xFF	; 255
    2604:	1f 4f       	sbci	r17, 0xFF	; 255
    2606:	dc cf       	rjmp	.-72     	; 0x25c0 <LedControl::LedControl(int, int, int, int)+0xa2>
    2608:	df 91       	pop	r29
    260a:	cf 91       	pop	r28
    260c:	1f 91       	pop	r17
    260e:	0f 91       	pop	r16
    2610:	ff 90       	pop	r15
    2612:	ef 90       	pop	r14
    2614:	df 90       	pop	r13
    2616:	cf 90       	pop	r12
    2618:	bf 90       	pop	r11
    261a:	af 90       	pop	r10
    261c:	9f 90       	pop	r9
    261e:	8f 90       	pop	r8
    2620:	7f 90       	pop	r7
    2622:	6f 90       	pop	r6
    2624:	08 95       	ret

00002626 <LedControl::setRow(int, int, unsigned char)>:
_ZN10LedControl6setRowEiih():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:132
    spiTransfer(addr, row+1,status[offset+row]);
}

void LedControl::setRow(int addr, int row, byte value) {
    int offset;
    if(addr<0 || addr>=maxDevices)
    2626:	77 fd       	sbrc	r23, 7
    2628:	1a c0       	rjmp	.+52     	; 0x265e <LedControl::setRow(int, int, unsigned char)+0x38>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:132 (discriminator 1)
    262a:	fc 01       	movw	r30, r24
    262c:	ea 5a       	subi	r30, 0xAA	; 170
    262e:	ff 4f       	sbci	r31, 0xFF	; 255
    2630:	01 90       	ld	r0, Z+
    2632:	f0 81       	ld	r31, Z
    2634:	e0 2d       	mov	r30, r0
    2636:	6e 17       	cp	r22, r30
    2638:	7f 07       	cpc	r23, r31
    263a:	8c f4       	brge	.+34     	; 0x265e <LedControl::setRow(int, int, unsigned char)+0x38>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:134
        return;
    if(row<0 || row>7)
    263c:	48 30       	cpi	r20, 0x08	; 8
    263e:	51 05       	cpc	r21, r1
    2640:	70 f4       	brcc	.+28     	; 0x265e <LedControl::setRow(int, int, unsigned char)+0x38>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:137
        return;
    offset=addr*8;
    status[offset+row]=value;
    2642:	fb 01       	movw	r30, r22
    2644:	33 e0       	ldi	r19, 0x03	; 3
    2646:	ee 0f       	add	r30, r30
    2648:	ff 1f       	adc	r31, r31
    264a:	3a 95       	dec	r19
    264c:	e1 f7       	brne	.-8      	; 0x2646 <LedControl::setRow(int, int, unsigned char)+0x20>
    264e:	e8 0f       	add	r30, r24
    2650:	f9 1f       	adc	r31, r25
    2652:	e4 0f       	add	r30, r20
    2654:	f5 1f       	adc	r31, r21
    2656:	20 8b       	std	Z+16, r18	; 0x10
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:138
    spiTransfer(addr, row+1,status[offset+row]);
    2658:	4f 5f       	subi	r20, 0xFF	; 255
    265a:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:139
}
    265e:	08 95       	ret

00002660 <LedControl::setDigit(int, int, unsigned char, bool)>:
_ZN10LedControl8setDigitEiihb():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:155
        val=val & 0x01;
        setLed(addr,row,col,val);
    }
}

void LedControl::setDigit(int addr, int digit, byte value, boolean dp) {
    2660:	0f 93       	push	r16
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:159
    int offset;
    byte v;

    if(addr<0 || addr>=maxDevices)
    2662:	77 fd       	sbrc	r23, 7
    2664:	25 c0       	rjmp	.+74     	; 0x26b0 <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:159 (discriminator 1)
    2666:	fc 01       	movw	r30, r24
    2668:	ea 5a       	subi	r30, 0xAA	; 170
    266a:	ff 4f       	sbci	r31, 0xFF	; 255
    266c:	01 90       	ld	r0, Z+
    266e:	f0 81       	ld	r31, Z
    2670:	e0 2d       	mov	r30, r0
    2672:	6e 17       	cp	r22, r30
    2674:	7f 07       	cpc	r23, r31
    2676:	e4 f4       	brge	.+56     	; 0x26b0 <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:161
        return;
    if(digit<0 || digit>7 || value>15)
    2678:	48 30       	cpi	r20, 0x08	; 8
    267a:	51 05       	cpc	r21, r1
    267c:	c8 f4       	brcc	.+50     	; 0x26b0 <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:161 (discriminator 1)
    267e:	20 31       	cpi	r18, 0x10	; 16
    2680:	b8 f4       	brcc	.+46     	; 0x26b0 <LedControl::setDigit(int, int, unsigned char, bool)+0x50>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:163
        return;
    offset=addr*8;
    2682:	db 01       	movw	r26, r22
    2684:	33 e0       	ldi	r19, 0x03	; 3
    2686:	aa 0f       	add	r26, r26
    2688:	bb 1f       	adc	r27, r27
    268a:	3a 95       	dec	r19
    268c:	e1 f7       	brne	.-8      	; 0x2686 <LedControl::setDigit(int, int, unsigned char, bool)+0x26>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:164
    v=pgm_read_byte_near(charTable + value); 
    268e:	e2 2f       	mov	r30, r18
    2690:	f0 e0       	ldi	r31, 0x00	; 0
    2692:	e4 57       	subi	r30, 0x74	; 116
    2694:	fe 4f       	sbci	r31, 0xFE	; 254
    2696:	24 91       	lpm	r18, Z
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:165
    if(dp)
    2698:	01 11       	cpse	r16, r1
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:166
        v|=B10000000;
    269a:	20 68       	ori	r18, 0x80	; 128
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:167
    status[offset+digit]=v;
    269c:	a8 0f       	add	r26, r24
    269e:	b9 1f       	adc	r27, r25
    26a0:	a4 0f       	add	r26, r20
    26a2:	b5 1f       	adc	r27, r21
    26a4:	50 96       	adiw	r26, 0x10	; 16
    26a6:	2c 93       	st	X, r18
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:168
    spiTransfer(addr, digit+1,v);
    26a8:	4f 5f       	subi	r20, 0xFF	; 255
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:169
}
    26aa:	0f 91       	pop	r16
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:168
    offset=addr*8;
    v=pgm_read_byte_near(charTable + value); 
    if(dp)
        v|=B10000000;
    status[offset+digit]=v;
    spiTransfer(addr, digit+1,v);
    26ac:	0c 94 c4 11 	jmp	0x2388	; 0x2388 <LedControl::spiTransfer(int, unsigned char, unsigned char)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:169
}
    26b0:	0f 91       	pop	r16
    26b2:	08 95       	ret

000026b4 <ADS1X15::isConnected()>:
_ZN7ADS1X1511isConnectedEv():
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:570
  _wire = wire;
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_1;
  _conversionDelay = ADS1115_CONVERSION_DELAY;
  _bitShift = 0;
  _maxPorts = 1;
}
    26b4:	cf 93       	push	r28
    26b6:	df 93       	push	r29
    26b8:	ec 01       	movw	r28, r24
    26ba:	6a 81       	ldd	r22, Y+2	; 0x02
    26bc:	88 89       	ldd	r24, Y+16	; 0x10
    26be:	99 89       	ldd	r25, Y+17	; 0x11
    26c0:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <TwoWire::beginTransmission(unsigned char)>
    26c4:	88 89       	ldd	r24, Y+16	; 0x10
    26c6:	99 89       	ldd	r25, Y+17	; 0x11
    26c8:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <TwoWire::endTransmission()>
    26cc:	91 e0       	ldi	r25, 0x01	; 1
    26ce:	81 11       	cpse	r24, r1
    26d0:	90 e0       	ldi	r25, 0x00	; 0
    26d2:	89 2f       	mov	r24, r25
    26d4:	df 91       	pop	r29
    26d6:	cf 91       	pop	r28
    26d8:	08 95       	ret

000026da <ADS1X15::begin()>:
_ZN7ADS1X155beginEv():
    26da:	cf 93       	push	r28
    26dc:	df 93       	push	r29
    26de:	ec 01       	movw	r28, r24
    26e0:	88 89       	ldd	r24, Y+16	; 0x10
    26e2:	99 89       	ldd	r25, Y+17	; 0x11
    26e4:	0e 94 a1 15 	call	0x2b42	; 0x2b42 <TwoWire::begin()>
    26e8:	8a 81       	ldd	r24, Y+2	; 0x02
    26ea:	88 54       	subi	r24, 0x48	; 72
    26ec:	84 30       	cpi	r24, 0x04	; 4
    26ee:	28 f4       	brcc	.+10     	; 0x26fa <ADS1X15::begin()+0x20>
    26f0:	ce 01       	movw	r24, r28
    26f2:	df 91       	pop	r29
    26f4:	cf 91       	pop	r28
    26f6:	0c 94 5a 13 	jmp	0x26b4	; 0x26b4 <ADS1X15::isConnected()>
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	df 91       	pop	r29
    26fe:	cf 91       	pop	r28
    2700:	08 95       	ret

00002702 <ADS1X15::setGain(unsigned char)>:
_ZN7ADS1X157setGainEh():
    2702:	fc 01       	movw	r30, r24
    2704:	80 81       	ld	r24, Z
    2706:	84 ff       	sbrs	r24, 4
    2708:	09 c0       	rjmp	.+18     	; 0x271c <ADS1X15::setGain(unsigned char)+0x1a>
    270a:	64 30       	cpi	r22, 0x04	; 4
    270c:	b1 f0       	breq	.+44     	; 0x273a <ADS1X15::setGain(unsigned char)+0x38>
    270e:	48 f4       	brcc	.+18     	; 0x2722 <ADS1X15::setGain(unsigned char)+0x20>
    2710:	61 30       	cpi	r22, 0x01	; 1
    2712:	81 f0       	breq	.+32     	; 0x2734 <ADS1X15::setGain(unsigned char)+0x32>
    2714:	80 e0       	ldi	r24, 0x00	; 0
    2716:	94 e0       	ldi	r25, 0x04	; 4
    2718:	62 30       	cpi	r22, 0x02	; 2
    271a:	49 f0       	breq	.+18     	; 0x272e <ADS1X15::setGain(unsigned char)+0x2c>
    271c:	16 82       	std	Z+6, r1	; 0x06
    271e:	15 82       	std	Z+5, r1	; 0x05
    2720:	08 95       	ret
    2722:	68 30       	cpi	r22, 0x08	; 8
    2724:	69 f0       	breq	.+26     	; 0x2740 <ADS1X15::setGain(unsigned char)+0x3e>
    2726:	80 e0       	ldi	r24, 0x00	; 0
    2728:	9a e0       	ldi	r25, 0x0A	; 10
    272a:	60 31       	cpi	r22, 0x10	; 16
    272c:	b9 f7       	brne	.-18     	; 0x271c <ADS1X15::setGain(unsigned char)+0x1a>
    272e:	96 83       	std	Z+6, r25	; 0x06
    2730:	85 83       	std	Z+5, r24	; 0x05
    2732:	08 95       	ret
    2734:	80 e0       	ldi	r24, 0x00	; 0
    2736:	92 e0       	ldi	r25, 0x02	; 2
    2738:	fa cf       	rjmp	.-12     	; 0x272e <ADS1X15::setGain(unsigned char)+0x2c>
    273a:	80 e0       	ldi	r24, 0x00	; 0
    273c:	96 e0       	ldi	r25, 0x06	; 6
    273e:	f7 cf       	rjmp	.-18     	; 0x272e <ADS1X15::setGain(unsigned char)+0x2c>
    2740:	80 e0       	ldi	r24, 0x00	; 0
    2742:	98 e0       	ldi	r25, 0x08	; 8
    2744:	f4 cf       	rjmp	.-24     	; 0x272e <ADS1X15::setGain(unsigned char)+0x2c>

00002746 <ADS1X15::reset()>:
_ZN7ADS1X155resetEv():
    2746:	cf 93       	push	r28
    2748:	df 93       	push	r29
    274a:	ec 01       	movw	r28, r24
    274c:	60 e0       	ldi	r22, 0x00	; 0
    274e:	0e 94 81 13 	call	0x2702	; 0x2702 <ADS1X15::setGain(unsigned char)>
_ZN7ADS1X157setModeEh():
    2752:	80 e0       	ldi	r24, 0x00	; 0
    2754:	91 e0       	ldi	r25, 0x01	; 1
    2756:	98 87       	std	Y+8, r25	; 0x08
    2758:	8f 83       	std	Y+7, r24	; 0x07
_ZN7ADS1X1511setDataRateEh():
    275a:	80 e8       	ldi	r24, 0x80	; 128
    275c:	90 e0       	ldi	r25, 0x00	; 0
    275e:	9a 87       	std	Y+10, r25	; 0x0a
    2760:	89 87       	std	Y+9, r24	; 0x09
_ZN7ADS1X155resetEv():
    2762:	1b 86       	std	Y+11, r1	; 0x0b
    2764:	81 e0       	ldi	r24, 0x01	; 1
    2766:	8c 87       	std	Y+12, r24	; 0x0c
    2768:	1d 86       	std	Y+13, r1	; 0x0d
    276a:	83 e0       	ldi	r24, 0x03	; 3
    276c:	8e 87       	std	Y+14, r24	; 0x0e
    276e:	df 91       	pop	r29
    2770:	cf 91       	pop	r28
    2772:	08 95       	ret

00002774 <ADS1X15::ADS1X15()>:
_ZN7ADS1X15C2Ev():
    2774:	fc 01       	movw	r30, r24
    2776:	17 86       	std	Z+15, r1	; 0x0f
    2778:	12 8a       	std	Z+18, r1	; 0x12
    277a:	13 8a       	std	Z+19, r1	; 0x13
    277c:	14 8a       	std	Z+20, r1	; 0x14
    277e:	15 8a       	std	Z+21, r1	; 0x15
    2780:	0c 94 a3 13 	jmp	0x2746	; 0x2746 <ADS1X15::reset()>

00002784 <ADS1X15::setMode(unsigned char)>:
_ZN7ADS1X157setModeEh():
    2784:	61 11       	cpse	r22, r1
    2786:	04 c0       	rjmp	.+8      	; 0x2790 <ADS1X15::setMode(unsigned char)+0xc>
    2788:	fc 01       	movw	r30, r24
    278a:	10 86       	std	Z+8, r1	; 0x08
    278c:	17 82       	std	Z+7, r1	; 0x07
    278e:	08 95       	ret
    2790:	20 e0       	ldi	r18, 0x00	; 0
    2792:	31 e0       	ldi	r19, 0x01	; 1
    2794:	fc 01       	movw	r30, r24
    2796:	30 87       	std	Z+8, r19	; 0x08
    2798:	27 83       	std	Z+7, r18	; 0x07
    279a:	08 95       	ret

0000279c <ADS1X15::setDataRate(unsigned char)>:
_ZN7ADS1X1511setDataRateEh():
    279c:	fc 01       	movw	r30, r24
    279e:	70 e0       	ldi	r23, 0x00	; 0
    27a0:	68 30       	cpi	r22, 0x08	; 8
    27a2:	71 05       	cpc	r23, r1
    27a4:	60 f4       	brcc	.+24     	; 0x27be <ADS1X15::setDataRate(unsigned char)+0x22>
    27a6:	72 87       	std	Z+10, r23	; 0x0a
    27a8:	61 87       	std	Z+9, r22	; 0x09
    27aa:	81 85       	ldd	r24, Z+9	; 0x09
    27ac:	92 85       	ldd	r25, Z+10	; 0x0a
    27ae:	25 e0       	ldi	r18, 0x05	; 5
    27b0:	88 0f       	add	r24, r24
    27b2:	99 1f       	adc	r25, r25
    27b4:	2a 95       	dec	r18
    27b6:	e1 f7       	brne	.-8      	; 0x27b0 <ADS1X15::setDataRate(unsigned char)+0x14>
    27b8:	92 87       	std	Z+10, r25	; 0x0a
    27ba:	81 87       	std	Z+9, r24	; 0x09
    27bc:	08 95       	ret
    27be:	84 e0       	ldi	r24, 0x04	; 4
    27c0:	90 e0       	ldi	r25, 0x00	; 0
    27c2:	92 87       	std	Z+10, r25	; 0x0a
    27c4:	81 87       	std	Z+9, r24	; 0x09
    27c6:	f1 cf       	rjmp	.-30     	; 0x27aa <ADS1X15::setDataRate(unsigned char)+0xe>

000027c8 <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>:
_ZN7ADS1X1514_writeRegisterEhhj():
    27c8:	ff 92       	push	r15
    27ca:	0f 93       	push	r16
    27cc:	1f 93       	push	r17
    27ce:	cf 93       	push	r28
    27d0:	df 93       	push	r29
    27d2:	ec 01       	movw	r28, r24
    27d4:	f4 2e       	mov	r15, r20
    27d6:	12 2f       	mov	r17, r18
    27d8:	03 2f       	mov	r16, r19
    27da:	88 89       	ldd	r24, Y+16	; 0x10
    27dc:	99 89       	ldd	r25, Y+17	; 0x11
    27de:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <TwoWire::beginTransmission(unsigned char)>
    27e2:	88 89       	ldd	r24, Y+16	; 0x10
    27e4:	99 89       	ldd	r25, Y+17	; 0x11
    27e6:	dc 01       	movw	r26, r24
    27e8:	ed 91       	ld	r30, X+
    27ea:	fc 91       	ld	r31, X
    27ec:	01 90       	ld	r0, Z+
    27ee:	f0 81       	ld	r31, Z
    27f0:	e0 2d       	mov	r30, r0
    27f2:	6f 2d       	mov	r22, r15
    27f4:	09 95       	icall
    27f6:	88 89       	ldd	r24, Y+16	; 0x10
    27f8:	99 89       	ldd	r25, Y+17	; 0x11
    27fa:	dc 01       	movw	r26, r24
    27fc:	ed 91       	ld	r30, X+
    27fe:	fc 91       	ld	r31, X
    2800:	01 90       	ld	r0, Z+
    2802:	f0 81       	ld	r31, Z
    2804:	e0 2d       	mov	r30, r0
    2806:	60 2f       	mov	r22, r16
    2808:	09 95       	icall
    280a:	88 89       	ldd	r24, Y+16	; 0x10
    280c:	99 89       	ldd	r25, Y+17	; 0x11
    280e:	dc 01       	movw	r26, r24
    2810:	ed 91       	ld	r30, X+
    2812:	fc 91       	ld	r31, X
    2814:	01 90       	ld	r0, Z+
    2816:	f0 81       	ld	r31, Z
    2818:	e0 2d       	mov	r30, r0
    281a:	61 2f       	mov	r22, r17
    281c:	09 95       	icall
    281e:	88 89       	ldd	r24, Y+16	; 0x10
    2820:	99 89       	ldd	r25, Y+17	; 0x11
    2822:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <TwoWire::endTransmission()>
    2826:	91 e0       	ldi	r25, 0x01	; 1
    2828:	81 11       	cpse	r24, r1
    282a:	90 e0       	ldi	r25, 0x00	; 0
    282c:	89 2f       	mov	r24, r25
    282e:	df 91       	pop	r29
    2830:	cf 91       	pop	r28
    2832:	1f 91       	pop	r17
    2834:	0f 91       	pop	r16
    2836:	ff 90       	pop	r15
    2838:	08 95       	ret

0000283a <ADS1X15::_requestADC(unsigned int)>:
_ZN7ADS1X1511_requestADCEj():
    283a:	fc 01       	movw	r30, r24
    283c:	25 81       	ldd	r18, Z+5	; 0x05
    283e:	36 81       	ldd	r19, Z+6	; 0x06
    2840:	87 81       	ldd	r24, Z+7	; 0x07
    2842:	90 85       	ldd	r25, Z+8	; 0x08
    2844:	28 2b       	or	r18, r24
    2846:	39 2b       	or	r19, r25
    2848:	30 68       	ori	r19, 0x80	; 128
    284a:	81 85       	ldd	r24, Z+9	; 0x09
    284c:	92 85       	ldd	r25, Z+10	; 0x0a
    284e:	28 2b       	or	r18, r24
    2850:	39 2b       	or	r19, r25
    2852:	26 2b       	or	r18, r22
    2854:	37 2b       	or	r19, r23
    2856:	83 85       	ldd	r24, Z+11	; 0x0b
    2858:	81 11       	cpse	r24, r1
    285a:	20 61       	ori	r18, 0x10	; 16
    285c:	84 85       	ldd	r24, Z+12	; 0x0c
    285e:	81 11       	cpse	r24, r1
    2860:	28 60       	ori	r18, 0x08	; 8
    2862:	85 85       	ldd	r24, Z+13	; 0x0d
    2864:	81 11       	cpse	r24, r1
    2866:	24 60       	ori	r18, 0x04	; 4
    2868:	86 85       	ldd	r24, Z+14	; 0x0e
    286a:	28 2b       	or	r18, r24
    286c:	41 e0       	ldi	r20, 0x01	; 1
    286e:	62 81       	ldd	r22, Z+2	; 0x02
    2870:	cf 01       	movw	r24, r30
    2872:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>

00002876 <ADS1X15::_readRegister(unsigned char, unsigned char)>:
_ZN7ADS1X1513_readRegisterEhh():
    2876:	0f 93       	push	r16
    2878:	1f 93       	push	r17
    287a:	cf 93       	push	r28
    287c:	df 93       	push	r29
    287e:	8c 01       	movw	r16, r24
    2880:	c6 2f       	mov	r28, r22
    2882:	d4 2f       	mov	r29, r20
    2884:	dc 01       	movw	r26, r24
    2886:	50 96       	adiw	r26, 0x10	; 16
    2888:	8d 91       	ld	r24, X+
    288a:	9c 91       	ld	r25, X
    288c:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <TwoWire::beginTransmission(unsigned char)>
    2890:	f8 01       	movw	r30, r16
    2892:	80 89       	ldd	r24, Z+16	; 0x10
    2894:	91 89       	ldd	r25, Z+17	; 0x11
    2896:	dc 01       	movw	r26, r24
    2898:	ed 91       	ld	r30, X+
    289a:	fc 91       	ld	r31, X
    289c:	01 90       	ld	r0, Z+
    289e:	f0 81       	ld	r31, Z
    28a0:	e0 2d       	mov	r30, r0
    28a2:	6d 2f       	mov	r22, r29
    28a4:	09 95       	icall
    28a6:	f8 01       	movw	r30, r16
    28a8:	80 89       	ldd	r24, Z+16	; 0x10
    28aa:	91 89       	ldd	r25, Z+17	; 0x11
    28ac:	0e 94 36 16 	call	0x2c6c	; 0x2c6c <TwoWire::endTransmission()>
    28b0:	42 e0       	ldi	r20, 0x02	; 2
    28b2:	6c 2f       	mov	r22, r28
    28b4:	d8 01       	movw	r26, r16
    28b6:	50 96       	adiw	r26, 0x10	; 16
    28b8:	8d 91       	ld	r24, X+
    28ba:	9c 91       	ld	r25, X
    28bc:	0e 94 33 16 	call	0x2c66	; 0x2c66 <TwoWire::requestFrom(unsigned char, unsigned char)>
    28c0:	82 30       	cpi	r24, 0x02	; 2
    28c2:	f1 f4       	brne	.+60     	; 0x2900 <ADS1X15::_readRegister(unsigned char, unsigned char)+0x8a>
    28c4:	f8 01       	movw	r30, r16
    28c6:	80 89       	ldd	r24, Z+16	; 0x10
    28c8:	91 89       	ldd	r25, Z+17	; 0x11
    28ca:	dc 01       	movw	r26, r24
    28cc:	ed 91       	ld	r30, X+
    28ce:	fc 91       	ld	r31, X
    28d0:	02 84       	ldd	r0, Z+10	; 0x0a
    28d2:	f3 85       	ldd	r31, Z+11	; 0x0b
    28d4:	e0 2d       	mov	r30, r0
    28d6:	09 95       	icall
    28d8:	d8 2f       	mov	r29, r24
    28da:	b0 e0       	ldi	r27, 0x00	; 0
    28dc:	cb 2f       	mov	r28, r27
    28de:	f8 01       	movw	r30, r16
    28e0:	80 89       	ldd	r24, Z+16	; 0x10
    28e2:	91 89       	ldd	r25, Z+17	; 0x11
    28e4:	dc 01       	movw	r26, r24
    28e6:	ed 91       	ld	r30, X+
    28e8:	fc 91       	ld	r31, X
    28ea:	02 84       	ldd	r0, Z+10	; 0x0a
    28ec:	f3 85       	ldd	r31, Z+11	; 0x0b
    28ee:	e0 2d       	mov	r30, r0
    28f0:	09 95       	icall
    28f2:	8c 0f       	add	r24, r28
    28f4:	9d 1f       	adc	r25, r29
    28f6:	df 91       	pop	r29
    28f8:	cf 91       	pop	r28
    28fa:	1f 91       	pop	r17
    28fc:	0f 91       	pop	r16
    28fe:	08 95       	ret
    2900:	90 e0       	ldi	r25, 0x00	; 0
    2902:	80 e0       	ldi	r24, 0x00	; 0
    2904:	f8 cf       	rjmp	.-16     	; 0x28f6 <ADS1X15::_readRegister(unsigned char, unsigned char)+0x80>

00002906 <ADS1X15::isBusy()>:
_ZN7ADS1X156isBusyEv():
    2906:	41 e0       	ldi	r20, 0x01	; 1
    2908:	fc 01       	movw	r30, r24
    290a:	62 81       	ldd	r22, Z+2	; 0x02
    290c:	0e 94 3b 14 	call	0x2876	; 0x2876 <ADS1X15::_readRegister(unsigned char, unsigned char)>
    2910:	89 2f       	mov	r24, r25
    2912:	80 95       	com	r24
    2914:	88 1f       	adc	r24, r24
    2916:	88 27       	eor	r24, r24
    2918:	88 1f       	adc	r24, r24
    291a:	08 95       	ret

0000291c <ADS1X15::getValue()>:
_ZN7ADS1X158getValueEv():
    291c:	cf 93       	push	r28
    291e:	df 93       	push	r29
    2920:	ec 01       	movw	r28, r24
    2922:	40 e0       	ldi	r20, 0x00	; 0
    2924:	6a 81       	ldd	r22, Y+2	; 0x02
    2926:	0e 94 3b 14 	call	0x2876	; 0x2876 <ADS1X15::_readRegister(unsigned char, unsigned char)>
    292a:	2c 81       	ldd	r18, Y+4	; 0x04
    292c:	22 23       	and	r18, r18
    292e:	29 f0       	breq	.+10     	; 0x293a <ADS1X15::getValue()+0x1e>
    2930:	02 c0       	rjmp	.+4      	; 0x2936 <ADS1X15::getValue()+0x1a>
    2932:	95 95       	asr	r25
    2934:	87 95       	ror	r24
    2936:	2a 95       	dec	r18
    2938:	e2 f7       	brpl	.-8      	; 0x2932 <ADS1X15::getValue()+0x16>
    293a:	df 91       	pop	r29
    293c:	cf 91       	pop	r28
    293e:	08 95       	ret

00002940 <ADS1X15::_readADC(unsigned int)>:
_ZN7ADS1X158_readADCEj():
    2940:	cf 93       	push	r28
    2942:	df 93       	push	r29
    2944:	ec 01       	movw	r28, r24
    2946:	0e 94 1d 14 	call	0x283a	; 0x283a <ADS1X15::_requestADC(unsigned int)>
    294a:	8f 81       	ldd	r24, Y+7	; 0x07
    294c:	98 85       	ldd	r25, Y+8	; 0x08
    294e:	81 15       	cp	r24, r1
    2950:	91 40       	sbci	r25, 0x01	; 1
    2952:	41 f4       	brne	.+16     	; 0x2964 <ADS1X15::_readADC(unsigned int)+0x24>
    2954:	ce 01       	movw	r24, r28
    2956:	0e 94 83 14 	call	0x2906	; 0x2906 <ADS1X15::isBusy()>
    295a:	88 23       	and	r24, r24
    295c:	49 f0       	breq	.+18     	; 0x2970 <ADS1X15::_readADC(unsigned int)+0x30>
    295e:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <yield>
    2962:	f8 cf       	rjmp	.-16     	; 0x2954 <ADS1X15::_readADC(unsigned int)+0x14>
    2964:	6b 81       	ldd	r22, Y+3	; 0x03
    2966:	70 e0       	ldi	r23, 0x00	; 0
    2968:	90 e0       	ldi	r25, 0x00	; 0
    296a:	80 e0       	ldi	r24, 0x00	; 0
    296c:	0e 94 dc 18 	call	0x31b8	; 0x31b8 <delay>
    2970:	ce 01       	movw	r24, r28
    2972:	df 91       	pop	r29
    2974:	cf 91       	pop	r28
    2976:	0c 94 8e 14 	jmp	0x291c	; 0x291c <ADS1X15::getValue()>

0000297a <ADS1X15::readADC(unsigned char)>:
_ZN7ADS1X157readADCEh():
    297a:	fc 01       	movw	r30, r24
    297c:	21 81       	ldd	r18, Z+1	; 0x01
    297e:	62 17       	cp	r22, r18
    2980:	38 f4       	brcc	.+14     	; 0x2990 <ADS1X15::readADC(unsigned char)+0x16>
    2982:	62 95       	swap	r22
    2984:	60 7f       	andi	r22, 0xF0	; 240
    2986:	70 e4       	ldi	r23, 0x40	; 64
    2988:	76 0f       	add	r23, r22
    298a:	60 e0       	ldi	r22, 0x00	; 0
    298c:	0c 94 a0 14 	jmp	0x2940	; 0x2940 <ADS1X15::_readADC(unsigned int)>
    2990:	90 e0       	ldi	r25, 0x00	; 0
    2992:	80 e0       	ldi	r24, 0x00	; 0
    2994:	08 95       	ret

00002996 <ADS1115::ADS1115(unsigned char, TwoWire*)>:
_ZN7ADS1115C2EhP7TwoWire():
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:577

///////////////////////////////////////////////////////////////////////////
//
// ADS1115
//
ADS1115::ADS1115(uint8_t address, TwoWire *wire)
    2996:	ff 92       	push	r15
    2998:	0f 93       	push	r16
    299a:	1f 93       	push	r17
    299c:	cf 93       	push	r28
    299e:	df 93       	push	r29
    29a0:	ec 01       	movw	r28, r24
    29a2:	f6 2e       	mov	r15, r22
    29a4:	8a 01       	movw	r16, r20
    29a6:	0e 94 ba 13 	call	0x2774	; 0x2774 <ADS1X15::ADS1X15()>
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:579
{
  _address = address;
    29aa:	fa 82       	std	Y+2, r15	; 0x02
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:580
  _wire = wire;
    29ac:	19 8b       	std	Y+17, r17	; 0x11
    29ae:	08 8b       	std	Y+16, r16	; 0x10
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:581
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_4;
    29b0:	85 e3       	ldi	r24, 0x35	; 53
    29b2:	88 83       	st	Y, r24
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:582
  _conversionDelay = ADS1115_CONVERSION_DELAY;
    29b4:	88 e0       	ldi	r24, 0x08	; 8
    29b6:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:583
  _bitShift = 0;
    29b8:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:584
  _maxPorts = 4;
    29ba:	84 e0       	ldi	r24, 0x04	; 4
    29bc:	89 83       	std	Y+1, r24	; 0x01
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:585
}
    29be:	df 91       	pop	r29
    29c0:	cf 91       	pop	r28
    29c2:	1f 91       	pop	r17
    29c4:	0f 91       	pop	r16
    29c6:	ff 90       	pop	r15
    29c8:	08 95       	ret

000029ca <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:329

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    29ca:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <TwoWire::rxBufferLength>
    29ce:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <TwoWire::rxBufferIndex>
    29d2:	89 1b       	sub	r24, r25
    29d4:	99 0b       	sbc	r25, r25
    29d6:	08 95       	ret

000029d8 <TwoWire::read()>:
_ZN7TwoWire4readEv():
    29d8:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <TwoWire::rxBufferIndex>
    29dc:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <TwoWire::rxBufferLength>
    29e0:	2f ef       	ldi	r18, 0xFF	; 255
    29e2:	3f ef       	ldi	r19, 0xFF	; 255
    29e4:	98 17       	cp	r25, r24
    29e6:	48 f4       	brcc	.+18     	; 0x29fa <TwoWire::read()+0x22>
    29e8:	e9 2f       	mov	r30, r25
    29ea:	f0 e0       	ldi	r31, 0x00	; 0
    29ec:	ef 56       	subi	r30, 0x6F	; 111
    29ee:	f9 4f       	sbci	r31, 0xF9	; 249
    29f0:	20 81       	ld	r18, Z
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	9f 5f       	subi	r25, 0xFF	; 255
    29f6:	90 93 90 06 	sts	0x0690, r25	; 0x800690 <TwoWire::rxBufferIndex>
    29fa:	c9 01       	movw	r24, r18
    29fc:	08 95       	ret

000029fe <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    29fe:	e0 91 90 06 	lds	r30, 0x0690	; 0x800690 <TwoWire::rxBufferIndex>
    2a02:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <TwoWire::rxBufferLength>
    2a06:	e8 17       	cp	r30, r24
    2a08:	30 f4       	brcc	.+12     	; 0x2a16 <TwoWire::peek()+0x18>
    2a0a:	f0 e0       	ldi	r31, 0x00	; 0
    2a0c:	ef 56       	subi	r30, 0x6F	; 111
    2a0e:	f9 4f       	sbci	r31, 0xF9	; 249
    2a10:	80 81       	ld	r24, Z
    2a12:	90 e0       	ldi	r25, 0x00	; 0
    2a14:	08 95       	ret
    2a16:	8f ef       	ldi	r24, 0xFF	; 255
    2a18:	9f ef       	ldi	r25, 0xFF	; 255
    2a1a:	08 95       	ret

00002a1c <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    2a1c:	08 95       	ret

00002a1e <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    2a1e:	cf 93       	push	r28
    2a20:	df 93       	push	r29
    2a22:	ec 01       	movw	r28, r24
    2a24:	e0 91 67 06 	lds	r30, 0x0667	; 0x800667 <TwoWire::user_onReceive>
    2a28:	f0 91 68 06 	lds	r31, 0x0668	; 0x800668 <TwoWire::user_onReceive+0x1>
    2a2c:	30 97       	sbiw	r30, 0x00	; 0
    2a2e:	f1 f0       	breq	.+60     	; 0x2a6c <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    2a30:	90 91 90 06 	lds	r25, 0x0690	; 0x800690 <TwoWire::rxBufferIndex>
    2a34:	80 91 8f 06 	lds	r24, 0x068F	; 0x80068f <TwoWire::rxBufferLength>
    2a38:	98 17       	cp	r25, r24
    2a3a:	c0 f0       	brcs	.+48     	; 0x2a6c <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    2a3c:	90 e0       	ldi	r25, 0x00	; 0
    2a3e:	29 2f       	mov	r18, r25
    2a40:	30 e0       	ldi	r19, 0x00	; 0
    2a42:	26 17       	cp	r18, r22
    2a44:	37 07       	cpc	r19, r23
    2a46:	54 f4       	brge	.+20     	; 0x2a5c <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
    2a48:	de 01       	movw	r26, r28
    2a4a:	a2 0f       	add	r26, r18
    2a4c:	b3 1f       	adc	r27, r19
    2a4e:	4c 91       	ld	r20, X
    2a50:	2f 56       	subi	r18, 0x6F	; 111
    2a52:	39 4f       	sbci	r19, 0xF9	; 249
    2a54:	d9 01       	movw	r26, r18
    2a56:	4c 93       	st	X, r20
    2a58:	9f 5f       	subi	r25, 0xFF	; 255
    2a5a:	f1 cf       	rjmp	.-30     	; 0x2a3e <TwoWire::onReceiveService(unsigned char*, int)+0x20>
    2a5c:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <TwoWire::rxBufferIndex>
    2a60:	60 93 8f 06 	sts	0x068F, r22	; 0x80068f <TwoWire::rxBufferLength>
    2a64:	cb 01       	movw	r24, r22
    2a66:	df 91       	pop	r29
    2a68:	cf 91       	pop	r28
    2a6a:	09 94       	ijmp
    2a6c:	df 91       	pop	r29
    2a6e:	cf 91       	pop	r28
    2a70:	08 95       	ret

00002a72 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    2a72:	e0 91 69 06 	lds	r30, 0x0669	; 0x800669 <TwoWire::user_onRequest>
    2a76:	f0 91 6a 06 	lds	r31, 0x066A	; 0x80066a <TwoWire::user_onRequest+0x1>
    2a7a:	30 97       	sbiw	r30, 0x00	; 0
    2a7c:	29 f0       	breq	.+10     	; 0x2a88 <TwoWire::onRequestService()+0x16>
    2a7e:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <TwoWire::txBufferIndex>
    2a82:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <TwoWire::txBufferLength>
    2a86:	09 94       	ijmp
    2a88:	08 95       	ret

00002a8a <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    2a8a:	cf 93       	push	r28
    2a8c:	df 93       	push	r29
    2a8e:	1f 92       	push	r1
    2a90:	cd b7       	in	r28, 0x3d	; 61
    2a92:	de b7       	in	r29, 0x3e	; 62
    2a94:	69 83       	std	Y+1, r22	; 0x01
    2a96:	20 91 6b 06 	lds	r18, 0x066B	; 0x80066b <TwoWire::transmitting>
    2a9a:	22 23       	and	r18, r18
    2a9c:	f9 f0       	breq	.+62     	; 0x2adc <TwoWire::write(unsigned char)+0x52>
    2a9e:	20 91 6c 06 	lds	r18, 0x066C	; 0x80066c <TwoWire::txBufferLength>
    2aa2:	20 32       	cpi	r18, 0x20	; 32
    2aa4:	58 f0       	brcs	.+22     	; 0x2abc <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    2aa6:	21 e0       	ldi	r18, 0x01	; 1
    2aa8:	30 e0       	ldi	r19, 0x00	; 0
    2aaa:	fc 01       	movw	r30, r24
    2aac:	33 83       	std	Z+3, r19	; 0x03
    2aae:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    2ab0:	90 e0       	ldi	r25, 0x00	; 0
    2ab2:	80 e0       	ldi	r24, 0x00	; 0
    2ab4:	0f 90       	pop	r0
    2ab6:	df 91       	pop	r29
    2ab8:	cf 91       	pop	r28
    2aba:	08 95       	ret
    2abc:	80 91 6d 06 	lds	r24, 0x066D	; 0x80066d <TwoWire::txBufferIndex>
    2ac0:	e8 2f       	mov	r30, r24
    2ac2:	f0 e0       	ldi	r31, 0x00	; 0
    2ac4:	e2 59       	subi	r30, 0x92	; 146
    2ac6:	f9 4f       	sbci	r31, 0xF9	; 249
    2ac8:	99 81       	ldd	r25, Y+1	; 0x01
    2aca:	90 83       	st	Z, r25
    2acc:	8f 5f       	subi	r24, 0xFF	; 255
    2ace:	80 93 6d 06 	sts	0x066D, r24	; 0x80066d <TwoWire::txBufferIndex>
    2ad2:	80 93 6c 06 	sts	0x066C, r24	; 0x80066c <TwoWire::txBufferLength>
    2ad6:	81 e0       	ldi	r24, 0x01	; 1
    2ad8:	90 e0       	ldi	r25, 0x00	; 0
    2ada:	ec cf       	rjmp	.-40     	; 0x2ab4 <TwoWire::write(unsigned char)+0x2a>
    2adc:	61 e0       	ldi	r22, 0x01	; 1
    2ade:	ce 01       	movw	r24, r28
    2ae0:	01 96       	adiw	r24, 0x01	; 1
    2ae2:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <twi_transmit>
    2ae6:	f7 cf       	rjmp	.-18     	; 0x2ad6 <TwoWire::write(unsigned char)+0x4c>

00002ae8 <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    2ae8:	cf 92       	push	r12
    2aea:	df 92       	push	r13
    2aec:	ef 92       	push	r14
    2aee:	ff 92       	push	r15
    2af0:	0f 93       	push	r16
    2af2:	1f 93       	push	r17
    2af4:	cf 93       	push	r28
    2af6:	df 93       	push	r29
    2af8:	7c 01       	movw	r14, r24
    2afa:	cb 01       	movw	r24, r22
    2afc:	8a 01       	movw	r16, r20
    2afe:	20 91 6b 06 	lds	r18, 0x066B	; 0x80066b <TwoWire::transmitting>
    2b02:	22 23       	and	r18, r18
    2b04:	89 f0       	breq	.+34     	; 0x2b28 <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    2b06:	eb 01       	movw	r28, r22
    2b08:	6b 01       	movw	r12, r22
    2b0a:	c4 0e       	add	r12, r20
    2b0c:	d5 1e       	adc	r13, r21
    2b0e:	cc 15       	cp	r28, r12
    2b10:	dd 05       	cpc	r29, r13
    2b12:	69 f0       	breq	.+26     	; 0x2b2e <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    2b14:	69 91       	ld	r22, Y+
    2b16:	d7 01       	movw	r26, r14
    2b18:	ed 91       	ld	r30, X+
    2b1a:	fc 91       	ld	r31, X
    2b1c:	01 90       	ld	r0, Z+
    2b1e:	f0 81       	ld	r31, Z
    2b20:	e0 2d       	mov	r30, r0
    2b22:	c7 01       	movw	r24, r14
    2b24:	09 95       	icall
    2b26:	f3 cf       	rjmp	.-26     	; 0x2b0e <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    2b28:	64 2f       	mov	r22, r20
    2b2a:	0e 94 07 17 	call	0x2e0e	; 0x2e0e <twi_transmit>
    2b2e:	c8 01       	movw	r24, r16
    2b30:	df 91       	pop	r29
    2b32:	cf 91       	pop	r28
    2b34:	1f 91       	pop	r17
    2b36:	0f 91       	pop	r16
    2b38:	ff 90       	pop	r15
    2b3a:	ef 90       	pop	r14
    2b3c:	df 90       	pop	r13
    2b3e:	cf 90       	pop	r12
    2b40:	08 95       	ret

00002b42 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    2b42:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <TwoWire::rxBufferIndex>
    2b46:	10 92 8f 06 	sts	0x068F, r1	; 0x80068f <TwoWire::rxBufferLength>
    2b4a:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <TwoWire::txBufferIndex>
    2b4e:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <TwoWire::txBufferLength>
    2b52:	0e 94 4a 16 	call	0x2c94	; 0x2c94 <twi_init>
    2b56:	89 e3       	ldi	r24, 0x39	; 57
    2b58:	95 e1       	ldi	r25, 0x15	; 21
    2b5a:	0e 94 33 17 	call	0x2e66	; 0x2e66 <twi_attachSlaveTxEvent>
    2b5e:	8f e0       	ldi	r24, 0x0F	; 15
    2b60:	95 e1       	ldi	r25, 0x15	; 21
    2b62:	0c 94 2e 17 	jmp	0x2e5c	; 0x2e5c <twi_attachSlaveRxEvent>

00002b66 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    2b66:	81 e0       	ldi	r24, 0x01	; 1
    2b68:	80 93 6b 06 	sts	0x066B, r24	; 0x80066b <TwoWire::transmitting>
    2b6c:	60 93 8e 06 	sts	0x068E, r22	; 0x80068e <TwoWire::txAddress>
    2b70:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <TwoWire::txBufferIndex>
    2b74:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <TwoWire::txBufferLength>
    2b78:	08 95       	ret

00002b7a <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    2b7a:	0f 93       	push	r16
    2b7c:	06 2f       	mov	r16, r22
    2b7e:	21 e0       	ldi	r18, 0x01	; 1
    2b80:	40 91 6c 06 	lds	r20, 0x066C	; 0x80066c <TwoWire::txBufferLength>
    2b84:	6e e6       	ldi	r22, 0x6E	; 110
    2b86:	76 e0       	ldi	r23, 0x06	; 6
    2b88:	80 91 8e 06 	lds	r24, 0x068E	; 0x80068e <TwoWire::txAddress>
    2b8c:	0e 94 b0 16 	call	0x2d60	; 0x2d60 <twi_writeTo>
    2b90:	10 92 6d 06 	sts	0x066D, r1	; 0x80066d <TwoWire::txBufferIndex>
    2b94:	10 92 6c 06 	sts	0x066C, r1	; 0x80066c <TwoWire::txBufferLength>
    2b98:	10 92 6b 06 	sts	0x066B, r1	; 0x80066b <TwoWire::transmitting>
    2b9c:	0f 91       	pop	r16
    2b9e:	08 95       	ret

00002ba0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    2ba0:	4f 92       	push	r4
    2ba2:	5f 92       	push	r5
    2ba4:	6f 92       	push	r6
    2ba6:	7f 92       	push	r7
    2ba8:	af 92       	push	r10
    2baa:	bf 92       	push	r11
    2bac:	cf 92       	push	r12
    2bae:	ef 92       	push	r14
    2bb0:	ff 92       	push	r15
    2bb2:	0f 93       	push	r16
    2bb4:	1f 93       	push	r17
    2bb6:	cf 93       	push	r28
    2bb8:	df 93       	push	r29
    2bba:	5c 01       	movw	r10, r24
    2bbc:	f6 2e       	mov	r15, r22
    2bbe:	d4 2f       	mov	r29, r20
    2bc0:	28 01       	movw	r4, r16
    2bc2:	39 01       	movw	r6, r18
    2bc4:	ee 20       	and	r14, r14
    2bc6:	19 f1       	breq	.+70     	; 0x2c0e <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    2bc8:	0e 94 b3 15 	call	0x2b66	; 0x2b66 <TwoWire::beginTransmission(unsigned char)>
    2bcc:	ce 2d       	mov	r28, r14
    2bce:	c4 30       	cpi	r28, 0x04	; 4
    2bd0:	08 f0       	brcs	.+2      	; 0x2bd4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    2bd2:	c3 e0       	ldi	r28, 0x03	; 3
    2bd4:	c1 50       	subi	r28, 0x01	; 1
    2bd6:	b8 f0       	brcs	.+46     	; 0x2c06 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    2bd8:	28 e0       	ldi	r18, 0x08	; 8
    2bda:	c2 9f       	mul	r28, r18
    2bdc:	c0 01       	movw	r24, r0
    2bde:	11 24       	eor	r1, r1
    2be0:	a3 01       	movw	r20, r6
    2be2:	92 01       	movw	r18, r4
    2be4:	04 c0       	rjmp	.+8      	; 0x2bee <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    2be6:	56 95       	lsr	r21
    2be8:	47 95       	ror	r20
    2bea:	37 95       	ror	r19
    2bec:	27 95       	ror	r18
    2bee:	8a 95       	dec	r24
    2bf0:	d2 f7       	brpl	.-12     	; 0x2be6 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    2bf2:	b9 01       	movw	r22, r18
    2bf4:	d5 01       	movw	r26, r10
    2bf6:	ed 91       	ld	r30, X+
    2bf8:	fc 91       	ld	r31, X
    2bfa:	01 90       	ld	r0, Z+
    2bfc:	f0 81       	ld	r31, Z
    2bfe:	e0 2d       	mov	r30, r0
    2c00:	c5 01       	movw	r24, r10
    2c02:	09 95       	icall
    2c04:	e7 cf       	rjmp	.-50     	; 0x2bd4 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    2c06:	60 e0       	ldi	r22, 0x00	; 0
    2c08:	c5 01       	movw	r24, r10
    2c0a:	0e 94 bd 15 	call	0x2b7a	; 0x2b7a <TwoWire::endTransmission(unsigned char)>
    2c0e:	4d 2f       	mov	r20, r29
    2c10:	d1 32       	cpi	r29, 0x21	; 33
    2c12:	08 f0       	brcs	.+2      	; 0x2c16 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    2c14:	40 e2       	ldi	r20, 0x20	; 32
    2c16:	2c 2d       	mov	r18, r12
    2c18:	61 e9       	ldi	r22, 0x91	; 145
    2c1a:	76 e0       	ldi	r23, 0x06	; 6
    2c1c:	8f 2d       	mov	r24, r15
    2c1e:	0e 94 68 16 	call	0x2cd0	; 0x2cd0 <twi_readFrom>
    2c22:	10 92 90 06 	sts	0x0690, r1	; 0x800690 <TwoWire::rxBufferIndex>
    2c26:	80 93 8f 06 	sts	0x068F, r24	; 0x80068f <TwoWire::rxBufferLength>
    2c2a:	df 91       	pop	r29
    2c2c:	cf 91       	pop	r28
    2c2e:	1f 91       	pop	r17
    2c30:	0f 91       	pop	r16
    2c32:	ff 90       	pop	r15
    2c34:	ef 90       	pop	r14
    2c36:	cf 90       	pop	r12
    2c38:	bf 90       	pop	r11
    2c3a:	af 90       	pop	r10
    2c3c:	7f 90       	pop	r7
    2c3e:	6f 90       	pop	r6
    2c40:	5f 90       	pop	r5
    2c42:	4f 90       	pop	r4
    2c44:	08 95       	ret

00002c46 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    2c46:	cf 92       	push	r12
    2c48:	ef 92       	push	r14
    2c4a:	0f 93       	push	r16
    2c4c:	1f 93       	push	r17
    2c4e:	c2 2e       	mov	r12, r18
    2c50:	e1 2c       	mov	r14, r1
    2c52:	00 e0       	ldi	r16, 0x00	; 0
    2c54:	10 e0       	ldi	r17, 0x00	; 0
    2c56:	98 01       	movw	r18, r16
    2c58:	0e 94 d0 15 	call	0x2ba0	; 0x2ba0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    2c5c:	1f 91       	pop	r17
    2c5e:	0f 91       	pop	r16
    2c60:	ef 90       	pop	r14
    2c62:	cf 90       	pop	r12
    2c64:	08 95       	ret

00002c66 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
    2c66:	21 e0       	ldi	r18, 0x01	; 1
    2c68:	0c 94 23 16 	jmp	0x2c46	; 0x2c46 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00002c6c <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    2c6c:	61 e0       	ldi	r22, 0x01	; 1
    2c6e:	0c 94 bd 15 	jmp	0x2b7a	; 0x2b7a <TwoWire::endTransmission(unsigned char)>

00002c72 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    2c72:	eb e5       	ldi	r30, 0x5B	; 91
    2c74:	f6 e0       	ldi	r31, 0x06	; 6
    2c76:	13 82       	std	Z+3, r1	; 0x03
    2c78:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    2c7a:	88 ee       	ldi	r24, 0xE8	; 232
    2c7c:	93 e0       	ldi	r25, 0x03	; 3
    2c7e:	a0 e0       	ldi	r26, 0x00	; 0
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	84 83       	std	Z+4, r24	; 0x04
    2c84:	95 83       	std	Z+5, r25	; 0x05
    2c86:	a6 83       	std	Z+6, r26	; 0x06
    2c88:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:52
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    2c8a:	82 e3       	ldi	r24, 0x32	; 50
    2c8c:	95 e0       	ldi	r25, 0x05	; 5
    2c8e:	91 83       	std	Z+1, r25	; 0x01
    2c90:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:333
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    2c92:	08 95       	ret

00002c94 <twi_init>:
twi_init():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    2c94:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <twi_state>
    2c98:	81 e0       	ldi	r24, 0x01	; 1
    2c9a:	80 93 1c 07 	sts	0x071C, r24	; 0x80071c <twi_sendStop>
    2c9e:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <twi_inRepStart>
    2ca2:	61 e0       	ldi	r22, 0x01	; 1
    2ca4:	81 e1       	ldi	r24, 0x11	; 17
    2ca6:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    2caa:	61 e0       	ldi	r22, 0x01	; 1
    2cac:	80 e1       	ldi	r24, 0x10	; 16
    2cae:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    2cb2:	e9 eb       	ldi	r30, 0xB9	; 185
    2cb4:	f0 e0       	ldi	r31, 0x00	; 0
    2cb6:	80 81       	ld	r24, Z
    2cb8:	8e 7f       	andi	r24, 0xFE	; 254
    2cba:	80 83       	st	Z, r24
    2cbc:	80 81       	ld	r24, Z
    2cbe:	8d 7f       	andi	r24, 0xFD	; 253
    2cc0:	80 83       	st	Z, r24
    2cc2:	88 e4       	ldi	r24, 0x48	; 72
    2cc4:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    2cc8:	85 e4       	ldi	r24, 0x45	; 69
    2cca:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2cce:	08 95       	ret

00002cd0 <twi_readFrom>:
twi_readFrom():
    2cd0:	41 32       	cpi	r20, 0x21	; 33
    2cd2:	08 f0       	brcs	.+2      	; 0x2cd6 <twi_readFrom+0x6>
    2cd4:	43 c0       	rjmp	.+134    	; 0x2d5c <twi_readFrom+0x8c>
    2cd6:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <twi_state>
    2cda:	91 11       	cpse	r25, r1
    2cdc:	fc cf       	rjmp	.-8      	; 0x2cd6 <twi_readFrom+0x6>
    2cde:	91 e0       	ldi	r25, 0x01	; 1
    2ce0:	90 93 1e 07 	sts	0x071E, r25	; 0x80071e <twi_state>
    2ce4:	20 93 1c 07 	sts	0x071C, r18	; 0x80071c <twi_sendStop>
    2ce8:	2f ef       	ldi	r18, 0xFF	; 255
    2cea:	20 93 b1 06 	sts	0x06B1, r18	; 0x8006b1 <twi_error>
    2cee:	10 92 f6 06 	sts	0x06F6, r1	; 0x8006f6 <twi_masterBufferIndex>
    2cf2:	24 0f       	add	r18, r20
    2cf4:	20 93 f5 06 	sts	0x06F5, r18	; 0x8006f5 <twi_masterBufferLength>
    2cf8:	90 93 1d 07 	sts	0x071D, r25	; 0x80071d <twi_slarw>
    2cfc:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <twi_slarw>
    2d00:	88 0f       	add	r24, r24
    2d02:	89 2b       	or	r24, r25
    2d04:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <twi_slarw>
    2d08:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <twi_inRepStart>
    2d0c:	81 30       	cpi	r24, 0x01	; 1
    2d0e:	09 f5       	brne	.+66     	; 0x2d52 <twi_readFrom+0x82>
    2d10:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <twi_inRepStart>
    2d14:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <twi_slarw>
    2d18:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2d1c:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d20:	83 fd       	sbrc	r24, 3
    2d22:	f8 cf       	rjmp	.-16     	; 0x2d14 <twi_readFrom+0x44>
    2d24:	85 ec       	ldi	r24, 0xC5	; 197
    2d26:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2d2a:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <twi_state>
    2d2e:	81 30       	cpi	r24, 0x01	; 1
    2d30:	e1 f3       	breq	.-8      	; 0x2d2a <twi_readFrom+0x5a>
    2d32:	80 91 f6 06 	lds	r24, 0x06F6	; 0x8006f6 <twi_masterBufferIndex>
    2d36:	84 17       	cp	r24, r20
    2d38:	10 f4       	brcc	.+4      	; 0x2d3e <twi_readFrom+0x6e>
    2d3a:	40 91 f6 06 	lds	r20, 0x06F6	; 0x8006f6 <twi_masterBufferIndex>
    2d3e:	a7 ef       	ldi	r26, 0xF7	; 247
    2d40:	b6 e0       	ldi	r27, 0x06	; 6
    2d42:	96 2f       	mov	r25, r22
    2d44:	fb 01       	movw	r30, r22
    2d46:	8e 2f       	mov	r24, r30
    2d48:	89 1b       	sub	r24, r25
    2d4a:	84 17       	cp	r24, r20
    2d4c:	20 f0       	brcs	.+8      	; 0x2d56 <twi_readFrom+0x86>
    2d4e:	84 2f       	mov	r24, r20
    2d50:	08 95       	ret
    2d52:	85 ee       	ldi	r24, 0xE5	; 229
    2d54:	e8 cf       	rjmp	.-48     	; 0x2d26 <twi_readFrom+0x56>
    2d56:	8d 91       	ld	r24, X+
    2d58:	81 93       	st	Z+, r24
    2d5a:	f5 cf       	rjmp	.-22     	; 0x2d46 <twi_readFrom+0x76>
    2d5c:	40 e0       	ldi	r20, 0x00	; 0
    2d5e:	f7 cf       	rjmp	.-18     	; 0x2d4e <twi_readFrom+0x7e>

00002d60 <twi_writeTo>:
twi_writeTo():
    2d60:	0f 93       	push	r16
    2d62:	41 32       	cpi	r20, 0x21	; 33
    2d64:	08 f0       	brcs	.+2      	; 0x2d68 <twi_writeTo+0x8>
    2d66:	4b c0       	rjmp	.+150    	; 0x2dfe <twi_writeTo+0x9e>
    2d68:	90 91 1e 07 	lds	r25, 0x071E	; 0x80071e <twi_state>
    2d6c:	91 11       	cpse	r25, r1
    2d6e:	fc cf       	rjmp	.-8      	; 0x2d68 <twi_writeTo+0x8>
    2d70:	92 e0       	ldi	r25, 0x02	; 2
    2d72:	90 93 1e 07 	sts	0x071E, r25	; 0x80071e <twi_state>
    2d76:	00 93 1c 07 	sts	0x071C, r16	; 0x80071c <twi_sendStop>
    2d7a:	9f ef       	ldi	r25, 0xFF	; 255
    2d7c:	90 93 b1 06 	sts	0x06B1, r25	; 0x8006b1 <twi_error>
    2d80:	10 92 f6 06 	sts	0x06F6, r1	; 0x8006f6 <twi_masterBufferIndex>
    2d84:	40 93 f5 06 	sts	0x06F5, r20	; 0x8006f5 <twi_masterBufferLength>
    2d88:	36 2f       	mov	r19, r22
    2d8a:	a7 ef       	ldi	r26, 0xF7	; 247
    2d8c:	b6 e0       	ldi	r27, 0x06	; 6
    2d8e:	fb 01       	movw	r30, r22
    2d90:	9e 2f       	mov	r25, r30
    2d92:	93 1b       	sub	r25, r19
    2d94:	94 17       	cp	r25, r20
    2d96:	70 f1       	brcs	.+92     	; 0x2df4 <twi_writeTo+0x94>
    2d98:	10 92 1d 07 	sts	0x071D, r1	; 0x80071d <twi_slarw>
    2d9c:	90 91 1d 07 	lds	r25, 0x071D	; 0x80071d <twi_slarw>
    2da0:	88 0f       	add	r24, r24
    2da2:	89 2b       	or	r24, r25
    2da4:	80 93 1d 07 	sts	0x071D, r24	; 0x80071d <twi_slarw>
    2da8:	80 91 1b 07 	lds	r24, 0x071B	; 0x80071b <twi_inRepStart>
    2dac:	81 30       	cpi	r24, 0x01	; 1
    2dae:	29 f5       	brne	.+74     	; 0x2dfa <twi_writeTo+0x9a>
    2db0:	10 92 1b 07 	sts	0x071B, r1	; 0x80071b <twi_inRepStart>
    2db4:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <twi_slarw>
    2db8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2dbc:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2dc0:	83 fd       	sbrc	r24, 3
    2dc2:	f8 cf       	rjmp	.-16     	; 0x2db4 <twi_writeTo+0x54>
    2dc4:	85 ec       	ldi	r24, 0xC5	; 197
    2dc6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2dca:	22 23       	and	r18, r18
    2dcc:	21 f0       	breq	.+8      	; 0x2dd6 <twi_writeTo+0x76>
    2dce:	80 91 1e 07 	lds	r24, 0x071E	; 0x80071e <twi_state>
    2dd2:	82 30       	cpi	r24, 0x02	; 2
    2dd4:	d1 f3       	breq	.-12     	; 0x2dca <twi_writeTo+0x6a>
    2dd6:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <twi_error>
    2dda:	8f 3f       	cpi	r24, 0xFF	; 255
    2ddc:	91 f0       	breq	.+36     	; 0x2e02 <twi_writeTo+0xa2>
    2dde:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <twi_error>
    2de2:	80 32       	cpi	r24, 0x20	; 32
    2de4:	81 f0       	breq	.+32     	; 0x2e06 <twi_writeTo+0xa6>
    2de6:	80 91 b1 06 	lds	r24, 0x06B1	; 0x8006b1 <twi_error>
    2dea:	80 33       	cpi	r24, 0x30	; 48
    2dec:	71 f0       	breq	.+28     	; 0x2e0a <twi_writeTo+0xaa>
    2dee:	84 e0       	ldi	r24, 0x04	; 4
    2df0:	0f 91       	pop	r16
    2df2:	08 95       	ret
    2df4:	91 91       	ld	r25, Z+
    2df6:	9d 93       	st	X+, r25
    2df8:	cb cf       	rjmp	.-106    	; 0x2d90 <twi_writeTo+0x30>
    2dfa:	85 ee       	ldi	r24, 0xE5	; 229
    2dfc:	e4 cf       	rjmp	.-56     	; 0x2dc6 <twi_writeTo+0x66>
    2dfe:	81 e0       	ldi	r24, 0x01	; 1
    2e00:	f7 cf       	rjmp	.-18     	; 0x2df0 <twi_writeTo+0x90>
    2e02:	80 e0       	ldi	r24, 0x00	; 0
    2e04:	f5 cf       	rjmp	.-22     	; 0x2df0 <twi_writeTo+0x90>
    2e06:	82 e0       	ldi	r24, 0x02	; 2
    2e08:	f3 cf       	rjmp	.-26     	; 0x2df0 <twi_writeTo+0x90>
    2e0a:	83 e0       	ldi	r24, 0x03	; 3
    2e0c:	f1 cf       	rjmp	.-30     	; 0x2df0 <twi_writeTo+0x90>

00002e0e <twi_transmit>:
twi_transmit():
    2e0e:	20 91 d3 06 	lds	r18, 0x06D3	; 0x8006d3 <twi_txBufferLength>
    2e12:	26 0f       	add	r18, r22
    2e14:	33 27       	eor	r19, r19
    2e16:	33 1f       	adc	r19, r19
    2e18:	21 32       	cpi	r18, 0x21	; 33
    2e1a:	31 05       	cpc	r19, r1
    2e1c:	ec f4       	brge	.+58     	; 0x2e58 <twi_transmit+0x4a>
    2e1e:	20 91 1e 07 	lds	r18, 0x071E	; 0x80071e <twi_state>
    2e22:	fc 01       	movw	r30, r24
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	80 e0       	ldi	r24, 0x00	; 0
    2e28:	24 30       	cpi	r18, 0x04	; 4
    2e2a:	69 f0       	breq	.+26     	; 0x2e46 <twi_transmit+0x38>
    2e2c:	82 e0       	ldi	r24, 0x02	; 2
    2e2e:	08 95       	ret
    2e30:	a0 91 d3 06 	lds	r26, 0x06D3	; 0x8006d3 <twi_txBufferLength>
    2e34:	21 91       	ld	r18, Z+
    2e36:	ac 01       	movw	r20, r24
    2e38:	4b 52       	subi	r20, 0x2B	; 43
    2e3a:	59 4f       	sbci	r21, 0xF9	; 249
    2e3c:	a4 0f       	add	r26, r20
    2e3e:	b5 2f       	mov	r27, r21
    2e40:	b1 1d       	adc	r27, r1
    2e42:	2c 93       	st	X, r18
    2e44:	01 96       	adiw	r24, 0x01	; 1
    2e46:	86 17       	cp	r24, r22
    2e48:	98 f3       	brcs	.-26     	; 0x2e30 <twi_transmit+0x22>
    2e4a:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <twi_txBufferLength>
    2e4e:	68 0f       	add	r22, r24
    2e50:	60 93 d3 06 	sts	0x06D3, r22	; 0x8006d3 <twi_txBufferLength>
    2e54:	80 e0       	ldi	r24, 0x00	; 0
    2e56:	08 95       	ret
    2e58:	81 e0       	ldi	r24, 0x01	; 1
    2e5a:	08 95       	ret

00002e5c <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    2e5c:	90 93 18 07 	sts	0x0718, r25	; 0x800718 <twi_onSlaveReceive+0x1>
    2e60:	80 93 17 07 	sts	0x0717, r24	; 0x800717 <twi_onSlaveReceive>
    2e64:	08 95       	ret

00002e66 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    2e66:	90 93 1a 07 	sts	0x071A, r25	; 0x80071a <twi_onSlaveTransmit+0x1>
    2e6a:	80 93 19 07 	sts	0x0719, r24	; 0x800719 <twi_onSlaveTransmit>
    2e6e:	08 95       	ret

00002e70 <twi_stop>:
twi_stop():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2e70:	85 ed       	ldi	r24, 0xD5	; 213
    2e72:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2e76:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    2e7a:	84 fd       	sbrc	r24, 4
    2e7c:	fc cf       	rjmp	.-8      	; 0x2e76 <twi_stop+0x6>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2e7e:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
    2e82:	08 95       	ret

00002e84 <twi_releaseBus>:
twi_releaseBus():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2e84:	85 ec       	ldi	r24, 0xC5	; 197
    2e86:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    2e8a:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:397
}
    2e8e:	08 95       	ret

00002e90 <__vector_26>:
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
    2e90:	1f 92       	push	r1
    2e92:	0f 92       	push	r0
    2e94:	0f b6       	in	r0, 0x3f	; 63
    2e96:	0f 92       	push	r0
    2e98:	11 24       	eor	r1, r1
    2e9a:	0b b6       	in	r0, 0x3b	; 59
    2e9c:	0f 92       	push	r0
    2e9e:	2f 93       	push	r18
    2ea0:	3f 93       	push	r19
    2ea2:	4f 93       	push	r20
    2ea4:	5f 93       	push	r21
    2ea6:	6f 93       	push	r22
    2ea8:	7f 93       	push	r23
    2eaa:	8f 93       	push	r24
    2eac:	9f 93       	push	r25
    2eae:	af 93       	push	r26
    2eb0:	bf 93       	push	r27
    2eb2:	ef 93       	push	r30
    2eb4:	ff 93       	push	r31
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    2eb6:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    2eba:	88 7f       	andi	r24, 0xF8	; 248
    2ebc:	80 36       	cpi	r24, 0x60	; 96
    2ebe:	09 f4       	brne	.+2      	; 0x2ec2 <__vector_26+0x32>
    2ec0:	4e c0       	rjmp	.+156    	; 0x2f5e <__vector_26+0xce>
    2ec2:	08 f0       	brcs	.+2      	; 0x2ec6 <__vector_26+0x36>
    2ec4:	41 c0       	rjmp	.+130    	; 0x2f48 <__vector_26+0xb8>
    2ec6:	88 32       	cpi	r24, 0x28	; 40
    2ec8:	09 f4       	brne	.+2      	; 0x2ecc <__vector_26+0x3c>
    2eca:	aa c0       	rjmp	.+340    	; 0x3020 <__vector_26+0x190>
    2ecc:	28 f5       	brcc	.+74     	; 0x2f18 <__vector_26+0x88>
    2ece:	80 31       	cpi	r24, 0x10	; 16
    2ed0:	09 f4       	brne	.+2      	; 0x2ed4 <__vector_26+0x44>
    2ed2:	9e c0       	rjmp	.+316    	; 0x3010 <__vector_26+0x180>
    2ed4:	c8 f4       	brcc	.+50     	; 0x2f08 <__vector_26+0x78>
    2ed6:	88 23       	and	r24, r24
    2ed8:	09 f4       	brne	.+2      	; 0x2edc <__vector_26+0x4c>
    2eda:	fb c0       	rjmp	.+502    	; 0x30d2 <__vector_26+0x242>
    2edc:	88 30       	cpi	r24, 0x08	; 8
    2ede:	09 f4       	brne	.+2      	; 0x2ee2 <__vector_26+0x52>
    2ee0:	97 c0       	rjmp	.+302    	; 0x3010 <__vector_26+0x180>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2ee2:	ff 91       	pop	r31
    2ee4:	ef 91       	pop	r30
    2ee6:	bf 91       	pop	r27
    2ee8:	af 91       	pop	r26
    2eea:	9f 91       	pop	r25
    2eec:	8f 91       	pop	r24
    2eee:	7f 91       	pop	r23
    2ef0:	6f 91       	pop	r22
    2ef2:	5f 91       	pop	r21
    2ef4:	4f 91       	pop	r20
    2ef6:	3f 91       	pop	r19
    2ef8:	2f 91       	pop	r18
    2efa:	0f 90       	pop	r0
    2efc:	0b be       	out	0x3b, r0	; 59
    2efe:	0f 90       	pop	r0
    2f00:	0f be       	out	0x3f, r0	; 63
    2f02:	0f 90       	pop	r0
    2f04:	1f 90       	pop	r1
    2f06:	18 95       	reti
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f08:	88 31       	cpi	r24, 0x18	; 24
    2f0a:	09 f4       	brne	.+2      	; 0x2f0e <__vector_26+0x7e>
    2f0c:	89 c0       	rjmp	.+274    	; 0x3020 <__vector_26+0x190>
    2f0e:	80 32       	cpi	r24, 0x20	; 32
    2f10:	41 f7       	brne	.-48     	; 0x2ee2 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    2f12:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <twi_error>
    2f16:	15 c0       	rjmp	.+42     	; 0x2f42 <__vector_26+0xb2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f18:	80 34       	cpi	r24, 0x40	; 64
    2f1a:	09 f4       	brne	.+2      	; 0x2f1e <__vector_26+0x8e>
    2f1c:	9e c0       	rjmp	.+316    	; 0x305a <__vector_26+0x1ca>
    2f1e:	48 f4       	brcc	.+18     	; 0x2f32 <__vector_26+0xa2>
    2f20:	80 33       	cpi	r24, 0x30	; 48
    2f22:	b9 f3       	breq	.-18     	; 0x2f12 <__vector_26+0x82>
    2f24:	88 33       	cpi	r24, 0x38	; 56
    2f26:	e9 f6       	brne	.-70     	; 0x2ee2 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    2f28:	80 93 b1 06 	sts	0x06B1, r24	; 0x8006b1 <twi_error>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
    2f2c:	0e 94 42 17 	call	0x2e84	; 0x2e84 <twi_releaseBus>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:442
      break;
    2f30:	d8 cf       	rjmp	.-80     	; 0x2ee2 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f32:	80 35       	cpi	r24, 0x50	; 80
    2f34:	09 f4       	brne	.+2      	; 0x2f38 <__vector_26+0xa8>
    2f36:	85 c0       	rjmp	.+266    	; 0x3042 <__vector_26+0x1b2>
    2f38:	88 35       	cpi	r24, 0x58	; 88
    2f3a:	09 f4       	brne	.+2      	; 0x2f3e <__vector_26+0xae>
    2f3c:	96 c0       	rjmp	.+300    	; 0x306a <__vector_26+0x1da>
    2f3e:	88 34       	cpi	r24, 0x48	; 72
    2f40:	81 f6       	brne	.-96     	; 0x2ee2 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    2f42:	0e 94 38 17 	call	0x2e70	; 0x2e70 <twi_stop>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
    2f46:	cd cf       	rjmp	.-102    	; 0x2ee2 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f48:	88 39       	cpi	r24, 0x98	; 152
    2f4a:	09 f4       	brne	.+2      	; 0x2f4e <__vector_26+0xbe>
    2f4c:	8c c0       	rjmp	.+280    	; 0x3066 <__vector_26+0x1d6>
    2f4e:	38 f5       	brcc	.+78     	; 0x2f9e <__vector_26+0x10e>
    2f50:	88 37       	cpi	r24, 0x78	; 120
    2f52:	29 f0       	breq	.+10     	; 0x2f5e <__vector_26+0xce>
    2f54:	50 f4       	brcc	.+20     	; 0x2f6a <__vector_26+0xda>
    2f56:	88 36       	cpi	r24, 0x68	; 104
    2f58:	11 f0       	breq	.+4      	; 0x2f5e <__vector_26+0xce>
    2f5a:	80 37       	cpi	r24, 0x70	; 112
    2f5c:	11 f6       	brne	.-124    	; 0x2ee2 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    2f5e:	83 e0       	ldi	r24, 0x03	; 3
    2f60:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    2f64:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <twi_rxBufferIndex>
    2f68:	57 c0       	rjmp	.+174    	; 0x3018 <__vector_26+0x188>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f6a:	88 38       	cpi	r24, 0x88	; 136
    2f6c:	09 f4       	brne	.+2      	; 0x2f70 <__vector_26+0xe0>
    2f6e:	7b c0       	rjmp	.+246    	; 0x3066 <__vector_26+0x1d6>
    2f70:	80 39       	cpi	r24, 0x90	; 144
    2f72:	19 f0       	breq	.+6      	; 0x2f7a <__vector_26+0xea>
    2f74:	80 38       	cpi	r24, 0x80	; 128
    2f76:	09 f0       	breq	.+2      	; 0x2f7a <__vector_26+0xea>
    2f78:	b4 cf       	rjmp	.-152    	; 0x2ee2 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2f7a:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <twi_rxBufferIndex>
    2f7e:	80 32       	cpi	r24, 0x20	; 32
    2f80:	08 f0       	brcs	.+2      	; 0x2f84 <__vector_26+0xf4>
    2f82:	71 c0       	rjmp	.+226    	; 0x3066 <__vector_26+0x1d6>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2f84:	e0 91 b2 06 	lds	r30, 0x06B2	; 0x8006b2 <twi_rxBufferIndex>
    2f88:	81 e0       	ldi	r24, 0x01	; 1
    2f8a:	8e 0f       	add	r24, r30
    2f8c:	80 93 b2 06 	sts	0x06B2, r24	; 0x8006b2 <twi_rxBufferIndex>
    2f90:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2f94:	f0 e0       	ldi	r31, 0x00	; 0
    2f96:	ed 54       	subi	r30, 0x4D	; 77
    2f98:	f9 4f       	sbci	r31, 0xF9	; 249
    2f9a:	80 83       	st	Z, r24
    2f9c:	3d c0       	rjmp	.+122    	; 0x3018 <__vector_26+0x188>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2f9e:	80 3b       	cpi	r24, 0xB0	; 176
    2fa0:	39 f0       	breq	.+14     	; 0x2fb0 <__vector_26+0x120>
    2fa2:	e0 f4       	brcc	.+56     	; 0x2fdc <__vector_26+0x14c>
    2fa4:	80 3a       	cpi	r24, 0xA0	; 160
    2fa6:	09 f4       	brne	.+2      	; 0x2faa <__vector_26+0x11a>
    2fa8:	79 c0       	rjmp	.+242    	; 0x309c <__vector_26+0x20c>
    2faa:	88 3a       	cpi	r24, 0xA8	; 168
    2fac:	09 f0       	breq	.+2      	; 0x2fb0 <__vector_26+0x120>
    2fae:	99 cf       	rjmp	.-206    	; 0x2ee2 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2fb0:	84 e0       	ldi	r24, 0x04	; 4
    2fb2:	80 93 1e 07 	sts	0x071E, r24	; 0x80071e <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2fb6:	10 92 d4 06 	sts	0x06D4, r1	; 0x8006d4 <twi_txBufferIndex>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    2fba:	10 92 d3 06 	sts	0x06D3, r1	; 0x8006d3 <twi_txBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2fbe:	e0 91 19 07 	lds	r30, 0x0719	; 0x800719 <twi_onSlaveTransmit>
    2fc2:	f0 91 1a 07 	lds	r31, 0x071A	; 0x80071a <twi_onSlaveTransmit+0x1>
    2fc6:	09 95       	icall
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    2fc8:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <twi_txBufferLength>
    2fcc:	81 11       	cpse	r24, r1
    2fce:	0f c0       	rjmp	.+30     	; 0x2fee <__vector_26+0x15e>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    2fd0:	81 e0       	ldi	r24, 0x01	; 1
    2fd2:	80 93 d3 06 	sts	0x06D3, r24	; 0x8006d3 <twi_txBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    2fd6:	10 92 d5 06 	sts	0x06D5, r1	; 0x8006d5 <twi_txBuffer>
    2fda:	09 c0       	rjmp	.+18     	; 0x2fee <__vector_26+0x15e>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2fdc:	80 3c       	cpi	r24, 0xC0	; 192
    2fde:	09 f4       	brne	.+2      	; 0x2fe2 <__vector_26+0x152>
    2fe0:	76 c0       	rjmp	.+236    	; 0x30ce <__vector_26+0x23e>
    2fe2:	88 3c       	cpi	r24, 0xC8	; 200
    2fe4:	09 f4       	brne	.+2      	; 0x2fe8 <__vector_26+0x158>
    2fe6:	73 c0       	rjmp	.+230    	; 0x30ce <__vector_26+0x23e>
    2fe8:	88 3b       	cpi	r24, 0xB8	; 184
    2fea:	09 f0       	breq	.+2      	; 0x2fee <__vector_26+0x15e>
    2fec:	7a cf       	rjmp	.-268    	; 0x2ee2 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2fee:	e0 91 d4 06 	lds	r30, 0x06D4	; 0x8006d4 <twi_txBufferIndex>
    2ff2:	81 e0       	ldi	r24, 0x01	; 1
    2ff4:	8e 0f       	add	r24, r30
    2ff6:	80 93 d4 06 	sts	0x06D4, r24	; 0x8006d4 <twi_txBufferIndex>
    2ffa:	f0 e0       	ldi	r31, 0x00	; 0
    2ffc:	eb 52       	subi	r30, 0x2B	; 43
    2ffe:	f9 4f       	sbci	r31, 0xF9	; 249
    3000:	80 81       	ld	r24, Z
    3002:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3006:	90 91 d4 06 	lds	r25, 0x06D4	; 0x8006d4 <twi_txBufferIndex>
    300a:	80 91 d3 06 	lds	r24, 0x06D3	; 0x8006d3 <twi_txBufferLength>
    300e:	29 c0       	rjmp	.+82     	; 0x3062 <__vector_26+0x1d2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    3010:	80 91 1d 07 	lds	r24, 0x071D	; 0x80071d <twi_slarw>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    3014:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3018:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    301a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    301e:	61 cf       	rjmp	.-318    	; 0x2ee2 <__vector_26+0x52>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    3020:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <twi_masterBufferIndex>
    3024:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <twi_masterBufferLength>
    3028:	98 17       	cp	r25, r24
    302a:	58 f5       	brcc	.+86     	; 0x3082 <__vector_26+0x1f2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    302c:	e0 91 f6 06 	lds	r30, 0x06F6	; 0x8006f6 <twi_masterBufferIndex>
    3030:	81 e0       	ldi	r24, 0x01	; 1
    3032:	8e 0f       	add	r24, r30
    3034:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <twi_masterBufferIndex>
    3038:	f0 e0       	ldi	r31, 0x00	; 0
    303a:	e9 50       	subi	r30, 0x09	; 9
    303c:	f9 4f       	sbci	r31, 0xF9	; 249
    303e:	80 81       	ld	r24, Z
    3040:	e9 cf       	rjmp	.-46     	; 0x3014 <__vector_26+0x184>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    3042:	e0 91 f6 06 	lds	r30, 0x06F6	; 0x8006f6 <twi_masterBufferIndex>
    3046:	81 e0       	ldi	r24, 0x01	; 1
    3048:	8e 0f       	add	r24, r30
    304a:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <twi_masterBufferIndex>
    304e:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    3052:	f0 e0       	ldi	r31, 0x00	; 0
    3054:	e9 50       	subi	r30, 0x09	; 9
    3056:	f9 4f       	sbci	r31, 0xF9	; 249
    3058:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    305a:	90 91 f6 06 	lds	r25, 0x06F6	; 0x8006f6 <twi_masterBufferIndex>
    305e:	80 91 f5 06 	lds	r24, 0x06F5	; 0x8006f5 <twi_masterBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    3062:	98 17       	cp	r25, r24
    3064:	c8 f2       	brcs	.-78     	; 0x3018 <__vector_26+0x188>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    3066:	85 e8       	ldi	r24, 0x85	; 133
    3068:	d8 cf       	rjmp	.-80     	; 0x301a <__vector_26+0x18a>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    306a:	e0 91 f6 06 	lds	r30, 0x06F6	; 0x8006f6 <twi_masterBufferIndex>
    306e:	81 e0       	ldi	r24, 0x01	; 1
    3070:	8e 0f       	add	r24, r30
    3072:	80 93 f6 06 	sts	0x06F6, r24	; 0x8006f6 <twi_masterBufferIndex>
    3076:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    307a:	f0 e0       	ldi	r31, 0x00	; 0
    307c:	e9 50       	subi	r30, 0x09	; 9
    307e:	f9 4f       	sbci	r31, 0xF9	; 249
    3080:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    3082:	80 91 1c 07 	lds	r24, 0x071C	; 0x80071c <twi_sendStop>
    3086:	81 11       	cpse	r24, r1
    3088:	5c cf       	rjmp	.-328    	; 0x2f42 <__vector_26+0xb2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    308a:	81 e0       	ldi	r24, 0x01	; 1
    308c:	80 93 1b 07 	sts	0x071B, r24	; 0x80071b <twi_inRepStart>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    3090:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    3092:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    3096:	10 92 1e 07 	sts	0x071E, r1	; 0x80071e <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:552
      break;
    309a:	23 cf       	rjmp	.-442    	; 0x2ee2 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    309c:	0e 94 42 17 	call	0x2e84	; 0x2e84 <twi_releaseBus>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    30a0:	80 91 b2 06 	lds	r24, 0x06B2	; 0x8006b2 <twi_rxBufferIndex>
    30a4:	80 32       	cpi	r24, 0x20	; 32
    30a6:	30 f4       	brcc	.+12     	; 0x30b4 <__vector_26+0x224>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    30a8:	e0 91 b2 06 	lds	r30, 0x06B2	; 0x8006b2 <twi_rxBufferIndex>
    30ac:	f0 e0       	ldi	r31, 0x00	; 0
    30ae:	ed 54       	subi	r30, 0x4D	; 77
    30b0:	f9 4f       	sbci	r31, 0xF9	; 249
    30b2:	10 82       	st	Z, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    30b4:	60 91 b2 06 	lds	r22, 0x06B2	; 0x8006b2 <twi_rxBufferIndex>
    30b8:	70 e0       	ldi	r23, 0x00	; 0
    30ba:	e0 91 17 07 	lds	r30, 0x0717	; 0x800717 <twi_onSlaveReceive>
    30be:	f0 91 18 07 	lds	r31, 0x0718	; 0x800718 <twi_onSlaveReceive+0x1>
    30c2:	83 eb       	ldi	r24, 0xB3	; 179
    30c4:	96 e0       	ldi	r25, 0x06	; 6
    30c6:	09 95       	icall
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    30c8:	10 92 b2 06 	sts	0x06B2, r1	; 0x8006b2 <twi_rxBufferIndex>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:510
      break;
    30cc:	0a cf       	rjmp	.-492    	; 0x2ee2 <__vector_26+0x52>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    30ce:	85 ec       	ldi	r24, 0xC5	; 197
    30d0:	e0 cf       	rjmp	.-64     	; 0x3092 <__vector_26+0x202>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    30d2:	10 92 b1 06 	sts	0x06B1, r1	; 0x8006b1 <twi_error>
    30d6:	35 cf       	rjmp	.-406    	; 0x2f42 <__vector_26+0xb2>

000030d8 <yield>:
__empty():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    30d8:	08 95       	ret

000030da <__vector_18>:
__vector_18():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227
  cli();
  m = timer0_millis;
  SREG = oldSREG;

  return m;
}
    30da:	1f 92       	push	r1
    30dc:	0f 92       	push	r0
    30de:	0f b6       	in	r0, 0x3f	; 63
    30e0:	0f 92       	push	r0
    30e2:	11 24       	eor	r1, r1
    30e4:	2f 93       	push	r18
    30e6:	3f 93       	push	r19
    30e8:	8f 93       	push	r24
    30ea:	9f 93       	push	r25
    30ec:	af 93       	push	r26
    30ee:	bf 93       	push	r27
    30f0:	80 91 24 07 	lds	r24, 0x0724	; 0x800724 <timer0_millis>
    30f4:	90 91 25 07 	lds	r25, 0x0725	; 0x800725 <timer0_millis+0x1>
    30f8:	a0 91 26 07 	lds	r26, 0x0726	; 0x800726 <timer0_millis+0x2>
    30fc:	b0 91 27 07 	lds	r27, 0x0727	; 0x800727 <timer0_millis+0x3>
    3100:	30 91 23 07 	lds	r19, 0x0723	; 0x800723 <timer0_fract>
    3104:	23 e0       	ldi	r18, 0x03	; 3
    3106:	23 0f       	add	r18, r19
    3108:	2d 37       	cpi	r18, 0x7D	; 125
    310a:	68 f1       	brcs	.+90     	; 0x3166 <__vector_18+0x8c>
    310c:	26 e8       	ldi	r18, 0x86	; 134
    310e:	23 0f       	add	r18, r19
    3110:	02 96       	adiw	r24, 0x02	; 2
    3112:	a1 1d       	adc	r26, r1
    3114:	b1 1d       	adc	r27, r1
    3116:	20 93 23 07 	sts	0x0723, r18	; 0x800723 <timer0_fract>
    311a:	80 93 24 07 	sts	0x0724, r24	; 0x800724 <timer0_millis>
    311e:	90 93 25 07 	sts	0x0725, r25	; 0x800725 <timer0_millis+0x1>
    3122:	a0 93 26 07 	sts	0x0726, r26	; 0x800726 <timer0_millis+0x2>
    3126:	b0 93 27 07 	sts	0x0727, r27	; 0x800727 <timer0_millis+0x3>
    312a:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <timer0_overflow_count>
    312e:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <timer0_overflow_count+0x1>
    3132:	a0 91 21 07 	lds	r26, 0x0721	; 0x800721 <timer0_overflow_count+0x2>
    3136:	b0 91 22 07 	lds	r27, 0x0722	; 0x800722 <timer0_overflow_count+0x3>
    313a:	01 96       	adiw	r24, 0x01	; 1
    313c:	a1 1d       	adc	r26, r1
    313e:	b1 1d       	adc	r27, r1
    3140:	80 93 1f 07 	sts	0x071F, r24	; 0x80071f <timer0_overflow_count>
    3144:	90 93 20 07 	sts	0x0720, r25	; 0x800720 <timer0_overflow_count+0x1>
    3148:	a0 93 21 07 	sts	0x0721, r26	; 0x800721 <timer0_overflow_count+0x2>
    314c:	b0 93 22 07 	sts	0x0722, r27	; 0x800722 <timer0_overflow_count+0x3>
    3150:	bf 91       	pop	r27
    3152:	af 91       	pop	r26
    3154:	9f 91       	pop	r25
    3156:	8f 91       	pop	r24
    3158:	3f 91       	pop	r19
    315a:	2f 91       	pop	r18
    315c:	0f 90       	pop	r0
    315e:	0f be       	out	0x3f, r0	; 63
    3160:	0f 90       	pop	r0
    3162:	1f 90       	pop	r1
    3164:	18 95       	reti
    3166:	01 96       	adiw	r24, 0x01	; 1
    3168:	a1 1d       	adc	r26, r1
    316a:	b1 1d       	adc	r27, r1
    316c:	d4 cf       	rjmp	.-88     	; 0x3116 <__vector_18+0x3c>

0000316e <micros>:
micros():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    316e:	3f b7       	in	r19, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    3170:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    3172:	80 91 1f 07 	lds	r24, 0x071F	; 0x80071f <timer0_overflow_count>
    3176:	90 91 20 07 	lds	r25, 0x0720	; 0x800720 <timer0_overflow_count+0x1>
    317a:	a0 91 21 07 	lds	r26, 0x0721	; 0x800721 <timer0_overflow_count+0x2>
    317e:	b0 91 22 07 	lds	r27, 0x0722	; 0x800722 <timer0_overflow_count+0x3>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    3182:	26 b5       	in	r18, 0x26	; 38
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    3184:	a8 9b       	sbis	0x15, 0	; 21
    3186:	05 c0       	rjmp	.+10     	; 0x3192 <micros+0x24>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    3188:	2f 3f       	cpi	r18, 0xFF	; 255
    318a:	19 f0       	breq	.+6      	; 0x3192 <micros+0x24>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    318c:	01 96       	adiw	r24, 0x01	; 1
    318e:	a1 1d       	adc	r26, r1
    3190:	b1 1d       	adc	r27, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    3192:	3f bf       	out	0x3f, r19	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    3194:	ba 2f       	mov	r27, r26
    3196:	a9 2f       	mov	r26, r25
    3198:	98 2f       	mov	r25, r24
    319a:	88 27       	eor	r24, r24
    319c:	bc 01       	movw	r22, r24
    319e:	cd 01       	movw	r24, r26
    31a0:	62 0f       	add	r22, r18
    31a2:	71 1d       	adc	r23, r1
    31a4:	81 1d       	adc	r24, r1
    31a6:	91 1d       	adc	r25, r1
    31a8:	42 e0       	ldi	r20, 0x02	; 2
    31aa:	66 0f       	add	r22, r22
    31ac:	77 1f       	adc	r23, r23
    31ae:	88 1f       	adc	r24, r24
    31b0:	99 1f       	adc	r25, r25
    31b2:	4a 95       	dec	r20
    31b4:	d1 f7       	brne	.-12     	; 0x31aa <micros+0x3c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    31b6:	08 95       	ret

000031b8 <delay>:
delay():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    31b8:	8f 92       	push	r8
    31ba:	9f 92       	push	r9
    31bc:	af 92       	push	r10
    31be:	bf 92       	push	r11
    31c0:	cf 92       	push	r12
    31c2:	df 92       	push	r13
    31c4:	ef 92       	push	r14
    31c6:	ff 92       	push	r15
    31c8:	6b 01       	movw	r12, r22
    31ca:	7c 01       	movw	r14, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    31cc:	0e 94 b7 18 	call	0x316e	; 0x316e <micros>
    31d0:	4b 01       	movw	r8, r22
    31d2:	5c 01       	movw	r10, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    31d4:	c1 14       	cp	r12, r1
    31d6:	d1 04       	cpc	r13, r1
    31d8:	e1 04       	cpc	r14, r1
    31da:	f1 04       	cpc	r15, r1
    31dc:	e9 f0       	breq	.+58     	; 0x3218 <delay+0x60>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    31de:	0e 94 6c 18 	call	0x30d8	; 0x30d8 <yield>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    31e2:	0e 94 b7 18 	call	0x316e	; 0x316e <micros>
    31e6:	68 19       	sub	r22, r8
    31e8:	79 09       	sbc	r23, r9
    31ea:	8a 09       	sbc	r24, r10
    31ec:	9b 09       	sbc	r25, r11
    31ee:	68 3e       	cpi	r22, 0xE8	; 232
    31f0:	73 40       	sbci	r23, 0x03	; 3
    31f2:	81 05       	cpc	r24, r1
    31f4:	91 05       	cpc	r25, r1
    31f6:	70 f3       	brcs	.-36     	; 0x31d4 <delay+0x1c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    31f8:	21 e0       	ldi	r18, 0x01	; 1
    31fa:	c2 1a       	sub	r12, r18
    31fc:	d1 08       	sbc	r13, r1
    31fe:	e1 08       	sbc	r14, r1
    3200:	f1 08       	sbc	r15, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    3202:	88 ee       	ldi	r24, 0xE8	; 232
    3204:	88 0e       	add	r8, r24
    3206:	83 e0       	ldi	r24, 0x03	; 3
    3208:	98 1e       	adc	r9, r24
    320a:	a1 1c       	adc	r10, r1
    320c:	b1 1c       	adc	r11, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    320e:	c1 14       	cp	r12, r1
    3210:	d1 04       	cpc	r13, r1
    3212:	e1 04       	cpc	r14, r1
    3214:	f1 04       	cpc	r15, r1
    3216:	29 f7       	brne	.-54     	; 0x31e2 <delay+0x2a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    3218:	ff 90       	pop	r15
    321a:	ef 90       	pop	r14
    321c:	df 90       	pop	r13
    321e:	cf 90       	pop	r12
    3220:	bf 90       	pop	r11
    3222:	af 90       	pop	r10
    3224:	9f 90       	pop	r9
    3226:	8f 90       	pop	r8
    3228:	08 95       	ret

0000322a <delayMicroseconds>:
delayMicroseconds():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    322a:	82 30       	cpi	r24, 0x02	; 2
    322c:	91 05       	cpc	r25, r1
    322e:	38 f0       	brcs	.+14     	; 0x323e <delayMicroseconds+0x14>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    3230:	88 0f       	add	r24, r24
    3232:	99 1f       	adc	r25, r25
    3234:	88 0f       	add	r24, r24
    3236:	99 1f       	adc	r25, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    3238:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    323a:	01 97       	sbiw	r24, 0x01	; 1
    323c:	f1 f7       	brne	.-4      	; 0x323a <delayMicroseconds+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    323e:	08 95       	ret

00003240 <init>:
init():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    3240:	78 94       	sei
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    3242:	84 b5       	in	r24, 0x24	; 36
    3244:	83 60       	ori	r24, 0x03	; 3
    3246:	84 bd       	out	0x24, r24	; 36
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    3248:	85 b5       	in	r24, 0x25	; 37
    324a:	83 60       	ori	r24, 0x03	; 3
    324c:	85 bd       	out	0x25, r24	; 37
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    324e:	ee e6       	ldi	r30, 0x6E	; 110
    3250:	f0 e0       	ldi	r31, 0x00	; 0
    3252:	80 81       	ld	r24, Z
    3254:	81 60       	ori	r24, 0x01	; 1
    3256:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    3258:	e1 e8       	ldi	r30, 0x81	; 129
    325a:	f0 e0       	ldi	r31, 0x00	; 0
    325c:	82 e0       	ldi	r24, 0x02	; 2
    325e:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    3260:	80 81       	ld	r24, Z
    3262:	81 60       	ori	r24, 0x01	; 1
    3264:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    3266:	e0 e8       	ldi	r30, 0x80	; 128
    3268:	f0 e0       	ldi	r31, 0x00	; 0
    326a:	80 81       	ld	r24, Z
    326c:	81 60       	ori	r24, 0x01	; 1
    326e:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    3270:	e1 eb       	ldi	r30, 0xB1	; 177
    3272:	f0 e0       	ldi	r31, 0x00	; 0
    3274:	80 81       	ld	r24, Z
    3276:	84 60       	ori	r24, 0x04	; 4
    3278:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    327a:	e0 eb       	ldi	r30, 0xB0	; 176
    327c:	f0 e0       	ldi	r31, 0x00	; 0
    327e:	80 81       	ld	r24, Z
    3280:	81 60       	ori	r24, 0x01	; 1
    3282:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    3284:	e1 e9       	ldi	r30, 0x91	; 145
    3286:	f0 e0       	ldi	r31, 0x00	; 0
    3288:	80 81       	ld	r24, Z
    328a:	83 60       	ori	r24, 0x03	; 3
    328c:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    328e:	e0 e9       	ldi	r30, 0x90	; 144
    3290:	f0 e0       	ldi	r31, 0x00	; 0
    3292:	80 81       	ld	r24, Z
    3294:	81 60       	ori	r24, 0x01	; 1
    3296:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    3298:	87 e8       	ldi	r24, 0x87	; 135
    329a:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    329e:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    32a2:	08 95       	ret

000032a4 <turnOffPWM>:
turnOffPWM():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    32a4:	82 50       	subi	r24, 0x02	; 2
    32a6:	8a 30       	cpi	r24, 0x0A	; 10
    32a8:	88 f5       	brcc	.+98     	; 0x330c <turnOffPWM+0x68>
    32aa:	e8 2f       	mov	r30, r24
    32ac:	f0 e0       	ldi	r31, 0x00	; 0
    32ae:	e5 5a       	subi	r30, 0xA5	; 165
    32b0:	f6 4e       	sbci	r31, 0xE6	; 230
    32b2:	0c 94 26 21 	jmp	0x424c	; 0x424c <__tablejump2__>
    32b6:	83 19       	sub	r24, r3
    32b8:	87 19       	sub	r24, r7
    32ba:	65 19       	sub	r22, r5
    32bc:	6b 19       	sub	r22, r11
    32be:	86 19       	sub	r24, r6
    32c0:	86 19       	sub	r24, r6
    32c2:	6f 19       	sub	r22, r15
    32c4:	75 19       	sub	r23, r5
    32c6:	79 19       	sub	r23, r9
    32c8:	7f 19       	sub	r23, r15
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    32ca:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    32ce:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    32d0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    32d4:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    32d6:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    32da:	8f 7d       	andi	r24, 0xDF	; 223
    32dc:	f9 cf       	rjmp	.-14     	; 0x32d0 <turnOffPWM+0x2c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    32de:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    32e2:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    32e4:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    32e8:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    32ea:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    32ee:	8f 7d       	andi	r24, 0xDF	; 223
    32f0:	f9 cf       	rjmp	.-14     	; 0x32e4 <turnOffPWM+0x40>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    32f2:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    32f6:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    32f8:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    32fc:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    32fe:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    3302:	8f 7d       	andi	r24, 0xDF	; 223
    3304:	f9 cf       	rjmp	.-14     	; 0x32f8 <turnOffPWM+0x54>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    3306:	84 b5       	in	r24, 0x24	; 36
    3308:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    330a:	84 bd       	out	0x24, r24	; 36
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    330c:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    330e:	84 b5       	in	r24, 0x24	; 36
    3310:	8f 7d       	andi	r24, 0xDF	; 223
    3312:	fb cf       	rjmp	.-10     	; 0x330a <turnOffPWM+0x66>

00003314 <pinMode>:
pinMode():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    3314:	cf 93       	push	r28
    3316:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    3318:	90 e0       	ldi	r25, 0x00	; 0
    331a:	fc 01       	movw	r30, r24
    331c:	e4 5d       	subi	r30, 0xD4	; 212
    331e:	fd 4f       	sbci	r31, 0xFD	; 253
    3320:	24 91       	lpm	r18, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    3322:	84 5b       	subi	r24, 0xB4	; 180
    3324:	9d 4f       	sbci	r25, 0xFD	; 253
    3326:	fc 01       	movw	r30, r24
    3328:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    332a:	88 23       	and	r24, r24
    332c:	c9 f0       	breq	.+50     	; 0x3360 <pinMode+0x4c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    332e:	90 e0       	ldi	r25, 0x00	; 0
    3330:	88 0f       	add	r24, r24
    3332:	99 1f       	adc	r25, r25
    3334:	fc 01       	movw	r30, r24
    3336:	e0 58       	subi	r30, 0x80	; 128
    3338:	fd 4f       	sbci	r31, 0xFD	; 253
    333a:	a5 91       	lpm	r26, Z+
    333c:	b4 91       	lpm	r27, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    333e:	fc 01       	movw	r30, r24
    3340:	ea 58       	subi	r30, 0x8A	; 138
    3342:	fd 4f       	sbci	r31, 0xFD	; 253
    3344:	c5 91       	lpm	r28, Z+
    3346:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    3348:	61 11       	cpse	r22, r1
    334a:	0d c0       	rjmp	.+26     	; 0x3366 <pinMode+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    334c:	9f b7       	in	r25, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    334e:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    3350:	8c 91       	ld	r24, X
    3352:	20 95       	com	r18
    3354:	82 23       	and	r24, r18
    3356:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    3358:	88 81       	ld	r24, Y
    335a:	28 23       	and	r18, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    335c:	28 83       	st	Y, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    335e:	9f bf       	out	0x3f, r25	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    3360:	df 91       	pop	r29
    3362:	cf 91       	pop	r28
    3364:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    3366:	62 30       	cpi	r22, 0x02	; 2
    3368:	51 f4       	brne	.+20     	; 0x337e <pinMode+0x6a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    336a:	9f b7       	in	r25, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    336c:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    336e:	3c 91       	ld	r19, X
    3370:	82 2f       	mov	r24, r18
    3372:	80 95       	com	r24
    3374:	83 23       	and	r24, r19
    3376:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    3378:	e8 81       	ld	r30, Y
    337a:	2e 2b       	or	r18, r30
    337c:	ef cf       	rjmp	.-34     	; 0x335c <pinMode+0x48>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    337e:	8f b7       	in	r24, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    3380:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    3382:	ec 91       	ld	r30, X
    3384:	2e 2b       	or	r18, r30
    3386:	2c 93       	st	X, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    3388:	8f bf       	out	0x3f, r24	; 63
    338a:	ea cf       	rjmp	.-44     	; 0x3360 <pinMode+0x4c>

0000338c <digitalWrite>:
digitalWrite():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    338c:	1f 93       	push	r17
    338e:	cf 93       	push	r28
    3390:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    3392:	28 2f       	mov	r18, r24
    3394:	30 e0       	ldi	r19, 0x00	; 0
    3396:	f9 01       	movw	r30, r18
    3398:	e4 5f       	subi	r30, 0xF4	; 244
    339a:	fd 4f       	sbci	r31, 0xFD	; 253
    339c:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    339e:	f9 01       	movw	r30, r18
    33a0:	e4 5d       	subi	r30, 0xD4	; 212
    33a2:	fd 4f       	sbci	r31, 0xFD	; 253
    33a4:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    33a6:	f9 01       	movw	r30, r18
    33a8:	e4 5b       	subi	r30, 0xB4	; 180
    33aa:	fd 4f       	sbci	r31, 0xFD	; 253
    33ac:	c4 91       	lpm	r28, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    33ae:	cc 23       	and	r28, r28
    33b0:	a9 f0       	breq	.+42     	; 0x33dc <digitalWrite+0x50>
    33b2:	16 2f       	mov	r17, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    33b4:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    33b6:	0e 94 52 19 	call	0x32a4	; 0x32a4 <turnOffPWM>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    33ba:	ec 2f       	mov	r30, r28
    33bc:	f0 e0       	ldi	r31, 0x00	; 0
    33be:	ee 0f       	add	r30, r30
    33c0:	ff 1f       	adc	r31, r31
    33c2:	ea 58       	subi	r30, 0x8A	; 138
    33c4:	fd 4f       	sbci	r31, 0xFD	; 253
    33c6:	a5 91       	lpm	r26, Z+
    33c8:	b4 91       	lpm	r27, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    33ca:	8f b7       	in	r24, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    33cc:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    33ce:	ec 91       	ld	r30, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    33d0:	11 11       	cpse	r17, r1
    33d2:	08 c0       	rjmp	.+16     	; 0x33e4 <digitalWrite+0x58>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    33d4:	d0 95       	com	r29
    33d6:	de 23       	and	r29, r30
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    33d8:	dc 93       	st	X, r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    33da:	8f bf       	out	0x3f, r24	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    33dc:	df 91       	pop	r29
    33de:	cf 91       	pop	r28
    33e0:	1f 91       	pop	r17
    33e2:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    33e4:	de 2b       	or	r29, r30
    33e6:	f8 cf       	rjmp	.-16     	; 0x33d8 <digitalWrite+0x4c>

000033e8 <digitalRead>:
digitalRead():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    33e8:	cf 93       	push	r28
    33ea:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    33ec:	28 2f       	mov	r18, r24
    33ee:	30 e0       	ldi	r19, 0x00	; 0
    33f0:	f9 01       	movw	r30, r18
    33f2:	e4 5f       	subi	r30, 0xF4	; 244
    33f4:	fd 4f       	sbci	r31, 0xFD	; 253
    33f6:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    33f8:	f9 01       	movw	r30, r18
    33fa:	e4 5d       	subi	r30, 0xD4	; 212
    33fc:	fd 4f       	sbci	r31, 0xFD	; 253
    33fe:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    3400:	f9 01       	movw	r30, r18
    3402:	e4 5b       	subi	r30, 0xB4	; 180
    3404:	fd 4f       	sbci	r31, 0xFD	; 253
    3406:	c4 91       	lpm	r28, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    3408:	cc 23       	and	r28, r28
    340a:	a1 f0       	breq	.+40     	; 0x3434 <digitalRead+0x4c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    340c:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    340e:	0e 94 52 19 	call	0x32a4	; 0x32a4 <turnOffPWM>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    3412:	ec 2f       	mov	r30, r28
    3414:	f0 e0       	ldi	r31, 0x00	; 0
    3416:	ee 0f       	add	r30, r30
    3418:	ff 1f       	adc	r31, r31
    341a:	e4 59       	subi	r30, 0x94	; 148
    341c:	fd 4f       	sbci	r31, 0xFD	; 253
    341e:	a5 91       	lpm	r26, Z+
    3420:	b4 91       	lpm	r27, Z
    3422:	ec 91       	ld	r30, X
    3424:	ed 23       	and	r30, r29
    3426:	81 e0       	ldi	r24, 0x01	; 1
    3428:	90 e0       	ldi	r25, 0x00	; 0
    342a:	09 f4       	brne	.+2      	; 0x342e <digitalRead+0x46>
    342c:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    342e:	df 91       	pop	r29
    3430:	cf 91       	pop	r28
    3432:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    3434:	80 e0       	ldi	r24, 0x00	; 0
    3436:	90 e0       	ldi	r25, 0x00	; 0
    3438:	fa cf       	rjmp	.-12     	; 0x342e <digitalRead+0x46>

0000343a <shiftOut>:
shiftOut():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:41
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    343a:	bf 92       	push	r11
    343c:	cf 92       	push	r12
    343e:	df 92       	push	r13
    3440:	ef 92       	push	r14
    3442:	ff 92       	push	r15
    3444:	0f 93       	push	r16
    3446:	1f 93       	push	r17
    3448:	cf 93       	push	r28
    344a:	df 93       	push	r29
    344c:	c8 2e       	mov	r12, r24
    344e:	d6 2e       	mov	r13, r22
    3450:	b4 2e       	mov	r11, r20
    3452:	d0 e0       	ldi	r29, 0x00	; 0
    3454:	c0 e0       	ldi	r28, 0x00	; 0
    3456:	02 2f       	mov	r16, r18
    3458:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:48

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    345a:	87 e0       	ldi	r24, 0x07	; 7
    345c:	e8 2e       	mov	r14, r24
    345e:	f1 2c       	mov	r15, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:46
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    3460:	b8 01       	movw	r22, r16
    3462:	8c 2f       	mov	r24, r28
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:45
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
    3464:	bb 20       	and	r11, r11
    3466:	19 f0       	breq	.+6      	; 0x346e <shiftOut+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:48
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    3468:	c7 01       	movw	r24, r14
    346a:	8c 1b       	sub	r24, r28
    346c:	9d 0b       	sbc	r25, r29
    346e:	02 c0       	rjmp	.+4      	; 0x3474 <shiftOut+0x3a>
    3470:	75 95       	asr	r23
    3472:	67 95       	ror	r22
    3474:	8a 95       	dec	r24
    3476:	e2 f7       	brpl	.-8      	; 0x3470 <shiftOut+0x36>
    3478:	61 70       	andi	r22, 0x01	; 1
    347a:	8c 2d       	mov	r24, r12
    347c:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:50
      
    digitalWrite(clockPin, HIGH);
    3480:	61 e0       	ldi	r22, 0x01	; 1
    3482:	8d 2d       	mov	r24, r13
    3484:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:51
    digitalWrite(clockPin, LOW);    
    3488:	60 e0       	ldi	r22, 0x00	; 0
    348a:	8d 2d       	mov	r24, r13
    348c:	0e 94 c6 19 	call	0x338c	; 0x338c <digitalWrite>
    3490:	21 96       	adiw	r28, 0x01	; 1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:44

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    3492:	c8 30       	cpi	r28, 0x08	; 8
    3494:	d1 05       	cpc	r29, r1
    3496:	21 f7       	brne	.-56     	; 0x3460 <shiftOut+0x26>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:53
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
      
    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);    
  }
}
    3498:	df 91       	pop	r29
    349a:	cf 91       	pop	r28
    349c:	1f 91       	pop	r17
    349e:	0f 91       	pop	r16
    34a0:	ff 90       	pop	r15
    34a2:	ef 90       	pop	r14
    34a4:	df 90       	pop	r13
    34a6:	cf 90       	pop	r12
    34a8:	bf 90       	pop	r11
    34aa:	08 95       	ret

000034ac <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    34ac:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    34ae:	91 8d       	ldd	r25, Z+25	; 0x19
    34b0:	22 8d       	ldd	r18, Z+26	; 0x1a
    34b2:	89 2f       	mov	r24, r25
    34b4:	90 e0       	ldi	r25, 0x00	; 0
    34b6:	80 5c       	subi	r24, 0xC0	; 192
    34b8:	9f 4f       	sbci	r25, 0xFF	; 255
    34ba:	82 1b       	sub	r24, r18
    34bc:	91 09       	sbc	r25, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    34be:	8f 73       	andi	r24, 0x3F	; 63
    34c0:	99 27       	eor	r25, r25
    34c2:	08 95       	ret

000034c4 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    34c4:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    34c6:	91 8d       	ldd	r25, Z+25	; 0x19
    34c8:	82 8d       	ldd	r24, Z+26	; 0x1a
    34ca:	98 17       	cp	r25, r24
    34cc:	31 f0       	breq	.+12     	; 0x34da <HardwareSerial::peek()+0x16>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    34ce:	82 8d       	ldd	r24, Z+26	; 0x1a
    34d0:	e8 0f       	add	r30, r24
    34d2:	f1 1d       	adc	r31, r1
    34d4:	85 8d       	ldd	r24, Z+29	; 0x1d
    34d6:	90 e0       	ldi	r25, 0x00	; 0
    34d8:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    34da:	8f ef       	ldi	r24, 0xFF	; 255
    34dc:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    34de:	08 95       	ret

000034e0 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    34e0:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    34e2:	91 8d       	ldd	r25, Z+25	; 0x19
    34e4:	82 8d       	ldd	r24, Z+26	; 0x1a
    34e6:	98 17       	cp	r25, r24
    34e8:	61 f0       	breq	.+24     	; 0x3502 <HardwareSerial::read()+0x22>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    34ea:	a2 8d       	ldd	r26, Z+26	; 0x1a
    34ec:	ae 0f       	add	r26, r30
    34ee:	bf 2f       	mov	r27, r31
    34f0:	b1 1d       	adc	r27, r1
    34f2:	5d 96       	adiw	r26, 0x1d	; 29
    34f4:	8c 91       	ld	r24, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    34f6:	92 8d       	ldd	r25, Z+26	; 0x1a
    34f8:	9f 5f       	subi	r25, 0xFF	; 255
    34fa:	9f 73       	andi	r25, 0x3F	; 63
    34fc:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    34fe:	90 e0       	ldi	r25, 0x00	; 0
    3500:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    3502:	8f ef       	ldi	r24, 0xFF	; 255
    3504:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    3506:	08 95       	ret

00003508 <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    3508:	fc 01       	movw	r30, r24
    350a:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    350c:	44 8d       	ldd	r20, Z+28	; 0x1c
    350e:	25 2f       	mov	r18, r21
    3510:	30 e0       	ldi	r19, 0x00	; 0
    3512:	84 2f       	mov	r24, r20
    3514:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    3516:	82 1b       	sub	r24, r18
    3518:	93 0b       	sbc	r25, r19
    351a:	54 17       	cp	r21, r20
    351c:	10 f0       	brcs	.+4      	; 0x3522 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    351e:	cf 96       	adiw	r24, 0x3f	; 63
    3520:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    3522:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    3524:	08 95       	ret

00003526 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    3526:	8e ee       	ldi	r24, 0xEE	; 238
    3528:	9b e1       	ldi	r25, 0x1B	; 27
    352a:	89 2b       	or	r24, r25
    352c:	49 f0       	breq	.+18     	; 0x3540 <serialEventRun()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    352e:	80 e0       	ldi	r24, 0x00	; 0
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	89 2b       	or	r24, r25
    3534:	29 f0       	breq	.+10     	; 0x3540 <serialEventRun()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    3536:	0e 94 ee 1b 	call	0x37dc	; 0x37dc <Serial0_available()>
    353a:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    353c:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    3540:	80 e0       	ldi	r24, 0x00	; 0
    3542:	90 e0       	ldi	r25, 0x00	; 0
    3544:	89 2b       	or	r24, r25
    3546:	49 f0       	breq	.+18     	; 0x355a <serialEventRun()+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    3548:	80 e0       	ldi	r24, 0x00	; 0
    354a:	90 e0       	ldi	r25, 0x00	; 0
    354c:	89 2b       	or	r24, r25
    354e:	29 f0       	breq	.+10     	; 0x355a <serialEventRun()+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    3550:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    3554:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    3556:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    355a:	08 95       	ret

0000355c <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    355c:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    355e:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3560:	a8 0f       	add	r26, r24
    3562:	b9 2f       	mov	r27, r25
    3564:	b1 1d       	adc	r27, r1
    3566:	a3 5a       	subi	r26, 0xA3	; 163
    3568:	bf 4f       	sbci	r27, 0xFF	; 255
    356a:	2c 91       	ld	r18, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    356c:	84 8d       	ldd	r24, Z+28	; 0x1c
    356e:	90 e0       	ldi	r25, 0x00	; 0
    3570:	01 96       	adiw	r24, 0x01	; 1
    3572:	8f 73       	andi	r24, 0x3F	; 63
    3574:	99 27       	eor	r25, r25
    3576:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    3578:	a6 89       	ldd	r26, Z+22	; 0x16
    357a:	b7 89       	ldd	r27, Z+23	; 0x17
    357c:	2c 93       	st	X, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    357e:	a0 89       	ldd	r26, Z+16	; 0x10
    3580:	b1 89       	ldd	r27, Z+17	; 0x11
    3582:	8c 91       	ld	r24, X
    3584:	80 64       	ori	r24, 0x40	; 64
    3586:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    3588:	93 8d       	ldd	r25, Z+27	; 0x1b
    358a:	84 8d       	ldd	r24, Z+28	; 0x1c
    358c:	98 13       	cpse	r25, r24
    358e:	06 c0       	rjmp	.+12     	; 0x359c <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    3590:	02 88       	ldd	r0, Z+18	; 0x12
    3592:	f3 89       	ldd	r31, Z+19	; 0x13
    3594:	e0 2d       	mov	r30, r0
    3596:	80 81       	ld	r24, Z
    3598:	8f 7d       	andi	r24, 0xDF	; 223
    359a:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    359c:	08 95       	ret

0000359e <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    359e:	cf 93       	push	r28
    35a0:	df 93       	push	r29
    35a2:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    35a4:	88 8d       	ldd	r24, Y+24	; 0x18
    35a6:	88 23       	and	r24, r24
    35a8:	b9 f0       	breq	.+46     	; 0x35d8 <HardwareSerial::flush()+0x3a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    35aa:	aa 89       	ldd	r26, Y+18	; 0x12
    35ac:	bb 89       	ldd	r27, Y+19	; 0x13
    35ae:	e8 89       	ldd	r30, Y+16	; 0x10
    35b0:	f9 89       	ldd	r31, Y+17	; 0x11
    35b2:	8c 91       	ld	r24, X
    35b4:	85 fd       	sbrc	r24, 5
    35b6:	03 c0       	rjmp	.+6      	; 0x35be <HardwareSerial::flush()+0x20>
    35b8:	80 81       	ld	r24, Z
    35ba:	86 fd       	sbrc	r24, 6
    35bc:	0d c0       	rjmp	.+26     	; 0x35d8 <HardwareSerial::flush()+0x3a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    35be:	0f b6       	in	r0, 0x3f	; 63
    35c0:	07 fc       	sbrc	r0, 7
    35c2:	f7 cf       	rjmp	.-18     	; 0x35b2 <HardwareSerial::flush()+0x14>
    35c4:	8c 91       	ld	r24, X
    35c6:	85 ff       	sbrs	r24, 5
    35c8:	f2 cf       	rjmp	.-28     	; 0x35ae <HardwareSerial::flush()+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    35ca:	80 81       	ld	r24, Z
    35cc:	85 ff       	sbrs	r24, 5
    35ce:	ed cf       	rjmp	.-38     	; 0x35aa <HardwareSerial::flush()+0xc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    35d0:	ce 01       	movw	r24, r28
    35d2:	0e 94 ae 1a 	call	0x355c	; 0x355c <HardwareSerial::_tx_udr_empty_irq()>
    35d6:	e9 cf       	rjmp	.-46     	; 0x35aa <HardwareSerial::flush()+0xc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    35d8:	df 91       	pop	r29
    35da:	cf 91       	pop	r28
    35dc:	08 95       	ret

000035de <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    35de:	ef 92       	push	r14
    35e0:	ff 92       	push	r15
    35e2:	0f 93       	push	r16
    35e4:	1f 93       	push	r17
    35e6:	cf 93       	push	r28
    35e8:	df 93       	push	r29
    35ea:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    35ec:	81 e0       	ldi	r24, 0x01	; 1
    35ee:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    35f0:	9b 8d       	ldd	r25, Y+27	; 0x1b
    35f2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    35f4:	98 13       	cpse	r25, r24
    35f6:	16 c0       	rjmp	.+44     	; 0x3624 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    35f8:	e8 89       	ldd	r30, Y+16	; 0x10
    35fa:	f9 89       	ldd	r31, Y+17	; 0x11
    35fc:	80 81       	ld	r24, Z
    35fe:	85 ff       	sbrs	r24, 5
    3600:	11 c0       	rjmp	.+34     	; 0x3624 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    3602:	ee 89       	ldd	r30, Y+22	; 0x16
    3604:	ff 89       	ldd	r31, Y+23	; 0x17
    3606:	60 83       	st	Z, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    3608:	e8 89       	ldd	r30, Y+16	; 0x10
    360a:	f9 89       	ldd	r31, Y+17	; 0x11
    360c:	80 81       	ld	r24, Z
    360e:	80 64       	ori	r24, 0x40	; 64
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    3610:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    3612:	81 e0       	ldi	r24, 0x01	; 1
    3614:	90 e0       	ldi	r25, 0x00	; 0
    3616:	df 91       	pop	r29
    3618:	cf 91       	pop	r28
    361a:	1f 91       	pop	r17
    361c:	0f 91       	pop	r16
    361e:	ff 90       	pop	r15
    3620:	ef 90       	pop	r14
    3622:	08 95       	ret
    3624:	f6 2e       	mov	r15, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    3626:	0b 8d       	ldd	r16, Y+27	; 0x1b
    3628:	10 e0       	ldi	r17, 0x00	; 0
    362a:	0f 5f       	subi	r16, 0xFF	; 255
    362c:	1f 4f       	sbci	r17, 0xFF	; 255
    362e:	0f 73       	andi	r16, 0x3F	; 63
    3630:	11 27       	eor	r17, r17
    3632:	e0 2e       	mov	r14, r16
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    3634:	8c 8d       	ldd	r24, Y+28	; 0x1c
    3636:	8e 11       	cpse	r24, r14
    3638:	0c c0       	rjmp	.+24     	; 0x3652 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    363a:	0f b6       	in	r0, 0x3f	; 63
    363c:	07 fc       	sbrc	r0, 7
    363e:	fa cf       	rjmp	.-12     	; 0x3634 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    3640:	e8 89       	ldd	r30, Y+16	; 0x10
    3642:	f9 89       	ldd	r31, Y+17	; 0x11
    3644:	80 81       	ld	r24, Z
    3646:	85 ff       	sbrs	r24, 5
    3648:	f5 cf       	rjmp	.-22     	; 0x3634 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    364a:	ce 01       	movw	r24, r28
    364c:	0e 94 ae 1a 	call	0x355c	; 0x355c <HardwareSerial::_tx_udr_empty_irq()>
    3650:	f1 cf       	rjmp	.-30     	; 0x3634 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    3652:	eb 8d       	ldd	r30, Y+27	; 0x1b
    3654:	ec 0f       	add	r30, r28
    3656:	fd 2f       	mov	r31, r29
    3658:	f1 1d       	adc	r31, r1
    365a:	e3 5a       	subi	r30, 0xA3	; 163
    365c:	ff 4f       	sbci	r31, 0xFF	; 255
    365e:	f0 82       	st	Z, r15
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    3660:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    3662:	ea 89       	ldd	r30, Y+18	; 0x12
    3664:	fb 89       	ldd	r31, Y+19	; 0x13
    3666:	80 81       	ld	r24, Z
    3668:	80 62       	ori	r24, 0x20	; 32
    366a:	d2 cf       	rjmp	.-92     	; 0x3610 <HardwareSerial::write(unsigned char)+0x32>

0000366c <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    366c:	cf 92       	push	r12
    366e:	df 92       	push	r13
    3670:	ef 92       	push	r14
    3672:	ff 92       	push	r15
    3674:	1f 93       	push	r17
    3676:	cf 93       	push	r28
    3678:	df 93       	push	r29
    367a:	ec 01       	movw	r28, r24
    367c:	6a 01       	movw	r12, r20
    367e:	7b 01       	movw	r14, r22
    3680:	12 2f       	mov	r17, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    3682:	e8 89       	ldd	r30, Y+16	; 0x10
    3684:	f9 89       	ldd	r31, Y+17	; 0x11
    3686:	82 e0       	ldi	r24, 0x02	; 2
    3688:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    368a:	c1 14       	cp	r12, r1
    368c:	81 ee       	ldi	r24, 0xE1	; 225
    368e:	d8 06       	cpc	r13, r24
    3690:	e1 04       	cpc	r14, r1
    3692:	f1 04       	cpc	r15, r1
    3694:	a1 f0       	breq	.+40     	; 0x36be <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    3696:	60 e0       	ldi	r22, 0x00	; 0
    3698:	79 e0       	ldi	r23, 0x09	; 9
    369a:	8d e3       	ldi	r24, 0x3D	; 61
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	a7 01       	movw	r20, r14
    36a0:	96 01       	movw	r18, r12
    36a2:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
    36a6:	21 50       	subi	r18, 0x01	; 1
    36a8:	31 09       	sbc	r19, r1
    36aa:	41 09       	sbc	r20, r1
    36ac:	51 09       	sbc	r21, r1
    36ae:	56 95       	lsr	r21
    36b0:	47 95       	ror	r20
    36b2:	37 95       	ror	r19
    36b4:	27 95       	ror	r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    36b6:	21 15       	cp	r18, r1
    36b8:	80 e1       	ldi	r24, 0x10	; 16
    36ba:	38 07       	cpc	r19, r24
    36bc:	98 f0       	brcs	.+38     	; 0x36e4 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    36be:	e8 89       	ldd	r30, Y+16	; 0x10
    36c0:	f9 89       	ldd	r31, Y+17	; 0x11
    36c2:	10 82       	st	Z, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    36c4:	60 e8       	ldi	r22, 0x80	; 128
    36c6:	74 e8       	ldi	r23, 0x84	; 132
    36c8:	8e e1       	ldi	r24, 0x1E	; 30
    36ca:	90 e0       	ldi	r25, 0x00	; 0
    36cc:	a7 01       	movw	r20, r14
    36ce:	96 01       	movw	r18, r12
    36d0:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
    36d4:	21 50       	subi	r18, 0x01	; 1
    36d6:	31 09       	sbc	r19, r1
    36d8:	41 09       	sbc	r20, r1
    36da:	51 09       	sbc	r21, r1
    36dc:	56 95       	lsr	r21
    36de:	47 95       	ror	r20
    36e0:	37 95       	ror	r19
    36e2:	27 95       	ror	r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    36e4:	ec 85       	ldd	r30, Y+12	; 0x0c
    36e6:	fd 85       	ldd	r31, Y+13	; 0x0d
    36e8:	30 83       	st	Z, r19
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    36ea:	ee 85       	ldd	r30, Y+14	; 0x0e
    36ec:	ff 85       	ldd	r31, Y+15	; 0x0f
    36ee:	20 83       	st	Z, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    36f0:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    36f2:	ec 89       	ldd	r30, Y+20	; 0x14
    36f4:	fd 89       	ldd	r31, Y+21	; 0x15
    36f6:	10 83       	st	Z, r17
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    36f8:	ea 89       	ldd	r30, Y+18	; 0x12
    36fa:	fb 89       	ldd	r31, Y+19	; 0x13
    36fc:	80 81       	ld	r24, Z
    36fe:	88 69       	ori	r24, 0x98	; 152
    3700:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    3702:	ea 89       	ldd	r30, Y+18	; 0x12
    3704:	fb 89       	ldd	r31, Y+19	; 0x13
    3706:	80 81       	ld	r24, Z
    3708:	8f 7d       	andi	r24, 0xDF	; 223
    370a:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    370c:	df 91       	pop	r29
    370e:	cf 91       	pop	r28
    3710:	1f 91       	pop	r17
    3712:	ff 90       	pop	r15
    3714:	ef 90       	pop	r14
    3716:	df 90       	pop	r13
    3718:	cf 90       	pop	r12
    371a:	08 95       	ret

0000371c <__vector_20>:
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    371c:	1f 92       	push	r1
    371e:	0f 92       	push	r0
    3720:	0f b6       	in	r0, 0x3f	; 63
    3722:	0f 92       	push	r0
    3724:	11 24       	eor	r1, r1
    3726:	0b b6       	in	r0, 0x3b	; 59
    3728:	0f 92       	push	r0
    372a:	2f 93       	push	r18
    372c:	8f 93       	push	r24
    372e:	9f 93       	push	r25
    3730:	ef 93       	push	r30
    3732:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    3734:	e0 91 38 07 	lds	r30, 0x0738	; 0x800738 <Serial+0x10>
    3738:	f0 91 39 07 	lds	r31, 0x0739	; 0x800739 <Serial+0x11>
    373c:	80 81       	ld	r24, Z
    373e:	e0 91 3e 07 	lds	r30, 0x073E	; 0x80073e <Serial+0x16>
    3742:	f0 91 3f 07 	lds	r31, 0x073F	; 0x80073f <Serial+0x17>
    3746:	82 fd       	sbrc	r24, 2
    3748:	1d c0       	rjmp	.+58     	; 0x3784 <__vector_20+0x68>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    374a:	90 81       	ld	r25, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    374c:	80 91 41 07 	lds	r24, 0x0741	; 0x800741 <Serial+0x19>
    3750:	8f 5f       	subi	r24, 0xFF	; 255
    3752:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    3754:	20 91 42 07 	lds	r18, 0x0742	; 0x800742 <Serial+0x1a>
    3758:	82 17       	cp	r24, r18
    375a:	41 f0       	breq	.+16     	; 0x376c <__vector_20+0x50>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    375c:	e0 91 41 07 	lds	r30, 0x0741	; 0x800741 <Serial+0x19>
    3760:	f0 e0       	ldi	r31, 0x00	; 0
    3762:	e8 5d       	subi	r30, 0xD8	; 216
    3764:	f8 4f       	sbci	r31, 0xF8	; 248
    3766:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    3768:	80 93 41 07 	sts	0x0741, r24	; 0x800741 <Serial+0x19>
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    376c:	ff 91       	pop	r31
    376e:	ef 91       	pop	r30
    3770:	9f 91       	pop	r25
    3772:	8f 91       	pop	r24
    3774:	2f 91       	pop	r18
    3776:	0f 90       	pop	r0
    3778:	0b be       	out	0x3b, r0	; 59
    377a:	0f 90       	pop	r0
    377c:	0f be       	out	0x3f, r0	; 63
    377e:	0f 90       	pop	r0
    3780:	1f 90       	pop	r1
    3782:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    3784:	80 81       	ld	r24, Z
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    3786:	f2 cf       	rjmp	.-28     	; 0x376c <__vector_20+0x50>

00003788 <__vector_21>:
__vector_21():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    3788:	1f 92       	push	r1
    378a:	0f 92       	push	r0
    378c:	0f b6       	in	r0, 0x3f	; 63
    378e:	0f 92       	push	r0
    3790:	11 24       	eor	r1, r1
    3792:	0b b6       	in	r0, 0x3b	; 59
    3794:	0f 92       	push	r0
    3796:	2f 93       	push	r18
    3798:	3f 93       	push	r19
    379a:	4f 93       	push	r20
    379c:	5f 93       	push	r21
    379e:	6f 93       	push	r22
    37a0:	7f 93       	push	r23
    37a2:	8f 93       	push	r24
    37a4:	9f 93       	push	r25
    37a6:	af 93       	push	r26
    37a8:	bf 93       	push	r27
    37aa:	ef 93       	push	r30
    37ac:	ff 93       	push	r31
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    37ae:	88 e2       	ldi	r24, 0x28	; 40
    37b0:	97 e0       	ldi	r25, 0x07	; 7
    37b2:	0e 94 ae 1a 	call	0x355c	; 0x355c <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    37b6:	ff 91       	pop	r31
    37b8:	ef 91       	pop	r30
    37ba:	bf 91       	pop	r27
    37bc:	af 91       	pop	r26
    37be:	9f 91       	pop	r25
    37c0:	8f 91       	pop	r24
    37c2:	7f 91       	pop	r23
    37c4:	6f 91       	pop	r22
    37c6:	5f 91       	pop	r21
    37c8:	4f 91       	pop	r20
    37ca:	3f 91       	pop	r19
    37cc:	2f 91       	pop	r18
    37ce:	0f 90       	pop	r0
    37d0:	0b be       	out	0x3b, r0	; 59
    37d2:	0f 90       	pop	r0
    37d4:	0f be       	out	0x3f, r0	; 63
    37d6:	0f 90       	pop	r0
    37d8:	1f 90       	pop	r1
    37da:	18 95       	reti

000037dc <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    37dc:	88 e2       	ldi	r24, 0x28	; 40
    37de:	97 e0       	ldi	r25, 0x07	; 7
    37e0:	0e 94 56 1a 	call	0x34ac	; 0x34ac <HardwareSerial::available()>
    37e4:	21 e0       	ldi	r18, 0x01	; 1
    37e6:	89 2b       	or	r24, r25
    37e8:	09 f4       	brne	.+2      	; 0x37ec <Serial0_available()+0x10>
    37ea:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    37ec:	82 2f       	mov	r24, r18
    37ee:	08 95       	ret

000037f0 <_GLOBAL__sub_I___vector_20>:
_ZN5PrintC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    37f0:	e8 e2       	ldi	r30, 0x28	; 40
    37f2:	f7 e0       	ldi	r31, 0x07	; 7
    37f4:	13 82       	std	Z+3, r1	; 0x03
    37f6:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
    37f8:	88 ee       	ldi	r24, 0xE8	; 232
    37fa:	93 e0       	ldi	r25, 0x03	; 3
    37fc:	a0 e0       	ldi	r26, 0x00	; 0
    37fe:	b0 e0       	ldi	r27, 0x00	; 0
    3800:	84 83       	std	Z+4, r24	; 0x04
    3802:	95 83       	std	Z+5, r25	; 0x05
    3804:	a6 83       	std	Z+6, r26	; 0x06
    3806:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    3808:	84 e4       	ldi	r24, 0x44	; 68
    380a:	95 e0       	ldi	r25, 0x05	; 5
    380c:	91 83       	std	Z+1, r25	; 0x01
    380e:	80 83       	st	Z, r24
    3810:	85 ec       	ldi	r24, 0xC5	; 197
    3812:	90 e0       	ldi	r25, 0x00	; 0
    3814:	95 87       	std	Z+13, r25	; 0x0d
    3816:	84 87       	std	Z+12, r24	; 0x0c
    3818:	84 ec       	ldi	r24, 0xC4	; 196
    381a:	90 e0       	ldi	r25, 0x00	; 0
    381c:	97 87       	std	Z+15, r25	; 0x0f
    381e:	86 87       	std	Z+14, r24	; 0x0e
    3820:	80 ec       	ldi	r24, 0xC0	; 192
    3822:	90 e0       	ldi	r25, 0x00	; 0
    3824:	91 8b       	std	Z+17, r25	; 0x11
    3826:	80 8b       	std	Z+16, r24	; 0x10
    3828:	81 ec       	ldi	r24, 0xC1	; 193
    382a:	90 e0       	ldi	r25, 0x00	; 0
    382c:	93 8b       	std	Z+19, r25	; 0x13
    382e:	82 8b       	std	Z+18, r24	; 0x12
    3830:	82 ec       	ldi	r24, 0xC2	; 194
    3832:	90 e0       	ldi	r25, 0x00	; 0
    3834:	95 8b       	std	Z+21, r25	; 0x15
    3836:	84 8b       	std	Z+20, r24	; 0x14
    3838:	86 ec       	ldi	r24, 0xC6	; 198
    383a:	90 e0       	ldi	r25, 0x00	; 0
    383c:	97 8b       	std	Z+23, r25	; 0x17
    383e:	86 8b       	std	Z+22, r24	; 0x16
    3840:	11 8e       	std	Z+25, r1	; 0x19
    3842:	12 8e       	std	Z+26, r1	; 0x1a
    3844:	13 8e       	std	Z+27, r1	; 0x1b
    3846:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    3848:	08 95       	ret

0000384a <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:171
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    384a:	af 92       	push	r10
    384c:	bf 92       	push	r11
    384e:	cf 92       	push	r12
    3850:	df 92       	push	r13
    3852:	ef 92       	push	r14
    3854:	ff 92       	push	r15
    3856:	0f 93       	push	r16
    3858:	1f 93       	push	r17
    385a:	cf 93       	push	r28
    385c:	df 93       	push	r29
    385e:	6c 01       	movw	r12, r24
    3860:	7b 01       	movw	r14, r22
    3862:	8b 01       	movw	r16, r22
    3864:	04 0f       	add	r16, r20
    3866:	15 1f       	adc	r17, r21
    3868:	eb 01       	movw	r28, r22
    386a:	5e 01       	movw	r10, r28
    386c:	ae 18       	sub	r10, r14
    386e:	bf 08       	sbc	r11, r15
    3870:	c0 17       	cp	r28, r16
    3872:	d1 07       	cpc	r29, r17
    3874:	59 f0       	breq	.+22     	; 0x388c <Print::write(unsigned char const*, unsigned int)+0x42>
    3876:	69 91       	ld	r22, Y+
    3878:	d6 01       	movw	r26, r12
    387a:	ed 91       	ld	r30, X+
    387c:	fc 91       	ld	r31, X
    387e:	01 90       	ld	r0, Z+
    3880:	f0 81       	ld	r31, Z
    3882:	e0 2d       	mov	r30, r0
    3884:	c6 01       	movw	r24, r12
    3886:	09 95       	icall
    3888:	89 2b       	or	r24, r25
    388a:	79 f7       	brne	.-34     	; 0x386a <Print::write(unsigned char const*, unsigned int)+0x20>
    388c:	c5 01       	movw	r24, r10
    388e:	df 91       	pop	r29
    3890:	cf 91       	pop	r28
    3892:	1f 91       	pop	r17
    3894:	0f 91       	pop	r16
    3896:	ff 90       	pop	r15
    3898:	ef 90       	pop	r14
    389a:	df 90       	pop	r13
    389c:	cf 90       	pop	r12
    389e:	bf 90       	pop	r11
    38a0:	af 90       	pop	r10
    38a2:	08 95       	ret

000038a4 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    38a4:	fb 01       	movw	r30, r22
    38a6:	01 90       	ld	r0, Z+
    38a8:	00 20       	and	r0, r0
    38aa:	e9 f7       	brne	.-6      	; 0x38a6 <Print::write(char const*) [clone .part.2]+0x2>
    38ac:	31 97       	sbiw	r30, 0x01	; 1
    38ae:	af 01       	movw	r20, r30
    38b0:	46 1b       	sub	r20, r22
    38b2:	57 0b       	sbc	r21, r23
    38b4:	dc 01       	movw	r26, r24
    38b6:	ed 91       	ld	r30, X+
    38b8:	fc 91       	ld	r31, X
    38ba:	02 80       	ldd	r0, Z+2	; 0x02
    38bc:	f3 81       	ldd	r31, Z+3	; 0x03
    38be:	e0 2d       	mov	r30, r0
    38c0:	09 94       	ijmp

000038c2 <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    38c2:	ef 92       	push	r14
    38c4:	ff 92       	push	r15
    38c6:	0f 93       	push	r16
    38c8:	1f 93       	push	r17
    38ca:	cf 93       	push	r28
    38cc:	df 93       	push	r29
    38ce:	8c 01       	movw	r16, r24
    38d0:	7b 01       	movw	r14, r22
    38d2:	d0 e0       	ldi	r29, 0x00	; 0
    38d4:	c0 e0       	ldi	r28, 0x00	; 0
    38d6:	f7 01       	movw	r30, r14
    38d8:	ec 0f       	add	r30, r28
    38da:	fd 1f       	adc	r31, r29
    38dc:	64 91       	lpm	r22, Z
    38de:	66 23       	and	r22, r22
    38e0:	61 f0       	breq	.+24     	; 0x38fa <Print::print(__FlashStringHelper const*)+0x38>
    38e2:	d8 01       	movw	r26, r16
    38e4:	ed 91       	ld	r30, X+
    38e6:	fc 91       	ld	r31, X
    38e8:	01 90       	ld	r0, Z+
    38ea:	f0 81       	ld	r31, Z
    38ec:	e0 2d       	mov	r30, r0
    38ee:	c8 01       	movw	r24, r16
    38f0:	09 95       	icall
    38f2:	89 2b       	or	r24, r25
    38f4:	11 f0       	breq	.+4      	; 0x38fa <Print::print(__FlashStringHelper const*)+0x38>
    38f6:	21 96       	adiw	r28, 0x01	; 1
    38f8:	ee cf       	rjmp	.-36     	; 0x38d6 <Print::print(__FlashStringHelper const*)+0x14>
    38fa:	ce 01       	movw	r24, r28
    38fc:	df 91       	pop	r29
    38fe:	cf 91       	pop	r28
    3900:	1f 91       	pop	r17
    3902:	0f 91       	pop	r16
    3904:	ff 90       	pop	r15
    3906:	ef 90       	pop	r14
    3908:	08 95       	ret

0000390a <Print::print(char const*)>:
_ZN5Print5writeEPKc():
    390a:	61 15       	cp	r22, r1
    390c:	71 05       	cpc	r23, r1
    390e:	11 f0       	breq	.+4      	; 0x3914 <Print::print(char const*)+0xa>
    3910:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    3914:	90 e0       	ldi	r25, 0x00	; 0
    3916:	80 e0       	ldi	r24, 0x00	; 0
    3918:	08 95       	ret

0000391a <Print::print(char)>:
_ZN5Print5printEc():
    391a:	dc 01       	movw	r26, r24
    391c:	ed 91       	ld	r30, X+
    391e:	fc 91       	ld	r31, X
    3920:	01 90       	ld	r0, Z+
    3922:	f0 81       	ld	r31, Z
    3924:	e0 2d       	mov	r30, r0
    3926:	09 94       	ijmp

00003928 <Print::println()>:
_ZN5Print5writeEPKc():
    3928:	62 e5       	ldi	r22, 0x52	; 82
    392a:	75 e0       	ldi	r23, 0x05	; 5
    392c:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <Print::write(char const*) [clone .part.2]>

00003930 <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
    3930:	0f 93       	push	r16
    3932:	1f 93       	push	r17
    3934:	cf 93       	push	r28
    3936:	df 93       	push	r29
    3938:	ec 01       	movw	r28, r24
    393a:	0e 94 61 1c 	call	0x38c2	; 0x38c2 <Print::print(__FlashStringHelper const*)>
    393e:	8c 01       	movw	r16, r24
    3940:	ce 01       	movw	r24, r28
    3942:	0e 94 94 1c 	call	0x3928	; 0x3928 <Print::println()>
    3946:	80 0f       	add	r24, r16
    3948:	91 1f       	adc	r25, r17
    394a:	df 91       	pop	r29
    394c:	cf 91       	pop	r28
    394e:	1f 91       	pop	r17
    3950:	0f 91       	pop	r16
    3952:	08 95       	ret

00003954 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    3954:	0f 93       	push	r16
    3956:	1f 93       	push	r17
    3958:	cf 93       	push	r28
    395a:	df 93       	push	r29
    395c:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    395e:	d0 e0       	ldi	r29, 0x00	; 0
    3960:	c0 e0       	ldi	r28, 0x00	; 0
    3962:	61 15       	cp	r22, r1
    3964:	71 05       	cpc	r23, r1
    3966:	19 f0       	breq	.+6      	; 0x396e <Print::println(char const*)+0x1a>
    3968:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <Print::write(char const*) [clone .part.2]>
    396c:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    396e:	c8 01       	movw	r24, r16
    3970:	0e 94 94 1c 	call	0x3928	; 0x3928 <Print::println()>
    3974:	8c 0f       	add	r24, r28
    3976:	9d 1f       	adc	r25, r29
    3978:	df 91       	pop	r29
    397a:	cf 91       	pop	r28
    397c:	1f 91       	pop	r17
    397e:	0f 91       	pop	r16
    3980:	08 95       	ret

00003982 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    3982:	8f 92       	push	r8
    3984:	9f 92       	push	r9
    3986:	af 92       	push	r10
    3988:	bf 92       	push	r11
    398a:	ef 92       	push	r14
    398c:	ff 92       	push	r15
    398e:	0f 93       	push	r16
    3990:	1f 93       	push	r17
    3992:	cf 93       	push	r28
    3994:	df 93       	push	r29
    3996:	cd b7       	in	r28, 0x3d	; 61
    3998:	de b7       	in	r29, 0x3e	; 62
    399a:	a1 97       	sbiw	r28, 0x21	; 33
    399c:	0f b6       	in	r0, 0x3f	; 63
    399e:	f8 94       	cli
    39a0:	de bf       	out	0x3e, r29	; 62
    39a2:	0f be       	out	0x3f, r0	; 63
    39a4:	cd bf       	out	0x3d, r28	; 61
    39a6:	7c 01       	movw	r14, r24
    39a8:	fa 01       	movw	r30, r20
    39aa:	cb 01       	movw	r24, r22
    39ac:	19 a2       	std	Y+33, r1	; 0x21
    39ae:	22 30       	cpi	r18, 0x02	; 2
    39b0:	08 f4       	brcc	.+2      	; 0x39b4 <Print::printNumber(unsigned long, unsigned char)+0x32>
    39b2:	2a e0       	ldi	r18, 0x0A	; 10
    39b4:	8e 01       	movw	r16, r28
    39b6:	0f 5d       	subi	r16, 0xDF	; 223
    39b8:	1f 4f       	sbci	r17, 0xFF	; 255
    39ba:	82 2e       	mov	r8, r18
    39bc:	91 2c       	mov	r9, r1
    39be:	b1 2c       	mov	r11, r1
    39c0:	a1 2c       	mov	r10, r1
    39c2:	bf 01       	movw	r22, r30
    39c4:	a5 01       	movw	r20, r10
    39c6:	94 01       	movw	r18, r8
    39c8:	0e 94 04 21 	call	0x4208	; 0x4208 <__udivmodsi4>
    39cc:	f9 01       	movw	r30, r18
    39ce:	ca 01       	movw	r24, r20
    39d0:	6a 30       	cpi	r22, 0x0A	; 10
    39d2:	0c f5       	brge	.+66     	; 0x3a16 <Print::printNumber(unsigned long, unsigned char)+0x94>
    39d4:	60 5d       	subi	r22, 0xD0	; 208
    39d6:	d8 01       	movw	r26, r16
    39d8:	6e 93       	st	-X, r22
    39da:	8d 01       	movw	r16, r26
    39dc:	23 2b       	or	r18, r19
    39de:	24 2b       	or	r18, r20
    39e0:	25 2b       	or	r18, r21
    39e2:	79 f7       	brne	.-34     	; 0x39c2 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    39e4:	90 e0       	ldi	r25, 0x00	; 0
    39e6:	80 e0       	ldi	r24, 0x00	; 0
    39e8:	10 97       	sbiw	r26, 0x00	; 0
    39ea:	21 f0       	breq	.+8      	; 0x39f4 <Print::printNumber(unsigned long, unsigned char)+0x72>
    39ec:	bd 01       	movw	r22, r26
    39ee:	c7 01       	movw	r24, r14
    39f0:	0e 94 52 1c 	call	0x38a4	; 0x38a4 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    39f4:	a1 96       	adiw	r28, 0x21	; 33
    39f6:	0f b6       	in	r0, 0x3f	; 63
    39f8:	f8 94       	cli
    39fa:	de bf       	out	0x3e, r29	; 62
    39fc:	0f be       	out	0x3f, r0	; 63
    39fe:	cd bf       	out	0x3d, r28	; 61
    3a00:	df 91       	pop	r29
    3a02:	cf 91       	pop	r28
    3a04:	1f 91       	pop	r17
    3a06:	0f 91       	pop	r16
    3a08:	ff 90       	pop	r15
    3a0a:	ef 90       	pop	r14
    3a0c:	bf 90       	pop	r11
    3a0e:	af 90       	pop	r10
    3a10:	9f 90       	pop	r9
    3a12:	8f 90       	pop	r8
    3a14:	08 95       	ret
    3a16:	69 5c       	subi	r22, 0xC9	; 201
    3a18:	de cf       	rjmp	.-68     	; 0x39d6 <Print::printNumber(unsigned long, unsigned char)+0x54>

00003a1a <Print::print(long, int)>:
_ZN5Print5printEli():
    3a1a:	cf 92       	push	r12
    3a1c:	df 92       	push	r13
    3a1e:	ef 92       	push	r14
    3a20:	ff 92       	push	r15
    3a22:	0f 93       	push	r16
    3a24:	1f 93       	push	r17
    3a26:	cf 93       	push	r28
    3a28:	df 93       	push	r29
    3a2a:	21 15       	cp	r18, r1
    3a2c:	31 05       	cpc	r19, r1
    3a2e:	81 f4       	brne	.+32     	; 0x3a50 <Print::print(long, int)+0x36>
    3a30:	dc 01       	movw	r26, r24
    3a32:	ed 91       	ld	r30, X+
    3a34:	fc 91       	ld	r31, X
    3a36:	01 90       	ld	r0, Z+
    3a38:	f0 81       	ld	r31, Z
    3a3a:	e0 2d       	mov	r30, r0
    3a3c:	64 2f       	mov	r22, r20
    3a3e:	df 91       	pop	r29
    3a40:	cf 91       	pop	r28
    3a42:	1f 91       	pop	r17
    3a44:	0f 91       	pop	r16
    3a46:	ff 90       	pop	r15
    3a48:	ef 90       	pop	r14
    3a4a:	df 90       	pop	r13
    3a4c:	cf 90       	pop	r12
    3a4e:	09 94       	ijmp
    3a50:	2a 30       	cpi	r18, 0x0A	; 10
    3a52:	31 05       	cpc	r19, r1
    3a54:	01 f5       	brne	.+64     	; 0x3a96 <Print::print(long, int)+0x7c>
    3a56:	2a e0       	ldi	r18, 0x0A	; 10
    3a58:	77 ff       	sbrs	r23, 7
    3a5a:	1d c0       	rjmp	.+58     	; 0x3a96 <Print::print(long, int)+0x7c>
    3a5c:	6a 01       	movw	r12, r20
    3a5e:	7b 01       	movw	r14, r22
    3a60:	ec 01       	movw	r28, r24
    3a62:	6d e2       	ldi	r22, 0x2D	; 45
    3a64:	0e 94 8d 1c 	call	0x391a	; 0x391a <Print::print(char)>
    3a68:	8c 01       	movw	r16, r24
    3a6a:	44 27       	eor	r20, r20
    3a6c:	55 27       	eor	r21, r21
    3a6e:	ba 01       	movw	r22, r20
    3a70:	4c 19       	sub	r20, r12
    3a72:	5d 09       	sbc	r21, r13
    3a74:	6e 09       	sbc	r22, r14
    3a76:	7f 09       	sbc	r23, r15
    3a78:	2a e0       	ldi	r18, 0x0A	; 10
    3a7a:	ce 01       	movw	r24, r28
    3a7c:	0e 94 c1 1c 	call	0x3982	; 0x3982 <Print::printNumber(unsigned long, unsigned char)>
    3a80:	80 0f       	add	r24, r16
    3a82:	91 1f       	adc	r25, r17
    3a84:	df 91       	pop	r29
    3a86:	cf 91       	pop	r28
    3a88:	1f 91       	pop	r17
    3a8a:	0f 91       	pop	r16
    3a8c:	ff 90       	pop	r15
    3a8e:	ef 90       	pop	r14
    3a90:	df 90       	pop	r13
    3a92:	cf 90       	pop	r12
    3a94:	08 95       	ret
    3a96:	df 91       	pop	r29
    3a98:	cf 91       	pop	r28
    3a9a:	1f 91       	pop	r17
    3a9c:	0f 91       	pop	r16
    3a9e:	ff 90       	pop	r15
    3aa0:	ef 90       	pop	r14
    3aa2:	df 90       	pop	r13
    3aa4:	cf 90       	pop	r12
    3aa6:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <Print::printNumber(unsigned long, unsigned char)>

00003aaa <Print::print(int, int)>:
_ZN5Print5printEii():
    3aaa:	9a 01       	movw	r18, r20
    3aac:	ab 01       	movw	r20, r22
    3aae:	77 0f       	add	r23, r23
    3ab0:	66 0b       	sbc	r22, r22
    3ab2:	77 0b       	sbc	r23, r23
    3ab4:	0c 94 0d 1d 	jmp	0x3a1a	; 0x3a1a <Print::print(long, int)>

00003ab8 <Print::println(int, int)>:
_ZN5Print7printlnEii():
    3ab8:	0f 93       	push	r16
    3aba:	1f 93       	push	r17
    3abc:	cf 93       	push	r28
    3abe:	df 93       	push	r29
    3ac0:	ec 01       	movw	r28, r24
    3ac2:	0e 94 55 1d 	call	0x3aaa	; 0x3aaa <Print::print(int, int)>
    3ac6:	8c 01       	movw	r16, r24
    3ac8:	ce 01       	movw	r24, r28
    3aca:	0e 94 94 1c 	call	0x3928	; 0x3928 <Print::println()>
    3ace:	80 0f       	add	r24, r16
    3ad0:	91 1f       	adc	r25, r17
    3ad2:	df 91       	pop	r29
    3ad4:	cf 91       	pop	r28
    3ad6:	1f 91       	pop	r17
    3ad8:	0f 91       	pop	r16
    3ada:	08 95       	ret

00003adc <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    3adc:	21 15       	cp	r18, r1
    3ade:	31 05       	cpc	r19, r1
    3ae0:	41 f4       	brne	.+16     	; 0x3af2 <Print::print(unsigned long, int)+0x16>
    3ae2:	dc 01       	movw	r26, r24
    3ae4:	ed 91       	ld	r30, X+
    3ae6:	fc 91       	ld	r31, X
    3ae8:	01 90       	ld	r0, Z+
    3aea:	f0 81       	ld	r31, Z
    3aec:	e0 2d       	mov	r30, r0
    3aee:	64 2f       	mov	r22, r20
    3af0:	09 94       	ijmp
    3af2:	0c 94 c1 1c 	jmp	0x3982	; 0x3982 <Print::printNumber(unsigned long, unsigned char)>

00003af6 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
    3af6:	9a 01       	movw	r18, r20
    3af8:	46 2f       	mov	r20, r22
    3afa:	50 e0       	ldi	r21, 0x00	; 0
    3afc:	70 e0       	ldi	r23, 0x00	; 0
    3afe:	60 e0       	ldi	r22, 0x00	; 0
    3b00:	0c 94 6e 1d 	jmp	0x3adc	; 0x3adc <Print::print(unsigned long, int)>

00003b04 <Print::println(unsigned char, int)>:
_ZN5Print7printlnEhi():
    3b04:	0f 93       	push	r16
    3b06:	1f 93       	push	r17
    3b08:	cf 93       	push	r28
    3b0a:	df 93       	push	r29
    3b0c:	ec 01       	movw	r28, r24
    3b0e:	0e 94 7b 1d 	call	0x3af6	; 0x3af6 <Print::print(unsigned char, int)>
    3b12:	8c 01       	movw	r16, r24
    3b14:	ce 01       	movw	r24, r28
    3b16:	0e 94 94 1c 	call	0x3928	; 0x3928 <Print::println()>
    3b1a:	80 0f       	add	r24, r16
    3b1c:	91 1f       	adc	r25, r17
    3b1e:	df 91       	pop	r29
    3b20:	cf 91       	pop	r28
    3b22:	1f 91       	pop	r17
    3b24:	0f 91       	pop	r16
    3b26:	08 95       	ret

00003b28 <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
    3b28:	9a 01       	movw	r18, r20
    3b2a:	ab 01       	movw	r20, r22
    3b2c:	70 e0       	ldi	r23, 0x00	; 0
    3b2e:	60 e0       	ldi	r22, 0x00	; 0
    3b30:	0c 94 6e 1d 	jmp	0x3adc	; 0x3adc <Print::print(unsigned long, int)>

00003b34 <Print::println(unsigned long, int)>:
_ZN5Print7printlnEmi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:181
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    3b34:	0f 93       	push	r16
    3b36:	1f 93       	push	r17
    3b38:	cf 93       	push	r28
    3b3a:	df 93       	push	r29
    3b3c:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:182
  size_t n = print(num, base);
    3b3e:	0e 94 6e 1d 	call	0x3adc	; 0x3adc <Print::print(unsigned long, int)>
    3b42:	8c 01       	movw	r16, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:183
  n += println();
    3b44:	ce 01       	movw	r24, r28
    3b46:	0e 94 94 1c 	call	0x3928	; 0x3928 <Print::println()>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
  return n;
}
    3b4a:	80 0f       	add	r24, r16
    3b4c:	91 1f       	adc	r25, r17
    3b4e:	df 91       	pop	r29
    3b50:	cf 91       	pop	r28
    3b52:	1f 91       	pop	r17
    3b54:	0f 91       	pop	r16
    3b56:	08 95       	ret

00003b58 <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    3b58:	2f 92       	push	r2
    3b5a:	3f 92       	push	r3
    3b5c:	4f 92       	push	r4
    3b5e:	5f 92       	push	r5
    3b60:	6f 92       	push	r6
    3b62:	7f 92       	push	r7
    3b64:	8f 92       	push	r8
    3b66:	9f 92       	push	r9
    3b68:	af 92       	push	r10
    3b6a:	bf 92       	push	r11
    3b6c:	cf 92       	push	r12
    3b6e:	df 92       	push	r13
    3b70:	ef 92       	push	r14
    3b72:	ff 92       	push	r15
    3b74:	1f 93       	push	r17
    3b76:	cf 93       	push	r28
    3b78:	df 93       	push	r29
    3b7a:	ec 01       	movw	r28, r24
    3b7c:	6a 01       	movw	r12, r20
    3b7e:	7b 01       	movw	r14, r22
    3b80:	72 2e       	mov	r7, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    3b82:	ab 01       	movw	r20, r22
    3b84:	96 01       	movw	r18, r12
    3b86:	cb 01       	movw	r24, r22
    3b88:	b6 01       	movw	r22, r12
    3b8a:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__unordsf2>
_ZN5Print5writeEPKc():
    3b8e:	65 e5       	ldi	r22, 0x55	; 85
    3b90:	75 e0       	ldi	r23, 0x05	; 5
_ZN5Print10printFloatEdh():
    3b92:	81 11       	cpse	r24, r1
    3b94:	26 c0       	rjmp	.+76     	; 0x3be2 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    3b96:	46 01       	movw	r8, r12
    3b98:	57 01       	movw	r10, r14
    3b9a:	e8 94       	clt
    3b9c:	b7 f8       	bld	r11, 7
    3b9e:	2f ef       	ldi	r18, 0xFF	; 255
    3ba0:	3f ef       	ldi	r19, 0xFF	; 255
    3ba2:	4f e7       	ldi	r20, 0x7F	; 127
    3ba4:	5f e7       	ldi	r21, 0x7F	; 127
    3ba6:	c5 01       	movw	r24, r10
    3ba8:	b4 01       	movw	r22, r8
    3baa:	0e 94 eb 20 	call	0x41d6	; 0x41d6 <__unordsf2>
    3bae:	81 11       	cpse	r24, r1
    3bb0:	0c c0       	rjmp	.+24     	; 0x3bca <Print::printFloat(double, unsigned char)+0x72>
    3bb2:	2f ef       	ldi	r18, 0xFF	; 255
    3bb4:	3f ef       	ldi	r19, 0xFF	; 255
    3bb6:	4f e7       	ldi	r20, 0x7F	; 127
    3bb8:	5f e7       	ldi	r21, 0x7F	; 127
    3bba:	c5 01       	movw	r24, r10
    3bbc:	b4 01       	movw	r22, r8
    3bbe:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <__cmpsf2>
_ZN5Print5writeEPKc():
    3bc2:	69 e5       	ldi	r22, 0x59	; 89
    3bc4:	75 e0       	ldi	r23, 0x05	; 5
_ZN5Print10printFloatEdh():
    3bc6:	18 16       	cp	r1, r24
    3bc8:	64 f0       	brlt	.+24     	; 0x3be2 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    3bca:	2f ef       	ldi	r18, 0xFF	; 255
    3bcc:	3f ef       	ldi	r19, 0xFF	; 255
    3bce:	4f e7       	ldi	r20, 0x7F	; 127
    3bd0:	5f e4       	ldi	r21, 0x4F	; 79
    3bd2:	c7 01       	movw	r24, r14
    3bd4:	b6 01       	movw	r22, r12
    3bd6:	0e 94 79 20 	call	0x40f2	; 0x40f2 <__gesf2>
    3bda:	18 16       	cp	r1, r24
    3bdc:	b4 f4       	brge	.+44     	; 0x3c0a <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
    3bde:	6d e5       	ldi	r22, 0x5D	; 93
    3be0:	75 e0       	ldi	r23, 0x05	; 5
    3be2:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    3be4:	df 91       	pop	r29
    3be6:	cf 91       	pop	r28
    3be8:	1f 91       	pop	r17
    3bea:	ff 90       	pop	r15
    3bec:	ef 90       	pop	r14
    3bee:	df 90       	pop	r13
    3bf0:	cf 90       	pop	r12
    3bf2:	bf 90       	pop	r11
    3bf4:	af 90       	pop	r10
    3bf6:	9f 90       	pop	r9
    3bf8:	8f 90       	pop	r8
    3bfa:	7f 90       	pop	r7
    3bfc:	6f 90       	pop	r6
    3bfe:	5f 90       	pop	r5
    3c00:	4f 90       	pop	r4
    3c02:	3f 90       	pop	r3
    3c04:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
    3c06:	0c 94 52 1c 	jmp	0x38a4	; 0x38a4 <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    3c0a:	2f ef       	ldi	r18, 0xFF	; 255
    3c0c:	3f ef       	ldi	r19, 0xFF	; 255
    3c0e:	4f e7       	ldi	r20, 0x7F	; 127
    3c10:	5f ec       	ldi	r21, 0xCF	; 207
    3c12:	c7 01       	movw	r24, r14
    3c14:	b6 01       	movw	r22, r12
    3c16:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <__cmpsf2>
    3c1a:	87 fd       	sbrc	r24, 7
    3c1c:	e0 cf       	rjmp	.-64     	; 0x3bde <Print::printFloat(double, unsigned char)+0x86>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    3c1e:	20 e0       	ldi	r18, 0x00	; 0
    3c20:	30 e0       	ldi	r19, 0x00	; 0
    3c22:	a9 01       	movw	r20, r18
    3c24:	c7 01       	movw	r24, r14
    3c26:	b6 01       	movw	r22, r12
    3c28:	0e 94 21 1f 	call	0x3e42	; 0x3e42 <__cmpsf2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    3c2c:	31 2c       	mov	r3, r1
    3c2e:	21 2c       	mov	r2, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    3c30:	87 ff       	sbrs	r24, 7
    3c32:	09 c0       	rjmp	.+18     	; 0x3c46 <Print::printFloat(double, unsigned char)+0xee>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
    3c34:	6d e2       	ldi	r22, 0x2D	; 45
    3c36:	ce 01       	movw	r24, r28
    3c38:	0e 94 8d 1c 	call	0x391a	; 0x391a <Print::print(char)>
    3c3c:	1c 01       	movw	r2, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
    3c3e:	f7 fa       	bst	r15, 7
    3c40:	f0 94       	com	r15
    3c42:	f7 f8       	bld	r15, 7
    3c44:	f0 94       	com	r15
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3c46:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    3c48:	60 e0       	ldi	r22, 0x00	; 0
    3c4a:	70 e0       	ldi	r23, 0x00	; 0
    3c4c:	80 e0       	ldi	r24, 0x00	; 0
    3c4e:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    3c50:	71 16       	cp	r7, r17
    3c52:	41 f0       	breq	.+16     	; 0x3c64 <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    3c54:	20 e0       	ldi	r18, 0x00	; 0
    3c56:	30 e0       	ldi	r19, 0x00	; 0
    3c58:	40 e2       	ldi	r20, 0x20	; 32
    3c5a:	51 e4       	ldi	r21, 0x41	; 65
    3c5c:	0e 94 26 1f 	call	0x3e4c	; 0x3e4c <__divsf3>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    3c60:	1f 5f       	subi	r17, 0xFF	; 255
    3c62:	f6 cf       	rjmp	.-20     	; 0x3c50 <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    3c64:	a7 01       	movw	r20, r14
    3c66:	96 01       	movw	r18, r12
    3c68:	0e 94 b5 1e 	call	0x3d6a	; 0x3d6a <__addsf3>
    3c6c:	2b 01       	movw	r4, r22
    3c6e:	3c 01       	movw	r6, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    3c70:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <__fixunssfsi>
    3c74:	4b 01       	movw	r8, r22
    3c76:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    3c78:	2a e0       	ldi	r18, 0x0A	; 10
    3c7a:	bc 01       	movw	r22, r24
    3c7c:	a4 01       	movw	r20, r8
    3c7e:	ce 01       	movw	r24, r28
    3c80:	0e 94 c1 1c 	call	0x3982	; 0x3982 <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    3c84:	7c 01       	movw	r14, r24
    3c86:	e2 0c       	add	r14, r2
    3c88:	f3 1c       	adc	r15, r3
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    3c8a:	11 23       	and	r17, r17
    3c8c:	b1 f1       	breq	.+108    	; 0x3cfa <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    3c8e:	c5 01       	movw	r24, r10
    3c90:	b4 01       	movw	r22, r8
    3c92:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__floatunsisf>
    3c96:	9b 01       	movw	r18, r22
    3c98:	ac 01       	movw	r20, r24
    3c9a:	c3 01       	movw	r24, r6
    3c9c:	b2 01       	movw	r22, r4
    3c9e:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__subsf3>
    3ca2:	4b 01       	movw	r8, r22
    3ca4:	5c 01       	movw	r10, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    3ca6:	6e e2       	ldi	r22, 0x2E	; 46
    3ca8:	ce 01       	movw	r24, r28
    3caa:	0e 94 8d 1c 	call	0x391a	; 0x391a <Print::print(char)>
    3cae:	e8 0e       	add	r14, r24
    3cb0:	f9 1e       	adc	r15, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    3cb2:	11 50       	subi	r17, 0x01	; 1
    3cb4:	10 f1       	brcs	.+68     	; 0x3cfa <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    3cb6:	20 e0       	ldi	r18, 0x00	; 0
    3cb8:	30 e0       	ldi	r19, 0x00	; 0
    3cba:	40 e2       	ldi	r20, 0x20	; 32
    3cbc:	51 e4       	ldi	r21, 0x41	; 65
    3cbe:	c5 01       	movw	r24, r10
    3cc0:	b4 01       	movw	r22, r8
    3cc2:	0e 94 7e 20 	call	0x40fc	; 0x40fc <__mulsf3>
    3cc6:	2b 01       	movw	r4, r22
    3cc8:	3c 01       	movw	r6, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    3cca:	0e 94 98 1f 	call	0x3f30	; 0x3f30 <__fixunssfsi>
    3cce:	4b 01       	movw	r8, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    3cd0:	4a e0       	ldi	r20, 0x0A	; 10
    3cd2:	50 e0       	ldi	r21, 0x00	; 0
    3cd4:	ce 01       	movw	r24, r28
    3cd6:	0e 94 94 1d 	call	0x3b28	; 0x3b28 <Print::print(unsigned int, int)>
    3cda:	e8 0e       	add	r14, r24
    3cdc:	f9 1e       	adc	r15, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    3cde:	b4 01       	movw	r22, r8
    3ce0:	90 e0       	ldi	r25, 0x00	; 0
    3ce2:	80 e0       	ldi	r24, 0x00	; 0
    3ce4:	0e 94 c7 1f 	call	0x3f8e	; 0x3f8e <__floatunsisf>
    3ce8:	9b 01       	movw	r18, r22
    3cea:	ac 01       	movw	r20, r24
    3cec:	c3 01       	movw	r24, r6
    3cee:	b2 01       	movw	r22, r4
    3cf0:	0e 94 b4 1e 	call	0x3d68	; 0x3d68 <__subsf3>
    3cf4:	4b 01       	movw	r8, r22
    3cf6:	5c 01       	movw	r10, r24
    3cf8:	dc cf       	rjmp	.-72     	; 0x3cb2 <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    3cfa:	c7 01       	movw	r24, r14
    3cfc:	df 91       	pop	r29
    3cfe:	cf 91       	pop	r28
    3d00:	1f 91       	pop	r17
    3d02:	ff 90       	pop	r15
    3d04:	ef 90       	pop	r14
    3d06:	df 90       	pop	r13
    3d08:	cf 90       	pop	r12
    3d0a:	bf 90       	pop	r11
    3d0c:	af 90       	pop	r10
    3d0e:	9f 90       	pop	r9
    3d10:	8f 90       	pop	r8
    3d12:	7f 90       	pop	r7
    3d14:	6f 90       	pop	r6
    3d16:	5f 90       	pop	r5
    3d18:	4f 90       	pop	r4
    3d1a:	3f 90       	pop	r3
    3d1c:	2f 90       	pop	r2
    3d1e:	08 95       	ret

00003d20 <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3d20:	0c 94 ac 1d 	jmp	0x3b58	; 0x3b58 <Print::printFloat(double, unsigned char)>

00003d24 <Print::println(double, int)>:
_ZN5Print7printlnEdi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:188
  n += println();
  return n;
}

size_t Print::println(double num, int digits)
{
    3d24:	0f 93       	push	r16
    3d26:	1f 93       	push	r17
    3d28:	cf 93       	push	r28
    3d2a:	df 93       	push	r29
    3d2c:	ec 01       	movw	r28, r24
_ZN5Print5printEdi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    3d2e:	0e 94 ac 1d 	call	0x3b58	; 0x3b58 <Print::printFloat(double, unsigned char)>
    3d32:	8c 01       	movw	r16, r24
_ZN5Print7printlnEdi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:190
}

size_t Print::println(double num, int digits)
{
  size_t n = print(num, digits);
  n += println();
    3d34:	ce 01       	movw	r24, r28
    3d36:	0e 94 94 1c 	call	0x3928	; 0x3928 <Print::println()>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:192
  return n;
}
    3d3a:	80 0f       	add	r24, r16
    3d3c:	91 1f       	adc	r25, r17
    3d3e:	df 91       	pop	r29
    3d40:	cf 91       	pop	r28
    3d42:	1f 91       	pop	r17
    3d44:	0f 91       	pop	r16
    3d46:	08 95       	ret

00003d48 <initVariant>:
initVariant():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    3d48:	08 95       	ret

00003d4a <main>:
main():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    3d4a:	0e 94 20 19 	call	0x3240	; 0x3240 <init>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    3d4e:	0e 94 a4 1e 	call	0x3d48	; 0x3d48 <initVariant>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    3d52:	0e 94 0e 0b 	call	0x161c	; 0x161c <setup>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    3d56:	c3 e9       	ldi	r28, 0x93	; 147
    3d58:	da e1       	ldi	r29, 0x1A	; 26
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    3d5a:	0e 94 ca 0f 	call	0x1f94	; 0x1f94 <loop>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    3d5e:	20 97       	sbiw	r28, 0x00	; 0
    3d60:	e1 f3       	breq	.-8      	; 0x3d5a <main+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    3d62:	0e 94 93 1a 	call	0x3526	; 0x3526 <serialEventRun()>
    3d66:	f9 cf       	rjmp	.-14     	; 0x3d5a <main+0x10>

00003d68 <__subsf3>:
__subsf3():
    3d68:	50 58       	subi	r21, 0x80	; 128

00003d6a <__addsf3>:
    3d6a:	bb 27       	eor	r27, r27
    3d6c:	aa 27       	eor	r26, r26
    3d6e:	0e 94 cc 1e 	call	0x3d98	; 0x3d98 <__addsf3x>
    3d72:	0c 94 3f 20 	jmp	0x407e	; 0x407e <__fp_round>
__addsf3():
    3d76:	0e 94 31 20 	call	0x4062	; 0x4062 <__fp_pscA>
    3d7a:	38 f0       	brcs	.+14     	; 0x3d8a <__addsf3+0x20>
    3d7c:	0e 94 38 20 	call	0x4070	; 0x4070 <__fp_pscB>
    3d80:	20 f0       	brcs	.+8      	; 0x3d8a <__addsf3+0x20>
    3d82:	39 f4       	brne	.+14     	; 0x3d92 <__addsf3+0x28>
    3d84:	9f 3f       	cpi	r25, 0xFF	; 255
    3d86:	19 f4       	brne	.+6      	; 0x3d8e <__addsf3+0x24>
    3d88:	26 f4       	brtc	.+8      	; 0x3d92 <__addsf3+0x28>
    3d8a:	0c 94 2e 20 	jmp	0x405c	; 0x405c <__fp_nan>
    3d8e:	0e f4       	brtc	.+2      	; 0x3d92 <__addsf3+0x28>
    3d90:	e0 95       	com	r30
    3d92:	e7 fb       	bst	r30, 7
    3d94:	0c 94 28 20 	jmp	0x4050	; 0x4050 <__fp_inf>

00003d98 <__addsf3x>:
__addsf3x():
    3d98:	e9 2f       	mov	r30, r25
    3d9a:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__fp_split3>
    3d9e:	58 f3       	brcs	.-42     	; 0x3d76 <__addsf3+0xc>
    3da0:	ba 17       	cp	r27, r26
    3da2:	62 07       	cpc	r22, r18
    3da4:	73 07       	cpc	r23, r19
    3da6:	84 07       	cpc	r24, r20
    3da8:	95 07       	cpc	r25, r21
    3daa:	20 f0       	brcs	.+8      	; 0x3db4 <__addsf3x+0x1c>
    3dac:	79 f4       	brne	.+30     	; 0x3dcc <__addsf3x+0x34>
    3dae:	a6 f5       	brtc	.+104    	; 0x3e18 <__addsf3x+0x80>
    3db0:	0c 94 72 20 	jmp	0x40e4	; 0x40e4 <__fp_zero>
    3db4:	0e f4       	brtc	.+2      	; 0x3db8 <__addsf3x+0x20>
    3db6:	e0 95       	com	r30
    3db8:	0b 2e       	mov	r0, r27
    3dba:	ba 2f       	mov	r27, r26
    3dbc:	a0 2d       	mov	r26, r0
    3dbe:	0b 01       	movw	r0, r22
    3dc0:	b9 01       	movw	r22, r18
    3dc2:	90 01       	movw	r18, r0
    3dc4:	0c 01       	movw	r0, r24
    3dc6:	ca 01       	movw	r24, r20
    3dc8:	a0 01       	movw	r20, r0
    3dca:	11 24       	eor	r1, r1
    3dcc:	ff 27       	eor	r31, r31
    3dce:	59 1b       	sub	r21, r25
    3dd0:	99 f0       	breq	.+38     	; 0x3df8 <__addsf3x+0x60>
    3dd2:	59 3f       	cpi	r21, 0xF9	; 249
    3dd4:	50 f4       	brcc	.+20     	; 0x3dea <__addsf3x+0x52>
    3dd6:	50 3e       	cpi	r21, 0xE0	; 224
    3dd8:	68 f1       	brcs	.+90     	; 0x3e34 <__addsf3x+0x9c>
    3dda:	1a 16       	cp	r1, r26
    3ddc:	f0 40       	sbci	r31, 0x00	; 0
    3dde:	a2 2f       	mov	r26, r18
    3de0:	23 2f       	mov	r18, r19
    3de2:	34 2f       	mov	r19, r20
    3de4:	44 27       	eor	r20, r20
    3de6:	58 5f       	subi	r21, 0xF8	; 248
    3de8:	f3 cf       	rjmp	.-26     	; 0x3dd0 <__addsf3x+0x38>
    3dea:	46 95       	lsr	r20
    3dec:	37 95       	ror	r19
    3dee:	27 95       	ror	r18
    3df0:	a7 95       	ror	r26
    3df2:	f0 40       	sbci	r31, 0x00	; 0
    3df4:	53 95       	inc	r21
    3df6:	c9 f7       	brne	.-14     	; 0x3dea <__addsf3x+0x52>
    3df8:	7e f4       	brtc	.+30     	; 0x3e18 <__addsf3x+0x80>
    3dfa:	1f 16       	cp	r1, r31
    3dfc:	ba 0b       	sbc	r27, r26
    3dfe:	62 0b       	sbc	r22, r18
    3e00:	73 0b       	sbc	r23, r19
    3e02:	84 0b       	sbc	r24, r20
    3e04:	ba f0       	brmi	.+46     	; 0x3e34 <__addsf3x+0x9c>
    3e06:	91 50       	subi	r25, 0x01	; 1
    3e08:	a1 f0       	breq	.+40     	; 0x3e32 <__addsf3x+0x9a>
    3e0a:	ff 0f       	add	r31, r31
    3e0c:	bb 1f       	adc	r27, r27
    3e0e:	66 1f       	adc	r22, r22
    3e10:	77 1f       	adc	r23, r23
    3e12:	88 1f       	adc	r24, r24
    3e14:	c2 f7       	brpl	.-16     	; 0x3e06 <__addsf3x+0x6e>
    3e16:	0e c0       	rjmp	.+28     	; 0x3e34 <__addsf3x+0x9c>
    3e18:	ba 0f       	add	r27, r26
    3e1a:	62 1f       	adc	r22, r18
    3e1c:	73 1f       	adc	r23, r19
    3e1e:	84 1f       	adc	r24, r20
    3e20:	48 f4       	brcc	.+18     	; 0x3e34 <__addsf3x+0x9c>
    3e22:	87 95       	ror	r24
    3e24:	77 95       	ror	r23
    3e26:	67 95       	ror	r22
    3e28:	b7 95       	ror	r27
    3e2a:	f7 95       	ror	r31
    3e2c:	9e 3f       	cpi	r25, 0xFE	; 254
    3e2e:	08 f0       	brcs	.+2      	; 0x3e32 <__addsf3x+0x9a>
    3e30:	b0 cf       	rjmp	.-160    	; 0x3d92 <__addsf3+0x28>
    3e32:	93 95       	inc	r25
    3e34:	88 0f       	add	r24, r24
    3e36:	08 f0       	brcs	.+2      	; 0x3e3a <__addsf3x+0xa2>
    3e38:	99 27       	eor	r25, r25
    3e3a:	ee 0f       	add	r30, r30
    3e3c:	97 95       	ror	r25
    3e3e:	87 95       	ror	r24
    3e40:	08 95       	ret

00003e42 <__cmpsf2>:
    3e42:	0e 94 04 20 	call	0x4008	; 0x4008 <__fp_cmp>
    3e46:	08 f4       	brcc	.+2      	; 0x3e4a <__cmpsf2+0x8>
    3e48:	81 e0       	ldi	r24, 0x01	; 1
    3e4a:	08 95       	ret

00003e4c <__divsf3>:
    3e4c:	0e 94 3a 1f 	call	0x3e74	; 0x3e74 <__divsf3x>
    3e50:	0c 94 3f 20 	jmp	0x407e	; 0x407e <__fp_round>
    3e54:	0e 94 38 20 	call	0x4070	; 0x4070 <__fp_pscB>
    3e58:	58 f0       	brcs	.+22     	; 0x3e70 <__divsf3+0x24>
    3e5a:	0e 94 31 20 	call	0x4062	; 0x4062 <__fp_pscA>
    3e5e:	40 f0       	brcs	.+16     	; 0x3e70 <__divsf3+0x24>
    3e60:	29 f4       	brne	.+10     	; 0x3e6c <__divsf3+0x20>
    3e62:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    3e64:	29 f0       	breq	.+10     	; 0x3e70 <__divsf3+0x24>
    3e66:	0c 94 28 20 	jmp	0x4050	; 0x4050 <__fp_inf>
    3e6a:	51 11       	cpse	r21, r1
    3e6c:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__fp_szero>
    3e70:	0c 94 2e 20 	jmp	0x405c	; 0x405c <__fp_nan>

00003e74 <__divsf3x>:
__divsf3x():
    3e74:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__fp_split3>
    3e78:	68 f3       	brcs	.-38     	; 0x3e54 <__divsf3+0x8>

00003e7a <__divsf3_pse>:
    3e7a:	99 23       	and	r25, r25
    3e7c:	b1 f3       	breq	.-20     	; 0x3e6a <__divsf3+0x1e>
    3e7e:	55 23       	and	r21, r21
    3e80:	91 f3       	breq	.-28     	; 0x3e66 <__divsf3+0x1a>
    3e82:	95 1b       	sub	r25, r21
    3e84:	55 0b       	sbc	r21, r21
    3e86:	bb 27       	eor	r27, r27
    3e88:	aa 27       	eor	r26, r26
    3e8a:	62 17       	cp	r22, r18
    3e8c:	73 07       	cpc	r23, r19
    3e8e:	84 07       	cpc	r24, r20
    3e90:	38 f0       	brcs	.+14     	; 0x3ea0 <__divsf3_pse+0x26>
    3e92:	9f 5f       	subi	r25, 0xFF	; 255
    3e94:	5f 4f       	sbci	r21, 0xFF	; 255
    3e96:	22 0f       	add	r18, r18
    3e98:	33 1f       	adc	r19, r19
    3e9a:	44 1f       	adc	r20, r20
    3e9c:	aa 1f       	adc	r26, r26
    3e9e:	a9 f3       	breq	.-22     	; 0x3e8a <__divsf3_pse+0x10>
    3ea0:	35 d0       	rcall	.+106    	; 0x3f0c <__divsf3_pse+0x92>
    3ea2:	0e 2e       	mov	r0, r30
    3ea4:	3a f0       	brmi	.+14     	; 0x3eb4 <__divsf3_pse+0x3a>
    3ea6:	e0 e8       	ldi	r30, 0x80	; 128
    3ea8:	32 d0       	rcall	.+100    	; 0x3f0e <__divsf3_pse+0x94>
    3eaa:	91 50       	subi	r25, 0x01	; 1
    3eac:	50 40       	sbci	r21, 0x00	; 0
    3eae:	e6 95       	lsr	r30
    3eb0:	00 1c       	adc	r0, r0
    3eb2:	ca f7       	brpl	.-14     	; 0x3ea6 <__divsf3_pse+0x2c>
    3eb4:	2b d0       	rcall	.+86     	; 0x3f0c <__divsf3_pse+0x92>
    3eb6:	fe 2f       	mov	r31, r30
    3eb8:	29 d0       	rcall	.+82     	; 0x3f0c <__divsf3_pse+0x92>
    3eba:	66 0f       	add	r22, r22
    3ebc:	77 1f       	adc	r23, r23
    3ebe:	88 1f       	adc	r24, r24
    3ec0:	bb 1f       	adc	r27, r27
    3ec2:	26 17       	cp	r18, r22
    3ec4:	37 07       	cpc	r19, r23
    3ec6:	48 07       	cpc	r20, r24
    3ec8:	ab 07       	cpc	r26, r27
    3eca:	b0 e8       	ldi	r27, 0x80	; 128
    3ecc:	09 f0       	breq	.+2      	; 0x3ed0 <__divsf3_pse+0x56>
    3ece:	bb 0b       	sbc	r27, r27
    3ed0:	80 2d       	mov	r24, r0
    3ed2:	bf 01       	movw	r22, r30
    3ed4:	ff 27       	eor	r31, r31
    3ed6:	93 58       	subi	r25, 0x83	; 131
    3ed8:	5f 4f       	sbci	r21, 0xFF	; 255
    3eda:	3a f0       	brmi	.+14     	; 0x3eea <__divsf3_pse+0x70>
    3edc:	9e 3f       	cpi	r25, 0xFE	; 254
    3ede:	51 05       	cpc	r21, r1
    3ee0:	78 f0       	brcs	.+30     	; 0x3f00 <__divsf3_pse+0x86>
    3ee2:	0c 94 28 20 	jmp	0x4050	; 0x4050 <__fp_inf>
    3ee6:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__fp_szero>
    3eea:	5f 3f       	cpi	r21, 0xFF	; 255
    3eec:	e4 f3       	brlt	.-8      	; 0x3ee6 <__divsf3_pse+0x6c>
    3eee:	98 3e       	cpi	r25, 0xE8	; 232
    3ef0:	d4 f3       	brlt	.-12     	; 0x3ee6 <__divsf3_pse+0x6c>
    3ef2:	86 95       	lsr	r24
    3ef4:	77 95       	ror	r23
    3ef6:	67 95       	ror	r22
    3ef8:	b7 95       	ror	r27
    3efa:	f7 95       	ror	r31
    3efc:	9f 5f       	subi	r25, 0xFF	; 255
    3efe:	c9 f7       	brne	.-14     	; 0x3ef2 <__divsf3_pse+0x78>
    3f00:	88 0f       	add	r24, r24
    3f02:	91 1d       	adc	r25, r1
    3f04:	96 95       	lsr	r25
    3f06:	87 95       	ror	r24
    3f08:	97 f9       	bld	r25, 7
    3f0a:	08 95       	ret
    3f0c:	e1 e0       	ldi	r30, 0x01	; 1
    3f0e:	66 0f       	add	r22, r22
    3f10:	77 1f       	adc	r23, r23
    3f12:	88 1f       	adc	r24, r24
    3f14:	bb 1f       	adc	r27, r27
    3f16:	62 17       	cp	r22, r18
    3f18:	73 07       	cpc	r23, r19
    3f1a:	84 07       	cpc	r24, r20
    3f1c:	ba 07       	cpc	r27, r26
    3f1e:	20 f0       	brcs	.+8      	; 0x3f28 <__divsf3_pse+0xae>
    3f20:	62 1b       	sub	r22, r18
    3f22:	73 0b       	sbc	r23, r19
    3f24:	84 0b       	sbc	r24, r20
    3f26:	ba 0b       	sbc	r27, r26
    3f28:	ee 1f       	adc	r30, r30
    3f2a:	88 f7       	brcc	.-30     	; 0x3f0e <__divsf3_pse+0x94>
    3f2c:	e0 95       	com	r30
    3f2e:	08 95       	ret

00003f30 <__fixunssfsi>:
    3f30:	0e 94 58 20 	call	0x40b0	; 0x40b0 <__fp_splitA>
    3f34:	88 f0       	brcs	.+34     	; 0x3f58 <__fixunssfsi+0x28>
    3f36:	9f 57       	subi	r25, 0x7F	; 127
    3f38:	98 f0       	brcs	.+38     	; 0x3f60 <__fixunssfsi+0x30>
    3f3a:	b9 2f       	mov	r27, r25
    3f3c:	99 27       	eor	r25, r25
    3f3e:	b7 51       	subi	r27, 0x17	; 23
    3f40:	b0 f0       	brcs	.+44     	; 0x3f6e <__fixunssfsi+0x3e>
    3f42:	e1 f0       	breq	.+56     	; 0x3f7c <__fixunssfsi+0x4c>
    3f44:	66 0f       	add	r22, r22
    3f46:	77 1f       	adc	r23, r23
    3f48:	88 1f       	adc	r24, r24
    3f4a:	99 1f       	adc	r25, r25
    3f4c:	1a f0       	brmi	.+6      	; 0x3f54 <__fixunssfsi+0x24>
    3f4e:	ba 95       	dec	r27
__fixunssfsi():
    3f50:	c9 f7       	brne	.-14     	; 0x3f44 <__fixunssfsi+0x14>
    3f52:	14 c0       	rjmp	.+40     	; 0x3f7c <__fixunssfsi+0x4c>
    3f54:	b1 30       	cpi	r27, 0x01	; 1
    3f56:	91 f0       	breq	.+36     	; 0x3f7c <__fixunssfsi+0x4c>
    3f58:	0e 94 72 20 	call	0x40e4	; 0x40e4 <__fp_zero>
    3f5c:	b1 e0       	ldi	r27, 0x01	; 1
    3f5e:	08 95       	ret
    3f60:	0c 94 72 20 	jmp	0x40e4	; 0x40e4 <__fp_zero>
    3f64:	67 2f       	mov	r22, r23
    3f66:	78 2f       	mov	r23, r24
    3f68:	88 27       	eor	r24, r24
    3f6a:	b8 5f       	subi	r27, 0xF8	; 248
    3f6c:	39 f0       	breq	.+14     	; 0x3f7c <__fixunssfsi+0x4c>
    3f6e:	b9 3f       	cpi	r27, 0xF9	; 249
    3f70:	cc f3       	brlt	.-14     	; 0x3f64 <__fixunssfsi+0x34>
    3f72:	86 95       	lsr	r24
    3f74:	77 95       	ror	r23
    3f76:	67 95       	ror	r22
    3f78:	b3 95       	inc	r27
    3f7a:	d9 f7       	brne	.-10     	; 0x3f72 <__fixunssfsi+0x42>
    3f7c:	3e f4       	brtc	.+14     	; 0x3f8c <__fixunssfsi+0x5c>
    3f7e:	90 95       	com	r25
    3f80:	80 95       	com	r24
    3f82:	70 95       	com	r23
    3f84:	61 95       	neg	r22
    3f86:	7f 4f       	sbci	r23, 0xFF	; 255
    3f88:	8f 4f       	sbci	r24, 0xFF	; 255
    3f8a:	9f 4f       	sbci	r25, 0xFF	; 255
    3f8c:	08 95       	ret

00003f8e <__floatunsisf>:
__floatunsisf():
    3f8e:	e8 94       	clt
    3f90:	09 c0       	rjmp	.+18     	; 0x3fa4 <__floatsisf+0x12>

00003f92 <__floatsisf>:
    3f92:	97 fb       	bst	r25, 7
    3f94:	3e f4       	brtc	.+14     	; 0x3fa4 <__floatsisf+0x12>
    3f96:	90 95       	com	r25
    3f98:	80 95       	com	r24
    3f9a:	70 95       	com	r23
    3f9c:	61 95       	neg	r22
    3f9e:	7f 4f       	sbci	r23, 0xFF	; 255
    3fa0:	8f 4f       	sbci	r24, 0xFF	; 255
    3fa2:	9f 4f       	sbci	r25, 0xFF	; 255
    3fa4:	99 23       	and	r25, r25
    3fa6:	a9 f0       	breq	.+42     	; 0x3fd2 <__floatsisf+0x40>
    3fa8:	f9 2f       	mov	r31, r25
    3faa:	96 e9       	ldi	r25, 0x96	; 150
    3fac:	bb 27       	eor	r27, r27
    3fae:	93 95       	inc	r25
    3fb0:	f6 95       	lsr	r31
    3fb2:	87 95       	ror	r24
    3fb4:	77 95       	ror	r23
    3fb6:	67 95       	ror	r22
    3fb8:	b7 95       	ror	r27
    3fba:	f1 11       	cpse	r31, r1
    3fbc:	f8 cf       	rjmp	.-16     	; 0x3fae <__floatsisf+0x1c>
    3fbe:	fa f4       	brpl	.+62     	; 0x3ffe <__floatsisf+0x6c>
    3fc0:	bb 0f       	add	r27, r27
    3fc2:	11 f4       	brne	.+4      	; 0x3fc8 <__floatsisf+0x36>
    3fc4:	60 ff       	sbrs	r22, 0
    3fc6:	1b c0       	rjmp	.+54     	; 0x3ffe <__floatsisf+0x6c>
    3fc8:	6f 5f       	subi	r22, 0xFF	; 255
    3fca:	7f 4f       	sbci	r23, 0xFF	; 255
    3fcc:	8f 4f       	sbci	r24, 0xFF	; 255
    3fce:	9f 4f       	sbci	r25, 0xFF	; 255
    3fd0:	16 c0       	rjmp	.+44     	; 0x3ffe <__floatsisf+0x6c>
    3fd2:	88 23       	and	r24, r24
    3fd4:	11 f0       	breq	.+4      	; 0x3fda <__floatsisf+0x48>
    3fd6:	96 e9       	ldi	r25, 0x96	; 150
    3fd8:	11 c0       	rjmp	.+34     	; 0x3ffc <__floatsisf+0x6a>
    3fda:	77 23       	and	r23, r23
    3fdc:	21 f0       	breq	.+8      	; 0x3fe6 <__floatsisf+0x54>
    3fde:	9e e8       	ldi	r25, 0x8E	; 142
    3fe0:	87 2f       	mov	r24, r23
    3fe2:	76 2f       	mov	r23, r22
    3fe4:	05 c0       	rjmp	.+10     	; 0x3ff0 <__floatsisf+0x5e>
    3fe6:	66 23       	and	r22, r22
    3fe8:	71 f0       	breq	.+28     	; 0x4006 <__floatsisf+0x74>
    3fea:	96 e8       	ldi	r25, 0x86	; 134
    3fec:	86 2f       	mov	r24, r22
    3fee:	70 e0       	ldi	r23, 0x00	; 0
    3ff0:	60 e0       	ldi	r22, 0x00	; 0
    3ff2:	2a f0       	brmi	.+10     	; 0x3ffe <__floatsisf+0x6c>
    3ff4:	9a 95       	dec	r25
    3ff6:	66 0f       	add	r22, r22
    3ff8:	77 1f       	adc	r23, r23
    3ffa:	88 1f       	adc	r24, r24
    3ffc:	da f7       	brpl	.-10     	; 0x3ff4 <__floatsisf+0x62>
    3ffe:	88 0f       	add	r24, r24
    4000:	96 95       	lsr	r25
    4002:	87 95       	ror	r24
    4004:	97 f9       	bld	r25, 7
    4006:	08 95       	ret

00004008 <__fp_cmp>:
__fp_cmp():
    4008:	99 0f       	add	r25, r25
    400a:	00 08       	sbc	r0, r0
    400c:	55 0f       	add	r21, r21
    400e:	aa 0b       	sbc	r26, r26
    4010:	e0 e8       	ldi	r30, 0x80	; 128
    4012:	fe ef       	ldi	r31, 0xFE	; 254
    4014:	16 16       	cp	r1, r22
    4016:	17 06       	cpc	r1, r23
    4018:	e8 07       	cpc	r30, r24
    401a:	f9 07       	cpc	r31, r25
    401c:	c0 f0       	brcs	.+48     	; 0x404e <__fp_cmp+0x46>
    401e:	12 16       	cp	r1, r18
    4020:	13 06       	cpc	r1, r19
    4022:	e4 07       	cpc	r30, r20
    4024:	f5 07       	cpc	r31, r21
    4026:	98 f0       	brcs	.+38     	; 0x404e <__fp_cmp+0x46>
    4028:	62 1b       	sub	r22, r18
    402a:	73 0b       	sbc	r23, r19
    402c:	84 0b       	sbc	r24, r20
    402e:	95 0b       	sbc	r25, r21
    4030:	39 f4       	brne	.+14     	; 0x4040 <__fp_cmp+0x38>
    4032:	0a 26       	eor	r0, r26
    4034:	61 f0       	breq	.+24     	; 0x404e <__fp_cmp+0x46>
    4036:	23 2b       	or	r18, r19
    4038:	24 2b       	or	r18, r20
    403a:	25 2b       	or	r18, r21
    403c:	21 f4       	brne	.+8      	; 0x4046 <__fp_cmp+0x3e>
    403e:	08 95       	ret
    4040:	0a 26       	eor	r0, r26
    4042:	09 f4       	brne	.+2      	; 0x4046 <__fp_cmp+0x3e>
    4044:	a1 40       	sbci	r26, 0x01	; 1
    4046:	a6 95       	lsr	r26
    4048:	8f ef       	ldi	r24, 0xFF	; 255
    404a:	81 1d       	adc	r24, r1
    404c:	81 1d       	adc	r24, r1
    404e:	08 95       	ret

00004050 <__fp_inf>:
__fp_inf():
    4050:	97 f9       	bld	r25, 7
    4052:	9f 67       	ori	r25, 0x7F	; 127
    4054:	80 e8       	ldi	r24, 0x80	; 128
    4056:	70 e0       	ldi	r23, 0x00	; 0
    4058:	60 e0       	ldi	r22, 0x00	; 0
    405a:	08 95       	ret

0000405c <__fp_nan>:
__fp_nan():
    405c:	9f ef       	ldi	r25, 0xFF	; 255
    405e:	80 ec       	ldi	r24, 0xC0	; 192
    4060:	08 95       	ret

00004062 <__fp_pscA>:
__fp_pscA():
    4062:	00 24       	eor	r0, r0
    4064:	0a 94       	dec	r0
    4066:	16 16       	cp	r1, r22
    4068:	17 06       	cpc	r1, r23
    406a:	18 06       	cpc	r1, r24
    406c:	09 06       	cpc	r0, r25
    406e:	08 95       	ret

00004070 <__fp_pscB>:
__fp_pscB():
    4070:	00 24       	eor	r0, r0
    4072:	0a 94       	dec	r0
    4074:	12 16       	cp	r1, r18
    4076:	13 06       	cpc	r1, r19
    4078:	14 06       	cpc	r1, r20
    407a:	05 06       	cpc	r0, r21
    407c:	08 95       	ret

0000407e <__fp_round>:
__fp_round():
    407e:	09 2e       	mov	r0, r25
    4080:	03 94       	inc	r0
    4082:	00 0c       	add	r0, r0
    4084:	11 f4       	brne	.+4      	; 0x408a <__fp_round+0xc>
    4086:	88 23       	and	r24, r24
    4088:	52 f0       	brmi	.+20     	; 0x409e <__fp_round+0x20>
    408a:	bb 0f       	add	r27, r27
    408c:	40 f4       	brcc	.+16     	; 0x409e <__fp_round+0x20>
    408e:	bf 2b       	or	r27, r31
    4090:	11 f4       	brne	.+4      	; 0x4096 <__fp_round+0x18>
    4092:	60 ff       	sbrs	r22, 0
    4094:	04 c0       	rjmp	.+8      	; 0x409e <__fp_round+0x20>
    4096:	6f 5f       	subi	r22, 0xFF	; 255
    4098:	7f 4f       	sbci	r23, 0xFF	; 255
    409a:	8f 4f       	sbci	r24, 0xFF	; 255
    409c:	9f 4f       	sbci	r25, 0xFF	; 255
    409e:	08 95       	ret

000040a0 <__fp_split3>:
__fp_split3():
    40a0:	57 fd       	sbrc	r21, 7
    40a2:	90 58       	subi	r25, 0x80	; 128
    40a4:	44 0f       	add	r20, r20
    40a6:	55 1f       	adc	r21, r21
    40a8:	59 f0       	breq	.+22     	; 0x40c0 <__fp_splitA+0x10>
    40aa:	5f 3f       	cpi	r21, 0xFF	; 255
    40ac:	71 f0       	breq	.+28     	; 0x40ca <__fp_splitA+0x1a>
    40ae:	47 95       	ror	r20

000040b0 <__fp_splitA>:
    40b0:	88 0f       	add	r24, r24
    40b2:	97 fb       	bst	r25, 7
    40b4:	99 1f       	adc	r25, r25
    40b6:	61 f0       	breq	.+24     	; 0x40d0 <__fp_splitA+0x20>
    40b8:	9f 3f       	cpi	r25, 0xFF	; 255
    40ba:	79 f0       	breq	.+30     	; 0x40da <__fp_splitA+0x2a>
    40bc:	87 95       	ror	r24
    40be:	08 95       	ret
    40c0:	12 16       	cp	r1, r18
    40c2:	13 06       	cpc	r1, r19
    40c4:	14 06       	cpc	r1, r20
    40c6:	55 1f       	adc	r21, r21
    40c8:	f2 cf       	rjmp	.-28     	; 0x40ae <__fp_split3+0xe>
    40ca:	46 95       	lsr	r20
    40cc:	f1 df       	rcall	.-30     	; 0x40b0 <__fp_splitA>
    40ce:	08 c0       	rjmp	.+16     	; 0x40e0 <__fp_splitA+0x30>
    40d0:	16 16       	cp	r1, r22
    40d2:	17 06       	cpc	r1, r23
    40d4:	18 06       	cpc	r1, r24
    40d6:	99 1f       	adc	r25, r25
    40d8:	f1 cf       	rjmp	.-30     	; 0x40bc <__fp_splitA+0xc>
    40da:	86 95       	lsr	r24
    40dc:	71 05       	cpc	r23, r1
    40de:	61 05       	cpc	r22, r1
    40e0:	08 94       	sec
    40e2:	08 95       	ret

000040e4 <__fp_zero>:
__fp_zero():
    40e4:	e8 94       	clt

000040e6 <__fp_szero>:
    40e6:	bb 27       	eor	r27, r27
    40e8:	66 27       	eor	r22, r22
    40ea:	77 27       	eor	r23, r23
    40ec:	cb 01       	movw	r24, r22
    40ee:	97 f9       	bld	r25, 7
    40f0:	08 95       	ret

000040f2 <__gesf2>:
__gesf2():
    40f2:	0e 94 04 20 	call	0x4008	; 0x4008 <__fp_cmp>
    40f6:	08 f4       	brcc	.+2      	; 0x40fa <__gesf2+0x8>
    40f8:	8f ef       	ldi	r24, 0xFF	; 255
    40fa:	08 95       	ret

000040fc <__mulsf3>:
__mulsf3():
    40fc:	0e 94 91 20 	call	0x4122	; 0x4122 <__mulsf3x>
    4100:	0c 94 3f 20 	jmp	0x407e	; 0x407e <__fp_round>
    4104:	0e 94 31 20 	call	0x4062	; 0x4062 <__fp_pscA>
    4108:	38 f0       	brcs	.+14     	; 0x4118 <__stack+0x19>
    410a:	0e 94 38 20 	call	0x4070	; 0x4070 <__fp_pscB>
    410e:	20 f0       	brcs	.+8      	; 0x4118 <__stack+0x19>
    4110:	95 23       	and	r25, r21
    4112:	11 f0       	breq	.+4      	; 0x4118 <__stack+0x19>
    4114:	0c 94 28 20 	jmp	0x4050	; 0x4050 <__fp_inf>
    4118:	0c 94 2e 20 	jmp	0x405c	; 0x405c <__fp_nan>
    411c:	11 24       	eor	r1, r1
    411e:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__fp_szero>

00004122 <__mulsf3x>:
__mulsf3x():
    4122:	0e 94 50 20 	call	0x40a0	; 0x40a0 <__fp_split3>
    4126:	70 f3       	brcs	.-36     	; 0x4104 <__stack+0x5>

00004128 <__mulsf3_pse>:
    4128:	95 9f       	mul	r25, r21
    412a:	c1 f3       	breq	.-16     	; 0x411c <__stack+0x1d>
    412c:	95 0f       	add	r25, r21
    412e:	50 e0       	ldi	r21, 0x00	; 0
    4130:	55 1f       	adc	r21, r21
    4132:	62 9f       	mul	r22, r18
    4134:	f0 01       	movw	r30, r0
    4136:	72 9f       	mul	r23, r18
    4138:	bb 27       	eor	r27, r27
    413a:	f0 0d       	add	r31, r0
    413c:	b1 1d       	adc	r27, r1
    413e:	63 9f       	mul	r22, r19
    4140:	aa 27       	eor	r26, r26
    4142:	f0 0d       	add	r31, r0
    4144:	b1 1d       	adc	r27, r1
    4146:	aa 1f       	adc	r26, r26
    4148:	64 9f       	mul	r22, r20
    414a:	66 27       	eor	r22, r22
    414c:	b0 0d       	add	r27, r0
    414e:	a1 1d       	adc	r26, r1
    4150:	66 1f       	adc	r22, r22
    4152:	82 9f       	mul	r24, r18
    4154:	22 27       	eor	r18, r18
    4156:	b0 0d       	add	r27, r0
    4158:	a1 1d       	adc	r26, r1
    415a:	62 1f       	adc	r22, r18
    415c:	73 9f       	mul	r23, r19
    415e:	b0 0d       	add	r27, r0
    4160:	a1 1d       	adc	r26, r1
    4162:	62 1f       	adc	r22, r18
    4164:	83 9f       	mul	r24, r19
    4166:	a0 0d       	add	r26, r0
    4168:	61 1d       	adc	r22, r1
    416a:	22 1f       	adc	r18, r18
    416c:	74 9f       	mul	r23, r20
    416e:	33 27       	eor	r19, r19
    4170:	a0 0d       	add	r26, r0
    4172:	61 1d       	adc	r22, r1
    4174:	23 1f       	adc	r18, r19
    4176:	84 9f       	mul	r24, r20
    4178:	60 0d       	add	r22, r0
    417a:	21 1d       	adc	r18, r1
    417c:	82 2f       	mov	r24, r18
    417e:	76 2f       	mov	r23, r22
    4180:	6a 2f       	mov	r22, r26
    4182:	11 24       	eor	r1, r1
    4184:	9f 57       	subi	r25, 0x7F	; 127
    4186:	50 40       	sbci	r21, 0x00	; 0
    4188:	9a f0       	brmi	.+38     	; 0x41b0 <__mulsf3_pse+0x88>
    418a:	f1 f0       	breq	.+60     	; 0x41c8 <__mulsf3_pse+0xa0>
    418c:	88 23       	and	r24, r24
    418e:	4a f0       	brmi	.+18     	; 0x41a2 <__mulsf3_pse+0x7a>
    4190:	ee 0f       	add	r30, r30
    4192:	ff 1f       	adc	r31, r31
    4194:	bb 1f       	adc	r27, r27
    4196:	66 1f       	adc	r22, r22
    4198:	77 1f       	adc	r23, r23
    419a:	88 1f       	adc	r24, r24
    419c:	91 50       	subi	r25, 0x01	; 1
    419e:	50 40       	sbci	r21, 0x00	; 0
    41a0:	a9 f7       	brne	.-22     	; 0x418c <__mulsf3_pse+0x64>
    41a2:	9e 3f       	cpi	r25, 0xFE	; 254
    41a4:	51 05       	cpc	r21, r1
    41a6:	80 f0       	brcs	.+32     	; 0x41c8 <__mulsf3_pse+0xa0>
    41a8:	0c 94 28 20 	jmp	0x4050	; 0x4050 <__fp_inf>
    41ac:	0c 94 73 20 	jmp	0x40e6	; 0x40e6 <__fp_szero>
    41b0:	5f 3f       	cpi	r21, 0xFF	; 255
    41b2:	e4 f3       	brlt	.-8      	; 0x41ac <__mulsf3_pse+0x84>
    41b4:	98 3e       	cpi	r25, 0xE8	; 232
    41b6:	d4 f3       	brlt	.-12     	; 0x41ac <__mulsf3_pse+0x84>
    41b8:	86 95       	lsr	r24
    41ba:	77 95       	ror	r23
    41bc:	67 95       	ror	r22
    41be:	b7 95       	ror	r27
    41c0:	f7 95       	ror	r31
    41c2:	e7 95       	ror	r30
    41c4:	9f 5f       	subi	r25, 0xFF	; 255
    41c6:	c1 f7       	brne	.-16     	; 0x41b8 <__mulsf3_pse+0x90>
    41c8:	fe 2b       	or	r31, r30
    41ca:	88 0f       	add	r24, r24
    41cc:	91 1d       	adc	r25, r1
    41ce:	96 95       	lsr	r25
    41d0:	87 95       	ror	r24
    41d2:	97 f9       	bld	r25, 7
    41d4:	08 95       	ret

000041d6 <__unordsf2>:
    41d6:	0e 94 04 20 	call	0x4008	; 0x4008 <__fp_cmp>
    41da:	88 0b       	sbc	r24, r24
    41dc:	99 0b       	sbc	r25, r25
    41de:	08 95       	ret

000041e0 <__udivmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    41e0:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    41e2:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    41e4:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    41e6:	07 c0       	rjmp	.+14     	; 0x41f6 <__udivmodhi4_ep>

000041e8 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    41e8:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    41ea:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    41ec:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    41ee:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    41f0:	10 f0       	brcs	.+4      	; 0x41f6 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    41f2:	a6 1b       	sub	r26, r22
__udivmodhi4_loop():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    41f4:	b7 0b       	sbc	r27, r23

000041f6 <__udivmodhi4_ep>:
__udivmodhi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    41f6:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    41f8:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    41fa:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    41fc:	a9 f7       	brne	.-22     	; 0x41e8 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    41fe:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    4200:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    4202:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    4204:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    4206:	08 95       	ret

00004208 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    4208:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    420a:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    420c:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    420e:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    4210:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    4212:	0d c0       	rjmp	.+26     	; 0x422e <__udivmodsi4_ep>

00004214 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    4214:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    4216:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    4218:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    421a:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    421c:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    421e:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    4220:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    4222:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    4224:	20 f0       	brcs	.+8      	; 0x422e <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    4226:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    4228:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    422a:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    422c:	f5 0b       	sbc	r31, r21

0000422e <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    422e:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    4230:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    4232:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    4234:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    4236:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    4238:	69 f7       	brne	.-38     	; 0x4214 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    423a:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    423c:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    423e:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    4240:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    4242:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    4244:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    4246:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    4248:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    424a:	08 95       	ret

0000424c <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    424c:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    424e:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    4250:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    4252:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    4254:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    4256:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    4258:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    425a:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    425c:	09 94       	ijmp

0000425e <dtostrf>:
dtostrf():
    425e:	ef 92       	push	r14
    4260:	0f 93       	push	r16
    4262:	1f 93       	push	r17
    4264:	cf 93       	push	r28
    4266:	df 93       	push	r29
    4268:	e8 01       	movw	r28, r16
    426a:	34 e0       	ldi	r19, 0x04	; 4
    426c:	47 fd       	sbrc	r20, 7
    426e:	34 e1       	ldi	r19, 0x14	; 20
    4270:	04 2e       	mov	r0, r20
    4272:	00 0c       	add	r0, r0
    4274:	55 0b       	sbc	r21, r21
    4276:	57 ff       	sbrs	r21, 7
    4278:	03 c0       	rjmp	.+6      	; 0x4280 <dtostrf+0x22>
    427a:	51 95       	neg	r21
    427c:	41 95       	neg	r20
    427e:	51 09       	sbc	r21, r1
    4280:	e3 2e       	mov	r14, r19
    4282:	02 2f       	mov	r16, r18
    4284:	24 2f       	mov	r18, r20
    4286:	ae 01       	movw	r20, r28
    4288:	0e 94 87 23 	call	0x470e	; 0x470e <dtoa_prf>
    428c:	ce 01       	movw	r24, r28
    428e:	df 91       	pop	r29
    4290:	cf 91       	pop	r28
    4292:	1f 91       	pop	r17
    4294:	0f 91       	pop	r16
    4296:	ef 90       	pop	r14
    4298:	08 95       	ret

0000429a <strcpy>:
strcpy():
    429a:	fb 01       	movw	r30, r22
    429c:	dc 01       	movw	r26, r24
    429e:	01 90       	ld	r0, Z+
    42a0:	0d 92       	st	X+, r0
    42a2:	00 20       	and	r0, r0
    42a4:	e1 f7       	brne	.-8      	; 0x429e <strcpy+0x4>
    42a6:	08 95       	ret

000042a8 <sprintf>:
sprintf():
    42a8:	0f 93       	push	r16
    42aa:	1f 93       	push	r17
    42ac:	cf 93       	push	r28
    42ae:	df 93       	push	r29
    42b0:	cd b7       	in	r28, 0x3d	; 61
    42b2:	de b7       	in	r29, 0x3e	; 62
    42b4:	2e 97       	sbiw	r28, 0x0e	; 14
    42b6:	0f b6       	in	r0, 0x3f	; 63
    42b8:	f8 94       	cli
    42ba:	de bf       	out	0x3e, r29	; 62
    42bc:	0f be       	out	0x3f, r0	; 63
    42be:	cd bf       	out	0x3d, r28	; 61
    42c0:	0d 89       	ldd	r16, Y+21	; 0x15
    42c2:	1e 89       	ldd	r17, Y+22	; 0x16
    42c4:	86 e0       	ldi	r24, 0x06	; 6
    42c6:	8c 83       	std	Y+4, r24	; 0x04
    42c8:	1a 83       	std	Y+2, r17	; 0x02
    42ca:	09 83       	std	Y+1, r16	; 0x01
    42cc:	8f ef       	ldi	r24, 0xFF	; 255
    42ce:	9f e7       	ldi	r25, 0x7F	; 127
    42d0:	9e 83       	std	Y+6, r25	; 0x06
    42d2:	8d 83       	std	Y+5, r24	; 0x05
    42d4:	ae 01       	movw	r20, r28
    42d6:	47 5e       	subi	r20, 0xE7	; 231
    42d8:	5f 4f       	sbci	r21, 0xFF	; 255
    42da:	6f 89       	ldd	r22, Y+23	; 0x17
    42dc:	78 8d       	ldd	r23, Y+24	; 0x18
    42de:	ce 01       	movw	r24, r28
    42e0:	01 96       	adiw	r24, 0x01	; 1
    42e2:	0e 94 84 21 	call	0x4308	; 0x4308 <vfprintf>
    42e6:	2f 81       	ldd	r18, Y+7	; 0x07
    42e8:	38 85       	ldd	r19, Y+8	; 0x08
    42ea:	02 0f       	add	r16, r18
    42ec:	13 1f       	adc	r17, r19
    42ee:	f8 01       	movw	r30, r16
    42f0:	10 82       	st	Z, r1
    42f2:	2e 96       	adiw	r28, 0x0e	; 14
    42f4:	0f b6       	in	r0, 0x3f	; 63
    42f6:	f8 94       	cli
    42f8:	de bf       	out	0x3e, r29	; 62
    42fa:	0f be       	out	0x3f, r0	; 63
    42fc:	cd bf       	out	0x3d, r28	; 61
    42fe:	df 91       	pop	r29
    4300:	cf 91       	pop	r28
    4302:	1f 91       	pop	r17
    4304:	0f 91       	pop	r16
    4306:	08 95       	ret

00004308 <vfprintf>:
vfprintf():
    4308:	2f 92       	push	r2
    430a:	3f 92       	push	r3
    430c:	4f 92       	push	r4
    430e:	5f 92       	push	r5
    4310:	6f 92       	push	r6
    4312:	7f 92       	push	r7
    4314:	8f 92       	push	r8
    4316:	9f 92       	push	r9
    4318:	af 92       	push	r10
    431a:	bf 92       	push	r11
    431c:	cf 92       	push	r12
    431e:	df 92       	push	r13
    4320:	ef 92       	push	r14
    4322:	ff 92       	push	r15
    4324:	0f 93       	push	r16
    4326:	1f 93       	push	r17
    4328:	cf 93       	push	r28
    432a:	df 93       	push	r29
    432c:	cd b7       	in	r28, 0x3d	; 61
    432e:	de b7       	in	r29, 0x3e	; 62
    4330:	2b 97       	sbiw	r28, 0x0b	; 11
    4332:	0f b6       	in	r0, 0x3f	; 63
    4334:	f8 94       	cli
    4336:	de bf       	out	0x3e, r29	; 62
    4338:	0f be       	out	0x3f, r0	; 63
    433a:	cd bf       	out	0x3d, r28	; 61
    433c:	7c 01       	movw	r14, r24
    433e:	3b 01       	movw	r6, r22
    4340:	8a 01       	movw	r16, r20
    4342:	fc 01       	movw	r30, r24
    4344:	17 82       	std	Z+7, r1	; 0x07
    4346:	16 82       	std	Z+6, r1	; 0x06
    4348:	83 81       	ldd	r24, Z+3	; 0x03
    434a:	81 ff       	sbrs	r24, 1
    434c:	dd c1       	rjmp	.+954    	; 0x4708 <vfprintf+0x400>
    434e:	ce 01       	movw	r24, r28
    4350:	01 96       	adiw	r24, 0x01	; 1
    4352:	5c 01       	movw	r10, r24
    4354:	f7 01       	movw	r30, r14
    4356:	93 81       	ldd	r25, Z+3	; 0x03
    4358:	f3 01       	movw	r30, r6
    435a:	93 fd       	sbrc	r25, 3
    435c:	85 91       	lpm	r24, Z+
    435e:	93 ff       	sbrs	r25, 3
    4360:	81 91       	ld	r24, Z+
    4362:	3f 01       	movw	r6, r30
    4364:	88 23       	and	r24, r24
    4366:	09 f4       	brne	.+2      	; 0x436a <vfprintf+0x62>
    4368:	53 c1       	rjmp	.+678    	; 0x4610 <vfprintf+0x308>
    436a:	85 32       	cpi	r24, 0x25	; 37
    436c:	39 f4       	brne	.+14     	; 0x437c <vfprintf+0x74>
    436e:	93 fd       	sbrc	r25, 3
    4370:	85 91       	lpm	r24, Z+
    4372:	93 ff       	sbrs	r25, 3
    4374:	81 91       	ld	r24, Z+
    4376:	3f 01       	movw	r6, r30
    4378:	85 32       	cpi	r24, 0x25	; 37
    437a:	29 f4       	brne	.+10     	; 0x4386 <vfprintf+0x7e>
    437c:	b7 01       	movw	r22, r14
    437e:	90 e0       	ldi	r25, 0x00	; 0
    4380:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <fputc>
    4384:	e7 cf       	rjmp	.-50     	; 0x4354 <vfprintf+0x4c>
    4386:	91 2c       	mov	r9, r1
    4388:	21 2c       	mov	r2, r1
    438a:	31 2c       	mov	r3, r1
    438c:	ff e1       	ldi	r31, 0x1F	; 31
    438e:	f3 15       	cp	r31, r3
    4390:	38 f0       	brcs	.+14     	; 0x43a0 <vfprintf+0x98>
    4392:	8b 32       	cpi	r24, 0x2B	; 43
    4394:	11 f1       	breq	.+68     	; 0x43da <vfprintf+0xd2>
    4396:	90 f4       	brcc	.+36     	; 0x43bc <vfprintf+0xb4>
    4398:	80 32       	cpi	r24, 0x20	; 32
    439a:	09 f1       	breq	.+66     	; 0x43de <vfprintf+0xd6>
    439c:	83 32       	cpi	r24, 0x23	; 35
    439e:	29 f1       	breq	.+74     	; 0x43ea <vfprintf+0xe2>
    43a0:	37 fc       	sbrc	r3, 7
    43a2:	3c c0       	rjmp	.+120    	; 0x441c <vfprintf+0x114>
    43a4:	20 ed       	ldi	r18, 0xD0	; 208
    43a6:	28 0f       	add	r18, r24
    43a8:	2a 30       	cpi	r18, 0x0A	; 10
    43aa:	50 f5       	brcc	.+84     	; 0x4400 <vfprintf+0xf8>
    43ac:	36 fe       	sbrs	r3, 6
    43ae:	20 c0       	rjmp	.+64     	; 0x43f0 <vfprintf+0xe8>
    43b0:	8a e0       	ldi	r24, 0x0A	; 10
    43b2:	98 9e       	mul	r9, r24
    43b4:	20 0d       	add	r18, r0
    43b6:	11 24       	eor	r1, r1
    43b8:	92 2e       	mov	r9, r18
    43ba:	06 c0       	rjmp	.+12     	; 0x43c8 <vfprintf+0xc0>
    43bc:	8d 32       	cpi	r24, 0x2D	; 45
    43be:	91 f0       	breq	.+36     	; 0x43e4 <vfprintf+0xdc>
    43c0:	80 33       	cpi	r24, 0x30	; 48
    43c2:	71 f7       	brne	.-36     	; 0x43a0 <vfprintf+0x98>
    43c4:	68 94       	set
    43c6:	30 f8       	bld	r3, 0
    43c8:	f3 01       	movw	r30, r6
    43ca:	93 fd       	sbrc	r25, 3
    43cc:	85 91       	lpm	r24, Z+
    43ce:	93 ff       	sbrs	r25, 3
    43d0:	81 91       	ld	r24, Z+
    43d2:	3f 01       	movw	r6, r30
    43d4:	81 11       	cpse	r24, r1
    43d6:	da cf       	rjmp	.-76     	; 0x438c <vfprintf+0x84>
    43d8:	21 c0       	rjmp	.+66     	; 0x441c <vfprintf+0x114>
    43da:	68 94       	set
    43dc:	31 f8       	bld	r3, 1
    43de:	68 94       	set
    43e0:	32 f8       	bld	r3, 2
    43e2:	f2 cf       	rjmp	.-28     	; 0x43c8 <vfprintf+0xc0>
    43e4:	68 94       	set
    43e6:	33 f8       	bld	r3, 3
    43e8:	ef cf       	rjmp	.-34     	; 0x43c8 <vfprintf+0xc0>
    43ea:	68 94       	set
    43ec:	34 f8       	bld	r3, 4
    43ee:	ec cf       	rjmp	.-40     	; 0x43c8 <vfprintf+0xc0>
    43f0:	ea e0       	ldi	r30, 0x0A	; 10
    43f2:	2e 9e       	mul	r2, r30
    43f4:	20 0d       	add	r18, r0
    43f6:	11 24       	eor	r1, r1
    43f8:	22 2e       	mov	r2, r18
    43fa:	68 94       	set
    43fc:	35 f8       	bld	r3, 5
    43fe:	e4 cf       	rjmp	.-56     	; 0x43c8 <vfprintf+0xc0>
    4400:	8e 32       	cpi	r24, 0x2E	; 46
    4402:	29 f4       	brne	.+10     	; 0x440e <vfprintf+0x106>
    4404:	36 fc       	sbrc	r3, 6
    4406:	04 c1       	rjmp	.+520    	; 0x4610 <vfprintf+0x308>
    4408:	68 94       	set
    440a:	36 f8       	bld	r3, 6
    440c:	dd cf       	rjmp	.-70     	; 0x43c8 <vfprintf+0xc0>
    440e:	8c 36       	cpi	r24, 0x6C	; 108
    4410:	19 f4       	brne	.+6      	; 0x4418 <vfprintf+0x110>
    4412:	68 94       	set
    4414:	37 f8       	bld	r3, 7
    4416:	d8 cf       	rjmp	.-80     	; 0x43c8 <vfprintf+0xc0>
    4418:	88 36       	cpi	r24, 0x68	; 104
    441a:	b1 f2       	breq	.-84     	; 0x43c8 <vfprintf+0xc0>
    441c:	98 2f       	mov	r25, r24
    441e:	9f 7d       	andi	r25, 0xDF	; 223
    4420:	95 54       	subi	r25, 0x45	; 69
    4422:	93 30       	cpi	r25, 0x03	; 3
    4424:	e0 f0       	brcs	.+56     	; 0x445e <vfprintf+0x156>
    4426:	83 36       	cpi	r24, 0x63	; 99
    4428:	a1 f1       	breq	.+104    	; 0x4492 <vfprintf+0x18a>
    442a:	83 37       	cpi	r24, 0x73	; 115
    442c:	c1 f1       	breq	.+112    	; 0x449e <vfprintf+0x196>
    442e:	83 35       	cpi	r24, 0x53	; 83
    4430:	09 f0       	breq	.+2      	; 0x4434 <vfprintf+0x12c>
    4432:	63 c0       	rjmp	.+198    	; 0x44fa <vfprintf+0x1f2>
    4434:	28 01       	movw	r4, r16
    4436:	f2 e0       	ldi	r31, 0x02	; 2
    4438:	4f 0e       	add	r4, r31
    443a:	51 1c       	adc	r5, r1
    443c:	f8 01       	movw	r30, r16
    443e:	c0 80       	ld	r12, Z
    4440:	d1 80       	ldd	r13, Z+1	; 0x01
    4442:	69 2d       	mov	r22, r9
    4444:	70 e0       	ldi	r23, 0x00	; 0
    4446:	36 fc       	sbrc	r3, 6
    4448:	02 c0       	rjmp	.+4      	; 0x444e <vfprintf+0x146>
    444a:	6f ef       	ldi	r22, 0xFF	; 255
    444c:	7f ef       	ldi	r23, 0xFF	; 255
    444e:	c6 01       	movw	r24, r12
    4450:	0e 94 db 25 	call	0x4bb6	; 0x4bb6 <strnlen_P>
    4454:	4c 01       	movw	r8, r24
    4456:	68 94       	set
    4458:	37 f8       	bld	r3, 7
    445a:	82 01       	movw	r16, r4
    445c:	0a c0       	rjmp	.+20     	; 0x4472 <vfprintf+0x16a>
    445e:	0c 5f       	subi	r16, 0xFC	; 252
    4460:	1f 4f       	sbci	r17, 0xFF	; 255
    4462:	ff e3       	ldi	r31, 0x3F	; 63
    4464:	f9 83       	std	Y+1, r31	; 0x01
    4466:	88 24       	eor	r8, r8
    4468:	83 94       	inc	r8
    446a:	91 2c       	mov	r9, r1
    446c:	65 01       	movw	r12, r10
    446e:	e8 94       	clt
    4470:	37 f8       	bld	r3, 7
    4472:	33 fe       	sbrs	r3, 3
    4474:	2d c0       	rjmp	.+90     	; 0x44d0 <vfprintf+0x1c8>
    4476:	52 2c       	mov	r5, r2
    4478:	81 14       	cp	r8, r1
    447a:	91 04       	cpc	r9, r1
    447c:	71 f5       	brne	.+92     	; 0x44da <vfprintf+0x1d2>
    447e:	55 20       	and	r5, r5
    4480:	09 f4       	brne	.+2      	; 0x4484 <vfprintf+0x17c>
    4482:	68 cf       	rjmp	.-304    	; 0x4354 <vfprintf+0x4c>
    4484:	b7 01       	movw	r22, r14
    4486:	80 e2       	ldi	r24, 0x20	; 32
    4488:	90 e0       	ldi	r25, 0x00	; 0
    448a:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <fputc>
    448e:	5a 94       	dec	r5
    4490:	f6 cf       	rjmp	.-20     	; 0x447e <vfprintf+0x176>
    4492:	f8 01       	movw	r30, r16
    4494:	80 81       	ld	r24, Z
    4496:	89 83       	std	Y+1, r24	; 0x01
    4498:	0e 5f       	subi	r16, 0xFE	; 254
    449a:	1f 4f       	sbci	r17, 0xFF	; 255
    449c:	e4 cf       	rjmp	.-56     	; 0x4466 <vfprintf+0x15e>
    449e:	28 01       	movw	r4, r16
    44a0:	f2 e0       	ldi	r31, 0x02	; 2
    44a2:	4f 0e       	add	r4, r31
    44a4:	51 1c       	adc	r5, r1
    44a6:	f8 01       	movw	r30, r16
    44a8:	c0 80       	ld	r12, Z
    44aa:	d1 80       	ldd	r13, Z+1	; 0x01
    44ac:	69 2d       	mov	r22, r9
    44ae:	70 e0       	ldi	r23, 0x00	; 0
    44b0:	36 fc       	sbrc	r3, 6
    44b2:	02 c0       	rjmp	.+4      	; 0x44b8 <vfprintf+0x1b0>
    44b4:	6f ef       	ldi	r22, 0xFF	; 255
    44b6:	7f ef       	ldi	r23, 0xFF	; 255
    44b8:	c6 01       	movw	r24, r12
    44ba:	0e 94 e6 25 	call	0x4bcc	; 0x4bcc <strnlen>
    44be:	4c 01       	movw	r8, r24
    44c0:	82 01       	movw	r16, r4
    44c2:	d5 cf       	rjmp	.-86     	; 0x446e <vfprintf+0x166>
    44c4:	b7 01       	movw	r22, r14
    44c6:	80 e2       	ldi	r24, 0x20	; 32
    44c8:	90 e0       	ldi	r25, 0x00	; 0
    44ca:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <fputc>
    44ce:	2a 94       	dec	r2
    44d0:	28 14       	cp	r2, r8
    44d2:	19 04       	cpc	r1, r9
    44d4:	09 f0       	breq	.+2      	; 0x44d8 <vfprintf+0x1d0>
    44d6:	b0 f7       	brcc	.-20     	; 0x44c4 <vfprintf+0x1bc>
    44d8:	ce cf       	rjmp	.-100    	; 0x4476 <vfprintf+0x16e>
    44da:	f6 01       	movw	r30, r12
    44dc:	37 fc       	sbrc	r3, 7
    44de:	85 91       	lpm	r24, Z+
    44e0:	37 fe       	sbrs	r3, 7
    44e2:	81 91       	ld	r24, Z+
    44e4:	6f 01       	movw	r12, r30
    44e6:	b7 01       	movw	r22, r14
    44e8:	90 e0       	ldi	r25, 0x00	; 0
    44ea:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <fputc>
    44ee:	51 10       	cpse	r5, r1
    44f0:	5a 94       	dec	r5
    44f2:	f1 e0       	ldi	r31, 0x01	; 1
    44f4:	8f 1a       	sub	r8, r31
    44f6:	91 08       	sbc	r9, r1
    44f8:	bf cf       	rjmp	.-130    	; 0x4478 <vfprintf+0x170>
    44fa:	84 36       	cpi	r24, 0x64	; 100
    44fc:	19 f0       	breq	.+6      	; 0x4504 <vfprintf+0x1fc>
    44fe:	89 36       	cpi	r24, 0x69	; 105
    4500:	09 f0       	breq	.+2      	; 0x4504 <vfprintf+0x1fc>
    4502:	77 c0       	rjmp	.+238    	; 0x45f2 <vfprintf+0x2ea>
    4504:	f8 01       	movw	r30, r16
    4506:	37 fe       	sbrs	r3, 7
    4508:	6b c0       	rjmp	.+214    	; 0x45e0 <vfprintf+0x2d8>
    450a:	60 81       	ld	r22, Z
    450c:	71 81       	ldd	r23, Z+1	; 0x01
    450e:	82 81       	ldd	r24, Z+2	; 0x02
    4510:	93 81       	ldd	r25, Z+3	; 0x03
    4512:	0c 5f       	subi	r16, 0xFC	; 252
    4514:	1f 4f       	sbci	r17, 0xFF	; 255
    4516:	f3 2d       	mov	r31, r3
    4518:	ff 76       	andi	r31, 0x6F	; 111
    451a:	3f 2e       	mov	r3, r31
    451c:	97 ff       	sbrs	r25, 7
    451e:	09 c0       	rjmp	.+18     	; 0x4532 <vfprintf+0x22a>
    4520:	90 95       	com	r25
    4522:	80 95       	com	r24
    4524:	70 95       	com	r23
    4526:	61 95       	neg	r22
    4528:	7f 4f       	sbci	r23, 0xFF	; 255
    452a:	8f 4f       	sbci	r24, 0xFF	; 255
    452c:	9f 4f       	sbci	r25, 0xFF	; 255
    452e:	68 94       	set
    4530:	37 f8       	bld	r3, 7
    4532:	2a e0       	ldi	r18, 0x0A	; 10
    4534:	30 e0       	ldi	r19, 0x00	; 0
    4536:	a5 01       	movw	r20, r10
    4538:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__ultoa_invert>
    453c:	c8 2e       	mov	r12, r24
    453e:	ca 18       	sub	r12, r10
    4540:	8c 2c       	mov	r8, r12
    4542:	43 2c       	mov	r4, r3
    4544:	36 fe       	sbrs	r3, 6
    4546:	0c c0       	rjmp	.+24     	; 0x4560 <vfprintf+0x258>
    4548:	e8 94       	clt
    454a:	40 f8       	bld	r4, 0
    454c:	c9 14       	cp	r12, r9
    454e:	40 f4       	brcc	.+16     	; 0x4560 <vfprintf+0x258>
    4550:	34 fe       	sbrs	r3, 4
    4552:	05 c0       	rjmp	.+10     	; 0x455e <vfprintf+0x256>
    4554:	32 fc       	sbrc	r3, 2
    4556:	03 c0       	rjmp	.+6      	; 0x455e <vfprintf+0x256>
    4558:	f3 2d       	mov	r31, r3
    455a:	fe 7e       	andi	r31, 0xEE	; 238
    455c:	4f 2e       	mov	r4, r31
    455e:	89 2c       	mov	r8, r9
    4560:	44 fe       	sbrs	r4, 4
    4562:	aa c0       	rjmp	.+340    	; 0x46b8 <vfprintf+0x3b0>
    4564:	fe 01       	movw	r30, r28
    4566:	ec 0d       	add	r30, r12
    4568:	f1 1d       	adc	r31, r1
    456a:	80 81       	ld	r24, Z
    456c:	80 33       	cpi	r24, 0x30	; 48
    456e:	09 f0       	breq	.+2      	; 0x4572 <vfprintf+0x26a>
    4570:	9c c0       	rjmp	.+312    	; 0x46aa <vfprintf+0x3a2>
    4572:	24 2d       	mov	r18, r4
    4574:	29 7e       	andi	r18, 0xE9	; 233
    4576:	42 2e       	mov	r4, r18
    4578:	84 2d       	mov	r24, r4
    457a:	88 70       	andi	r24, 0x08	; 8
    457c:	58 2e       	mov	r5, r24
    457e:	43 fc       	sbrc	r4, 3
    4580:	aa c0       	rjmp	.+340    	; 0x46d6 <vfprintf+0x3ce>
    4582:	40 fe       	sbrs	r4, 0
    4584:	a4 c0       	rjmp	.+328    	; 0x46ce <vfprintf+0x3c6>
    4586:	9c 2c       	mov	r9, r12
    4588:	82 14       	cp	r8, r2
    458a:	18 f4       	brcc	.+6      	; 0x4592 <vfprintf+0x28a>
    458c:	2c 0c       	add	r2, r12
    458e:	92 2c       	mov	r9, r2
    4590:	98 18       	sub	r9, r8
    4592:	44 fe       	sbrs	r4, 4
    4594:	a6 c0       	rjmp	.+332    	; 0x46e2 <vfprintf+0x3da>
    4596:	b7 01       	movw	r22, r14
    4598:	80 e3       	ldi	r24, 0x30	; 48
    459a:	90 e0       	ldi	r25, 0x00	; 0
    459c:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <fputc>
    45a0:	42 fe       	sbrs	r4, 2
    45a2:	09 c0       	rjmp	.+18     	; 0x45b6 <vfprintf+0x2ae>
    45a4:	88 e7       	ldi	r24, 0x78	; 120
    45a6:	90 e0       	ldi	r25, 0x00	; 0
    45a8:	41 fe       	sbrs	r4, 1
    45aa:	02 c0       	rjmp	.+4      	; 0x45b0 <vfprintf+0x2a8>
    45ac:	88 e5       	ldi	r24, 0x58	; 88
    45ae:	90 e0       	ldi	r25, 0x00	; 0
    45b0:	b7 01       	movw	r22, r14
    45b2:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <fputc>
    45b6:	c9 14       	cp	r12, r9
    45b8:	08 f4       	brcc	.+2      	; 0x45bc <vfprintf+0x2b4>
    45ba:	9f c0       	rjmp	.+318    	; 0x46fa <vfprintf+0x3f2>
    45bc:	ca 94       	dec	r12
    45be:	d1 2c       	mov	r13, r1
    45c0:	9f ef       	ldi	r25, 0xFF	; 255
    45c2:	c9 1a       	sub	r12, r25
    45c4:	d9 0a       	sbc	r13, r25
    45c6:	ca 0c       	add	r12, r10
    45c8:	db 1c       	adc	r13, r11
    45ca:	f6 01       	movw	r30, r12
    45cc:	82 91       	ld	r24, -Z
    45ce:	6f 01       	movw	r12, r30
    45d0:	b7 01       	movw	r22, r14
    45d2:	90 e0       	ldi	r25, 0x00	; 0
    45d4:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <fputc>
    45d8:	ac 14       	cp	r10, r12
    45da:	bd 04       	cpc	r11, r13
    45dc:	b1 f7       	brne	.-20     	; 0x45ca <vfprintf+0x2c2>
    45de:	4f cf       	rjmp	.-354    	; 0x447e <vfprintf+0x176>
    45e0:	60 81       	ld	r22, Z
    45e2:	71 81       	ldd	r23, Z+1	; 0x01
    45e4:	07 2e       	mov	r0, r23
    45e6:	00 0c       	add	r0, r0
    45e8:	88 0b       	sbc	r24, r24
    45ea:	99 0b       	sbc	r25, r25
    45ec:	0e 5f       	subi	r16, 0xFE	; 254
    45ee:	1f 4f       	sbci	r17, 0xFF	; 255
    45f0:	92 cf       	rjmp	.-220    	; 0x4516 <vfprintf+0x20e>
    45f2:	d3 2c       	mov	r13, r3
    45f4:	e8 94       	clt
    45f6:	d4 f8       	bld	r13, 4
    45f8:	2a e0       	ldi	r18, 0x0A	; 10
    45fa:	30 e0       	ldi	r19, 0x00	; 0
    45fc:	85 37       	cpi	r24, 0x75	; 117
    45fe:	e1 f1       	breq	.+120    	; 0x4678 <vfprintf+0x370>
    4600:	23 2d       	mov	r18, r3
    4602:	29 7f       	andi	r18, 0xF9	; 249
    4604:	d2 2e       	mov	r13, r18
    4606:	8f 36       	cpi	r24, 0x6F	; 111
    4608:	a9 f1       	breq	.+106    	; 0x4674 <vfprintf+0x36c>
    460a:	f0 f4       	brcc	.+60     	; 0x4648 <vfprintf+0x340>
    460c:	88 35       	cpi	r24, 0x58	; 88
    460e:	51 f1       	breq	.+84     	; 0x4664 <vfprintf+0x35c>
    4610:	f7 01       	movw	r30, r14
    4612:	86 81       	ldd	r24, Z+6	; 0x06
    4614:	97 81       	ldd	r25, Z+7	; 0x07
    4616:	2b 96       	adiw	r28, 0x0b	; 11
    4618:	0f b6       	in	r0, 0x3f	; 63
    461a:	f8 94       	cli
    461c:	de bf       	out	0x3e, r29	; 62
    461e:	0f be       	out	0x3f, r0	; 63
    4620:	cd bf       	out	0x3d, r28	; 61
    4622:	df 91       	pop	r29
    4624:	cf 91       	pop	r28
    4626:	1f 91       	pop	r17
    4628:	0f 91       	pop	r16
    462a:	ff 90       	pop	r15
    462c:	ef 90       	pop	r14
    462e:	df 90       	pop	r13
    4630:	cf 90       	pop	r12
    4632:	bf 90       	pop	r11
    4634:	af 90       	pop	r10
    4636:	9f 90       	pop	r9
    4638:	8f 90       	pop	r8
    463a:	7f 90       	pop	r7
    463c:	6f 90       	pop	r6
    463e:	5f 90       	pop	r5
    4640:	4f 90       	pop	r4
    4642:	3f 90       	pop	r3
    4644:	2f 90       	pop	r2
    4646:	08 95       	ret
    4648:	80 37       	cpi	r24, 0x70	; 112
    464a:	49 f0       	breq	.+18     	; 0x465e <vfprintf+0x356>
    464c:	88 37       	cpi	r24, 0x78	; 120
    464e:	01 f7       	brne	.-64     	; 0x4610 <vfprintf+0x308>
    4650:	d4 fe       	sbrs	r13, 4
    4652:	02 c0       	rjmp	.+4      	; 0x4658 <vfprintf+0x350>
    4654:	68 94       	set
    4656:	d2 f8       	bld	r13, 2
    4658:	20 e1       	ldi	r18, 0x10	; 16
    465a:	30 e0       	ldi	r19, 0x00	; 0
    465c:	0d c0       	rjmp	.+26     	; 0x4678 <vfprintf+0x370>
    465e:	68 94       	set
    4660:	d4 f8       	bld	r13, 4
    4662:	f6 cf       	rjmp	.-20     	; 0x4650 <vfprintf+0x348>
    4664:	34 fe       	sbrs	r3, 4
    4666:	03 c0       	rjmp	.+6      	; 0x466e <vfprintf+0x366>
    4668:	82 2f       	mov	r24, r18
    466a:	86 60       	ori	r24, 0x06	; 6
    466c:	d8 2e       	mov	r13, r24
    466e:	20 e1       	ldi	r18, 0x10	; 16
    4670:	32 e0       	ldi	r19, 0x02	; 2
    4672:	02 c0       	rjmp	.+4      	; 0x4678 <vfprintf+0x370>
    4674:	28 e0       	ldi	r18, 0x08	; 8
    4676:	30 e0       	ldi	r19, 0x00	; 0
    4678:	f8 01       	movw	r30, r16
    467a:	d7 fe       	sbrs	r13, 7
    467c:	0f c0       	rjmp	.+30     	; 0x469c <vfprintf+0x394>
    467e:	60 81       	ld	r22, Z
    4680:	71 81       	ldd	r23, Z+1	; 0x01
    4682:	82 81       	ldd	r24, Z+2	; 0x02
    4684:	93 81       	ldd	r25, Z+3	; 0x03
    4686:	0c 5f       	subi	r16, 0xFC	; 252
    4688:	1f 4f       	sbci	r17, 0xFF	; 255
    468a:	a5 01       	movw	r20, r10
    468c:	0e 94 21 26 	call	0x4c42	; 0x4c42 <__ultoa_invert>
    4690:	c8 2e       	mov	r12, r24
    4692:	ca 18       	sub	r12, r10
    4694:	3d 2c       	mov	r3, r13
    4696:	e8 94       	clt
    4698:	37 f8       	bld	r3, 7
    469a:	52 cf       	rjmp	.-348    	; 0x4540 <vfprintf+0x238>
    469c:	60 81       	ld	r22, Z
    469e:	71 81       	ldd	r23, Z+1	; 0x01
    46a0:	90 e0       	ldi	r25, 0x00	; 0
    46a2:	80 e0       	ldi	r24, 0x00	; 0
    46a4:	0e 5f       	subi	r16, 0xFE	; 254
    46a6:	1f 4f       	sbci	r17, 0xFF	; 255
    46a8:	f0 cf       	rjmp	.-32     	; 0x468a <vfprintf+0x382>
    46aa:	42 fc       	sbrc	r4, 2
    46ac:	02 c0       	rjmp	.+4      	; 0x46b2 <vfprintf+0x3aa>
    46ae:	83 94       	inc	r8
    46b0:	63 cf       	rjmp	.-314    	; 0x4578 <vfprintf+0x270>
    46b2:	83 94       	inc	r8
    46b4:	83 94       	inc	r8
    46b6:	60 cf       	rjmp	.-320    	; 0x4578 <vfprintf+0x270>
    46b8:	84 2d       	mov	r24, r4
    46ba:	86 78       	andi	r24, 0x86	; 134
    46bc:	09 f4       	brne	.+2      	; 0x46c0 <vfprintf+0x3b8>
    46be:	5c cf       	rjmp	.-328    	; 0x4578 <vfprintf+0x270>
    46c0:	f6 cf       	rjmp	.-20     	; 0x46ae <vfprintf+0x3a6>
    46c2:	b7 01       	movw	r22, r14
    46c4:	80 e2       	ldi	r24, 0x20	; 32
    46c6:	90 e0       	ldi	r25, 0x00	; 0
    46c8:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <fputc>
    46cc:	83 94       	inc	r8
    46ce:	82 14       	cp	r8, r2
    46d0:	c0 f3       	brcs	.-16     	; 0x46c2 <vfprintf+0x3ba>
    46d2:	51 2c       	mov	r5, r1
    46d4:	5e cf       	rjmp	.-324    	; 0x4592 <vfprintf+0x28a>
    46d6:	52 2c       	mov	r5, r2
    46d8:	58 18       	sub	r5, r8
    46da:	82 14       	cp	r8, r2
    46dc:	08 f4       	brcc	.+2      	; 0x46e0 <vfprintf+0x3d8>
    46de:	59 cf       	rjmp	.-334    	; 0x4592 <vfprintf+0x28a>
    46e0:	f8 cf       	rjmp	.-16     	; 0x46d2 <vfprintf+0x3ca>
    46e2:	84 2d       	mov	r24, r4
    46e4:	86 78       	andi	r24, 0x86	; 134
    46e6:	09 f4       	brne	.+2      	; 0x46ea <vfprintf+0x3e2>
    46e8:	66 cf       	rjmp	.-308    	; 0x45b6 <vfprintf+0x2ae>
    46ea:	8b e2       	ldi	r24, 0x2B	; 43
    46ec:	41 fe       	sbrs	r4, 1
    46ee:	80 e2       	ldi	r24, 0x20	; 32
    46f0:	47 fc       	sbrc	r4, 7
    46f2:	8d e2       	ldi	r24, 0x2D	; 45
    46f4:	b7 01       	movw	r22, r14
    46f6:	90 e0       	ldi	r25, 0x00	; 0
    46f8:	5c cf       	rjmp	.-328    	; 0x45b2 <vfprintf+0x2aa>
    46fa:	b7 01       	movw	r22, r14
    46fc:	80 e3       	ldi	r24, 0x30	; 48
    46fe:	90 e0       	ldi	r25, 0x00	; 0
    4700:	0e 94 f1 25 	call	0x4be2	; 0x4be2 <fputc>
    4704:	9a 94       	dec	r9
    4706:	57 cf       	rjmp	.-338    	; 0x45b6 <vfprintf+0x2ae>
    4708:	8f ef       	ldi	r24, 0xFF	; 255
    470a:	9f ef       	ldi	r25, 0xFF	; 255
    470c:	84 cf       	rjmp	.-248    	; 0x4616 <vfprintf+0x30e>

0000470e <dtoa_prf>:
dtoa_prf():
    470e:	8f 92       	push	r8
    4710:	9f 92       	push	r9
    4712:	af 92       	push	r10
    4714:	bf 92       	push	r11
    4716:	cf 92       	push	r12
    4718:	df 92       	push	r13
    471a:	ef 92       	push	r14
    471c:	ff 92       	push	r15
    471e:	0f 93       	push	r16
    4720:	1f 93       	push	r17
    4722:	cf 93       	push	r28
    4724:	df 93       	push	r29
    4726:	cd b7       	in	r28, 0x3d	; 61
    4728:	de b7       	in	r29, 0x3e	; 62
    472a:	29 97       	sbiw	r28, 0x09	; 9
    472c:	0f b6       	in	r0, 0x3f	; 63
    472e:	f8 94       	cli
    4730:	de bf       	out	0x3e, r29	; 62
    4732:	0f be       	out	0x3f, r0	; 63
    4734:	cd bf       	out	0x3d, r28	; 61
    4736:	6a 01       	movw	r12, r20
    4738:	f2 2e       	mov	r15, r18
    473a:	b0 2e       	mov	r11, r16
    473c:	10 2f       	mov	r17, r16
    473e:	fb e3       	ldi	r31, 0x3B	; 59
    4740:	af 2e       	mov	r10, r31
    4742:	a0 16       	cp	r10, r16
    4744:	08 f4       	brcc	.+2      	; 0x4748 <dtoa_prf+0x3a>
    4746:	1b e3       	ldi	r17, 0x3B	; 59
    4748:	1f 5f       	subi	r17, 0xFF	; 255
    474a:	01 2f       	mov	r16, r17
    474c:	27 e0       	ldi	r18, 0x07	; 7
    474e:	ae 01       	movw	r20, r28
    4750:	4f 5f       	subi	r20, 0xFF	; 255
    4752:	5f 4f       	sbci	r21, 0xFF	; 255
    4754:	0e 94 03 25 	call	0x4a06	; 0x4a06 <__ftoa_engine>
    4758:	bc 01       	movw	r22, r24
    475a:	89 81       	ldd	r24, Y+1	; 0x01
    475c:	98 2f       	mov	r25, r24
    475e:	99 70       	andi	r25, 0x09	; 9
    4760:	91 30       	cpi	r25, 0x01	; 1
    4762:	09 f4       	brne	.+2      	; 0x4766 <dtoa_prf+0x58>
    4764:	4e c0       	rjmp	.+156    	; 0x4802 <dtoa_prf+0xf4>
    4766:	9b e2       	ldi	r25, 0x2B	; 43
    4768:	e1 fc       	sbrc	r14, 1
    476a:	04 c0       	rjmp	.+8      	; 0x4774 <dtoa_prf+0x66>
    476c:	9e 2d       	mov	r25, r14
    476e:	91 70       	andi	r25, 0x01	; 1
    4770:	e0 fc       	sbrc	r14, 0
    4772:	49 c0       	rjmp	.+146    	; 0x4806 <dtoa_prf+0xf8>
    4774:	5e 2d       	mov	r21, r14
    4776:	50 71       	andi	r21, 0x10	; 16
    4778:	e8 2f       	mov	r30, r24
    477a:	e8 70       	andi	r30, 0x08	; 8
    477c:	83 ff       	sbrs	r24, 3
    477e:	55 c0       	rjmp	.+170    	; 0x482a <dtoa_prf+0x11c>
    4780:	84 e0       	ldi	r24, 0x04	; 4
    4782:	91 11       	cpse	r25, r1
    4784:	01 c0       	rjmp	.+2      	; 0x4788 <dtoa_prf+0x7a>
    4786:	83 e0       	ldi	r24, 0x03	; 3
    4788:	ef 2d       	mov	r30, r15
    478a:	e8 1b       	sub	r30, r24
    478c:	8f 15       	cp	r24, r15
    478e:	08 f0       	brcs	.+2      	; 0x4792 <dtoa_prf+0x84>
    4790:	e0 e0       	ldi	r30, 0x00	; 0
    4792:	d6 01       	movw	r26, r12
    4794:	8e 2f       	mov	r24, r30
    4796:	20 e2       	ldi	r18, 0x20	; 32
    4798:	55 23       	and	r21, r21
    479a:	c9 f1       	breq	.+114    	; 0x480e <dtoa_prf+0x100>
    479c:	99 23       	and	r25, r25
    479e:	29 f0       	breq	.+10     	; 0x47aa <dtoa_prf+0x9c>
    47a0:	d6 01       	movw	r26, r12
    47a2:	9c 93       	st	X, r25
    47a4:	c6 01       	movw	r24, r12
    47a6:	01 96       	adiw	r24, 0x01	; 1
    47a8:	6c 01       	movw	r12, r24
    47aa:	96 01       	movw	r18, r12
    47ac:	2d 5f       	subi	r18, 0xFD	; 253
    47ae:	3f 4f       	sbci	r19, 0xFF	; 255
    47b0:	e2 fe       	sbrs	r14, 2
    47b2:	33 c0       	rjmp	.+102    	; 0x481a <dtoa_prf+0x10c>
    47b4:	8e e4       	ldi	r24, 0x4E	; 78
    47b6:	d6 01       	movw	r26, r12
    47b8:	8c 93       	st	X, r24
    47ba:	91 e4       	ldi	r25, 0x41	; 65
    47bc:	11 96       	adiw	r26, 0x01	; 1
    47be:	9c 93       	st	X, r25
    47c0:	11 97       	sbiw	r26, 0x01	; 1
    47c2:	12 96       	adiw	r26, 0x02	; 2
    47c4:	8c 93       	st	X, r24
    47c6:	d9 01       	movw	r26, r18
    47c8:	8e 2f       	mov	r24, r30
    47ca:	90 e2       	ldi	r25, 0x20	; 32
    47cc:	81 11       	cpse	r24, r1
    47ce:	2a c0       	rjmp	.+84     	; 0x4824 <dtoa_prf+0x116>
    47d0:	e2 0f       	add	r30, r18
    47d2:	f3 2f       	mov	r31, r19
    47d4:	f1 1d       	adc	r31, r1
    47d6:	10 82       	st	Z, r1
    47d8:	8e ef       	ldi	r24, 0xFE	; 254
    47da:	9f ef       	ldi	r25, 0xFF	; 255
    47dc:	29 96       	adiw	r28, 0x09	; 9
    47de:	0f b6       	in	r0, 0x3f	; 63
    47e0:	f8 94       	cli
    47e2:	de bf       	out	0x3e, r29	; 62
    47e4:	0f be       	out	0x3f, r0	; 63
    47e6:	cd bf       	out	0x3d, r28	; 61
    47e8:	df 91       	pop	r29
    47ea:	cf 91       	pop	r28
    47ec:	1f 91       	pop	r17
    47ee:	0f 91       	pop	r16
    47f0:	ff 90       	pop	r15
    47f2:	ef 90       	pop	r14
    47f4:	df 90       	pop	r13
    47f6:	cf 90       	pop	r12
    47f8:	bf 90       	pop	r11
    47fa:	af 90       	pop	r10
    47fc:	9f 90       	pop	r9
    47fe:	8f 90       	pop	r8
    4800:	08 95       	ret
    4802:	9d e2       	ldi	r25, 0x2D	; 45
    4804:	b7 cf       	rjmp	.-146    	; 0x4774 <dtoa_prf+0x66>
    4806:	90 e2       	ldi	r25, 0x20	; 32
    4808:	b5 cf       	rjmp	.-150    	; 0x4774 <dtoa_prf+0x66>
    480a:	2d 93       	st	X+, r18
    480c:	81 50       	subi	r24, 0x01	; 1
    480e:	81 11       	cpse	r24, r1
    4810:	fc cf       	rjmp	.-8      	; 0x480a <dtoa_prf+0xfc>
    4812:	ce 0e       	add	r12, r30
    4814:	d1 1c       	adc	r13, r1
    4816:	e0 e0       	ldi	r30, 0x00	; 0
    4818:	c1 cf       	rjmp	.-126    	; 0x479c <dtoa_prf+0x8e>
    481a:	8e e6       	ldi	r24, 0x6E	; 110
    481c:	d6 01       	movw	r26, r12
    481e:	8c 93       	st	X, r24
    4820:	91 e6       	ldi	r25, 0x61	; 97
    4822:	cc cf       	rjmp	.-104    	; 0x47bc <dtoa_prf+0xae>
    4824:	9d 93       	st	X+, r25
    4826:	81 50       	subi	r24, 0x01	; 1
    4828:	d1 cf       	rjmp	.-94     	; 0x47cc <dtoa_prf+0xbe>
    482a:	48 2f       	mov	r20, r24
    482c:	44 70       	andi	r20, 0x04	; 4
    482e:	82 ff       	sbrs	r24, 2
    4830:	3d c0       	rjmp	.+122    	; 0x48ac <dtoa_prf+0x19e>
    4832:	84 e0       	ldi	r24, 0x04	; 4
    4834:	91 11       	cpse	r25, r1
    4836:	01 c0       	rjmp	.+2      	; 0x483a <dtoa_prf+0x12c>
    4838:	83 e0       	ldi	r24, 0x03	; 3
    483a:	8f 15       	cp	r24, r15
    483c:	10 f4       	brcc	.+4      	; 0x4842 <dtoa_prf+0x134>
    483e:	ef 2d       	mov	r30, r15
    4840:	e8 1b       	sub	r30, r24
    4842:	d6 01       	movw	r26, r12
    4844:	8e 2f       	mov	r24, r30
    4846:	20 e2       	ldi	r18, 0x20	; 32
    4848:	55 23       	and	r21, r21
    484a:	09 f1       	breq	.+66     	; 0x488e <dtoa_prf+0x180>
    484c:	99 23       	and	r25, r25
    484e:	29 f0       	breq	.+10     	; 0x485a <dtoa_prf+0x14c>
    4850:	d6 01       	movw	r26, r12
    4852:	9c 93       	st	X, r25
    4854:	c6 01       	movw	r24, r12
    4856:	01 96       	adiw	r24, 0x01	; 1
    4858:	6c 01       	movw	r12, r24
    485a:	96 01       	movw	r18, r12
    485c:	2d 5f       	subi	r18, 0xFD	; 253
    485e:	3f 4f       	sbci	r19, 0xFF	; 255
    4860:	e2 fe       	sbrs	r14, 2
    4862:	1b c0       	rjmp	.+54     	; 0x489a <dtoa_prf+0x18c>
    4864:	89 e4       	ldi	r24, 0x49	; 73
    4866:	d6 01       	movw	r26, r12
    4868:	8c 93       	st	X, r24
    486a:	8e e4       	ldi	r24, 0x4E	; 78
    486c:	11 96       	adiw	r26, 0x01	; 1
    486e:	8c 93       	st	X, r24
    4870:	11 97       	sbiw	r26, 0x01	; 1
    4872:	86 e4       	ldi	r24, 0x46	; 70
    4874:	12 96       	adiw	r26, 0x02	; 2
    4876:	8c 93       	st	X, r24
    4878:	d9 01       	movw	r26, r18
    487a:	8e 2f       	mov	r24, r30
    487c:	90 e2       	ldi	r25, 0x20	; 32
    487e:	88 23       	and	r24, r24
    4880:	09 f4       	brne	.+2      	; 0x4884 <dtoa_prf+0x176>
    4882:	a6 cf       	rjmp	.-180    	; 0x47d0 <dtoa_prf+0xc2>
    4884:	9d 93       	st	X+, r25
    4886:	81 50       	subi	r24, 0x01	; 1
    4888:	fa cf       	rjmp	.-12     	; 0x487e <dtoa_prf+0x170>
    488a:	2d 93       	st	X+, r18
    488c:	81 50       	subi	r24, 0x01	; 1
    488e:	81 11       	cpse	r24, r1
    4890:	fc cf       	rjmp	.-8      	; 0x488a <dtoa_prf+0x17c>
    4892:	ce 0e       	add	r12, r30
    4894:	d1 1c       	adc	r13, r1
    4896:	e0 e0       	ldi	r30, 0x00	; 0
    4898:	d9 cf       	rjmp	.-78     	; 0x484c <dtoa_prf+0x13e>
    489a:	89 e6       	ldi	r24, 0x69	; 105
    489c:	d6 01       	movw	r26, r12
    489e:	8c 93       	st	X, r24
    48a0:	8e e6       	ldi	r24, 0x6E	; 110
    48a2:	11 96       	adiw	r26, 0x01	; 1
    48a4:	8c 93       	st	X, r24
    48a6:	11 97       	sbiw	r26, 0x01	; 1
    48a8:	86 e6       	ldi	r24, 0x66	; 102
    48aa:	e4 cf       	rjmp	.-56     	; 0x4874 <dtoa_prf+0x166>
    48ac:	9b 01       	movw	r18, r22
    48ae:	77 ff       	sbrs	r23, 7
    48b0:	02 c0       	rjmp	.+4      	; 0x48b6 <dtoa_prf+0x1a8>
    48b2:	30 e0       	ldi	r19, 0x00	; 0
    48b4:	20 e0       	ldi	r18, 0x00	; 0
    48b6:	a1 e0       	ldi	r26, 0x01	; 1
    48b8:	b0 e0       	ldi	r27, 0x00	; 0
    48ba:	91 11       	cpse	r25, r1
    48bc:	02 c0       	rjmp	.+4      	; 0x48c2 <dtoa_prf+0x1b4>
    48be:	b0 e0       	ldi	r27, 0x00	; 0
    48c0:	a0 e0       	ldi	r26, 0x00	; 0
    48c2:	f9 01       	movw	r30, r18
    48c4:	31 96       	adiw	r30, 0x01	; 1
    48c6:	ae 0f       	add	r26, r30
    48c8:	bf 1f       	adc	r27, r31
    48ca:	8b 2c       	mov	r8, r11
    48cc:	91 2c       	mov	r9, r1
    48ce:	bb 20       	and	r11, r11
    48d0:	09 f4       	brne	.+2      	; 0x48d4 <dtoa_prf+0x1c6>
    48d2:	61 c0       	rjmp	.+194    	; 0x4996 <dtoa_prf+0x288>
    48d4:	54 01       	movw	r10, r8
    48d6:	ef ef       	ldi	r30, 0xFF	; 255
    48d8:	ae 1a       	sub	r10, r30
    48da:	be 0a       	sbc	r11, r30
    48dc:	aa 0d       	add	r26, r10
    48de:	bb 1d       	adc	r27, r11
    48e0:	fa 16       	cp	r15, r26
    48e2:	1b 06       	cpc	r1, r27
    48e4:	19 f0       	breq	.+6      	; 0x48ec <dtoa_prf+0x1de>
    48e6:	14 f0       	brlt	.+4      	; 0x48ec <dtoa_prf+0x1de>
    48e8:	4f 2d       	mov	r20, r15
    48ea:	4a 1b       	sub	r20, r26
    48ec:	51 11       	cpse	r21, r1
    48ee:	88 c0       	rjmp	.+272    	; 0x4a00 <dtoa_prf+0x2f2>
    48f0:	e3 fc       	sbrc	r14, 3
    48f2:	59 c0       	rjmp	.+178    	; 0x49a6 <dtoa_prf+0x298>
    48f4:	76 01       	movw	r14, r12
    48f6:	a4 2f       	mov	r26, r20
    48f8:	b0 e2       	ldi	r27, 0x20	; 32
    48fa:	a1 11       	cpse	r26, r1
    48fc:	4f c0       	rjmp	.+158    	; 0x499c <dtoa_prf+0x28e>
    48fe:	c4 0e       	add	r12, r20
    4900:	d1 1c       	adc	r13, r1
    4902:	99 23       	and	r25, r25
    4904:	09 f4       	brne	.+2      	; 0x4908 <dtoa_prf+0x1fa>
    4906:	5b c0       	rjmp	.+182    	; 0x49be <dtoa_prf+0x2b0>
    4908:	40 e0       	ldi	r20, 0x00	; 0
    490a:	d6 01       	movw	r26, r12
    490c:	11 96       	adiw	r26, 0x01	; 1
    490e:	f6 01       	movw	r30, r12
    4910:	90 83       	st	Z, r25
    4912:	6d 01       	movw	r12, r26
    4914:	55 23       	and	r21, r21
    4916:	09 f4       	brne	.+2      	; 0x491a <dtoa_prf+0x20c>
    4918:	48 c0       	rjmp	.+144    	; 0x49aa <dtoa_prf+0x29c>
    491a:	01 2f       	mov	r16, r17
    491c:	06 0f       	add	r16, r22
    491e:	9a 81       	ldd	r25, Y+2	; 0x02
    4920:	58 2f       	mov	r21, r24
    4922:	50 71       	andi	r21, 0x10	; 16
    4924:	84 ff       	sbrs	r24, 4
    4926:	03 c0       	rjmp	.+6      	; 0x492e <dtoa_prf+0x220>
    4928:	91 33       	cpi	r25, 0x31	; 49
    492a:	09 f4       	brne	.+2      	; 0x492e <dtoa_prf+0x220>
    492c:	01 50       	subi	r16, 0x01	; 1
    492e:	10 16       	cp	r1, r16
    4930:	0c f0       	brlt	.+2      	; 0x4934 <dtoa_prf+0x226>
    4932:	47 c0       	rjmp	.+142    	; 0x49c2 <dtoa_prf+0x2b4>
    4934:	09 30       	cpi	r16, 0x09	; 9
    4936:	08 f0       	brcs	.+2      	; 0x493a <dtoa_prf+0x22c>
    4938:	08 e0       	ldi	r16, 0x08	; 8
    493a:	ee e2       	ldi	r30, 0x2E	; 46
    493c:	fe 2e       	mov	r15, r30
    493e:	5b 01       	movw	r10, r22
    4940:	a0 1a       	sub	r10, r16
    4942:	b1 08       	sbc	r11, r1
    4944:	85 01       	movw	r16, r10
    4946:	91 94       	neg	r9
    4948:	81 94       	neg	r8
    494a:	91 08       	sbc	r9, r1
    494c:	2f 3f       	cpi	r18, 0xFF	; 255
    494e:	32 07       	cpc	r19, r18
    4950:	29 f4       	brne	.+10     	; 0x495c <dtoa_prf+0x24e>
    4952:	d6 01       	movw	r26, r12
    4954:	fc 92       	st	X, r15
    4956:	f6 01       	movw	r30, r12
    4958:	31 96       	adiw	r30, 0x01	; 1
    495a:	6f 01       	movw	r12, r30
    495c:	62 17       	cp	r22, r18
    495e:	73 07       	cpc	r23, r19
    4960:	94 f1       	brlt	.+100    	; 0x49c6 <dtoa_prf+0x2b8>
    4962:	02 17       	cp	r16, r18
    4964:	13 07       	cpc	r17, r19
    4966:	7c f5       	brge	.+94     	; 0x49c6 <dtoa_prf+0x2b8>
    4968:	db 01       	movw	r26, r22
    496a:	a2 1b       	sub	r26, r18
    496c:	b3 0b       	sbc	r27, r19
    496e:	aa 24       	eor	r10, r10
    4970:	a3 94       	inc	r10
    4972:	b1 2c       	mov	r11, r1
    4974:	ac 0e       	add	r10, r28
    4976:	bd 1e       	adc	r11, r29
    4978:	aa 0d       	add	r26, r10
    497a:	bb 1d       	adc	r27, r11
    497c:	11 96       	adiw	r26, 0x01	; 1
    497e:	8c 91       	ld	r24, X
    4980:	21 50       	subi	r18, 0x01	; 1
    4982:	31 09       	sbc	r19, r1
    4984:	d6 01       	movw	r26, r12
    4986:	11 96       	adiw	r26, 0x01	; 1
    4988:	28 15       	cp	r18, r8
    498a:	39 05       	cpc	r19, r9
    498c:	f4 f0       	brlt	.+60     	; 0x49ca <dtoa_prf+0x2bc>
    498e:	f6 01       	movw	r30, r12
    4990:	80 83       	st	Z, r24
    4992:	6d 01       	movw	r12, r26
    4994:	db cf       	rjmp	.-74     	; 0x494c <dtoa_prf+0x23e>
    4996:	b1 2c       	mov	r11, r1
    4998:	a1 2c       	mov	r10, r1
    499a:	a0 cf       	rjmp	.-192    	; 0x48dc <dtoa_prf+0x1ce>
    499c:	f7 01       	movw	r30, r14
    499e:	b1 93       	st	Z+, r27
    49a0:	7f 01       	movw	r14, r30
    49a2:	a1 50       	subi	r26, 0x01	; 1
    49a4:	aa cf       	rjmp	.-172    	; 0x48fa <dtoa_prf+0x1ec>
    49a6:	91 11       	cpse	r25, r1
    49a8:	b0 cf       	rjmp	.-160    	; 0x490a <dtoa_prf+0x1fc>
    49aa:	d6 01       	movw	r26, r12
    49ac:	94 2f       	mov	r25, r20
    49ae:	50 e3       	ldi	r21, 0x30	; 48
    49b0:	02 c0       	rjmp	.+4      	; 0x49b6 <dtoa_prf+0x2a8>
    49b2:	5d 93       	st	X+, r21
    49b4:	91 50       	subi	r25, 0x01	; 1
    49b6:	91 11       	cpse	r25, r1
    49b8:	fc cf       	rjmp	.-8      	; 0x49b2 <dtoa_prf+0x2a4>
    49ba:	c4 0e       	add	r12, r20
    49bc:	d1 1c       	adc	r13, r1
    49be:	40 e0       	ldi	r20, 0x00	; 0
    49c0:	ac cf       	rjmp	.-168    	; 0x491a <dtoa_prf+0x20c>
    49c2:	01 e0       	ldi	r16, 0x01	; 1
    49c4:	ba cf       	rjmp	.-140    	; 0x493a <dtoa_prf+0x22c>
    49c6:	80 e3       	ldi	r24, 0x30	; 48
    49c8:	db cf       	rjmp	.-74     	; 0x4980 <dtoa_prf+0x272>
    49ca:	62 17       	cp	r22, r18
    49cc:	73 07       	cpc	r23, r19
    49ce:	31 f4       	brne	.+12     	; 0x49dc <dtoa_prf+0x2ce>
    49d0:	96 33       	cpi	r25, 0x36	; 54
    49d2:	88 f4       	brcc	.+34     	; 0x49f6 <dtoa_prf+0x2e8>
    49d4:	95 33       	cpi	r25, 0x35	; 53
    49d6:	11 f4       	brne	.+4      	; 0x49dc <dtoa_prf+0x2ce>
    49d8:	55 23       	and	r21, r21
    49da:	69 f0       	breq	.+26     	; 0x49f6 <dtoa_prf+0x2e8>
    49dc:	f6 01       	movw	r30, r12
    49de:	80 83       	st	Z, r24
    49e0:	fd 01       	movw	r30, r26
    49e2:	84 2f       	mov	r24, r20
    49e4:	90 e2       	ldi	r25, 0x20	; 32
    49e6:	81 11       	cpse	r24, r1
    49e8:	08 c0       	rjmp	.+16     	; 0x49fa <dtoa_prf+0x2ec>
    49ea:	a4 0f       	add	r26, r20
    49ec:	b1 1d       	adc	r27, r1
    49ee:	1c 92       	st	X, r1
    49f0:	90 e0       	ldi	r25, 0x00	; 0
    49f2:	80 e0       	ldi	r24, 0x00	; 0
    49f4:	f3 ce       	rjmp	.-538    	; 0x47dc <dtoa_prf+0xce>
    49f6:	81 e3       	ldi	r24, 0x31	; 49
    49f8:	f1 cf       	rjmp	.-30     	; 0x49dc <dtoa_prf+0x2ce>
    49fa:	91 93       	st	Z+, r25
    49fc:	81 50       	subi	r24, 0x01	; 1
    49fe:	f3 cf       	rjmp	.-26     	; 0x49e6 <dtoa_prf+0x2d8>
    4a00:	91 11       	cpse	r25, r1
    4a02:	83 cf       	rjmp	.-250    	; 0x490a <dtoa_prf+0x1fc>
    4a04:	8a cf       	rjmp	.-236    	; 0x491a <dtoa_prf+0x20c>

00004a06 <__ftoa_engine>:
__ftoa_engine():
    4a06:	28 30       	cpi	r18, 0x08	; 8
    4a08:	08 f0       	brcs	.+2      	; 0x4a0c <__ftoa_engine+0x6>
    4a0a:	27 e0       	ldi	r18, 0x07	; 7
    4a0c:	33 27       	eor	r19, r19
    4a0e:	da 01       	movw	r26, r20
    4a10:	99 0f       	add	r25, r25
    4a12:	31 1d       	adc	r19, r1
    4a14:	87 fd       	sbrc	r24, 7
    4a16:	91 60       	ori	r25, 0x01	; 1
    4a18:	00 96       	adiw	r24, 0x00	; 0
    4a1a:	61 05       	cpc	r22, r1
    4a1c:	71 05       	cpc	r23, r1
    4a1e:	39 f4       	brne	.+14     	; 0x4a2e <__ftoa_engine+0x28>
    4a20:	32 60       	ori	r19, 0x02	; 2
    4a22:	2e 5f       	subi	r18, 0xFE	; 254
    4a24:	3d 93       	st	X+, r19
    4a26:	30 e3       	ldi	r19, 0x30	; 48
    4a28:	2a 95       	dec	r18
    4a2a:	e1 f7       	brne	.-8      	; 0x4a24 <__ftoa_engine+0x1e>
    4a2c:	08 95       	ret
    4a2e:	9f 3f       	cpi	r25, 0xFF	; 255
    4a30:	30 f0       	brcs	.+12     	; 0x4a3e <__ftoa_engine+0x38>
    4a32:	80 38       	cpi	r24, 0x80	; 128
    4a34:	71 05       	cpc	r23, r1
    4a36:	61 05       	cpc	r22, r1
    4a38:	09 f0       	breq	.+2      	; 0x4a3c <__ftoa_engine+0x36>
    4a3a:	3c 5f       	subi	r19, 0xFC	; 252
    4a3c:	3c 5f       	subi	r19, 0xFC	; 252
    4a3e:	3d 93       	st	X+, r19
    4a40:	91 30       	cpi	r25, 0x01	; 1
    4a42:	08 f0       	brcs	.+2      	; 0x4a46 <__ftoa_engine+0x40>
    4a44:	80 68       	ori	r24, 0x80	; 128
    4a46:	91 1d       	adc	r25, r1
    4a48:	df 93       	push	r29
    4a4a:	cf 93       	push	r28
    4a4c:	1f 93       	push	r17
    4a4e:	0f 93       	push	r16
    4a50:	ff 92       	push	r15
    4a52:	ef 92       	push	r14
    4a54:	19 2f       	mov	r17, r25
    4a56:	98 7f       	andi	r25, 0xF8	; 248
    4a58:	96 95       	lsr	r25
    4a5a:	e9 2f       	mov	r30, r25
    4a5c:	96 95       	lsr	r25
    4a5e:	96 95       	lsr	r25
    4a60:	e9 0f       	add	r30, r25
    4a62:	ff 27       	eor	r31, r31
    4a64:	ea 51       	subi	r30, 0x1A	; 26
    4a66:	ff 4f       	sbci	r31, 0xFF	; 255
    4a68:	99 27       	eor	r25, r25
    4a6a:	33 27       	eor	r19, r19
    4a6c:	ee 24       	eor	r14, r14
    4a6e:	ff 24       	eor	r15, r15
    4a70:	a7 01       	movw	r20, r14
    4a72:	e7 01       	movw	r28, r14
    4a74:	05 90       	lpm	r0, Z+
    4a76:	08 94       	sec
    4a78:	07 94       	ror	r0
    4a7a:	28 f4       	brcc	.+10     	; 0x4a86 <__ftoa_engine+0x80>
    4a7c:	36 0f       	add	r19, r22
    4a7e:	e7 1e       	adc	r14, r23
    4a80:	f8 1e       	adc	r15, r24
    4a82:	49 1f       	adc	r20, r25
    4a84:	51 1d       	adc	r21, r1
    4a86:	66 0f       	add	r22, r22
    4a88:	77 1f       	adc	r23, r23
    4a8a:	88 1f       	adc	r24, r24
    4a8c:	99 1f       	adc	r25, r25
    4a8e:	06 94       	lsr	r0
    4a90:	a1 f7       	brne	.-24     	; 0x4a7a <__ftoa_engine+0x74>
    4a92:	05 90       	lpm	r0, Z+
    4a94:	07 94       	ror	r0
    4a96:	28 f4       	brcc	.+10     	; 0x4aa2 <__ftoa_engine+0x9c>
    4a98:	e7 0e       	add	r14, r23
    4a9a:	f8 1e       	adc	r15, r24
    4a9c:	49 1f       	adc	r20, r25
    4a9e:	56 1f       	adc	r21, r22
    4aa0:	c1 1d       	adc	r28, r1
    4aa2:	77 0f       	add	r23, r23
    4aa4:	88 1f       	adc	r24, r24
    4aa6:	99 1f       	adc	r25, r25
    4aa8:	66 1f       	adc	r22, r22
    4aaa:	06 94       	lsr	r0
    4aac:	a1 f7       	brne	.-24     	; 0x4a96 <__ftoa_engine+0x90>
    4aae:	05 90       	lpm	r0, Z+
    4ab0:	07 94       	ror	r0
    4ab2:	28 f4       	brcc	.+10     	; 0x4abe <__ftoa_engine+0xb8>
    4ab4:	f8 0e       	add	r15, r24
    4ab6:	49 1f       	adc	r20, r25
    4ab8:	56 1f       	adc	r21, r22
    4aba:	c7 1f       	adc	r28, r23
    4abc:	d1 1d       	adc	r29, r1
    4abe:	88 0f       	add	r24, r24
    4ac0:	99 1f       	adc	r25, r25
    4ac2:	66 1f       	adc	r22, r22
    4ac4:	77 1f       	adc	r23, r23
    4ac6:	06 94       	lsr	r0
    4ac8:	a1 f7       	brne	.-24     	; 0x4ab2 <__ftoa_engine+0xac>
    4aca:	05 90       	lpm	r0, Z+
    4acc:	07 94       	ror	r0
    4ace:	20 f4       	brcc	.+8      	; 0x4ad8 <__ftoa_engine+0xd2>
    4ad0:	49 0f       	add	r20, r25
    4ad2:	56 1f       	adc	r21, r22
    4ad4:	c7 1f       	adc	r28, r23
    4ad6:	d8 1f       	adc	r29, r24
    4ad8:	99 0f       	add	r25, r25
    4ada:	66 1f       	adc	r22, r22
    4adc:	77 1f       	adc	r23, r23
    4ade:	88 1f       	adc	r24, r24
    4ae0:	06 94       	lsr	r0
    4ae2:	a9 f7       	brne	.-22     	; 0x4ace <__ftoa_engine+0xc8>
    4ae4:	84 91       	lpm	r24, Z
    4ae6:	10 95       	com	r17
    4ae8:	17 70       	andi	r17, 0x07	; 7
    4aea:	41 f0       	breq	.+16     	; 0x4afc <__ftoa_engine+0xf6>
    4aec:	d6 95       	lsr	r29
    4aee:	c7 95       	ror	r28
    4af0:	57 95       	ror	r21
    4af2:	47 95       	ror	r20
    4af4:	f7 94       	ror	r15
    4af6:	e7 94       	ror	r14
    4af8:	1a 95       	dec	r17
    4afa:	c1 f7       	brne	.-16     	; 0x4aec <__ftoa_engine+0xe6>
    4afc:	ec e8       	ldi	r30, 0x8C	; 140
    4afe:	f0 e0       	ldi	r31, 0x00	; 0
    4b00:	68 94       	set
    4b02:	15 90       	lpm	r1, Z+
    4b04:	15 91       	lpm	r17, Z+
    4b06:	35 91       	lpm	r19, Z+
    4b08:	65 91       	lpm	r22, Z+
    4b0a:	95 91       	lpm	r25, Z+
    4b0c:	05 90       	lpm	r0, Z+
    4b0e:	7f e2       	ldi	r23, 0x2F	; 47
    4b10:	73 95       	inc	r23
    4b12:	e1 18       	sub	r14, r1
    4b14:	f1 0a       	sbc	r15, r17
    4b16:	43 0b       	sbc	r20, r19
    4b18:	56 0b       	sbc	r21, r22
    4b1a:	c9 0b       	sbc	r28, r25
    4b1c:	d0 09       	sbc	r29, r0
    4b1e:	c0 f7       	brcc	.-16     	; 0x4b10 <__ftoa_engine+0x10a>
    4b20:	e1 0c       	add	r14, r1
    4b22:	f1 1e       	adc	r15, r17
    4b24:	43 1f       	adc	r20, r19
    4b26:	56 1f       	adc	r21, r22
    4b28:	c9 1f       	adc	r28, r25
    4b2a:	d0 1d       	adc	r29, r0
    4b2c:	7e f4       	brtc	.+30     	; 0x4b4c <__ftoa_engine+0x146>
    4b2e:	70 33       	cpi	r23, 0x30	; 48
    4b30:	11 f4       	brne	.+4      	; 0x4b36 <__ftoa_engine+0x130>
    4b32:	8a 95       	dec	r24
    4b34:	e6 cf       	rjmp	.-52     	; 0x4b02 <__ftoa_engine+0xfc>
    4b36:	e8 94       	clt
    4b38:	01 50       	subi	r16, 0x01	; 1
    4b3a:	30 f0       	brcs	.+12     	; 0x4b48 <__ftoa_engine+0x142>
    4b3c:	08 0f       	add	r16, r24
    4b3e:	0a f4       	brpl	.+2      	; 0x4b42 <__ftoa_engine+0x13c>
    4b40:	00 27       	eor	r16, r16
    4b42:	02 17       	cp	r16, r18
    4b44:	08 f4       	brcc	.+2      	; 0x4b48 <__ftoa_engine+0x142>
    4b46:	20 2f       	mov	r18, r16
    4b48:	23 95       	inc	r18
    4b4a:	02 2f       	mov	r16, r18
    4b4c:	7a 33       	cpi	r23, 0x3A	; 58
    4b4e:	28 f0       	brcs	.+10     	; 0x4b5a <__ftoa_engine+0x154>
    4b50:	79 e3       	ldi	r23, 0x39	; 57
    4b52:	7d 93       	st	X+, r23
    4b54:	2a 95       	dec	r18
    4b56:	e9 f7       	brne	.-6      	; 0x4b52 <__ftoa_engine+0x14c>
    4b58:	10 c0       	rjmp	.+32     	; 0x4b7a <__ftoa_engine+0x174>
    4b5a:	7d 93       	st	X+, r23
    4b5c:	2a 95       	dec	r18
    4b5e:	89 f6       	brne	.-94     	; 0x4b02 <__ftoa_engine+0xfc>
    4b60:	06 94       	lsr	r0
    4b62:	97 95       	ror	r25
    4b64:	67 95       	ror	r22
    4b66:	37 95       	ror	r19
    4b68:	17 95       	ror	r17
    4b6a:	17 94       	ror	r1
    4b6c:	e1 18       	sub	r14, r1
    4b6e:	f1 0a       	sbc	r15, r17
    4b70:	43 0b       	sbc	r20, r19
    4b72:	56 0b       	sbc	r21, r22
    4b74:	c9 0b       	sbc	r28, r25
    4b76:	d0 09       	sbc	r29, r0
    4b78:	98 f0       	brcs	.+38     	; 0x4ba0 <__ftoa_engine+0x19a>
    4b7a:	23 95       	inc	r18
    4b7c:	7e 91       	ld	r23, -X
    4b7e:	73 95       	inc	r23
    4b80:	7a 33       	cpi	r23, 0x3A	; 58
    4b82:	08 f0       	brcs	.+2      	; 0x4b86 <__ftoa_engine+0x180>
    4b84:	70 e3       	ldi	r23, 0x30	; 48
    4b86:	7c 93       	st	X, r23
    4b88:	20 13       	cpse	r18, r16
    4b8a:	b8 f7       	brcc	.-18     	; 0x4b7a <__ftoa_engine+0x174>
    4b8c:	7e 91       	ld	r23, -X
    4b8e:	70 61       	ori	r23, 0x10	; 16
    4b90:	7d 93       	st	X+, r23
    4b92:	30 f0       	brcs	.+12     	; 0x4ba0 <__ftoa_engine+0x19a>
    4b94:	83 95       	inc	r24
    4b96:	71 e3       	ldi	r23, 0x31	; 49
    4b98:	7d 93       	st	X+, r23
    4b9a:	70 e3       	ldi	r23, 0x30	; 48
    4b9c:	2a 95       	dec	r18
    4b9e:	e1 f7       	brne	.-8      	; 0x4b98 <__ftoa_engine+0x192>
    4ba0:	11 24       	eor	r1, r1
    4ba2:	ef 90       	pop	r14
    4ba4:	ff 90       	pop	r15
    4ba6:	0f 91       	pop	r16
    4ba8:	1f 91       	pop	r17
    4baa:	cf 91       	pop	r28
    4bac:	df 91       	pop	r29
    4bae:	99 27       	eor	r25, r25
    4bb0:	87 fd       	sbrc	r24, 7
    4bb2:	90 95       	com	r25
    4bb4:	08 95       	ret

00004bb6 <strnlen_P>:
strnlen_P():
    4bb6:	fc 01       	movw	r30, r24
    4bb8:	05 90       	lpm	r0, Z+
    4bba:	61 50       	subi	r22, 0x01	; 1
    4bbc:	70 40       	sbci	r23, 0x00	; 0
    4bbe:	01 10       	cpse	r0, r1
    4bc0:	d8 f7       	brcc	.-10     	; 0x4bb8 <strnlen_P+0x2>
    4bc2:	80 95       	com	r24
    4bc4:	90 95       	com	r25
    4bc6:	8e 0f       	add	r24, r30
    4bc8:	9f 1f       	adc	r25, r31
    4bca:	08 95       	ret

00004bcc <strnlen>:
strnlen():
    4bcc:	fc 01       	movw	r30, r24
    4bce:	61 50       	subi	r22, 0x01	; 1
    4bd0:	70 40       	sbci	r23, 0x00	; 0
    4bd2:	01 90       	ld	r0, Z+
    4bd4:	01 10       	cpse	r0, r1
    4bd6:	d8 f7       	brcc	.-10     	; 0x4bce <strnlen+0x2>
    4bd8:	80 95       	com	r24
    4bda:	90 95       	com	r25
    4bdc:	8e 0f       	add	r24, r30
    4bde:	9f 1f       	adc	r25, r31
    4be0:	08 95       	ret

00004be2 <fputc>:
fputc():
    4be2:	0f 93       	push	r16
    4be4:	1f 93       	push	r17
    4be6:	cf 93       	push	r28
    4be8:	df 93       	push	r29
    4bea:	18 2f       	mov	r17, r24
    4bec:	09 2f       	mov	r16, r25
    4bee:	eb 01       	movw	r28, r22
    4bf0:	8b 81       	ldd	r24, Y+3	; 0x03
    4bf2:	81 fd       	sbrc	r24, 1
    4bf4:	09 c0       	rjmp	.+18     	; 0x4c08 <fputc+0x26>
    4bf6:	1f ef       	ldi	r17, 0xFF	; 255
    4bf8:	0f ef       	ldi	r16, 0xFF	; 255
    4bfa:	81 2f       	mov	r24, r17
    4bfc:	90 2f       	mov	r25, r16
    4bfe:	df 91       	pop	r29
    4c00:	cf 91       	pop	r28
    4c02:	1f 91       	pop	r17
    4c04:	0f 91       	pop	r16
    4c06:	08 95       	ret
    4c08:	82 ff       	sbrs	r24, 2
    4c0a:	14 c0       	rjmp	.+40     	; 0x4c34 <fputc+0x52>
    4c0c:	2e 81       	ldd	r18, Y+6	; 0x06
    4c0e:	3f 81       	ldd	r19, Y+7	; 0x07
    4c10:	8c 81       	ldd	r24, Y+4	; 0x04
    4c12:	9d 81       	ldd	r25, Y+5	; 0x05
    4c14:	28 17       	cp	r18, r24
    4c16:	39 07       	cpc	r19, r25
    4c18:	3c f4       	brge	.+14     	; 0x4c28 <fputc+0x46>
    4c1a:	e8 81       	ld	r30, Y
    4c1c:	f9 81       	ldd	r31, Y+1	; 0x01
    4c1e:	cf 01       	movw	r24, r30
    4c20:	01 96       	adiw	r24, 0x01	; 1
    4c22:	99 83       	std	Y+1, r25	; 0x01
    4c24:	88 83       	st	Y, r24
    4c26:	10 83       	st	Z, r17
    4c28:	8e 81       	ldd	r24, Y+6	; 0x06
    4c2a:	9f 81       	ldd	r25, Y+7	; 0x07
    4c2c:	01 96       	adiw	r24, 0x01	; 1
    4c2e:	9f 83       	std	Y+7, r25	; 0x07
    4c30:	8e 83       	std	Y+6, r24	; 0x06
    4c32:	e3 cf       	rjmp	.-58     	; 0x4bfa <fputc+0x18>
    4c34:	e8 85       	ldd	r30, Y+8	; 0x08
    4c36:	f9 85       	ldd	r31, Y+9	; 0x09
    4c38:	81 2f       	mov	r24, r17
    4c3a:	09 95       	icall
    4c3c:	89 2b       	or	r24, r25
    4c3e:	a1 f3       	breq	.-24     	; 0x4c28 <fputc+0x46>
    4c40:	da cf       	rjmp	.-76     	; 0x4bf6 <fputc+0x14>

00004c42 <__ultoa_invert>:
__ultoa_invert():
    4c42:	fa 01       	movw	r30, r20
    4c44:	aa 27       	eor	r26, r26
    4c46:	28 30       	cpi	r18, 0x08	; 8
    4c48:	51 f1       	breq	.+84     	; 0x4c9e <__ultoa_invert+0x5c>
    4c4a:	20 31       	cpi	r18, 0x10	; 16
    4c4c:	81 f1       	breq	.+96     	; 0x4cae <__ultoa_invert+0x6c>
    4c4e:	e8 94       	clt
    4c50:	6f 93       	push	r22
    4c52:	6e 7f       	andi	r22, 0xFE	; 254
    4c54:	6e 5f       	subi	r22, 0xFE	; 254
    4c56:	7f 4f       	sbci	r23, 0xFF	; 255
    4c58:	8f 4f       	sbci	r24, 0xFF	; 255
    4c5a:	9f 4f       	sbci	r25, 0xFF	; 255
    4c5c:	af 4f       	sbci	r26, 0xFF	; 255
    4c5e:	b1 e0       	ldi	r27, 0x01	; 1
    4c60:	3e d0       	rcall	.+124    	; 0x4cde <__ultoa_invert+0x9c>
    4c62:	b4 e0       	ldi	r27, 0x04	; 4
    4c64:	3c d0       	rcall	.+120    	; 0x4cde <__ultoa_invert+0x9c>
    4c66:	67 0f       	add	r22, r23
    4c68:	78 1f       	adc	r23, r24
    4c6a:	89 1f       	adc	r24, r25
    4c6c:	9a 1f       	adc	r25, r26
    4c6e:	a1 1d       	adc	r26, r1
    4c70:	68 0f       	add	r22, r24
    4c72:	79 1f       	adc	r23, r25
    4c74:	8a 1f       	adc	r24, r26
    4c76:	91 1d       	adc	r25, r1
    4c78:	a1 1d       	adc	r26, r1
    4c7a:	6a 0f       	add	r22, r26
    4c7c:	71 1d       	adc	r23, r1
    4c7e:	81 1d       	adc	r24, r1
    4c80:	91 1d       	adc	r25, r1
    4c82:	a1 1d       	adc	r26, r1
    4c84:	20 d0       	rcall	.+64     	; 0x4cc6 <__ultoa_invert+0x84>
    4c86:	09 f4       	brne	.+2      	; 0x4c8a <__ultoa_invert+0x48>
    4c88:	68 94       	set
    4c8a:	3f 91       	pop	r19
    4c8c:	2a e0       	ldi	r18, 0x0A	; 10
    4c8e:	26 9f       	mul	r18, r22
    4c90:	11 24       	eor	r1, r1
    4c92:	30 19       	sub	r19, r0
    4c94:	30 5d       	subi	r19, 0xD0	; 208
    4c96:	31 93       	st	Z+, r19
    4c98:	de f6       	brtc	.-74     	; 0x4c50 <__ultoa_invert+0xe>
    4c9a:	cf 01       	movw	r24, r30
    4c9c:	08 95       	ret
    4c9e:	46 2f       	mov	r20, r22
    4ca0:	47 70       	andi	r20, 0x07	; 7
    4ca2:	40 5d       	subi	r20, 0xD0	; 208
    4ca4:	41 93       	st	Z+, r20
    4ca6:	b3 e0       	ldi	r27, 0x03	; 3
    4ca8:	0f d0       	rcall	.+30     	; 0x4cc8 <__ultoa_invert+0x86>
    4caa:	c9 f7       	brne	.-14     	; 0x4c9e <__ultoa_invert+0x5c>
    4cac:	f6 cf       	rjmp	.-20     	; 0x4c9a <__ultoa_invert+0x58>
    4cae:	46 2f       	mov	r20, r22
    4cb0:	4f 70       	andi	r20, 0x0F	; 15
    4cb2:	40 5d       	subi	r20, 0xD0	; 208
    4cb4:	4a 33       	cpi	r20, 0x3A	; 58
    4cb6:	18 f0       	brcs	.+6      	; 0x4cbe <__ultoa_invert+0x7c>
    4cb8:	49 5d       	subi	r20, 0xD9	; 217
    4cba:	31 fd       	sbrc	r19, 1
    4cbc:	40 52       	subi	r20, 0x20	; 32
    4cbe:	41 93       	st	Z+, r20
    4cc0:	02 d0       	rcall	.+4      	; 0x4cc6 <__ultoa_invert+0x84>
    4cc2:	a9 f7       	brne	.-22     	; 0x4cae <__ultoa_invert+0x6c>
    4cc4:	ea cf       	rjmp	.-44     	; 0x4c9a <__ultoa_invert+0x58>
    4cc6:	b4 e0       	ldi	r27, 0x04	; 4
    4cc8:	a6 95       	lsr	r26
    4cca:	97 95       	ror	r25
    4ccc:	87 95       	ror	r24
    4cce:	77 95       	ror	r23
    4cd0:	67 95       	ror	r22
    4cd2:	ba 95       	dec	r27
    4cd4:	c9 f7       	brne	.-14     	; 0x4cc8 <__ultoa_invert+0x86>
    4cd6:	00 97       	sbiw	r24, 0x00	; 0
    4cd8:	61 05       	cpc	r22, r1
    4cda:	71 05       	cpc	r23, r1
    4cdc:	08 95       	ret
    4cde:	9b 01       	movw	r18, r22
    4ce0:	ac 01       	movw	r20, r24
    4ce2:	0a 2e       	mov	r0, r26
    4ce4:	06 94       	lsr	r0
    4ce6:	57 95       	ror	r21
    4ce8:	47 95       	ror	r20
    4cea:	37 95       	ror	r19
    4cec:	27 95       	ror	r18
    4cee:	ba 95       	dec	r27
    4cf0:	c9 f7       	brne	.-14     	; 0x4ce4 <__ultoa_invert+0xa2>
    4cf2:	62 0f       	add	r22, r18
    4cf4:	73 1f       	adc	r23, r19
    4cf6:	84 1f       	adc	r24, r20
    4cf8:	95 1f       	adc	r25, r21
    4cfa:	a0 1d       	adc	r26, r0
    4cfc:	08 95       	ret

00004cfe <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    4cfe:	f8 94       	cli

00004d00 <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    4d00:	ff cf       	rjmp	.-2      	; 0x4d00 <__stop_program>
