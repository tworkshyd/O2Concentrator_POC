
C:\Users\habeeba\AppData\Local\Temp\arduino_build_449982/tworks_o2_cons.ino.elf:     file format elf32-avr


Disassembly of section .text:

00000000 <__vectors>:
__vectors():
       0:	0c 94 8b 00 	jmp	0x116	; 0x116 <__ctors_end>
       4:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
       8:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
       c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      10:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      14:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      18:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      1c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      20:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      24:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      28:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      2c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      30:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      34:	0c 94 e6 03 	jmp	0x7cc	; 0x7cc <__vector_13>
      38:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      3c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      40:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      44:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      48:	0c 94 36 11 	jmp	0x226c	; 0x226c <__vector_18>
      4c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      50:	0c 94 57 14 	jmp	0x28ae	; 0x28ae <__vector_20>
      54:	0c 94 8d 14 	jmp	0x291a	; 0x291a <__vector_21>
      58:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      5c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      60:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      64:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      68:	0c 94 11 10 	jmp	0x2022	; 0x2022 <__vector_26>
      6c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      70:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      74:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      78:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      7c:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      80:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      84:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>
      88:	0c 94 b5 00 	jmp	0x16a	; 0x16a <__bad_interrupt>

0000008c <__trampolines_end>:
__trampolines_start():
      8c:	30 2e       	mov	r3, r16
      8e:	33 2e       	mov	r3, r19
      90:	31 00       	.word	0x0031	; ????

00000092 <digital_pin_to_timer_PGM>:
      92:	00 00 00 02 03 00 0a 0b 00 00 00 00 05 04 09 08     ................
	...

000000b2 <digital_pin_to_bit_mask_PGM>:
      b2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.
      c2:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 40 80     ..... @...... @.

000000d2 <digital_pin_to_port_PGM>:
      d2:	02 02 02 02 02 02 02 02 04 04 04 04 04 04 04 04     ................
      e2:	03 03 03 03 03 03 03 03 01 01 01 01 01 01 01 01     ................

000000f2 <port_to_input_PGM>:
      f2:	00 00 20 00 23 00 26 00 29 00                       .. .#.&.).

000000fc <port_to_output_PGM>:
      fc:	00 00 22 00 25 00 28 00 2b 00                       ..".%.(.+.

00000106 <port_to_mode_PGM>:
     106:	00 00 21 00 24 00 27 00 2a 00                       ..!.$.'.*.

00000110 <__ctors_start>:
__ctors_start():
     110:	36 09       	sbc	r19, r6
     112:	02 0f       	add	r16, r18
     114:	c1 14       	cp	r12, r1

00000116 <__ctors_end>:
__dtors_end():
     116:	11 24       	eor	r1, r1
     118:	1f be       	out	0x3f, r1	; 63
     11a:	cf ef       	ldi	r28, 0xFF	; 255
     11c:	d0 e4       	ldi	r29, 0x40	; 64
     11e:	de bf       	out	0x3e, r29	; 62
     120:	cd bf       	out	0x3d, r28	; 61

00000122 <__do_copy_data>:
__do_copy_data():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2373
     122:	13 e0       	ldi	r17, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2374
     124:	a0 e0       	ldi	r26, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2375
     126:	b1 e0       	ldi	r27, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2376
     128:	ec e8       	ldi	r30, 0x8C	; 140
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2377
     12a:	f9 e3       	ldi	r31, 0x39	; 57
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2378
     12c:	00 e0       	ldi	r16, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2379
     12e:	0b bf       	out	0x3b, r16	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2380
     130:	02 c0       	rjmp	.+4      	; 0x136 <__do_copy_data+0x14>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2382
     132:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2383
     134:	0d 92       	st	X+, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2385
     136:	a0 3f       	cpi	r26, 0xF0	; 240
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2386
     138:	b1 07       	cpc	r27, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2387
     13a:	d9 f7       	brne	.-10     	; 0x132 <__do_copy_data+0x10>

0000013c <__do_clear_bss>:
__do_clear_bss():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2441
     13c:	26 e0       	ldi	r18, 0x06	; 6
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2442
     13e:	a0 ef       	ldi	r26, 0xF0	; 240
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2443
     140:	b3 e0       	ldi	r27, 0x03	; 3
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2444
     142:	01 c0       	rjmp	.+2      	; 0x146 <.do_clear_bss_start>

00000144 <.do_clear_bss_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2446
     144:	1d 92       	st	X+, r1

00000146 <.do_clear_bss_start>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2448
     146:	ab 34       	cpi	r26, 0x4B	; 75
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2449
     148:	b2 07       	cpc	r27, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2450
     14a:	e1 f7       	brne	.-8      	; 0x144 <.do_clear_bss_loop>

0000014c <__do_global_ctors>:
__do_global_ctors():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2466
     14c:	10 e0       	ldi	r17, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2467
     14e:	cb e8       	ldi	r28, 0x8B	; 139
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2468
     150:	d0 e0       	ldi	r29, 0x00	; 0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2472
     152:	04 c0       	rjmp	.+8      	; 0x15c <__do_global_ctors+0x10>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2474
     154:	21 97       	sbiw	r28, 0x01	; 1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2480
     156:	fe 01       	movw	r30, r28
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2481
     158:	0e 94 dd 19 	call	0x33ba	; 0x33ba <__tablejump2__>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2483
     15c:	c8 38       	cpi	r28, 0x88	; 136
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2484
     15e:	d1 07       	cpc	r29, r17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2489
     160:	c9 f7       	brne	.-14     	; 0x154 <__do_global_ctors+0x8>
     162:	0e 94 5c 17 	call	0x2eb8	; 0x2eb8 <main>
     166:	0c 94 c4 1c 	jmp	0x3988	; 0x3988 <_exit>

0000016a <__bad_interrupt>:
__vector_22():
     16a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000016e <lcd_clear_buf(char*)>:
_Z13lcd_clear_bufPc():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:466

    lcd.clear();
    lcd.setCursor(0, 3);
    //  "1.3.5.7.9.........20"
    lcd.print("Testing over...!!   ");
    new_delay_msecs (2000);
     16e:	00 97       	sbiw	r24, 0x00	; 0
     170:	49 f0       	breq	.+18     	; 0x184 <lcd_clear_buf(char*)+0x16>
     172:	fc 01       	movw	r30, r24
     174:	9c 01       	movw	r18, r24
     176:	2c 5e       	subi	r18, 0xEC	; 236
     178:	3f 4f       	sbci	r19, 0xFF	; 255
     17a:	40 e2       	ldi	r20, 0x20	; 32
     17c:	41 93       	st	Z+, r20
     17e:	2e 17       	cp	r18, r30
     180:	3f 07       	cpc	r19, r31
     182:	e1 f7       	brne	.-8      	; 0x17c <lcd_clear_buf(char*)+0xe>
     184:	fc 01       	movw	r30, r24
     186:	14 8a       	std	Z+20, r1	; 0x14
     188:	08 95       	ret

0000018a <set7segmentDigit(int, int, unsigned char)>:
_Z16set7segmentDigitiih():
     18a:	0f 93       	push	r16
     18c:	1f 93       	push	r17
     18e:	cf 93       	push	r28
     190:	8b 01       	movw	r16, r22
     192:	c0 e0       	ldi	r28, 0x00	; 0
     194:	41 30       	cpi	r20, 0x01	; 1
     196:	09 f4       	brne	.+2      	; 0x19a <set7segmentDigit(int, int, unsigned char)+0x10>
     198:	c0 e8       	ldi	r28, 0x80	; 128
     19a:	28 2f       	mov	r18, r24
     19c:	41 e0       	ldi	r20, 0x01	; 1
     19e:	67 e0       	ldi	r22, 0x07	; 7
     1a0:	85 e0       	ldi	r24, 0x05	; 5
     1a2:	0e 94 e6 12 	call	0x25cc	; 0x25cc <shiftOut>
     1a6:	f8 01       	movw	r30, r16
     1a8:	e0 50       	subi	r30, 0x00	; 0
     1aa:	ff 4f       	sbci	r31, 0xFF	; 255
     1ac:	20 81       	ld	r18, Z
     1ae:	2c 2b       	or	r18, r28
     1b0:	41 e0       	ldi	r20, 0x01	; 1
     1b2:	67 e0       	ldi	r22, 0x07	; 7
     1b4:	85 e0       	ldi	r24, 0x05	; 5
     1b6:	0e 94 e6 12 	call	0x25cc	; 0x25cc <shiftOut>
     1ba:	60 e0       	ldi	r22, 0x00	; 0
     1bc:	8d e0       	ldi	r24, 0x0D	; 13
     1be:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
     1c2:	61 e0       	ldi	r22, 0x01	; 1
     1c4:	8d e0       	ldi	r24, 0x0D	; 13
     1c6:	cf 91       	pop	r28
     1c8:	1f 91       	pop	r17
     1ca:	0f 91       	pop	r16
     1cc:	0c 94 8f 12 	jmp	0x251e	; 0x251e <digitalWrite>

000001d0 <set7segmentRegister(int, int)>:
_Z19set7segmentRegisterii():
     1d0:	cf 93       	push	r28
     1d2:	c6 2f       	mov	r28, r22
     1d4:	28 2f       	mov	r18, r24
     1d6:	41 e0       	ldi	r20, 0x01	; 1
     1d8:	67 e0       	ldi	r22, 0x07	; 7
     1da:	85 e0       	ldi	r24, 0x05	; 5
     1dc:	0e 94 e6 12 	call	0x25cc	; 0x25cc <shiftOut>
     1e0:	2c 2f       	mov	r18, r28
     1e2:	41 e0       	ldi	r20, 0x01	; 1
     1e4:	67 e0       	ldi	r22, 0x07	; 7
     1e6:	85 e0       	ldi	r24, 0x05	; 5
     1e8:	0e 94 e6 12 	call	0x25cc	; 0x25cc <shiftOut>
     1ec:	60 e0       	ldi	r22, 0x00	; 0
     1ee:	8d e0       	ldi	r24, 0x0D	; 13
     1f0:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
     1f4:	61 e0       	ldi	r22, 0x01	; 1
     1f6:	8d e0       	ldi	r24, 0x0D	; 13
     1f8:	cf 91       	pop	r28
     1fa:	0c 94 8f 12 	jmp	0x251e	; 0x251e <digitalWrite>

000001fe <init_7segments()>:
_Z14init_7segmentsv():
     1fe:	67 e0       	ldi	r22, 0x07	; 7
     200:	70 e0       	ldi	r23, 0x00	; 0
     202:	8a e0       	ldi	r24, 0x0A	; 10
     204:	90 e0       	ldi	r25, 0x00	; 0
     206:	0e 94 e8 00 	call	0x1d0	; 0x1d0 <set7segmentRegister(int, int)>
     20a:	61 e0       	ldi	r22, 0x01	; 1
     20c:	70 e0       	ldi	r23, 0x00	; 0
     20e:	8c e0       	ldi	r24, 0x0C	; 12
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	0c 94 e8 00 	jmp	0x1d0	; 0x1d0 <set7segmentRegister(int, int)>

00000216 <display_o2(float)>:
_Z10display_o2f():
     216:	0f 93       	push	r16
     218:	1f 93       	push	r17
     21a:	cf 93       	push	r28
     21c:	df 93       	push	r29
     21e:	20 e0       	ldi	r18, 0x00	; 0
     220:	30 e0       	ldi	r19, 0x00	; 0
     222:	40 e2       	ldi	r20, 0x20	; 32
     224:	51 e4       	ldi	r21, 0x41	; 65
     226:	0e 94 35 19 	call	0x326a	; 0x326a <__mulsf3>
     22a:	0e 94 4f 18 	call	0x309e	; 0x309e <__fixunssfsi>
     22e:	eb 01       	movw	r28, r22
     230:	cb 01       	movw	r24, r22
     232:	64 e6       	ldi	r22, 0x64	; 100
     234:	70 e0       	ldi	r23, 0x00	; 0
     236:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
     23a:	cb 01       	movw	r24, r22
     23c:	0a e0       	ldi	r16, 0x0A	; 10
     23e:	10 e0       	ldi	r17, 0x00	; 0
     240:	b8 01       	movw	r22, r16
     242:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
     246:	40 e0       	ldi	r20, 0x00	; 0
     248:	bc 01       	movw	r22, r24
     24a:	81 e0       	ldi	r24, 0x01	; 1
     24c:	90 e0       	ldi	r25, 0x00	; 0
     24e:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     252:	ce 01       	movw	r24, r28
     254:	b8 01       	movw	r22, r16
     256:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
     25a:	ec 01       	movw	r28, r24
     25c:	cb 01       	movw	r24, r22
     25e:	b8 01       	movw	r22, r16
     260:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
     264:	41 e0       	ldi	r20, 0x01	; 1
     266:	bc 01       	movw	r22, r24
     268:	82 e0       	ldi	r24, 0x02	; 2
     26a:	90 e0       	ldi	r25, 0x00	; 0
     26c:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     270:	40 e0       	ldi	r20, 0x00	; 0
     272:	be 01       	movw	r22, r28
     274:	83 e0       	ldi	r24, 0x03	; 3
     276:	90 e0       	ldi	r25, 0x00	; 0
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	1f 91       	pop	r17
     27e:	0f 91       	pop	r16
     280:	0c 94 c5 00 	jmp	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>

00000284 <display_total_run_hours(unsigned long)>:
_Z23display_total_run_hoursm():
     284:	8f 92       	push	r8
     286:	9f 92       	push	r9
     288:	af 92       	push	r10
     28a:	bf 92       	push	r11
     28c:	cf 92       	push	r12
     28e:	df 92       	push	r13
     290:	ef 92       	push	r14
     292:	ff 92       	push	r15
     294:	4b 01       	movw	r8, r22
     296:	5c 01       	movw	r10, r24
     298:	20 e1       	ldi	r18, 0x10	; 16
     29a:	37 e2       	ldi	r19, 0x27	; 39
     29c:	40 e0       	ldi	r20, 0x00	; 0
     29e:	50 e0       	ldi	r21, 0x00	; 0
     2a0:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
     2a4:	8a e0       	ldi	r24, 0x0A	; 10
     2a6:	c8 2e       	mov	r12, r24
     2a8:	d1 2c       	mov	r13, r1
     2aa:	e1 2c       	mov	r14, r1
     2ac:	f1 2c       	mov	r15, r1
     2ae:	ca 01       	movw	r24, r20
     2b0:	b9 01       	movw	r22, r18
     2b2:	a7 01       	movw	r20, r14
     2b4:	96 01       	movw	r18, r12
     2b6:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
     2ba:	40 e0       	ldi	r20, 0x00	; 0
     2bc:	84 e0       	ldi	r24, 0x04	; 4
     2be:	90 e0       	ldi	r25, 0x00	; 0
     2c0:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     2c4:	c5 01       	movw	r24, r10
     2c6:	b4 01       	movw	r22, r8
     2c8:	28 ee       	ldi	r18, 0xE8	; 232
     2ca:	33 e0       	ldi	r19, 0x03	; 3
     2cc:	40 e0       	ldi	r20, 0x00	; 0
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
     2d4:	ca 01       	movw	r24, r20
     2d6:	b9 01       	movw	r22, r18
     2d8:	a7 01       	movw	r20, r14
     2da:	96 01       	movw	r18, r12
     2dc:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
     2e0:	40 e0       	ldi	r20, 0x00	; 0
     2e2:	85 e0       	ldi	r24, 0x05	; 5
     2e4:	90 e0       	ldi	r25, 0x00	; 0
     2e6:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     2ea:	c5 01       	movw	r24, r10
     2ec:	b4 01       	movw	r22, r8
     2ee:	24 e6       	ldi	r18, 0x64	; 100
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	40 e0       	ldi	r20, 0x00	; 0
     2f4:	50 e0       	ldi	r21, 0x00	; 0
     2f6:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
     2fa:	ca 01       	movw	r24, r20
     2fc:	b9 01       	movw	r22, r18
     2fe:	a7 01       	movw	r20, r14
     300:	96 01       	movw	r18, r12
     302:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
     306:	40 e0       	ldi	r20, 0x00	; 0
     308:	86 e0       	ldi	r24, 0x06	; 6
     30a:	90 e0       	ldi	r25, 0x00	; 0
     30c:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     310:	c5 01       	movw	r24, r10
     312:	b4 01       	movw	r22, r8
     314:	a7 01       	movw	r20, r14
     316:	96 01       	movw	r18, r12
     318:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
     31c:	4b 01       	movw	r8, r22
     31e:	ca 01       	movw	r24, r20
     320:	b9 01       	movw	r22, r18
     322:	a7 01       	movw	r20, r14
     324:	96 01       	movw	r18, r12
     326:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
     32a:	40 e0       	ldi	r20, 0x00	; 0
     32c:	87 e0       	ldi	r24, 0x07	; 7
     32e:	90 e0       	ldi	r25, 0x00	; 0
     330:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     334:	40 e0       	ldi	r20, 0x00	; 0
     336:	b4 01       	movw	r22, r8
     338:	88 e0       	ldi	r24, 0x08	; 8
     33a:	90 e0       	ldi	r25, 0x00	; 0
     33c:	ff 90       	pop	r15
     33e:	ef 90       	pop	r14
     340:	df 90       	pop	r13
     342:	cf 90       	pop	r12
     344:	bf 90       	pop	r11
     346:	af 90       	pop	r10
     348:	9f 90       	pop	r9
     34a:	8f 90       	pop	r8
     34c:	0c 94 c5 00 	jmp	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>

00000350 <display_current_run_hours(unsigned int, unsigned int)>:
_Z25display_current_run_hoursjj():
     350:	ef 92       	push	r14
     352:	ff 92       	push	r15
     354:	0f 93       	push	r16
     356:	1f 93       	push	r17
     358:	cf 93       	push	r28
     35a:	df 93       	push	r29
     35c:	9c 01       	movw	r18, r24
     35e:	cb 01       	movw	r24, r22
     360:	6c e3       	ldi	r22, 0x3C	; 60
     362:	70 e0       	ldi	r23, 0x00	; 0
     364:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
     368:	8c 01       	movw	r16, r24
     36a:	c9 01       	movw	r24, r18
     36c:	63 e6       	ldi	r22, 0x63	; 99
     36e:	70 e0       	ldi	r23, 0x00	; 0
     370:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
     374:	ca e0       	ldi	r28, 0x0A	; 10
     376:	d0 e0       	ldi	r29, 0x00	; 0
     378:	be 01       	movw	r22, r28
     37a:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
     37e:	7b 01       	movw	r14, r22
     380:	40 e0       	ldi	r20, 0x00	; 0
     382:	bc 01       	movw	r22, r24
     384:	84 e0       	ldi	r24, 0x04	; 4
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     38c:	40 e0       	ldi	r20, 0x00	; 0
     38e:	b7 01       	movw	r22, r14
     390:	85 e0       	ldi	r24, 0x05	; 5
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     398:	41 e0       	ldi	r20, 0x01	; 1
     39a:	6b e0       	ldi	r22, 0x0B	; 11
     39c:	70 e0       	ldi	r23, 0x00	; 0
     39e:	86 e0       	ldi	r24, 0x06	; 6
     3a0:	90 e0       	ldi	r25, 0x00	; 0
     3a2:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     3a6:	c8 01       	movw	r24, r16
     3a8:	be 01       	movw	r22, r28
     3aa:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
     3ae:	eb 01       	movw	r28, r22
     3b0:	40 e0       	ldi	r20, 0x00	; 0
     3b2:	bc 01       	movw	r22, r24
     3b4:	87 e0       	ldi	r24, 0x07	; 7
     3b6:	90 e0       	ldi	r25, 0x00	; 0
     3b8:	0e 94 c5 00 	call	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>
     3bc:	40 e0       	ldi	r20, 0x00	; 0
     3be:	be 01       	movw	r22, r28
     3c0:	88 e0       	ldi	r24, 0x08	; 8
     3c2:	90 e0       	ldi	r25, 0x00	; 0
     3c4:	df 91       	pop	r29
     3c6:	cf 91       	pop	r28
     3c8:	1f 91       	pop	r17
     3ca:	0f 91       	pop	r16
     3cc:	ff 90       	pop	r15
     3ce:	ef 90       	pop	r14
     3d0:	0c 94 c5 00 	jmp	0x18a	; 0x18a <set7segmentDigit(int, int, unsigned char)>

000003d4 <log_dump()>:
_Z8log_dumpv():
     3d4:	0f 93       	push	r16
     3d6:	1f 93       	push	r17
     3d8:	cf 93       	push	r28
     3da:	df 93       	push	r29
     3dc:	20 91 65 04 	lds	r18, 0x0465	; 0x800465 <systemtick_secs>
     3e0:	90 91 64 04 	lds	r25, 0x0464	; 0x800464 <systemtick_mins>
     3e4:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <systemtick_hrs>
     3e8:	1f 92       	push	r1
     3ea:	2f 93       	push	r18
     3ec:	1f 92       	push	r1
     3ee:	9f 93       	push	r25
     3f0:	1f 92       	push	r1
     3f2:	8f 93       	push	r24
     3f4:	00 e1       	ldi	r16, 0x10	; 16
     3f6:	11 e0       	ldi	r17, 0x01	; 1
     3f8:	1f 93       	push	r17
     3fa:	0f 93       	push	r16
     3fc:	c4 e1       	ldi	r28, 0x14	; 20
     3fe:	d4 e0       	ldi	r29, 0x04	; 4
     400:	df 93       	push	r29
     402:	cf 93       	push	r28
     404:	0e 94 ed 19 	call	0x33da	; 0x33da <sprintf>
     408:	be 01       	movw	r22, r28
     40a:	8e ea       	ldi	r24, 0xAE	; 174
     40c:	95 e0       	ldi	r25, 0x05	; 5
     40e:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     412:	e0 91 52 04 	lds	r30, 0x0452	; 0x800452 <current_run_time_secs>
     416:	f0 91 53 04 	lds	r31, 0x0453	; 0x800453 <current_run_time_secs+0x1>
     41a:	2c e3       	ldi	r18, 0x3C	; 60
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	cf 01       	movw	r24, r30
     420:	b9 01       	movw	r22, r18
     422:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
     426:	9f 93       	push	r25
     428:	8f 93       	push	r24
     42a:	cf 01       	movw	r24, r30
     42c:	60 e1       	ldi	r22, 0x10	; 16
     42e:	7e e0       	ldi	r23, 0x0E	; 14
     430:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
     434:	46 2f       	mov	r20, r22
     436:	e7 2f       	mov	r30, r23
     438:	b9 01       	movw	r22, r18
     43a:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
     43e:	7f 93       	push	r23
     440:	6f 93       	push	r22
     442:	ef 93       	push	r30
     444:	4f 93       	push	r20
     446:	1f 93       	push	r17
     448:	0f 93       	push	r16
     44a:	df 93       	push	r29
     44c:	cf 93       	push	r28
     44e:	0e 94 ed 19 	call	0x33da	; 0x33da <sprintf>
     452:	be 01       	movw	r22, r28
     454:	8e ea       	ldi	r24, 0xAE	; 174
     456:	95 e0       	ldi	r25, 0x05	; 5
     458:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     45c:	40 91 4a 04 	lds	r20, 0x044A	; 0x80044a <Production_Delay>
     460:	50 91 4b 04 	lds	r21, 0x044B	; 0x80044b <Production_Delay+0x1>
     464:	60 91 4c 04 	lds	r22, 0x044C	; 0x80044c <Production_Delay+0x2>
     468:	70 91 4d 04 	lds	r23, 0x044D	; 0x80044d <Production_Delay+0x3>
     46c:	2a e0       	ldi	r18, 0x0A	; 10
     46e:	30 e0       	ldi	r19, 0x00	; 0
     470:	8e ea       	ldi	r24, 0xAE	; 174
     472:	95 e0       	ldi	r25, 0x05	; 5
     474:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <Print::print(unsigned long, int)>
     478:	62 ea       	ldi	r22, 0xA2	; 162
     47a:	73 e0       	ldi	r23, 0x03	; 3
     47c:	8e ea       	ldi	r24, 0xAE	; 174
     47e:	95 e0       	ldi	r25, 0x05	; 5
     480:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     484:	40 91 46 04 	lds	r20, 0x0446	; 0x800446 <Flush_Delay>
     488:	50 91 47 04 	lds	r21, 0x0447	; 0x800447 <Flush_Delay+0x1>
     48c:	60 91 48 04 	lds	r22, 0x0448	; 0x800448 <Flush_Delay+0x2>
     490:	70 91 49 04 	lds	r23, 0x0449	; 0x800449 <Flush_Delay+0x3>
     494:	2a e0       	ldi	r18, 0x0A	; 10
     496:	30 e0       	ldi	r19, 0x00	; 0
     498:	8e ea       	ldi	r24, 0xAE	; 174
     49a:	95 e0       	ldi	r25, 0x05	; 5
     49c:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <Print::print(unsigned long, int)>
     4a0:	62 ea       	ldi	r22, 0xA2	; 162
     4a2:	73 e0       	ldi	r23, 0x03	; 3
     4a4:	8e ea       	ldi	r24, 0xAE	; 174
     4a6:	95 e0       	ldi	r25, 0x05	; 5
     4a8:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     4ac:	40 91 42 04 	lds	r20, 0x0442	; 0x800442 <PreCharge_Delay>
     4b0:	50 91 43 04 	lds	r21, 0x0443	; 0x800443 <PreCharge_Delay+0x1>
     4b4:	60 91 44 04 	lds	r22, 0x0444	; 0x800444 <PreCharge_Delay+0x2>
     4b8:	70 91 45 04 	lds	r23, 0x0445	; 0x800445 <PreCharge_Delay+0x3>
     4bc:	2a e0       	ldi	r18, 0x0A	; 10
     4be:	30 e0       	ldi	r19, 0x00	; 0
     4c0:	8e ea       	ldi	r24, 0xAE	; 174
     4c2:	95 e0       	ldi	r25, 0x05	; 5
     4c4:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <Print::print(unsigned long, int)>
     4c8:	62 ea       	ldi	r22, 0xA2	; 162
     4ca:	73 e0       	ldi	r23, 0x03	; 3
     4cc:	8e ea       	ldi	r24, 0xAE	; 174
     4ce:	95 e0       	ldi	r25, 0x05	; 5
     4d0:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     4d4:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <do_byte>
     4d8:	82 fb       	bst	r24, 2
     4da:	99 27       	eor	r25, r25
     4dc:	90 f9       	bld	r25, 0
     4de:	1f 92       	push	r1
     4e0:	9f 93       	push	r25
     4e2:	81 fb       	bst	r24, 1
     4e4:	99 27       	eor	r25, r25
     4e6:	90 f9       	bld	r25, 0
     4e8:	1f 92       	push	r1
     4ea:	9f 93       	push	r25
     4ec:	81 70       	andi	r24, 0x01	; 1
     4ee:	1f 92       	push	r1
     4f0:	8f 93       	push	r24
     4f2:	00 e2       	ldi	r16, 0x20	; 32
     4f4:	11 e0       	ldi	r17, 0x01	; 1
     4f6:	1f 93       	push	r17
     4f8:	0f 93       	push	r16
     4fa:	df 93       	push	r29
     4fc:	cf 93       	push	r28
     4fe:	0e 94 ed 19 	call	0x33da	; 0x33da <sprintf>
     502:	be 01       	movw	r22, r28
     504:	8e ea       	ldi	r24, 0xAE	; 174
     506:	95 e0       	ldi	r25, 0x05	; 5
     508:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     50c:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <o2_raw_adc_count>
     510:	70 91 38 04 	lds	r23, 0x0438	; 0x800438 <o2_raw_adc_count+0x1>
     514:	4a e0       	ldi	r20, 0x0A	; 10
     516:	50 e0       	ldi	r21, 0x00	; 0
     518:	8e ea       	ldi	r24, 0xAE	; 174
     51a:	95 e0       	ldi	r25, 0x05	; 5
     51c:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <Print::print(int, int)>
     520:	62 ea       	ldi	r22, 0xA2	; 162
     522:	73 e0       	ldi	r23, 0x03	; 3
     524:	8e ea       	ldi	r24, 0xAE	; 174
     526:	95 e0       	ldi	r25, 0x05	; 5
     528:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     52c:	40 91 2b 04 	lds	r20, 0x042B	; 0x80042b <m_raw_voltage>
     530:	50 91 2c 04 	lds	r21, 0x042C	; 0x80042c <m_raw_voltage+0x1>
     534:	60 91 2d 04 	lds	r22, 0x042D	; 0x80042d <m_raw_voltage+0x2>
     538:	70 91 2e 04 	lds	r23, 0x042E	; 0x80042e <m_raw_voltage+0x3>
     53c:	22 e0       	ldi	r18, 0x02	; 2
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	8e ea       	ldi	r24, 0xAE	; 174
     542:	95 e0       	ldi	r25, 0x05	; 5
     544:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Print::print(double, int)>
     548:	62 ea       	ldi	r22, 0xA2	; 162
     54a:	73 e0       	ldi	r23, 0x03	; 3
     54c:	8e ea       	ldi	r24, 0xAE	; 174
     54e:	95 e0       	ldi	r25, 0x05	; 5
     550:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     554:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <o2_concentration>
     558:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <o2_concentration+0x1>
     55c:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <o2_concentration+0x2>
     560:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <o2_concentration+0x3>
     564:	22 e0       	ldi	r18, 0x02	; 2
     566:	30 e0       	ldi	r19, 0x00	; 0
     568:	8e ea       	ldi	r24, 0xAE	; 174
     56a:	95 e0       	ldi	r25, 0x05	; 5
     56c:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Print::print(double, int)>
     570:	62 ea       	ldi	r22, 0xA2	; 162
     572:	73 e0       	ldi	r23, 0x03	; 3
     574:	8e ea       	ldi	r24, 0xAE	; 174
     576:	95 e0       	ldi	r25, 0x05	; 5
     578:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     57c:	1f 92       	push	r1
     57e:	83 e0       	ldi	r24, 0x03	; 3
     580:	8f 93       	push	r24
     582:	1f 92       	push	r1
     584:	82 e0       	ldi	r24, 0x02	; 2
     586:	8f 93       	push	r24
     588:	1f 92       	push	r1
     58a:	81 e0       	ldi	r24, 0x01	; 1
     58c:	8f 93       	push	r24
     58e:	1f 93       	push	r17
     590:	0f 93       	push	r16
     592:	df 93       	push	r29
     594:	cf 93       	push	r28
     596:	0e 94 ed 19 	call	0x33da	; 0x33da <sprintf>
     59a:	8d b7       	in	r24, 0x3d	; 61
     59c:	9e b7       	in	r25, 0x3e	; 62
     59e:	88 96       	adiw	r24, 0x28	; 40
     5a0:	0f b6       	in	r0, 0x3f	; 63
     5a2:	f8 94       	cli
     5a4:	9e bf       	out	0x3e, r25	; 62
     5a6:	0f be       	out	0x3f, r0	; 63
     5a8:	8d bf       	out	0x3d, r24	; 61
     5aa:	be 01       	movw	r22, r28
     5ac:	8e ea       	ldi	r24, 0xAE	; 174
     5ae:	95 e0       	ldi	r25, 0x05	; 5
     5b0:	df 91       	pop	r29
     5b2:	cf 91       	pop	r28
     5b4:	1f 91       	pop	r17
     5b6:	0f 91       	pop	r16
     5b8:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <Print::println(char const*)>

000005bc <logs_task()>:
_Z9logs_taskv():
     5bc:	80 91 5b 04 	lds	r24, 0x045B	; 0x80045b <f_sec_logs_task>
     5c0:	88 23       	and	r24, r24
     5c2:	a9 f0       	breq	.+42     	; 0x5ee <logs_task()+0x32>
     5c4:	10 92 5b 04 	sts	0x045B, r1	; 0x80045b <f_sec_logs_task>
     5c8:	80 91 12 04 	lds	r24, 0x0412	; 0x800412 <logs_task()::log_period>
     5cc:	90 91 13 04 	lds	r25, 0x0413	; 0x800413 <logs_task()::log_period+0x1>
     5d0:	01 96       	adiw	r24, 0x01	; 1
     5d2:	82 30       	cpi	r24, 0x02	; 2
     5d4:	91 05       	cpc	r25, r1
     5d6:	2c f4       	brge	.+10     	; 0x5e2 <logs_task()+0x26>
     5d8:	90 93 13 04 	sts	0x0413, r25	; 0x800413 <logs_task()::log_period+0x1>
     5dc:	80 93 12 04 	sts	0x0412, r24	; 0x800412 <logs_task()::log_period>
     5e0:	08 95       	ret
     5e2:	10 92 13 04 	sts	0x0413, r1	; 0x800413 <logs_task()::log_period+0x1>
     5e6:	10 92 12 04 	sts	0x0412, r1	; 0x800412 <logs_task()::log_period>
     5ea:	0c 94 ea 01 	jmp	0x3d4	; 0x3d4 <log_dump()>
     5ee:	08 95       	ret

000005f0 <ads_init()>:
_Z8ads_initv():
     5f0:	6a e2       	ldi	r22, 0x2A	; 42
     5f2:	71 e0       	ldi	r23, 0x01	; 1
     5f4:	8e ea       	ldi	r24, 0xAE	; 174
     5f6:	95 e0       	ldi	r25, 0x05	; 5
     5f8:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     5fc:	6c e8       	ldi	r22, 0x8C	; 140
     5fe:	70 e0       	ldi	r23, 0x00	; 0
     600:	8e ea       	ldi	r24, 0xAE	; 174
     602:	95 e0       	ldi	r25, 0x05	; 5
     604:	0e 94 61 15 	call	0x2ac2	; 0x2ac2 <Print::println(__FlashStringHelper const*)>
     608:	8c ef       	ldi	r24, 0xFC	; 252
     60a:	93 e0       	ldi	r25, 0x03	; 3
     60c:	0e 94 36 0c 	call	0x186c	; 0x186c <ADS1X15::begin()>
     610:	61 e0       	ldi	r22, 0x01	; 1
     612:	8c ef       	ldi	r24, 0xFC	; 252
     614:	93 e0       	ldi	r25, 0x03	; 3
     616:	0e 94 4a 0c 	call	0x1894	; 0x1894 <ADS1X15::setGain(unsigned char)>
     61a:	67 e0       	ldi	r22, 0x07	; 7
     61c:	8c ef       	ldi	r24, 0xFC	; 252
     61e:	93 e0       	ldi	r25, 0x03	; 3
     620:	0e 94 97 0c 	call	0x192e	; 0x192e <ADS1X15::setDataRate(unsigned char)>
     624:	60 e0       	ldi	r22, 0x00	; 0
     626:	8c ef       	ldi	r24, 0xFC	; 252
     628:	93 e0       	ldi	r25, 0x03	; 3
     62a:	0e 94 8b 0c 	call	0x1916	; 0x1916 <ADS1X15::setMode(unsigned char)>
     62e:	60 e0       	ldi	r22, 0x00	; 0
     630:	8c ef       	ldi	r24, 0xFC	; 252
     632:	93 e0       	ldi	r25, 0x03	; 3
     634:	0c 94 86 0d 	jmp	0x1b0c	; 0x1b0c <ADS1X15::readADC(unsigned char)>

00000638 <o2_sensor_scan()>:
_Z14o2_sensor_scanv():
     638:	cf 92       	push	r12
     63a:	df 92       	push	r13
     63c:	ef 92       	push	r14
     63e:	ff 92       	push	r15
     640:	60 e0       	ldi	r22, 0x00	; 0
     642:	8c ef       	ldi	r24, 0xFC	; 252
     644:	93 e0       	ldi	r25, 0x03	; 3
     646:	0e 94 86 0d 	call	0x1b0c	; 0x1b0c <ADS1X15::readADC(unsigned char)>
     64a:	8c ef       	ldi	r24, 0xFC	; 252
     64c:	93 e0       	ldi	r25, 0x03	; 3
     64e:	0e 94 57 0d 	call	0x1aae	; 0x1aae <ADS1X15::getValue()>
     652:	90 93 38 04 	sts	0x0438, r25	; 0x800438 <o2_raw_adc_count+0x1>
     656:	80 93 37 04 	sts	0x0437, r24	; 0x800437 <o2_raw_adc_count>
     65a:	66 ec       	ldi	r22, 0xC6	; 198
     65c:	71 e0       	ldi	r23, 0x01	; 1
     65e:	8e ea       	ldi	r24, 0xAE	; 174
     660:	95 e0       	ldi	r25, 0x05	; 5
     662:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     666:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <o2_raw_adc_count>
     66a:	70 91 38 04 	lds	r23, 0x0438	; 0x800438 <o2_raw_adc_count+0x1>
     66e:	4a e0       	ldi	r20, 0x0A	; 10
     670:	50 e0       	ldi	r21, 0x00	; 0
     672:	8e ea       	ldi	r24, 0xAE	; 174
     674:	95 e0       	ldi	r25, 0x05	; 5
     676:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <Print::print(int, int)>
     67a:	60 91 37 04 	lds	r22, 0x0437	; 0x800437 <o2_raw_adc_count>
     67e:	70 91 38 04 	lds	r23, 0x0438	; 0x800438 <o2_raw_adc_count+0x1>
     682:	07 2e       	mov	r0, r23
     684:	00 0c       	add	r0, r0
     686:	88 0b       	sbc	r24, r24
     688:	99 0b       	sbc	r25, r25
     68a:	0e 94 80 18 	call	0x3100	; 0x3100 <__floatsisf>
     68e:	20 e0       	ldi	r18, 0x00	; 0
     690:	30 e0       	ldi	r19, 0x00	; 0
     692:	4a e7       	ldi	r20, 0x7A	; 122
     694:	54 e4       	ldi	r21, 0x44	; 68
     696:	0e 94 35 19 	call	0x326a	; 0x326a <__mulsf3>
     69a:	2f e6       	ldi	r18, 0x6F	; 111
     69c:	32 e1       	ldi	r19, 0x12	; 18
     69e:	43 e0       	ldi	r20, 0x03	; 3
     6a0:	59 e3       	ldi	r21, 0x39	; 57
     6a2:	0e 94 35 19 	call	0x326a	; 0x326a <__mulsf3>
     6a6:	60 93 2b 04 	sts	0x042B, r22	; 0x80042b <m_raw_voltage>
     6aa:	70 93 2c 04 	sts	0x042C, r23	; 0x80042c <m_raw_voltage+0x1>
     6ae:	80 93 2d 04 	sts	0x042D, r24	; 0x80042d <m_raw_voltage+0x2>
     6b2:	90 93 2e 04 	sts	0x042E, r25	; 0x80042e <m_raw_voltage+0x3>
     6b6:	6a ed       	ldi	r22, 0xDA	; 218
     6b8:	71 e0       	ldi	r23, 0x01	; 1
     6ba:	8e ea       	ldi	r24, 0xAE	; 174
     6bc:	95 e0       	ldi	r25, 0x05	; 5
     6be:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     6c2:	40 91 2b 04 	lds	r20, 0x042B	; 0x80042b <m_raw_voltage>
     6c6:	50 91 2c 04 	lds	r21, 0x042C	; 0x80042c <m_raw_voltage+0x1>
     6ca:	60 91 2d 04 	lds	r22, 0x042D	; 0x80042d <m_raw_voltage+0x2>
     6ce:	70 91 2e 04 	lds	r23, 0x042E	; 0x80042e <m_raw_voltage+0x3>
     6d2:	24 e0       	ldi	r18, 0x04	; 4
     6d4:	30 e0       	ldi	r19, 0x00	; 0
     6d6:	8e ea       	ldi	r24, 0xAE	; 174
     6d8:	95 e0       	ldi	r25, 0x05	; 5
     6da:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Print::print(double, int)>
     6de:	60 91 2b 04 	lds	r22, 0x042B	; 0x80042b <m_raw_voltage>
     6e2:	70 91 2c 04 	lds	r23, 0x042C	; 0x80042c <m_raw_voltage+0x1>
     6e6:	80 91 2d 04 	lds	r24, 0x042D	; 0x80042d <m_raw_voltage+0x2>
     6ea:	90 91 2e 04 	lds	r25, 0x042E	; 0x80042e <m_raw_voltage+0x3>
     6ee:	20 91 33 04 	lds	r18, 0x0433	; 0x800433 <o2_slope>
     6f2:	30 91 34 04 	lds	r19, 0x0434	; 0x800434 <o2_slope+0x1>
     6f6:	40 91 35 04 	lds	r20, 0x0435	; 0x800435 <o2_slope+0x2>
     6fa:	50 91 36 04 	lds	r21, 0x0436	; 0x800436 <o2_slope+0x3>
     6fe:	c0 90 2f 04 	lds	r12, 0x042F	; 0x80042f <o2_const_val>
     702:	d0 90 30 04 	lds	r13, 0x0430	; 0x800430 <o2_const_val+0x1>
     706:	e0 90 31 04 	lds	r14, 0x0431	; 0x800431 <o2_const_val+0x2>
     70a:	f0 90 32 04 	lds	r15, 0x0432	; 0x800432 <o2_const_val+0x3>
     70e:	0e 94 35 19 	call	0x326a	; 0x326a <__mulsf3>
     712:	a7 01       	movw	r20, r14
     714:	96 01       	movw	r18, r12
     716:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
     71a:	60 93 0c 01 	sts	0x010C, r22	; 0x80010c <o2_concentration>
     71e:	70 93 0d 01 	sts	0x010D, r23	; 0x80010d <o2_concentration+0x1>
     722:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <o2_concentration+0x2>
     726:	90 93 0f 01 	sts	0x010F, r25	; 0x80010f <o2_concentration+0x3>
     72a:	6d ee       	ldi	r22, 0xED	; 237
     72c:	71 e0       	ldi	r23, 0x01	; 1
     72e:	8e ea       	ldi	r24, 0xAE	; 174
     730:	95 e0       	ldi	r25, 0x05	; 5
     732:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     736:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <o2_concentration>
     73a:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <o2_concentration+0x1>
     73e:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <o2_concentration+0x2>
     742:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <o2_concentration+0x3>
     746:	22 e0       	ldi	r18, 0x02	; 2
     748:	30 e0       	ldi	r19, 0x00	; 0
     74a:	8e ea       	ldi	r24, 0xAE	; 174
     74c:	95 e0       	ldi	r25, 0x05	; 5
     74e:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Print::print(double, int)>
     752:	40 91 0c 01 	lds	r20, 0x010C	; 0x80010c <o2_concentration>
     756:	50 91 0d 01 	lds	r21, 0x010D	; 0x80010d <o2_concentration+0x1>
     75a:	60 91 0e 01 	lds	r22, 0x010E	; 0x80010e <o2_concentration+0x2>
     75e:	70 91 0f 01 	lds	r23, 0x010F	; 0x80010f <o2_concentration+0x3>
     762:	24 e0       	ldi	r18, 0x04	; 4
     764:	30 e0       	ldi	r19, 0x00	; 0
     766:	8e ea       	ldi	r24, 0xAE	; 174
     768:	95 e0       	ldi	r25, 0x05	; 5
     76a:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Print::print(double, int)>
     76e:	62 ee       	ldi	r22, 0xE2	; 226
     770:	73 e0       	ldi	r23, 0x03	; 3
     772:	8e ea       	ldi	r24, 0xAE	; 174
     774:	95 e0       	ldi	r25, 0x05	; 5
     776:	ff 90       	pop	r15
     778:	ef 90       	pop	r14
     77a:	df 90       	pop	r13
     77c:	cf 90       	pop	r12
     77e:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <Print::println(char const*)>

00000782 <config_timer1()>:
_Z13config_timer1v():
     782:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
     786:	e1 e8       	ldi	r30, 0x81	; 129
     788:	f0 e0       	ldi	r31, 0x00	; 0
     78a:	10 82       	st	Z, r1
     78c:	10 92 85 00 	sts	0x0085, r1	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
     790:	10 92 84 00 	sts	0x0084, r1	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
     794:	89 ef       	ldi	r24, 0xF9	; 249
     796:	90 e0       	ldi	r25, 0x00	; 0
     798:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7e0089>
     79c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7e0088>
     7a0:	80 81       	ld	r24, Z
     7a2:	88 60       	ori	r24, 0x08	; 8
     7a4:	80 83       	st	Z, r24
     7a6:	80 81       	ld	r24, Z
     7a8:	83 60       	ori	r24, 0x03	; 3
     7aa:	80 83       	st	Z, r24
     7ac:	ef e6       	ldi	r30, 0x6F	; 111
     7ae:	f0 e0       	ldi	r31, 0x00	; 0
     7b0:	80 81       	ld	r24, Z
     7b2:	82 60       	ori	r24, 0x02	; 2
     7b4:	80 83       	st	Z, r24
     7b6:	08 95       	ret

000007b8 <timer_init()>:
_Z10timer_initv():
     7b8:	f8 94       	cli
     7ba:	0e 94 c1 03 	call	0x782	; 0x782 <config_timer1()>
     7be:	78 94       	sei
     7c0:	63 e0       	ldi	r22, 0x03	; 3
     7c2:	72 e0       	ldi	r23, 0x02	; 2
     7c4:	8e ea       	ldi	r24, 0xAE	; 174
     7c6:	95 e0       	ldi	r25, 0x05	; 5
     7c8:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <Print::println(char const*)>

000007cc <__vector_13>:
__vector_13():
     7cc:	1f 92       	push	r1
     7ce:	0f 92       	push	r0
     7d0:	0f b6       	in	r0, 0x3f	; 63
     7d2:	0f 92       	push	r0
     7d4:	11 24       	eor	r1, r1
     7d6:	0b b6       	in	r0, 0x3b	; 59
     7d8:	0f 92       	push	r0
     7da:	2f 93       	push	r18
     7dc:	3f 93       	push	r19
     7de:	4f 93       	push	r20
     7e0:	5f 93       	push	r21
     7e2:	6f 93       	push	r22
     7e4:	7f 93       	push	r23
     7e6:	8f 93       	push	r24
     7e8:	9f 93       	push	r25
     7ea:	af 93       	push	r26
     7ec:	bf 93       	push	r27
     7ee:	cf 93       	push	r28
     7f0:	ef 93       	push	r30
     7f2:	ff 93       	push	r31
     7f4:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <systemtick_msecs>
     7f8:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     7fc:	a0 91 68 04 	lds	r26, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     800:	b0 91 69 04 	lds	r27, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     804:	01 96       	adiw	r24, 0x01	; 1
     806:	a1 1d       	adc	r26, r1
     808:	b1 1d       	adc	r27, r1
     80a:	80 93 66 04 	sts	0x0466, r24	; 0x800466 <systemtick_msecs>
     80e:	90 93 67 04 	sts	0x0467, r25	; 0x800467 <systemtick_msecs+0x1>
     812:	a0 93 68 04 	sts	0x0468, r26	; 0x800468 <systemtick_msecs+0x2>
     816:	b0 93 69 04 	sts	0x0469, r27	; 0x800469 <systemtick_msecs+0x3>
     81a:	c1 e0       	ldi	r28, 0x01	; 1
     81c:	c0 93 62 04 	sts	0x0462, r28	; 0x800462 <f_msec>
     820:	60 91 66 04 	lds	r22, 0x0466	; 0x800466 <systemtick_msecs>
     824:	70 91 67 04 	lds	r23, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     828:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     82c:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     830:	2a e0       	ldi	r18, 0x0A	; 10
     832:	30 e0       	ldi	r19, 0x00	; 0
     834:	40 e0       	ldi	r20, 0x00	; 0
     836:	50 e0       	ldi	r21, 0x00	; 0
     838:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
     83c:	67 2b       	or	r22, r23
     83e:	68 2b       	or	r22, r24
     840:	69 2b       	or	r22, r25
     842:	09 f0       	breq	.+2      	; 0x846 <__vector_13+0x7a>
     844:	49 c0       	rjmp	.+146    	; 0x8d8 <__vector_13+0x10c>
     846:	c0 93 61 04 	sts	0x0461, r28	; 0x800461 <f_10msec>
     84a:	60 91 66 04 	lds	r22, 0x0466	; 0x800466 <systemtick_msecs>
     84e:	70 91 67 04 	lds	r23, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     852:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     856:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     85a:	24 e6       	ldi	r18, 0x64	; 100
     85c:	30 e0       	ldi	r19, 0x00	; 0
     85e:	40 e0       	ldi	r20, 0x00	; 0
     860:	50 e0       	ldi	r21, 0x00	; 0
     862:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
     866:	67 2b       	or	r22, r23
     868:	68 2b       	or	r22, r24
     86a:	69 2b       	or	r22, r25
     86c:	a9 f5       	brne	.+106    	; 0x8d8 <__vector_13+0x10c>
     86e:	c0 93 60 04 	sts	0x0460, r28	; 0x800460 <f_100msec>
     872:	60 91 66 04 	lds	r22, 0x0466	; 0x800466 <systemtick_msecs>
     876:	70 91 67 04 	lds	r23, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     87a:	80 91 68 04 	lds	r24, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     87e:	90 91 69 04 	lds	r25, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     882:	28 ee       	ldi	r18, 0xE8	; 232
     884:	33 e0       	ldi	r19, 0x03	; 3
     886:	40 e0       	ldi	r20, 0x00	; 0
     888:	50 e0       	ldi	r21, 0x00	; 0
     88a:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
     88e:	67 2b       	or	r22, r23
     890:	68 2b       	or	r22, r24
     892:	69 2b       	or	r22, r25
     894:	09 f5       	brne	.+66     	; 0x8d8 <__vector_13+0x10c>
     896:	c0 93 5f 04 	sts	0x045F, r28	; 0x80045f <f_1sec>
     89a:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <systemtick_secs>
     89e:	8f 5f       	subi	r24, 0xFF	; 255
     8a0:	80 93 65 04 	sts	0x0465, r24	; 0x800465 <systemtick_secs>
     8a4:	80 91 65 04 	lds	r24, 0x0465	; 0x800465 <systemtick_secs>
     8a8:	8c 33       	cpi	r24, 0x3C	; 60
     8aa:	b0 f0       	brcs	.+44     	; 0x8d8 <__vector_13+0x10c>
     8ac:	10 92 65 04 	sts	0x0465, r1	; 0x800465 <systemtick_secs>
     8b0:	c0 93 5e 04 	sts	0x045E, r28	; 0x80045e <f_1min>
     8b4:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <systemtick_mins>
     8b8:	8f 5f       	subi	r24, 0xFF	; 255
     8ba:	80 93 64 04 	sts	0x0464, r24	; 0x800464 <systemtick_mins>
     8be:	80 91 64 04 	lds	r24, 0x0464	; 0x800464 <systemtick_mins>
     8c2:	8c 33       	cpi	r24, 0x3C	; 60
     8c4:	48 f0       	brcs	.+18     	; 0x8d8 <__vector_13+0x10c>
     8c6:	10 92 64 04 	sts	0x0464, r1	; 0x800464 <systemtick_mins>
     8ca:	c0 93 5d 04 	sts	0x045D, r28	; 0x80045d <f_1hr>
     8ce:	80 91 63 04 	lds	r24, 0x0463	; 0x800463 <systemtick_hrs>
     8d2:	8f 5f       	subi	r24, 0xFF	; 255
     8d4:	80 93 63 04 	sts	0x0463, r24	; 0x800463 <systemtick_hrs>
     8d8:	ff 91       	pop	r31
     8da:	ef 91       	pop	r30
     8dc:	cf 91       	pop	r28
     8de:	bf 91       	pop	r27
     8e0:	af 91       	pop	r26
     8e2:	9f 91       	pop	r25
     8e4:	8f 91       	pop	r24
     8e6:	7f 91       	pop	r23
     8e8:	6f 91       	pop	r22
     8ea:	5f 91       	pop	r21
     8ec:	4f 91       	pop	r20
     8ee:	3f 91       	pop	r19
     8f0:	2f 91       	pop	r18
     8f2:	0f 90       	pop	r0
     8f4:	0b be       	out	0x3b, r0	; 59
     8f6:	0f 90       	pop	r0
     8f8:	0f be       	out	0x3f, r0	; 63
     8fa:	0f 90       	pop	r0
     8fc:	1f 90       	pop	r1
     8fe:	18 95       	reti

00000900 <new_delay_msecs(unsigned int)>:
_Z15new_delay_msecsj():
     900:	0f 93       	push	r16
     902:	1f 93       	push	r17
     904:	cf 93       	push	r28
     906:	df 93       	push	r29
     908:	ec 01       	movw	r28, r24
     90a:	67 e1       	ldi	r22, 0x17	; 23
     90c:	72 e0       	ldi	r23, 0x02	; 2
     90e:	8e ea       	ldi	r24, 0xAE	; 174
     910:	95 e0       	ldi	r25, 0x05	; 5
     912:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     916:	00 91 66 04 	lds	r16, 0x0466	; 0x800466 <systemtick_msecs>
     91a:	10 91 67 04 	lds	r17, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     91e:	20 91 68 04 	lds	r18, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     922:	30 91 69 04 	lds	r19, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     926:	ce 01       	movw	r24, r28
     928:	b0 e0       	ldi	r27, 0x00	; 0
     92a:	a0 e0       	ldi	r26, 0x00	; 0
_Z12time_elapsedm():
     92c:	40 91 66 04 	lds	r20, 0x0466	; 0x800466 <systemtick_msecs>
     930:	50 91 67 04 	lds	r21, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     934:	60 91 68 04 	lds	r22, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     938:	70 91 69 04 	lds	r23, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     93c:	40 1b       	sub	r20, r16
     93e:	51 0b       	sbc	r21, r17
     940:	62 0b       	sbc	r22, r18
     942:	73 0b       	sbc	r23, r19
_Z15new_delay_msecsj():
     944:	48 17       	cp	r20, r24
     946:	59 07       	cpc	r21, r25
     948:	6a 07       	cpc	r22, r26
     94a:	7b 07       	cpc	r23, r27
     94c:	78 f3       	brcs	.-34     	; 0x92c <new_delay_msecs(unsigned int)+0x2c>
     94e:	df 91       	pop	r29
     950:	cf 91       	pop	r28
     952:	1f 91       	pop	r17
     954:	0f 91       	pop	r16
     956:	08 95       	ret

00000958 <platform_init()>:
_Z13platform_initv():
     958:	0e 94 dc 03 	call	0x7b8	; 0x7b8 <timer_init()>
     95c:	20 e0       	ldi	r18, 0x00	; 0
     95e:	44 e0       	ldi	r20, 0x04	; 4
     960:	64 e1       	ldi	r22, 0x14	; 20
     962:	89 ec       	ldi	r24, 0xC9	; 201
     964:	94 e0       	ldi	r25, 0x04	; 4
     966:	0e 94 24 0a 	call	0x1448	; 0x1448 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>
     96a:	61 e0       	ldi	r22, 0x01	; 1
     96c:	88 e1       	ldi	r24, 0x18	; 24
     96e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
     972:	61 e0       	ldi	r22, 0x01	; 1
     974:	89 e1       	ldi	r24, 0x19	; 25
     976:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
     97a:	61 e0       	ldi	r22, 0x01	; 1
     97c:	8a e1       	ldi	r24, 0x1A	; 26
     97e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
     982:	61 e0       	ldi	r22, 0x01	; 1
     984:	8b e1       	ldi	r24, 0x1B	; 27
     986:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
     98a:	61 e0       	ldi	r22, 0x01	; 1
     98c:	8c e0       	ldi	r24, 0x0C	; 12
     98e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
     992:	61 e0       	ldi	r22, 0x01	; 1
     994:	8c e0       	ldi	r24, 0x0C	; 12
     996:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
     99a:	61 e0       	ldi	r22, 0x01	; 1
     99c:	8d e1       	ldi	r24, 0x1D	; 29
     99e:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
     9a2:	61 e0       	ldi	r22, 0x01	; 1
     9a4:	8b e1       	ldi	r24, 0x1B	; 27
     9a6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	83 e0       	ldi	r24, 0x03	; 3
     9ae:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
     9b2:	62 e0       	ldi	r22, 0x02	; 2
     9b4:	83 e0       	ldi	r24, 0x03	; 3
     9b6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
     9ba:	60 e0       	ldi	r22, 0x00	; 0
     9bc:	84 e0       	ldi	r24, 0x04	; 4
     9be:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
     9c2:	62 e0       	ldi	r22, 0x02	; 2
     9c4:	84 e0       	ldi	r24, 0x04	; 4
     9c6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
     9ca:	60 e0       	ldi	r22, 0x00	; 0
     9cc:	8d e1       	ldi	r24, 0x1D	; 29
     9ce:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
     9d2:	60 e0       	ldi	r22, 0x00	; 0
     9d4:	8b e1       	ldi	r24, 0x1B	; 27
     9d6:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
     9da:	61 e0       	ldi	r22, 0x01	; 1
     9dc:	85 e0       	ldi	r24, 0x05	; 5
     9de:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
     9e2:	61 e0       	ldi	r22, 0x01	; 1
     9e4:	87 e0       	ldi	r24, 0x07	; 7
     9e6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
     9ea:	61 e0       	ldi	r22, 0x01	; 1
     9ec:	8d e0       	ldi	r24, 0x0D	; 13
     9ee:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
     9f2:	60 e0       	ldi	r22, 0x00	; 0
     9f4:	85 e0       	ldi	r24, 0x05	; 5
     9f6:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
     9fa:	60 e0       	ldi	r22, 0x00	; 0
     9fc:	87 e0       	ldi	r24, 0x07	; 7
     9fe:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
     a02:	60 e0       	ldi	r22, 0x00	; 0
     a04:	8d e0       	ldi	r24, 0x0D	; 13
     a06:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
     a0a:	69 e1       	ldi	r22, 0x19	; 25
     a0c:	72 e0       	ldi	r23, 0x02	; 2
     a0e:	8e ea       	ldi	r24, 0xAE	; 174
     a10:	95 e0       	ldi	r25, 0x05	; 5
     a12:	0c 94 73 15 	jmp	0x2ae6	; 0x2ae6 <Print::println(char const*)>

00000a16 <do_control(DO_CONTROLS_E, bool)>:
_Z10do_control13DO_CONTROLS_Eb():
     a16:	1f 93       	push	r17
     a18:	cf 93       	push	r28
     a1a:	df 93       	push	r29
     a1c:	ec 01       	movw	r28, r24
     a1e:	16 2f       	mov	r17, r22
     a20:	6a e2       	ldi	r22, 0x2A	; 42
     a22:	72 e0       	ldi	r23, 0x02	; 2
     a24:	8e ea       	ldi	r24, 0xAE	; 174
     a26:	95 e0       	ldi	r25, 0x05	; 5
     a28:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     a2c:	4a e0       	ldi	r20, 0x0A	; 10
     a2e:	50 e0       	ldi	r21, 0x00	; 0
     a30:	be 01       	movw	r22, r28
     a32:	8e ea       	ldi	r24, 0xAE	; 174
     a34:	95 e0       	ldi	r25, 0x05	; 5
     a36:	0e 94 25 16 	call	0x2c4a	; 0x2c4a <Print::println(int, int)>
     a3a:	c8 30       	cpi	r28, 0x08	; 8
     a3c:	d1 05       	cpc	r29, r1
     a3e:	09 f4       	brne	.+2      	; 0xa42 <do_control(DO_CONTROLS_E, bool)+0x2c>
     a40:	40 c0       	rjmp	.+128    	; 0xac2 <do_control(DO_CONTROLS_E, bool)+0xac>
     a42:	70 f4       	brcc	.+28     	; 0xa60 <do_control(DO_CONTROLS_E, bool)+0x4a>
     a44:	c2 30       	cpi	r28, 0x02	; 2
     a46:	d1 05       	cpc	r29, r1
     a48:	b1 f1       	breq	.+108    	; 0xab6 <do_control(DO_CONTROLS_E, bool)+0xa0>
     a4a:	c4 30       	cpi	r28, 0x04	; 4
     a4c:	d1 05       	cpc	r29, r1
     a4e:	b1 f1       	breq	.+108    	; 0xabc <do_control(DO_CONTROLS_E, bool)+0xa6>
     a50:	c1 30       	cpi	r28, 0x01	; 1
     a52:	d1 05       	cpc	r29, r1
     a54:	79 f4       	brne	.+30     	; 0xa74 <do_control(DO_CONTROLS_E, bool)+0x5e>
     a56:	61 2f       	mov	r22, r17
     a58:	88 e1       	ldi	r24, 0x18	; 24
     a5a:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
     a5e:	23 c0       	rjmp	.+70     	; 0xaa6 <do_control(DO_CONTROLS_E, bool)+0x90>
     a60:	c0 32       	cpi	r28, 0x20	; 32
     a62:	d1 05       	cpc	r29, r1
     a64:	01 f1       	breq	.+64     	; 0xaa6 <do_control(DO_CONTROLS_E, bool)+0x90>
     a66:	c8 f4       	brcc	.+50     	; 0xa9a <do_control(DO_CONTROLS_E, bool)+0x84>
     a68:	61 e0       	ldi	r22, 0x01	; 1
     a6a:	61 27       	eor	r22, r17
     a6c:	8d e1       	ldi	r24, 0x1D	; 29
     a6e:	c0 31       	cpi	r28, 0x10	; 16
     a70:	d1 05       	cpc	r29, r1
     a72:	99 f3       	breq	.-26     	; 0xa5a <do_control(DO_CONTROLS_E, bool)+0x44>
     a74:	63 e3       	ldi	r22, 0x33	; 51
     a76:	72 e0       	ldi	r23, 0x02	; 2
     a78:	8e ea       	ldi	r24, 0xAE	; 174
     a7a:	95 e0       	ldi	r25, 0x05	; 5
     a7c:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     a80:	4a e0       	ldi	r20, 0x0A	; 10
     a82:	50 e0       	ldi	r21, 0x00	; 0
     a84:	60 91 39 04 	lds	r22, 0x0439	; 0x800439 <do_byte>
     a88:	8e ea       	ldi	r24, 0xAE	; 174
     a8a:	95 e0       	ldi	r25, 0x05	; 5
     a8c:	0e 94 4b 16 	call	0x2c96	; 0x2c96 <Print::println(unsigned char, int)>
     a90:	80 e0       	ldi	r24, 0x00	; 0
     a92:	df 91       	pop	r29
     a94:	cf 91       	pop	r28
     a96:	1f 91       	pop	r17
     a98:	08 95       	ret
     a9a:	c0 34       	cpi	r28, 0x40	; 64
     a9c:	d1 05       	cpc	r29, r1
     a9e:	19 f0       	breq	.+6      	; 0xaa6 <do_control(DO_CONTROLS_E, bool)+0x90>
     aa0:	c0 38       	cpi	r28, 0x80	; 128
     aa2:	d1 05       	cpc	r29, r1
     aa4:	39 f7       	brne	.-50     	; 0xa74 <do_control(DO_CONTROLS_E, bool)+0x5e>
     aa6:	80 91 39 04 	lds	r24, 0x0439	; 0x800439 <do_byte>
     aaa:	11 23       	and	r17, r17
     aac:	69 f0       	breq	.+26     	; 0xac8 <do_control(DO_CONTROLS_E, bool)+0xb2>
     aae:	c8 2b       	or	r28, r24
     ab0:	c0 93 39 04 	sts	0x0439, r28	; 0x800439 <do_byte>
     ab4:	df cf       	rjmp	.-66     	; 0xa74 <do_control(DO_CONTROLS_E, bool)+0x5e>
     ab6:	61 2f       	mov	r22, r17
     ab8:	89 e1       	ldi	r24, 0x19	; 25
     aba:	cf cf       	rjmp	.-98     	; 0xa5a <do_control(DO_CONTROLS_E, bool)+0x44>
     abc:	61 2f       	mov	r22, r17
     abe:	8a e1       	ldi	r24, 0x1A	; 26
     ac0:	cc cf       	rjmp	.-104    	; 0xa5a <do_control(DO_CONTROLS_E, bool)+0x44>
     ac2:	61 2f       	mov	r22, r17
     ac4:	8b e1       	ldi	r24, 0x1B	; 27
     ac6:	c9 cf       	rjmp	.-110    	; 0xa5a <do_control(DO_CONTROLS_E, bool)+0x44>
     ac8:	c0 95       	com	r28
     aca:	c8 23       	and	r28, r24
     acc:	f1 cf       	rjmp	.-30     	; 0xab0 <do_control(DO_CONTROLS_E, bool)+0x9a>

00000ace <tworks2_values_to_default_postion()>:
_Z33tworks2_values_to_default_postionv():
     ace:	60 e0       	ldi	r22, 0x00	; 0
     ad0:	81 e0       	ldi	r24, 0x01	; 1
     ad2:	90 e0       	ldi	r25, 0x00	; 0
     ad4:	0e 94 0b 05 	call	0xa16	; 0xa16 <do_control(DO_CONTROLS_E, bool)>
     ad8:	60 e0       	ldi	r22, 0x00	; 0
     ada:	82 e0       	ldi	r24, 0x02	; 2
     adc:	90 e0       	ldi	r25, 0x00	; 0
     ade:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <do_control(DO_CONTROLS_E, bool)>

00000ae2 <tworks2_PSA_logic()>:
_Z17tworks2_PSA_logicv():
     ae2:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <cycle>
     ae6:	81 30       	cpi	r24, 0x01	; 1
     ae8:	21 f1       	breq	.+72     	; 0xb32 <tworks2_PSA_logic()+0x50>
     aea:	80 f0       	brcs	.+32     	; 0xb0c <tworks2_PSA_logic()+0x2a>
     aec:	82 30       	cpi	r24, 0x02	; 2
     aee:	09 f4       	brne	.+2      	; 0xaf2 <tworks2_PSA_logic()+0x10>
     af0:	40 c0       	rjmp	.+128    	; 0xb72 <tworks2_PSA_logic()+0x90>
     af2:	83 30       	cpi	r24, 0x03	; 3
     af4:	f1 f0       	breq	.+60     	; 0xb32 <tworks2_PSA_logic()+0x50>
     af6:	10 92 70 04 	sts	0x0470, r1	; 0x800470 <cycle>
     afa:	10 92 3e 04 	sts	0x043E, r1	; 0x80043e <nb_delay>
     afe:	10 92 3f 04 	sts	0x043F, r1	; 0x80043f <nb_delay+0x1>
     b02:	10 92 40 04 	sts	0x0440, r1	; 0x800440 <nb_delay+0x2>
     b06:	10 92 41 04 	sts	0x0441, r1	; 0x800441 <nb_delay+0x3>
     b0a:	08 95       	ret
     b0c:	61 e0       	ldi	r22, 0x01	; 1
     b0e:	81 e0       	ldi	r24, 0x01	; 1
     b10:	90 e0       	ldi	r25, 0x00	; 0
     b12:	0e 94 0b 05 	call	0xa16	; 0xa16 <do_control(DO_CONTROLS_E, bool)>
     b16:	60 e0       	ldi	r22, 0x00	; 0
     b18:	82 e0       	ldi	r24, 0x02	; 2
     b1a:	90 e0       	ldi	r25, 0x00	; 0
     b1c:	0e 94 0b 05 	call	0xa16	; 0xa16 <do_control(DO_CONTROLS_E, bool)>
     b20:	80 91 4a 04 	lds	r24, 0x044A	; 0x80044a <Production_Delay>
     b24:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <Production_Delay+0x1>
     b28:	a0 91 4c 04 	lds	r26, 0x044C	; 0x80044c <Production_Delay+0x2>
     b2c:	b0 91 4d 04 	lds	r27, 0x044D	; 0x80044d <Production_Delay+0x3>
     b30:	12 c0       	rjmp	.+36     	; 0xb56 <tworks2_PSA_logic()+0x74>
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	81 e0       	ldi	r24, 0x01	; 1
     b36:	90 e0       	ldi	r25, 0x00	; 0
     b38:	0e 94 0b 05 	call	0xa16	; 0xa16 <do_control(DO_CONTROLS_E, bool)>
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	82 e0       	ldi	r24, 0x02	; 2
     b40:	90 e0       	ldi	r25, 0x00	; 0
     b42:	0e 94 0b 05 	call	0xa16	; 0xa16 <do_control(DO_CONTROLS_E, bool)>
     b46:	80 91 42 04 	lds	r24, 0x0442	; 0x800442 <PreCharge_Delay>
     b4a:	90 91 43 04 	lds	r25, 0x0443	; 0x800443 <PreCharge_Delay+0x1>
     b4e:	a0 91 44 04 	lds	r26, 0x0444	; 0x800444 <PreCharge_Delay+0x2>
     b52:	b0 91 45 04 	lds	r27, 0x0445	; 0x800445 <PreCharge_Delay+0x3>
     b56:	80 93 3e 04 	sts	0x043E, r24	; 0x80043e <nb_delay>
     b5a:	90 93 3f 04 	sts	0x043F, r25	; 0x80043f <nb_delay+0x1>
     b5e:	a0 93 40 04 	sts	0x0440, r26	; 0x800440 <nb_delay+0x2>
     b62:	b0 93 41 04 	sts	0x0441, r27	; 0x800441 <nb_delay+0x3>
     b66:	80 91 70 04 	lds	r24, 0x0470	; 0x800470 <cycle>
     b6a:	8f 5f       	subi	r24, 0xFF	; 255
     b6c:	80 93 70 04 	sts	0x0470, r24	; 0x800470 <cycle>
     b70:	08 95       	ret
     b72:	60 e0       	ldi	r22, 0x00	; 0
     b74:	81 e0       	ldi	r24, 0x01	; 1
     b76:	90 e0       	ldi	r25, 0x00	; 0
     b78:	0e 94 0b 05 	call	0xa16	; 0xa16 <do_control(DO_CONTROLS_E, bool)>
     b7c:	61 e0       	ldi	r22, 0x01	; 1
     b7e:	cc cf       	rjmp	.-104    	; 0xb18 <tworks2_PSA_logic()+0x36>

00000b80 <o2_main_task()>:
_Z12o2_main_taskv():
     b80:	cf 92       	push	r12
     b82:	df 92       	push	r13
     b84:	ef 92       	push	r14
     b86:	ff 92       	push	r15
     b88:	80 91 5c 04 	lds	r24, 0x045C	; 0x80045c <f_system_running>
     b8c:	81 11       	cpse	r24, r1
     b8e:	07 c0       	rjmp	.+14     	; 0xb9e <o2_main_task()+0x1e>
     b90:	10 92 6a 04 	sts	0x046A, r1	; 0x80046a <o2_main_task()::once_done>
     b94:	ff 90       	pop	r15
     b96:	ef 90       	pop	r14
     b98:	df 90       	pop	r13
     b9a:	cf 90       	pop	r12
     b9c:	08 95       	ret
     b9e:	80 91 6a 04 	lds	r24, 0x046A	; 0x80046a <o2_main_task()::once_done>
     ba2:	81 11       	cpse	r24, r1
     ba4:	08 c0       	rjmp	.+16     	; 0xbb6 <o2_main_task()+0x36>
     ba6:	81 e0       	ldi	r24, 0x01	; 1
     ba8:	80 93 6a 04 	sts	0x046A, r24	; 0x80046a <o2_main_task()::once_done>
     bac:	61 e0       	ldi	r22, 0x01	; 1
     bae:	88 e0       	ldi	r24, 0x08	; 8
     bb0:	90 e0       	ldi	r25, 0x00	; 0
     bb2:	0e 94 0b 05 	call	0xa16	; 0xa16 <do_control(DO_CONTROLS_E, bool)>
     bb6:	80 91 59 04 	lds	r24, 0x0459	; 0x800459 <f_sec_change_o2_task>
     bba:	88 23       	and	r24, r24
     bbc:	99 f1       	breq	.+102    	; 0xc24 <o2_main_task()+0xa4>
     bbe:	10 92 59 04 	sts	0x0459, r1	; 0x800459 <f_sec_change_o2_task>
     bc2:	20 91 52 04 	lds	r18, 0x0452	; 0x800452 <current_run_time_secs>
     bc6:	30 91 53 04 	lds	r19, 0x0453	; 0x800453 <current_run_time_secs+0x1>
     bca:	2f 5f       	subi	r18, 0xFF	; 255
     bcc:	3f 4f       	sbci	r19, 0xFF	; 255
     bce:	30 93 53 04 	sts	0x0453, r19	; 0x800453 <current_run_time_secs+0x1>
     bd2:	20 93 52 04 	sts	0x0452, r18	; 0x800452 <current_run_time_secs>
     bd6:	c0 90 4e 04 	lds	r12, 0x044E	; 0x80044e <total_run_time_secs>
     bda:	d0 90 4f 04 	lds	r13, 0x044F	; 0x80044f <total_run_time_secs+0x1>
     bde:	e0 90 50 04 	lds	r14, 0x0450	; 0x800450 <total_run_time_secs+0x2>
     be2:	f0 90 51 04 	lds	r15, 0x0451	; 0x800451 <total_run_time_secs+0x3>
     be6:	8f ef       	ldi	r24, 0xFF	; 255
     be8:	c8 1a       	sub	r12, r24
     bea:	d8 0a       	sbc	r13, r24
     bec:	e8 0a       	sbc	r14, r24
     bee:	f8 0a       	sbc	r15, r24
     bf0:	c0 92 4e 04 	sts	0x044E, r12	; 0x80044e <total_run_time_secs>
     bf4:	d0 92 4f 04 	sts	0x044F, r13	; 0x80044f <total_run_time_secs+0x1>
     bf8:	e0 92 50 04 	sts	0x0450, r14	; 0x800450 <total_run_time_secs+0x2>
     bfc:	f0 92 51 04 	sts	0x0451, r15	; 0x800451 <total_run_time_secs+0x3>
     c00:	c9 01       	movw	r24, r18
     c02:	6f e0       	ldi	r22, 0x0F	; 15
     c04:	70 e0       	ldi	r23, 0x00	; 0
     c06:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
     c0a:	89 2b       	or	r24, r25
     c0c:	59 f4       	brne	.+22     	; 0xc24 <o2_main_task()+0xa4>
     c0e:	80 91 6b 04 	lds	r24, 0x046B	; 0x80046b <o2_main_task()::quadrant>
     c12:	8f 5f       	subi	r24, 0xFF	; 255
     c14:	80 93 6b 04 	sts	0x046B, r24	; 0x80046b <o2_main_task()::quadrant>
     c18:	83 30       	cpi	r24, 0x03	; 3
     c1a:	08 f4       	brcc	.+2      	; 0xc1e <o2_main_task()+0x9e>
     c1c:	73 c0       	rjmp	.+230    	; 0xd04 <o2_main_task()+0x184>
     c1e:	83 30       	cpi	r24, 0x03	; 3
     c20:	09 f4       	brne	.+2      	; 0xc24 <o2_main_task()+0xa4>
     c22:	7e c0       	rjmp	.+252    	; 0xd20 <o2_main_task()+0x1a0>
_Z12time_elapsedm():
     c24:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <systemtick_msecs>
     c28:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     c2c:	a0 91 68 04 	lds	r26, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     c30:	b0 91 69 04 	lds	r27, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     c34:	40 91 6c 04 	lds	r20, 0x046C	; 0x80046c <o2_main_task()::time_tag>
     c38:	50 91 6d 04 	lds	r21, 0x046D	; 0x80046d <o2_main_task()::time_tag+0x1>
     c3c:	60 91 6e 04 	lds	r22, 0x046E	; 0x80046e <o2_main_task()::time_tag+0x2>
     c40:	70 91 6f 04 	lds	r23, 0x046F	; 0x80046f <o2_main_task()::time_tag+0x3>
     c44:	84 1b       	sub	r24, r20
     c46:	95 0b       	sbc	r25, r21
     c48:	a6 0b       	sbc	r26, r22
     c4a:	b7 0b       	sbc	r27, r23
_Z12o2_main_taskv():
     c4c:	40 91 3e 04 	lds	r20, 0x043E	; 0x80043e <nb_delay>
     c50:	50 91 3f 04 	lds	r21, 0x043F	; 0x80043f <nb_delay+0x1>
     c54:	60 91 40 04 	lds	r22, 0x0440	; 0x800440 <nb_delay+0x2>
     c58:	70 91 41 04 	lds	r23, 0x0441	; 0x800441 <nb_delay+0x3>
     c5c:	84 17       	cp	r24, r20
     c5e:	95 07       	cpc	r25, r21
     c60:	a6 07       	cpc	r26, r22
     c62:	b7 07       	cpc	r27, r23
     c64:	08 f4       	brcc	.+2      	; 0xc68 <o2_main_task()+0xe8>
     c66:	96 cf       	rjmp	.-212    	; 0xb94 <o2_main_task()+0x14>
     c68:	80 91 66 04 	lds	r24, 0x0466	; 0x800466 <systemtick_msecs>
     c6c:	90 91 67 04 	lds	r25, 0x0467	; 0x800467 <systemtick_msecs+0x1>
     c70:	a0 91 68 04 	lds	r26, 0x0468	; 0x800468 <systemtick_msecs+0x2>
     c74:	b0 91 69 04 	lds	r27, 0x0469	; 0x800469 <systemtick_msecs+0x3>
     c78:	80 93 6c 04 	sts	0x046C, r24	; 0x80046c <o2_main_task()::time_tag>
     c7c:	90 93 6d 04 	sts	0x046D, r25	; 0x80046d <o2_main_task()::time_tag+0x1>
     c80:	a0 93 6e 04 	sts	0x046E, r26	; 0x80046e <o2_main_task()::time_tag+0x2>
     c84:	b0 93 6f 04 	sts	0x046F, r27	; 0x80046f <o2_main_task()::time_tag+0x3>
     c88:	6e e3       	ldi	r22, 0x3E	; 62
     c8a:	72 e0       	ldi	r23, 0x02	; 2
     c8c:	8e ea       	ldi	r24, 0xAE	; 174
     c8e:	95 e0       	ldi	r25, 0x05	; 5
     c90:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <Print::println(char const*)>
     c94:	0e 94 71 05 	call	0xae2	; 0xae2 <tworks2_PSA_logic()>
     c98:	80 91 3e 04 	lds	r24, 0x043E	; 0x80043e <nb_delay>
     c9c:	90 91 3f 04 	lds	r25, 0x043F	; 0x80043f <nb_delay+0x1>
     ca0:	a0 91 40 04 	lds	r26, 0x0440	; 0x800440 <nb_delay+0x2>
     ca4:	b0 91 41 04 	lds	r27, 0x0441	; 0x800441 <nb_delay+0x3>
     ca8:	40 91 3a 04 	lds	r20, 0x043A	; 0x80043a <prev_nb_delay>
     cac:	50 91 3b 04 	lds	r21, 0x043B	; 0x80043b <prev_nb_delay+0x1>
     cb0:	60 91 3c 04 	lds	r22, 0x043C	; 0x80043c <prev_nb_delay+0x2>
     cb4:	70 91 3d 04 	lds	r23, 0x043D	; 0x80043d <prev_nb_delay+0x3>
     cb8:	84 17       	cp	r24, r20
     cba:	95 07       	cpc	r25, r21
     cbc:	a6 07       	cpc	r26, r22
     cbe:	b7 07       	cpc	r27, r23
     cc0:	09 f4       	brne	.+2      	; 0xcc4 <o2_main_task()+0x144>
     cc2:	68 cf       	rjmp	.-304    	; 0xb94 <o2_main_task()+0x14>
     cc4:	80 93 3a 04 	sts	0x043A, r24	; 0x80043a <prev_nb_delay>
     cc8:	90 93 3b 04 	sts	0x043B, r25	; 0x80043b <prev_nb_delay+0x1>
     ccc:	a0 93 3c 04 	sts	0x043C, r26	; 0x80043c <prev_nb_delay+0x2>
     cd0:	b0 93 3d 04 	sts	0x043D, r27	; 0x80043d <prev_nb_delay+0x3>
     cd4:	62 e5       	ldi	r22, 0x52	; 82
     cd6:	72 e0       	ldi	r23, 0x02	; 2
     cd8:	8e ea       	ldi	r24, 0xAE	; 174
     cda:	95 e0       	ldi	r25, 0x05	; 5
     cdc:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     ce0:	40 91 3e 04 	lds	r20, 0x043E	; 0x80043e <nb_delay>
     ce4:	50 91 3f 04 	lds	r21, 0x043F	; 0x80043f <nb_delay+0x1>
     ce8:	60 91 40 04 	lds	r22, 0x0440	; 0x800440 <nb_delay+0x2>
     cec:	70 91 41 04 	lds	r23, 0x0441	; 0x800441 <nb_delay+0x3>
     cf0:	2a e0       	ldi	r18, 0x0A	; 10
     cf2:	30 e0       	ldi	r19, 0x00	; 0
     cf4:	8e ea       	ldi	r24, 0xAE	; 174
     cf6:	95 e0       	ldi	r25, 0x05	; 5
     cf8:	ff 90       	pop	r15
     cfa:	ef 90       	pop	r14
     cfc:	df 90       	pop	r13
     cfe:	cf 90       	pop	r12
     d00:	0c 94 63 16 	jmp	0x2cc6	; 0x2cc6 <Print::println(unsigned long, int)>
     d04:	c9 01       	movw	r24, r18
     d06:	60 e1       	ldi	r22, 0x10	; 16
     d08:	7e e0       	ldi	r23, 0x0E	; 14
     d0a:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
     d0e:	9b 01       	movw	r18, r22
     d10:	6c e3       	ldi	r22, 0x3C	; 60
     d12:	70 e0       	ldi	r23, 0x00	; 0
     d14:	0e 94 a7 19 	call	0x334e	; 0x334e <__udivmodhi4>
     d18:	c9 01       	movw	r24, r18
     d1a:	0e 94 a8 01 	call	0x350	; 0x350 <display_current_run_hours(unsigned int, unsigned int)>
     d1e:	82 cf       	rjmp	.-252    	; 0xc24 <o2_main_task()+0xa4>
     d20:	c7 01       	movw	r24, r14
     d22:	b6 01       	movw	r22, r12
     d24:	20 e1       	ldi	r18, 0x10	; 16
     d26:	3e e0       	ldi	r19, 0x0E	; 14
     d28:	40 e0       	ldi	r20, 0x00	; 0
     d2a:	50 e0       	ldi	r21, 0x00	; 0
     d2c:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
     d30:	b9 01       	movw	r22, r18
     d32:	33 0f       	add	r19, r19
     d34:	88 0b       	sbc	r24, r24
     d36:	99 0b       	sbc	r25, r25
     d38:	0e 94 42 01 	call	0x284	; 0x284 <display_total_run_hours(unsigned long)>
     d3c:	10 92 6b 04 	sts	0x046B, r1	; 0x80046b <o2_main_task()::quadrant>
     d40:	71 cf       	rjmp	.-286    	; 0xc24 <o2_main_task()+0xa4>

00000d42 <o2_cons_init()>:
_Z12o2_cons_initv():
     d42:	6e e5       	ldi	r22, 0x5E	; 94
     d44:	72 e0       	ldi	r23, 0x02	; 2
     d46:	8e ea       	ldi	r24, 0xAE	; 174
     d48:	95 e0       	ldi	r25, 0x05	; 5
     d4a:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <Print::println(char const*)>
     d4e:	85 ec       	ldi	r24, 0xC5	; 197
     d50:	9f e8       	ldi	r25, 0x8F	; 143
     d52:	a1 e3       	ldi	r26, 0x31	; 49
     d54:	be e3       	ldi	r27, 0x3E	; 62
     d56:	80 93 33 04 	sts	0x0433, r24	; 0x800433 <o2_slope>
     d5a:	90 93 34 04 	sts	0x0434, r25	; 0x800434 <o2_slope+0x1>
     d5e:	a0 93 35 04 	sts	0x0435, r26	; 0x800435 <o2_slope+0x2>
     d62:	b0 93 36 04 	sts	0x0436, r27	; 0x800436 <o2_slope+0x3>
     d66:	87 ef       	ldi	r24, 0xF7	; 247
     d68:	95 e7       	ldi	r25, 0x75	; 117
     d6a:	a0 e7       	ldi	r26, 0x70	; 112
     d6c:	bf e3       	ldi	r27, 0x3F	; 63
     d6e:	80 93 2f 04 	sts	0x042F, r24	; 0x80042f <o2_const_val>
     d72:	90 93 30 04 	sts	0x0430, r25	; 0x800430 <o2_const_val+0x1>
     d76:	a0 93 31 04 	sts	0x0431, r26	; 0x800431 <o2_const_val+0x2>
     d7a:	b0 93 32 04 	sts	0x0432, r27	; 0x800432 <o2_const_val+0x3>
     d7e:	62 ee       	ldi	r22, 0xE2	; 226
     d80:	73 e0       	ldi	r23, 0x03	; 3
     d82:	8e ea       	ldi	r24, 0xAE	; 174
     d84:	95 e0       	ldi	r25, 0x05	; 5
     d86:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <Print::println(char const*)>
     d8a:	68 ea       	ldi	r22, 0xA8	; 168
     d8c:	71 e0       	ldi	r23, 0x01	; 1
     d8e:	8e ea       	ldi	r24, 0xAE	; 174
     d90:	95 e0       	ldi	r25, 0x05	; 5
     d92:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     d96:	40 91 33 04 	lds	r20, 0x0433	; 0x800433 <o2_slope>
     d9a:	50 91 34 04 	lds	r21, 0x0434	; 0x800434 <o2_slope+0x1>
     d9e:	60 91 35 04 	lds	r22, 0x0435	; 0x800435 <o2_slope+0x2>
     da2:	70 91 36 04 	lds	r23, 0x0436	; 0x800436 <o2_slope+0x3>
     da6:	22 e0       	ldi	r18, 0x02	; 2
     da8:	30 e0       	ldi	r19, 0x00	; 0
     daa:	8e ea       	ldi	r24, 0xAE	; 174
     dac:	95 e0       	ldi	r25, 0x05	; 5
     dae:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Print::print(double, int)>
     db2:	64 eb       	ldi	r22, 0xB4	; 180
     db4:	71 e0       	ldi	r23, 0x01	; 1
     db6:	8e ea       	ldi	r24, 0xAE	; 174
     db8:	95 e0       	ldi	r25, 0x05	; 5
     dba:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     dbe:	40 91 2f 04 	lds	r20, 0x042F	; 0x80042f <o2_const_val>
     dc2:	50 91 30 04 	lds	r21, 0x0430	; 0x800430 <o2_const_val+0x1>
     dc6:	60 91 31 04 	lds	r22, 0x0431	; 0x800431 <o2_const_val+0x2>
     dca:	70 91 32 04 	lds	r23, 0x0432	; 0x800432 <o2_const_val+0x3>
     dce:	22 e0       	ldi	r18, 0x02	; 2
     dd0:	30 e0       	ldi	r19, 0x00	; 0
     dd2:	8e ea       	ldi	r24, 0xAE	; 174
     dd4:	95 e0       	ldi	r25, 0x05	; 5
     dd6:	0e 94 59 17 	call	0x2eb2	; 0x2eb2 <Print::print(double, int)>
     dda:	88 e1       	ldi	r24, 0x18	; 24
     ddc:	95 e1       	ldi	r25, 0x15	; 21
     dde:	a0 e0       	ldi	r26, 0x00	; 0
     de0:	b0 e0       	ldi	r27, 0x00	; 0
     de2:	80 93 4a 04 	sts	0x044A, r24	; 0x80044a <Production_Delay>
     de6:	90 93 4b 04 	sts	0x044B, r25	; 0x80044b <Production_Delay+0x1>
     dea:	a0 93 4c 04 	sts	0x044C, r26	; 0x80044c <Production_Delay+0x2>
     dee:	b0 93 4d 04 	sts	0x044D, r27	; 0x80044d <Production_Delay+0x3>
     df2:	8c eb       	ldi	r24, 0xBC	; 188
     df4:	92 e0       	ldi	r25, 0x02	; 2
     df6:	a0 e0       	ldi	r26, 0x00	; 0
     df8:	b0 e0       	ldi	r27, 0x00	; 0
     dfa:	80 93 42 04 	sts	0x0442, r24	; 0x800442 <PreCharge_Delay>
     dfe:	90 93 43 04 	sts	0x0443, r25	; 0x800443 <PreCharge_Delay+0x1>
     e02:	a0 93 44 04 	sts	0x0444, r26	; 0x800444 <PreCharge_Delay+0x2>
     e06:	b0 93 45 04 	sts	0x0445, r27	; 0x800445 <PreCharge_Delay+0x3>
     e0a:	60 e0       	ldi	r22, 0x00	; 0
     e0c:	81 e0       	ldi	r24, 0x01	; 1
     e0e:	90 e0       	ldi	r25, 0x00	; 0
     e10:	0e 94 0b 05 	call	0xa16	; 0xa16 <do_control(DO_CONTROLS_E, bool)>
     e14:	60 e0       	ldi	r22, 0x00	; 0
     e16:	82 e0       	ldi	r24, 0x02	; 2
     e18:	90 e0       	ldi	r25, 0x00	; 0
     e1a:	0e 94 0b 05 	call	0xa16	; 0xa16 <do_control(DO_CONTROLS_E, bool)>
     e1e:	60 e0       	ldi	r22, 0x00	; 0
     e20:	84 e0       	ldi	r24, 0x04	; 4
     e22:	90 e0       	ldi	r25, 0x00	; 0
     e24:	0e 94 0b 05 	call	0xa16	; 0xa16 <do_control(DO_CONTROLS_E, bool)>
     e28:	84 ef       	ldi	r24, 0xF4	; 244
     e2a:	91 e0       	ldi	r25, 0x01	; 1
     e2c:	0c 94 80 04 	jmp	0x900	; 0x900 <new_delay_msecs(unsigned int)>

00000e30 <button_check()>:
_Z12button_checkv():
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	83 e0       	ldi	r24, 0x03	; 3
     e36:	0e 94 bd 12 	call	0x257a	; 0x257a <digitalRead>
     e3a:	ec 01       	movw	r28, r24
     e3c:	84 e0       	ldi	r24, 0x04	; 4
     e3e:	0e 94 bd 12 	call	0x257a	; 0x257a <digitalRead>
     e42:	20 97       	sbiw	r28, 0x00	; 0
     e44:	59 f5       	brne	.+86     	; 0xe9c <button_check()+0x6c>
     e46:	20 91 f4 03 	lds	r18, 0x03F4	; 0x8003f4 <start_switch_dbnc_dly>
     e4a:	30 91 f5 03 	lds	r19, 0x03F5	; 0x8003f5 <start_switch_dbnc_dly+0x1>
     e4e:	2f 5f       	subi	r18, 0xFF	; 255
     e50:	3f 4f       	sbci	r19, 0xFF	; 255
     e52:	30 93 f5 03 	sts	0x03F5, r19	; 0x8003f5 <start_switch_dbnc_dly+0x1>
     e56:	20 93 f4 03 	sts	0x03F4, r18	; 0x8003f4 <start_switch_dbnc_dly>
     e5a:	28 33       	cpi	r18, 0x38	; 56
     e5c:	31 05       	cpc	r19, r1
     e5e:	3c f0       	brlt	.+14     	; 0xe6e <button_check()+0x3e>
     e60:	21 e0       	ldi	r18, 0x01	; 1
     e62:	20 93 2a 04 	sts	0x042A, r18	; 0x80042a <start_switch_pressed>
     e66:	10 92 f5 03 	sts	0x03F5, r1	; 0x8003f5 <start_switch_dbnc_dly+0x1>
     e6a:	10 92 f4 03 	sts	0x03F4, r1	; 0x8003f4 <start_switch_dbnc_dly>
     e6e:	00 97       	sbiw	r24, 0x00	; 0
     e70:	39 f5       	brne	.+78     	; 0xec0 <button_check()+0x90>
     e72:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <alarm_clear_bttn_dbnc_dly>
     e76:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <alarm_clear_bttn_dbnc_dly+0x1>
     e7a:	01 96       	adiw	r24, 0x01	; 1
     e7c:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <alarm_clear_bttn_dbnc_dly+0x1>
     e80:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <alarm_clear_bttn_dbnc_dly>
     e84:	c8 97       	sbiw	r24, 0x38	; 56
     e86:	3c f0       	brlt	.+14     	; 0xe96 <button_check()+0x66>
     e88:	81 e0       	ldi	r24, 0x01	; 1
     e8a:	80 93 29 04 	sts	0x0429, r24	; 0x800429 <alarm_clear_button_pressed>
     e8e:	10 92 f3 03 	sts	0x03F3, r1	; 0x8003f3 <alarm_clear_bttn_dbnc_dly+0x1>
     e92:	10 92 f2 03 	sts	0x03F2, r1	; 0x8003f2 <alarm_clear_bttn_dbnc_dly>
     e96:	df 91       	pop	r29
     e98:	cf 91       	pop	r28
     e9a:	08 95       	ret
     e9c:	21 97       	sbiw	r28, 0x01	; 1
     e9e:	39 f7       	brne	.-50     	; 0xe6e <button_check()+0x3e>
     ea0:	20 91 f4 03 	lds	r18, 0x03F4	; 0x8003f4 <start_switch_dbnc_dly>
     ea4:	30 91 f5 03 	lds	r19, 0x03F5	; 0x8003f5 <start_switch_dbnc_dly+0x1>
     ea8:	2f 5f       	subi	r18, 0xFF	; 255
     eaa:	3f 4f       	sbci	r19, 0xFF	; 255
     eac:	30 93 f5 03 	sts	0x03F5, r19	; 0x8003f5 <start_switch_dbnc_dly+0x1>
     eb0:	20 93 f4 03 	sts	0x03F4, r18	; 0x8003f4 <start_switch_dbnc_dly>
     eb4:	28 33       	cpi	r18, 0x38	; 56
     eb6:	31 05       	cpc	r19, r1
     eb8:	d4 f2       	brlt	.-76     	; 0xe6e <button_check()+0x3e>
     eba:	10 92 2a 04 	sts	0x042A, r1	; 0x80042a <start_switch_pressed>
     ebe:	d3 cf       	rjmp	.-90     	; 0xe66 <button_check()+0x36>
     ec0:	01 97       	sbiw	r24, 0x01	; 1
     ec2:	49 f7       	brne	.-46     	; 0xe96 <button_check()+0x66>
     ec4:	80 91 f2 03 	lds	r24, 0x03F2	; 0x8003f2 <alarm_clear_bttn_dbnc_dly>
     ec8:	90 91 f3 03 	lds	r25, 0x03F3	; 0x8003f3 <alarm_clear_bttn_dbnc_dly+0x1>
     ecc:	01 96       	adiw	r24, 0x01	; 1
     ece:	90 93 f3 03 	sts	0x03F3, r25	; 0x8003f3 <alarm_clear_bttn_dbnc_dly+0x1>
     ed2:	80 93 f2 03 	sts	0x03F2, r24	; 0x8003f2 <alarm_clear_bttn_dbnc_dly>
     ed6:	c8 97       	sbiw	r24, 0x38	; 56
     ed8:	f4 f2       	brlt	.-68     	; 0xe96 <button_check()+0x66>
     eda:	10 92 29 04 	sts	0x0429, r1	; 0x800429 <alarm_clear_button_pressed>
     ede:	d7 cf       	rjmp	.-82     	; 0xe8e <button_check()+0x5e>

00000ee0 <ui_print_welcome()>:
_Z16ui_print_welcomev():
     ee0:	40 e0       	ldi	r20, 0x00	; 0
     ee2:	60 e0       	ldi	r22, 0x00	; 0
     ee4:	89 ec       	ldi	r24, 0xC9	; 201
     ee6:	94 e0       	ldi	r25, 0x04	; 4
     ee8:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     eec:	61 e9       	ldi	r22, 0x91	; 145
     eee:	72 e0       	ldi	r23, 0x02	; 2
     ef0:	89 ec       	ldi	r24, 0xC9	; 201
     ef2:	94 e0       	ldi	r25, 0x04	; 4
     ef4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     ef8:	41 e0       	ldi	r20, 0x01	; 1
     efa:	60 e0       	ldi	r22, 0x00	; 0
     efc:	89 ec       	ldi	r24, 0xC9	; 201
     efe:	94 e0       	ldi	r25, 0x04	; 4
     f00:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     f04:	64 ea       	ldi	r22, 0xA4	; 164
     f06:	72 e0       	ldi	r23, 0x02	; 2
     f08:	89 ec       	ldi	r24, 0xC9	; 201
     f0a:	94 e0       	ldi	r25, 0x04	; 4
     f0c:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
     f10:	42 e0       	ldi	r20, 0x02	; 2
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	89 ec       	ldi	r24, 0xC9	; 201
     f16:	94 e0       	ldi	r25, 0x04	; 4
     f18:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
     f1c:	63 eb       	ldi	r22, 0xB3	; 179
     f1e:	72 e0       	ldi	r23, 0x02	; 2
     f20:	89 ec       	ldi	r24, 0xC9	; 201
     f22:	94 e0       	ldi	r25, 0x04	; 4
     f24:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <Print::print(char const*)>

00000f28 <setup>:
_ZN14HardwareSerial5beginEm():
     f28:	26 e0       	ldi	r18, 0x06	; 6
     f2a:	40 e0       	ldi	r20, 0x00	; 0
     f2c:	52 ec       	ldi	r21, 0xC2	; 194
     f2e:	61 e0       	ldi	r22, 0x01	; 1
     f30:	70 e0       	ldi	r23, 0x00	; 0
     f32:	8e ea       	ldi	r24, 0xAE	; 174
     f34:	95 e0       	ldi	r25, 0x05	; 5
     f36:	0e 94 ff 13 	call	0x27fe	; 0x27fe <HardwareSerial::begin(unsigned long, unsigned char)>
setup():
     f3a:	68 ec       	ldi	r22, 0xC8	; 200
     f3c:	72 e0       	ldi	r23, 0x02	; 2
     f3e:	8e ea       	ldi	r24, 0xAE	; 174
     f40:	95 e0       	ldi	r25, 0x05	; 5
     f42:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <Print::println(char const*)>
     f46:	0e 94 ac 04 	call	0x958	; 0x958 <platform_init()>
     f4a:	0e 94 f8 02 	call	0x5f0	; 0x5f0 <ads_init()>
_Z7db_initv():
     f4e:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <f_system_running>
setup():
     f52:	0e 94 a1 06 	call	0xd42	; 0xd42 <o2_cons_init()>
     f56:	0e 94 ff 00 	call	0x1fe	; 0x1fe <init_7segments()>
     f5a:	60 e0       	ldi	r22, 0x00	; 0
     f5c:	70 e0       	ldi	r23, 0x00	; 0
     f5e:	cb 01       	movw	r24, r22
     f60:	0e 94 0b 01 	call	0x216	; 0x216 <display_o2(float)>
     f64:	60 91 4e 04 	lds	r22, 0x044E	; 0x80044e <total_run_time_secs>
     f68:	70 91 4f 04 	lds	r23, 0x044F	; 0x80044f <total_run_time_secs+0x1>
     f6c:	80 91 50 04 	lds	r24, 0x0450	; 0x800450 <total_run_time_secs+0x2>
     f70:	90 91 51 04 	lds	r25, 0x0451	; 0x800451 <total_run_time_secs+0x3>
     f74:	0e 94 42 01 	call	0x284	; 0x284 <display_total_run_hours(unsigned long)>
_Z7ui_initv():
     f78:	0c 94 70 07 	jmp	0xee0	; 0xee0 <ui_print_welcome()>

00000f7c <beep_for(int)>:
_Z8beep_fori():
     f7c:	cf 93       	push	r28
     f7e:	df 93       	push	r29
     f80:	ec 01       	movw	r28, r24
     f82:	60 e0       	ldi	r22, 0x00	; 0
     f84:	80 e1       	ldi	r24, 0x10	; 16
     f86:	90 e0       	ldi	r25, 0x00	; 0
     f88:	0e 94 0b 05 	call	0xa16	; 0xa16 <do_control(DO_CONTROLS_E, bool)>
     f8c:	ce 01       	movw	r24, r28
     f8e:	0e 94 80 04 	call	0x900	; 0x900 <new_delay_msecs(unsigned int)>
     f92:	61 e0       	ldi	r22, 0x01	; 1
     f94:	80 e1       	ldi	r24, 0x10	; 16
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	df 91       	pop	r29
     f9a:	cf 91       	pop	r28
     f9c:	0c 94 0b 05 	jmp	0xa16	; 0xa16 <do_control(DO_CONTROLS_E, bool)>

00000fa0 <ui_task_main()>:
_Z12ui_task_mainv():
     fa0:	80 91 5a 04 	lds	r24, 0x045A	; 0x80045a <f_sec_change_ui_task>
     fa4:	88 23       	and	r24, r24
     fa6:	59 f0       	breq	.+22     	; 0xfbe <ui_task_main()+0x1e>
     fa8:	10 92 5a 04 	sts	0x045A, r1	; 0x80045a <f_sec_change_ui_task>
     fac:	80 91 f0 03 	lds	r24, 0x03F0	; 0x8003f0 <__data_end>
     fb0:	90 91 f1 03 	lds	r25, 0x03F1	; 0x8003f1 <__data_end+0x1>
     fb4:	01 96       	adiw	r24, 0x01	; 1
     fb6:	90 93 f1 03 	sts	0x03F1, r25	; 0x8003f1 <__data_end+0x1>
     fba:	80 93 f0 03 	sts	0x03F0, r24	; 0x8003f0 <__data_end>
     fbe:	0e 94 18 07 	call	0xe30	; 0xe30 <button_check()>
     fc2:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <ui_state>
     fc6:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <ui_state+0x1>
     fca:	85 30       	cpi	r24, 0x05	; 5
     fcc:	91 05       	cpc	r25, r1
     fce:	09 f4       	brne	.+2      	; 0xfd2 <ui_task_main()+0x32>
     fd0:	99 c0       	rjmp	.+306    	; 0x1104 <ui_task_main()+0x164>
     fd2:	5c f4       	brge	.+22     	; 0xfea <ui_task_main()+0x4a>
     fd4:	00 97       	sbiw	r24, 0x00	; 0
     fd6:	09 f4       	brne	.+2      	; 0xfda <ui_task_main()+0x3a>
     fd8:	50 c0       	rjmp	.+160    	; 0x107a <ui_task_main()+0xda>
     fda:	04 97       	sbiw	r24, 0x04	; 4
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <ui_task_main()+0x40>
     fde:	7d c0       	rjmp	.+250    	; 0x10da <ui_task_main()+0x13a>
     fe0:	10 92 fb 03 	sts	0x03FB, r1	; 0x8003fb <ui_state+0x1>
     fe4:	10 92 fa 03 	sts	0x03FA, r1	; 0x8003fa <ui_state>
     fe8:	4e c0       	rjmp	.+156    	; 0x1086 <ui_task_main()+0xe6>
     fea:	86 30       	cpi	r24, 0x06	; 6
     fec:	91 05       	cpc	r25, r1
     fee:	09 f4       	brne	.+2      	; 0xff2 <ui_task_main()+0x52>
     ff0:	b9 c0       	rjmp	.+370    	; 0x1164 <ui_task_main()+0x1c4>
     ff2:	07 97       	sbiw	r24, 0x07	; 7
     ff4:	a9 f7       	brne	.-22     	; 0xfe0 <ui_task_main()+0x40>
     ff6:	10 92 5c 04 	sts	0x045C, r1	; 0x80045c <f_system_running>
     ffa:	60 e5       	ldi	r22, 0x50	; 80
     ffc:	73 e0       	ldi	r23, 0x03	; 3
     ffe:	8e ea       	ldi	r24, 0xAE	; 174
    1000:	95 e0       	ldi	r25, 0x05	; 5
    1002:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <Print::println(char const*)>
    1006:	43 e0       	ldi	r20, 0x03	; 3
    1008:	60 e0       	ldi	r22, 0x00	; 0
    100a:	89 ec       	ldi	r24, 0xC9	; 201
    100c:	94 e0       	ldi	r25, 0x04	; 4
    100e:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1012:	65 e6       	ldi	r22, 0x65	; 101
    1014:	73 e0       	ldi	r23, 0x03	; 3
    1016:	89 ec       	ldi	r24, 0xC9	; 201
    1018:	94 e0       	ldi	r25, 0x04	; 4
    101a:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
    101e:	60 e0       	ldi	r22, 0x00	; 0
    1020:	88 e0       	ldi	r24, 0x08	; 8
    1022:	90 e0       	ldi	r25, 0x00	; 0
    1024:	0e 94 0b 05 	call	0xa16	; 0xa16 <do_control(DO_CONTROLS_E, bool)>
    1028:	8f e6       	ldi	r24, 0x6F	; 111
    102a:	90 e0       	ldi	r25, 0x00	; 0
    102c:	0e 94 be 07 	call	0xf7c	; 0xf7c <beep_for(int)>
    1030:	0e 94 67 05 	call	0xace	; 0xace <tworks2_values_to_default_postion()>
    1034:	88 ee       	ldi	r24, 0xE8	; 232
    1036:	93 e0       	ldi	r25, 0x03	; 3
    1038:	0e 94 80 04 	call	0x900	; 0x900 <new_delay_msecs(unsigned int)>
    103c:	43 e0       	ldi	r20, 0x03	; 3
    103e:	60 e0       	ldi	r22, 0x00	; 0
    1040:	89 ec       	ldi	r24, 0xC9	; 201
    1042:	94 e0       	ldi	r25, 0x04	; 4
    1044:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1048:	6a e7       	ldi	r22, 0x7A	; 122
    104a:	73 e0       	ldi	r23, 0x03	; 3
    104c:	89 ec       	ldi	r24, 0xC9	; 201
    104e:	94 e0       	ldi	r25, 0x04	; 4
    1050:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
    1054:	88 ee       	ldi	r24, 0xE8	; 232
    1056:	93 e0       	ldi	r25, 0x03	; 3
    1058:	0e 94 80 04 	call	0x900	; 0x900 <new_delay_msecs(unsigned int)>
    105c:	43 e0       	ldi	r20, 0x03	; 3
    105e:	60 e0       	ldi	r22, 0x00	; 0
    1060:	89 ec       	ldi	r24, 0xC9	; 201
    1062:	94 e0       	ldi	r25, 0x04	; 4
    1064:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1068:	6f e8       	ldi	r22, 0x8F	; 143
    106a:	73 e0       	ldi	r23, 0x03	; 3
    106c:	89 ec       	ldi	r24, 0xC9	; 201
    106e:	94 e0       	ldi	r25, 0x04	; 4
    1070:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
    1074:	88 e0       	ldi	r24, 0x08	; 8
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	02 c0       	rjmp	.+4      	; 0x107e <ui_task_main()+0xde>
    107a:	84 e0       	ldi	r24, 0x04	; 4
    107c:	90 e0       	ldi	r25, 0x00	; 0
    107e:	90 93 fb 03 	sts	0x03FB, r25	; 0x8003fb <ui_state+0x1>
    1082:	80 93 fa 03 	sts	0x03FA, r24	; 0x8003fa <ui_state>
    1086:	80 91 fa 03 	lds	r24, 0x03FA	; 0x8003fa <ui_state>
    108a:	90 91 fb 03 	lds	r25, 0x03FB	; 0x8003fb <ui_state+0x1>
    108e:	20 91 f8 03 	lds	r18, 0x03F8	; 0x8003f8 <prev_ui_state>
    1092:	30 91 f9 03 	lds	r19, 0x03F9	; 0x8003f9 <prev_ui_state+0x1>
    1096:	82 17       	cp	r24, r18
    1098:	93 07       	cpc	r25, r19
    109a:	09 f4       	brne	.+2      	; 0x109e <ui_task_main()+0xfe>
    109c:	9c c0       	rjmp	.+312    	; 0x11d6 <ui_task_main()+0x236>
    109e:	90 93 f9 03 	sts	0x03F9, r25	; 0x8003f9 <prev_ui_state+0x1>
    10a2:	80 93 f8 03 	sts	0x03F8, r24	; 0x8003f8 <prev_ui_state>
    10a6:	81 e0       	ldi	r24, 0x01	; 1
    10a8:	90 e0       	ldi	r25, 0x00	; 0
    10aa:	90 93 f7 03 	sts	0x03F7, r25	; 0x8003f7 <f_state_changed+0x1>
    10ae:	80 93 f6 03 	sts	0x03F6, r24	; 0x8003f6 <f_state_changed>
    10b2:	10 92 f1 03 	sts	0x03F1, r1	; 0x8003f1 <__data_end+0x1>
    10b6:	10 92 f0 03 	sts	0x03F0, r1	; 0x8003f0 <__data_end>
    10ba:	64 ea       	ldi	r22, 0xA4	; 164
    10bc:	73 e0       	ldi	r23, 0x03	; 3
    10be:	8e ea       	ldi	r24, 0xAE	; 174
    10c0:	95 e0       	ldi	r25, 0x05	; 5
    10c2:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
    10c6:	60 91 fa 03 	lds	r22, 0x03FA	; 0x8003fa <ui_state>
    10ca:	70 91 fb 03 	lds	r23, 0x03FB	; 0x8003fb <ui_state+0x1>
    10ce:	4a e0       	ldi	r20, 0x0A	; 10
    10d0:	50 e0       	ldi	r21, 0x00	; 0
    10d2:	8e ea       	ldi	r24, 0xAE	; 174
    10d4:	95 e0       	ldi	r25, 0x05	; 5
    10d6:	0c 94 25 16 	jmp	0x2c4a	; 0x2c4a <Print::println(int, int)>
    10da:	89 ec       	ldi	r24, 0xC9	; 201
    10dc:	94 e0       	ldi	r25, 0x04	; 4
    10de:	0e 94 04 0a 	call	0x1408	; 0x1408 <LiquidCrystal::clear()>
    10e2:	0e 94 70 07 	call	0xee0	; 0xee0 <ui_print_welcome()>
    10e6:	43 e0       	ldi	r20, 0x03	; 3
    10e8:	60 e0       	ldi	r22, 0x00	; 0
    10ea:	89 ec       	ldi	r24, 0xC9	; 201
    10ec:	94 e0       	ldi	r25, 0x04	; 4
    10ee:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    10f2:	64 ee       	ldi	r22, 0xE4	; 228
    10f4:	72 e0       	ldi	r23, 0x02	; 2
    10f6:	89 ec       	ldi	r24, 0xC9	; 201
    10f8:	94 e0       	ldi	r25, 0x04	; 4
    10fa:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
    10fe:	85 e0       	ldi	r24, 0x05	; 5
    1100:	90 e0       	ldi	r25, 0x00	; 0
    1102:	bd cf       	rjmp	.-134    	; 0x107e <ui_task_main()+0xde>
    1104:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <start_switch_pressed>
    1108:	81 30       	cpi	r24, 0x01	; 1
    110a:	09 f0       	breq	.+2      	; 0x110e <ui_task_main()+0x16e>
    110c:	bc cf       	rjmp	.-136    	; 0x1086 <ui_task_main()+0xe6>
    110e:	80 93 5c 04 	sts	0x045C, r24	; 0x80045c <f_system_running>
    1112:	69 ef       	ldi	r22, 0xF9	; 249
    1114:	72 e0       	ldi	r23, 0x02	; 2
    1116:	8e ea       	ldi	r24, 0xAE	; 174
    1118:	95 e0       	ldi	r25, 0x05	; 5
    111a:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <Print::println(char const*)>
    111e:	43 e0       	ldi	r20, 0x03	; 3
    1120:	60 e0       	ldi	r22, 0x00	; 0
    1122:	89 ec       	ldi	r24, 0xC9	; 201
    1124:	94 e0       	ldi	r25, 0x04	; 4
    1126:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    112a:	61 e1       	ldi	r22, 0x11	; 17
    112c:	73 e0       	ldi	r23, 0x03	; 3
    112e:	89 ec       	ldi	r24, 0xC9	; 201
    1130:	94 e0       	ldi	r25, 0x04	; 4
    1132:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
    1136:	8b e2       	ldi	r24, 0x2B	; 43
    1138:	92 e0       	ldi	r25, 0x02	; 2
    113a:	0e 94 be 07 	call	0xf7c	; 0xf7c <beep_for(int)>
    113e:	43 e0       	ldi	r20, 0x03	; 3
    1140:	60 e0       	ldi	r22, 0x00	; 0
    1142:	89 ec       	ldi	r24, 0xC9	; 201
    1144:	94 e0       	ldi	r25, 0x04	; 4
    1146:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    114a:	66 e2       	ldi	r22, 0x26	; 38
    114c:	73 e0       	ldi	r23, 0x03	; 3
    114e:	89 ec       	ldi	r24, 0xC9	; 201
    1150:	94 e0       	ldi	r25, 0x04	; 4
    1152:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
    1156:	88 ee       	ldi	r24, 0xE8	; 232
    1158:	93 e0       	ldi	r25, 0x03	; 3
    115a:	0e 94 80 04 	call	0x900	; 0x900 <new_delay_msecs(unsigned int)>
    115e:	86 e0       	ldi	r24, 0x06	; 6
    1160:	90 e0       	ldi	r25, 0x00	; 0
    1162:	8d cf       	rjmp	.-230    	; 0x107e <ui_task_main()+0xde>
    1164:	80 91 f6 03 	lds	r24, 0x03F6	; 0x8003f6 <f_state_changed>
    1168:	90 91 f7 03 	lds	r25, 0x03F7	; 0x8003f7 <f_state_changed+0x1>
    116c:	89 2b       	or	r24, r25
    116e:	61 f1       	breq	.+88     	; 0x11c8 <ui_task_main()+0x228>
    1170:	10 92 f7 03 	sts	0x03F7, r1	; 0x8003f7 <f_state_changed+0x1>
    1174:	10 92 f6 03 	sts	0x03F6, r1	; 0x8003f6 <f_state_changed>
    1178:	84 e1       	ldi	r24, 0x14	; 20
    117a:	94 e0       	ldi	r25, 0x04	; 4
    117c:	0e 94 b7 00 	call	0x16e	; 0x16e <lcd_clear_buf(char*)>
    1180:	89 ec       	ldi	r24, 0xC9	; 201
    1182:	94 e0       	ldi	r25, 0x04	; 4
    1184:	0e 94 04 0a 	call	0x1408	; 0x1408 <LiquidCrystal::clear()>
    1188:	40 e0       	ldi	r20, 0x00	; 0
    118a:	60 e0       	ldi	r22, 0x00	; 0
    118c:	89 ec       	ldi	r24, 0xC9	; 201
    118e:	94 e0       	ldi	r25, 0x04	; 4
    1190:	0e 94 0b 0a 	call	0x1416	; 0x1416 <LiquidCrystal::setCursor(unsigned char, unsigned char)>
    1194:	6c e3       	ldi	r22, 0x3C	; 60
    1196:	73 e0       	ldi	r23, 0x03	; 3
    1198:	84 e1       	ldi	r24, 0x14	; 20
    119a:	94 e0       	ldi	r25, 0x04	; 4
    119c:	0e 94 e6 19 	call	0x33cc	; 0x33cc <strcpy>
    11a0:	64 e1       	ldi	r22, 0x14	; 20
    11a2:	74 e0       	ldi	r23, 0x04	; 4
    11a4:	8e ea       	ldi	r24, 0xAE	; 174
    11a6:	95 e0       	ldi	r25, 0x05	; 5
    11a8:	0e 94 73 15 	call	0x2ae6	; 0x2ae6 <Print::println(char const*)>
    11ac:	64 e1       	ldi	r22, 0x14	; 20
    11ae:	74 e0       	ldi	r23, 0x04	; 4
    11b0:	89 ec       	ldi	r24, 0xC9	; 201
    11b2:	94 e0       	ldi	r25, 0x04	; 4
    11b4:	0e 94 4e 15 	call	0x2a9c	; 0x2a9c <Print::print(char const*)>
    11b8:	10 92 54 04 	sts	0x0454, r1	; 0x800454 <prev_o2_concentration>
    11bc:	10 92 55 04 	sts	0x0455, r1	; 0x800455 <prev_o2_concentration+0x1>
    11c0:	10 92 56 04 	sts	0x0456, r1	; 0x800456 <prev_o2_concentration+0x2>
    11c4:	10 92 57 04 	sts	0x0457, r1	; 0x800457 <prev_o2_concentration+0x3>
    11c8:	80 91 2a 04 	lds	r24, 0x042A	; 0x80042a <start_switch_pressed>
    11cc:	81 11       	cpse	r24, r1
    11ce:	5b cf       	rjmp	.-330    	; 0x1086 <ui_task_main()+0xe6>
    11d0:	87 e0       	ldi	r24, 0x07	; 7
    11d2:	90 e0       	ldi	r25, 0x00	; 0
    11d4:	54 cf       	rjmp	.-344    	; 0x107e <ui_task_main()+0xde>
    11d6:	08 95       	ret

000011d8 <loop>:
loop():
    11d8:	80 91 62 04 	lds	r24, 0x0462	; 0x800462 <f_msec>
    11dc:	88 23       	and	r24, r24
    11de:	19 f0       	breq	.+6      	; 0x11e6 <loop+0xe>
    11e0:	10 92 62 04 	sts	0x0462, r1	; 0x800462 <f_msec>
    11e4:	08 95       	ret
    11e6:	80 91 61 04 	lds	r24, 0x0461	; 0x800461 <f_10msec>
    11ea:	88 23       	and	r24, r24
    11ec:	19 f0       	breq	.+6      	; 0x11f4 <loop+0x1c>
    11ee:	10 92 61 04 	sts	0x0461, r1	; 0x800461 <f_10msec>
    11f2:	08 95       	ret
    11f4:	80 91 60 04 	lds	r24, 0x0460	; 0x800460 <f_100msec>
    11f8:	88 23       	and	r24, r24
    11fa:	19 f0       	breq	.+6      	; 0x1202 <loop+0x2a>
    11fc:	10 92 60 04 	sts	0x0460, r1	; 0x800460 <f_100msec>
    1200:	08 95       	ret
    1202:	80 91 5f 04 	lds	r24, 0x045F	; 0x80045f <f_1sec>
    1206:	88 23       	and	r24, r24
    1208:	e9 f0       	breq	.+58     	; 0x1244 <loop+0x6c>
    120a:	10 92 5f 04 	sts	0x045F, r1	; 0x80045f <f_1sec>
    120e:	81 e0       	ldi	r24, 0x01	; 1
    1210:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <f_sec_logs_task>
    1214:	80 93 5a 04 	sts	0x045A, r24	; 0x80045a <f_sec_change_ui_task>
    1218:	80 93 59 04 	sts	0x0459, r24	; 0x800459 <f_sec_change_o2_task>
    121c:	80 93 58 04 	sts	0x0458, r24	; 0x800458 <f_sec_change_sensor_task>
    1220:	0e 94 1c 03 	call	0x638	; 0x638 <o2_sensor_scan()>
    1224:	60 91 0c 01 	lds	r22, 0x010C	; 0x80010c <o2_concentration>
    1228:	70 91 0d 01 	lds	r23, 0x010D	; 0x80010d <o2_concentration+0x1>
    122c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <o2_concentration+0x2>
    1230:	90 91 0f 01 	lds	r25, 0x010F	; 0x80010f <o2_concentration+0x3>
    1234:	0e 94 0b 01 	call	0x216	; 0x216 <display_o2(float)>
    1238:	60 e5       	ldi	r22, 0x50	; 80
    123a:	72 e0       	ldi	r23, 0x02	; 2
    123c:	8e ea       	ldi	r24, 0xAE	; 174
    123e:	95 e0       	ldi	r25, 0x05	; 5
    1240:	0c 94 4e 15 	jmp	0x2a9c	; 0x2a9c <Print::print(char const*)>
    1244:	80 91 5e 04 	lds	r24, 0x045E	; 0x80045e <f_1min>
    1248:	88 23       	and	r24, r24
    124a:	19 f0       	breq	.+6      	; 0x1252 <loop+0x7a>
    124c:	10 92 5e 04 	sts	0x045E, r1	; 0x80045e <f_1min>
    1250:	08 95       	ret
    1252:	80 91 5d 04 	lds	r24, 0x045D	; 0x80045d <f_1hr>
    1256:	88 23       	and	r24, r24
    1258:	19 f0       	breq	.+6      	; 0x1260 <loop+0x88>
    125a:	10 92 5d 04 	sts	0x045D, r1	; 0x80045d <f_1hr>
    125e:	08 95       	ret
    1260:	0e 94 c0 05 	call	0xb80	; 0xb80 <o2_main_task()>
    1264:	0e 94 d0 07 	call	0xfa0	; 0xfa0 <ui_task_main()>
    1268:	0c 94 de 02 	jmp	0x5bc	; 0x5bc <logs_task()>

0000126c <_GLOBAL__sub_I_lcd>:
_GLOBAL__sub_I_lcd():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:468

}
    126c:	cf 92       	push	r12
    126e:	ef 92       	push	r14
    1270:	0f 93       	push	r16
    1272:	1f 93       	push	r17
__static_initialization_and_destruction_0():
C:\Users\habeeba\AppData\Local\Temp\arduino_build_449982\sketch/display.h:40


#define LCD_ROWS   ( 4)
#define LCD_COLS   (20)

LiquidCrystal   lcd(RS, EN, D4, D5, D6, D7);
    1274:	87 e1       	ldi	r24, 0x17	; 23
    1276:	c8 2e       	mov	r12, r24
    1278:	96 e1       	ldi	r25, 0x16	; 22
    127a:	e9 2e       	mov	r14, r25
    127c:	05 e1       	ldi	r16, 0x15	; 21
    127e:	24 e1       	ldi	r18, 0x14	; 20
    1280:	43 e1       	ldi	r20, 0x13	; 19
    1282:	62 e1       	ldi	r22, 0x12	; 18
    1284:	89 ec       	ldi	r24, 0xC9	; 201
    1286:	94 e0       	ldi	r25, 0x04	; 4
    1288:	0e 94 c0 0a 	call	0x1580	; 0x1580 <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>
C:\Users\habeeba\AppData\Local\Temp\arduino_build_449982\sketch/display.h:41
LedControl      lc = LedControl(dataPin_7segment, clckPin_7segment, loadPin_7segment, 1);
    128c:	01 e0       	ldi	r16, 0x01	; 1
    128e:	10 e0       	ldi	r17, 0x00	; 0
    1290:	2d e0       	ldi	r18, 0x0D	; 13
    1292:	30 e0       	ldi	r19, 0x00	; 0
    1294:	47 e0       	ldi	r20, 0x07	; 7
    1296:	50 e0       	ldi	r21, 0x00	; 0
    1298:	65 e0       	ldi	r22, 0x05	; 5
    129a:	70 e0       	ldi	r23, 0x00	; 0
    129c:	81 e7       	ldi	r24, 0x71	; 113
    129e:	94 e0       	ldi	r25, 0x04	; 4
    12a0:	0e 94 9f 0b 	call	0x173e	; 0x173e <LedControl::LedControl(int, int, int, int)>
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:20
//float x_samples[NUM_OF_SAMPLES_O2] = {224.0,  1083.0, 4888.0};




ADS1115 ADS(O2_SENSOR_ADS_ADDR);
    12a4:	41 ee       	ldi	r20, 0xE1	; 225
    12a6:	54 e0       	ldi	r21, 0x04	; 4
    12a8:	68 e4       	ldi	r22, 0x48	; 72
    12aa:	8c ef       	ldi	r24, 0xFC	; 252
    12ac:	93 e0       	ldi	r25, 0x03	; 3
_GLOBAL__sub_I_lcd():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/ui.ino:468
    12ae:	1f 91       	pop	r17
    12b0:	0f 91       	pop	r16
    12b2:	ef 90       	pop	r14
    12b4:	cf 90       	pop	r12
__static_initialization_and_destruction_0():
F:\Projects\Tworks\4_O2_Concentrator\Firmware\O2Concentrator_POC\tworks_o2_cons/o2_sensor.ino:20
    12b6:	0c 94 94 0d 	jmp	0x1b28	; 0x1b28 <ADS1115::ADS1115(unsigned char, TwoWire*)>

000012ba <Print::availableForWrite()>:
_ZN5Print17availableForWriteEv():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:271
  location &= 0x7; // we only have 8 locations 0-7
  command(LCD_SETCGRAMADDR | (location << 3));
  for (int i=0; i<8; i++) {
    write(charmap[i]);
  }
}
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	08 95       	ret

000012c0 <Print::flush()>:
_ZN5Print5flushEv():
    12c0:	08 95       	ret

000012c2 <LiquidCrystal::pulseEnable()>:
_ZN13LiquidCrystal11pulseEnableEv():
    12c2:	cf 93       	push	r28
    12c4:	df 93       	push	r29
    12c6:	ec 01       	movw	r28, r24
    12c8:	60 e0       	ldi	r22, 0x00	; 0
    12ca:	8e 81       	ldd	r24, Y+6	; 0x06
    12cc:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
    12d0:	81 e0       	ldi	r24, 0x01	; 1
    12d2:	90 e0       	ldi	r25, 0x00	; 0
    12d4:	0e 94 de 11 	call	0x23bc	; 0x23bc <delayMicroseconds>
    12d8:	61 e0       	ldi	r22, 0x01	; 1
    12da:	8e 81       	ldd	r24, Y+6	; 0x06
    12dc:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
    12e0:	81 e0       	ldi	r24, 0x01	; 1
    12e2:	90 e0       	ldi	r25, 0x00	; 0
    12e4:	0e 94 de 11 	call	0x23bc	; 0x23bc <delayMicroseconds>
    12e8:	60 e0       	ldi	r22, 0x00	; 0
    12ea:	8e 81       	ldd	r24, Y+6	; 0x06
    12ec:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
    12f0:	84 e6       	ldi	r24, 0x64	; 100
    12f2:	90 e0       	ldi	r25, 0x00	; 0
    12f4:	df 91       	pop	r29
    12f6:	cf 91       	pop	r28
    12f8:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <delayMicroseconds>

000012fc <LiquidCrystal::write4bits(unsigned char)>:
_ZN13LiquidCrystal10write4bitsEh():
    12fc:	cf 92       	push	r12
    12fe:	df 92       	push	r13
    1300:	ef 92       	push	r14
    1302:	ff 92       	push	r15
    1304:	0f 93       	push	r16
    1306:	1f 93       	push	r17
    1308:	cf 93       	push	r28
    130a:	df 93       	push	r29
    130c:	6c 01       	movw	r12, r24
    130e:	7c 01       	movw	r14, r24
    1310:	87 e0       	ldi	r24, 0x07	; 7
    1312:	e8 0e       	add	r14, r24
    1314:	f1 1c       	adc	r15, r1
    1316:	d0 e0       	ldi	r29, 0x00	; 0
    1318:	c0 e0       	ldi	r28, 0x00	; 0
    131a:	06 2f       	mov	r16, r22
    131c:	10 e0       	ldi	r17, 0x00	; 0
    131e:	b8 01       	movw	r22, r16
    1320:	0c 2e       	mov	r0, r28
    1322:	02 c0       	rjmp	.+4      	; 0x1328 <LiquidCrystal::write4bits(unsigned char)+0x2c>
    1324:	75 95       	asr	r23
    1326:	67 95       	ror	r22
    1328:	0a 94       	dec	r0
    132a:	e2 f7       	brpl	.-8      	; 0x1324 <LiquidCrystal::write4bits(unsigned char)+0x28>
    132c:	61 70       	andi	r22, 0x01	; 1
    132e:	f7 01       	movw	r30, r14
    1330:	81 91       	ld	r24, Z+
    1332:	7f 01       	movw	r14, r30
    1334:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
    1338:	21 96       	adiw	r28, 0x01	; 1
    133a:	c4 30       	cpi	r28, 0x04	; 4
    133c:	d1 05       	cpc	r29, r1
    133e:	79 f7       	brne	.-34     	; 0x131e <LiquidCrystal::write4bits(unsigned char)+0x22>
    1340:	c6 01       	movw	r24, r12
    1342:	df 91       	pop	r29
    1344:	cf 91       	pop	r28
    1346:	1f 91       	pop	r17
    1348:	0f 91       	pop	r16
    134a:	ff 90       	pop	r15
    134c:	ef 90       	pop	r14
    134e:	df 90       	pop	r13
    1350:	cf 90       	pop	r12
    1352:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <LiquidCrystal::pulseEnable()>

00001356 <LiquidCrystal::write8bits(unsigned char)>:
_ZN13LiquidCrystal10write8bitsEh():
    1356:	cf 92       	push	r12
    1358:	df 92       	push	r13
    135a:	ef 92       	push	r14
    135c:	ff 92       	push	r15
    135e:	0f 93       	push	r16
    1360:	1f 93       	push	r17
    1362:	cf 93       	push	r28
    1364:	df 93       	push	r29
    1366:	6c 01       	movw	r12, r24
    1368:	7c 01       	movw	r14, r24
    136a:	87 e0       	ldi	r24, 0x07	; 7
    136c:	e8 0e       	add	r14, r24
    136e:	f1 1c       	adc	r15, r1
    1370:	d0 e0       	ldi	r29, 0x00	; 0
    1372:	c0 e0       	ldi	r28, 0x00	; 0
    1374:	06 2f       	mov	r16, r22
    1376:	10 e0       	ldi	r17, 0x00	; 0
    1378:	b8 01       	movw	r22, r16
    137a:	0c 2e       	mov	r0, r28
    137c:	02 c0       	rjmp	.+4      	; 0x1382 <LiquidCrystal::write8bits(unsigned char)+0x2c>
    137e:	75 95       	asr	r23
    1380:	67 95       	ror	r22
    1382:	0a 94       	dec	r0
    1384:	e2 f7       	brpl	.-8      	; 0x137e <LiquidCrystal::write8bits(unsigned char)+0x28>
    1386:	61 70       	andi	r22, 0x01	; 1
    1388:	f7 01       	movw	r30, r14
    138a:	81 91       	ld	r24, Z+
    138c:	7f 01       	movw	r14, r30
    138e:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
    1392:	21 96       	adiw	r28, 0x01	; 1
    1394:	c8 30       	cpi	r28, 0x08	; 8
    1396:	d1 05       	cpc	r29, r1
    1398:	79 f7       	brne	.-34     	; 0x1378 <LiquidCrystal::write8bits(unsigned char)+0x22>
    139a:	c6 01       	movw	r24, r12
    139c:	df 91       	pop	r29
    139e:	cf 91       	pop	r28
    13a0:	1f 91       	pop	r17
    13a2:	0f 91       	pop	r16
    13a4:	ff 90       	pop	r15
    13a6:	ef 90       	pop	r14
    13a8:	df 90       	pop	r13
    13aa:	cf 90       	pop	r12
    13ac:	0c 94 61 09 	jmp	0x12c2	; 0x12c2 <LiquidCrystal::pulseEnable()>

000013b0 <LiquidCrystal::send(unsigned char, unsigned char)>:
_ZN13LiquidCrystal4sendEhh():
    13b0:	1f 93       	push	r17
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	ec 01       	movw	r28, r24
    13b8:	16 2f       	mov	r17, r22
    13ba:	64 2f       	mov	r22, r20
    13bc:	8c 81       	ldd	r24, Y+4	; 0x04
    13be:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
    13c2:	8d 81       	ldd	r24, Y+5	; 0x05
    13c4:	8f 3f       	cpi	r24, 0xFF	; 255
    13c6:	19 f0       	breq	.+6      	; 0x13ce <LiquidCrystal::send(unsigned char, unsigned char)+0x1e>
    13c8:	60 e0       	ldi	r22, 0x00	; 0
    13ca:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
    13ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    13d0:	61 2f       	mov	r22, r17
    13d2:	84 ff       	sbrs	r24, 4
    13d4:	06 c0       	rjmp	.+12     	; 0x13e2 <LiquidCrystal::send(unsigned char, unsigned char)+0x32>
    13d6:	ce 01       	movw	r24, r28
    13d8:	df 91       	pop	r29
    13da:	cf 91       	pop	r28
    13dc:	1f 91       	pop	r17
    13de:	0c 94 ab 09 	jmp	0x1356	; 0x1356 <LiquidCrystal::write8bits(unsigned char)>
    13e2:	70 e0       	ldi	r23, 0x00	; 0
    13e4:	84 e0       	ldi	r24, 0x04	; 4
    13e6:	75 95       	asr	r23
    13e8:	67 95       	ror	r22
    13ea:	8a 95       	dec	r24
    13ec:	e1 f7       	brne	.-8      	; 0x13e6 <LiquidCrystal::send(unsigned char, unsigned char)+0x36>
    13ee:	ce 01       	movw	r24, r28
    13f0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <LiquidCrystal::write4bits(unsigned char)>
    13f4:	61 2f       	mov	r22, r17
    13f6:	ce 01       	movw	r24, r28
    13f8:	df 91       	pop	r29
    13fa:	cf 91       	pop	r28
    13fc:	1f 91       	pop	r17
    13fe:	0c 94 7e 09 	jmp	0x12fc	; 0x12fc <LiquidCrystal::write4bits(unsigned char)>

00001402 <LiquidCrystal::command(unsigned char)>:
_ZN13LiquidCrystal7commandEh():
    1402:	40 e0       	ldi	r20, 0x00	; 0
    1404:	0c 94 d8 09 	jmp	0x13b0	; 0x13b0 <LiquidCrystal::send(unsigned char, unsigned char)>

00001408 <LiquidCrystal::clear()>:
_ZN13LiquidCrystal5clearEv():
    1408:	61 e0       	ldi	r22, 0x01	; 1
    140a:	0e 94 01 0a 	call	0x1402	; 0x1402 <LiquidCrystal::command(unsigned char)>
    140e:	80 ed       	ldi	r24, 0xD0	; 208
    1410:	97 e0       	ldi	r25, 0x07	; 7
    1412:	0c 94 de 11 	jmp	0x23bc	; 0x23bc <delayMicroseconds>

00001416 <LiquidCrystal::setCursor(unsigned char, unsigned char)>:
_ZN13LiquidCrystal9setCursorEhh():
    1416:	44 30       	cpi	r20, 0x04	; 4
    1418:	08 f0       	brcs	.+2      	; 0x141c <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x6>
    141a:	43 e0       	ldi	r20, 0x03	; 3
    141c:	fc 01       	movw	r30, r24
    141e:	23 89       	ldd	r18, Z+19	; 0x13
    1420:	42 17       	cp	r20, r18
    1422:	10 f0       	brcs	.+4      	; 0x1428 <LiquidCrystal::setCursor(unsigned char, unsigned char)+0x12>
    1424:	4f ef       	ldi	r20, 0xFF	; 255
    1426:	42 0f       	add	r20, r18
    1428:	fc 01       	movw	r30, r24
    142a:	e4 0f       	add	r30, r20
    142c:	f1 1d       	adc	r31, r1
    142e:	24 89       	ldd	r18, Z+20	; 0x14
    1430:	62 0f       	add	r22, r18
    1432:	60 68       	ori	r22, 0x80	; 128
    1434:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <LiquidCrystal::command(unsigned char)>

00001438 <LiquidCrystal::display()>:
_ZN13LiquidCrystal7displayEv():
    1438:	fc 01       	movw	r30, r24
    143a:	60 89       	ldd	r22, Z+16	; 0x10
    143c:	26 2f       	mov	r18, r22
    143e:	24 60       	ori	r18, 0x04	; 4
    1440:	20 8b       	std	Z+16, r18	; 0x10
    1442:	6c 60       	ori	r22, 0x0C	; 12
    1444:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <LiquidCrystal::command(unsigned char)>

00001448 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystal5beginEhhh():
    1448:	0f 93       	push	r16
    144a:	1f 93       	push	r17
    144c:	cf 93       	push	r28
    144e:	df 93       	push	r29
    1450:	ec 01       	movw	r28, r24
    1452:	42 30       	cpi	r20, 0x02	; 2
    1454:	18 f0       	brcs	.+6      	; 0x145c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x14>
    1456:	8f 85       	ldd	r24, Y+15	; 0x0f
    1458:	88 60       	ori	r24, 0x08	; 8
    145a:	8f 87       	std	Y+15, r24	; 0x0f
    145c:	4b 8b       	std	Y+19, r20	; 0x13
_ZN13LiquidCrystal13setRowOffsetsEiiii():
    145e:	1c 8a       	std	Y+20, r1	; 0x14
    1460:	80 e4       	ldi	r24, 0x40	; 64
    1462:	8d 8b       	std	Y+21, r24	; 0x15
    1464:	6e 8b       	std	Y+22, r22	; 0x16
    1466:	60 5c       	subi	r22, 0xC0	; 192
    1468:	6f 8b       	std	Y+23, r22	; 0x17
_ZN13LiquidCrystal5beginEhhh():
    146a:	22 23       	and	r18, r18
    146c:	29 f0       	breq	.+10     	; 0x1478 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    146e:	41 30       	cpi	r20, 0x01	; 1
    1470:	19 f4       	brne	.+6      	; 0x1478 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x30>
    1472:	8f 85       	ldd	r24, Y+15	; 0x0f
    1474:	84 60       	ori	r24, 0x04	; 4
    1476:	8f 87       	std	Y+15, r24	; 0x0f
    1478:	61 e0       	ldi	r22, 0x01	; 1
    147a:	8c 81       	ldd	r24, Y+4	; 0x04
    147c:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
    1480:	8d 81       	ldd	r24, Y+5	; 0x05
    1482:	8f 3f       	cpi	r24, 0xFF	; 255
    1484:	19 f0       	breq	.+6      	; 0x148c <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x44>
    1486:	61 e0       	ldi	r22, 0x01	; 1
    1488:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
    148c:	61 e0       	ldi	r22, 0x01	; 1
    148e:	8e 81       	ldd	r24, Y+6	; 0x06
    1490:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
    1494:	8e 01       	movw	r16, r28
    1496:	98 01       	movw	r18, r16
    1498:	2c 1b       	sub	r18, r28
    149a:	3d 0b       	sbc	r19, r29
    149c:	8f 85       	ldd	r24, Y+15	; 0x0f
    149e:	84 fd       	sbrc	r24, 4
    14a0:	0d c0       	rjmp	.+26     	; 0x14bc <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x74>
    14a2:	84 e0       	ldi	r24, 0x04	; 4
    14a4:	90 e0       	ldi	r25, 0x00	; 0
    14a6:	0f 5f       	subi	r16, 0xFF	; 255
    14a8:	1f 4f       	sbci	r17, 0xFF	; 255
    14aa:	28 17       	cp	r18, r24
    14ac:	39 07       	cpc	r19, r25
    14ae:	4c f4       	brge	.+18     	; 0x14c2 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x7a>
    14b0:	61 e0       	ldi	r22, 0x01	; 1
    14b2:	f8 01       	movw	r30, r16
    14b4:	86 81       	ldd	r24, Z+6	; 0x06
    14b6:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
    14ba:	ed cf       	rjmp	.-38     	; 0x1496 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x4e>
    14bc:	88 e0       	ldi	r24, 0x08	; 8
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	f2 cf       	rjmp	.-28     	; 0x14a6 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x5e>
    14c2:	80 e5       	ldi	r24, 0x50	; 80
    14c4:	93 ec       	ldi	r25, 0xC3	; 195
    14c6:	0e 94 de 11 	call	0x23bc	; 0x23bc <delayMicroseconds>
    14ca:	60 e0       	ldi	r22, 0x00	; 0
    14cc:	8c 81       	ldd	r24, Y+4	; 0x04
    14ce:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
    14d2:	60 e0       	ldi	r22, 0x00	; 0
    14d4:	8e 81       	ldd	r24, Y+6	; 0x06
    14d6:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
    14da:	8d 81       	ldd	r24, Y+5	; 0x05
    14dc:	8f 3f       	cpi	r24, 0xFF	; 255
    14de:	19 f0       	breq	.+6      	; 0x14e6 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x9e>
    14e0:	60 e0       	ldi	r22, 0x00	; 0
    14e2:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
    14e6:	6f 85       	ldd	r22, Y+15	; 0x0f
    14e8:	64 fd       	sbrc	r22, 4
    14ea:	33 c0       	rjmp	.+102    	; 0x1552 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0x10a>
    14ec:	63 e0       	ldi	r22, 0x03	; 3
    14ee:	ce 01       	movw	r24, r28
    14f0:	0e 94 7e 09 	call	0x12fc	; 0x12fc <LiquidCrystal::write4bits(unsigned char)>
    14f4:	84 e9       	ldi	r24, 0x94	; 148
    14f6:	91 e1       	ldi	r25, 0x11	; 17
    14f8:	0e 94 de 11 	call	0x23bc	; 0x23bc <delayMicroseconds>
    14fc:	63 e0       	ldi	r22, 0x03	; 3
    14fe:	ce 01       	movw	r24, r28
    1500:	0e 94 7e 09 	call	0x12fc	; 0x12fc <LiquidCrystal::write4bits(unsigned char)>
    1504:	84 e9       	ldi	r24, 0x94	; 148
    1506:	91 e1       	ldi	r25, 0x11	; 17
    1508:	0e 94 de 11 	call	0x23bc	; 0x23bc <delayMicroseconds>
    150c:	63 e0       	ldi	r22, 0x03	; 3
    150e:	ce 01       	movw	r24, r28
    1510:	0e 94 7e 09 	call	0x12fc	; 0x12fc <LiquidCrystal::write4bits(unsigned char)>
    1514:	86 e9       	ldi	r24, 0x96	; 150
    1516:	90 e0       	ldi	r25, 0x00	; 0
    1518:	0e 94 de 11 	call	0x23bc	; 0x23bc <delayMicroseconds>
    151c:	62 e0       	ldi	r22, 0x02	; 2
    151e:	ce 01       	movw	r24, r28
    1520:	0e 94 7e 09 	call	0x12fc	; 0x12fc <LiquidCrystal::write4bits(unsigned char)>
    1524:	6f 85       	ldd	r22, Y+15	; 0x0f
    1526:	60 62       	ori	r22, 0x20	; 32
    1528:	ce 01       	movw	r24, r28
    152a:	0e 94 01 0a 	call	0x1402	; 0x1402 <LiquidCrystal::command(unsigned char)>
    152e:	84 e0       	ldi	r24, 0x04	; 4
    1530:	88 8b       	std	Y+16, r24	; 0x10
    1532:	ce 01       	movw	r24, r28
    1534:	0e 94 1c 0a 	call	0x1438	; 0x1438 <LiquidCrystal::display()>
    1538:	ce 01       	movw	r24, r28
    153a:	0e 94 04 0a 	call	0x1408	; 0x1408 <LiquidCrystal::clear()>
    153e:	82 e0       	ldi	r24, 0x02	; 2
    1540:	89 8b       	std	Y+17, r24	; 0x11
    1542:	66 e0       	ldi	r22, 0x06	; 6
    1544:	ce 01       	movw	r24, r28
    1546:	df 91       	pop	r29
    1548:	cf 91       	pop	r28
    154a:	1f 91       	pop	r17
    154c:	0f 91       	pop	r16
    154e:	0c 94 01 0a 	jmp	0x1402	; 0x1402 <LiquidCrystal::command(unsigned char)>
    1552:	60 62       	ori	r22, 0x20	; 32
    1554:	ce 01       	movw	r24, r28
    1556:	0e 94 01 0a 	call	0x1402	; 0x1402 <LiquidCrystal::command(unsigned char)>
    155a:	84 e9       	ldi	r24, 0x94	; 148
    155c:	91 e1       	ldi	r25, 0x11	; 17
    155e:	0e 94 de 11 	call	0x23bc	; 0x23bc <delayMicroseconds>
    1562:	6f 85       	ldd	r22, Y+15	; 0x0f
    1564:	60 62       	ori	r22, 0x20	; 32
    1566:	ce 01       	movw	r24, r28
    1568:	0e 94 01 0a 	call	0x1402	; 0x1402 <LiquidCrystal::command(unsigned char)>
    156c:	86 e9       	ldi	r24, 0x96	; 150
    156e:	90 e0       	ldi	r25, 0x00	; 0
    1570:	0e 94 de 11 	call	0x23bc	; 0x23bc <delayMicroseconds>
    1574:	6f 85       	ldd	r22, Y+15	; 0x0f
    1576:	60 62       	ori	r22, 0x20	; 32
    1578:	ce 01       	movw	r24, r28
    157a:	0e 94 01 0a 	call	0x1402	; 0x1402 <LiquidCrystal::command(unsigned char)>
    157e:	d2 cf       	rjmp	.-92     	; 0x1524 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)+0xdc>

00001580 <LiquidCrystal::LiquidCrystal(unsigned char, unsigned char, unsigned char, unsigned char, unsigned char, unsigned char)>:
_ZN13LiquidCrystalC2Ehhhhhh():
    1580:	cf 92       	push	r12
    1582:	ef 92       	push	r14
    1584:	0f 93       	push	r16
    1586:	fc 01       	movw	r30, r24
_ZN5PrintC4Ev():
    1588:	13 82       	std	Z+3, r1	; 0x03
    158a:	12 82       	std	Z+2, r1	; 0x02
_ZN13LiquidCrystalC2Ehhhhhh():
    158c:	84 eb       	ldi	r24, 0xB4	; 180
    158e:	93 e0       	ldi	r25, 0x03	; 3
    1590:	91 83       	std	Z+1, r25	; 0x01
    1592:	80 83       	st	Z, r24
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    1594:	64 83       	std	Z+4, r22	; 0x04
    1596:	8f ef       	ldi	r24, 0xFF	; 255
    1598:	85 83       	std	Z+5, r24	; 0x05
    159a:	46 83       	std	Z+6, r20	; 0x06
    159c:	27 83       	std	Z+7, r18	; 0x07
    159e:	00 87       	std	Z+8, r16	; 0x08
    15a0:	e1 86       	std	Z+9, r14	; 0x09
    15a2:	c2 86       	std	Z+10, r12	; 0x0a
    15a4:	13 86       	std	Z+11, r1	; 0x0b
    15a6:	14 86       	std	Z+12, r1	; 0x0c
    15a8:	15 86       	std	Z+13, r1	; 0x0d
    15aa:	16 86       	std	Z+14, r1	; 0x0e
    15ac:	17 86       	std	Z+15, r1	; 0x0f
    15ae:	20 e0       	ldi	r18, 0x00	; 0
    15b0:	41 e0       	ldi	r20, 0x01	; 1
    15b2:	60 e1       	ldi	r22, 0x10	; 16
    15b4:	cf 01       	movw	r24, r30
_ZN13LiquidCrystalC2Ehhhhhh():
    15b6:	0f 91       	pop	r16
    15b8:	ef 90       	pop	r14
    15ba:	cf 90       	pop	r12
_ZN13LiquidCrystal4initEhhhhhhhhhhhh():
    15bc:	0c 94 24 0a 	jmp	0x1448	; 0x1448 <LiquidCrystal::begin(unsigned char, unsigned char, unsigned char)>

000015c0 <LiquidCrystal::write(unsigned char)>:
_ZN13LiquidCrystal5writeEh():
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:280
inline void LiquidCrystal::command(uint8_t value) {
  send(value, LOW);
}

inline size_t LiquidCrystal::write(uint8_t value) {
  send(value, HIGH);
    15c0:	41 e0       	ldi	r20, 0x01	; 1
    15c2:	0e 94 d8 09 	call	0x13b0	; 0x13b0 <LiquidCrystal::send(unsigned char, unsigned char)>
C:\Program Files (x86)\Arduino\libraries\LiquidCrystal\src/LiquidCrystal.cpp:282
  return 1; // assume sucess
}
    15c6:	81 e0       	ldi	r24, 0x01	; 1
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	08 95       	ret

000015cc <LedControl::spiTransfer(int, unsigned char, unsigned char)>:
_ZN10LedControl11spiTransferEihh():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:97
void LedControl::setIntensity(int addr, int intensity) {
    if(addr<0 || addr>=maxDevices)
        return;
    if(intensity>=0 && intensity<16)	
        spiTransfer(addr, OP_INTENSITY,intensity);
}
    15cc:	8f 92       	push	r8
    15ce:	9f 92       	push	r9
    15d0:	af 92       	push	r10
    15d2:	bf 92       	push	r11
    15d4:	cf 92       	push	r12
    15d6:	df 92       	push	r13
    15d8:	ef 92       	push	r14
    15da:	ff 92       	push	r15
    15dc:	0f 93       	push	r16
    15de:	1f 93       	push	r17
    15e0:	cf 93       	push	r28
    15e2:	df 93       	push	r29
    15e4:	00 d0       	rcall	.+0      	; 0x15e6 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x1a>
    15e6:	cd b7       	in	r28, 0x3d	; 61
    15e8:	de b7       	in	r29, 0x3e	; 62
    15ea:	8c 01       	movw	r16, r24
    15ec:	49 83       	std	Y+1, r20	; 0x01
    15ee:	2a 83       	std	Y+2, r18	; 0x02
    15f0:	66 0f       	add	r22, r22
    15f2:	77 1f       	adc	r23, r23
    15f4:	f8 01       	movw	r30, r16
    15f6:	ea 5a       	subi	r30, 0xAA	; 170
    15f8:	ff 4f       	sbci	r31, 0xFF	; 255
    15fa:	e0 80       	ld	r14, Z
    15fc:	f1 80       	ldd	r15, Z+1	; 0x01
    15fe:	ee 0c       	add	r14, r14
    1600:	ff 1c       	adc	r15, r15
    1602:	f8 01       	movw	r30, r16
    1604:	cf 01       	movw	r24, r30
    1606:	80 1b       	sub	r24, r16
    1608:	91 0b       	sbc	r25, r17
    160a:	8e 15       	cp	r24, r14
    160c:	9f 05       	cpc	r25, r15
    160e:	14 f4       	brge	.+4      	; 0x1614 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x48>
    1610:	11 92       	st	Z+, r1
    1612:	f8 cf       	rjmp	.-16     	; 0x1604 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x38>
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	f8 01       	movw	r30, r16
    1618:	e6 0f       	add	r30, r22
    161a:	f7 1f       	adc	r31, r23
    161c:	81 83       	std	Z+1, r24	; 0x01
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	80 83       	st	Z, r24
    1622:	68 01       	movw	r12, r16
    1624:	84 e5       	ldi	r24, 0x54	; 84
    1626:	c8 0e       	add	r12, r24
    1628:	d1 1c       	adc	r13, r1
    162a:	60 e0       	ldi	r22, 0x00	; 0
    162c:	f6 01       	movw	r30, r12
    162e:	80 81       	ld	r24, Z
    1630:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
    1634:	48 01       	movw	r8, r16
    1636:	f2 e5       	ldi	r31, 0x52	; 82
    1638:	8f 0e       	add	r8, r31
    163a:	91 1c       	adc	r9, r1
    163c:	58 01       	movw	r10, r16
    163e:	80 e5       	ldi	r24, 0x50	; 80
    1640:	a8 0e       	add	r10, r24
    1642:	b1 1c       	adc	r11, r1
    1644:	1e 14       	cp	r1, r14
    1646:	1f 04       	cpc	r1, r15
    1648:	7c f4       	brge	.+30     	; 0x1668 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x9c>
    164a:	e1 e0       	ldi	r30, 0x01	; 1
    164c:	ee 1a       	sub	r14, r30
    164e:	f1 08       	sbc	r15, r1
    1650:	f8 01       	movw	r30, r16
    1652:	ee 0d       	add	r30, r14
    1654:	ff 1d       	adc	r31, r15
    1656:	20 81       	ld	r18, Z
    1658:	41 e0       	ldi	r20, 0x01	; 1
    165a:	f4 01       	movw	r30, r8
    165c:	60 81       	ld	r22, Z
    165e:	f5 01       	movw	r30, r10
    1660:	80 81       	ld	r24, Z
    1662:	0e 94 e6 12 	call	0x25cc	; 0x25cc <shiftOut>
    1666:	ee cf       	rjmp	.-36     	; 0x1644 <LedControl::spiTransfer(int, unsigned char, unsigned char)+0x78>
    1668:	61 e0       	ldi	r22, 0x01	; 1
    166a:	f6 01       	movw	r30, r12
    166c:	80 81       	ld	r24, Z
    166e:	0f 90       	pop	r0
    1670:	0f 90       	pop	r0
    1672:	df 91       	pop	r29
    1674:	cf 91       	pop	r28
    1676:	1f 91       	pop	r17
    1678:	0f 91       	pop	r16
    167a:	ff 90       	pop	r15
    167c:	ef 90       	pop	r14
    167e:	df 90       	pop	r13
    1680:	cf 90       	pop	r12
    1682:	bf 90       	pop	r11
    1684:	af 90       	pop	r10
    1686:	9f 90       	pop	r9
    1688:	8f 90       	pop	r8
    168a:	0c 94 8f 12 	jmp	0x251e	; 0x251e <digitalWrite>

0000168e <LedControl::shutdown(int, bool)>:
_ZN10LedControl8shutdownEib():
    168e:	77 fd       	sbrc	r23, 7
    1690:	0f c0       	rjmp	.+30     	; 0x16b0 <LedControl::shutdown(int, bool)+0x22>
    1692:	fc 01       	movw	r30, r24
    1694:	ea 5a       	subi	r30, 0xAA	; 170
    1696:	ff 4f       	sbci	r31, 0xFF	; 255
    1698:	20 81       	ld	r18, Z
    169a:	31 81       	ldd	r19, Z+1	; 0x01
    169c:	62 17       	cp	r22, r18
    169e:	73 07       	cpc	r23, r19
    16a0:	3c f4       	brge	.+14     	; 0x16b0 <LedControl::shutdown(int, bool)+0x22>
    16a2:	20 e0       	ldi	r18, 0x00	; 0
    16a4:	41 11       	cpse	r20, r1
    16a6:	01 c0       	rjmp	.+2      	; 0x16aa <LedControl::shutdown(int, bool)+0x1c>
    16a8:	21 e0       	ldi	r18, 0x01	; 1
    16aa:	4c e0       	ldi	r20, 0x0C	; 12
    16ac:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    16b0:	08 95       	ret

000016b2 <LedControl::setScanLimit(int, int)>:
_ZN10LedControl12setScanLimitEii():
    16b2:	77 fd       	sbrc	r23, 7
    16b4:	0f c0       	rjmp	.+30     	; 0x16d4 <LedControl::setScanLimit(int, int)+0x22>
    16b6:	fc 01       	movw	r30, r24
    16b8:	ea 5a       	subi	r30, 0xAA	; 170
    16ba:	ff 4f       	sbci	r31, 0xFF	; 255
    16bc:	20 81       	ld	r18, Z
    16be:	31 81       	ldd	r19, Z+1	; 0x01
    16c0:	62 17       	cp	r22, r18
    16c2:	73 07       	cpc	r23, r19
    16c4:	3c f4       	brge	.+14     	; 0x16d4 <LedControl::setScanLimit(int, int)+0x22>
    16c6:	48 30       	cpi	r20, 0x08	; 8
    16c8:	51 05       	cpc	r21, r1
    16ca:	20 f4       	brcc	.+8      	; 0x16d4 <LedControl::setScanLimit(int, int)+0x22>
    16cc:	24 2f       	mov	r18, r20
    16ce:	4b e0       	ldi	r20, 0x0B	; 11
    16d0:	0c 94 e6 0a 	jmp	0x15cc	; 0x15cc <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    16d4:	08 95       	ret

000016d6 <LedControl::clearDisplay(int)>:
_ZN10LedControl12clearDisplayEi():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:99

void LedControl::clearDisplay(int addr) {
    16d6:	df 92       	push	r13
    16d8:	ef 92       	push	r14
    16da:	ff 92       	push	r15
    16dc:	0f 93       	push	r16
    16de:	1f 93       	push	r17
    16e0:	cf 93       	push	r28
    16e2:	df 93       	push	r29
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:102
    int offset;

    if(addr<0 || addr>=maxDevices)
    16e4:	77 fd       	sbrc	r23, 7
    16e6:	23 c0       	rjmp	.+70     	; 0x172e <LedControl::clearDisplay(int)+0x58>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:102 (discriminator 1)
    16e8:	fc 01       	movw	r30, r24
    16ea:	ea 5a       	subi	r30, 0xAA	; 170
    16ec:	ff 4f       	sbci	r31, 0xFF	; 255
    16ee:	20 81       	ld	r18, Z
    16f0:	31 81       	ldd	r19, Z+1	; 0x01
    16f2:	62 17       	cp	r22, r18
    16f4:	73 07       	cpc	r23, r19
    16f6:	dc f4       	brge	.+54     	; 0x172e <LedControl::clearDisplay(int)+0x58>
    16f8:	eb 01       	movw	r28, r22
    16fa:	7c 01       	movw	r14, r24
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:104
        return;
    offset=addr*8;
    16fc:	8b 01       	movw	r16, r22
    16fe:	83 e0       	ldi	r24, 0x03	; 3
    1700:	00 0f       	add	r16, r16
    1702:	11 1f       	adc	r17, r17
    1704:	8a 95       	dec	r24
    1706:	e1 f7       	brne	.-8      	; 0x1700 <LedControl::clearDisplay(int)+0x2a>
    1708:	00 5f       	subi	r16, 0xF0	; 240
    170a:	1f 4f       	sbci	r17, 0xFF	; 255
    170c:	0e 0d       	add	r16, r14
    170e:	1f 1d       	adc	r17, r15
    1710:	dd 24       	eor	r13, r13
    1712:	d3 94       	inc	r13
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:106
    for(int i=0;i<8;i++) {
        status[offset+i]=0;
    1714:	f8 01       	movw	r30, r16
    1716:	11 92       	st	Z+, r1
    1718:	8f 01       	movw	r16, r30
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:107
        spiTransfer(addr, i+1,status[offset+i]);
    171a:	20 e0       	ldi	r18, 0x00	; 0
    171c:	4d 2d       	mov	r20, r13
    171e:	be 01       	movw	r22, r28
    1720:	c7 01       	movw	r24, r14
    1722:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <LedControl::spiTransfer(int, unsigned char, unsigned char)>
    1726:	d3 94       	inc	r13
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:105
    int offset;

    if(addr<0 || addr>=maxDevices)
        return;
    offset=addr*8;
    for(int i=0;i<8;i++) {
    1728:	f9 e0       	ldi	r31, 0x09	; 9
    172a:	df 12       	cpse	r13, r31
    172c:	f3 cf       	rjmp	.-26     	; 0x1714 <LedControl::clearDisplay(int)+0x3e>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:109
        status[offset+i]=0;
        spiTransfer(addr, i+1,status[offset+i]);
    }
}
    172e:	df 91       	pop	r29
    1730:	cf 91       	pop	r28
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	df 90       	pop	r13
    173c:	08 95       	ret

0000173e <LedControl::LedControl(int, int, int, int)>:
_ZN10LedControlC2Eiiii():
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:46
#define OP_INTENSITY   10
#define OP_SCANLIMIT   11
#define OP_SHUTDOWN    12
#define OP_DISPLAYTEST 15

LedControl::LedControl(int dataPin, int clkPin, int csPin, int numDevices) {
    173e:	6f 92       	push	r6
    1740:	7f 92       	push	r7
    1742:	8f 92       	push	r8
    1744:	9f 92       	push	r9
    1746:	af 92       	push	r10
    1748:	bf 92       	push	r11
    174a:	cf 92       	push	r12
    174c:	df 92       	push	r13
    174e:	ef 92       	push	r14
    1750:	ff 92       	push	r15
    1752:	0f 93       	push	r16
    1754:	1f 93       	push	r17
    1756:	cf 93       	push	r28
    1758:	df 93       	push	r29
    175a:	ec 01       	movw	r28, r24
    175c:	d6 2e       	mov	r13, r22
    175e:	c7 2e       	mov	r12, r23
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:47
    SPI_MOSI=dataPin;
    1760:	7c 01       	movw	r14, r24
    1762:	80 e5       	ldi	r24, 0x50	; 80
    1764:	e8 0e       	add	r14, r24
    1766:	f1 1c       	adc	r15, r1
    1768:	f7 01       	movw	r30, r14
    176a:	60 83       	st	Z, r22
    176c:	71 83       	std	Z+1, r23	; 0x01
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:48
    SPI_CLK=clkPin;
    176e:	3e 01       	movw	r6, r28
    1770:	f2 e5       	ldi	r31, 0x52	; 82
    1772:	6f 0e       	add	r6, r31
    1774:	71 1c       	adc	r7, r1
    1776:	f3 01       	movw	r30, r6
    1778:	51 83       	std	Z+1, r21	; 0x01
    177a:	40 83       	st	Z, r20
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:49
    SPI_CS=csPin;
    177c:	4e 01       	movw	r8, r28
    177e:	f4 e5       	ldi	r31, 0x54	; 84
    1780:	8f 0e       	add	r8, r31
    1782:	91 1c       	adc	r9, r1
    1784:	f4 01       	movw	r30, r8
    1786:	31 83       	std	Z+1, r19	; 0x01
    1788:	20 83       	st	Z, r18
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:50
    if(numDevices<=0 || numDevices>8 )
    178a:	c8 01       	movw	r24, r16
    178c:	01 97       	sbiw	r24, 0x01	; 1
    178e:	08 97       	sbiw	r24, 0x08	; 8
    1790:	10 f0       	brcs	.+4      	; 0x1796 <LedControl::LedControl(int, int, int, int)+0x58>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:51
        numDevices=8;
    1792:	08 e0       	ldi	r16, 0x08	; 8
    1794:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:52
    maxDevices=numDevices;
    1796:	5e 01       	movw	r10, r28
    1798:	f6 e5       	ldi	r31, 0x56	; 86
    179a:	af 0e       	add	r10, r31
    179c:	b1 1c       	adc	r11, r1
    179e:	f5 01       	movw	r30, r10
    17a0:	11 83       	std	Z+1, r17	; 0x01
    17a2:	00 83       	st	Z, r16
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:53
    pinMode(SPI_MOSI,OUTPUT);
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	8d 2d       	mov	r24, r13
    17a8:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:54
    pinMode(SPI_CLK,OUTPUT);
    17ac:	61 e0       	ldi	r22, 0x01	; 1
    17ae:	f3 01       	movw	r30, r6
    17b0:	80 81       	ld	r24, Z
    17b2:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:55
    pinMode(SPI_CS,OUTPUT);
    17b6:	61 e0       	ldi	r22, 0x01	; 1
    17b8:	f4 01       	movw	r30, r8
    17ba:	80 81       	ld	r24, Z
    17bc:	0e 94 53 12 	call	0x24a6	; 0x24a6 <pinMode>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:56
    digitalWrite(SPI_CS,HIGH);
    17c0:	61 e0       	ldi	r22, 0x01	; 1
    17c2:	f4 01       	movw	r30, r8
    17c4:	80 81       	ld	r24, Z
    17c6:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:57
    SPI_MOSI=dataPin;
    17ca:	f7 01       	movw	r30, r14
    17cc:	d0 82       	st	Z, r13
    17ce:	c1 82       	std	Z+1, r12	; 0x01
    17d0:	fe 01       	movw	r30, r28
    17d2:	70 96       	adiw	r30, 0x10	; 16
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:59 (discriminator 2)
    for(int i=0;i<64;i++) 
        status[i]=0x00;
    17d4:	11 92       	st	Z+, r1
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:58 (discriminator 2)
    pinMode(SPI_MOSI,OUTPUT);
    pinMode(SPI_CLK,OUTPUT);
    pinMode(SPI_CS,OUTPUT);
    digitalWrite(SPI_CS,HIGH);
    SPI_MOSI=dataPin;
    for(int i=0;i<64;i++) 
    17d6:	ee 15       	cp	r30, r14
    17d8:	ff 05       	cpc	r31, r15
    17da:	e1 f7       	brne	.-8      	; 0x17d4 <LedControl::LedControl(int, int, int, int)+0x96>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:60
        status[i]=0x00;
    for(int i=0;i<maxDevices;i++) {
    17dc:	10 e0       	ldi	r17, 0x00	; 0
    17de:	00 e0       	ldi	r16, 0x00	; 0
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:60 (discriminator 3)
    17e0:	f5 01       	movw	r30, r10
    17e2:	80 81       	ld	r24, Z
    17e4:	91 81       	ldd	r25, Z+1	; 0x01
    17e6:	08 17       	cp	r16, r24
    17e8:	19 07       	cpc	r17, r25
    17ea:	f4 f4       	brge	.+60     	; 0x1828 <LedControl::LedControl(int, int, int, int)+0xea>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:61 (discriminator 2)
        spiTransfer(i,OP_DISPLAYTEST,0);
    17ec:	20 e0       	ldi	r18, 0x00	; 0
    17ee:	4f e0       	ldi	r20, 0x0F	; 15
    17f0:	b8 01       	movw	r22, r16
    17f2:	ce 01       	movw	r24, r28
    17f4:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <LedControl::spiTransfer(int, unsigned char, unsigned char)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:63 (discriminator 2)
        //scanlimit is set to max on startup
        setScanLimit(i,7);
    17f8:	47 e0       	ldi	r20, 0x07	; 7
    17fa:	50 e0       	ldi	r21, 0x00	; 0
    17fc:	b8 01       	movw	r22, r16
    17fe:	ce 01       	movw	r24, r28
    1800:	0e 94 59 0b 	call	0x16b2	; 0x16b2 <LedControl::setScanLimit(int, int)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:65 (discriminator 2)
        //decode is done in source
        spiTransfer(i,OP_DECODEMODE,0);
    1804:	20 e0       	ldi	r18, 0x00	; 0
    1806:	49 e0       	ldi	r20, 0x09	; 9
    1808:	b8 01       	movw	r22, r16
    180a:	ce 01       	movw	r24, r28
    180c:	0e 94 e6 0a 	call	0x15cc	; 0x15cc <LedControl::spiTransfer(int, unsigned char, unsigned char)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:66 (discriminator 2)
        clearDisplay(i);
    1810:	b8 01       	movw	r22, r16
    1812:	ce 01       	movw	r24, r28
    1814:	0e 94 6b 0b 	call	0x16d6	; 0x16d6 <LedControl::clearDisplay(int)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:68 (discriminator 2)
        //we go into shutdown-mode on startup
        shutdown(i,true);
    1818:	41 e0       	ldi	r20, 0x01	; 1
    181a:	b8 01       	movw	r22, r16
    181c:	ce 01       	movw	r24, r28
    181e:	0e 94 47 0b 	call	0x168e	; 0x168e <LedControl::shutdown(int, bool)>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:60 (discriminator 2)
    pinMode(SPI_CS,OUTPUT);
    digitalWrite(SPI_CS,HIGH);
    SPI_MOSI=dataPin;
    for(int i=0;i<64;i++) 
        status[i]=0x00;
    for(int i=0;i<maxDevices;i++) {
    1822:	0f 5f       	subi	r16, 0xFF	; 255
    1824:	1f 4f       	sbci	r17, 0xFF	; 255
    1826:	dc cf       	rjmp	.-72     	; 0x17e0 <LedControl::LedControl(int, int, int, int)+0xa2>
C:\Users\habeeba\Documents\Arduino\libraries\LedControl\src/LedControl.cpp:70
        spiTransfer(i,OP_DECODEMODE,0);
        clearDisplay(i);
        //we go into shutdown-mode on startup
        shutdown(i,true);
    }
}
    1828:	df 91       	pop	r29
    182a:	cf 91       	pop	r28
    182c:	1f 91       	pop	r17
    182e:	0f 91       	pop	r16
    1830:	ff 90       	pop	r15
    1832:	ef 90       	pop	r14
    1834:	df 90       	pop	r13
    1836:	cf 90       	pop	r12
    1838:	bf 90       	pop	r11
    183a:	af 90       	pop	r10
    183c:	9f 90       	pop	r9
    183e:	8f 90       	pop	r8
    1840:	7f 90       	pop	r7
    1842:	6f 90       	pop	r6
    1844:	08 95       	ret

00001846 <ADS1X15::isConnected()>:
_ZN7ADS1X1511isConnectedEv():
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:570
  _wire = wire;
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_1;
  _conversionDelay = ADS1115_CONVERSION_DELAY;
  _bitShift = 0;
  _maxPorts = 1;
}
    1846:	cf 93       	push	r28
    1848:	df 93       	push	r29
    184a:	ec 01       	movw	r28, r24
    184c:	6a 81       	ldd	r22, Y+2	; 0x02
    184e:	88 89       	ldd	r24, Y+16	; 0x10
    1850:	99 89       	ldd	r25, Y+17	; 0x11
    1852:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <TwoWire::beginTransmission(unsigned char)>
    1856:	88 89       	ldd	r24, Y+16	; 0x10
    1858:	99 89       	ldd	r25, Y+17	; 0x11
    185a:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <TwoWire::endTransmission()>
    185e:	91 e0       	ldi	r25, 0x01	; 1
    1860:	81 11       	cpse	r24, r1
    1862:	90 e0       	ldi	r25, 0x00	; 0
    1864:	89 2f       	mov	r24, r25
    1866:	df 91       	pop	r29
    1868:	cf 91       	pop	r28
    186a:	08 95       	ret

0000186c <ADS1X15::begin()>:
_ZN7ADS1X155beginEv():
    186c:	cf 93       	push	r28
    186e:	df 93       	push	r29
    1870:	ec 01       	movw	r28, r24
    1872:	88 89       	ldd	r24, Y+16	; 0x10
    1874:	99 89       	ldd	r25, Y+17	; 0x11
    1876:	0e 94 6a 0e 	call	0x1cd4	; 0x1cd4 <TwoWire::begin()>
    187a:	8a 81       	ldd	r24, Y+2	; 0x02
    187c:	88 54       	subi	r24, 0x48	; 72
    187e:	84 30       	cpi	r24, 0x04	; 4
    1880:	28 f4       	brcc	.+10     	; 0x188c <ADS1X15::begin()+0x20>
    1882:	ce 01       	movw	r24, r28
    1884:	df 91       	pop	r29
    1886:	cf 91       	pop	r28
    1888:	0c 94 23 0c 	jmp	0x1846	; 0x1846 <ADS1X15::isConnected()>
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	df 91       	pop	r29
    1890:	cf 91       	pop	r28
    1892:	08 95       	ret

00001894 <ADS1X15::setGain(unsigned char)>:
_ZN7ADS1X157setGainEh():
    1894:	fc 01       	movw	r30, r24
    1896:	80 81       	ld	r24, Z
    1898:	84 ff       	sbrs	r24, 4
    189a:	09 c0       	rjmp	.+18     	; 0x18ae <ADS1X15::setGain(unsigned char)+0x1a>
    189c:	64 30       	cpi	r22, 0x04	; 4
    189e:	b1 f0       	breq	.+44     	; 0x18cc <ADS1X15::setGain(unsigned char)+0x38>
    18a0:	48 f4       	brcc	.+18     	; 0x18b4 <ADS1X15::setGain(unsigned char)+0x20>
    18a2:	61 30       	cpi	r22, 0x01	; 1
    18a4:	81 f0       	breq	.+32     	; 0x18c6 <ADS1X15::setGain(unsigned char)+0x32>
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	94 e0       	ldi	r25, 0x04	; 4
    18aa:	62 30       	cpi	r22, 0x02	; 2
    18ac:	49 f0       	breq	.+18     	; 0x18c0 <ADS1X15::setGain(unsigned char)+0x2c>
    18ae:	16 82       	std	Z+6, r1	; 0x06
    18b0:	15 82       	std	Z+5, r1	; 0x05
    18b2:	08 95       	ret
    18b4:	68 30       	cpi	r22, 0x08	; 8
    18b6:	69 f0       	breq	.+26     	; 0x18d2 <ADS1X15::setGain(unsigned char)+0x3e>
    18b8:	80 e0       	ldi	r24, 0x00	; 0
    18ba:	9a e0       	ldi	r25, 0x0A	; 10
    18bc:	60 31       	cpi	r22, 0x10	; 16
    18be:	b9 f7       	brne	.-18     	; 0x18ae <ADS1X15::setGain(unsigned char)+0x1a>
    18c0:	96 83       	std	Z+6, r25	; 0x06
    18c2:	85 83       	std	Z+5, r24	; 0x05
    18c4:	08 95       	ret
    18c6:	80 e0       	ldi	r24, 0x00	; 0
    18c8:	92 e0       	ldi	r25, 0x02	; 2
    18ca:	fa cf       	rjmp	.-12     	; 0x18c0 <ADS1X15::setGain(unsigned char)+0x2c>
    18cc:	80 e0       	ldi	r24, 0x00	; 0
    18ce:	96 e0       	ldi	r25, 0x06	; 6
    18d0:	f7 cf       	rjmp	.-18     	; 0x18c0 <ADS1X15::setGain(unsigned char)+0x2c>
    18d2:	80 e0       	ldi	r24, 0x00	; 0
    18d4:	98 e0       	ldi	r25, 0x08	; 8
    18d6:	f4 cf       	rjmp	.-24     	; 0x18c0 <ADS1X15::setGain(unsigned char)+0x2c>

000018d8 <ADS1X15::reset()>:
_ZN7ADS1X155resetEv():
    18d8:	cf 93       	push	r28
    18da:	df 93       	push	r29
    18dc:	ec 01       	movw	r28, r24
    18de:	60 e0       	ldi	r22, 0x00	; 0
    18e0:	0e 94 4a 0c 	call	0x1894	; 0x1894 <ADS1X15::setGain(unsigned char)>
_ZN7ADS1X157setModeEh():
    18e4:	80 e0       	ldi	r24, 0x00	; 0
    18e6:	91 e0       	ldi	r25, 0x01	; 1
    18e8:	98 87       	std	Y+8, r25	; 0x08
    18ea:	8f 83       	std	Y+7, r24	; 0x07
_ZN7ADS1X1511setDataRateEh():
    18ec:	80 e8       	ldi	r24, 0x80	; 128
    18ee:	90 e0       	ldi	r25, 0x00	; 0
    18f0:	9a 87       	std	Y+10, r25	; 0x0a
    18f2:	89 87       	std	Y+9, r24	; 0x09
_ZN7ADS1X155resetEv():
    18f4:	1b 86       	std	Y+11, r1	; 0x0b
    18f6:	81 e0       	ldi	r24, 0x01	; 1
    18f8:	8c 87       	std	Y+12, r24	; 0x0c
    18fa:	1d 86       	std	Y+13, r1	; 0x0d
    18fc:	83 e0       	ldi	r24, 0x03	; 3
    18fe:	8e 87       	std	Y+14, r24	; 0x0e
    1900:	df 91       	pop	r29
    1902:	cf 91       	pop	r28
    1904:	08 95       	ret

00001906 <ADS1X15::ADS1X15()>:
_ZN7ADS1X15C2Ev():
    1906:	fc 01       	movw	r30, r24
    1908:	17 86       	std	Z+15, r1	; 0x0f
    190a:	12 8a       	std	Z+18, r1	; 0x12
    190c:	13 8a       	std	Z+19, r1	; 0x13
    190e:	14 8a       	std	Z+20, r1	; 0x14
    1910:	15 8a       	std	Z+21, r1	; 0x15
    1912:	0c 94 6c 0c 	jmp	0x18d8	; 0x18d8 <ADS1X15::reset()>

00001916 <ADS1X15::setMode(unsigned char)>:
_ZN7ADS1X157setModeEh():
    1916:	61 11       	cpse	r22, r1
    1918:	04 c0       	rjmp	.+8      	; 0x1922 <ADS1X15::setMode(unsigned char)+0xc>
    191a:	fc 01       	movw	r30, r24
    191c:	10 86       	std	Z+8, r1	; 0x08
    191e:	17 82       	std	Z+7, r1	; 0x07
    1920:	08 95       	ret
    1922:	20 e0       	ldi	r18, 0x00	; 0
    1924:	31 e0       	ldi	r19, 0x01	; 1
    1926:	fc 01       	movw	r30, r24
    1928:	30 87       	std	Z+8, r19	; 0x08
    192a:	27 83       	std	Z+7, r18	; 0x07
    192c:	08 95       	ret

0000192e <ADS1X15::setDataRate(unsigned char)>:
_ZN7ADS1X1511setDataRateEh():
    192e:	fc 01       	movw	r30, r24
    1930:	70 e0       	ldi	r23, 0x00	; 0
    1932:	68 30       	cpi	r22, 0x08	; 8
    1934:	71 05       	cpc	r23, r1
    1936:	60 f4       	brcc	.+24     	; 0x1950 <ADS1X15::setDataRate(unsigned char)+0x22>
    1938:	72 87       	std	Z+10, r23	; 0x0a
    193a:	61 87       	std	Z+9, r22	; 0x09
    193c:	81 85       	ldd	r24, Z+9	; 0x09
    193e:	92 85       	ldd	r25, Z+10	; 0x0a
    1940:	25 e0       	ldi	r18, 0x05	; 5
    1942:	88 0f       	add	r24, r24
    1944:	99 1f       	adc	r25, r25
    1946:	2a 95       	dec	r18
    1948:	e1 f7       	brne	.-8      	; 0x1942 <ADS1X15::setDataRate(unsigned char)+0x14>
    194a:	92 87       	std	Z+10, r25	; 0x0a
    194c:	81 87       	std	Z+9, r24	; 0x09
    194e:	08 95       	ret
    1950:	84 e0       	ldi	r24, 0x04	; 4
    1952:	90 e0       	ldi	r25, 0x00	; 0
    1954:	92 87       	std	Z+10, r25	; 0x0a
    1956:	81 87       	std	Z+9, r24	; 0x09
    1958:	f1 cf       	rjmp	.-30     	; 0x193c <ADS1X15::setDataRate(unsigned char)+0xe>

0000195a <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>:
_ZN7ADS1X1514_writeRegisterEhhj():
    195a:	ff 92       	push	r15
    195c:	0f 93       	push	r16
    195e:	1f 93       	push	r17
    1960:	cf 93       	push	r28
    1962:	df 93       	push	r29
    1964:	ec 01       	movw	r28, r24
    1966:	f4 2e       	mov	r15, r20
    1968:	12 2f       	mov	r17, r18
    196a:	03 2f       	mov	r16, r19
    196c:	88 89       	ldd	r24, Y+16	; 0x10
    196e:	99 89       	ldd	r25, Y+17	; 0x11
    1970:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <TwoWire::beginTransmission(unsigned char)>
    1974:	88 89       	ldd	r24, Y+16	; 0x10
    1976:	99 89       	ldd	r25, Y+17	; 0x11
    1978:	dc 01       	movw	r26, r24
    197a:	ed 91       	ld	r30, X+
    197c:	fc 91       	ld	r31, X
    197e:	01 90       	ld	r0, Z+
    1980:	f0 81       	ld	r31, Z
    1982:	e0 2d       	mov	r30, r0
    1984:	6f 2d       	mov	r22, r15
    1986:	09 95       	icall
    1988:	88 89       	ldd	r24, Y+16	; 0x10
    198a:	99 89       	ldd	r25, Y+17	; 0x11
    198c:	dc 01       	movw	r26, r24
    198e:	ed 91       	ld	r30, X+
    1990:	fc 91       	ld	r31, X
    1992:	01 90       	ld	r0, Z+
    1994:	f0 81       	ld	r31, Z
    1996:	e0 2d       	mov	r30, r0
    1998:	60 2f       	mov	r22, r16
    199a:	09 95       	icall
    199c:	88 89       	ldd	r24, Y+16	; 0x10
    199e:	99 89       	ldd	r25, Y+17	; 0x11
    19a0:	dc 01       	movw	r26, r24
    19a2:	ed 91       	ld	r30, X+
    19a4:	fc 91       	ld	r31, X
    19a6:	01 90       	ld	r0, Z+
    19a8:	f0 81       	ld	r31, Z
    19aa:	e0 2d       	mov	r30, r0
    19ac:	61 2f       	mov	r22, r17
    19ae:	09 95       	icall
    19b0:	88 89       	ldd	r24, Y+16	; 0x10
    19b2:	99 89       	ldd	r25, Y+17	; 0x11
    19b4:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <TwoWire::endTransmission()>
    19b8:	91 e0       	ldi	r25, 0x01	; 1
    19ba:	81 11       	cpse	r24, r1
    19bc:	90 e0       	ldi	r25, 0x00	; 0
    19be:	89 2f       	mov	r24, r25
    19c0:	df 91       	pop	r29
    19c2:	cf 91       	pop	r28
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	ff 90       	pop	r15
    19ca:	08 95       	ret

000019cc <ADS1X15::_requestADC(unsigned int)>:
_ZN7ADS1X1511_requestADCEj():
    19cc:	fc 01       	movw	r30, r24
    19ce:	25 81       	ldd	r18, Z+5	; 0x05
    19d0:	36 81       	ldd	r19, Z+6	; 0x06
    19d2:	87 81       	ldd	r24, Z+7	; 0x07
    19d4:	90 85       	ldd	r25, Z+8	; 0x08
    19d6:	28 2b       	or	r18, r24
    19d8:	39 2b       	or	r19, r25
    19da:	30 68       	ori	r19, 0x80	; 128
    19dc:	81 85       	ldd	r24, Z+9	; 0x09
    19de:	92 85       	ldd	r25, Z+10	; 0x0a
    19e0:	28 2b       	or	r18, r24
    19e2:	39 2b       	or	r19, r25
    19e4:	26 2b       	or	r18, r22
    19e6:	37 2b       	or	r19, r23
    19e8:	83 85       	ldd	r24, Z+11	; 0x0b
    19ea:	81 11       	cpse	r24, r1
    19ec:	20 61       	ori	r18, 0x10	; 16
    19ee:	84 85       	ldd	r24, Z+12	; 0x0c
    19f0:	81 11       	cpse	r24, r1
    19f2:	28 60       	ori	r18, 0x08	; 8
    19f4:	85 85       	ldd	r24, Z+13	; 0x0d
    19f6:	81 11       	cpse	r24, r1
    19f8:	24 60       	ori	r18, 0x04	; 4
    19fa:	86 85       	ldd	r24, Z+14	; 0x0e
    19fc:	28 2b       	or	r18, r24
    19fe:	41 e0       	ldi	r20, 0x01	; 1
    1a00:	62 81       	ldd	r22, Z+2	; 0x02
    1a02:	cf 01       	movw	r24, r30
    1a04:	0c 94 ad 0c 	jmp	0x195a	; 0x195a <ADS1X15::_writeRegister(unsigned char, unsigned char, unsigned int)>

00001a08 <ADS1X15::_readRegister(unsigned char, unsigned char)>:
_ZN7ADS1X1513_readRegisterEhh():
    1a08:	0f 93       	push	r16
    1a0a:	1f 93       	push	r17
    1a0c:	cf 93       	push	r28
    1a0e:	df 93       	push	r29
    1a10:	8c 01       	movw	r16, r24
    1a12:	c6 2f       	mov	r28, r22
    1a14:	d4 2f       	mov	r29, r20
    1a16:	dc 01       	movw	r26, r24
    1a18:	50 96       	adiw	r26, 0x10	; 16
    1a1a:	8d 91       	ld	r24, X+
    1a1c:	9c 91       	ld	r25, X
    1a1e:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <TwoWire::beginTransmission(unsigned char)>
    1a22:	f8 01       	movw	r30, r16
    1a24:	80 89       	ldd	r24, Z+16	; 0x10
    1a26:	91 89       	ldd	r25, Z+17	; 0x11
    1a28:	dc 01       	movw	r26, r24
    1a2a:	ed 91       	ld	r30, X+
    1a2c:	fc 91       	ld	r31, X
    1a2e:	01 90       	ld	r0, Z+
    1a30:	f0 81       	ld	r31, Z
    1a32:	e0 2d       	mov	r30, r0
    1a34:	6d 2f       	mov	r22, r29
    1a36:	09 95       	icall
    1a38:	f8 01       	movw	r30, r16
    1a3a:	80 89       	ldd	r24, Z+16	; 0x10
    1a3c:	91 89       	ldd	r25, Z+17	; 0x11
    1a3e:	0e 94 ff 0e 	call	0x1dfe	; 0x1dfe <TwoWire::endTransmission()>
    1a42:	42 e0       	ldi	r20, 0x02	; 2
    1a44:	6c 2f       	mov	r22, r28
    1a46:	d8 01       	movw	r26, r16
    1a48:	50 96       	adiw	r26, 0x10	; 16
    1a4a:	8d 91       	ld	r24, X+
    1a4c:	9c 91       	ld	r25, X
    1a4e:	0e 94 fc 0e 	call	0x1df8	; 0x1df8 <TwoWire::requestFrom(unsigned char, unsigned char)>
    1a52:	82 30       	cpi	r24, 0x02	; 2
    1a54:	f1 f4       	brne	.+60     	; 0x1a92 <ADS1X15::_readRegister(unsigned char, unsigned char)+0x8a>
    1a56:	f8 01       	movw	r30, r16
    1a58:	80 89       	ldd	r24, Z+16	; 0x10
    1a5a:	91 89       	ldd	r25, Z+17	; 0x11
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	ed 91       	ld	r30, X+
    1a60:	fc 91       	ld	r31, X
    1a62:	02 84       	ldd	r0, Z+10	; 0x0a
    1a64:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a66:	e0 2d       	mov	r30, r0
    1a68:	09 95       	icall
    1a6a:	d8 2f       	mov	r29, r24
    1a6c:	b0 e0       	ldi	r27, 0x00	; 0
    1a6e:	cb 2f       	mov	r28, r27
    1a70:	f8 01       	movw	r30, r16
    1a72:	80 89       	ldd	r24, Z+16	; 0x10
    1a74:	91 89       	ldd	r25, Z+17	; 0x11
    1a76:	dc 01       	movw	r26, r24
    1a78:	ed 91       	ld	r30, X+
    1a7a:	fc 91       	ld	r31, X
    1a7c:	02 84       	ldd	r0, Z+10	; 0x0a
    1a7e:	f3 85       	ldd	r31, Z+11	; 0x0b
    1a80:	e0 2d       	mov	r30, r0
    1a82:	09 95       	icall
    1a84:	8c 0f       	add	r24, r28
    1a86:	9d 1f       	adc	r25, r29
    1a88:	df 91       	pop	r29
    1a8a:	cf 91       	pop	r28
    1a8c:	1f 91       	pop	r17
    1a8e:	0f 91       	pop	r16
    1a90:	08 95       	ret
    1a92:	90 e0       	ldi	r25, 0x00	; 0
    1a94:	80 e0       	ldi	r24, 0x00	; 0
    1a96:	f8 cf       	rjmp	.-16     	; 0x1a88 <ADS1X15::_readRegister(unsigned char, unsigned char)+0x80>

00001a98 <ADS1X15::isBusy()>:
_ZN7ADS1X156isBusyEv():
    1a98:	41 e0       	ldi	r20, 0x01	; 1
    1a9a:	fc 01       	movw	r30, r24
    1a9c:	62 81       	ldd	r22, Z+2	; 0x02
    1a9e:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <ADS1X15::_readRegister(unsigned char, unsigned char)>
    1aa2:	89 2f       	mov	r24, r25
    1aa4:	80 95       	com	r24
    1aa6:	88 1f       	adc	r24, r24
    1aa8:	88 27       	eor	r24, r24
    1aaa:	88 1f       	adc	r24, r24
    1aac:	08 95       	ret

00001aae <ADS1X15::getValue()>:
_ZN7ADS1X158getValueEv():
    1aae:	cf 93       	push	r28
    1ab0:	df 93       	push	r29
    1ab2:	ec 01       	movw	r28, r24
    1ab4:	40 e0       	ldi	r20, 0x00	; 0
    1ab6:	6a 81       	ldd	r22, Y+2	; 0x02
    1ab8:	0e 94 04 0d 	call	0x1a08	; 0x1a08 <ADS1X15::_readRegister(unsigned char, unsigned char)>
    1abc:	2c 81       	ldd	r18, Y+4	; 0x04
    1abe:	22 23       	and	r18, r18
    1ac0:	29 f0       	breq	.+10     	; 0x1acc <ADS1X15::getValue()+0x1e>
    1ac2:	02 c0       	rjmp	.+4      	; 0x1ac8 <ADS1X15::getValue()+0x1a>
    1ac4:	95 95       	asr	r25
    1ac6:	87 95       	ror	r24
    1ac8:	2a 95       	dec	r18
    1aca:	e2 f7       	brpl	.-8      	; 0x1ac4 <ADS1X15::getValue()+0x16>
    1acc:	df 91       	pop	r29
    1ace:	cf 91       	pop	r28
    1ad0:	08 95       	ret

00001ad2 <ADS1X15::_readADC(unsigned int)>:
_ZN7ADS1X158_readADCEj():
    1ad2:	cf 93       	push	r28
    1ad4:	df 93       	push	r29
    1ad6:	ec 01       	movw	r28, r24
    1ad8:	0e 94 e6 0c 	call	0x19cc	; 0x19cc <ADS1X15::_requestADC(unsigned int)>
    1adc:	8f 81       	ldd	r24, Y+7	; 0x07
    1ade:	98 85       	ldd	r25, Y+8	; 0x08
    1ae0:	81 15       	cp	r24, r1
    1ae2:	91 40       	sbci	r25, 0x01	; 1
    1ae4:	41 f4       	brne	.+16     	; 0x1af6 <ADS1X15::_readADC(unsigned int)+0x24>
    1ae6:	ce 01       	movw	r24, r28
    1ae8:	0e 94 4c 0d 	call	0x1a98	; 0x1a98 <ADS1X15::isBusy()>
    1aec:	88 23       	and	r24, r24
    1aee:	49 f0       	breq	.+18     	; 0x1b02 <ADS1X15::_readADC(unsigned int)+0x30>
    1af0:	0e 94 35 11 	call	0x226a	; 0x226a <yield>
    1af4:	f8 cf       	rjmp	.-16     	; 0x1ae6 <ADS1X15::_readADC(unsigned int)+0x14>
    1af6:	6b 81       	ldd	r22, Y+3	; 0x03
    1af8:	70 e0       	ldi	r23, 0x00	; 0
    1afa:	90 e0       	ldi	r25, 0x00	; 0
    1afc:	80 e0       	ldi	r24, 0x00	; 0
    1afe:	0e 94 a5 11 	call	0x234a	; 0x234a <delay>
    1b02:	ce 01       	movw	r24, r28
    1b04:	df 91       	pop	r29
    1b06:	cf 91       	pop	r28
    1b08:	0c 94 57 0d 	jmp	0x1aae	; 0x1aae <ADS1X15::getValue()>

00001b0c <ADS1X15::readADC(unsigned char)>:
_ZN7ADS1X157readADCEh():
    1b0c:	fc 01       	movw	r30, r24
    1b0e:	21 81       	ldd	r18, Z+1	; 0x01
    1b10:	62 17       	cp	r22, r18
    1b12:	38 f4       	brcc	.+14     	; 0x1b22 <ADS1X15::readADC(unsigned char)+0x16>
    1b14:	62 95       	swap	r22
    1b16:	60 7f       	andi	r22, 0xF0	; 240
    1b18:	70 e4       	ldi	r23, 0x40	; 64
    1b1a:	76 0f       	add	r23, r22
    1b1c:	60 e0       	ldi	r22, 0x00	; 0
    1b1e:	0c 94 69 0d 	jmp	0x1ad2	; 0x1ad2 <ADS1X15::_readADC(unsigned int)>
    1b22:	90 e0       	ldi	r25, 0x00	; 0
    1b24:	80 e0       	ldi	r24, 0x00	; 0
    1b26:	08 95       	ret

00001b28 <ADS1115::ADS1115(unsigned char, TwoWire*)>:
_ZN7ADS1115C2EhP7TwoWire():
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:577

///////////////////////////////////////////////////////////////////////////
//
// ADS1115
//
ADS1115::ADS1115(uint8_t address, TwoWire *wire)
    1b28:	ff 92       	push	r15
    1b2a:	0f 93       	push	r16
    1b2c:	1f 93       	push	r17
    1b2e:	cf 93       	push	r28
    1b30:	df 93       	push	r29
    1b32:	ec 01       	movw	r28, r24
    1b34:	f6 2e       	mov	r15, r22
    1b36:	8a 01       	movw	r16, r20
    1b38:	0e 94 83 0c 	call	0x1906	; 0x1906 <ADS1X15::ADS1X15()>
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:579
{
  _address = address;
    1b3c:	fa 82       	std	Y+2, r15	; 0x02
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:580
  _wire = wire;
    1b3e:	19 8b       	std	Y+17, r17	; 0x11
    1b40:	08 8b       	std	Y+16, r16	; 0x10
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:581
  _config = ADS_CONF_COMP | ADS_CONF_GAIN | ADS_CONF_RES_16 | ADS_CONF_CHAN_4;
    1b42:	85 e3       	ldi	r24, 0x35	; 53
    1b44:	88 83       	st	Y, r24
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:582
  _conversionDelay = ADS1115_CONVERSION_DELAY;
    1b46:	88 e0       	ldi	r24, 0x08	; 8
    1b48:	8b 83       	std	Y+3, r24	; 0x03
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:583
  _bitShift = 0;
    1b4a:	1c 82       	std	Y+4, r1	; 0x04
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:584
  _maxPorts = 4;
    1b4c:	84 e0       	ldi	r24, 0x04	; 4
    1b4e:	89 83       	std	Y+1, r24	; 0x01
C:\Users\habeeba\Documents\Arduino\libraries\ADS1X15/ADS1X15.cpp:585
}
    1b50:	df 91       	pop	r29
    1b52:	cf 91       	pop	r28
    1b54:	1f 91       	pop	r17
    1b56:	0f 91       	pop	r16
    1b58:	ff 90       	pop	r15
    1b5a:	08 95       	ret

00001b5c <TwoWire::available()>:
_ZN7TwoWire9availableEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:329

// sets function called on slave read
void TwoWire::onRequest( void (*function)(void) )
{
  user_onRequest = function;
}
    1b5c:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <TwoWire::rxBufferLength>
    1b60:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <TwoWire::rxBufferIndex>
    1b64:	89 1b       	sub	r24, r25
    1b66:	99 0b       	sbc	r25, r25
    1b68:	08 95       	ret

00001b6a <TwoWire::read()>:
_ZN7TwoWire4readEv():
    1b6a:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <TwoWire::rxBufferIndex>
    1b6e:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <TwoWire::rxBufferLength>
    1b72:	2f ef       	ldi	r18, 0xFF	; 255
    1b74:	3f ef       	ldi	r19, 0xFF	; 255
    1b76:	98 17       	cp	r25, r24
    1b78:	48 f4       	brcc	.+18     	; 0x1b8c <TwoWire::read()+0x22>
    1b7a:	e9 2f       	mov	r30, r25
    1b7c:	f0 e0       	ldi	r31, 0x00	; 0
    1b7e:	e9 5e       	subi	r30, 0xE9	; 233
    1b80:	fa 4f       	sbci	r31, 0xFA	; 250
    1b82:	20 81       	ld	r18, Z
    1b84:	30 e0       	ldi	r19, 0x00	; 0
    1b86:	9f 5f       	subi	r25, 0xFF	; 255
    1b88:	90 93 16 05 	sts	0x0516, r25	; 0x800516 <TwoWire::rxBufferIndex>
    1b8c:	c9 01       	movw	r24, r18
    1b8e:	08 95       	ret

00001b90 <TwoWire::peek()>:
_ZN7TwoWire4peekEv():
    1b90:	e0 91 16 05 	lds	r30, 0x0516	; 0x800516 <TwoWire::rxBufferIndex>
    1b94:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <TwoWire::rxBufferLength>
    1b98:	e8 17       	cp	r30, r24
    1b9a:	30 f4       	brcc	.+12     	; 0x1ba8 <TwoWire::peek()+0x18>
    1b9c:	f0 e0       	ldi	r31, 0x00	; 0
    1b9e:	e9 5e       	subi	r30, 0xE9	; 233
    1ba0:	fa 4f       	sbci	r31, 0xFA	; 250
    1ba2:	80 81       	ld	r24, Z
    1ba4:	90 e0       	ldi	r25, 0x00	; 0
    1ba6:	08 95       	ret
    1ba8:	8f ef       	ldi	r24, 0xFF	; 255
    1baa:	9f ef       	ldi	r25, 0xFF	; 255
    1bac:	08 95       	ret

00001bae <TwoWire::flush()>:
_ZN7TwoWire5flushEv():
    1bae:	08 95       	ret

00001bb0 <TwoWire::onReceiveService(unsigned char*, int)>:
_ZN7TwoWire16onReceiveServiceEPhi():
    1bb0:	cf 93       	push	r28
    1bb2:	df 93       	push	r29
    1bb4:	ec 01       	movw	r28, r24
    1bb6:	e0 91 ed 04 	lds	r30, 0x04ED	; 0x8004ed <TwoWire::user_onReceive>
    1bba:	f0 91 ee 04 	lds	r31, 0x04EE	; 0x8004ee <TwoWire::user_onReceive+0x1>
    1bbe:	30 97       	sbiw	r30, 0x00	; 0
    1bc0:	f1 f0       	breq	.+60     	; 0x1bfe <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    1bc2:	90 91 16 05 	lds	r25, 0x0516	; 0x800516 <TwoWire::rxBufferIndex>
    1bc6:	80 91 15 05 	lds	r24, 0x0515	; 0x800515 <TwoWire::rxBufferLength>
    1bca:	98 17       	cp	r25, r24
    1bcc:	c0 f0       	brcs	.+48     	; 0x1bfe <TwoWire::onReceiveService(unsigned char*, int)+0x4e>
    1bce:	90 e0       	ldi	r25, 0x00	; 0
    1bd0:	29 2f       	mov	r18, r25
    1bd2:	30 e0       	ldi	r19, 0x00	; 0
    1bd4:	26 17       	cp	r18, r22
    1bd6:	37 07       	cpc	r19, r23
    1bd8:	54 f4       	brge	.+20     	; 0x1bee <TwoWire::onReceiveService(unsigned char*, int)+0x3e>
    1bda:	de 01       	movw	r26, r28
    1bdc:	a2 0f       	add	r26, r18
    1bde:	b3 1f       	adc	r27, r19
    1be0:	4c 91       	ld	r20, X
    1be2:	29 5e       	subi	r18, 0xE9	; 233
    1be4:	3a 4f       	sbci	r19, 0xFA	; 250
    1be6:	d9 01       	movw	r26, r18
    1be8:	4c 93       	st	X, r20
    1bea:	9f 5f       	subi	r25, 0xFF	; 255
    1bec:	f1 cf       	rjmp	.-30     	; 0x1bd0 <TwoWire::onReceiveService(unsigned char*, int)+0x20>
    1bee:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <TwoWire::rxBufferIndex>
    1bf2:	60 93 15 05 	sts	0x0515, r22	; 0x800515 <TwoWire::rxBufferLength>
    1bf6:	cb 01       	movw	r24, r22
    1bf8:	df 91       	pop	r29
    1bfa:	cf 91       	pop	r28
    1bfc:	09 94       	ijmp
    1bfe:	df 91       	pop	r29
    1c00:	cf 91       	pop	r28
    1c02:	08 95       	ret

00001c04 <TwoWire::onRequestService()>:
_ZN7TwoWire16onRequestServiceEv():
    1c04:	e0 91 ef 04 	lds	r30, 0x04EF	; 0x8004ef <TwoWire::user_onRequest>
    1c08:	f0 91 f0 04 	lds	r31, 0x04F0	; 0x8004f0 <TwoWire::user_onRequest+0x1>
    1c0c:	30 97       	sbiw	r30, 0x00	; 0
    1c0e:	29 f0       	breq	.+10     	; 0x1c1a <TwoWire::onRequestService()+0x16>
    1c10:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <TwoWire::txBufferIndex>
    1c14:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <TwoWire::txBufferLength>
    1c18:	09 94       	ijmp
    1c1a:	08 95       	ret

00001c1c <TwoWire::write(unsigned char)>:
_ZN7TwoWire5writeEh():
    1c1c:	cf 93       	push	r28
    1c1e:	df 93       	push	r29
    1c20:	1f 92       	push	r1
    1c22:	cd b7       	in	r28, 0x3d	; 61
    1c24:	de b7       	in	r29, 0x3e	; 62
    1c26:	69 83       	std	Y+1, r22	; 0x01
    1c28:	20 91 f1 04 	lds	r18, 0x04F1	; 0x8004f1 <TwoWire::transmitting>
    1c2c:	22 23       	and	r18, r18
    1c2e:	f9 f0       	breq	.+62     	; 0x1c6e <TwoWire::write(unsigned char)+0x52>
    1c30:	20 91 f2 04 	lds	r18, 0x04F2	; 0x8004f2 <TwoWire::txBufferLength>
    1c34:	20 32       	cpi	r18, 0x20	; 32
    1c36:	58 f0       	brcs	.+22     	; 0x1c4e <TwoWire::write(unsigned char)+0x32>
_ZN5Print13setWriteErrorEi():
    1c38:	21 e0       	ldi	r18, 0x01	; 1
    1c3a:	30 e0       	ldi	r19, 0x00	; 0
    1c3c:	fc 01       	movw	r30, r24
    1c3e:	33 83       	std	Z+3, r19	; 0x03
    1c40:	22 83       	std	Z+2, r18	; 0x02
_ZN7TwoWire5writeEh():
    1c42:	90 e0       	ldi	r25, 0x00	; 0
    1c44:	80 e0       	ldi	r24, 0x00	; 0
    1c46:	0f 90       	pop	r0
    1c48:	df 91       	pop	r29
    1c4a:	cf 91       	pop	r28
    1c4c:	08 95       	ret
    1c4e:	80 91 f3 04 	lds	r24, 0x04F3	; 0x8004f3 <TwoWire::txBufferIndex>
    1c52:	e8 2f       	mov	r30, r24
    1c54:	f0 e0       	ldi	r31, 0x00	; 0
    1c56:	ec 50       	subi	r30, 0x0C	; 12
    1c58:	fb 4f       	sbci	r31, 0xFB	; 251
    1c5a:	99 81       	ldd	r25, Y+1	; 0x01
    1c5c:	90 83       	st	Z, r25
    1c5e:	8f 5f       	subi	r24, 0xFF	; 255
    1c60:	80 93 f3 04 	sts	0x04F3, r24	; 0x8004f3 <TwoWire::txBufferIndex>
    1c64:	80 93 f2 04 	sts	0x04F2, r24	; 0x8004f2 <TwoWire::txBufferLength>
    1c68:	81 e0       	ldi	r24, 0x01	; 1
    1c6a:	90 e0       	ldi	r25, 0x00	; 0
    1c6c:	ec cf       	rjmp	.-40     	; 0x1c46 <TwoWire::write(unsigned char)+0x2a>
    1c6e:	61 e0       	ldi	r22, 0x01	; 1
    1c70:	ce 01       	movw	r24, r28
    1c72:	01 96       	adiw	r24, 0x01	; 1
    1c74:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <twi_transmit>
    1c78:	f7 cf       	rjmp	.-18     	; 0x1c68 <TwoWire::write(unsigned char)+0x4c>

00001c7a <TwoWire::write(unsigned char const*, unsigned int)>:
_ZN7TwoWire5writeEPKhj():
    1c7a:	cf 92       	push	r12
    1c7c:	df 92       	push	r13
    1c7e:	ef 92       	push	r14
    1c80:	ff 92       	push	r15
    1c82:	0f 93       	push	r16
    1c84:	1f 93       	push	r17
    1c86:	cf 93       	push	r28
    1c88:	df 93       	push	r29
    1c8a:	7c 01       	movw	r14, r24
    1c8c:	cb 01       	movw	r24, r22
    1c8e:	8a 01       	movw	r16, r20
    1c90:	20 91 f1 04 	lds	r18, 0x04F1	; 0x8004f1 <TwoWire::transmitting>
    1c94:	22 23       	and	r18, r18
    1c96:	89 f0       	breq	.+34     	; 0x1cba <TwoWire::write(unsigned char const*, unsigned int)+0x40>
    1c98:	eb 01       	movw	r28, r22
    1c9a:	6b 01       	movw	r12, r22
    1c9c:	c4 0e       	add	r12, r20
    1c9e:	d5 1e       	adc	r13, r21
    1ca0:	cc 15       	cp	r28, r12
    1ca2:	dd 05       	cpc	r29, r13
    1ca4:	69 f0       	breq	.+26     	; 0x1cc0 <TwoWire::write(unsigned char const*, unsigned int)+0x46>
    1ca6:	69 91       	ld	r22, Y+
    1ca8:	d7 01       	movw	r26, r14
    1caa:	ed 91       	ld	r30, X+
    1cac:	fc 91       	ld	r31, X
    1cae:	01 90       	ld	r0, Z+
    1cb0:	f0 81       	ld	r31, Z
    1cb2:	e0 2d       	mov	r30, r0
    1cb4:	c7 01       	movw	r24, r14
    1cb6:	09 95       	icall
    1cb8:	f3 cf       	rjmp	.-26     	; 0x1ca0 <TwoWire::write(unsigned char const*, unsigned int)+0x26>
    1cba:	64 2f       	mov	r22, r20
    1cbc:	0e 94 d0 0f 	call	0x1fa0	; 0x1fa0 <twi_transmit>
    1cc0:	c8 01       	movw	r24, r16
    1cc2:	df 91       	pop	r29
    1cc4:	cf 91       	pop	r28
    1cc6:	1f 91       	pop	r17
    1cc8:	0f 91       	pop	r16
    1cca:	ff 90       	pop	r15
    1ccc:	ef 90       	pop	r14
    1cce:	df 90       	pop	r13
    1cd0:	cf 90       	pop	r12
    1cd2:	08 95       	ret

00001cd4 <TwoWire::begin()>:
_ZN7TwoWire5beginEv():
    1cd4:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <TwoWire::rxBufferIndex>
    1cd8:	10 92 15 05 	sts	0x0515, r1	; 0x800515 <TwoWire::rxBufferLength>
    1cdc:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <TwoWire::txBufferIndex>
    1ce0:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <TwoWire::txBufferLength>
    1ce4:	0e 94 13 0f 	call	0x1e26	; 0x1e26 <twi_init>
    1ce8:	82 e0       	ldi	r24, 0x02	; 2
    1cea:	9e e0       	ldi	r25, 0x0E	; 14
    1cec:	0e 94 fc 0f 	call	0x1ff8	; 0x1ff8 <twi_attachSlaveTxEvent>
    1cf0:	88 ed       	ldi	r24, 0xD8	; 216
    1cf2:	9d e0       	ldi	r25, 0x0D	; 13
    1cf4:	0c 94 f7 0f 	jmp	0x1fee	; 0x1fee <twi_attachSlaveRxEvent>

00001cf8 <TwoWire::beginTransmission(unsigned char)>:
_ZN7TwoWire17beginTransmissionEh():
    1cf8:	81 e0       	ldi	r24, 0x01	; 1
    1cfa:	80 93 f1 04 	sts	0x04F1, r24	; 0x8004f1 <TwoWire::transmitting>
    1cfe:	60 93 14 05 	sts	0x0514, r22	; 0x800514 <TwoWire::txAddress>
    1d02:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <TwoWire::txBufferIndex>
    1d06:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <TwoWire::txBufferLength>
    1d0a:	08 95       	ret

00001d0c <TwoWire::endTransmission(unsigned char)>:
_ZN7TwoWire15endTransmissionEh():
    1d0c:	0f 93       	push	r16
    1d0e:	06 2f       	mov	r16, r22
    1d10:	21 e0       	ldi	r18, 0x01	; 1
    1d12:	40 91 f2 04 	lds	r20, 0x04F2	; 0x8004f2 <TwoWire::txBufferLength>
    1d16:	64 ef       	ldi	r22, 0xF4	; 244
    1d18:	74 e0       	ldi	r23, 0x04	; 4
    1d1a:	80 91 14 05 	lds	r24, 0x0514	; 0x800514 <TwoWire::txAddress>
    1d1e:	0e 94 79 0f 	call	0x1ef2	; 0x1ef2 <twi_writeTo>
    1d22:	10 92 f3 04 	sts	0x04F3, r1	; 0x8004f3 <TwoWire::txBufferIndex>
    1d26:	10 92 f2 04 	sts	0x04F2, r1	; 0x8004f2 <TwoWire::txBufferLength>
    1d2a:	10 92 f1 04 	sts	0x04F1, r1	; 0x8004f1 <TwoWire::transmitting>
    1d2e:	0f 91       	pop	r16
    1d30:	08 95       	ret

00001d32 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhmhh():
    1d32:	4f 92       	push	r4
    1d34:	5f 92       	push	r5
    1d36:	6f 92       	push	r6
    1d38:	7f 92       	push	r7
    1d3a:	af 92       	push	r10
    1d3c:	bf 92       	push	r11
    1d3e:	cf 92       	push	r12
    1d40:	ef 92       	push	r14
    1d42:	ff 92       	push	r15
    1d44:	0f 93       	push	r16
    1d46:	1f 93       	push	r17
    1d48:	cf 93       	push	r28
    1d4a:	df 93       	push	r29
    1d4c:	5c 01       	movw	r10, r24
    1d4e:	f6 2e       	mov	r15, r22
    1d50:	d4 2f       	mov	r29, r20
    1d52:	28 01       	movw	r4, r16
    1d54:	39 01       	movw	r6, r18
    1d56:	ee 20       	and	r14, r14
    1d58:	19 f1       	breq	.+70     	; 0x1da0 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x6e>
    1d5a:	0e 94 7c 0e 	call	0x1cf8	; 0x1cf8 <TwoWire::beginTransmission(unsigned char)>
    1d5e:	ce 2d       	mov	r28, r14
    1d60:	c4 30       	cpi	r28, 0x04	; 4
    1d62:	08 f0       	brcs	.+2      	; 0x1d66 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    1d64:	c3 e0       	ldi	r28, 0x03	; 3
    1d66:	c1 50       	subi	r28, 0x01	; 1
    1d68:	b8 f0       	brcs	.+46     	; 0x1d98 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x66>
    1d6a:	28 e0       	ldi	r18, 0x08	; 8
    1d6c:	c2 9f       	mul	r28, r18
    1d6e:	c0 01       	movw	r24, r0
    1d70:	11 24       	eor	r1, r1
    1d72:	a3 01       	movw	r20, r6
    1d74:	92 01       	movw	r18, r4
    1d76:	04 c0       	rjmp	.+8      	; 0x1d80 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x4e>
    1d78:	56 95       	lsr	r21
    1d7a:	47 95       	ror	r20
    1d7c:	37 95       	ror	r19
    1d7e:	27 95       	ror	r18
    1d80:	8a 95       	dec	r24
    1d82:	d2 f7       	brpl	.-12     	; 0x1d78 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x46>
    1d84:	b9 01       	movw	r22, r18
    1d86:	d5 01       	movw	r26, r10
    1d88:	ed 91       	ld	r30, X+
    1d8a:	fc 91       	ld	r31, X
    1d8c:	01 90       	ld	r0, Z+
    1d8e:	f0 81       	ld	r31, Z
    1d90:	e0 2d       	mov	r30, r0
    1d92:	c5 01       	movw	r24, r10
    1d94:	09 95       	icall
    1d96:	e7 cf       	rjmp	.-50     	; 0x1d66 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x34>
    1d98:	60 e0       	ldi	r22, 0x00	; 0
    1d9a:	c5 01       	movw	r24, r10
    1d9c:	0e 94 86 0e 	call	0x1d0c	; 0x1d0c <TwoWire::endTransmission(unsigned char)>
    1da0:	4d 2f       	mov	r20, r29
    1da2:	d1 32       	cpi	r29, 0x21	; 33
    1da4:	08 f0       	brcs	.+2      	; 0x1da8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)+0x76>
    1da6:	40 e2       	ldi	r20, 0x20	; 32
    1da8:	2c 2d       	mov	r18, r12
    1daa:	67 e1       	ldi	r22, 0x17	; 23
    1dac:	75 e0       	ldi	r23, 0x05	; 5
    1dae:	8f 2d       	mov	r24, r15
    1db0:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <twi_readFrom>
    1db4:	10 92 16 05 	sts	0x0516, r1	; 0x800516 <TwoWire::rxBufferIndex>
    1db8:	80 93 15 05 	sts	0x0515, r24	; 0x800515 <TwoWire::rxBufferLength>
    1dbc:	df 91       	pop	r29
    1dbe:	cf 91       	pop	r28
    1dc0:	1f 91       	pop	r17
    1dc2:	0f 91       	pop	r16
    1dc4:	ff 90       	pop	r15
    1dc6:	ef 90       	pop	r14
    1dc8:	cf 90       	pop	r12
    1dca:	bf 90       	pop	r11
    1dcc:	af 90       	pop	r10
    1dce:	7f 90       	pop	r7
    1dd0:	6f 90       	pop	r6
    1dd2:	5f 90       	pop	r5
    1dd4:	4f 90       	pop	r4
    1dd6:	08 95       	ret

00001dd8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhhh():
    1dd8:	cf 92       	push	r12
    1dda:	ef 92       	push	r14
    1ddc:	0f 93       	push	r16
    1dde:	1f 93       	push	r17
    1de0:	c2 2e       	mov	r12, r18
    1de2:	e1 2c       	mov	r14, r1
    1de4:	00 e0       	ldi	r16, 0x00	; 0
    1de6:	10 e0       	ldi	r17, 0x00	; 0
    1de8:	98 01       	movw	r18, r16
    1dea:	0e 94 99 0e 	call	0x1d32	; 0x1d32 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned long, unsigned char, unsigned char)>
    1dee:	1f 91       	pop	r17
    1df0:	0f 91       	pop	r16
    1df2:	ef 90       	pop	r14
    1df4:	cf 90       	pop	r12
    1df6:	08 95       	ret

00001df8 <TwoWire::requestFrom(unsigned char, unsigned char)>:
_ZN7TwoWire11requestFromEhh():
    1df8:	21 e0       	ldi	r18, 0x01	; 1
    1dfa:	0c 94 ec 0e 	jmp	0x1dd8	; 0x1dd8 <TwoWire::requestFrom(unsigned char, unsigned char, unsigned char)>

00001dfe <TwoWire::endTransmission()>:
_ZN7TwoWire15endTransmissionEv():
    1dfe:	61 e0       	ldi	r22, 0x01	; 1
    1e00:	0c 94 86 0e 	jmp	0x1d0c	; 0x1d0c <TwoWire::endTransmission(unsigned char)>

00001e04 <_GLOBAL__sub_I__ZN7TwoWire8rxBufferE>:
_ZN5PrintC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
    1e04:	e1 ee       	ldi	r30, 0xE1	; 225
    1e06:	f4 e0       	ldi	r31, 0x04	; 4
    1e08:	13 82       	std	Z+3, r1	; 0x03
    1e0a:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
  public:
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;

    Stream() {_timeout=1000;}
    1e0c:	88 ee       	ldi	r24, 0xE8	; 232
    1e0e:	93 e0       	ldi	r25, 0x03	; 3
    1e10:	a0 e0       	ldi	r26, 0x00	; 0
    1e12:	b0 e0       	ldi	r27, 0x00	; 0
    1e14:	84 83       	std	Z+4, r24	; 0x04
    1e16:	95 83       	std	Z+5, r25	; 0x05
    1e18:	a6 83       	std	Z+6, r26	; 0x06
    1e1a:	b7 83       	std	Z+7, r27	; 0x07
_ZN7TwoWireC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:52
void (*TwoWire::user_onRequest)(void);
void (*TwoWire::user_onReceive)(int);

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire()
    1e1c:	80 ec       	ldi	r24, 0xC0	; 192
    1e1e:	93 e0       	ldi	r25, 0x03	; 3
    1e20:	91 83       	std	Z+1, r25	; 0x01
    1e22:	80 83       	st	Z, r24
_GLOBAL__sub_I__ZN7TwoWire8rxBufferE():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src/Wire.cpp:333
  user_onRequest = function;
}

// Preinstantiate Objects //////////////////////////////////////////////////////

TwoWire Wire = TwoWire();
    1e24:	08 95       	ret

00001e26 <twi_init>:
twi_init():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    1e26:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <twi_state>
    1e2a:	81 e0       	ldi	r24, 0x01	; 1
    1e2c:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <twi_sendStop>
    1e30:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <twi_inRepStart>
    1e34:	61 e0       	ldi	r22, 0x01	; 1
    1e36:	81 e1       	ldi	r24, 0x11	; 17
    1e38:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
    1e3c:	61 e0       	ldi	r22, 0x01	; 1
    1e3e:	80 e1       	ldi	r24, 0x10	; 16
    1e40:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
    1e44:	e9 eb       	ldi	r30, 0xB9	; 185
    1e46:	f0 e0       	ldi	r31, 0x00	; 0
    1e48:	80 81       	ld	r24, Z
    1e4a:	8e 7f       	andi	r24, 0xFE	; 254
    1e4c:	80 83       	st	Z, r24
    1e4e:	80 81       	ld	r24, Z
    1e50:	8d 7f       	andi	r24, 0xFD	; 253
    1e52:	80 83       	st	Z, r24
    1e54:	88 e4       	ldi	r24, 0x48	; 72
    1e56:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7e00b8>
    1e5a:	85 e4       	ldi	r24, 0x45	; 69
    1e5c:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1e60:	08 95       	ret

00001e62 <twi_readFrom>:
twi_readFrom():
    1e62:	41 32       	cpi	r20, 0x21	; 33
    1e64:	08 f0       	brcs	.+2      	; 0x1e68 <twi_readFrom+0x6>
    1e66:	43 c0       	rjmp	.+134    	; 0x1eee <twi_readFrom+0x8c>
    1e68:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <twi_state>
    1e6c:	91 11       	cpse	r25, r1
    1e6e:	fc cf       	rjmp	.-8      	; 0x1e68 <twi_readFrom+0x6>
    1e70:	91 e0       	ldi	r25, 0x01	; 1
    1e72:	90 93 a4 05 	sts	0x05A4, r25	; 0x8005a4 <twi_state>
    1e76:	20 93 a2 05 	sts	0x05A2, r18	; 0x8005a2 <twi_sendStop>
    1e7a:	2f ef       	ldi	r18, 0xFF	; 255
    1e7c:	20 93 37 05 	sts	0x0537, r18	; 0x800537 <twi_error>
    1e80:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <twi_masterBufferIndex>
    1e84:	24 0f       	add	r18, r20
    1e86:	20 93 7b 05 	sts	0x057B, r18	; 0x80057b <twi_masterBufferLength>
    1e8a:	90 93 a3 05 	sts	0x05A3, r25	; 0x8005a3 <twi_slarw>
    1e8e:	90 91 a3 05 	lds	r25, 0x05A3	; 0x8005a3 <twi_slarw>
    1e92:	88 0f       	add	r24, r24
    1e94:	89 2b       	or	r24, r25
    1e96:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <twi_slarw>
    1e9a:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <twi_inRepStart>
    1e9e:	81 30       	cpi	r24, 0x01	; 1
    1ea0:	09 f5       	brne	.+66     	; 0x1ee4 <twi_readFrom+0x82>
    1ea2:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <twi_inRepStart>
    1ea6:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <twi_slarw>
    1eaa:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1eae:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1eb2:	83 fd       	sbrc	r24, 3
    1eb4:	f8 cf       	rjmp	.-16     	; 0x1ea6 <twi_readFrom+0x44>
    1eb6:	85 ec       	ldi	r24, 0xC5	; 197
    1eb8:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1ebc:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <twi_state>
    1ec0:	81 30       	cpi	r24, 0x01	; 1
    1ec2:	e1 f3       	breq	.-8      	; 0x1ebc <twi_readFrom+0x5a>
    1ec4:	80 91 7c 05 	lds	r24, 0x057C	; 0x80057c <twi_masterBufferIndex>
    1ec8:	84 17       	cp	r24, r20
    1eca:	10 f4       	brcc	.+4      	; 0x1ed0 <twi_readFrom+0x6e>
    1ecc:	40 91 7c 05 	lds	r20, 0x057C	; 0x80057c <twi_masterBufferIndex>
    1ed0:	ad e7       	ldi	r26, 0x7D	; 125
    1ed2:	b5 e0       	ldi	r27, 0x05	; 5
    1ed4:	96 2f       	mov	r25, r22
    1ed6:	fb 01       	movw	r30, r22
    1ed8:	8e 2f       	mov	r24, r30
    1eda:	89 1b       	sub	r24, r25
    1edc:	84 17       	cp	r24, r20
    1ede:	20 f0       	brcs	.+8      	; 0x1ee8 <twi_readFrom+0x86>
    1ee0:	84 2f       	mov	r24, r20
    1ee2:	08 95       	ret
    1ee4:	85 ee       	ldi	r24, 0xE5	; 229
    1ee6:	e8 cf       	rjmp	.-48     	; 0x1eb8 <twi_readFrom+0x56>
    1ee8:	8d 91       	ld	r24, X+
    1eea:	81 93       	st	Z+, r24
    1eec:	f5 cf       	rjmp	.-22     	; 0x1ed8 <twi_readFrom+0x76>
    1eee:	40 e0       	ldi	r20, 0x00	; 0
    1ef0:	f7 cf       	rjmp	.-18     	; 0x1ee0 <twi_readFrom+0x7e>

00001ef2 <twi_writeTo>:
twi_writeTo():
    1ef2:	0f 93       	push	r16
    1ef4:	41 32       	cpi	r20, 0x21	; 33
    1ef6:	08 f0       	brcs	.+2      	; 0x1efa <twi_writeTo+0x8>
    1ef8:	4b c0       	rjmp	.+150    	; 0x1f90 <twi_writeTo+0x9e>
    1efa:	90 91 a4 05 	lds	r25, 0x05A4	; 0x8005a4 <twi_state>
    1efe:	91 11       	cpse	r25, r1
    1f00:	fc cf       	rjmp	.-8      	; 0x1efa <twi_writeTo+0x8>
    1f02:	92 e0       	ldi	r25, 0x02	; 2
    1f04:	90 93 a4 05 	sts	0x05A4, r25	; 0x8005a4 <twi_state>
    1f08:	00 93 a2 05 	sts	0x05A2, r16	; 0x8005a2 <twi_sendStop>
    1f0c:	9f ef       	ldi	r25, 0xFF	; 255
    1f0e:	90 93 37 05 	sts	0x0537, r25	; 0x800537 <twi_error>
    1f12:	10 92 7c 05 	sts	0x057C, r1	; 0x80057c <twi_masterBufferIndex>
    1f16:	40 93 7b 05 	sts	0x057B, r20	; 0x80057b <twi_masterBufferLength>
    1f1a:	36 2f       	mov	r19, r22
    1f1c:	ad e7       	ldi	r26, 0x7D	; 125
    1f1e:	b5 e0       	ldi	r27, 0x05	; 5
    1f20:	fb 01       	movw	r30, r22
    1f22:	9e 2f       	mov	r25, r30
    1f24:	93 1b       	sub	r25, r19
    1f26:	94 17       	cp	r25, r20
    1f28:	70 f1       	brcs	.+92     	; 0x1f86 <twi_writeTo+0x94>
    1f2a:	10 92 a3 05 	sts	0x05A3, r1	; 0x8005a3 <twi_slarw>
    1f2e:	90 91 a3 05 	lds	r25, 0x05A3	; 0x8005a3 <twi_slarw>
    1f32:	88 0f       	add	r24, r24
    1f34:	89 2b       	or	r24, r25
    1f36:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <twi_slarw>
    1f3a:	80 91 a1 05 	lds	r24, 0x05A1	; 0x8005a1 <twi_inRepStart>
    1f3e:	81 30       	cpi	r24, 0x01	; 1
    1f40:	29 f5       	brne	.+74     	; 0x1f8c <twi_writeTo+0x9a>
    1f42:	10 92 a1 05 	sts	0x05A1, r1	; 0x8005a1 <twi_inRepStart>
    1f46:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <twi_slarw>
    1f4a:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    1f4e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f52:	83 fd       	sbrc	r24, 3
    1f54:	f8 cf       	rjmp	.-16     	; 0x1f46 <twi_writeTo+0x54>
    1f56:	85 ec       	ldi	r24, 0xC5	; 197
    1f58:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    1f5c:	22 23       	and	r18, r18
    1f5e:	21 f0       	breq	.+8      	; 0x1f68 <twi_writeTo+0x76>
    1f60:	80 91 a4 05 	lds	r24, 0x05A4	; 0x8005a4 <twi_state>
    1f64:	82 30       	cpi	r24, 0x02	; 2
    1f66:	d1 f3       	breq	.-12     	; 0x1f5c <twi_writeTo+0x6a>
    1f68:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <twi_error>
    1f6c:	8f 3f       	cpi	r24, 0xFF	; 255
    1f6e:	91 f0       	breq	.+36     	; 0x1f94 <twi_writeTo+0xa2>
    1f70:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <twi_error>
    1f74:	80 32       	cpi	r24, 0x20	; 32
    1f76:	81 f0       	breq	.+32     	; 0x1f98 <twi_writeTo+0xa6>
    1f78:	80 91 37 05 	lds	r24, 0x0537	; 0x800537 <twi_error>
    1f7c:	80 33       	cpi	r24, 0x30	; 48
    1f7e:	71 f0       	breq	.+28     	; 0x1f9c <twi_writeTo+0xaa>
    1f80:	84 e0       	ldi	r24, 0x04	; 4
    1f82:	0f 91       	pop	r16
    1f84:	08 95       	ret
    1f86:	91 91       	ld	r25, Z+
    1f88:	9d 93       	st	X+, r25
    1f8a:	cb cf       	rjmp	.-106    	; 0x1f22 <twi_writeTo+0x30>
    1f8c:	85 ee       	ldi	r24, 0xE5	; 229
    1f8e:	e4 cf       	rjmp	.-56     	; 0x1f58 <twi_writeTo+0x66>
    1f90:	81 e0       	ldi	r24, 0x01	; 1
    1f92:	f7 cf       	rjmp	.-18     	; 0x1f82 <twi_writeTo+0x90>
    1f94:	80 e0       	ldi	r24, 0x00	; 0
    1f96:	f5 cf       	rjmp	.-22     	; 0x1f82 <twi_writeTo+0x90>
    1f98:	82 e0       	ldi	r24, 0x02	; 2
    1f9a:	f3 cf       	rjmp	.-26     	; 0x1f82 <twi_writeTo+0x90>
    1f9c:	83 e0       	ldi	r24, 0x03	; 3
    1f9e:	f1 cf       	rjmp	.-30     	; 0x1f82 <twi_writeTo+0x90>

00001fa0 <twi_transmit>:
twi_transmit():
    1fa0:	20 91 59 05 	lds	r18, 0x0559	; 0x800559 <twi_txBufferLength>
    1fa4:	26 0f       	add	r18, r22
    1fa6:	33 27       	eor	r19, r19
    1fa8:	33 1f       	adc	r19, r19
    1faa:	21 32       	cpi	r18, 0x21	; 33
    1fac:	31 05       	cpc	r19, r1
    1fae:	ec f4       	brge	.+58     	; 0x1fea <twi_transmit+0x4a>
    1fb0:	20 91 a4 05 	lds	r18, 0x05A4	; 0x8005a4 <twi_state>
    1fb4:	fc 01       	movw	r30, r24
    1fb6:	90 e0       	ldi	r25, 0x00	; 0
    1fb8:	80 e0       	ldi	r24, 0x00	; 0
    1fba:	24 30       	cpi	r18, 0x04	; 4
    1fbc:	69 f0       	breq	.+26     	; 0x1fd8 <twi_transmit+0x38>
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	08 95       	ret
    1fc2:	a0 91 59 05 	lds	r26, 0x0559	; 0x800559 <twi_txBufferLength>
    1fc6:	21 91       	ld	r18, Z+
    1fc8:	ac 01       	movw	r20, r24
    1fca:	45 5a       	subi	r20, 0xA5	; 165
    1fcc:	5a 4f       	sbci	r21, 0xFA	; 250
    1fce:	a4 0f       	add	r26, r20
    1fd0:	b5 2f       	mov	r27, r21
    1fd2:	b1 1d       	adc	r27, r1
    1fd4:	2c 93       	st	X, r18
    1fd6:	01 96       	adiw	r24, 0x01	; 1
    1fd8:	86 17       	cp	r24, r22
    1fda:	98 f3       	brcs	.-26     	; 0x1fc2 <twi_transmit+0x22>
    1fdc:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <twi_txBufferLength>
    1fe0:	68 0f       	add	r22, r24
    1fe2:	60 93 59 05 	sts	0x0559, r22	; 0x800559 <twi_txBufferLength>
    1fe6:	80 e0       	ldi	r24, 0x00	; 0
    1fe8:	08 95       	ret
    1fea:	81 e0       	ldi	r24, 0x01	; 1
    1fec:	08 95       	ret

00001fee <twi_attachSlaveRxEvent>:
twi_attachSlaveRxEvent():
    1fee:	90 93 9e 05 	sts	0x059E, r25	; 0x80059e <twi_onSlaveReceive+0x1>
    1ff2:	80 93 9d 05 	sts	0x059D, r24	; 0x80059d <twi_onSlaveReceive>
    1ff6:	08 95       	ret

00001ff8 <twi_attachSlaveTxEvent>:
twi_attachSlaveTxEvent():
    1ff8:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <twi_onSlaveTransmit+0x1>
    1ffc:	80 93 9f 05 	sts	0x059F, r24	; 0x80059f <twi_onSlaveTransmit>
    2000:	08 95       	ret

00002002 <twi_stop>:
twi_stop():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:372
 * Output   none
 */
void twi_stop(void)
{
  // send stop condition
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT) | _BV(TWSTO);
    2002:	85 ed       	ldi	r24, 0xD5	; 213
    2004:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:376

  // wait for stop condition to be exectued on bus
  // TWINT is not set after a stop condition!
  while(TWCR & _BV(TWSTO)){
    2008:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    200c:	84 fd       	sbrc	r24, 4
    200e:	fc cf       	rjmp	.-8      	; 0x2008 <twi_stop+0x6>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:381
    continue;
  }

  // update twi state
  twi_state = TWI_READY;
    2010:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:382
}
    2014:	08 95       	ret

00002016 <twi_releaseBus>:
twi_releaseBus():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:393
 * Output   none
 */
void twi_releaseBus(void)
{
  // release bus
  TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWEA) | _BV(TWINT);
    2016:	85 ec       	ldi	r24, 0xC5	; 197
    2018:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:396

  // update twi state
  twi_state = TWI_READY;
    201c:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:397
}
    2020:	08 95       	ret

00002022 <__vector_26>:
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:400

ISR(TWI_vect)
{
    2022:	1f 92       	push	r1
    2024:	0f 92       	push	r0
    2026:	0f b6       	in	r0, 0x3f	; 63
    2028:	0f 92       	push	r0
    202a:	11 24       	eor	r1, r1
    202c:	0b b6       	in	r0, 0x3b	; 59
    202e:	0f 92       	push	r0
    2030:	2f 93       	push	r18
    2032:	3f 93       	push	r19
    2034:	4f 93       	push	r20
    2036:	5f 93       	push	r21
    2038:	6f 93       	push	r22
    203a:	7f 93       	push	r23
    203c:	8f 93       	push	r24
    203e:	9f 93       	push	r25
    2040:	af 93       	push	r26
    2042:	bf 93       	push	r27
    2044:	ef 93       	push	r30
    2046:	ff 93       	push	r31
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  switch(TW_STATUS){
    2048:	80 91 b9 00 	lds	r24, 0x00B9	; 0x8000b9 <__TEXT_REGION_LENGTH__+0x7e00b9>
    204c:	88 7f       	andi	r24, 0xF8	; 248
    204e:	80 36       	cpi	r24, 0x60	; 96
    2050:	09 f4       	brne	.+2      	; 0x2054 <__vector_26+0x32>
    2052:	4e c0       	rjmp	.+156    	; 0x20f0 <__vector_26+0xce>
    2054:	08 f0       	brcs	.+2      	; 0x2058 <__vector_26+0x36>
    2056:	41 c0       	rjmp	.+130    	; 0x20da <__vector_26+0xb8>
    2058:	88 32       	cpi	r24, 0x28	; 40
    205a:	09 f4       	brne	.+2      	; 0x205e <__vector_26+0x3c>
    205c:	aa c0       	rjmp	.+340    	; 0x21b2 <__vector_26+0x190>
    205e:	28 f5       	brcc	.+74     	; 0x20aa <__vector_26+0x88>
    2060:	80 31       	cpi	r24, 0x10	; 16
    2062:	09 f4       	brne	.+2      	; 0x2066 <__vector_26+0x44>
    2064:	9e c0       	rjmp	.+316    	; 0x21a2 <__vector_26+0x180>
    2066:	c8 f4       	brcc	.+50     	; 0x209a <__vector_26+0x78>
    2068:	88 23       	and	r24, r24
    206a:	09 f4       	brne	.+2      	; 0x206e <__vector_26+0x4c>
    206c:	fb c0       	rjmp	.+502    	; 0x2264 <__vector_26+0x242>
    206e:	88 30       	cpi	r24, 0x08	; 8
    2070:	09 f4       	brne	.+2      	; 0x2074 <__vector_26+0x52>
    2072:	97 c0       	rjmp	.+302    	; 0x21a2 <__vector_26+0x180>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
      break;
  }
}
    2074:	ff 91       	pop	r31
    2076:	ef 91       	pop	r30
    2078:	bf 91       	pop	r27
    207a:	af 91       	pop	r26
    207c:	9f 91       	pop	r25
    207e:	8f 91       	pop	r24
    2080:	7f 91       	pop	r23
    2082:	6f 91       	pop	r22
    2084:	5f 91       	pop	r21
    2086:	4f 91       	pop	r20
    2088:	3f 91       	pop	r19
    208a:	2f 91       	pop	r18
    208c:	0f 90       	pop	r0
    208e:	0b be       	out	0x3b, r0	; 59
    2090:	0f 90       	pop	r0
    2092:	0f be       	out	0x3f, r0	; 63
    2094:	0f 90       	pop	r0
    2096:	1f 90       	pop	r1
    2098:	18 95       	reti
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    209a:	88 31       	cpi	r24, 0x18	; 24
    209c:	09 f4       	brne	.+2      	; 0x20a0 <__vector_26+0x7e>
    209e:	89 c0       	rjmp	.+274    	; 0x21b2 <__vector_26+0x190>
    20a0:	80 32       	cpi	r24, 0x20	; 32
    20a2:	41 f7       	brne	.-48     	; 0x2074 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:436
    case TW_MT_SLA_NACK:  // address sent, nack received
      twi_error = TW_MT_SLA_NACK;
      twi_stop();
      break;
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
    20a4:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <twi_error>
    20a8:	15 c0       	rjmp	.+42     	; 0x20d4 <__vector_26+0xb2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    20aa:	80 34       	cpi	r24, 0x40	; 64
    20ac:	09 f4       	brne	.+2      	; 0x20b0 <__vector_26+0x8e>
    20ae:	9e c0       	rjmp	.+316    	; 0x21ec <__vector_26+0x1ca>
    20b0:	48 f4       	brcc	.+18     	; 0x20c4 <__vector_26+0xa2>
    20b2:	80 33       	cpi	r24, 0x30	; 48
    20b4:	b9 f3       	breq	.-18     	; 0x20a4 <__vector_26+0x82>
    20b6:	88 33       	cpi	r24, 0x38	; 56
    20b8:	e9 f6       	brne	.-70     	; 0x2074 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:440
    case TW_MT_DATA_NACK: // data sent, nack received
      twi_error = TW_MT_DATA_NACK;
      twi_stop();
      break;
    case TW_MT_ARB_LOST: // lost bus arbitration
      twi_error = TW_MT_ARB_LOST;
    20ba:	80 93 37 05 	sts	0x0537, r24	; 0x800537 <twi_error>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:441
      twi_releaseBus();
    20be:	0e 94 0b 10 	call	0x2016	; 0x2016 <twi_releaseBus>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:442
      break;
    20c2:	d8 cf       	rjmp	.-80     	; 0x2074 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    20c4:	80 35       	cpi	r24, 0x50	; 80
    20c6:	09 f4       	brne	.+2      	; 0x20ca <__vector_26+0xa8>
    20c8:	85 c0       	rjmp	.+266    	; 0x21d4 <__vector_26+0x1b2>
    20ca:	88 35       	cpi	r24, 0x58	; 88
    20cc:	09 f4       	brne	.+2      	; 0x20d0 <__vector_26+0xae>
    20ce:	96 c0       	rjmp	.+300    	; 0x21fc <__vector_26+0x1da>
    20d0:	88 34       	cpi	r24, 0x48	; 72
    20d2:	81 f6       	brne	.-96     	; 0x2074 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:559
    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
      twi_stop();
    20d4:	0e 94 01 10 	call	0x2002	; 0x2002 <twi_stop>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:562
      break;
  }
}
    20d8:	cd cf       	rjmp	.-102    	; 0x2074 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    20da:	88 39       	cpi	r24, 0x98	; 152
    20dc:	09 f4       	brne	.+2      	; 0x20e0 <__vector_26+0xbe>
    20de:	8c c0       	rjmp	.+280    	; 0x21f8 <__vector_26+0x1d6>
    20e0:	38 f5       	brcc	.+78     	; 0x2130 <__vector_26+0x10e>
    20e2:	88 37       	cpi	r24, 0x78	; 120
    20e4:	29 f0       	breq	.+10     	; 0x20f0 <__vector_26+0xce>
    20e6:	50 f4       	brcc	.+20     	; 0x20fc <__vector_26+0xda>
    20e8:	88 36       	cpi	r24, 0x68	; 104
    20ea:	11 f0       	breq	.+4      	; 0x20f0 <__vector_26+0xce>
    20ec:	80 37       	cpi	r24, 0x70	; 112
    20ee:	11 f6       	brne	.-124    	; 0x2074 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:482
    case TW_SR_SLA_ACK:   // addressed, returned ack
    case TW_SR_GCALL_ACK: // addressed generally, returned ack
    case TW_SR_ARB_LOST_SLA_ACK:   // lost arbitration, returned ack
    case TW_SR_ARB_LOST_GCALL_ACK: // lost arbitration, returned ack
      // enter slave receiver mode
      twi_state = TWI_SRX;
    20f0:	83 e0       	ldi	r24, 0x03	; 3
    20f2:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:484
      // indicate that rx buffer can be overwritten and ack
      twi_rxBufferIndex = 0;
    20f6:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <twi_rxBufferIndex>
    20fa:	57 c0       	rjmp	.+174    	; 0x21aa <__vector_26+0x188>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    20fc:	88 38       	cpi	r24, 0x88	; 136
    20fe:	09 f4       	brne	.+2      	; 0x2102 <__vector_26+0xe0>
    2100:	7b c0       	rjmp	.+246    	; 0x21f8 <__vector_26+0x1d6>
    2102:	80 39       	cpi	r24, 0x90	; 144
    2104:	19 f0       	breq	.+6      	; 0x210c <__vector_26+0xea>
    2106:	80 38       	cpi	r24, 0x80	; 128
    2108:	09 f0       	breq	.+2      	; 0x210c <__vector_26+0xea>
    210a:	b4 cf       	rjmp	.-152    	; 0x2074 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:490
      twi_reply(1);
      break;
    case TW_SR_DATA_ACK:       // data received, returned ack
    case TW_SR_GCALL_DATA_ACK: // data received generally, returned ack
      // if there is still room in the rx buffer
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    210c:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <twi_rxBufferIndex>
    2110:	80 32       	cpi	r24, 0x20	; 32
    2112:	08 f0       	brcs	.+2      	; 0x2116 <__vector_26+0xf4>
    2114:	71 c0       	rjmp	.+226    	; 0x21f8 <__vector_26+0x1d6>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:492
        // put byte in buffer and ack
        twi_rxBuffer[twi_rxBufferIndex++] = TWDR;
    2116:	e0 91 38 05 	lds	r30, 0x0538	; 0x800538 <twi_rxBufferIndex>
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	8e 0f       	add	r24, r30
    211e:	80 93 38 05 	sts	0x0538, r24	; 0x800538 <twi_rxBufferIndex>
    2122:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    2126:	f0 e0       	ldi	r31, 0x00	; 0
    2128:	e7 5c       	subi	r30, 0xC7	; 199
    212a:	fa 4f       	sbci	r31, 0xFA	; 250
    212c:	80 83       	st	Z, r24
    212e:	3d c0       	rjmp	.+122    	; 0x21aa <__vector_26+0x188>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    2130:	80 3b       	cpi	r24, 0xB0	; 176
    2132:	39 f0       	breq	.+14     	; 0x2142 <__vector_26+0x120>
    2134:	e0 f4       	brcc	.+56     	; 0x216e <__vector_26+0x14c>
    2136:	80 3a       	cpi	r24, 0xA0	; 160
    2138:	09 f4       	brne	.+2      	; 0x213c <__vector_26+0x11a>
    213a:	79 c0       	rjmp	.+242    	; 0x222e <__vector_26+0x20c>
    213c:	88 3a       	cpi	r24, 0xA8	; 168
    213e:	09 f0       	breq	.+2      	; 0x2142 <__vector_26+0x120>
    2140:	99 cf       	rjmp	.-206    	; 0x2074 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:521
    
    // Slave Transmitter
    case TW_ST_SLA_ACK:          // addressed, returned ack
    case TW_ST_ARB_LOST_SLA_ACK: // arbitration lost, returned ack
      // enter slave transmitter mode
      twi_state = TWI_STX;
    2142:	84 e0       	ldi	r24, 0x04	; 4
    2144:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:523
      // ready the tx buffer index for iteration
      twi_txBufferIndex = 0;
    2148:	10 92 5a 05 	sts	0x055A, r1	; 0x80055a <twi_txBufferIndex>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:525
      // set tx buffer length to be zero, to verify if user changes it
      twi_txBufferLength = 0;
    214c:	10 92 59 05 	sts	0x0559, r1	; 0x800559 <twi_txBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:528
      // request for txBuffer to be filled and length to be set
      // note: user must call twi_transmit(bytes, length) to do this
      twi_onSlaveTransmit();
    2150:	e0 91 9f 05 	lds	r30, 0x059F	; 0x80059f <twi_onSlaveTransmit>
    2154:	f0 91 a0 05 	lds	r31, 0x05A0	; 0x8005a0 <twi_onSlaveTransmit+0x1>
    2158:	09 95       	icall
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:530
      // if they didn't change buffer & length, initialize it
      if(0 == twi_txBufferLength){
    215a:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <twi_txBufferLength>
    215e:	81 11       	cpse	r24, r1
    2160:	0f c0       	rjmp	.+30     	; 0x2180 <__vector_26+0x15e>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:531
        twi_txBufferLength = 1;
    2162:	81 e0       	ldi	r24, 0x01	; 1
    2164:	80 93 59 05 	sts	0x0559, r24	; 0x800559 <twi_txBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:532
        twi_txBuffer[0] = 0x00;
    2168:	10 92 5b 05 	sts	0x055B, r1	; 0x80055b <twi_txBuffer>
    216c:	09 c0       	rjmp	.+18     	; 0x2180 <__vector_26+0x15e>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:401
  twi_state = TWI_READY;
}

ISR(TWI_vect)
{
  switch(TW_STATUS){
    216e:	80 3c       	cpi	r24, 0xC0	; 192
    2170:	09 f4       	brne	.+2      	; 0x2174 <__vector_26+0x152>
    2172:	76 c0       	rjmp	.+236    	; 0x2260 <__vector_26+0x23e>
    2174:	88 3c       	cpi	r24, 0xC8	; 200
    2176:	09 f4       	brne	.+2      	; 0x217a <__vector_26+0x158>
    2178:	73 c0       	rjmp	.+230    	; 0x2260 <__vector_26+0x23e>
    217a:	88 3b       	cpi	r24, 0xB8	; 184
    217c:	09 f0       	breq	.+2      	; 0x2180 <__vector_26+0x15e>
    217e:	7a cf       	rjmp	.-268    	; 0x2074 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:538
      }
      // transmit first byte from buffer, fall
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
    2180:	e0 91 5a 05 	lds	r30, 0x055A	; 0x80055a <twi_txBufferIndex>
    2184:	81 e0       	ldi	r24, 0x01	; 1
    2186:	8e 0f       	add	r24, r30
    2188:	80 93 5a 05 	sts	0x055A, r24	; 0x80055a <twi_txBufferIndex>
    218c:	f0 e0       	ldi	r31, 0x00	; 0
    218e:	e5 5a       	subi	r30, 0xA5	; 165
    2190:	fa 4f       	sbci	r31, 0xFA	; 250
    2192:	80 81       	ld	r24, Z
    2194:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    2198:	90 91 5a 05 	lds	r25, 0x055A	; 0x80055a <twi_txBufferIndex>
    219c:	80 91 59 05 	lds	r24, 0x0559	; 0x800559 <twi_txBufferLength>
    21a0:	29 c0       	rjmp	.+82     	; 0x21f4 <__vector_26+0x1d2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:406
  switch(TW_STATUS){
    // All Master
    case TW_START:     // sent start condition
    case TW_REP_START: // sent repeated start condition
      // copy device address and r/w bit to output register and ack
      TWDR = twi_slarw;
    21a2:	80 91 a3 05 	lds	r24, 0x05A3	; 0x8005a3 <twi_slarw>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    21a6:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    21aa:	85 ec       	ldi	r24, 0xC5	; 197
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    21ac:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
    21b0:	61 cf       	rjmp	.-318    	; 0x2074 <__vector_26+0x52>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:414

    // Master Transmitter
    case TW_MT_SLA_ACK:  // slave receiver acked address
    case TW_MT_DATA_ACK: // slave receiver acked data
      // if there is data to send, send it, otherwise stop 
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21b2:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <twi_masterBufferIndex>
    21b6:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <twi_masterBufferLength>
    21ba:	98 17       	cp	r25, r24
    21bc:	58 f5       	brcc	.+86     	; 0x2214 <__vector_26+0x1f2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:416
        // copy data to output register and ack
        TWDR = twi_masterBuffer[twi_masterBufferIndex++];
    21be:	e0 91 7c 05 	lds	r30, 0x057C	; 0x80057c <twi_masterBufferIndex>
    21c2:	81 e0       	ldi	r24, 0x01	; 1
    21c4:	8e 0f       	add	r24, r30
    21c6:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <twi_masterBufferIndex>
    21ca:	f0 e0       	ldi	r31, 0x00	; 0
    21cc:	e3 58       	subi	r30, 0x83	; 131
    21ce:	fa 4f       	sbci	r31, 0xFA	; 250
    21d0:	80 81       	ld	r24, Z
    21d2:	e9 cf       	rjmp	.-46     	; 0x21a6 <__vector_26+0x184>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:447
      break;

    // Master Receiver
    case TW_MR_DATA_ACK: // data received, ack sent
      // put byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    21d4:	e0 91 7c 05 	lds	r30, 0x057C	; 0x80057c <twi_masterBufferIndex>
    21d8:	81 e0       	ldi	r24, 0x01	; 1
    21da:	8e 0f       	add	r24, r30
    21dc:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <twi_masterBufferIndex>
    21e0:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    21e4:	f0 e0       	ldi	r31, 0x00	; 0
    21e6:	e3 58       	subi	r30, 0x83	; 131
    21e8:	fa 4f       	sbci	r31, 0xFA	; 250
    21ea:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:451
      /* fall through */
    case TW_MR_SLA_ACK:  // address sent, ack received
      // ack if more bytes are expected, otherwise nack
      if(twi_masterBufferIndex < twi_masterBufferLength){
    21ec:	90 91 7c 05 	lds	r25, 0x057C	; 0x80057c <twi_masterBufferIndex>
    21f0:	80 91 7b 05 	lds	r24, 0x057B	; 0x80057b <twi_masterBufferLength>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:540
      /* fall through */
    case TW_ST_DATA_ACK: // byte sent, ack returned
      // copy data to output register
      TWDR = twi_txBuffer[twi_txBufferIndex++];
      // if there is more to send, ack, otherwise nack
      if(twi_txBufferIndex < twi_txBufferLength){
    21f4:	98 17       	cp	r25, r24
    21f6:	c8 f2       	brcs	.-78     	; 0x21aa <__vector_26+0x188>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:359
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
  }else{
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT);
    21f8:	85 e8       	ldi	r24, 0x85	; 133
    21fa:	d8 cf       	rjmp	.-80     	; 0x21ac <__vector_26+0x18a>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:459
        twi_reply(0);
      }
      break;
    case TW_MR_DATA_NACK: // data received, nack sent
      // put final byte into buffer
      twi_masterBuffer[twi_masterBufferIndex++] = TWDR;
    21fc:	e0 91 7c 05 	lds	r30, 0x057C	; 0x80057c <twi_masterBufferIndex>
    2200:	81 e0       	ldi	r24, 0x01	; 1
    2202:	8e 0f       	add	r24, r30
    2204:	80 93 7c 05 	sts	0x057C, r24	; 0x80057c <twi_masterBufferIndex>
    2208:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7e00bb>
    220c:	f0 e0       	ldi	r31, 0x00	; 0
    220e:	e3 58       	subi	r30, 0x83	; 131
    2210:	fa 4f       	sbci	r31, 0xFA	; 250
    2212:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:460
  if (twi_sendStop)
    2214:	80 91 a2 05 	lds	r24, 0x05A2	; 0x8005a2 <twi_sendStop>
    2218:	81 11       	cpse	r24, r1
    221a:	5c cf       	rjmp	.-328    	; 0x20d4 <__vector_26+0xb2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:463
          twi_stop();
  else {
    twi_inRepStart = true;  // we're gonna send the START
    221c:	81 e0       	ldi	r24, 0x01	; 1
    221e:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <twi_inRepStart>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:467
    // don't enable the interrupt. We'll generate the start, but we 
    // avoid handling the interrupt until we're in the next transaction,
    // at the point where we would normally issue the start.
    TWCR = _BV(TWINT) | _BV(TWSTA)| _BV(TWEN) ;
    2222:	84 ea       	ldi	r24, 0xA4	; 164
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2224:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7e00bc>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:551
    case TW_ST_DATA_NACK: // received nack, we are done 
    case TW_ST_LAST_DATA: // received ack, but we are done already!
      // ack future responses
      twi_reply(1);
      // leave slave receiver state
      twi_state = TWI_READY;
    2228:	10 92 a4 05 	sts	0x05A4, r1	; 0x8005a4 <twi_state>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:552
      break;
    222c:	23 cf       	rjmp	.-442    	; 0x2074 <__vector_26+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:501
        twi_reply(0);
      }
      break;
    case TW_SR_STOP: // stop or repeated start condition received
      // ack future responses and leave slave receiver state
      twi_releaseBus();
    222e:	0e 94 0b 10 	call	0x2016	; 0x2016 <twi_releaseBus>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:503
      // put a null char after data if there's room
      if(twi_rxBufferIndex < TWI_BUFFER_SIZE){
    2232:	80 91 38 05 	lds	r24, 0x0538	; 0x800538 <twi_rxBufferIndex>
    2236:	80 32       	cpi	r24, 0x20	; 32
    2238:	30 f4       	brcc	.+12     	; 0x2246 <__vector_26+0x224>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:504
        twi_rxBuffer[twi_rxBufferIndex] = '\0';
    223a:	e0 91 38 05 	lds	r30, 0x0538	; 0x800538 <twi_rxBufferIndex>
    223e:	f0 e0       	ldi	r31, 0x00	; 0
    2240:	e7 5c       	subi	r30, 0xC7	; 199
    2242:	fa 4f       	sbci	r31, 0xFA	; 250
    2244:	10 82       	st	Z, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:507
      }
      // callback to user defined callback
      twi_onSlaveReceive(twi_rxBuffer, twi_rxBufferIndex);
    2246:	60 91 38 05 	lds	r22, 0x0538	; 0x800538 <twi_rxBufferIndex>
    224a:	70 e0       	ldi	r23, 0x00	; 0
    224c:	e0 91 9d 05 	lds	r30, 0x059D	; 0x80059d <twi_onSlaveReceive>
    2250:	f0 91 9e 05 	lds	r31, 0x059E	; 0x80059e <twi_onSlaveReceive+0x1>
    2254:	89 e3       	ldi	r24, 0x39	; 57
    2256:	95 e0       	ldi	r25, 0x05	; 5
    2258:	09 95       	icall
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:509
      // since we submit rx buffer to "wire" library, we can reset it
      twi_rxBufferIndex = 0;
    225a:	10 92 38 05 	sts	0x0538, r1	; 0x800538 <twi_rxBufferIndex>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:510
      break;
    225e:	0a cf       	rjmp	.-492    	; 0x2074 <__vector_26+0x52>
twi_reply():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:357
 */
void twi_reply(uint8_t ack)
{
  // transmit master read ready signal, with or without ack
  if(ack){
    TWCR = _BV(TWEN) | _BV(TWIE) | _BV(TWINT) | _BV(TWEA);
    2260:	85 ec       	ldi	r24, 0xC5	; 197
    2262:	e0 cf       	rjmp	.-64     	; 0x2224 <__vector_26+0x202>
__vector_26():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\libraries\Wire\src\utility/twi.c:558

    // All
    case TW_NO_INFO:   // no state information
      break;
    case TW_BUS_ERROR: // bus error, illegal stop/start
      twi_error = TW_BUS_ERROR;
    2264:	10 92 37 05 	sts	0x0537, r1	; 0x800537 <twi_error>
    2268:	35 cf       	rjmp	.-406    	; 0x20d4 <__vector_26+0xb2>

0000226a <yield>:
__empty():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/hooks.c:30
 * Its defined as a weak symbol and it can be redefined to implement a
 * real cooperative scheduler.
 */
static void __empty() {
  // Empty
}
    226a:	08 95       	ret

0000226c <__vector_18>:
__vector_18():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:227
  cli();
  m = timer0_millis;
  SREG = oldSREG;

  return m;
}
    226c:	1f 92       	push	r1
    226e:	0f 92       	push	r0
    2270:	0f b6       	in	r0, 0x3f	; 63
    2272:	0f 92       	push	r0
    2274:	11 24       	eor	r1, r1
    2276:	2f 93       	push	r18
    2278:	3f 93       	push	r19
    227a:	8f 93       	push	r24
    227c:	9f 93       	push	r25
    227e:	af 93       	push	r26
    2280:	bf 93       	push	r27
    2282:	80 91 aa 05 	lds	r24, 0x05AA	; 0x8005aa <timer0_millis>
    2286:	90 91 ab 05 	lds	r25, 0x05AB	; 0x8005ab <timer0_millis+0x1>
    228a:	a0 91 ac 05 	lds	r26, 0x05AC	; 0x8005ac <timer0_millis+0x2>
    228e:	b0 91 ad 05 	lds	r27, 0x05AD	; 0x8005ad <timer0_millis+0x3>
    2292:	30 91 a9 05 	lds	r19, 0x05A9	; 0x8005a9 <timer0_fract>
    2296:	23 e0       	ldi	r18, 0x03	; 3
    2298:	23 0f       	add	r18, r19
    229a:	2d 37       	cpi	r18, 0x7D	; 125
    229c:	68 f1       	brcs	.+90     	; 0x22f8 <__vector_18+0x8c>
    229e:	26 e8       	ldi	r18, 0x86	; 134
    22a0:	23 0f       	add	r18, r19
    22a2:	02 96       	adiw	r24, 0x02	; 2
    22a4:	a1 1d       	adc	r26, r1
    22a6:	b1 1d       	adc	r27, r1
    22a8:	20 93 a9 05 	sts	0x05A9, r18	; 0x8005a9 <timer0_fract>
    22ac:	80 93 aa 05 	sts	0x05AA, r24	; 0x8005aa <timer0_millis>
    22b0:	90 93 ab 05 	sts	0x05AB, r25	; 0x8005ab <timer0_millis+0x1>
    22b4:	a0 93 ac 05 	sts	0x05AC, r26	; 0x8005ac <timer0_millis+0x2>
    22b8:	b0 93 ad 05 	sts	0x05AD, r27	; 0x8005ad <timer0_millis+0x3>
    22bc:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <timer0_overflow_count>
    22c0:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <timer0_overflow_count+0x1>
    22c4:	a0 91 a7 05 	lds	r26, 0x05A7	; 0x8005a7 <timer0_overflow_count+0x2>
    22c8:	b0 91 a8 05 	lds	r27, 0x05A8	; 0x8005a8 <timer0_overflow_count+0x3>
    22cc:	01 96       	adiw	r24, 0x01	; 1
    22ce:	a1 1d       	adc	r26, r1
    22d0:	b1 1d       	adc	r27, r1
    22d2:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <timer0_overflow_count>
    22d6:	90 93 a6 05 	sts	0x05A6, r25	; 0x8005a6 <timer0_overflow_count+0x1>
    22da:	a0 93 a7 05 	sts	0x05A7, r26	; 0x8005a7 <timer0_overflow_count+0x2>
    22de:	b0 93 a8 05 	sts	0x05A8, r27	; 0x8005a8 <timer0_overflow_count+0x3>
    22e2:	bf 91       	pop	r27
    22e4:	af 91       	pop	r26
    22e6:	9f 91       	pop	r25
    22e8:	8f 91       	pop	r24
    22ea:	3f 91       	pop	r19
    22ec:	2f 91       	pop	r18
    22ee:	0f 90       	pop	r0
    22f0:	0f be       	out	0x3f, r0	; 63
    22f2:	0f 90       	pop	r0
    22f4:	1f 90       	pop	r1
    22f6:	18 95       	reti
    22f8:	01 96       	adiw	r24, 0x01	; 1
    22fa:	a1 1d       	adc	r26, r1
    22fc:	b1 1d       	adc	r27, r1
    22fe:	d4 cf       	rjmp	.-88     	; 0x22a8 <__vector_18+0x3c>

00002300 <micros>:
micros():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:237
  unsigned char f; // temporary storage for millis fraction counter
  unsigned char q = 0; // record whether an overflow is flagged
#endif
  // t will be the number where the timer0 counter stopped
  uint8_t t;
  uint8_t oldSREG = SREG;
    2300:	3f b7       	in	r19, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:240

  // Stop all interrupts
  cli();
    2302:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:247
#ifdef CORRECT_EXACT_MICROS
  // combine exact millisec and 8usec counters
  m = timer0_millis;
  f = timer0_fract;
#else
  m = timer0_overflow_count;
    2304:	80 91 a5 05 	lds	r24, 0x05A5	; 0x8005a5 <timer0_overflow_count>
    2308:	90 91 a6 05 	lds	r25, 0x05A6	; 0x8005a6 <timer0_overflow_count+0x1>
    230c:	a0 91 a7 05 	lds	r26, 0x05A7	; 0x8005a7 <timer0_overflow_count+0x2>
    2310:	b0 91 a8 05 	lds	r27, 0x05A8	; 0x8005a8 <timer0_overflow_count+0x3>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:252
#endif

  // TCNT0 : The Timer Counter Register
#if defined(TCNT0)
  t = TCNT0;
    2314:	26 b5       	in	r18, 0x26	; 38
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261
  #error TIMER 0 not defined
#endif

  // Timer0 Interrupt Flag Register
#ifdef TIFR0
  if ((TIFR0 & _BV(TOV0)) && (t < 255))
    2316:	a8 9b       	sbis	0x15, 0	; 21
    2318:	05 c0       	rjmp	.+10     	; 0x2324 <micros+0x24>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:261 (discriminator 1)
    231a:	2f 3f       	cpi	r18, 0xFF	; 255
    231c:	19 f0       	breq	.+6      	; 0x2324 <micros+0x24>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:263
#ifndef CORRECT_EXACT_MICROS
    m++;
    231e:	01 96       	adiw	r24, 0x01	; 1
    2320:	a1 1d       	adc	r26, r1
    2322:	b1 1d       	adc	r27, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:276
#else
    q = 1;
#endif
#endif
  // Restore SREG
  SREG = oldSREG;
    2324:	3f bf       	out	0x3f, r19	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:292
      ((t * MICROSECONDS_PER_TIMER0_OVERFLOW) >> 8);
  return q ? m + MICROSECONDS_PER_TIMER0_OVERFLOW : m;
#elif 1
  /* All power-of-two Megahertz frequencies enter here, as well as 12.8 MHz.
     We only end up here if right shift before multiplication is exact. */
  return ((m << 8) + t) * (MICROSECONDS_PER_TIMER0_OVERFLOW >> 8);
    2326:	ba 2f       	mov	r27, r26
    2328:	a9 2f       	mov	r26, r25
    232a:	98 2f       	mov	r25, r24
    232c:	88 27       	eor	r24, r24
    232e:	bc 01       	movw	r22, r24
    2330:	cd 01       	movw	r24, r26
    2332:	62 0f       	add	r22, r18
    2334:	71 1d       	adc	r23, r1
    2336:	81 1d       	adc	r24, r1
    2338:	91 1d       	adc	r25, r1
    233a:	42 e0       	ldi	r20, 0x02	; 2
    233c:	66 0f       	add	r22, r22
    233e:	77 1f       	adc	r23, r23
    2340:	88 1f       	adc	r24, r24
    2342:	99 1f       	adc	r25, r25
    2344:	4a 95       	dec	r20
    2346:	d1 f7       	brne	.-12     	; 0x233c <micros+0x3c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:393
  // m & t are multiplied by 4 (since it was already multiplied by 256)
  // t is multiplied by 4
  return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
#endif
#endif // 0
}
    2348:	08 95       	ret

0000234a <delay>:
delay():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:396

void delay(unsigned long ms)
{
    234a:	8f 92       	push	r8
    234c:	9f 92       	push	r9
    234e:	af 92       	push	r10
    2350:	bf 92       	push	r11
    2352:	cf 92       	push	r12
    2354:	df 92       	push	r13
    2356:	ef 92       	push	r14
    2358:	ff 92       	push	r15
    235a:	6b 01       	movw	r12, r22
    235c:	7c 01       	movw	r14, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:397
  unsigned long start = micros();
    235e:	0e 94 80 11 	call	0x2300	; 0x2300 <micros>
    2362:	4b 01       	movw	r8, r22
    2364:	5c 01       	movw	r10, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:399

  while (ms > 0UL) {
    2366:	c1 14       	cp	r12, r1
    2368:	d1 04       	cpc	r13, r1
    236a:	e1 04       	cpc	r14, r1
    236c:	f1 04       	cpc	r15, r1
    236e:	e9 f0       	breq	.+58     	; 0x23aa <delay+0x60>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:400
    yield();
    2370:	0e 94 35 11 	call	0x226a	; 0x226a <yield>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401 (discriminator 1)
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    2374:	0e 94 80 11 	call	0x2300	; 0x2300 <micros>
    2378:	68 19       	sub	r22, r8
    237a:	79 09       	sbc	r23, r9
    237c:	8a 09       	sbc	r24, r10
    237e:	9b 09       	sbc	r25, r11
    2380:	68 3e       	cpi	r22, 0xE8	; 232
    2382:	73 40       	sbci	r23, 0x03	; 3
    2384:	81 05       	cpc	r24, r1
    2386:	91 05       	cpc	r25, r1
    2388:	70 f3       	brcs	.-36     	; 0x2366 <delay+0x1c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:402
      ms--;
    238a:	21 e0       	ldi	r18, 0x01	; 1
    238c:	c2 1a       	sub	r12, r18
    238e:	d1 08       	sbc	r13, r1
    2390:	e1 08       	sbc	r14, r1
    2392:	f1 08       	sbc	r15, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:403
      start += 1000UL;
    2394:	88 ee       	ldi	r24, 0xE8	; 232
    2396:	88 0e       	add	r8, r24
    2398:	83 e0       	ldi	r24, 0x03	; 3
    239a:	98 1e       	adc	r9, r24
    239c:	a1 1c       	adc	r10, r1
    239e:	b1 1c       	adc	r11, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:401
{
  unsigned long start = micros();

  while (ms > 0UL) {
    yield();
    while (ms > 0UL && (micros() - start) >= 1000UL) {
    23a0:	c1 14       	cp	r12, r1
    23a2:	d1 04       	cpc	r13, r1
    23a4:	e1 04       	cpc	r14, r1
    23a6:	f1 04       	cpc	r15, r1
    23a8:	29 f7       	brne	.-54     	; 0x2374 <delay+0x2a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:406
      ms--;
      start += 1000UL;
    }
  }
}
    23aa:	ff 90       	pop	r15
    23ac:	ef 90       	pop	r14
    23ae:	df 90       	pop	r13
    23b0:	cf 90       	pop	r12
    23b2:	bf 90       	pop	r11
    23b4:	af 90       	pop	r10
    23b6:	9f 90       	pop	r9
    23b8:	8f 90       	pop	r8
    23ba:	08 95       	ret

000023bc <delayMicroseconds>:
delayMicroseconds():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:619
  us -= 7; // = 2 cycles

#elif F_CPU >= 16000000L
  // for a one-microsecond delay, simply return.  the overhead
  // of the function call takes 14 (16) cycles, which is 1 us
  if (us <= 1) return; //  = 3 cycles, (4 when true)
    23bc:	82 30       	cpi	r24, 0x02	; 2
    23be:	91 05       	cpc	r25, r1
    23c0:	38 f0       	brcs	.+14     	; 0x23d0 <delayMicroseconds+0x14>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:624

  // the following loop takes 1/4 of a microsecond (4 cycles)
  // per iteration, so execute it four times for each microsecond of
  // delay requested.
  us <<= 2; // x4 us, = 4 cycles
    23c2:	88 0f       	add	r24, r24
    23c4:	99 1f       	adc	r25, r25
    23c6:	88 0f       	add	r24, r24
    23c8:	99 1f       	adc	r25, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:629

  // account for the time taken in the preceeding commands.
  // we just burned 19 (21) cycles above, remove 5, (5*4=20)
  // to 2nd us is at least 8 so we can substract 5
  us -= 5; // = 2 cycles,
    23ca:	05 97       	sbiw	r24, 0x05	; 5
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:929
  us >>= 2; // us div 4, = 4 cycles

#endif

  // busy wait
  __asm__ __volatile__ (
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <delayMicroseconds+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:939
    "   brne 1b"                     // 2 cycles
    : /* no outputs */
    : "w" (us)
  );
  // return = 4 cycles
}
    23d0:	08 95       	ret

000023d2 <init>:
init():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:945

void init()
{
  // this needs to be called before setup() or some functions won't
  // work there
  sei();
    23d2:	78 94       	sei
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:957

  // On the ATmega168, timer 0 is also used for fast hardware pwm
  // (using phase-correct PWM would mean that timer 0 overflowed half as often
  // resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
  TCCR0A |= _BV(WGM01) | _BV(WGM00);
    23d4:	84 b5       	in	r24, 0x24	; 36
    23d6:	83 60       	ori	r24, 0x03	; 3
    23d8:	84 bd       	out	0x24, r24	; 36
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:972
  #if defined(WGM00) && defined(WGM01) // The ATmega8 doesn't have WGM00 and WGM01
    TCCR0 |= _BV(WGM01) | _BV(WGM00);
  #endif
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
  // This combination is for the standard 168/328/640/1280/1281/2560/2561
  TCCR0B |= _BV(CS01) | _BV(CS00);
    23da:	85 b5       	in	r24, 0x25	; 37
    23dc:	83 60       	ori	r24, 0x03	; 3
    23de:	85 bd       	out	0x25, r24	; 37
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:984

// Enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
  TIMSK |= _BV(TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
  TIMSK0 |= _BV(TOIE0);
    23e0:	ee e6       	ldi	r30, 0x6E	; 110
    23e2:	f0 e0       	ldi	r31, 0x00	; 0
    23e4:	80 81       	ld	r24, Z
    23e6:	81 60       	ori	r24, 0x01	; 1
    23e8:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:995
// this is better for motors as it ensures an even waveform
// note, however, that fast pwm mode can achieve a frequency of up
// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
  TCCR1B = _BV(CS11); // Set timer 1 prescale factor to 64
    23ea:	e1 e8       	ldi	r30, 0x81	; 129
    23ec:	f0 e0       	ldi	r31, 0x00	; 0
    23ee:	82 e0       	ldi	r24, 0x02	; 2
    23f0:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:997
#if F_CPU >= 8000000L
  TCCR1B |= _BV(CS10);
    23f2:	80 81       	ld	r24, Z
    23f4:	81 60       	ori	r24, 0x01	; 1
    23f6:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1006
#if F_CPU >= 8000000L
  TCCR1 |= _BV(CS10);
#endif
#endif
#if defined(TCCR1A) && defined(WGM10)
  TCCR1A |= _BV(WGM10); // Put timer 1 in 8-bit phase correct pwm mode
    23f8:	e0 e8       	ldi	r30, 0x80	; 128
    23fa:	f0 e0       	ldi	r31, 0x00	; 0
    23fc:	80 81       	ld	r24, Z
    23fe:	81 60       	ori	r24, 0x01	; 1
    2400:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1013

// Set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
  TCCR2 |= _BV(CS22);
#elif defined(TCCR2B) && defined(CS22)
  TCCR2B |= _BV(CS22);
    2402:	e1 eb       	ldi	r30, 0xB1	; 177
    2404:	f0 e0       	ldi	r31, 0x00	; 0
    2406:	80 81       	ld	r24, Z
    2408:	84 60       	ori	r24, 0x04	; 4
    240a:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1022

// Configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
  TCCR2 |= _BV(WGM20);
#elif defined(TCCR2A) && defined(WGM20)
  TCCR2A |= _BV(WGM20);
    240c:	e0 eb       	ldi	r30, 0xB0	; 176
    240e:	f0 e0       	ldi	r31, 0x00	; 0
    2410:	80 81       	ld	r24, Z
    2412:	81 60       	ori	r24, 0x01	; 1
    2414:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1028
//#else
  // Timer 2 not finished (may not be present on this CPU)
#endif

#if defined(TCCR3B) && defined(CS31) && defined(WGM30)
  TCCR3B |= _BV(CS31) | _BV(CS30); // Set timer 3 prescale factor to 64
    2416:	e1 e9       	ldi	r30, 0x91	; 145
    2418:	f0 e0       	ldi	r31, 0x00	; 0
    241a:	80 81       	ld	r24, Z
    241c:	83 60       	ori	r24, 0x03	; 3
    241e:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1029
  TCCR3A |= _BV(WGM30);            // Put timer 3 in 8-bit phase correct pwm mode
    2420:	e0 e9       	ldi	r30, 0x90	; 144
    2422:	f0 e0       	ldi	r31, 0x00	; 0
    2424:	80 81       	ld	r24, Z
    2426:	81 60       	ori	r24, 0x01	; 1
    2428:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1050
#endif

#if defined(ADCSRA)
  // set a2d prescaler so we are inside the desired 50-200 KHz range.
  #if F_CPU >= 16000000 // 16 MHz / 128 = 125 KHz
    ADCSRA = _BV(ADPS2) | _BV(ADPS1) | _BV(ADPS0) | _BV(ADEN);
    242a:	87 e8       	ldi	r24, 0x87	; 135
    242c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <__TEXT_REGION_LENGTH__+0x7e007a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1070
  // here so they can be used as normal digital i/o; they will be
  // reconnected in Serial.begin()
#if defined(UCSRB)
  UCSRB = 0;
#elif defined(UCSR0B)
  UCSR0B = 0;
    2430:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring.c:1072
#endif
}
    2434:	08 95       	ret

00002436 <turnOffPWM>:
turnOffPWM():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:77
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
  switch (timer)
    2436:	82 50       	subi	r24, 0x02	; 2
    2438:	8a 30       	cpi	r24, 0x0A	; 10
    243a:	88 f5       	brcc	.+98     	; 0x249e <turnOffPWM+0x68>
    243c:	e8 2f       	mov	r30, r24
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	ec 5d       	subi	r30, 0xDC	; 220
    2442:	fd 4e       	sbci	r31, 0xED	; 237
    2444:	0c 94 dd 19 	jmp	0x33ba	; 0x33ba <__tablejump2__>
    2448:	4c 12       	cpse	r4, r28
    244a:	50 12       	cpse	r5, r16
    244c:	2e 12       	cpse	r2, r30
    244e:	34 12       	cpse	r3, r20
    2450:	4f 12       	cpse	r4, r31
    2452:	4f 12       	cpse	r4, r31
    2454:	38 12       	cpse	r3, r24
    2456:	3e 12       	cpse	r3, r30
    2458:	42 12       	cpse	r4, r18
    245a:	48 12       	cpse	r4, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:82
  {
    // Timer1
    #if defined(TCCR1A) && defined(COM1A1)
      case TIMER1A:
        TCCR1A &= ~_BV(COM1A1);
    245c:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    2460:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2462:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:88
        break;
    2466:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:87
        TCCR1A &= ~_BV(COM1A1);
        break;
    #endif
    #if defined(TCCR1A) && defined(COM1B1)
      case TIMER1B:
        TCCR1A &= ~_BV(COM1B1);
    2468:	80 91 80 00 	lds	r24, 0x0080	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    246c:	8f 7d       	andi	r24, 0xDF	; 223
    246e:	f9 cf       	rjmp	.-14     	; 0x2462 <turnOffPWM+0x2c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:104
        TCCR2 &= ~_BV(COM21);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2A1)
      case TIMER2A:
        TCCR2A &= ~_BV(COM2A1);
    2470:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2474:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    2476:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:110
        break;
    247a:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:109
        TCCR2A &= ~_BV(COM2A1);
        break;
    #endif
    #if defined(TCCR2A) && defined(COM2B1)
      case TIMER2B:
        TCCR2A &= ~_BV(COM2B1);
    247c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
    2480:	8f 7d       	andi	r24, 0xDF	; 223
    2482:	f9 cf       	rjmp	.-14     	; 0x2476 <turnOffPWM+0x40>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:116
    #endif

    // Timer3
    #if defined(TCCR3A) && defined(COM3A1)
      case TIMER3A:
        TCCR3A &= ~_BV(COM3A1);
    2484:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2488:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    248a:	80 93 90 00 	sts	0x0090, r24	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:122
        break;
    248e:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:121
        TCCR3A &= ~_BV(COM3A1);
        break;
    #endif
    #if defined(TCCR3A) && defined(COM3B1)
      case TIMER3B:
        TCCR3A &= ~_BV(COM3B1);
    2490:	80 91 90 00 	lds	r24, 0x0090	; 0x800090 <__TEXT_REGION_LENGTH__+0x7e0090>
    2494:	8f 7d       	andi	r24, 0xDF	; 223
    2496:	f9 cf       	rjmp	.-14     	; 0x248a <turnOffPWM+0x54>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:176
        TCCR0 &= ~_BV(COM01);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0A1)
      case TIMER0A:
        TCCR0A &= ~_BV(COM0A1);
    2498:	84 b5       	in	r24, 0x24	; 36
    249a:	8f 77       	andi	r24, 0x7F	; 127
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    249c:	84 bd       	out	0x24, r24	; 36
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:185
        break;
    #endif
  }
}
    249e:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:181
        TCCR0A &= ~_BV(COM0A1);
        break;
    #endif
    #if defined(TCCR0A) && defined(COM0B1)
      case TIMER0B:
        TCCR0A &= ~_BV(COM0B1);
    24a0:	84 b5       	in	r24, 0x24	; 36
    24a2:	8f 7d       	andi	r24, 0xDF	; 223
    24a4:	fb cf       	rjmp	.-10     	; 0x249c <turnOffPWM+0x66>

000024a6 <pinMode>:
pinMode():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:30
#define ARDUINO_MAIN
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
    24a6:	cf 93       	push	r28
    24a8:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:31
  uint8_t bit = digitalPinToBitMask(pin);
    24aa:	90 e0       	ldi	r25, 0x00	; 0
    24ac:	fc 01       	movw	r30, r24
    24ae:	ee 54       	subi	r30, 0x4E	; 78
    24b0:	ff 4f       	sbci	r31, 0xFF	; 255
    24b2:	24 91       	lpm	r18, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:32
  uint8_t port = digitalPinToPort(pin);
    24b4:	8e 52       	subi	r24, 0x2E	; 46
    24b6:	9f 4f       	sbci	r25, 0xFF	; 255
    24b8:	fc 01       	movw	r30, r24
    24ba:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:35
  volatile uint8_t *reg, *out;

  if (port == NOT_A_PIN) return;
    24bc:	88 23       	and	r24, r24
    24be:	c9 f0       	breq	.+50     	; 0x24f2 <pinMode+0x4c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:38

  // JWS: can I let the optimizer do this?
  reg = portModeRegister(port);
    24c0:	90 e0       	ldi	r25, 0x00	; 0
    24c2:	88 0f       	add	r24, r24
    24c4:	99 1f       	adc	r25, r25
    24c6:	fc 01       	movw	r30, r24
    24c8:	ea 5f       	subi	r30, 0xFA	; 250
    24ca:	fe 4f       	sbci	r31, 0xFE	; 254
    24cc:	a5 91       	lpm	r26, Z+
    24ce:	b4 91       	lpm	r27, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:39
  out = portOutputRegister(port);
    24d0:	fc 01       	movw	r30, r24
    24d2:	e4 50       	subi	r30, 0x04	; 4
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	c5 91       	lpm	r28, Z+
    24d8:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:41

  if (mode == INPUT) { 
    24da:	61 11       	cpse	r22, r1
    24dc:	0d c0       	rjmp	.+26     	; 0x24f8 <pinMode+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:42
    uint8_t oldSREG = SREG;
    24de:	9f b7       	in	r25, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:43
    cli();
    24e0:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:44
    *reg &= ~bit;
    24e2:	8c 91       	ld	r24, X
    24e4:	20 95       	com	r18
    24e6:	82 23       	and	r24, r18
    24e8:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:45
    *out &= ~bit;
    24ea:	88 81       	ld	r24, Y
    24ec:	28 23       	and	r18, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out |= bit;
    24ee:	28 83       	st	Y, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:52
    SREG = oldSREG;
    24f0:	9f bf       	out	0x3f, r25	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:59
    uint8_t oldSREG = SREG;
    cli();
    *reg |= bit;
    SREG = oldSREG;
  }
}
    24f2:	df 91       	pop	r29
    24f4:	cf 91       	pop	r28
    24f6:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:47
    uint8_t oldSREG = SREG;
    cli();
    *reg &= ~bit;
    *out &= ~bit;
    SREG = oldSREG;
  } else if (mode == INPUT_PULLUP) {
    24f8:	62 30       	cpi	r22, 0x02	; 2
    24fa:	51 f4       	brne	.+20     	; 0x2510 <pinMode+0x6a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:48
    uint8_t oldSREG = SREG;
    24fc:	9f b7       	in	r25, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:49
    cli();
    24fe:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:50
    *reg &= ~bit;
    2500:	3c 91       	ld	r19, X
    2502:	82 2f       	mov	r24, r18
    2504:	80 95       	com	r24
    2506:	83 23       	and	r24, r19
    2508:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:51
    *out |= bit;
    250a:	e8 81       	ld	r30, Y
    250c:	2e 2b       	or	r18, r30
    250e:	ef cf       	rjmp	.-34     	; 0x24ee <pinMode+0x48>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:54
    SREG = oldSREG;
  } else {
    uint8_t oldSREG = SREG;
    2510:	8f b7       	in	r24, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:55
    cli();
    2512:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:56
    *reg |= bit;
    2514:	ec 91       	ld	r30, X
    2516:	2e 2b       	or	r18, r30
    2518:	2c 93       	st	X, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:57
    SREG = oldSREG;
    251a:	8f bf       	out	0x3f, r24	; 63
    251c:	ea cf       	rjmp	.-44     	; 0x24f2 <pinMode+0x4c>

0000251e <digitalWrite>:
digitalWrite():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:188
    #endif
  }
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    251e:	1f 93       	push	r17
    2520:	cf 93       	push	r28
    2522:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:189
  uint8_t timer = digitalPinToTimer(pin);
    2524:	28 2f       	mov	r18, r24
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	f9 01       	movw	r30, r18
    252a:	ee 56       	subi	r30, 0x6E	; 110
    252c:	ff 4f       	sbci	r31, 0xFF	; 255
    252e:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:190
  uint8_t bit = digitalPinToBitMask(pin);
    2530:	f9 01       	movw	r30, r18
    2532:	ee 54       	subi	r30, 0x4E	; 78
    2534:	ff 4f       	sbci	r31, 0xFF	; 255
    2536:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:191
  uint8_t port = digitalPinToPort(pin);
    2538:	f9 01       	movw	r30, r18
    253a:	ee 52       	subi	r30, 0x2E	; 46
    253c:	ff 4f       	sbci	r31, 0xFF	; 255
    253e:	c4 91       	lpm	r28, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:194
  volatile uint8_t *out;

  if (port == NOT_A_PIN) return;
    2540:	cc 23       	and	r28, r28
    2542:	a9 f0       	breq	.+42     	; 0x256e <digitalWrite+0x50>
    2544:	16 2f       	mov	r17, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198

  // If the pin that support PWM output, we need to turn it off
  // before doing a digital write.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    2546:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:198 (discriminator 1)
    2548:	0e 94 1b 12 	call	0x2436	; 0x2436 <turnOffPWM>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:200

  out = portOutputRegister(port);
    254c:	ec 2f       	mov	r30, r28
    254e:	f0 e0       	ldi	r31, 0x00	; 0
    2550:	ee 0f       	add	r30, r30
    2552:	ff 1f       	adc	r31, r31
    2554:	e4 50       	subi	r30, 0x04	; 4
    2556:	ff 4f       	sbci	r31, 0xFF	; 255
    2558:	a5 91       	lpm	r26, Z+
    255a:	b4 91       	lpm	r27, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:202

  uint8_t oldSREG = SREG;
    255c:	8f b7       	in	r24, 0x3f	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:203
  cli();
    255e:	f8 94       	cli
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206

  if (val == LOW) {
    *out &= ~bit;
    2560:	ec 91       	ld	r30, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:205
  out = portOutputRegister(port);

  uint8_t oldSREG = SREG;
  cli();

  if (val == LOW) {
    2562:	11 11       	cpse	r17, r1
    2564:	08 c0       	rjmp	.+16     	; 0x2576 <digitalWrite+0x58>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:206
    *out &= ~bit;
    2566:	d0 95       	com	r29
    2568:	de 23       	and	r29, r30
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  } else {
    *out |= bit;
    256a:	dc 93       	st	X, r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:211
  }

  SREG = oldSREG;
    256c:	8f bf       	out	0x3f, r24	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:212
}
    256e:	df 91       	pop	r29
    2570:	cf 91       	pop	r28
    2572:	1f 91       	pop	r17
    2574:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:208
  cli();

  if (val == LOW) {
    *out &= ~bit;
  } else {
    *out |= bit;
    2576:	de 2b       	or	r29, r30
    2578:	f8 cf       	rjmp	.-16     	; 0x256a <digitalWrite+0x4c>

0000257a <digitalRead>:
digitalRead():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:215

  SREG = oldSREG;
}

int digitalRead(uint8_t pin)
{
    257a:	cf 93       	push	r28
    257c:	df 93       	push	r29
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:216
  uint8_t timer = digitalPinToTimer(pin);
    257e:	28 2f       	mov	r18, r24
    2580:	30 e0       	ldi	r19, 0x00	; 0
    2582:	f9 01       	movw	r30, r18
    2584:	ee 56       	subi	r30, 0x6E	; 110
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	84 91       	lpm	r24, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:217
  uint8_t bit = digitalPinToBitMask(pin);
    258a:	f9 01       	movw	r30, r18
    258c:	ee 54       	subi	r30, 0x4E	; 78
    258e:	ff 4f       	sbci	r31, 0xFF	; 255
    2590:	d4 91       	lpm	r29, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:218
  uint8_t port = digitalPinToPort(pin);
    2592:	f9 01       	movw	r30, r18
    2594:	ee 52       	subi	r30, 0x2E	; 46
    2596:	ff 4f       	sbci	r31, 0xFF	; 255
    2598:	c4 91       	lpm	r28, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220

  if (port == NOT_A_PIN) return LOW;
    259a:	cc 23       	and	r28, r28
    259c:	a1 f0       	breq	.+40     	; 0x25c6 <digitalRead+0x4c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224

  // If the pin that support PWM output, we need to turn it off
  // before getting a digital reading.
  if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    259e:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:224 (discriminator 1)
    25a0:	0e 94 1b 12 	call	0x2436	; 0x2436 <turnOffPWM>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:226

  if (*portInputRegister(port) & bit) return HIGH;
    25a4:	ec 2f       	mov	r30, r28
    25a6:	f0 e0       	ldi	r31, 0x00	; 0
    25a8:	ee 0f       	add	r30, r30
    25aa:	ff 1f       	adc	r31, r31
    25ac:	ee 50       	subi	r30, 0x0E	; 14
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	a5 91       	lpm	r26, Z+
    25b2:	b4 91       	lpm	r27, Z
    25b4:	ec 91       	ld	r30, X
    25b6:	ed 23       	and	r30, r29
    25b8:	81 e0       	ldi	r24, 0x01	; 1
    25ba:	90 e0       	ldi	r25, 0x00	; 0
    25bc:	09 f4       	brne	.+2      	; 0x25c0 <digitalRead+0x46>
    25be:	80 e0       	ldi	r24, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:228
  return LOW;
}
    25c0:	df 91       	pop	r29
    25c2:	cf 91       	pop	r28
    25c4:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_digital.c:220
{
  uint8_t timer = digitalPinToTimer(pin);
  uint8_t bit = digitalPinToBitMask(pin);
  uint8_t port = digitalPinToPort(pin);

  if (port == NOT_A_PIN) return LOW;
    25c6:	80 e0       	ldi	r24, 0x00	; 0
    25c8:	90 e0       	ldi	r25, 0x00	; 0
    25ca:	fa cf       	rjmp	.-12     	; 0x25c0 <digitalRead+0x46>

000025cc <shiftOut>:
shiftOut():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:41
  }
  return value;
}

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
    25cc:	bf 92       	push	r11
    25ce:	cf 92       	push	r12
    25d0:	df 92       	push	r13
    25d2:	ef 92       	push	r14
    25d4:	ff 92       	push	r15
    25d6:	0f 93       	push	r16
    25d8:	1f 93       	push	r17
    25da:	cf 93       	push	r28
    25dc:	df 93       	push	r29
    25de:	c8 2e       	mov	r12, r24
    25e0:	d6 2e       	mov	r13, r22
    25e2:	b4 2e       	mov	r11, r20
    25e4:	d0 e0       	ldi	r29, 0x00	; 0
    25e6:	c0 e0       	ldi	r28, 0x00	; 0
    25e8:	02 2f       	mov	r16, r18
    25ea:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:48

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    25ec:	87 e0       	ldi	r24, 0x07	; 7
    25ee:	e8 2e       	mov	r14, r24
    25f0:	f1 2c       	mov	r15, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:46
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
      digitalWrite(dataPin, !!(val & (1 << i)));
    25f2:	b8 01       	movw	r22, r16
    25f4:	8c 2f       	mov	r24, r28
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:45
void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    if (bitOrder == LSBFIRST)
    25f6:	bb 20       	and	r11, r11
    25f8:	19 f0       	breq	.+6      	; 0x2600 <shiftOut+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:48
      digitalWrite(dataPin, !!(val & (1 << i)));
    else  
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
    25fa:	c7 01       	movw	r24, r14
    25fc:	8c 1b       	sub	r24, r28
    25fe:	9d 0b       	sbc	r25, r29
    2600:	02 c0       	rjmp	.+4      	; 0x2606 <shiftOut+0x3a>
    2602:	75 95       	asr	r23
    2604:	67 95       	ror	r22
    2606:	8a 95       	dec	r24
    2608:	e2 f7       	brpl	.-8      	; 0x2602 <shiftOut+0x36>
    260a:	61 70       	andi	r22, 0x01	; 1
    260c:	8c 2d       	mov	r24, r12
    260e:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:50
      
    digitalWrite(clockPin, HIGH);
    2612:	61 e0       	ldi	r22, 0x01	; 1
    2614:	8d 2d       	mov	r24, r13
    2616:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:51
    digitalWrite(clockPin, LOW);    
    261a:	60 e0       	ldi	r22, 0x00	; 0
    261c:	8d 2d       	mov	r24, r13
    261e:	0e 94 8f 12 	call	0x251e	; 0x251e <digitalWrite>
    2622:	21 96       	adiw	r28, 0x01	; 1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:44

void shiftOut(uint8_t dataPin, uint8_t clockPin, uint8_t bitOrder, uint8_t val)
{
  uint8_t i;

  for (i = 0; i < 8; i++)  {
    2624:	c8 30       	cpi	r28, 0x08	; 8
    2626:	d1 05       	cpc	r29, r1
    2628:	21 f7       	brne	.-56     	; 0x25f2 <shiftOut+0x26>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/wiring_shift.c:53
      digitalWrite(dataPin, !!(val & (1 << (7 - i))));
      
    digitalWrite(clockPin, HIGH);
    digitalWrite(clockPin, LOW);    
  }
}
    262a:	df 91       	pop	r29
    262c:	cf 91       	pop	r28
    262e:	1f 91       	pop	r17
    2630:	0f 91       	pop	r16
    2632:	ff 90       	pop	r15
    2634:	ef 90       	pop	r14
    2636:	df 90       	pop	r13
    2638:	cf 90       	pop	r12
    263a:	bf 90       	pop	r11
    263c:	08 95       	ret

0000263e <HardwareSerial::available()>:
_ZN14HardwareSerial9availableEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:150
  // clear any received data
  _rx_buffer_head = _rx_buffer_tail;
}

int HardwareSerial::available(void)
{
    263e:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:151
  return ((unsigned int)(SERIAL_RX_BUFFER_SIZE + _rx_buffer_head - _rx_buffer_tail)) % SERIAL_RX_BUFFER_SIZE;
    2640:	91 8d       	ldd	r25, Z+25	; 0x19
    2642:	22 8d       	ldd	r18, Z+26	; 0x1a
    2644:	89 2f       	mov	r24, r25
    2646:	90 e0       	ldi	r25, 0x00	; 0
    2648:	80 5c       	subi	r24, 0xC0	; 192
    264a:	9f 4f       	sbci	r25, 0xFF	; 255
    264c:	82 1b       	sub	r24, r18
    264e:	91 09       	sbc	r25, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:152
}
    2650:	8f 73       	andi	r24, 0x3F	; 63
    2652:	99 27       	eor	r25, r25
    2654:	08 95       	ret

00002656 <HardwareSerial::peek()>:
_ZN14HardwareSerial4peekEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:155

int HardwareSerial::peek(void)
{
    2656:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:156
  if (_rx_buffer_head == _rx_buffer_tail) {
    2658:	91 8d       	ldd	r25, Z+25	; 0x19
    265a:	82 8d       	ldd	r24, Z+26	; 0x1a
    265c:	98 17       	cp	r25, r24
    265e:	31 f0       	breq	.+12     	; 0x266c <HardwareSerial::peek()+0x16>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:159
    return -1;
  } else {
    return _rx_buffer[_rx_buffer_tail];
    2660:	82 8d       	ldd	r24, Z+26	; 0x1a
    2662:	e8 0f       	add	r30, r24
    2664:	f1 1d       	adc	r31, r1
    2666:	85 8d       	ldd	r24, Z+29	; 0x1d
    2668:	90 e0       	ldi	r25, 0x00	; 0
    266a:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:157
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    266c:	8f ef       	ldi	r24, 0xFF	; 255
    266e:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:161
  } else {
    return _rx_buffer[_rx_buffer_tail];
  }
}
    2670:	08 95       	ret

00002672 <HardwareSerial::read()>:
_ZN14HardwareSerial4readEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:164

int HardwareSerial::read(void)
{
    2672:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:166
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    2674:	91 8d       	ldd	r25, Z+25	; 0x19
    2676:	82 8d       	ldd	r24, Z+26	; 0x1a
    2678:	98 17       	cp	r25, r24
    267a:	61 f0       	breq	.+24     	; 0x2694 <HardwareSerial::read()+0x22>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:169
    return -1;
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    267c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    267e:	ae 0f       	add	r26, r30
    2680:	bf 2f       	mov	r27, r31
    2682:	b1 1d       	adc	r27, r1
    2684:	5d 96       	adiw	r26, 0x1d	; 29
    2686:	8c 91       	ld	r24, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:170
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    2688:	92 8d       	ldd	r25, Z+26	; 0x1a
    268a:	9f 5f       	subi	r25, 0xFF	; 255
    268c:	9f 73       	andi	r25, 0x3F	; 63
    268e:	92 8f       	std	Z+26, r25	; 0x1a
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:171
    return c;
    2690:	90 e0       	ldi	r25, 0x00	; 0
    2692:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:167

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer_head == _rx_buffer_tail) {
    return -1;
    2694:	8f ef       	ldi	r24, 0xFF	; 255
    2696:	9f ef       	ldi	r25, 0xFF	; 255
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:173
  } else {
    unsigned char c = _rx_buffer[_rx_buffer_tail];
    _rx_buffer_tail = (rx_buffer_index_t)(_rx_buffer_tail + 1) % SERIAL_RX_BUFFER_SIZE;
    return c;
  }
}
    2698:	08 95       	ret

0000269a <HardwareSerial::availableForWrite()>:
_ZN14HardwareSerial17availableForWriteEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:181
{
#if (SERIAL_TX_BUFFER_SIZE>256)
  uint8_t oldSREG = SREG;
  cli();
#endif
  tx_buffer_index_t head = _tx_buffer_head;
    269a:	fc 01       	movw	r30, r24
    269c:	53 8d       	ldd	r21, Z+27	; 0x1b
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:182
  tx_buffer_index_t tail = _tx_buffer_tail;
    269e:	44 8d       	ldd	r20, Z+28	; 0x1c
    26a0:	25 2f       	mov	r18, r21
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	84 2f       	mov	r24, r20
    26a6:	90 e0       	ldi	r25, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186
#if (SERIAL_TX_BUFFER_SIZE>256)
  SREG = oldSREG;
#endif
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
    26a8:	82 1b       	sub	r24, r18
    26aa:	93 0b       	sbc	r25, r19
    26ac:	54 17       	cp	r21, r20
    26ae:	10 f0       	brcs	.+4      	; 0x26b4 <HardwareSerial::availableForWrite()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:186 (discriminator 1)
    26b0:	cf 96       	adiw	r24, 0x3f	; 63
    26b2:	08 95       	ret
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:187
  return tail - head - 1;
    26b4:	01 97       	sbiw	r24, 0x01	; 1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:188
}
    26b6:	08 95       	ret

000026b8 <serialEventRun()>:
_Z14serialEventRunv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
#endif

void serialEventRun(void)
{
#if defined(HAVE_HWSERIAL0)
  if (Serial0_available && serialEvent && Serial0_available()) serialEvent();
    26b8:	87 eb       	ldi	r24, 0xB7	; 183
    26ba:	94 e1       	ldi	r25, 0x14	; 20
    26bc:	89 2b       	or	r24, r25
    26be:	49 f0       	breq	.+18     	; 0x26d2 <serialEventRun()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 1)
    26c0:	80 e0       	ldi	r24, 0x00	; 0
    26c2:	90 e0       	ldi	r25, 0x00	; 0
    26c4:	89 2b       	or	r24, r25
    26c6:	29 f0       	breq	.+10     	; 0x26d2 <serialEventRun()+0x1a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66 (discriminator 3)
    26c8:	0e 94 b7 14 	call	0x296e	; 0x296e <Serial0_available()>
    26cc:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:66
    26ce:	0e 94 00 00 	call	0	; 0x0 <__vectors>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
#endif
#if defined(HAVE_HWSERIAL1)
  if (Serial1_available && serialEvent1 && Serial1_available()) serialEvent1();
    26d2:	80 e0       	ldi	r24, 0x00	; 0
    26d4:	90 e0       	ldi	r25, 0x00	; 0
    26d6:	89 2b       	or	r24, r25
    26d8:	49 f0       	breq	.+18     	; 0x26ec <serialEventRun()+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 1)
    26da:	80 e0       	ldi	r24, 0x00	; 0
    26dc:	90 e0       	ldi	r25, 0x00	; 0
    26de:	89 2b       	or	r24, r25
    26e0:	29 f0       	breq	.+10     	; 0x26ec <serialEventRun()+0x34>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69 (discriminator 3)
    26e2:	0e 94 00 00 	call	0	; 0x0 <__vectors>
    26e6:	81 11       	cpse	r24, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:69
    26e8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:77
  if (Serial2_available && serialEvent2 && Serial2_available()) serialEvent2();
#endif
#if defined(HAVE_HWSERIAL3)
  if (Serial3_available && serialEvent3 && Serial3_available()) serialEvent3();
#endif
}
    26ec:	08 95       	ret

000026ee <HardwareSerial::_tx_udr_empty_irq()>:
_ZN14HardwareSerial17_tx_udr_empty_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:82

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_tx_udr_empty_irq(void)
{
    26ee:	fc 01       	movw	r30, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:85
  // If interrupts are enabled, there must be more data in the output
  // buffer. Send the next byte
  unsigned char c = _tx_buffer[_tx_buffer_tail];
    26f0:	a4 8d       	ldd	r26, Z+28	; 0x1c
    26f2:	a8 0f       	add	r26, r24
    26f4:	b9 2f       	mov	r27, r25
    26f6:	b1 1d       	adc	r27, r1
    26f8:	a3 5a       	subi	r26, 0xA3	; 163
    26fa:	bf 4f       	sbci	r27, 0xFF	; 255
    26fc:	2c 91       	ld	r18, X
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:86
  _tx_buffer_tail = (_tx_buffer_tail + 1) % SERIAL_TX_BUFFER_SIZE;
    26fe:	84 8d       	ldd	r24, Z+28	; 0x1c
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	01 96       	adiw	r24, 0x01	; 1
    2704:	8f 73       	andi	r24, 0x3F	; 63
    2706:	99 27       	eor	r25, r25
    2708:	84 8f       	std	Z+28, r24	; 0x1c
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:88

  *_udr = c;
    270a:	a6 89       	ldd	r26, Z+22	; 0x16
    270c:	b7 89       	ldd	r27, Z+23	; 0x17
    270e:	2c 93       	st	X, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:93

  // clear the TXC bit -- "can be cleared by writing a one to its bit
  // location". This makes sure flush() won't return until the bytes
  // actually got written
  *_ucsra |= _BV(TXC0);
    2710:	a0 89       	ldd	r26, Z+16	; 0x10
    2712:	b1 89       	ldd	r27, Z+17	; 0x11
    2714:	8c 91       	ld	r24, X
    2716:	80 64       	ori	r24, 0x40	; 64
    2718:	8c 93       	st	X, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:95

  if (_tx_buffer_head == _tx_buffer_tail) {
    271a:	93 8d       	ldd	r25, Z+27	; 0x1b
    271c:	84 8d       	ldd	r24, Z+28	; 0x1c
    271e:	98 13       	cpse	r25, r24
    2720:	06 c0       	rjmp	.+12     	; 0x272e <HardwareSerial::_tx_udr_empty_irq()+0x40>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:97
    // Buffer empty, so disable interrupts
    *_ucsrb &= ~_BV(UDRIE0);
    2722:	02 88       	ldd	r0, Z+18	; 0x12
    2724:	f3 89       	ldd	r31, Z+19	; 0x13
    2726:	e0 2d       	mov	r30, r0
    2728:	80 81       	ld	r24, Z
    272a:	8f 7d       	andi	r24, 0xDF	; 223
    272c:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:99
  }
}
    272e:	08 95       	ret

00002730 <HardwareSerial::flush()>:
_ZN14HardwareSerial5flushEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:191
  if (head >= tail) return SERIAL_TX_BUFFER_SIZE - 1 - head + tail;
  return tail - head - 1;
}

void HardwareSerial::flush()
{
    2730:	cf 93       	push	r28
    2732:	df 93       	push	r29
    2734:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:195
  // If we have never written a byte, no need to flush. This special
  // case is needed since there is no way to force the TXC (transmit
  // complete) bit to 1 during initialization
  if (!_written)
    2736:	88 8d       	ldd	r24, Y+24	; 0x18
    2738:	88 23       	and	r24, r24
    273a:	b9 f0       	breq	.+46     	; 0x276a <HardwareSerial::flush()+0x3a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:198
    return;

  while (bit_is_set(*_ucsrb, UDRIE0) || bit_is_clear(*_ucsra, TXC0)) {
    273c:	aa 89       	ldd	r26, Y+18	; 0x12
    273e:	bb 89       	ldd	r27, Y+19	; 0x13
    2740:	e8 89       	ldd	r30, Y+16	; 0x10
    2742:	f9 89       	ldd	r31, Y+17	; 0x11
    2744:	8c 91       	ld	r24, X
    2746:	85 fd       	sbrc	r24, 5
    2748:	03 c0       	rjmp	.+6      	; 0x2750 <HardwareSerial::flush()+0x20>
    274a:	80 81       	ld	r24, Z
    274c:	86 fd       	sbrc	r24, 6
    274e:	0d c0       	rjmp	.+26     	; 0x276a <HardwareSerial::flush()+0x3a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:199
    if (bit_is_clear(SREG, SREG_I) && bit_is_set(*_ucsrb, UDRIE0))
    2750:	0f b6       	in	r0, 0x3f	; 63
    2752:	07 fc       	sbrc	r0, 7
    2754:	f7 cf       	rjmp	.-18     	; 0x2744 <HardwareSerial::flush()+0x14>
    2756:	8c 91       	ld	r24, X
    2758:	85 ff       	sbrs	r24, 5
    275a:	f2 cf       	rjmp	.-28     	; 0x2740 <HardwareSerial::flush()+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:203
      // Interrupts are globally disabled, but the DR empty
      // interrupt should be enabled, so poll the DR empty flag to
      // prevent deadlock
      if (bit_is_set(*_ucsra, UDRE0))
    275c:	80 81       	ld	r24, Z
    275e:	85 ff       	sbrs	r24, 5
    2760:	ed cf       	rjmp	.-38     	; 0x273c <HardwareSerial::flush()+0xc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:204
        _tx_udr_empty_irq();
    2762:	ce 01       	movw	r24, r28
    2764:	0e 94 77 13 	call	0x26ee	; 0x26ee <HardwareSerial::_tx_udr_empty_irq()>
    2768:	e9 cf       	rjmp	.-46     	; 0x273c <HardwareSerial::flush()+0xc>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:208
  }
  // If we get here, nothing is queued anymore (DRIE is disabled) and
  // the hardware finished tranmission (TXC is set).
}
    276a:	df 91       	pop	r29
    276c:	cf 91       	pop	r28
    276e:	08 95       	ret

00002770 <HardwareSerial::write(unsigned char)>:
_ZN14HardwareSerial5writeEh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:211

size_t HardwareSerial::write(uint8_t c)
{
    2770:	ef 92       	push	r14
    2772:	ff 92       	push	r15
    2774:	0f 93       	push	r16
    2776:	1f 93       	push	r17
    2778:	cf 93       	push	r28
    277a:	df 93       	push	r29
    277c:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:212
  _written = true;
    277e:	81 e0       	ldi	r24, 0x01	; 1
    2780:	88 8f       	std	Y+24, r24	; 0x18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217
  // If the buffer and the data register is empty, just write the byte
  // to the data register and be done. This shortcut helps
  // significantly improve the effective datarate at high (>
  // 500kbit/s) bitrates, where interrupt overhead becomes a slowdown.
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    2782:	9b 8d       	ldd	r25, Y+27	; 0x1b
    2784:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2786:	98 13       	cpse	r25, r24
    2788:	16 c0       	rjmp	.+44     	; 0x27b6 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:217 (discriminator 1)
    278a:	e8 89       	ldd	r30, Y+16	; 0x10
    278c:	f9 89       	ldd	r31, Y+17	; 0x11
    278e:	80 81       	ld	r24, Z
    2790:	85 ff       	sbrs	r24, 5
    2792:	11 c0       	rjmp	.+34     	; 0x27b6 <HardwareSerial::write(unsigned char)+0x46>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:218
    *_udr = c;
    2794:	ee 89       	ldd	r30, Y+22	; 0x16
    2796:	ff 89       	ldd	r31, Y+23	; 0x17
    2798:	60 83       	st	Z, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:219
    *_ucsra |= _BV(TXC0);
    279a:	e8 89       	ldd	r30, Y+16	; 0x10
    279c:	f9 89       	ldd	r31, Y+17	; 0x11
    279e:	80 81       	ld	r24, Z
    27a0:	80 64       	ori	r24, 0x40	; 64
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242
  }

  _tx_buffer[_tx_buffer_head] = c;
  _tx_buffer_head = i;

  *_ucsrb |= _BV(UDRIE0);
    27a2:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:245
  
  return 1;
}
    27a4:	81 e0       	ldi	r24, 0x01	; 1
    27a6:	90 e0       	ldi	r25, 0x00	; 0
    27a8:	df 91       	pop	r29
    27aa:	cf 91       	pop	r28
    27ac:	1f 91       	pop	r17
    27ae:	0f 91       	pop	r16
    27b0:	ff 90       	pop	r15
    27b2:	ef 90       	pop	r14
    27b4:	08 95       	ret
    27b6:	f6 2e       	mov	r15, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:222
  if (_tx_buffer_head == _tx_buffer_tail && bit_is_set(*_ucsra, UDRE0)) {
    *_udr = c;
    *_ucsra |= _BV(TXC0);
    return 1;
  }
  tx_buffer_index_t i = (_tx_buffer_head + 1) % SERIAL_TX_BUFFER_SIZE;
    27b8:	0b 8d       	ldd	r16, Y+27	; 0x1b
    27ba:	10 e0       	ldi	r17, 0x00	; 0
    27bc:	0f 5f       	subi	r16, 0xFF	; 255
    27be:	1f 4f       	sbci	r17, 0xFF	; 255
    27c0:	0f 73       	andi	r16, 0x3F	; 63
    27c2:	11 27       	eor	r17, r17
    27c4:	e0 2e       	mov	r14, r16
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:226

  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  while (i == _tx_buffer_tail) {
    27c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    27c8:	8e 11       	cpse	r24, r14
    27ca:	0c c0       	rjmp	.+24     	; 0x27e4 <HardwareSerial::write(unsigned char)+0x74>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:227
    if (bit_is_clear(SREG, SREG_I)) {
    27cc:	0f b6       	in	r0, 0x3f	; 63
    27ce:	07 fc       	sbrc	r0, 7
    27d0:	fa cf       	rjmp	.-12     	; 0x27c6 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:232
      // Interrupts are disabled, so we'll have to poll the data
      // register empty flag ourselves. If it is set, pretend an
      // interrupt has happened and call the handler to free up
      // space for us.
      if(bit_is_set(*_ucsra, UDRE0))
    27d2:	e8 89       	ldd	r30, Y+16	; 0x10
    27d4:	f9 89       	ldd	r31, Y+17	; 0x11
    27d6:	80 81       	ld	r24, Z
    27d8:	85 ff       	sbrs	r24, 5
    27da:	f5 cf       	rjmp	.-22     	; 0x27c6 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:233
        _tx_udr_empty_irq();
    27dc:	ce 01       	movw	r24, r28
    27de:	0e 94 77 13 	call	0x26ee	; 0x26ee <HardwareSerial::_tx_udr_empty_irq()>
    27e2:	f1 cf       	rjmp	.-30     	; 0x27c6 <HardwareSerial::write(unsigned char)+0x56>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:239
    } else {
      // nop, the interrupt handler will free up space for us
    }
  }

  _tx_buffer[_tx_buffer_head] = c;
    27e4:	eb 8d       	ldd	r30, Y+27	; 0x1b
    27e6:	ec 0f       	add	r30, r28
    27e8:	fd 2f       	mov	r31, r29
    27ea:	f1 1d       	adc	r31, r1
    27ec:	e3 5a       	subi	r30, 0xA3	; 163
    27ee:	ff 4f       	sbci	r31, 0xFF	; 255
    27f0:	f0 82       	st	Z, r15
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:240
  _tx_buffer_head = i;
    27f2:	0b 8f       	std	Y+27, r16	; 0x1b
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:242

  *_ucsrb |= _BV(UDRIE0);
    27f4:	ea 89       	ldd	r30, Y+18	; 0x12
    27f6:	fb 89       	ldd	r31, Y+19	; 0x13
    27f8:	80 81       	ld	r24, Z
    27fa:	80 62       	ori	r24, 0x20	; 32
    27fc:	d2 cf       	rjmp	.-92     	; 0x27a2 <HardwareSerial::write(unsigned char)+0x32>

000027fe <HardwareSerial::begin(unsigned long, unsigned char)>:
_ZN14HardwareSerial5beginEmh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:104
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
    27fe:	cf 92       	push	r12
    2800:	df 92       	push	r13
    2802:	ef 92       	push	r14
    2804:	ff 92       	push	r15
    2806:	1f 93       	push	r17
    2808:	cf 93       	push	r28
    280a:	df 93       	push	r29
    280c:	ec 01       	movw	r28, r24
    280e:	6a 01       	movw	r12, r20
    2810:	7b 01       	movw	r14, r22
    2812:	12 2f       	mov	r17, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:107
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
  *_ucsra = 1 << U2X0;
    2814:	e8 89       	ldd	r30, Y+16	; 0x10
    2816:	f9 89       	ldd	r31, Y+17	; 0x11
    2818:	82 e0       	ldi	r24, 0x02	; 2
    281a:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    281c:	c1 14       	cp	r12, r1
    281e:	81 ee       	ldi	r24, 0xE1	; 225
    2820:	d8 06       	cpc	r13, r24
    2822:	e1 04       	cpc	r14, r1
    2824:	f1 04       	cpc	r15, r1
    2826:	a1 f0       	breq	.+40     	; 0x2850 <HardwareSerial::begin(unsigned long, unsigned char)+0x52>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:106 (discriminator 1)
// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud, byte config)
{
  // Try u2x mode first
  uint16_t baud_setting = (F_CPU / 4 / baud - 1) / 2;
    2828:	60 e0       	ldi	r22, 0x00	; 0
    282a:	79 e0       	ldi	r23, 0x09	; 9
    282c:	8d e3       	ldi	r24, 0x3D	; 61
    282e:	90 e0       	ldi	r25, 0x00	; 0
    2830:	a7 01       	movw	r20, r14
    2832:	96 01       	movw	r18, r12
    2834:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
    2838:	21 50       	subi	r18, 0x01	; 1
    283a:	31 09       	sbc	r19, r1
    283c:	41 09       	sbc	r20, r1
    283e:	51 09       	sbc	r21, r1
    2840:	56 95       	lsr	r21
    2842:	47 95       	ror	r20
    2844:	37 95       	ror	r19
    2846:	27 95       	ror	r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:114 (discriminator 1)
  // hardcoded exception for 57600 for compatibility with the bootloader
  // shipped with the Duemilanove and previous boards and the firmware
  // on the 8U2 on the Uno and Mega 2560. Also, The baud_setting cannot
  // be > 4095, so switch back to non-u2x mode if the baud rate is too
  // low.
  if (((F_CPU == 16000000UL) && (baud == 57600)) || (baud_setting >4095))
    2848:	21 15       	cp	r18, r1
    284a:	80 e1       	ldi	r24, 0x10	; 16
    284c:	38 07       	cpc	r19, r24
    284e:	98 f0       	brcs	.+38     	; 0x2876 <HardwareSerial::begin(unsigned long, unsigned char)+0x78>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:116
  {
    *_ucsra = 0;
    2850:	e8 89       	ldd	r30, Y+16	; 0x10
    2852:	f9 89       	ldd	r31, Y+17	; 0x11
    2854:	10 82       	st	Z, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:117
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
    2856:	60 e8       	ldi	r22, 0x80	; 128
    2858:	74 e8       	ldi	r23, 0x84	; 132
    285a:	8e e1       	ldi	r24, 0x1E	; 30
    285c:	90 e0       	ldi	r25, 0x00	; 0
    285e:	a7 01       	movw	r20, r14
    2860:	96 01       	movw	r18, r12
    2862:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
    2866:	21 50       	subi	r18, 0x01	; 1
    2868:	31 09       	sbc	r19, r1
    286a:	41 09       	sbc	r20, r1
    286c:	51 09       	sbc	r21, r1
    286e:	56 95       	lsr	r21
    2870:	47 95       	ror	r20
    2872:	37 95       	ror	r19
    2874:	27 95       	ror	r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:121
  }

  // assign the baud_setting, a.k.a. ubrr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
    2876:	ec 85       	ldd	r30, Y+12	; 0x0c
    2878:	fd 85       	ldd	r31, Y+13	; 0x0d
    287a:	30 83       	st	Z, r19
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:122
  *_ubrrl = baud_setting;
    287c:	ee 85       	ldd	r30, Y+14	; 0x0e
    287e:	ff 85       	ldd	r31, Y+15	; 0x0f
    2880:	20 83       	st	Z, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:124

  _written = false;
    2882:	18 8e       	std	Y+24, r1	; 0x18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:132
#if defined(__AVR_ATmega8__) || defined(__AVR_ATmega8515__) || defined(__AVR_ATmega162__) \
|| defined(__AVR_ATmega8535__) || defined(__AVR_ATmega16__)|| defined(__AVR_ATmega32__)   \
|| defined(__AVR_ATmega162__)
  config |= 0x80; // select UCSRC register (shared with UBRRH)
#endif
  *_ucsrc = config;
    2884:	ec 89       	ldd	r30, Y+20	; 0x14
    2886:	fd 89       	ldd	r31, Y+21	; 0x15
    2888:	10 83       	st	Z, r17
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:134
  
  *_ucsrb |= _BV(RXEN0) | _BV(TXEN0) | _BV(RXCIE0);
    288a:	ea 89       	ldd	r30, Y+18	; 0x12
    288c:	fb 89       	ldd	r31, Y+19	; 0x13
    288e:	80 81       	ld	r24, Z
    2890:	88 69       	ori	r24, 0x98	; 152
    2892:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:135
  *_ucsrb &= ~_BV(UDRIE0);
    2894:	ea 89       	ldd	r30, Y+18	; 0x12
    2896:	fb 89       	ldd	r31, Y+19	; 0x13
    2898:	80 81       	ld	r24, Z
    289a:	8f 7d       	andi	r24, 0xDF	; 223
    289c:	80 83       	st	Z, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial.cpp:136
}
    289e:	df 91       	pop	r29
    28a0:	cf 91       	pop	r28
    28a2:	1f 91       	pop	r17
    28a4:	ff 90       	pop	r15
    28a6:	ef 90       	pop	r14
    28a8:	df 90       	pop	r13
    28aa:	cf 90       	pop	r12
    28ac:	08 95       	ret

000028ae <__vector_20>:
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:50
#elif defined(USART_RXC_vect)
  ISR(USART_RXC_vect)
#else
  #error "Don't know what the Data Received vector is called for Serial"
#endif
  {
    28ae:	1f 92       	push	r1
    28b0:	0f 92       	push	r0
    28b2:	0f b6       	in	r0, 0x3f	; 63
    28b4:	0f 92       	push	r0
    28b6:	11 24       	eor	r1, r1
    28b8:	0b b6       	in	r0, 0x3b	; 59
    28ba:	0f 92       	push	r0
    28bc:	2f 93       	push	r18
    28be:	8f 93       	push	r24
    28c0:	9f 93       	push	r25
    28c2:	ef 93       	push	r30
    28c4:	ff 93       	push	r31
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:103

// Actual interrupt handlers //////////////////////////////////////////////////////////////

void HardwareSerial::_rx_complete_irq(void)
{
  if (bit_is_clear(*_ucsra, UPE0)) {
    28c6:	e0 91 be 05 	lds	r30, 0x05BE	; 0x8005be <Serial+0x10>
    28ca:	f0 91 bf 05 	lds	r31, 0x05BF	; 0x8005bf <Serial+0x11>
    28ce:	80 81       	ld	r24, Z
    28d0:	e0 91 c4 05 	lds	r30, 0x05C4	; 0x8005c4 <Serial+0x16>
    28d4:	f0 91 c5 05 	lds	r31, 0x05C5	; 0x8005c5 <Serial+0x17>
    28d8:	82 fd       	sbrc	r24, 2
    28da:	1d c0       	rjmp	.+58     	; 0x2916 <__vector_20+0x68>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:106
    // No Parity error, read byte and store it in the buffer if there is
    // room
    unsigned char c = *_udr;
    28dc:	90 81       	ld	r25, Z
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:107
    rx_buffer_index_t i = (unsigned int)(_rx_buffer_head + 1) % SERIAL_RX_BUFFER_SIZE;
    28de:	80 91 c7 05 	lds	r24, 0x05C7	; 0x8005c7 <Serial+0x19>
    28e2:	8f 5f       	subi	r24, 0xFF	; 255
    28e4:	8f 73       	andi	r24, 0x3F	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:113

    // if we should be storing the received character into the location
    // just before the tail (meaning that the head would advance to the
    // current location of the tail), we're about to overflow the buffer
    // and so we don't write the character or advance the head.
    if (i != _rx_buffer_tail) {
    28e6:	20 91 c8 05 	lds	r18, 0x05C8	; 0x8005c8 <Serial+0x1a>
    28ea:	82 17       	cp	r24, r18
    28ec:	41 f0       	breq	.+16     	; 0x28fe <__vector_20+0x50>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:114
      _rx_buffer[_rx_buffer_head] = c;
    28ee:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <Serial+0x19>
    28f2:	f0 e0       	ldi	r31, 0x00	; 0
    28f4:	e2 55       	subi	r30, 0x52	; 82
    28f6:	fa 4f       	sbci	r31, 0xFA	; 250
    28f8:	95 8f       	std	Z+29, r25	; 0x1d
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:115
      _rx_buffer_head = i;
    28fa:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <Serial+0x19>
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    Serial._rx_complete_irq();
  }
    28fe:	ff 91       	pop	r31
    2900:	ef 91       	pop	r30
    2902:	9f 91       	pop	r25
    2904:	8f 91       	pop	r24
    2906:	2f 91       	pop	r18
    2908:	0f 90       	pop	r0
    290a:	0b be       	out	0x3b, r0	; 59
    290c:	0f 90       	pop	r0
    290e:	0f be       	out	0x3f, r0	; 63
    2910:	0f 90       	pop	r0
    2912:	1f 90       	pop	r1
    2914:	18 95       	reti
_ZN14HardwareSerial16_rx_complete_irqEv():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:119
    }
  } else {
    // Parity error, read byte but discard it
    *_udr;
    2916:	80 81       	ld	r24, Z
__vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:52
    2918:	f2 cf       	rjmp	.-28     	; 0x28fe <__vector_20+0x50>

0000291a <__vector_21>:
__vector_21():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:63
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#else
  #error "Don't know what the Data Register Empty vector is called for Serial"
#endif
{
    291a:	1f 92       	push	r1
    291c:	0f 92       	push	r0
    291e:	0f b6       	in	r0, 0x3f	; 63
    2920:	0f 92       	push	r0
    2922:	11 24       	eor	r1, r1
    2924:	0b b6       	in	r0, 0x3b	; 59
    2926:	0f 92       	push	r0
    2928:	2f 93       	push	r18
    292a:	3f 93       	push	r19
    292c:	4f 93       	push	r20
    292e:	5f 93       	push	r21
    2930:	6f 93       	push	r22
    2932:	7f 93       	push	r23
    2934:	8f 93       	push	r24
    2936:	9f 93       	push	r25
    2938:	af 93       	push	r26
    293a:	bf 93       	push	r27
    293c:	ef 93       	push	r30
    293e:	ff 93       	push	r31
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:64
  Serial._tx_udr_empty_irq();
    2940:	8e ea       	ldi	r24, 0xAE	; 174
    2942:	95 e0       	ldi	r25, 0x05	; 5
    2944:	0e 94 77 13 	call	0x26ee	; 0x26ee <HardwareSerial::_tx_udr_empty_irq()>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:65
}
    2948:	ff 91       	pop	r31
    294a:	ef 91       	pop	r30
    294c:	bf 91       	pop	r27
    294e:	af 91       	pop	r26
    2950:	9f 91       	pop	r25
    2952:	8f 91       	pop	r24
    2954:	7f 91       	pop	r23
    2956:	6f 91       	pop	r22
    2958:	5f 91       	pop	r21
    295a:	4f 91       	pop	r20
    295c:	3f 91       	pop	r19
    295e:	2f 91       	pop	r18
    2960:	0f 90       	pop	r0
    2962:	0b be       	out	0x3b, r0	; 59
    2964:	0f 90       	pop	r0
    2966:	0f be       	out	0x3f, r0	; 63
    2968:	0f 90       	pop	r0
    296a:	1f 90       	pop	r1
    296c:	18 95       	reti

0000296e <Serial0_available()>:
_Z17Serial0_availablev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:76
#endif

// Function that can be weakly referenced by serialEventRun to prevent
// pulling in this file if it's not otherwise used.
bool Serial0_available() {
  return Serial.available();
    296e:	8e ea       	ldi	r24, 0xAE	; 174
    2970:	95 e0       	ldi	r25, 0x05	; 5
    2972:	0e 94 1f 13 	call	0x263e	; 0x263e <HardwareSerial::available()>
    2976:	21 e0       	ldi	r18, 0x01	; 1
    2978:	89 2b       	or	r24, r25
    297a:	09 f4       	brne	.+2      	; 0x297e <Serial0_available()+0x10>
    297c:	20 e0       	ldi	r18, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
}
    297e:	82 2f       	mov	r24, r18
    2980:	08 95       	ret

00002982 <_GLOBAL__sub_I___vector_20>:
_ZN5PrintC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.h:46
    2982:	ee ea       	ldi	r30, 0xAE	; 174
    2984:	f5 e0       	ldi	r31, 0x05	; 5
    2986:	13 82       	std	Z+3, r1	; 0x03
    2988:	12 82       	std	Z+2, r1	; 0x02
_ZN6StreamC4Ev():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Stream.h:63
    298a:	88 ee       	ldi	r24, 0xE8	; 232
    298c:	93 e0       	ldi	r25, 0x03	; 3
    298e:	a0 e0       	ldi	r26, 0x00	; 0
    2990:	b0 e0       	ldi	r27, 0x00	; 0
    2992:	84 83       	std	Z+4, r24	; 0x04
    2994:	95 83       	std	Z+5, r25	; 0x05
    2996:	a6 83       	std	Z+6, r26	; 0x06
    2998:	b7 83       	std	Z+7, r27	; 0x07
_ZN14HardwareSerialC4EPVhS1_S1_S1_S1_S1_():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial_private.h:95
  volatile uint8_t *ucsrc, volatile uint8_t *udr) :
    _ubrrh(ubrrh), _ubrrl(ubrrl),
    _ucsra(ucsra), _ucsrb(ucsrb), _ucsrc(ucsrc),
    _udr(udr),
    _rx_buffer_head(0), _rx_buffer_tail(0),
    _tx_buffer_head(0), _tx_buffer_tail(0)
    299a:	82 ed       	ldi	r24, 0xD2	; 210
    299c:	93 e0       	ldi	r25, 0x03	; 3
    299e:	91 83       	std	Z+1, r25	; 0x01
    29a0:	80 83       	st	Z, r24
    29a2:	85 ec       	ldi	r24, 0xC5	; 197
    29a4:	90 e0       	ldi	r25, 0x00	; 0
    29a6:	95 87       	std	Z+13, r25	; 0x0d
    29a8:	84 87       	std	Z+12, r24	; 0x0c
    29aa:	84 ec       	ldi	r24, 0xC4	; 196
    29ac:	90 e0       	ldi	r25, 0x00	; 0
    29ae:	97 87       	std	Z+15, r25	; 0x0f
    29b0:	86 87       	std	Z+14, r24	; 0x0e
    29b2:	80 ec       	ldi	r24, 0xC0	; 192
    29b4:	90 e0       	ldi	r25, 0x00	; 0
    29b6:	91 8b       	std	Z+17, r25	; 0x11
    29b8:	80 8b       	std	Z+16, r24	; 0x10
    29ba:	81 ec       	ldi	r24, 0xC1	; 193
    29bc:	90 e0       	ldi	r25, 0x00	; 0
    29be:	93 8b       	std	Z+19, r25	; 0x13
    29c0:	82 8b       	std	Z+18, r24	; 0x12
    29c2:	82 ec       	ldi	r24, 0xC2	; 194
    29c4:	90 e0       	ldi	r25, 0x00	; 0
    29c6:	95 8b       	std	Z+21, r25	; 0x15
    29c8:	84 8b       	std	Z+20, r24	; 0x14
    29ca:	86 ec       	ldi	r24, 0xC6	; 198
    29cc:	90 e0       	ldi	r25, 0x00	; 0
    29ce:	97 8b       	std	Z+23, r25	; 0x17
    29d0:	86 8b       	std	Z+22, r24	; 0x16
    29d2:	11 8e       	std	Z+25, r1	; 0x19
    29d4:	12 8e       	std	Z+26, r1	; 0x1a
    29d6:	13 8e       	std	Z+27, r1	; 0x1b
    29d8:	14 8e       	std	Z+28, r1	; 0x1c
_GLOBAL__sub_I___vector_20():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/HardwareSerial0.cpp:77
    29da:	08 95       	ret

000029dc <Print::write(unsigned char const*, unsigned int)>:
_ZN5Print5writeEPKhj():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:171
size_t Print::println(unsigned int num, int base)
{
  size_t n = print(num, base);
  n += println();
  return n;
}
    29dc:	af 92       	push	r10
    29de:	bf 92       	push	r11
    29e0:	cf 92       	push	r12
    29e2:	df 92       	push	r13
    29e4:	ef 92       	push	r14
    29e6:	ff 92       	push	r15
    29e8:	0f 93       	push	r16
    29ea:	1f 93       	push	r17
    29ec:	cf 93       	push	r28
    29ee:	df 93       	push	r29
    29f0:	6c 01       	movw	r12, r24
    29f2:	7b 01       	movw	r14, r22
    29f4:	8b 01       	movw	r16, r22
    29f6:	04 0f       	add	r16, r20
    29f8:	15 1f       	adc	r17, r21
    29fa:	eb 01       	movw	r28, r22
    29fc:	5e 01       	movw	r10, r28
    29fe:	ae 18       	sub	r10, r14
    2a00:	bf 08       	sbc	r11, r15
    2a02:	c0 17       	cp	r28, r16
    2a04:	d1 07       	cpc	r29, r17
    2a06:	59 f0       	breq	.+22     	; 0x2a1e <Print::write(unsigned char const*, unsigned int)+0x42>
    2a08:	69 91       	ld	r22, Y+
    2a0a:	d6 01       	movw	r26, r12
    2a0c:	ed 91       	ld	r30, X+
    2a0e:	fc 91       	ld	r31, X
    2a10:	01 90       	ld	r0, Z+
    2a12:	f0 81       	ld	r31, Z
    2a14:	e0 2d       	mov	r30, r0
    2a16:	c6 01       	movw	r24, r12
    2a18:	09 95       	icall
    2a1a:	89 2b       	or	r24, r25
    2a1c:	79 f7       	brne	.-34     	; 0x29fc <Print::write(unsigned char const*, unsigned int)+0x20>
    2a1e:	c5 01       	movw	r24, r10
    2a20:	df 91       	pop	r29
    2a22:	cf 91       	pop	r28
    2a24:	1f 91       	pop	r17
    2a26:	0f 91       	pop	r16
    2a28:	ff 90       	pop	r15
    2a2a:	ef 90       	pop	r14
    2a2c:	df 90       	pop	r13
    2a2e:	cf 90       	pop	r12
    2a30:	bf 90       	pop	r11
    2a32:	af 90       	pop	r10
    2a34:	08 95       	ret

00002a36 <Print::write(char const*) [clone .part.2]>:
_ZN5Print5writeEPKc():
    2a36:	fb 01       	movw	r30, r22
    2a38:	01 90       	ld	r0, Z+
    2a3a:	00 20       	and	r0, r0
    2a3c:	e9 f7       	brne	.-6      	; 0x2a38 <Print::write(char const*) [clone .part.2]+0x2>
    2a3e:	31 97       	sbiw	r30, 0x01	; 1
    2a40:	af 01       	movw	r20, r30
    2a42:	46 1b       	sub	r20, r22
    2a44:	57 0b       	sbc	r21, r23
    2a46:	dc 01       	movw	r26, r24
    2a48:	ed 91       	ld	r30, X+
    2a4a:	fc 91       	ld	r31, X
    2a4c:	02 80       	ldd	r0, Z+2	; 0x02
    2a4e:	f3 81       	ldd	r31, Z+3	; 0x03
    2a50:	e0 2d       	mov	r30, r0
    2a52:	09 94       	ijmp

00002a54 <Print::print(__FlashStringHelper const*)>:
_ZN5Print5printEPK19__FlashStringHelper():
    2a54:	ef 92       	push	r14
    2a56:	ff 92       	push	r15
    2a58:	0f 93       	push	r16
    2a5a:	1f 93       	push	r17
    2a5c:	cf 93       	push	r28
    2a5e:	df 93       	push	r29
    2a60:	8c 01       	movw	r16, r24
    2a62:	7b 01       	movw	r14, r22
    2a64:	d0 e0       	ldi	r29, 0x00	; 0
    2a66:	c0 e0       	ldi	r28, 0x00	; 0
    2a68:	f7 01       	movw	r30, r14
    2a6a:	ec 0f       	add	r30, r28
    2a6c:	fd 1f       	adc	r31, r29
    2a6e:	64 91       	lpm	r22, Z
    2a70:	66 23       	and	r22, r22
    2a72:	61 f0       	breq	.+24     	; 0x2a8c <Print::print(__FlashStringHelper const*)+0x38>
    2a74:	d8 01       	movw	r26, r16
    2a76:	ed 91       	ld	r30, X+
    2a78:	fc 91       	ld	r31, X
    2a7a:	01 90       	ld	r0, Z+
    2a7c:	f0 81       	ld	r31, Z
    2a7e:	e0 2d       	mov	r30, r0
    2a80:	c8 01       	movw	r24, r16
    2a82:	09 95       	icall
    2a84:	89 2b       	or	r24, r25
    2a86:	11 f0       	breq	.+4      	; 0x2a8c <Print::print(__FlashStringHelper const*)+0x38>
    2a88:	21 96       	adiw	r28, 0x01	; 1
    2a8a:	ee cf       	rjmp	.-36     	; 0x2a68 <Print::print(__FlashStringHelper const*)+0x14>
    2a8c:	ce 01       	movw	r24, r28
    2a8e:	df 91       	pop	r29
    2a90:	cf 91       	pop	r28
    2a92:	1f 91       	pop	r17
    2a94:	0f 91       	pop	r16
    2a96:	ff 90       	pop	r15
    2a98:	ef 90       	pop	r14
    2a9a:	08 95       	ret

00002a9c <Print::print(char const*)>:
_ZN5Print5writeEPKc():
    2a9c:	61 15       	cp	r22, r1
    2a9e:	71 05       	cpc	r23, r1
    2aa0:	11 f0       	breq	.+4      	; 0x2aa6 <Print::print(char const*)+0xa>
    2aa2:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <Print::write(char const*) [clone .part.2]>
_ZN5Print5printEPKc():
    2aa6:	90 e0       	ldi	r25, 0x00	; 0
    2aa8:	80 e0       	ldi	r24, 0x00	; 0
    2aaa:	08 95       	ret

00002aac <Print::print(char)>:
_ZN5Print5printEc():
    2aac:	dc 01       	movw	r26, r24
    2aae:	ed 91       	ld	r30, X+
    2ab0:	fc 91       	ld	r31, X
    2ab2:	01 90       	ld	r0, Z+
    2ab4:	f0 81       	ld	r31, Z
    2ab6:	e0 2d       	mov	r30, r0
    2ab8:	09 94       	ijmp

00002aba <Print::println()>:
_ZN5Print5writeEPKc():
    2aba:	60 ee       	ldi	r22, 0xE0	; 224
    2abc:	73 e0       	ldi	r23, 0x03	; 3
    2abe:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <Print::write(char const*) [clone .part.2]>

00002ac2 <Print::println(__FlashStringHelper const*)>:
_ZN5Print7printlnEPK19__FlashStringHelper():
    2ac2:	0f 93       	push	r16
    2ac4:	1f 93       	push	r17
    2ac6:	cf 93       	push	r28
    2ac8:	df 93       	push	r29
    2aca:	ec 01       	movw	r28, r24
    2acc:	0e 94 2a 15 	call	0x2a54	; 0x2a54 <Print::print(__FlashStringHelper const*)>
    2ad0:	8c 01       	movw	r16, r24
    2ad2:	ce 01       	movw	r24, r28
    2ad4:	0e 94 5d 15 	call	0x2aba	; 0x2aba <Print::println()>
    2ad8:	80 0f       	add	r24, r16
    2ada:	91 1f       	adc	r25, r17
    2adc:	df 91       	pop	r29
    2ade:	cf 91       	pop	r28
    2ae0:	1f 91       	pop	r17
    2ae2:	0f 91       	pop	r16
    2ae4:	08 95       	ret

00002ae6 <Print::println(char const*)>:
_ZN5Print7printlnEPKc():
    2ae6:	0f 93       	push	r16
    2ae8:	1f 93       	push	r17
    2aea:	cf 93       	push	r28
    2aec:	df 93       	push	r29
    2aee:	8c 01       	movw	r16, r24
_ZN5Print5writeEPKc():
    2af0:	d0 e0       	ldi	r29, 0x00	; 0
    2af2:	c0 e0       	ldi	r28, 0x00	; 0
    2af4:	61 15       	cp	r22, r1
    2af6:	71 05       	cpc	r23, r1
    2af8:	19 f0       	breq	.+6      	; 0x2b00 <Print::println(char const*)+0x1a>
    2afa:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <Print::write(char const*) [clone .part.2]>
    2afe:	ec 01       	movw	r28, r24
_ZN5Print7printlnEPKc():
    2b00:	c8 01       	movw	r24, r16
    2b02:	0e 94 5d 15 	call	0x2aba	; 0x2aba <Print::println()>
    2b06:	8c 0f       	add	r24, r28
    2b08:	9d 1f       	adc	r25, r29
    2b0a:	df 91       	pop	r29
    2b0c:	cf 91       	pop	r28
    2b0e:	1f 91       	pop	r17
    2b10:	0f 91       	pop	r16
    2b12:	08 95       	ret

00002b14 <Print::printNumber(unsigned long, unsigned char)>:
_ZN5Print11printNumberEmh():
    2b14:	8f 92       	push	r8
    2b16:	9f 92       	push	r9
    2b18:	af 92       	push	r10
    2b1a:	bf 92       	push	r11
    2b1c:	ef 92       	push	r14
    2b1e:	ff 92       	push	r15
    2b20:	0f 93       	push	r16
    2b22:	1f 93       	push	r17
    2b24:	cf 93       	push	r28
    2b26:	df 93       	push	r29
    2b28:	cd b7       	in	r28, 0x3d	; 61
    2b2a:	de b7       	in	r29, 0x3e	; 62
    2b2c:	a1 97       	sbiw	r28, 0x21	; 33
    2b2e:	0f b6       	in	r0, 0x3f	; 63
    2b30:	f8 94       	cli
    2b32:	de bf       	out	0x3e, r29	; 62
    2b34:	0f be       	out	0x3f, r0	; 63
    2b36:	cd bf       	out	0x3d, r28	; 61
    2b38:	7c 01       	movw	r14, r24
    2b3a:	fa 01       	movw	r30, r20
    2b3c:	cb 01       	movw	r24, r22
    2b3e:	19 a2       	std	Y+33, r1	; 0x21
    2b40:	22 30       	cpi	r18, 0x02	; 2
    2b42:	08 f4       	brcc	.+2      	; 0x2b46 <Print::printNumber(unsigned long, unsigned char)+0x32>
    2b44:	2a e0       	ldi	r18, 0x0A	; 10
    2b46:	8e 01       	movw	r16, r28
    2b48:	0f 5d       	subi	r16, 0xDF	; 223
    2b4a:	1f 4f       	sbci	r17, 0xFF	; 255
    2b4c:	82 2e       	mov	r8, r18
    2b4e:	91 2c       	mov	r9, r1
    2b50:	b1 2c       	mov	r11, r1
    2b52:	a1 2c       	mov	r10, r1
    2b54:	bf 01       	movw	r22, r30
    2b56:	a5 01       	movw	r20, r10
    2b58:	94 01       	movw	r18, r8
    2b5a:	0e 94 bb 19 	call	0x3376	; 0x3376 <__udivmodsi4>
    2b5e:	f9 01       	movw	r30, r18
    2b60:	ca 01       	movw	r24, r20
    2b62:	6a 30       	cpi	r22, 0x0A	; 10
    2b64:	0c f5       	brge	.+66     	; 0x2ba8 <Print::printNumber(unsigned long, unsigned char)+0x94>
    2b66:	60 5d       	subi	r22, 0xD0	; 208
    2b68:	d8 01       	movw	r26, r16
    2b6a:	6e 93       	st	-X, r22
    2b6c:	8d 01       	movw	r16, r26
    2b6e:	23 2b       	or	r18, r19
    2b70:	24 2b       	or	r18, r20
    2b72:	25 2b       	or	r18, r21
    2b74:	79 f7       	brne	.-34     	; 0x2b54 <Print::printNumber(unsigned long, unsigned char)+0x40>
_ZN5Print5writeEPKc():
    2b76:	90 e0       	ldi	r25, 0x00	; 0
    2b78:	80 e0       	ldi	r24, 0x00	; 0
    2b7a:	10 97       	sbiw	r26, 0x00	; 0
    2b7c:	21 f0       	breq	.+8      	; 0x2b86 <Print::printNumber(unsigned long, unsigned char)+0x72>
    2b7e:	bd 01       	movw	r22, r26
    2b80:	c7 01       	movw	r24, r14
    2b82:	0e 94 1b 15 	call	0x2a36	; 0x2a36 <Print::write(char const*) [clone .part.2]>
_ZN5Print11printNumberEmh():
    2b86:	a1 96       	adiw	r28, 0x21	; 33
    2b88:	0f b6       	in	r0, 0x3f	; 63
    2b8a:	f8 94       	cli
    2b8c:	de bf       	out	0x3e, r29	; 62
    2b8e:	0f be       	out	0x3f, r0	; 63
    2b90:	cd bf       	out	0x3d, r28	; 61
    2b92:	df 91       	pop	r29
    2b94:	cf 91       	pop	r28
    2b96:	1f 91       	pop	r17
    2b98:	0f 91       	pop	r16
    2b9a:	ff 90       	pop	r15
    2b9c:	ef 90       	pop	r14
    2b9e:	bf 90       	pop	r11
    2ba0:	af 90       	pop	r10
    2ba2:	9f 90       	pop	r9
    2ba4:	8f 90       	pop	r8
    2ba6:	08 95       	ret
    2ba8:	69 5c       	subi	r22, 0xC9	; 201
    2baa:	de cf       	rjmp	.-68     	; 0x2b68 <Print::printNumber(unsigned long, unsigned char)+0x54>

00002bac <Print::print(long, int)>:
_ZN5Print5printEli():
    2bac:	cf 92       	push	r12
    2bae:	df 92       	push	r13
    2bb0:	ef 92       	push	r14
    2bb2:	ff 92       	push	r15
    2bb4:	0f 93       	push	r16
    2bb6:	1f 93       	push	r17
    2bb8:	cf 93       	push	r28
    2bba:	df 93       	push	r29
    2bbc:	21 15       	cp	r18, r1
    2bbe:	31 05       	cpc	r19, r1
    2bc0:	81 f4       	brne	.+32     	; 0x2be2 <Print::print(long, int)+0x36>
    2bc2:	dc 01       	movw	r26, r24
    2bc4:	ed 91       	ld	r30, X+
    2bc6:	fc 91       	ld	r31, X
    2bc8:	01 90       	ld	r0, Z+
    2bca:	f0 81       	ld	r31, Z
    2bcc:	e0 2d       	mov	r30, r0
    2bce:	64 2f       	mov	r22, r20
    2bd0:	df 91       	pop	r29
    2bd2:	cf 91       	pop	r28
    2bd4:	1f 91       	pop	r17
    2bd6:	0f 91       	pop	r16
    2bd8:	ff 90       	pop	r15
    2bda:	ef 90       	pop	r14
    2bdc:	df 90       	pop	r13
    2bde:	cf 90       	pop	r12
    2be0:	09 94       	ijmp
    2be2:	2a 30       	cpi	r18, 0x0A	; 10
    2be4:	31 05       	cpc	r19, r1
    2be6:	01 f5       	brne	.+64     	; 0x2c28 <Print::print(long, int)+0x7c>
    2be8:	2a e0       	ldi	r18, 0x0A	; 10
    2bea:	77 ff       	sbrs	r23, 7
    2bec:	1d c0       	rjmp	.+58     	; 0x2c28 <Print::print(long, int)+0x7c>
    2bee:	6a 01       	movw	r12, r20
    2bf0:	7b 01       	movw	r14, r22
    2bf2:	ec 01       	movw	r28, r24
    2bf4:	6d e2       	ldi	r22, 0x2D	; 45
    2bf6:	0e 94 56 15 	call	0x2aac	; 0x2aac <Print::print(char)>
    2bfa:	8c 01       	movw	r16, r24
    2bfc:	44 27       	eor	r20, r20
    2bfe:	55 27       	eor	r21, r21
    2c00:	ba 01       	movw	r22, r20
    2c02:	4c 19       	sub	r20, r12
    2c04:	5d 09       	sbc	r21, r13
    2c06:	6e 09       	sbc	r22, r14
    2c08:	7f 09       	sbc	r23, r15
    2c0a:	2a e0       	ldi	r18, 0x0A	; 10
    2c0c:	ce 01       	movw	r24, r28
    2c0e:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <Print::printNumber(unsigned long, unsigned char)>
    2c12:	80 0f       	add	r24, r16
    2c14:	91 1f       	adc	r25, r17
    2c16:	df 91       	pop	r29
    2c18:	cf 91       	pop	r28
    2c1a:	1f 91       	pop	r17
    2c1c:	0f 91       	pop	r16
    2c1e:	ff 90       	pop	r15
    2c20:	ef 90       	pop	r14
    2c22:	df 90       	pop	r13
    2c24:	cf 90       	pop	r12
    2c26:	08 95       	ret
    2c28:	df 91       	pop	r29
    2c2a:	cf 91       	pop	r28
    2c2c:	1f 91       	pop	r17
    2c2e:	0f 91       	pop	r16
    2c30:	ff 90       	pop	r15
    2c32:	ef 90       	pop	r14
    2c34:	df 90       	pop	r13
    2c36:	cf 90       	pop	r12
    2c38:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <Print::printNumber(unsigned long, unsigned char)>

00002c3c <Print::print(int, int)>:
_ZN5Print5printEii():
    2c3c:	9a 01       	movw	r18, r20
    2c3e:	ab 01       	movw	r20, r22
    2c40:	77 0f       	add	r23, r23
    2c42:	66 0b       	sbc	r22, r22
    2c44:	77 0b       	sbc	r23, r23
    2c46:	0c 94 d6 15 	jmp	0x2bac	; 0x2bac <Print::print(long, int)>

00002c4a <Print::println(int, int)>:
_ZN5Print7printlnEii():
    2c4a:	0f 93       	push	r16
    2c4c:	1f 93       	push	r17
    2c4e:	cf 93       	push	r28
    2c50:	df 93       	push	r29
    2c52:	ec 01       	movw	r28, r24
    2c54:	0e 94 1e 16 	call	0x2c3c	; 0x2c3c <Print::print(int, int)>
    2c58:	8c 01       	movw	r16, r24
    2c5a:	ce 01       	movw	r24, r28
    2c5c:	0e 94 5d 15 	call	0x2aba	; 0x2aba <Print::println()>
    2c60:	80 0f       	add	r24, r16
    2c62:	91 1f       	adc	r25, r17
    2c64:	df 91       	pop	r29
    2c66:	cf 91       	pop	r28
    2c68:	1f 91       	pop	r17
    2c6a:	0f 91       	pop	r16
    2c6c:	08 95       	ret

00002c6e <Print::print(unsigned long, int)>:
_ZN5Print5printEmi():
    2c6e:	21 15       	cp	r18, r1
    2c70:	31 05       	cpc	r19, r1
    2c72:	41 f4       	brne	.+16     	; 0x2c84 <Print::print(unsigned long, int)+0x16>
    2c74:	dc 01       	movw	r26, r24
    2c76:	ed 91       	ld	r30, X+
    2c78:	fc 91       	ld	r31, X
    2c7a:	01 90       	ld	r0, Z+
    2c7c:	f0 81       	ld	r31, Z
    2c7e:	e0 2d       	mov	r30, r0
    2c80:	64 2f       	mov	r22, r20
    2c82:	09 94       	ijmp
    2c84:	0c 94 8a 15 	jmp	0x2b14	; 0x2b14 <Print::printNumber(unsigned long, unsigned char)>

00002c88 <Print::print(unsigned char, int)>:
_ZN5Print5printEhi():
    2c88:	9a 01       	movw	r18, r20
    2c8a:	46 2f       	mov	r20, r22
    2c8c:	50 e0       	ldi	r21, 0x00	; 0
    2c8e:	70 e0       	ldi	r23, 0x00	; 0
    2c90:	60 e0       	ldi	r22, 0x00	; 0
    2c92:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <Print::print(unsigned long, int)>

00002c96 <Print::println(unsigned char, int)>:
_ZN5Print7printlnEhi():
    2c96:	0f 93       	push	r16
    2c98:	1f 93       	push	r17
    2c9a:	cf 93       	push	r28
    2c9c:	df 93       	push	r29
    2c9e:	ec 01       	movw	r28, r24
    2ca0:	0e 94 44 16 	call	0x2c88	; 0x2c88 <Print::print(unsigned char, int)>
    2ca4:	8c 01       	movw	r16, r24
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	0e 94 5d 15 	call	0x2aba	; 0x2aba <Print::println()>
    2cac:	80 0f       	add	r24, r16
    2cae:	91 1f       	adc	r25, r17
    2cb0:	df 91       	pop	r29
    2cb2:	cf 91       	pop	r28
    2cb4:	1f 91       	pop	r17
    2cb6:	0f 91       	pop	r16
    2cb8:	08 95       	ret

00002cba <Print::print(unsigned int, int)>:
_ZN5Print5printEji():
    2cba:	9a 01       	movw	r18, r20
    2cbc:	ab 01       	movw	r20, r22
    2cbe:	70 e0       	ldi	r23, 0x00	; 0
    2cc0:	60 e0       	ldi	r22, 0x00	; 0
    2cc2:	0c 94 37 16 	jmp	0x2c6e	; 0x2c6e <Print::print(unsigned long, int)>

00002cc6 <Print::println(unsigned long, int)>:
_ZN5Print7printlnEmi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:181
  n += println();
  return n;
}

size_t Print::println(unsigned long num, int base)
{
    2cc6:	0f 93       	push	r16
    2cc8:	1f 93       	push	r17
    2cca:	cf 93       	push	r28
    2ccc:	df 93       	push	r29
    2cce:	ec 01       	movw	r28, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:182
  size_t n = print(num, base);
    2cd0:	0e 94 37 16 	call	0x2c6e	; 0x2c6e <Print::print(unsigned long, int)>
    2cd4:	8c 01       	movw	r16, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:183
  n += println();
    2cd6:	ce 01       	movw	r24, r28
    2cd8:	0e 94 5d 15 	call	0x2aba	; 0x2aba <Print::println()>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:185
  return n;
}
    2cdc:	80 0f       	add	r24, r16
    2cde:	91 1f       	adc	r25, r17
    2ce0:	df 91       	pop	r29
    2ce2:	cf 91       	pop	r28
    2ce4:	1f 91       	pop	r17
    2ce6:	0f 91       	pop	r16
    2ce8:	08 95       	ret

00002cea <Print::printFloat(double, unsigned char)>:
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:253

  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
    2cea:	2f 92       	push	r2
    2cec:	3f 92       	push	r3
    2cee:	4f 92       	push	r4
    2cf0:	5f 92       	push	r5
    2cf2:	6f 92       	push	r6
    2cf4:	7f 92       	push	r7
    2cf6:	8f 92       	push	r8
    2cf8:	9f 92       	push	r9
    2cfa:	af 92       	push	r10
    2cfc:	bf 92       	push	r11
    2cfe:	cf 92       	push	r12
    2d00:	df 92       	push	r13
    2d02:	ef 92       	push	r14
    2d04:	ff 92       	push	r15
    2d06:	1f 93       	push	r17
    2d08:	cf 93       	push	r28
    2d0a:	df 93       	push	r29
    2d0c:	ec 01       	movw	r28, r24
    2d0e:	6a 01       	movw	r12, r20
    2d10:	7b 01       	movw	r14, r22
    2d12:	72 2e       	mov	r7, r18
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:256
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
    2d14:	ab 01       	movw	r20, r22
    2d16:	96 01       	movw	r18, r12
    2d18:	cb 01       	movw	r24, r22
    2d1a:	b6 01       	movw	r22, r12
    2d1c:	0e 94 a2 19 	call	0x3344	; 0x3344 <__unordsf2>
_ZN5Print5writeEPKc():
    2d20:	63 ee       	ldi	r22, 0xE3	; 227
    2d22:	73 e0       	ldi	r23, 0x03	; 3
_ZN5Print10printFloatEdh():
    2d24:	81 11       	cpse	r24, r1
    2d26:	26 c0       	rjmp	.+76     	; 0x2d74 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:257
  if (isinf(number)) return print("inf");
    2d28:	46 01       	movw	r8, r12
    2d2a:	57 01       	movw	r10, r14
    2d2c:	e8 94       	clt
    2d2e:	b7 f8       	bld	r11, 7
    2d30:	2f ef       	ldi	r18, 0xFF	; 255
    2d32:	3f ef       	ldi	r19, 0xFF	; 255
    2d34:	4f e7       	ldi	r20, 0x7F	; 127
    2d36:	5f e7       	ldi	r21, 0x7F	; 127
    2d38:	c5 01       	movw	r24, r10
    2d3a:	b4 01       	movw	r22, r8
    2d3c:	0e 94 a2 19 	call	0x3344	; 0x3344 <__unordsf2>
    2d40:	81 11       	cpse	r24, r1
    2d42:	0c c0       	rjmp	.+24     	; 0x2d5c <Print::printFloat(double, unsigned char)+0x72>
    2d44:	2f ef       	ldi	r18, 0xFF	; 255
    2d46:	3f ef       	ldi	r19, 0xFF	; 255
    2d48:	4f e7       	ldi	r20, 0x7F	; 127
    2d4a:	5f e7       	ldi	r21, 0x7F	; 127
    2d4c:	c5 01       	movw	r24, r10
    2d4e:	b4 01       	movw	r22, r8
    2d50:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <__cmpsf2>
_ZN5Print5writeEPKc():
    2d54:	67 ee       	ldi	r22, 0xE7	; 231
    2d56:	73 e0       	ldi	r23, 0x03	; 3
_ZN5Print10printFloatEdh():
    2d58:	18 16       	cp	r1, r24
    2d5a:	64 f0       	brlt	.+24     	; 0x2d74 <Print::printFloat(double, unsigned char)+0x8a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:258
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
    2d5c:	2f ef       	ldi	r18, 0xFF	; 255
    2d5e:	3f ef       	ldi	r19, 0xFF	; 255
    2d60:	4f e7       	ldi	r20, 0x7F	; 127
    2d62:	5f e4       	ldi	r21, 0x4F	; 79
    2d64:	c7 01       	movw	r24, r14
    2d66:	b6 01       	movw	r22, r12
    2d68:	0e 94 30 19 	call	0x3260	; 0x3260 <__gesf2>
    2d6c:	18 16       	cp	r1, r24
    2d6e:	b4 f4       	brge	.+44     	; 0x2d9c <Print::printFloat(double, unsigned char)+0xb2>
_ZN5Print5writeEPKc():
    2d70:	6b ee       	ldi	r22, 0xEB	; 235
    2d72:	73 e0       	ldi	r23, 0x03	; 3
    2d74:	ce 01       	movw	r24, r28
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
    n += print(toPrint);
    remainder -= toPrint; 
  } 
  
  return n;
}
    2d76:	df 91       	pop	r29
    2d78:	cf 91       	pop	r28
    2d7a:	1f 91       	pop	r17
    2d7c:	ff 90       	pop	r15
    2d7e:	ef 90       	pop	r14
    2d80:	df 90       	pop	r13
    2d82:	cf 90       	pop	r12
    2d84:	bf 90       	pop	r11
    2d86:	af 90       	pop	r10
    2d88:	9f 90       	pop	r9
    2d8a:	8f 90       	pop	r8
    2d8c:	7f 90       	pop	r7
    2d8e:	6f 90       	pop	r6
    2d90:	5f 90       	pop	r5
    2d92:	4f 90       	pop	r4
    2d94:	3f 90       	pop	r3
    2d96:	2f 90       	pop	r2
_ZN5Print5writeEPKc():
    2d98:	0c 94 1b 15 	jmp	0x2a36	; 0x2a36 <Print::write(char const*) [clone .part.2]>
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:259
  size_t n = 0;
  
  if (isnan(number)) return print("nan");
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
    2d9c:	2f ef       	ldi	r18, 0xFF	; 255
    2d9e:	3f ef       	ldi	r19, 0xFF	; 255
    2da0:	4f e7       	ldi	r20, 0x7F	; 127
    2da2:	5f ec       	ldi	r21, 0xCF	; 207
    2da4:	c7 01       	movw	r24, r14
    2da6:	b6 01       	movw	r22, r12
    2da8:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <__cmpsf2>
    2dac:	87 fd       	sbrc	r24, 7
    2dae:	e0 cf       	rjmp	.-64     	; 0x2d70 <Print::printFloat(double, unsigned char)+0x86>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  
  // Handle negative numbers
  if (number < 0.0)
    2db0:	20 e0       	ldi	r18, 0x00	; 0
    2db2:	30 e0       	ldi	r19, 0x00	; 0
    2db4:	a9 01       	movw	r20, r18
    2db6:	c7 01       	movw	r24, r14
    2db8:	b6 01       	movw	r22, r12
    2dba:	0e 94 d8 17 	call	0x2fb0	; 0x2fb0 <__cmpsf2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:254
  return write(str);
}

size_t Print::printFloat(double number, uint8_t digits) 
{ 
  size_t n = 0;
    2dbe:	31 2c       	mov	r3, r1
    2dc0:	21 2c       	mov	r2, r1
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:262
  if (isinf(number)) return print("inf");
  if (number > 4294967040.0) return print ("ovf");  // constant determined empirically
  if (number <-4294967040.0) return print ("ovf");  // constant determined empirically
  
  // Handle negative numbers
  if (number < 0.0)
    2dc2:	87 ff       	sbrs	r24, 7
    2dc4:	09 c0       	rjmp	.+18     	; 0x2dd8 <Print::printFloat(double, unsigned char)+0xee>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:264
  {
     n += print('-');
    2dc6:	6d e2       	ldi	r22, 0x2D	; 45
    2dc8:	ce 01       	movw	r24, r28
    2dca:	0e 94 56 15 	call	0x2aac	; 0x2aac <Print::print(char)>
    2dce:	1c 01       	movw	r2, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:265
     number = -number;
    2dd0:	f7 fa       	bst	r15, 7
    2dd2:	f0 94       	com	r15
    2dd4:	f7 f8       	bld	r15, 7
    2dd6:	f0 94       	com	r15
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2dd8:	10 e0       	ldi	r17, 0x00	; 0
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:269
     n += print('-');
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
    2dda:	60 e0       	ldi	r22, 0x00	; 0
    2ddc:	70 e0       	ldi	r23, 0x00	; 0
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	9f e3       	ldi	r25, 0x3F	; 63
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
  for (uint8_t i=0; i<digits; ++i)
    2de2:	71 16       	cp	r7, r17
    2de4:	41 f0       	breq	.+16     	; 0x2df6 <Print::printFloat(double, unsigned char)+0x10c>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:271
    rounding /= 10.0;
    2de6:	20 e0       	ldi	r18, 0x00	; 0
    2de8:	30 e0       	ldi	r19, 0x00	; 0
    2dea:	40 e2       	ldi	r20, 0x20	; 32
    2dec:	51 e4       	ldi	r21, 0x41	; 65
    2dee:	0e 94 dd 17 	call	0x2fba	; 0x2fba <__divsf3>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:270
     number = -number;
  }

  // Round correctly so that print(1.999, 2) prints as "2.00"
  double rounding = 0.5;
  for (uint8_t i=0; i<digits; ++i)
    2df2:	1f 5f       	subi	r17, 0xFF	; 255
    2df4:	f6 cf       	rjmp	.-20     	; 0x2de2 <Print::printFloat(double, unsigned char)+0xf8>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:273
    rounding /= 10.0;
  
  number += rounding;
    2df6:	a7 01       	movw	r20, r14
    2df8:	96 01       	movw	r18, r12
    2dfa:	0e 94 6c 17 	call	0x2ed8	; 0x2ed8 <__addsf3>
    2dfe:	2b 01       	movw	r4, r22
    2e00:	3c 01       	movw	r6, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:276

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
    2e02:	0e 94 4f 18 	call	0x309e	; 0x309e <__fixunssfsi>
    2e06:	4b 01       	movw	r8, r22
    2e08:	5c 01       	movw	r10, r24
_ZN5Print5printEmi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:106
}

size_t Print::print(unsigned long n, int base)
{
  if (base == 0) return write(n);
  else return printNumber(n, base);
    2e0a:	2a e0       	ldi	r18, 0x0A	; 10
    2e0c:	bc 01       	movw	r22, r24
    2e0e:	a4 01       	movw	r20, r8
    2e10:	ce 01       	movw	r24, r28
    2e12:	0e 94 8a 15 	call	0x2b14	; 0x2b14 <Print::printNumber(unsigned long, unsigned char)>
_ZN5Print10printFloatEdh():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:278
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
  n += print(int_part);
    2e16:	7c 01       	movw	r14, r24
    2e18:	e2 0c       	add	r14, r2
    2e1a:	f3 1c       	adc	r15, r3
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:281

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    2e1c:	11 23       	and	r17, r17
    2e1e:	b1 f1       	breq	.+108    	; 0x2e8c <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:277
  
  number += rounding;

  // Extract the integer part of the number and print it
  unsigned long int_part = (unsigned long)number;
  double remainder = number - (double)int_part;
    2e20:	c5 01       	movw	r24, r10
    2e22:	b4 01       	movw	r22, r8
    2e24:	0e 94 7e 18 	call	0x30fc	; 0x30fc <__floatunsisf>
    2e28:	9b 01       	movw	r18, r22
    2e2a:	ac 01       	movw	r20, r24
    2e2c:	c3 01       	movw	r24, r6
    2e2e:	b2 01       	movw	r22, r4
    2e30:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    2e34:	4b 01       	movw	r8, r22
    2e36:	5c 01       	movw	r10, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:282
  n += print(int_part);

  // Print the decimal point, but only if there are digits beyond
  if (digits > 0) {
    n += print('.'); 
    2e38:	6e e2       	ldi	r22, 0x2E	; 46
    2e3a:	ce 01       	movw	r24, r28
    2e3c:	0e 94 56 15 	call	0x2aac	; 0x2aac <Print::print(char)>
    2e40:	e8 0e       	add	r14, r24
    2e42:	f9 1e       	adc	r15, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:286
  }

  // Extract digits from the remainder one at a time
  while (digits-- > 0)
    2e44:	11 50       	subi	r17, 0x01	; 1
    2e46:	10 f1       	brcs	.+68     	; 0x2e8c <Print::printFloat(double, unsigned char)+0x1a2>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:288
  {
    remainder *= 10.0;
    2e48:	20 e0       	ldi	r18, 0x00	; 0
    2e4a:	30 e0       	ldi	r19, 0x00	; 0
    2e4c:	40 e2       	ldi	r20, 0x20	; 32
    2e4e:	51 e4       	ldi	r21, 0x41	; 65
    2e50:	c5 01       	movw	r24, r10
    2e52:	b4 01       	movw	r22, r8
    2e54:	0e 94 35 19 	call	0x326a	; 0x326a <__mulsf3>
    2e58:	2b 01       	movw	r4, r22
    2e5a:	3c 01       	movw	r6, r24
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:289
    unsigned int toPrint = (unsigned int)(remainder);
    2e5c:	0e 94 4f 18 	call	0x309e	; 0x309e <__fixunssfsi>
    2e60:	4b 01       	movw	r8, r22
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:290
    n += print(toPrint);
    2e62:	4a e0       	ldi	r20, 0x0A	; 10
    2e64:	50 e0       	ldi	r21, 0x00	; 0
    2e66:	ce 01       	movw	r24, r28
    2e68:	0e 94 5d 16 	call	0x2cba	; 0x2cba <Print::print(unsigned int, int)>
    2e6c:	e8 0e       	add	r14, r24
    2e6e:	f9 1e       	adc	r15, r25
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:291
    remainder -= toPrint; 
    2e70:	b4 01       	movw	r22, r8
    2e72:	90 e0       	ldi	r25, 0x00	; 0
    2e74:	80 e0       	ldi	r24, 0x00	; 0
    2e76:	0e 94 7e 18 	call	0x30fc	; 0x30fc <__floatunsisf>
    2e7a:	9b 01       	movw	r18, r22
    2e7c:	ac 01       	movw	r20, r24
    2e7e:	c3 01       	movw	r24, r6
    2e80:	b2 01       	movw	r22, r4
    2e82:	0e 94 6b 17 	call	0x2ed6	; 0x2ed6 <__subsf3>
    2e86:	4b 01       	movw	r8, r22
    2e88:	5c 01       	movw	r10, r24
    2e8a:	dc cf       	rjmp	.-72     	; 0x2e44 <Print::printFloat(double, unsigned char)+0x15a>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:295
  } 
  
  return n;
}
    2e8c:	c7 01       	movw	r24, r14
    2e8e:	df 91       	pop	r29
    2e90:	cf 91       	pop	r28
    2e92:	1f 91       	pop	r17
    2e94:	ff 90       	pop	r15
    2e96:	ef 90       	pop	r14
    2e98:	df 90       	pop	r13
    2e9a:	cf 90       	pop	r12
    2e9c:	bf 90       	pop	r11
    2e9e:	af 90       	pop	r10
    2ea0:	9f 90       	pop	r9
    2ea2:	8f 90       	pop	r8
    2ea4:	7f 90       	pop	r7
    2ea6:	6f 90       	pop	r6
    2ea8:	5f 90       	pop	r5
    2eaa:	4f 90       	pop	r4
    2eac:	3f 90       	pop	r3
    2eae:	2f 90       	pop	r2
    2eb0:	08 95       	ret

00002eb2 <Print::print(double, int)>:
_ZN5Print5printEdi():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/Print.cpp:111
  else return printNumber(n, base);
}

size_t Print::print(double n, int digits)
{
  return printFloat(n, digits);
    2eb2:	0c 94 75 16 	jmp	0x2cea	; 0x2cea <Print::printFloat(double, unsigned char)>

00002eb6 <initVariant>:
initVariant():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:28
int atexit(void (* /*func*/ )()) { return 0; }

// Weak empty variant initialization function.
// May be redefined by variant files.
void initVariant() __attribute__((weak));
void initVariant() { }
    2eb6:	08 95       	ret

00002eb8 <main>:
main():
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:35
//void setupUSB() __attribute__((weak));
//void setupUSB() { }

int main(void)
{
  init();
    2eb8:	0e 94 e9 11 	call	0x23d2	; 0x23d2 <init>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:37

  initVariant();
    2ebc:	0e 94 5b 17 	call	0x2eb6	; 0x2eb6 <initVariant>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:43

#if defined(USBCON)
  USBDevice.attach();
#endif
  
  setup();
    2ec0:	0e 94 94 07 	call	0xf28	; 0xf28 <setup>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    
  for (;;) {
    loop();
    if (serialEventRun) serialEventRun();
    2ec4:	cc e5       	ldi	r28, 0x5C	; 92
    2ec6:	d3 e1       	ldi	r29, 0x13	; 19
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:46
#endif
  
  setup();
    
  for (;;) {
    loop();
    2ec8:	0e 94 ec 08 	call	0x11d8	; 0x11d8 <loop>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47
    if (serialEventRun) serialEventRun();
    2ecc:	20 97       	sbiw	r28, 0x00	; 0
    2ece:	e1 f3       	breq	.-8      	; 0x2ec8 <main+0x10>
C:\Users\habeeba\AppData\Local\Arduino15\packages\MightyCore\hardware\avr\2.1.3\cores\MCUdude_corefiles/main.cpp:47 (discriminator 1)
    2ed0:	0e 94 5c 13 	call	0x26b8	; 0x26b8 <serialEventRun()>
    2ed4:	f9 cf       	rjmp	.-14     	; 0x2ec8 <main+0x10>

00002ed6 <__subsf3>:
__subsf3():
    2ed6:	50 58       	subi	r21, 0x80	; 128

00002ed8 <__addsf3>:
    2ed8:	bb 27       	eor	r27, r27
    2eda:	aa 27       	eor	r26, r26
    2edc:	0e 94 83 17 	call	0x2f06	; 0x2f06 <__addsf3x>
    2ee0:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__fp_round>
__addsf3():
    2ee4:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fp_pscA>
    2ee8:	38 f0       	brcs	.+14     	; 0x2ef8 <__addsf3+0x20>
    2eea:	0e 94 ef 18 	call	0x31de	; 0x31de <__fp_pscB>
    2eee:	20 f0       	brcs	.+8      	; 0x2ef8 <__addsf3+0x20>
    2ef0:	39 f4       	brne	.+14     	; 0x2f00 <__addsf3+0x28>
    2ef2:	9f 3f       	cpi	r25, 0xFF	; 255
    2ef4:	19 f4       	brne	.+6      	; 0x2efc <__addsf3+0x24>
    2ef6:	26 f4       	brtc	.+8      	; 0x2f00 <__addsf3+0x28>
    2ef8:	0c 94 e5 18 	jmp	0x31ca	; 0x31ca <__fp_nan>
    2efc:	0e f4       	brtc	.+2      	; 0x2f00 <__addsf3+0x28>
    2efe:	e0 95       	com	r30
    2f00:	e7 fb       	bst	r30, 7
    2f02:	0c 94 df 18 	jmp	0x31be	; 0x31be <__fp_inf>

00002f06 <__addsf3x>:
__addsf3x():
    2f06:	e9 2f       	mov	r30, r25
    2f08:	0e 94 07 19 	call	0x320e	; 0x320e <__fp_split3>
    2f0c:	58 f3       	brcs	.-42     	; 0x2ee4 <__addsf3+0xc>
    2f0e:	ba 17       	cp	r27, r26
    2f10:	62 07       	cpc	r22, r18
    2f12:	73 07       	cpc	r23, r19
    2f14:	84 07       	cpc	r24, r20
    2f16:	95 07       	cpc	r25, r21
    2f18:	20 f0       	brcs	.+8      	; 0x2f22 <__addsf3x+0x1c>
    2f1a:	79 f4       	brne	.+30     	; 0x2f3a <__addsf3x+0x34>
    2f1c:	a6 f5       	brtc	.+104    	; 0x2f86 <__addsf3x+0x80>
    2f1e:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__fp_zero>
    2f22:	0e f4       	brtc	.+2      	; 0x2f26 <__addsf3x+0x20>
    2f24:	e0 95       	com	r30
    2f26:	0b 2e       	mov	r0, r27
    2f28:	ba 2f       	mov	r27, r26
    2f2a:	a0 2d       	mov	r26, r0
    2f2c:	0b 01       	movw	r0, r22
    2f2e:	b9 01       	movw	r22, r18
    2f30:	90 01       	movw	r18, r0
    2f32:	0c 01       	movw	r0, r24
    2f34:	ca 01       	movw	r24, r20
    2f36:	a0 01       	movw	r20, r0
    2f38:	11 24       	eor	r1, r1
    2f3a:	ff 27       	eor	r31, r31
    2f3c:	59 1b       	sub	r21, r25
    2f3e:	99 f0       	breq	.+38     	; 0x2f66 <__addsf3x+0x60>
    2f40:	59 3f       	cpi	r21, 0xF9	; 249
    2f42:	50 f4       	brcc	.+20     	; 0x2f58 <__addsf3x+0x52>
    2f44:	50 3e       	cpi	r21, 0xE0	; 224
    2f46:	68 f1       	brcs	.+90     	; 0x2fa2 <__addsf3x+0x9c>
    2f48:	1a 16       	cp	r1, r26
    2f4a:	f0 40       	sbci	r31, 0x00	; 0
    2f4c:	a2 2f       	mov	r26, r18
    2f4e:	23 2f       	mov	r18, r19
    2f50:	34 2f       	mov	r19, r20
    2f52:	44 27       	eor	r20, r20
    2f54:	58 5f       	subi	r21, 0xF8	; 248
    2f56:	f3 cf       	rjmp	.-26     	; 0x2f3e <__addsf3x+0x38>
    2f58:	46 95       	lsr	r20
    2f5a:	37 95       	ror	r19
    2f5c:	27 95       	ror	r18
    2f5e:	a7 95       	ror	r26
    2f60:	f0 40       	sbci	r31, 0x00	; 0
    2f62:	53 95       	inc	r21
    2f64:	c9 f7       	brne	.-14     	; 0x2f58 <__addsf3x+0x52>
    2f66:	7e f4       	brtc	.+30     	; 0x2f86 <__addsf3x+0x80>
    2f68:	1f 16       	cp	r1, r31
    2f6a:	ba 0b       	sbc	r27, r26
    2f6c:	62 0b       	sbc	r22, r18
    2f6e:	73 0b       	sbc	r23, r19
    2f70:	84 0b       	sbc	r24, r20
    2f72:	ba f0       	brmi	.+46     	; 0x2fa2 <__addsf3x+0x9c>
    2f74:	91 50       	subi	r25, 0x01	; 1
    2f76:	a1 f0       	breq	.+40     	; 0x2fa0 <__addsf3x+0x9a>
    2f78:	ff 0f       	add	r31, r31
    2f7a:	bb 1f       	adc	r27, r27
    2f7c:	66 1f       	adc	r22, r22
    2f7e:	77 1f       	adc	r23, r23
    2f80:	88 1f       	adc	r24, r24
    2f82:	c2 f7       	brpl	.-16     	; 0x2f74 <__addsf3x+0x6e>
    2f84:	0e c0       	rjmp	.+28     	; 0x2fa2 <__addsf3x+0x9c>
    2f86:	ba 0f       	add	r27, r26
    2f88:	62 1f       	adc	r22, r18
    2f8a:	73 1f       	adc	r23, r19
    2f8c:	84 1f       	adc	r24, r20
    2f8e:	48 f4       	brcc	.+18     	; 0x2fa2 <__addsf3x+0x9c>
    2f90:	87 95       	ror	r24
    2f92:	77 95       	ror	r23
    2f94:	67 95       	ror	r22
    2f96:	b7 95       	ror	r27
    2f98:	f7 95       	ror	r31
    2f9a:	9e 3f       	cpi	r25, 0xFE	; 254
    2f9c:	08 f0       	brcs	.+2      	; 0x2fa0 <__addsf3x+0x9a>
    2f9e:	b0 cf       	rjmp	.-160    	; 0x2f00 <__addsf3+0x28>
    2fa0:	93 95       	inc	r25
    2fa2:	88 0f       	add	r24, r24
    2fa4:	08 f0       	brcs	.+2      	; 0x2fa8 <__addsf3x+0xa2>
    2fa6:	99 27       	eor	r25, r25
    2fa8:	ee 0f       	add	r30, r30
    2faa:	97 95       	ror	r25
    2fac:	87 95       	ror	r24
    2fae:	08 95       	ret

00002fb0 <__cmpsf2>:
    2fb0:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fp_cmp>
    2fb4:	08 f4       	brcc	.+2      	; 0x2fb8 <__cmpsf2+0x8>
    2fb6:	81 e0       	ldi	r24, 0x01	; 1
    2fb8:	08 95       	ret

00002fba <__divsf3>:
    2fba:	0e 94 f1 17 	call	0x2fe2	; 0x2fe2 <__divsf3x>
    2fbe:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__fp_round>
    2fc2:	0e 94 ef 18 	call	0x31de	; 0x31de <__fp_pscB>
    2fc6:	58 f0       	brcs	.+22     	; 0x2fde <__divsf3+0x24>
    2fc8:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fp_pscA>
    2fcc:	40 f0       	brcs	.+16     	; 0x2fde <__divsf3+0x24>
    2fce:	29 f4       	brne	.+10     	; 0x2fda <__divsf3+0x20>
    2fd0:	5f 3f       	cpi	r21, 0xFF	; 255
__divsf3():
    2fd2:	29 f0       	breq	.+10     	; 0x2fde <__divsf3+0x24>
    2fd4:	0c 94 df 18 	jmp	0x31be	; 0x31be <__fp_inf>
    2fd8:	51 11       	cpse	r21, r1
    2fda:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__fp_szero>
    2fde:	0c 94 e5 18 	jmp	0x31ca	; 0x31ca <__fp_nan>

00002fe2 <__divsf3x>:
__divsf3x():
    2fe2:	0e 94 07 19 	call	0x320e	; 0x320e <__fp_split3>
    2fe6:	68 f3       	brcs	.-38     	; 0x2fc2 <__divsf3+0x8>

00002fe8 <__divsf3_pse>:
    2fe8:	99 23       	and	r25, r25
    2fea:	b1 f3       	breq	.-20     	; 0x2fd8 <__divsf3+0x1e>
    2fec:	55 23       	and	r21, r21
    2fee:	91 f3       	breq	.-28     	; 0x2fd4 <__divsf3+0x1a>
    2ff0:	95 1b       	sub	r25, r21
    2ff2:	55 0b       	sbc	r21, r21
    2ff4:	bb 27       	eor	r27, r27
    2ff6:	aa 27       	eor	r26, r26
    2ff8:	62 17       	cp	r22, r18
    2ffa:	73 07       	cpc	r23, r19
    2ffc:	84 07       	cpc	r24, r20
    2ffe:	38 f0       	brcs	.+14     	; 0x300e <__divsf3_pse+0x26>
    3000:	9f 5f       	subi	r25, 0xFF	; 255
    3002:	5f 4f       	sbci	r21, 0xFF	; 255
    3004:	22 0f       	add	r18, r18
    3006:	33 1f       	adc	r19, r19
    3008:	44 1f       	adc	r20, r20
    300a:	aa 1f       	adc	r26, r26
    300c:	a9 f3       	breq	.-22     	; 0x2ff8 <__divsf3_pse+0x10>
    300e:	35 d0       	rcall	.+106    	; 0x307a <__divsf3_pse+0x92>
    3010:	0e 2e       	mov	r0, r30
    3012:	3a f0       	brmi	.+14     	; 0x3022 <__divsf3_pse+0x3a>
    3014:	e0 e8       	ldi	r30, 0x80	; 128
    3016:	32 d0       	rcall	.+100    	; 0x307c <__divsf3_pse+0x94>
    3018:	91 50       	subi	r25, 0x01	; 1
    301a:	50 40       	sbci	r21, 0x00	; 0
    301c:	e6 95       	lsr	r30
    301e:	00 1c       	adc	r0, r0
    3020:	ca f7       	brpl	.-14     	; 0x3014 <__divsf3_pse+0x2c>
    3022:	2b d0       	rcall	.+86     	; 0x307a <__divsf3_pse+0x92>
    3024:	fe 2f       	mov	r31, r30
    3026:	29 d0       	rcall	.+82     	; 0x307a <__divsf3_pse+0x92>
    3028:	66 0f       	add	r22, r22
    302a:	77 1f       	adc	r23, r23
    302c:	88 1f       	adc	r24, r24
    302e:	bb 1f       	adc	r27, r27
    3030:	26 17       	cp	r18, r22
    3032:	37 07       	cpc	r19, r23
    3034:	48 07       	cpc	r20, r24
    3036:	ab 07       	cpc	r26, r27
    3038:	b0 e8       	ldi	r27, 0x80	; 128
    303a:	09 f0       	breq	.+2      	; 0x303e <__divsf3_pse+0x56>
    303c:	bb 0b       	sbc	r27, r27
    303e:	80 2d       	mov	r24, r0
    3040:	bf 01       	movw	r22, r30
    3042:	ff 27       	eor	r31, r31
    3044:	93 58       	subi	r25, 0x83	; 131
    3046:	5f 4f       	sbci	r21, 0xFF	; 255
    3048:	3a f0       	brmi	.+14     	; 0x3058 <__divsf3_pse+0x70>
    304a:	9e 3f       	cpi	r25, 0xFE	; 254
    304c:	51 05       	cpc	r21, r1
    304e:	78 f0       	brcs	.+30     	; 0x306e <__divsf3_pse+0x86>
    3050:	0c 94 df 18 	jmp	0x31be	; 0x31be <__fp_inf>
    3054:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__fp_szero>
    3058:	5f 3f       	cpi	r21, 0xFF	; 255
    305a:	e4 f3       	brlt	.-8      	; 0x3054 <__divsf3_pse+0x6c>
    305c:	98 3e       	cpi	r25, 0xE8	; 232
    305e:	d4 f3       	brlt	.-12     	; 0x3054 <__divsf3_pse+0x6c>
    3060:	86 95       	lsr	r24
    3062:	77 95       	ror	r23
    3064:	67 95       	ror	r22
    3066:	b7 95       	ror	r27
    3068:	f7 95       	ror	r31
    306a:	9f 5f       	subi	r25, 0xFF	; 255
    306c:	c9 f7       	brne	.-14     	; 0x3060 <__divsf3_pse+0x78>
    306e:	88 0f       	add	r24, r24
    3070:	91 1d       	adc	r25, r1
    3072:	96 95       	lsr	r25
    3074:	87 95       	ror	r24
    3076:	97 f9       	bld	r25, 7
    3078:	08 95       	ret
    307a:	e1 e0       	ldi	r30, 0x01	; 1
    307c:	66 0f       	add	r22, r22
    307e:	77 1f       	adc	r23, r23
    3080:	88 1f       	adc	r24, r24
    3082:	bb 1f       	adc	r27, r27
    3084:	62 17       	cp	r22, r18
    3086:	73 07       	cpc	r23, r19
    3088:	84 07       	cpc	r24, r20
    308a:	ba 07       	cpc	r27, r26
    308c:	20 f0       	brcs	.+8      	; 0x3096 <__divsf3_pse+0xae>
    308e:	62 1b       	sub	r22, r18
    3090:	73 0b       	sbc	r23, r19
    3092:	84 0b       	sbc	r24, r20
    3094:	ba 0b       	sbc	r27, r26
    3096:	ee 1f       	adc	r30, r30
    3098:	88 f7       	brcc	.-30     	; 0x307c <__divsf3_pse+0x94>
    309a:	e0 95       	com	r30
    309c:	08 95       	ret

0000309e <__fixunssfsi>:
    309e:	0e 94 0f 19 	call	0x321e	; 0x321e <__fp_splitA>
    30a2:	88 f0       	brcs	.+34     	; 0x30c6 <__fixunssfsi+0x28>
    30a4:	9f 57       	subi	r25, 0x7F	; 127
    30a6:	98 f0       	brcs	.+38     	; 0x30ce <__fixunssfsi+0x30>
    30a8:	b9 2f       	mov	r27, r25
    30aa:	99 27       	eor	r25, r25
    30ac:	b7 51       	subi	r27, 0x17	; 23
    30ae:	b0 f0       	brcs	.+44     	; 0x30dc <__fixunssfsi+0x3e>
    30b0:	e1 f0       	breq	.+56     	; 0x30ea <__fixunssfsi+0x4c>
    30b2:	66 0f       	add	r22, r22
    30b4:	77 1f       	adc	r23, r23
    30b6:	88 1f       	adc	r24, r24
    30b8:	99 1f       	adc	r25, r25
    30ba:	1a f0       	brmi	.+6      	; 0x30c2 <__fixunssfsi+0x24>
    30bc:	ba 95       	dec	r27
__fixunssfsi():
    30be:	c9 f7       	brne	.-14     	; 0x30b2 <__fixunssfsi+0x14>
    30c0:	14 c0       	rjmp	.+40     	; 0x30ea <__fixunssfsi+0x4c>
    30c2:	b1 30       	cpi	r27, 0x01	; 1
    30c4:	91 f0       	breq	.+36     	; 0x30ea <__fixunssfsi+0x4c>
    30c6:	0e 94 29 19 	call	0x3252	; 0x3252 <__fp_zero>
    30ca:	b1 e0       	ldi	r27, 0x01	; 1
    30cc:	08 95       	ret
    30ce:	0c 94 29 19 	jmp	0x3252	; 0x3252 <__fp_zero>
    30d2:	67 2f       	mov	r22, r23
    30d4:	78 2f       	mov	r23, r24
    30d6:	88 27       	eor	r24, r24
    30d8:	b8 5f       	subi	r27, 0xF8	; 248
    30da:	39 f0       	breq	.+14     	; 0x30ea <__fixunssfsi+0x4c>
    30dc:	b9 3f       	cpi	r27, 0xF9	; 249
    30de:	cc f3       	brlt	.-14     	; 0x30d2 <__fixunssfsi+0x34>
    30e0:	86 95       	lsr	r24
    30e2:	77 95       	ror	r23
    30e4:	67 95       	ror	r22
    30e6:	b3 95       	inc	r27
    30e8:	d9 f7       	brne	.-10     	; 0x30e0 <__fixunssfsi+0x42>
    30ea:	3e f4       	brtc	.+14     	; 0x30fa <__fixunssfsi+0x5c>
    30ec:	90 95       	com	r25
    30ee:	80 95       	com	r24
    30f0:	70 95       	com	r23
    30f2:	61 95       	neg	r22
    30f4:	7f 4f       	sbci	r23, 0xFF	; 255
    30f6:	8f 4f       	sbci	r24, 0xFF	; 255
    30f8:	9f 4f       	sbci	r25, 0xFF	; 255
    30fa:	08 95       	ret

000030fc <__floatunsisf>:
__floatunsisf():
    30fc:	e8 94       	clt
    30fe:	09 c0       	rjmp	.+18     	; 0x3112 <__floatsisf+0x12>

00003100 <__floatsisf>:
    3100:	97 fb       	bst	r25, 7
    3102:	3e f4       	brtc	.+14     	; 0x3112 <__floatsisf+0x12>
    3104:	90 95       	com	r25
    3106:	80 95       	com	r24
    3108:	70 95       	com	r23
    310a:	61 95       	neg	r22
    310c:	7f 4f       	sbci	r23, 0xFF	; 255
    310e:	8f 4f       	sbci	r24, 0xFF	; 255
    3110:	9f 4f       	sbci	r25, 0xFF	; 255
    3112:	99 23       	and	r25, r25
    3114:	a9 f0       	breq	.+42     	; 0x3140 <__floatsisf+0x40>
    3116:	f9 2f       	mov	r31, r25
    3118:	96 e9       	ldi	r25, 0x96	; 150
    311a:	bb 27       	eor	r27, r27
    311c:	93 95       	inc	r25
    311e:	f6 95       	lsr	r31
    3120:	87 95       	ror	r24
    3122:	77 95       	ror	r23
    3124:	67 95       	ror	r22
    3126:	b7 95       	ror	r27
    3128:	f1 11       	cpse	r31, r1
    312a:	f8 cf       	rjmp	.-16     	; 0x311c <__floatsisf+0x1c>
    312c:	fa f4       	brpl	.+62     	; 0x316c <__floatsisf+0x6c>
    312e:	bb 0f       	add	r27, r27
    3130:	11 f4       	brne	.+4      	; 0x3136 <__floatsisf+0x36>
    3132:	60 ff       	sbrs	r22, 0
    3134:	1b c0       	rjmp	.+54     	; 0x316c <__floatsisf+0x6c>
    3136:	6f 5f       	subi	r22, 0xFF	; 255
    3138:	7f 4f       	sbci	r23, 0xFF	; 255
    313a:	8f 4f       	sbci	r24, 0xFF	; 255
    313c:	9f 4f       	sbci	r25, 0xFF	; 255
    313e:	16 c0       	rjmp	.+44     	; 0x316c <__floatsisf+0x6c>
    3140:	88 23       	and	r24, r24
    3142:	11 f0       	breq	.+4      	; 0x3148 <__floatsisf+0x48>
    3144:	96 e9       	ldi	r25, 0x96	; 150
    3146:	11 c0       	rjmp	.+34     	; 0x316a <__floatsisf+0x6a>
    3148:	77 23       	and	r23, r23
    314a:	21 f0       	breq	.+8      	; 0x3154 <__floatsisf+0x54>
    314c:	9e e8       	ldi	r25, 0x8E	; 142
    314e:	87 2f       	mov	r24, r23
    3150:	76 2f       	mov	r23, r22
    3152:	05 c0       	rjmp	.+10     	; 0x315e <__floatsisf+0x5e>
    3154:	66 23       	and	r22, r22
    3156:	71 f0       	breq	.+28     	; 0x3174 <__floatsisf+0x74>
    3158:	96 e8       	ldi	r25, 0x86	; 134
    315a:	86 2f       	mov	r24, r22
    315c:	70 e0       	ldi	r23, 0x00	; 0
    315e:	60 e0       	ldi	r22, 0x00	; 0
    3160:	2a f0       	brmi	.+10     	; 0x316c <__floatsisf+0x6c>
    3162:	9a 95       	dec	r25
    3164:	66 0f       	add	r22, r22
    3166:	77 1f       	adc	r23, r23
    3168:	88 1f       	adc	r24, r24
    316a:	da f7       	brpl	.-10     	; 0x3162 <__floatsisf+0x62>
    316c:	88 0f       	add	r24, r24
    316e:	96 95       	lsr	r25
    3170:	87 95       	ror	r24
    3172:	97 f9       	bld	r25, 7
    3174:	08 95       	ret

00003176 <__fp_cmp>:
__fp_cmp():
    3176:	99 0f       	add	r25, r25
    3178:	00 08       	sbc	r0, r0
    317a:	55 0f       	add	r21, r21
    317c:	aa 0b       	sbc	r26, r26
    317e:	e0 e8       	ldi	r30, 0x80	; 128
    3180:	fe ef       	ldi	r31, 0xFE	; 254
    3182:	16 16       	cp	r1, r22
    3184:	17 06       	cpc	r1, r23
    3186:	e8 07       	cpc	r30, r24
    3188:	f9 07       	cpc	r31, r25
    318a:	c0 f0       	brcs	.+48     	; 0x31bc <__fp_cmp+0x46>
    318c:	12 16       	cp	r1, r18
    318e:	13 06       	cpc	r1, r19
    3190:	e4 07       	cpc	r30, r20
    3192:	f5 07       	cpc	r31, r21
    3194:	98 f0       	brcs	.+38     	; 0x31bc <__fp_cmp+0x46>
    3196:	62 1b       	sub	r22, r18
    3198:	73 0b       	sbc	r23, r19
    319a:	84 0b       	sbc	r24, r20
    319c:	95 0b       	sbc	r25, r21
    319e:	39 f4       	brne	.+14     	; 0x31ae <__fp_cmp+0x38>
    31a0:	0a 26       	eor	r0, r26
    31a2:	61 f0       	breq	.+24     	; 0x31bc <__fp_cmp+0x46>
    31a4:	23 2b       	or	r18, r19
    31a6:	24 2b       	or	r18, r20
    31a8:	25 2b       	or	r18, r21
    31aa:	21 f4       	brne	.+8      	; 0x31b4 <__fp_cmp+0x3e>
    31ac:	08 95       	ret
    31ae:	0a 26       	eor	r0, r26
    31b0:	09 f4       	brne	.+2      	; 0x31b4 <__fp_cmp+0x3e>
    31b2:	a1 40       	sbci	r26, 0x01	; 1
    31b4:	a6 95       	lsr	r26
    31b6:	8f ef       	ldi	r24, 0xFF	; 255
    31b8:	81 1d       	adc	r24, r1
    31ba:	81 1d       	adc	r24, r1
    31bc:	08 95       	ret

000031be <__fp_inf>:
__fp_inf():
    31be:	97 f9       	bld	r25, 7
    31c0:	9f 67       	ori	r25, 0x7F	; 127
    31c2:	80 e8       	ldi	r24, 0x80	; 128
    31c4:	70 e0       	ldi	r23, 0x00	; 0
    31c6:	60 e0       	ldi	r22, 0x00	; 0
    31c8:	08 95       	ret

000031ca <__fp_nan>:
__fp_nan():
    31ca:	9f ef       	ldi	r25, 0xFF	; 255
    31cc:	80 ec       	ldi	r24, 0xC0	; 192
    31ce:	08 95       	ret

000031d0 <__fp_pscA>:
__fp_pscA():
    31d0:	00 24       	eor	r0, r0
    31d2:	0a 94       	dec	r0
    31d4:	16 16       	cp	r1, r22
    31d6:	17 06       	cpc	r1, r23
    31d8:	18 06       	cpc	r1, r24
    31da:	09 06       	cpc	r0, r25
    31dc:	08 95       	ret

000031de <__fp_pscB>:
__fp_pscB():
    31de:	00 24       	eor	r0, r0
    31e0:	0a 94       	dec	r0
    31e2:	12 16       	cp	r1, r18
    31e4:	13 06       	cpc	r1, r19
    31e6:	14 06       	cpc	r1, r20
    31e8:	05 06       	cpc	r0, r21
    31ea:	08 95       	ret

000031ec <__fp_round>:
__fp_round():
    31ec:	09 2e       	mov	r0, r25
    31ee:	03 94       	inc	r0
    31f0:	00 0c       	add	r0, r0
    31f2:	11 f4       	brne	.+4      	; 0x31f8 <__fp_round+0xc>
    31f4:	88 23       	and	r24, r24
    31f6:	52 f0       	brmi	.+20     	; 0x320c <__fp_round+0x20>
    31f8:	bb 0f       	add	r27, r27
    31fa:	40 f4       	brcc	.+16     	; 0x320c <__fp_round+0x20>
    31fc:	bf 2b       	or	r27, r31
    31fe:	11 f4       	brne	.+4      	; 0x3204 <__fp_round+0x18>
    3200:	60 ff       	sbrs	r22, 0
    3202:	04 c0       	rjmp	.+8      	; 0x320c <__fp_round+0x20>
    3204:	6f 5f       	subi	r22, 0xFF	; 255
    3206:	7f 4f       	sbci	r23, 0xFF	; 255
    3208:	8f 4f       	sbci	r24, 0xFF	; 255
    320a:	9f 4f       	sbci	r25, 0xFF	; 255
    320c:	08 95       	ret

0000320e <__fp_split3>:
__fp_split3():
    320e:	57 fd       	sbrc	r21, 7
    3210:	90 58       	subi	r25, 0x80	; 128
    3212:	44 0f       	add	r20, r20
    3214:	55 1f       	adc	r21, r21
    3216:	59 f0       	breq	.+22     	; 0x322e <__fp_splitA+0x10>
    3218:	5f 3f       	cpi	r21, 0xFF	; 255
    321a:	71 f0       	breq	.+28     	; 0x3238 <__fp_splitA+0x1a>
    321c:	47 95       	ror	r20

0000321e <__fp_splitA>:
    321e:	88 0f       	add	r24, r24
    3220:	97 fb       	bst	r25, 7
    3222:	99 1f       	adc	r25, r25
    3224:	61 f0       	breq	.+24     	; 0x323e <__fp_splitA+0x20>
    3226:	9f 3f       	cpi	r25, 0xFF	; 255
    3228:	79 f0       	breq	.+30     	; 0x3248 <__fp_splitA+0x2a>
    322a:	87 95       	ror	r24
    322c:	08 95       	ret
    322e:	12 16       	cp	r1, r18
    3230:	13 06       	cpc	r1, r19
    3232:	14 06       	cpc	r1, r20
    3234:	55 1f       	adc	r21, r21
    3236:	f2 cf       	rjmp	.-28     	; 0x321c <__fp_split3+0xe>
    3238:	46 95       	lsr	r20
    323a:	f1 df       	rcall	.-30     	; 0x321e <__fp_splitA>
    323c:	08 c0       	rjmp	.+16     	; 0x324e <__fp_splitA+0x30>
    323e:	16 16       	cp	r1, r22
    3240:	17 06       	cpc	r1, r23
    3242:	18 06       	cpc	r1, r24
    3244:	99 1f       	adc	r25, r25
    3246:	f1 cf       	rjmp	.-30     	; 0x322a <__fp_splitA+0xc>
    3248:	86 95       	lsr	r24
    324a:	71 05       	cpc	r23, r1
    324c:	61 05       	cpc	r22, r1
    324e:	08 94       	sec
    3250:	08 95       	ret

00003252 <__fp_zero>:
__fp_zero():
    3252:	e8 94       	clt

00003254 <__fp_szero>:
    3254:	bb 27       	eor	r27, r27
    3256:	66 27       	eor	r22, r22
    3258:	77 27       	eor	r23, r23
    325a:	cb 01       	movw	r24, r22
    325c:	97 f9       	bld	r25, 7
    325e:	08 95       	ret

00003260 <__gesf2>:
__gesf2():
    3260:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fp_cmp>
    3264:	08 f4       	brcc	.+2      	; 0x3268 <__gesf2+0x8>
    3266:	8f ef       	ldi	r24, 0xFF	; 255
    3268:	08 95       	ret

0000326a <__mulsf3>:
__mulsf3():
    326a:	0e 94 48 19 	call	0x3290	; 0x3290 <__mulsf3x>
    326e:	0c 94 f6 18 	jmp	0x31ec	; 0x31ec <__fp_round>
    3272:	0e 94 e8 18 	call	0x31d0	; 0x31d0 <__fp_pscA>
    3276:	38 f0       	brcs	.+14     	; 0x3286 <__mulsf3+0x1c>
    3278:	0e 94 ef 18 	call	0x31de	; 0x31de <__fp_pscB>
    327c:	20 f0       	brcs	.+8      	; 0x3286 <__mulsf3+0x1c>
    327e:	95 23       	and	r25, r21
    3280:	11 f0       	breq	.+4      	; 0x3286 <__mulsf3+0x1c>
    3282:	0c 94 df 18 	jmp	0x31be	; 0x31be <__fp_inf>
    3286:	0c 94 e5 18 	jmp	0x31ca	; 0x31ca <__fp_nan>
    328a:	11 24       	eor	r1, r1
    328c:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__fp_szero>

00003290 <__mulsf3x>:
__mulsf3x():
    3290:	0e 94 07 19 	call	0x320e	; 0x320e <__fp_split3>
    3294:	70 f3       	brcs	.-36     	; 0x3272 <__mulsf3+0x8>

00003296 <__mulsf3_pse>:
    3296:	95 9f       	mul	r25, r21
    3298:	c1 f3       	breq	.-16     	; 0x328a <__mulsf3+0x20>
    329a:	95 0f       	add	r25, r21
    329c:	50 e0       	ldi	r21, 0x00	; 0
    329e:	55 1f       	adc	r21, r21
    32a0:	62 9f       	mul	r22, r18
    32a2:	f0 01       	movw	r30, r0
    32a4:	72 9f       	mul	r23, r18
    32a6:	bb 27       	eor	r27, r27
    32a8:	f0 0d       	add	r31, r0
    32aa:	b1 1d       	adc	r27, r1
    32ac:	63 9f       	mul	r22, r19
    32ae:	aa 27       	eor	r26, r26
    32b0:	f0 0d       	add	r31, r0
    32b2:	b1 1d       	adc	r27, r1
    32b4:	aa 1f       	adc	r26, r26
    32b6:	64 9f       	mul	r22, r20
    32b8:	66 27       	eor	r22, r22
    32ba:	b0 0d       	add	r27, r0
    32bc:	a1 1d       	adc	r26, r1
    32be:	66 1f       	adc	r22, r22
    32c0:	82 9f       	mul	r24, r18
    32c2:	22 27       	eor	r18, r18
    32c4:	b0 0d       	add	r27, r0
    32c6:	a1 1d       	adc	r26, r1
    32c8:	62 1f       	adc	r22, r18
    32ca:	73 9f       	mul	r23, r19
    32cc:	b0 0d       	add	r27, r0
    32ce:	a1 1d       	adc	r26, r1
    32d0:	62 1f       	adc	r22, r18
    32d2:	83 9f       	mul	r24, r19
    32d4:	a0 0d       	add	r26, r0
    32d6:	61 1d       	adc	r22, r1
    32d8:	22 1f       	adc	r18, r18
    32da:	74 9f       	mul	r23, r20
    32dc:	33 27       	eor	r19, r19
    32de:	a0 0d       	add	r26, r0
    32e0:	61 1d       	adc	r22, r1
    32e2:	23 1f       	adc	r18, r19
    32e4:	84 9f       	mul	r24, r20
    32e6:	60 0d       	add	r22, r0
    32e8:	21 1d       	adc	r18, r1
    32ea:	82 2f       	mov	r24, r18
    32ec:	76 2f       	mov	r23, r22
    32ee:	6a 2f       	mov	r22, r26
    32f0:	11 24       	eor	r1, r1
    32f2:	9f 57       	subi	r25, 0x7F	; 127
    32f4:	50 40       	sbci	r21, 0x00	; 0
    32f6:	9a f0       	brmi	.+38     	; 0x331e <__mulsf3_pse+0x88>
    32f8:	f1 f0       	breq	.+60     	; 0x3336 <__mulsf3_pse+0xa0>
    32fa:	88 23       	and	r24, r24
    32fc:	4a f0       	brmi	.+18     	; 0x3310 <__mulsf3_pse+0x7a>
    32fe:	ee 0f       	add	r30, r30
    3300:	ff 1f       	adc	r31, r31
    3302:	bb 1f       	adc	r27, r27
    3304:	66 1f       	adc	r22, r22
    3306:	77 1f       	adc	r23, r23
    3308:	88 1f       	adc	r24, r24
    330a:	91 50       	subi	r25, 0x01	; 1
    330c:	50 40       	sbci	r21, 0x00	; 0
    330e:	a9 f7       	brne	.-22     	; 0x32fa <__mulsf3_pse+0x64>
    3310:	9e 3f       	cpi	r25, 0xFE	; 254
    3312:	51 05       	cpc	r21, r1
    3314:	80 f0       	brcs	.+32     	; 0x3336 <__mulsf3_pse+0xa0>
    3316:	0c 94 df 18 	jmp	0x31be	; 0x31be <__fp_inf>
    331a:	0c 94 2a 19 	jmp	0x3254	; 0x3254 <__fp_szero>
    331e:	5f 3f       	cpi	r21, 0xFF	; 255
    3320:	e4 f3       	brlt	.-8      	; 0x331a <__mulsf3_pse+0x84>
    3322:	98 3e       	cpi	r25, 0xE8	; 232
    3324:	d4 f3       	brlt	.-12     	; 0x331a <__mulsf3_pse+0x84>
    3326:	86 95       	lsr	r24
    3328:	77 95       	ror	r23
    332a:	67 95       	ror	r22
    332c:	b7 95       	ror	r27
    332e:	f7 95       	ror	r31
    3330:	e7 95       	ror	r30
    3332:	9f 5f       	subi	r25, 0xFF	; 255
    3334:	c1 f7       	brne	.-16     	; 0x3326 <__mulsf3_pse+0x90>
    3336:	fe 2b       	or	r31, r30
    3338:	88 0f       	add	r24, r24
    333a:	91 1d       	adc	r25, r1
    333c:	96 95       	lsr	r25
    333e:	87 95       	ror	r24
    3340:	97 f9       	bld	r25, 7
    3342:	08 95       	ret

00003344 <__unordsf2>:
    3344:	0e 94 bb 18 	call	0x3176	; 0x3176 <__fp_cmp>
    3348:	88 0b       	sbc	r24, r24
    334a:	99 0b       	sbc	r25, r25
    334c:	08 95       	ret

0000334e <__udivmodhi4>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1408
    334e:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1409
    3350:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1410
    3352:	51 e1       	ldi	r21, 0x11	; 17
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1411
    3354:	07 c0       	rjmp	.+14     	; 0x3364 <__udivmodhi4_ep>

00003356 <__udivmodhi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1413
    3356:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1414
    3358:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1415
    335a:	a6 17       	cp	r26, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1416
    335c:	b7 07       	cpc	r27, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1417
    335e:	10 f0       	brcs	.+4      	; 0x3364 <__udivmodhi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1418
    3360:	a6 1b       	sub	r26, r22
__udivmodhi4_loop():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1419
    3362:	b7 0b       	sbc	r27, r23

00003364 <__udivmodhi4_ep>:
__udivmodhi4_ep():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1421
    3364:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1422
    3366:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1423
    3368:	5a 95       	dec	r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1424
    336a:	a9 f7       	brne	.-22     	; 0x3356 <__udivmodhi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1425
    336c:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1426
    336e:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1428
    3370:	bc 01       	movw	r22, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1430
    3372:	cd 01       	movw	r24, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1432
    3374:	08 95       	ret

00003376 <__udivmodsi4>:
__udivmodsi4():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1638
    3376:	a1 e2       	ldi	r26, 0x21	; 33
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1639
    3378:	1a 2e       	mov	r1, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1640
    337a:	aa 1b       	sub	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1641
    337c:	bb 1b       	sub	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1642
    337e:	fd 01       	movw	r30, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1644
    3380:	0d c0       	rjmp	.+26     	; 0x339c <__udivmodsi4_ep>

00003382 <__udivmodsi4_loop>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1646
    3382:	aa 1f       	adc	r26, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1647
    3384:	bb 1f       	adc	r27, r27
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1648
    3386:	ee 1f       	adc	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1649
    3388:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1650
    338a:	a2 17       	cp	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1651
    338c:	b3 07       	cpc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1652
    338e:	e4 07       	cpc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1653
    3390:	f5 07       	cpc	r31, r21
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1654
    3392:	20 f0       	brcs	.+8      	; 0x339c <__udivmodsi4_ep>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1655
    3394:	a2 1b       	sub	r26, r18
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1656
    3396:	b3 0b       	sbc	r27, r19
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1657
    3398:	e4 0b       	sbc	r30, r20
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1658
    339a:	f5 0b       	sbc	r31, r21

0000339c <__udivmodsi4_ep>:
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1660
    339c:	66 1f       	adc	r22, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1661
    339e:	77 1f       	adc	r23, r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1662
    33a0:	88 1f       	adc	r24, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1663
    33a2:	99 1f       	adc	r25, r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1664
    33a4:	1a 94       	dec	r1
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1665
    33a6:	69 f7       	brne	.-38     	; 0x3382 <__udivmodsi4_loop>
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1667
    33a8:	60 95       	com	r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1668
    33aa:	70 95       	com	r23
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1669
    33ac:	80 95       	com	r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1670
    33ae:	90 95       	com	r25
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1672
    33b0:	9b 01       	movw	r18, r22
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1674
    33b2:	ac 01       	movw	r20, r24
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1676
    33b4:	bd 01       	movw	r22, r26
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1678
    33b6:	cf 01       	movw	r24, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:1680
    33b8:	08 95       	ret

000033ba <__tablejump2__>:
__tablejump2__():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2296
    33ba:	ee 0f       	add	r30, r30
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2297
    33bc:	ff 1f       	adc	r31, r31
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2304
    33be:	00 24       	eor	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2305
    33c0:	00 1c       	adc	r0, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2306
    33c2:	0b be       	out	0x3b, r0	; 59
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2312
    33c4:	07 90       	elpm	r0, Z+
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2313
    33c6:	f6 91       	elpm	r31, Z
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2314
    33c8:	e0 2d       	mov	r30, r0
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2319
    33ca:	09 94       	ijmp

000033cc <strcpy>:
strcpy():
    33cc:	fb 01       	movw	r30, r22
    33ce:	dc 01       	movw	r26, r24
    33d0:	01 90       	ld	r0, Z+
    33d2:	0d 92       	st	X+, r0
    33d4:	00 20       	and	r0, r0
    33d6:	e1 f7       	brne	.-8      	; 0x33d0 <strcpy+0x4>
    33d8:	08 95       	ret

000033da <sprintf>:
sprintf():
    33da:	0f 93       	push	r16
    33dc:	1f 93       	push	r17
    33de:	cf 93       	push	r28
    33e0:	df 93       	push	r29
    33e2:	cd b7       	in	r28, 0x3d	; 61
    33e4:	de b7       	in	r29, 0x3e	; 62
    33e6:	2e 97       	sbiw	r28, 0x0e	; 14
    33e8:	0f b6       	in	r0, 0x3f	; 63
    33ea:	f8 94       	cli
    33ec:	de bf       	out	0x3e, r29	; 62
    33ee:	0f be       	out	0x3f, r0	; 63
    33f0:	cd bf       	out	0x3d, r28	; 61
    33f2:	0d 89       	ldd	r16, Y+21	; 0x15
    33f4:	1e 89       	ldd	r17, Y+22	; 0x16
    33f6:	86 e0       	ldi	r24, 0x06	; 6
    33f8:	8c 83       	std	Y+4, r24	; 0x04
    33fa:	1a 83       	std	Y+2, r17	; 0x02
    33fc:	09 83       	std	Y+1, r16	; 0x01
    33fe:	8f ef       	ldi	r24, 0xFF	; 255
    3400:	9f e7       	ldi	r25, 0x7F	; 127
    3402:	9e 83       	std	Y+6, r25	; 0x06
    3404:	8d 83       	std	Y+5, r24	; 0x05
    3406:	ae 01       	movw	r20, r28
    3408:	47 5e       	subi	r20, 0xE7	; 231
    340a:	5f 4f       	sbci	r21, 0xFF	; 255
    340c:	6f 89       	ldd	r22, Y+23	; 0x17
    340e:	78 8d       	ldd	r23, Y+24	; 0x18
    3410:	ce 01       	movw	r24, r28
    3412:	01 96       	adiw	r24, 0x01	; 1
    3414:	0e 94 1d 1a 	call	0x343a	; 0x343a <vfprintf>
    3418:	2f 81       	ldd	r18, Y+7	; 0x07
    341a:	38 85       	ldd	r19, Y+8	; 0x08
    341c:	02 0f       	add	r16, r18
    341e:	13 1f       	adc	r17, r19
    3420:	f8 01       	movw	r30, r16
    3422:	10 82       	st	Z, r1
    3424:	2e 96       	adiw	r28, 0x0e	; 14
    3426:	0f b6       	in	r0, 0x3f	; 63
    3428:	f8 94       	cli
    342a:	de bf       	out	0x3e, r29	; 62
    342c:	0f be       	out	0x3f, r0	; 63
    342e:	cd bf       	out	0x3d, r28	; 61
    3430:	df 91       	pop	r29
    3432:	cf 91       	pop	r28
    3434:	1f 91       	pop	r17
    3436:	0f 91       	pop	r16
    3438:	08 95       	ret

0000343a <vfprintf>:
vfprintf():
    343a:	2f 92       	push	r2
    343c:	3f 92       	push	r3
    343e:	4f 92       	push	r4
    3440:	5f 92       	push	r5
    3442:	6f 92       	push	r6
    3444:	7f 92       	push	r7
    3446:	8f 92       	push	r8
    3448:	9f 92       	push	r9
    344a:	af 92       	push	r10
    344c:	bf 92       	push	r11
    344e:	cf 92       	push	r12
    3450:	df 92       	push	r13
    3452:	ef 92       	push	r14
    3454:	ff 92       	push	r15
    3456:	0f 93       	push	r16
    3458:	1f 93       	push	r17
    345a:	cf 93       	push	r28
    345c:	df 93       	push	r29
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62
    3462:	2b 97       	sbiw	r28, 0x0b	; 11
    3464:	0f b6       	in	r0, 0x3f	; 63
    3466:	f8 94       	cli
    3468:	de bf       	out	0x3e, r29	; 62
    346a:	0f be       	out	0x3f, r0	; 63
    346c:	cd bf       	out	0x3d, r28	; 61
    346e:	7c 01       	movw	r14, r24
    3470:	3b 01       	movw	r6, r22
    3472:	8a 01       	movw	r16, r20
    3474:	fc 01       	movw	r30, r24
    3476:	17 82       	std	Z+7, r1	; 0x07
    3478:	16 82       	std	Z+6, r1	; 0x06
    347a:	83 81       	ldd	r24, Z+3	; 0x03
    347c:	81 ff       	sbrs	r24, 1
    347e:	dd c1       	rjmp	.+954    	; 0x383a <vfprintf+0x400>
    3480:	ce 01       	movw	r24, r28
    3482:	01 96       	adiw	r24, 0x01	; 1
    3484:	5c 01       	movw	r10, r24
    3486:	f7 01       	movw	r30, r14
    3488:	93 81       	ldd	r25, Z+3	; 0x03
    348a:	f3 01       	movw	r30, r6
    348c:	93 fd       	sbrc	r25, 3
    348e:	85 91       	lpm	r24, Z+
    3490:	93 ff       	sbrs	r25, 3
    3492:	81 91       	ld	r24, Z+
    3494:	3f 01       	movw	r6, r30
    3496:	88 23       	and	r24, r24
    3498:	09 f4       	brne	.+2      	; 0x349c <vfprintf+0x62>
    349a:	53 c1       	rjmp	.+678    	; 0x3742 <vfprintf+0x308>
    349c:	85 32       	cpi	r24, 0x25	; 37
    349e:	39 f4       	brne	.+14     	; 0x34ae <vfprintf+0x74>
    34a0:	93 fd       	sbrc	r25, 3
    34a2:	85 91       	lpm	r24, Z+
    34a4:	93 ff       	sbrs	r25, 3
    34a6:	81 91       	ld	r24, Z+
    34a8:	3f 01       	movw	r6, r30
    34aa:	85 32       	cpi	r24, 0x25	; 37
    34ac:	29 f4       	brne	.+10     	; 0x34b8 <vfprintf+0x7e>
    34ae:	b7 01       	movw	r22, r14
    34b0:	90 e0       	ldi	r25, 0x00	; 0
    34b2:	0e 94 36 1c 	call	0x386c	; 0x386c <fputc>
    34b6:	e7 cf       	rjmp	.-50     	; 0x3486 <vfprintf+0x4c>
    34b8:	91 2c       	mov	r9, r1
    34ba:	21 2c       	mov	r2, r1
    34bc:	31 2c       	mov	r3, r1
    34be:	ff e1       	ldi	r31, 0x1F	; 31
    34c0:	f3 15       	cp	r31, r3
    34c2:	38 f0       	brcs	.+14     	; 0x34d2 <vfprintf+0x98>
    34c4:	8b 32       	cpi	r24, 0x2B	; 43
    34c6:	11 f1       	breq	.+68     	; 0x350c <vfprintf+0xd2>
    34c8:	90 f4       	brcc	.+36     	; 0x34ee <vfprintf+0xb4>
    34ca:	80 32       	cpi	r24, 0x20	; 32
    34cc:	09 f1       	breq	.+66     	; 0x3510 <vfprintf+0xd6>
    34ce:	83 32       	cpi	r24, 0x23	; 35
    34d0:	29 f1       	breq	.+74     	; 0x351c <vfprintf+0xe2>
    34d2:	37 fc       	sbrc	r3, 7
    34d4:	3c c0       	rjmp	.+120    	; 0x354e <vfprintf+0x114>
    34d6:	20 ed       	ldi	r18, 0xD0	; 208
    34d8:	28 0f       	add	r18, r24
    34da:	2a 30       	cpi	r18, 0x0A	; 10
    34dc:	50 f5       	brcc	.+84     	; 0x3532 <vfprintf+0xf8>
    34de:	36 fe       	sbrs	r3, 6
    34e0:	20 c0       	rjmp	.+64     	; 0x3522 <vfprintf+0xe8>
    34e2:	8a e0       	ldi	r24, 0x0A	; 10
    34e4:	98 9e       	mul	r9, r24
    34e6:	20 0d       	add	r18, r0
    34e8:	11 24       	eor	r1, r1
    34ea:	92 2e       	mov	r9, r18
    34ec:	06 c0       	rjmp	.+12     	; 0x34fa <vfprintf+0xc0>
    34ee:	8d 32       	cpi	r24, 0x2D	; 45
    34f0:	91 f0       	breq	.+36     	; 0x3516 <vfprintf+0xdc>
    34f2:	80 33       	cpi	r24, 0x30	; 48
    34f4:	71 f7       	brne	.-36     	; 0x34d2 <vfprintf+0x98>
    34f6:	68 94       	set
    34f8:	30 f8       	bld	r3, 0
    34fa:	f3 01       	movw	r30, r6
    34fc:	93 fd       	sbrc	r25, 3
    34fe:	85 91       	lpm	r24, Z+
    3500:	93 ff       	sbrs	r25, 3
    3502:	81 91       	ld	r24, Z+
    3504:	3f 01       	movw	r6, r30
    3506:	81 11       	cpse	r24, r1
    3508:	da cf       	rjmp	.-76     	; 0x34be <vfprintf+0x84>
    350a:	21 c0       	rjmp	.+66     	; 0x354e <vfprintf+0x114>
    350c:	68 94       	set
    350e:	31 f8       	bld	r3, 1
    3510:	68 94       	set
    3512:	32 f8       	bld	r3, 2
    3514:	f2 cf       	rjmp	.-28     	; 0x34fa <vfprintf+0xc0>
    3516:	68 94       	set
    3518:	33 f8       	bld	r3, 3
    351a:	ef cf       	rjmp	.-34     	; 0x34fa <vfprintf+0xc0>
    351c:	68 94       	set
    351e:	34 f8       	bld	r3, 4
    3520:	ec cf       	rjmp	.-40     	; 0x34fa <vfprintf+0xc0>
    3522:	ea e0       	ldi	r30, 0x0A	; 10
    3524:	2e 9e       	mul	r2, r30
    3526:	20 0d       	add	r18, r0
    3528:	11 24       	eor	r1, r1
    352a:	22 2e       	mov	r2, r18
    352c:	68 94       	set
    352e:	35 f8       	bld	r3, 5
    3530:	e4 cf       	rjmp	.-56     	; 0x34fa <vfprintf+0xc0>
    3532:	8e 32       	cpi	r24, 0x2E	; 46
    3534:	29 f4       	brne	.+10     	; 0x3540 <vfprintf+0x106>
    3536:	36 fc       	sbrc	r3, 6
    3538:	04 c1       	rjmp	.+520    	; 0x3742 <vfprintf+0x308>
    353a:	68 94       	set
    353c:	36 f8       	bld	r3, 6
    353e:	dd cf       	rjmp	.-70     	; 0x34fa <vfprintf+0xc0>
    3540:	8c 36       	cpi	r24, 0x6C	; 108
    3542:	19 f4       	brne	.+6      	; 0x354a <vfprintf+0x110>
    3544:	68 94       	set
    3546:	37 f8       	bld	r3, 7
    3548:	d8 cf       	rjmp	.-80     	; 0x34fa <vfprintf+0xc0>
    354a:	88 36       	cpi	r24, 0x68	; 104
    354c:	b1 f2       	breq	.-84     	; 0x34fa <vfprintf+0xc0>
    354e:	98 2f       	mov	r25, r24
    3550:	9f 7d       	andi	r25, 0xDF	; 223
    3552:	95 54       	subi	r25, 0x45	; 69
    3554:	93 30       	cpi	r25, 0x03	; 3
    3556:	e0 f0       	brcs	.+56     	; 0x3590 <vfprintf+0x156>
    3558:	83 36       	cpi	r24, 0x63	; 99
    355a:	a1 f1       	breq	.+104    	; 0x35c4 <vfprintf+0x18a>
    355c:	83 37       	cpi	r24, 0x73	; 115
    355e:	c1 f1       	breq	.+112    	; 0x35d0 <vfprintf+0x196>
    3560:	83 35       	cpi	r24, 0x53	; 83
    3562:	09 f0       	breq	.+2      	; 0x3566 <vfprintf+0x12c>
    3564:	63 c0       	rjmp	.+198    	; 0x362c <vfprintf+0x1f2>
    3566:	28 01       	movw	r4, r16
    3568:	f2 e0       	ldi	r31, 0x02	; 2
    356a:	4f 0e       	add	r4, r31
    356c:	51 1c       	adc	r5, r1
    356e:	f8 01       	movw	r30, r16
    3570:	c0 80       	ld	r12, Z
    3572:	d1 80       	ldd	r13, Z+1	; 0x01
    3574:	69 2d       	mov	r22, r9
    3576:	70 e0       	ldi	r23, 0x00	; 0
    3578:	36 fc       	sbrc	r3, 6
    357a:	02 c0       	rjmp	.+4      	; 0x3580 <vfprintf+0x146>
    357c:	6f ef       	ldi	r22, 0xFF	; 255
    357e:	7f ef       	ldi	r23, 0xFF	; 255
    3580:	c6 01       	movw	r24, r12
    3582:	0e 94 20 1c 	call	0x3840	; 0x3840 <strnlen_P>
    3586:	4c 01       	movw	r8, r24
    3588:	68 94       	set
    358a:	37 f8       	bld	r3, 7
    358c:	82 01       	movw	r16, r4
    358e:	0a c0       	rjmp	.+20     	; 0x35a4 <vfprintf+0x16a>
    3590:	0c 5f       	subi	r16, 0xFC	; 252
    3592:	1f 4f       	sbci	r17, 0xFF	; 255
    3594:	ff e3       	ldi	r31, 0x3F	; 63
    3596:	f9 83       	std	Y+1, r31	; 0x01
    3598:	88 24       	eor	r8, r8
    359a:	83 94       	inc	r8
    359c:	91 2c       	mov	r9, r1
    359e:	65 01       	movw	r12, r10
    35a0:	e8 94       	clt
    35a2:	37 f8       	bld	r3, 7
    35a4:	33 fe       	sbrs	r3, 3
    35a6:	2d c0       	rjmp	.+90     	; 0x3602 <vfprintf+0x1c8>
    35a8:	52 2c       	mov	r5, r2
    35aa:	81 14       	cp	r8, r1
    35ac:	91 04       	cpc	r9, r1
    35ae:	71 f5       	brne	.+92     	; 0x360c <vfprintf+0x1d2>
    35b0:	55 20       	and	r5, r5
    35b2:	09 f4       	brne	.+2      	; 0x35b6 <vfprintf+0x17c>
    35b4:	68 cf       	rjmp	.-304    	; 0x3486 <vfprintf+0x4c>
    35b6:	b7 01       	movw	r22, r14
    35b8:	80 e2       	ldi	r24, 0x20	; 32
    35ba:	90 e0       	ldi	r25, 0x00	; 0
    35bc:	0e 94 36 1c 	call	0x386c	; 0x386c <fputc>
    35c0:	5a 94       	dec	r5
    35c2:	f6 cf       	rjmp	.-20     	; 0x35b0 <vfprintf+0x176>
    35c4:	f8 01       	movw	r30, r16
    35c6:	80 81       	ld	r24, Z
    35c8:	89 83       	std	Y+1, r24	; 0x01
    35ca:	0e 5f       	subi	r16, 0xFE	; 254
    35cc:	1f 4f       	sbci	r17, 0xFF	; 255
    35ce:	e4 cf       	rjmp	.-56     	; 0x3598 <vfprintf+0x15e>
    35d0:	28 01       	movw	r4, r16
    35d2:	f2 e0       	ldi	r31, 0x02	; 2
    35d4:	4f 0e       	add	r4, r31
    35d6:	51 1c       	adc	r5, r1
    35d8:	f8 01       	movw	r30, r16
    35da:	c0 80       	ld	r12, Z
    35dc:	d1 80       	ldd	r13, Z+1	; 0x01
    35de:	69 2d       	mov	r22, r9
    35e0:	70 e0       	ldi	r23, 0x00	; 0
    35e2:	36 fc       	sbrc	r3, 6
    35e4:	02 c0       	rjmp	.+4      	; 0x35ea <vfprintf+0x1b0>
    35e6:	6f ef       	ldi	r22, 0xFF	; 255
    35e8:	7f ef       	ldi	r23, 0xFF	; 255
    35ea:	c6 01       	movw	r24, r12
    35ec:	0e 94 2b 1c 	call	0x3856	; 0x3856 <strnlen>
    35f0:	4c 01       	movw	r8, r24
    35f2:	82 01       	movw	r16, r4
    35f4:	d5 cf       	rjmp	.-86     	; 0x35a0 <vfprintf+0x166>
    35f6:	b7 01       	movw	r22, r14
    35f8:	80 e2       	ldi	r24, 0x20	; 32
    35fa:	90 e0       	ldi	r25, 0x00	; 0
    35fc:	0e 94 36 1c 	call	0x386c	; 0x386c <fputc>
    3600:	2a 94       	dec	r2
    3602:	28 14       	cp	r2, r8
    3604:	19 04       	cpc	r1, r9
    3606:	09 f0       	breq	.+2      	; 0x360a <vfprintf+0x1d0>
    3608:	b0 f7       	brcc	.-20     	; 0x35f6 <vfprintf+0x1bc>
    360a:	ce cf       	rjmp	.-100    	; 0x35a8 <vfprintf+0x16e>
    360c:	f6 01       	movw	r30, r12
    360e:	37 fc       	sbrc	r3, 7
    3610:	85 91       	lpm	r24, Z+
    3612:	37 fe       	sbrs	r3, 7
    3614:	81 91       	ld	r24, Z+
    3616:	6f 01       	movw	r12, r30
    3618:	b7 01       	movw	r22, r14
    361a:	90 e0       	ldi	r25, 0x00	; 0
    361c:	0e 94 36 1c 	call	0x386c	; 0x386c <fputc>
    3620:	51 10       	cpse	r5, r1
    3622:	5a 94       	dec	r5
    3624:	f1 e0       	ldi	r31, 0x01	; 1
    3626:	8f 1a       	sub	r8, r31
    3628:	91 08       	sbc	r9, r1
    362a:	bf cf       	rjmp	.-130    	; 0x35aa <vfprintf+0x170>
    362c:	84 36       	cpi	r24, 0x64	; 100
    362e:	19 f0       	breq	.+6      	; 0x3636 <vfprintf+0x1fc>
    3630:	89 36       	cpi	r24, 0x69	; 105
    3632:	09 f0       	breq	.+2      	; 0x3636 <vfprintf+0x1fc>
    3634:	77 c0       	rjmp	.+238    	; 0x3724 <vfprintf+0x2ea>
    3636:	f8 01       	movw	r30, r16
    3638:	37 fe       	sbrs	r3, 7
    363a:	6b c0       	rjmp	.+214    	; 0x3712 <vfprintf+0x2d8>
    363c:	60 81       	ld	r22, Z
    363e:	71 81       	ldd	r23, Z+1	; 0x01
    3640:	82 81       	ldd	r24, Z+2	; 0x02
    3642:	93 81       	ldd	r25, Z+3	; 0x03
    3644:	0c 5f       	subi	r16, 0xFC	; 252
    3646:	1f 4f       	sbci	r17, 0xFF	; 255
    3648:	f3 2d       	mov	r31, r3
    364a:	ff 76       	andi	r31, 0x6F	; 111
    364c:	3f 2e       	mov	r3, r31
    364e:	97 ff       	sbrs	r25, 7
    3650:	09 c0       	rjmp	.+18     	; 0x3664 <vfprintf+0x22a>
    3652:	90 95       	com	r25
    3654:	80 95       	com	r24
    3656:	70 95       	com	r23
    3658:	61 95       	neg	r22
    365a:	7f 4f       	sbci	r23, 0xFF	; 255
    365c:	8f 4f       	sbci	r24, 0xFF	; 255
    365e:	9f 4f       	sbci	r25, 0xFF	; 255
    3660:	68 94       	set
    3662:	37 f8       	bld	r3, 7
    3664:	2a e0       	ldi	r18, 0x0A	; 10
    3666:	30 e0       	ldi	r19, 0x00	; 0
    3668:	a5 01       	movw	r20, r10
    366a:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__ultoa_invert>
    366e:	c8 2e       	mov	r12, r24
    3670:	ca 18       	sub	r12, r10
    3672:	8c 2c       	mov	r8, r12
    3674:	43 2c       	mov	r4, r3
    3676:	36 fe       	sbrs	r3, 6
    3678:	0c c0       	rjmp	.+24     	; 0x3692 <vfprintf+0x258>
    367a:	e8 94       	clt
    367c:	40 f8       	bld	r4, 0
    367e:	c9 14       	cp	r12, r9
    3680:	40 f4       	brcc	.+16     	; 0x3692 <vfprintf+0x258>
    3682:	34 fe       	sbrs	r3, 4
    3684:	05 c0       	rjmp	.+10     	; 0x3690 <vfprintf+0x256>
    3686:	32 fc       	sbrc	r3, 2
    3688:	03 c0       	rjmp	.+6      	; 0x3690 <vfprintf+0x256>
    368a:	f3 2d       	mov	r31, r3
    368c:	fe 7e       	andi	r31, 0xEE	; 238
    368e:	4f 2e       	mov	r4, r31
    3690:	89 2c       	mov	r8, r9
    3692:	44 fe       	sbrs	r4, 4
    3694:	aa c0       	rjmp	.+340    	; 0x37ea <vfprintf+0x3b0>
    3696:	fe 01       	movw	r30, r28
    3698:	ec 0d       	add	r30, r12
    369a:	f1 1d       	adc	r31, r1
    369c:	80 81       	ld	r24, Z
    369e:	80 33       	cpi	r24, 0x30	; 48
    36a0:	09 f0       	breq	.+2      	; 0x36a4 <vfprintf+0x26a>
    36a2:	9c c0       	rjmp	.+312    	; 0x37dc <vfprintf+0x3a2>
    36a4:	24 2d       	mov	r18, r4
    36a6:	29 7e       	andi	r18, 0xE9	; 233
    36a8:	42 2e       	mov	r4, r18
    36aa:	84 2d       	mov	r24, r4
    36ac:	88 70       	andi	r24, 0x08	; 8
    36ae:	58 2e       	mov	r5, r24
    36b0:	43 fc       	sbrc	r4, 3
    36b2:	aa c0       	rjmp	.+340    	; 0x3808 <vfprintf+0x3ce>
    36b4:	40 fe       	sbrs	r4, 0
    36b6:	a4 c0       	rjmp	.+328    	; 0x3800 <vfprintf+0x3c6>
    36b8:	9c 2c       	mov	r9, r12
    36ba:	82 14       	cp	r8, r2
    36bc:	18 f4       	brcc	.+6      	; 0x36c4 <vfprintf+0x28a>
    36be:	2c 0c       	add	r2, r12
    36c0:	92 2c       	mov	r9, r2
    36c2:	98 18       	sub	r9, r8
    36c4:	44 fe       	sbrs	r4, 4
    36c6:	a6 c0       	rjmp	.+332    	; 0x3814 <vfprintf+0x3da>
    36c8:	b7 01       	movw	r22, r14
    36ca:	80 e3       	ldi	r24, 0x30	; 48
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	0e 94 36 1c 	call	0x386c	; 0x386c <fputc>
    36d2:	42 fe       	sbrs	r4, 2
    36d4:	09 c0       	rjmp	.+18     	; 0x36e8 <vfprintf+0x2ae>
    36d6:	88 e7       	ldi	r24, 0x78	; 120
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	41 fe       	sbrs	r4, 1
    36dc:	02 c0       	rjmp	.+4      	; 0x36e2 <vfprintf+0x2a8>
    36de:	88 e5       	ldi	r24, 0x58	; 88
    36e0:	90 e0       	ldi	r25, 0x00	; 0
    36e2:	b7 01       	movw	r22, r14
    36e4:	0e 94 36 1c 	call	0x386c	; 0x386c <fputc>
    36e8:	c9 14       	cp	r12, r9
    36ea:	08 f4       	brcc	.+2      	; 0x36ee <vfprintf+0x2b4>
    36ec:	9f c0       	rjmp	.+318    	; 0x382c <vfprintf+0x3f2>
    36ee:	ca 94       	dec	r12
    36f0:	d1 2c       	mov	r13, r1
    36f2:	9f ef       	ldi	r25, 0xFF	; 255
    36f4:	c9 1a       	sub	r12, r25
    36f6:	d9 0a       	sbc	r13, r25
    36f8:	ca 0c       	add	r12, r10
    36fa:	db 1c       	adc	r13, r11
    36fc:	f6 01       	movw	r30, r12
    36fe:	82 91       	ld	r24, -Z
    3700:	6f 01       	movw	r12, r30
    3702:	b7 01       	movw	r22, r14
    3704:	90 e0       	ldi	r25, 0x00	; 0
    3706:	0e 94 36 1c 	call	0x386c	; 0x386c <fputc>
    370a:	ac 14       	cp	r10, r12
    370c:	bd 04       	cpc	r11, r13
    370e:	b1 f7       	brne	.-20     	; 0x36fc <vfprintf+0x2c2>
    3710:	4f cf       	rjmp	.-354    	; 0x35b0 <vfprintf+0x176>
    3712:	60 81       	ld	r22, Z
    3714:	71 81       	ldd	r23, Z+1	; 0x01
    3716:	07 2e       	mov	r0, r23
    3718:	00 0c       	add	r0, r0
    371a:	88 0b       	sbc	r24, r24
    371c:	99 0b       	sbc	r25, r25
    371e:	0e 5f       	subi	r16, 0xFE	; 254
    3720:	1f 4f       	sbci	r17, 0xFF	; 255
    3722:	92 cf       	rjmp	.-220    	; 0x3648 <vfprintf+0x20e>
    3724:	d3 2c       	mov	r13, r3
    3726:	e8 94       	clt
    3728:	d4 f8       	bld	r13, 4
    372a:	2a e0       	ldi	r18, 0x0A	; 10
    372c:	30 e0       	ldi	r19, 0x00	; 0
    372e:	85 37       	cpi	r24, 0x75	; 117
    3730:	e1 f1       	breq	.+120    	; 0x37aa <vfprintf+0x370>
    3732:	23 2d       	mov	r18, r3
    3734:	29 7f       	andi	r18, 0xF9	; 249
    3736:	d2 2e       	mov	r13, r18
    3738:	8f 36       	cpi	r24, 0x6F	; 111
    373a:	a9 f1       	breq	.+106    	; 0x37a6 <vfprintf+0x36c>
    373c:	f0 f4       	brcc	.+60     	; 0x377a <vfprintf+0x340>
    373e:	88 35       	cpi	r24, 0x58	; 88
    3740:	51 f1       	breq	.+84     	; 0x3796 <vfprintf+0x35c>
    3742:	f7 01       	movw	r30, r14
    3744:	86 81       	ldd	r24, Z+6	; 0x06
    3746:	97 81       	ldd	r25, Z+7	; 0x07
    3748:	2b 96       	adiw	r28, 0x0b	; 11
    374a:	0f b6       	in	r0, 0x3f	; 63
    374c:	f8 94       	cli
    374e:	de bf       	out	0x3e, r29	; 62
    3750:	0f be       	out	0x3f, r0	; 63
    3752:	cd bf       	out	0x3d, r28	; 61
    3754:	df 91       	pop	r29
    3756:	cf 91       	pop	r28
    3758:	1f 91       	pop	r17
    375a:	0f 91       	pop	r16
    375c:	ff 90       	pop	r15
    375e:	ef 90       	pop	r14
    3760:	df 90       	pop	r13
    3762:	cf 90       	pop	r12
    3764:	bf 90       	pop	r11
    3766:	af 90       	pop	r10
    3768:	9f 90       	pop	r9
    376a:	8f 90       	pop	r8
    376c:	7f 90       	pop	r7
    376e:	6f 90       	pop	r6
    3770:	5f 90       	pop	r5
    3772:	4f 90       	pop	r4
    3774:	3f 90       	pop	r3
    3776:	2f 90       	pop	r2
    3778:	08 95       	ret
    377a:	80 37       	cpi	r24, 0x70	; 112
    377c:	49 f0       	breq	.+18     	; 0x3790 <vfprintf+0x356>
    377e:	88 37       	cpi	r24, 0x78	; 120
    3780:	01 f7       	brne	.-64     	; 0x3742 <vfprintf+0x308>
    3782:	d4 fe       	sbrs	r13, 4
    3784:	02 c0       	rjmp	.+4      	; 0x378a <vfprintf+0x350>
    3786:	68 94       	set
    3788:	d2 f8       	bld	r13, 2
    378a:	20 e1       	ldi	r18, 0x10	; 16
    378c:	30 e0       	ldi	r19, 0x00	; 0
    378e:	0d c0       	rjmp	.+26     	; 0x37aa <vfprintf+0x370>
    3790:	68 94       	set
    3792:	d4 f8       	bld	r13, 4
    3794:	f6 cf       	rjmp	.-20     	; 0x3782 <vfprintf+0x348>
    3796:	34 fe       	sbrs	r3, 4
    3798:	03 c0       	rjmp	.+6      	; 0x37a0 <vfprintf+0x366>
    379a:	82 2f       	mov	r24, r18
    379c:	86 60       	ori	r24, 0x06	; 6
    379e:	d8 2e       	mov	r13, r24
    37a0:	20 e1       	ldi	r18, 0x10	; 16
    37a2:	32 e0       	ldi	r19, 0x02	; 2
    37a4:	02 c0       	rjmp	.+4      	; 0x37aa <vfprintf+0x370>
    37a6:	28 e0       	ldi	r18, 0x08	; 8
    37a8:	30 e0       	ldi	r19, 0x00	; 0
    37aa:	f8 01       	movw	r30, r16
    37ac:	d7 fe       	sbrs	r13, 7
    37ae:	0f c0       	rjmp	.+30     	; 0x37ce <vfprintf+0x394>
    37b0:	60 81       	ld	r22, Z
    37b2:	71 81       	ldd	r23, Z+1	; 0x01
    37b4:	82 81       	ldd	r24, Z+2	; 0x02
    37b6:	93 81       	ldd	r25, Z+3	; 0x03
    37b8:	0c 5f       	subi	r16, 0xFC	; 252
    37ba:	1f 4f       	sbci	r17, 0xFF	; 255
    37bc:	a5 01       	movw	r20, r10
    37be:	0e 94 66 1c 	call	0x38cc	; 0x38cc <__ultoa_invert>
    37c2:	c8 2e       	mov	r12, r24
    37c4:	ca 18       	sub	r12, r10
    37c6:	3d 2c       	mov	r3, r13
    37c8:	e8 94       	clt
    37ca:	37 f8       	bld	r3, 7
    37cc:	52 cf       	rjmp	.-348    	; 0x3672 <vfprintf+0x238>
    37ce:	60 81       	ld	r22, Z
    37d0:	71 81       	ldd	r23, Z+1	; 0x01
    37d2:	90 e0       	ldi	r25, 0x00	; 0
    37d4:	80 e0       	ldi	r24, 0x00	; 0
    37d6:	0e 5f       	subi	r16, 0xFE	; 254
    37d8:	1f 4f       	sbci	r17, 0xFF	; 255
    37da:	f0 cf       	rjmp	.-32     	; 0x37bc <vfprintf+0x382>
    37dc:	42 fc       	sbrc	r4, 2
    37de:	02 c0       	rjmp	.+4      	; 0x37e4 <vfprintf+0x3aa>
    37e0:	83 94       	inc	r8
    37e2:	63 cf       	rjmp	.-314    	; 0x36aa <vfprintf+0x270>
    37e4:	83 94       	inc	r8
    37e6:	83 94       	inc	r8
    37e8:	60 cf       	rjmp	.-320    	; 0x36aa <vfprintf+0x270>
    37ea:	84 2d       	mov	r24, r4
    37ec:	86 78       	andi	r24, 0x86	; 134
    37ee:	09 f4       	brne	.+2      	; 0x37f2 <vfprintf+0x3b8>
    37f0:	5c cf       	rjmp	.-328    	; 0x36aa <vfprintf+0x270>
    37f2:	f6 cf       	rjmp	.-20     	; 0x37e0 <vfprintf+0x3a6>
    37f4:	b7 01       	movw	r22, r14
    37f6:	80 e2       	ldi	r24, 0x20	; 32
    37f8:	90 e0       	ldi	r25, 0x00	; 0
    37fa:	0e 94 36 1c 	call	0x386c	; 0x386c <fputc>
    37fe:	83 94       	inc	r8
    3800:	82 14       	cp	r8, r2
    3802:	c0 f3       	brcs	.-16     	; 0x37f4 <vfprintf+0x3ba>
    3804:	51 2c       	mov	r5, r1
    3806:	5e cf       	rjmp	.-324    	; 0x36c4 <vfprintf+0x28a>
    3808:	52 2c       	mov	r5, r2
    380a:	58 18       	sub	r5, r8
    380c:	82 14       	cp	r8, r2
    380e:	08 f4       	brcc	.+2      	; 0x3812 <vfprintf+0x3d8>
    3810:	59 cf       	rjmp	.-334    	; 0x36c4 <vfprintf+0x28a>
    3812:	f8 cf       	rjmp	.-16     	; 0x3804 <vfprintf+0x3ca>
    3814:	84 2d       	mov	r24, r4
    3816:	86 78       	andi	r24, 0x86	; 134
    3818:	09 f4       	brne	.+2      	; 0x381c <vfprintf+0x3e2>
    381a:	66 cf       	rjmp	.-308    	; 0x36e8 <vfprintf+0x2ae>
    381c:	8b e2       	ldi	r24, 0x2B	; 43
    381e:	41 fe       	sbrs	r4, 1
    3820:	80 e2       	ldi	r24, 0x20	; 32
    3822:	47 fc       	sbrc	r4, 7
    3824:	8d e2       	ldi	r24, 0x2D	; 45
    3826:	b7 01       	movw	r22, r14
    3828:	90 e0       	ldi	r25, 0x00	; 0
    382a:	5c cf       	rjmp	.-328    	; 0x36e4 <vfprintf+0x2aa>
    382c:	b7 01       	movw	r22, r14
    382e:	80 e3       	ldi	r24, 0x30	; 48
    3830:	90 e0       	ldi	r25, 0x00	; 0
    3832:	0e 94 36 1c 	call	0x386c	; 0x386c <fputc>
    3836:	9a 94       	dec	r9
    3838:	57 cf       	rjmp	.-338    	; 0x36e8 <vfprintf+0x2ae>
    383a:	8f ef       	ldi	r24, 0xFF	; 255
    383c:	9f ef       	ldi	r25, 0xFF	; 255
    383e:	84 cf       	rjmp	.-248    	; 0x3748 <vfprintf+0x30e>

00003840 <strnlen_P>:
strnlen_P():
    3840:	fc 01       	movw	r30, r24
    3842:	05 90       	lpm	r0, Z+
    3844:	61 50       	subi	r22, 0x01	; 1
    3846:	70 40       	sbci	r23, 0x00	; 0
    3848:	01 10       	cpse	r0, r1
    384a:	d8 f7       	brcc	.-10     	; 0x3842 <strnlen_P+0x2>
    384c:	80 95       	com	r24
    384e:	90 95       	com	r25
    3850:	8e 0f       	add	r24, r30
    3852:	9f 1f       	adc	r25, r31
    3854:	08 95       	ret

00003856 <strnlen>:
strnlen():
    3856:	fc 01       	movw	r30, r24
    3858:	61 50       	subi	r22, 0x01	; 1
    385a:	70 40       	sbci	r23, 0x00	; 0
    385c:	01 90       	ld	r0, Z+
    385e:	01 10       	cpse	r0, r1
    3860:	d8 f7       	brcc	.-10     	; 0x3858 <strnlen+0x2>
    3862:	80 95       	com	r24
    3864:	90 95       	com	r25
    3866:	8e 0f       	add	r24, r30
    3868:	9f 1f       	adc	r25, r31
    386a:	08 95       	ret

0000386c <fputc>:
fputc():
    386c:	0f 93       	push	r16
    386e:	1f 93       	push	r17
    3870:	cf 93       	push	r28
    3872:	df 93       	push	r29
    3874:	18 2f       	mov	r17, r24
    3876:	09 2f       	mov	r16, r25
    3878:	eb 01       	movw	r28, r22
    387a:	8b 81       	ldd	r24, Y+3	; 0x03
    387c:	81 fd       	sbrc	r24, 1
    387e:	09 c0       	rjmp	.+18     	; 0x3892 <fputc+0x26>
    3880:	1f ef       	ldi	r17, 0xFF	; 255
    3882:	0f ef       	ldi	r16, 0xFF	; 255
    3884:	81 2f       	mov	r24, r17
    3886:	90 2f       	mov	r25, r16
    3888:	df 91       	pop	r29
    388a:	cf 91       	pop	r28
    388c:	1f 91       	pop	r17
    388e:	0f 91       	pop	r16
    3890:	08 95       	ret
    3892:	82 ff       	sbrs	r24, 2
    3894:	14 c0       	rjmp	.+40     	; 0x38be <fputc+0x52>
    3896:	2e 81       	ldd	r18, Y+6	; 0x06
    3898:	3f 81       	ldd	r19, Y+7	; 0x07
    389a:	8c 81       	ldd	r24, Y+4	; 0x04
    389c:	9d 81       	ldd	r25, Y+5	; 0x05
    389e:	28 17       	cp	r18, r24
    38a0:	39 07       	cpc	r19, r25
    38a2:	3c f4       	brge	.+14     	; 0x38b2 <fputc+0x46>
    38a4:	e8 81       	ld	r30, Y
    38a6:	f9 81       	ldd	r31, Y+1	; 0x01
    38a8:	cf 01       	movw	r24, r30
    38aa:	01 96       	adiw	r24, 0x01	; 1
    38ac:	99 83       	std	Y+1, r25	; 0x01
    38ae:	88 83       	st	Y, r24
    38b0:	10 83       	st	Z, r17
    38b2:	8e 81       	ldd	r24, Y+6	; 0x06
    38b4:	9f 81       	ldd	r25, Y+7	; 0x07
    38b6:	01 96       	adiw	r24, 0x01	; 1
    38b8:	9f 83       	std	Y+7, r25	; 0x07
    38ba:	8e 83       	std	Y+6, r24	; 0x06
    38bc:	e3 cf       	rjmp	.-58     	; 0x3884 <fputc+0x18>
    38be:	e8 85       	ldd	r30, Y+8	; 0x08
    38c0:	f9 85       	ldd	r31, Y+9	; 0x09
    38c2:	81 2f       	mov	r24, r17
    38c4:	09 95       	icall
    38c6:	89 2b       	or	r24, r25
    38c8:	a1 f3       	breq	.-24     	; 0x38b2 <fputc+0x46>
    38ca:	da cf       	rjmp	.-76     	; 0x3880 <fputc+0x14>

000038cc <__ultoa_invert>:
__ultoa_invert():
    38cc:	fa 01       	movw	r30, r20
    38ce:	aa 27       	eor	r26, r26
    38d0:	28 30       	cpi	r18, 0x08	; 8
    38d2:	51 f1       	breq	.+84     	; 0x3928 <__ultoa_invert+0x5c>
    38d4:	20 31       	cpi	r18, 0x10	; 16
    38d6:	81 f1       	breq	.+96     	; 0x3938 <__ultoa_invert+0x6c>
    38d8:	e8 94       	clt
    38da:	6f 93       	push	r22
    38dc:	6e 7f       	andi	r22, 0xFE	; 254
    38de:	6e 5f       	subi	r22, 0xFE	; 254
    38e0:	7f 4f       	sbci	r23, 0xFF	; 255
    38e2:	8f 4f       	sbci	r24, 0xFF	; 255
    38e4:	9f 4f       	sbci	r25, 0xFF	; 255
    38e6:	af 4f       	sbci	r26, 0xFF	; 255
    38e8:	b1 e0       	ldi	r27, 0x01	; 1
    38ea:	3e d0       	rcall	.+124    	; 0x3968 <__ultoa_invert+0x9c>
    38ec:	b4 e0       	ldi	r27, 0x04	; 4
    38ee:	3c d0       	rcall	.+120    	; 0x3968 <__ultoa_invert+0x9c>
    38f0:	67 0f       	add	r22, r23
    38f2:	78 1f       	adc	r23, r24
    38f4:	89 1f       	adc	r24, r25
    38f6:	9a 1f       	adc	r25, r26
    38f8:	a1 1d       	adc	r26, r1
    38fa:	68 0f       	add	r22, r24
    38fc:	79 1f       	adc	r23, r25
    38fe:	8a 1f       	adc	r24, r26
    3900:	91 1d       	adc	r25, r1
    3902:	a1 1d       	adc	r26, r1
    3904:	6a 0f       	add	r22, r26
    3906:	71 1d       	adc	r23, r1
    3908:	81 1d       	adc	r24, r1
    390a:	91 1d       	adc	r25, r1
    390c:	a1 1d       	adc	r26, r1
    390e:	20 d0       	rcall	.+64     	; 0x3950 <__ultoa_invert+0x84>
    3910:	09 f4       	brne	.+2      	; 0x3914 <__ultoa_invert+0x48>
    3912:	68 94       	set
    3914:	3f 91       	pop	r19
    3916:	2a e0       	ldi	r18, 0x0A	; 10
    3918:	26 9f       	mul	r18, r22
    391a:	11 24       	eor	r1, r1
    391c:	30 19       	sub	r19, r0
    391e:	30 5d       	subi	r19, 0xD0	; 208
    3920:	31 93       	st	Z+, r19
    3922:	de f6       	brtc	.-74     	; 0x38da <__ultoa_invert+0xe>
    3924:	cf 01       	movw	r24, r30
    3926:	08 95       	ret
    3928:	46 2f       	mov	r20, r22
    392a:	47 70       	andi	r20, 0x07	; 7
    392c:	40 5d       	subi	r20, 0xD0	; 208
    392e:	41 93       	st	Z+, r20
    3930:	b3 e0       	ldi	r27, 0x03	; 3
    3932:	0f d0       	rcall	.+30     	; 0x3952 <__ultoa_invert+0x86>
    3934:	c9 f7       	brne	.-14     	; 0x3928 <__ultoa_invert+0x5c>
    3936:	f6 cf       	rjmp	.-20     	; 0x3924 <__ultoa_invert+0x58>
    3938:	46 2f       	mov	r20, r22
    393a:	4f 70       	andi	r20, 0x0F	; 15
    393c:	40 5d       	subi	r20, 0xD0	; 208
    393e:	4a 33       	cpi	r20, 0x3A	; 58
    3940:	18 f0       	brcs	.+6      	; 0x3948 <__ultoa_invert+0x7c>
    3942:	49 5d       	subi	r20, 0xD9	; 217
    3944:	31 fd       	sbrc	r19, 1
    3946:	40 52       	subi	r20, 0x20	; 32
    3948:	41 93       	st	Z+, r20
    394a:	02 d0       	rcall	.+4      	; 0x3950 <__ultoa_invert+0x84>
    394c:	a9 f7       	brne	.-22     	; 0x3938 <__ultoa_invert+0x6c>
    394e:	ea cf       	rjmp	.-44     	; 0x3924 <__ultoa_invert+0x58>
    3950:	b4 e0       	ldi	r27, 0x04	; 4
    3952:	a6 95       	lsr	r26
    3954:	97 95       	ror	r25
    3956:	87 95       	ror	r24
    3958:	77 95       	ror	r23
    395a:	67 95       	ror	r22
    395c:	ba 95       	dec	r27
    395e:	c9 f7       	brne	.-14     	; 0x3952 <__ultoa_invert+0x86>
    3960:	00 97       	sbiw	r24, 0x00	; 0
    3962:	61 05       	cpc	r22, r1
    3964:	71 05       	cpc	r23, r1
    3966:	08 95       	ret
    3968:	9b 01       	movw	r18, r22
    396a:	ac 01       	movw	r20, r24
    396c:	0a 2e       	mov	r0, r26
    396e:	06 94       	lsr	r0
    3970:	57 95       	ror	r21
    3972:	47 95       	ror	r20
    3974:	37 95       	ror	r19
    3976:	27 95       	ror	r18
    3978:	ba 95       	dec	r27
    397a:	c9 f7       	brne	.-14     	; 0x396e <__ultoa_invert+0xa2>
    397c:	62 0f       	add	r22, r18
    397e:	73 1f       	adc	r23, r19
    3980:	84 1f       	adc	r24, r20
    3982:	95 1f       	adc	r25, r21
    3984:	a0 1d       	adc	r26, r0
    3986:	08 95       	ret

00003988 <_exit>:
exit():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2278
    3988:	f8 94       	cli

0000398a <__stop_program>:
__stop_program():
/home/jenkins-mingw32/workspace/avr-gcc-staging/label/Ubuntu14.04x64-mingw32/gcc-build/avr/avr51/libgcc/../../../../gcc/libgcc/config/avr/lib1funcs.S:2280
    398a:	ff cf       	rjmp	.-2      	; 0x398a <__stop_program>
